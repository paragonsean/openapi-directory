/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptReservedNodeExchangeInputMessage from '../model/AcceptReservedNodeExchangeInputMessage';
import AcceptReservedNodeExchangeOutputMessage from '../model/AcceptReservedNodeExchangeOutputMessage';
import AccountAttributeList from '../model/AccountAttributeList';
import AssociateDataShareConsumerMessage from '../model/AssociateDataShareConsumerMessage';
import AuthorizeClusterSecurityGroupIngressMessage from '../model/AuthorizeClusterSecurityGroupIngressMessage';
import AuthorizeClusterSecurityGroupIngressResult from '../model/AuthorizeClusterSecurityGroupIngressResult';
import AuthorizeDataShareMessage from '../model/AuthorizeDataShareMessage';
import AuthorizeEndpointAccessMessage from '../model/AuthorizeEndpointAccessMessage';
import AuthorizeSnapshotAccessMessage from '../model/AuthorizeSnapshotAccessMessage';
import AuthorizeSnapshotAccessResult from '../model/AuthorizeSnapshotAccessResult';
import BatchDeleteClusterSnapshotsRequest from '../model/BatchDeleteClusterSnapshotsRequest';
import BatchDeleteClusterSnapshotsResult from '../model/BatchDeleteClusterSnapshotsResult';
import BatchModifyClusterSnapshotsMessage from '../model/BatchModifyClusterSnapshotsMessage';
import BatchModifyClusterSnapshotsOutputMessage from '../model/BatchModifyClusterSnapshotsOutputMessage';
import CancelResizeMessage from '../model/CancelResizeMessage';
import ClusterCredentials from '../model/ClusterCredentials';
import ClusterDbRevisionsMessage from '../model/ClusterDbRevisionsMessage';
import ClusterExtendedCredentials from '../model/ClusterExtendedCredentials';
import ClusterParameterGroupDetails from '../model/ClusterParameterGroupDetails';
import ClusterParameterGroupNameMessage from '../model/ClusterParameterGroupNameMessage';
import ClusterParameterGroupsMessage from '../model/ClusterParameterGroupsMessage';
import ClusterSecurityGroupMessage from '../model/ClusterSecurityGroupMessage';
import ClusterSubnetGroupMessage from '../model/ClusterSubnetGroupMessage';
import ClusterVersionsMessage from '../model/ClusterVersionsMessage';
import ClustersMessage from '../model/ClustersMessage';
import CopyClusterSnapshotMessage from '../model/CopyClusterSnapshotMessage';
import CopyClusterSnapshotResult from '../model/CopyClusterSnapshotResult';
import CreateAuthenticationProfileMessage from '../model/CreateAuthenticationProfileMessage';
import CreateAuthenticationProfileResult from '../model/CreateAuthenticationProfileResult';
import CreateClusterMessage from '../model/CreateClusterMessage';
import CreateClusterParameterGroupMessage from '../model/CreateClusterParameterGroupMessage';
import CreateClusterParameterGroupResult from '../model/CreateClusterParameterGroupResult';
import CreateClusterResult from '../model/CreateClusterResult';
import CreateClusterSecurityGroupMessage from '../model/CreateClusterSecurityGroupMessage';
import CreateClusterSecurityGroupResult from '../model/CreateClusterSecurityGroupResult';
import CreateClusterSnapshotMessage from '../model/CreateClusterSnapshotMessage';
import CreateClusterSnapshotResult from '../model/CreateClusterSnapshotResult';
import CreateClusterSubnetGroupMessage from '../model/CreateClusterSubnetGroupMessage';
import CreateClusterSubnetGroupResult from '../model/CreateClusterSubnetGroupResult';
import CreateCustomDomainAssociationMessage from '../model/CreateCustomDomainAssociationMessage';
import CreateCustomDomainAssociationResult from '../model/CreateCustomDomainAssociationResult';
import CreateEndpointAccessMessage from '../model/CreateEndpointAccessMessage';
import CreateEventSubscriptionMessage from '../model/CreateEventSubscriptionMessage';
import CreateEventSubscriptionResult from '../model/CreateEventSubscriptionResult';
import CreateHsmClientCertificateMessage from '../model/CreateHsmClientCertificateMessage';
import CreateHsmClientCertificateResult from '../model/CreateHsmClientCertificateResult';
import CreateHsmConfigurationMessage from '../model/CreateHsmConfigurationMessage';
import CreateHsmConfigurationResult from '../model/CreateHsmConfigurationResult';
import CreateScheduledActionMessage from '../model/CreateScheduledActionMessage';
import CreateSnapshotCopyGrantMessage from '../model/CreateSnapshotCopyGrantMessage';
import CreateSnapshotCopyGrantResult from '../model/CreateSnapshotCopyGrantResult';
import CreateSnapshotScheduleMessage from '../model/CreateSnapshotScheduleMessage';
import CreateTagsMessage from '../model/CreateTagsMessage';
import CreateUsageLimitMessage from '../model/CreateUsageLimitMessage';
import CustomDomainAssociationsMessage from '../model/CustomDomainAssociationsMessage';
import CustomerStorageMessage from '../model/CustomerStorageMessage';
import DataShare from '../model/DataShare';
import DeauthorizeDataShareMessage from '../model/DeauthorizeDataShareMessage';
import DeleteAuthenticationProfileMessage from '../model/DeleteAuthenticationProfileMessage';
import DeleteAuthenticationProfileResult from '../model/DeleteAuthenticationProfileResult';
import DeleteClusterMessage from '../model/DeleteClusterMessage';
import DeleteClusterParameterGroupMessage from '../model/DeleteClusterParameterGroupMessage';
import DeleteClusterResult from '../model/DeleteClusterResult';
import DeleteClusterSecurityGroupMessage from '../model/DeleteClusterSecurityGroupMessage';
import DeleteClusterSnapshotMessage from '../model/DeleteClusterSnapshotMessage';
import DeleteClusterSnapshotResult from '../model/DeleteClusterSnapshotResult';
import DeleteClusterSubnetGroupMessage from '../model/DeleteClusterSubnetGroupMessage';
import DeleteCustomDomainAssociationMessage from '../model/DeleteCustomDomainAssociationMessage';
import DeleteEndpointAccessMessage from '../model/DeleteEndpointAccessMessage';
import DeleteEventSubscriptionMessage from '../model/DeleteEventSubscriptionMessage';
import DeleteHsmClientCertificateMessage from '../model/DeleteHsmClientCertificateMessage';
import DeleteHsmConfigurationMessage from '../model/DeleteHsmConfigurationMessage';
import DeleteScheduledActionMessage from '../model/DeleteScheduledActionMessage';
import DeleteSnapshotCopyGrantMessage from '../model/DeleteSnapshotCopyGrantMessage';
import DeleteSnapshotScheduleMessage from '../model/DeleteSnapshotScheduleMessage';
import DeleteTagsMessage from '../model/DeleteTagsMessage';
import DeleteUsageLimitMessage from '../model/DeleteUsageLimitMessage';
import DescribeAccountAttributesMessage from '../model/DescribeAccountAttributesMessage';
import DescribeAuthenticationProfilesMessage from '../model/DescribeAuthenticationProfilesMessage';
import DescribeAuthenticationProfilesResult from '../model/DescribeAuthenticationProfilesResult';
import DescribeClusterDbRevisionsMessage from '../model/DescribeClusterDbRevisionsMessage';
import DescribeClusterParameterGroupsMessage from '../model/DescribeClusterParameterGroupsMessage';
import DescribeClusterParametersMessage from '../model/DescribeClusterParametersMessage';
import DescribeClusterSecurityGroupsMessage from '../model/DescribeClusterSecurityGroupsMessage';
import DescribeClusterSnapshotsMessage from '../model/DescribeClusterSnapshotsMessage';
import DescribeClusterSubnetGroupsMessage from '../model/DescribeClusterSubnetGroupsMessage';
import DescribeClusterTracksMessage from '../model/DescribeClusterTracksMessage';
import DescribeClusterVersionsMessage from '../model/DescribeClusterVersionsMessage';
import DescribeClustersMessage from '../model/DescribeClustersMessage';
import DescribeCustomDomainAssociationsMessage from '../model/DescribeCustomDomainAssociationsMessage';
import DescribeDataSharesForConsumerMessage from '../model/DescribeDataSharesForConsumerMessage';
import DescribeDataSharesForConsumerResult from '../model/DescribeDataSharesForConsumerResult';
import DescribeDataSharesForProducerMessage from '../model/DescribeDataSharesForProducerMessage';
import DescribeDataSharesForProducerResult from '../model/DescribeDataSharesForProducerResult';
import DescribeDataSharesMessage from '../model/DescribeDataSharesMessage';
import DescribeDataSharesResult from '../model/DescribeDataSharesResult';
import DescribeDefaultClusterParametersMessage from '../model/DescribeDefaultClusterParametersMessage';
import DescribeDefaultClusterParametersResult from '../model/DescribeDefaultClusterParametersResult';
import DescribeEndpointAccessMessage from '../model/DescribeEndpointAccessMessage';
import DescribeEndpointAuthorizationMessage from '../model/DescribeEndpointAuthorizationMessage';
import DescribeEventCategoriesMessage from '../model/DescribeEventCategoriesMessage';
import DescribeEventSubscriptionsMessage from '../model/DescribeEventSubscriptionsMessage';
import DescribeEventsMessage from '../model/DescribeEventsMessage';
import DescribeHsmClientCertificatesMessage from '../model/DescribeHsmClientCertificatesMessage';
import DescribeHsmConfigurationsMessage from '../model/DescribeHsmConfigurationsMessage';
import DescribeLoggingStatusMessage from '../model/DescribeLoggingStatusMessage';
import DescribeNodeConfigurationOptionsMessage from '../model/DescribeNodeConfigurationOptionsMessage';
import DescribeOrderableClusterOptionsMessage from '../model/DescribeOrderableClusterOptionsMessage';
import DescribePartnersInputMessage from '../model/DescribePartnersInputMessage';
import DescribePartnersOutputMessage from '../model/DescribePartnersOutputMessage';
import DescribeReservedNodeExchangeStatusInputMessage from '../model/DescribeReservedNodeExchangeStatusInputMessage';
import DescribeReservedNodeExchangeStatusOutputMessage from '../model/DescribeReservedNodeExchangeStatusOutputMessage';
import DescribeReservedNodeOfferingsMessage from '../model/DescribeReservedNodeOfferingsMessage';
import DescribeReservedNodesMessage from '../model/DescribeReservedNodesMessage';
import DescribeResizeMessage from '../model/DescribeResizeMessage';
import DescribeScheduledActionsMessage from '../model/DescribeScheduledActionsMessage';
import DescribeSnapshotCopyGrantsMessage from '../model/DescribeSnapshotCopyGrantsMessage';
import DescribeSnapshotSchedulesMessage from '../model/DescribeSnapshotSchedulesMessage';
import DescribeSnapshotSchedulesOutputMessage from '../model/DescribeSnapshotSchedulesOutputMessage';
import DescribeTableRestoreStatusMessage from '../model/DescribeTableRestoreStatusMessage';
import DescribeTagsMessage from '../model/DescribeTagsMessage';
import DescribeUsageLimitsMessage from '../model/DescribeUsageLimitsMessage';
import DisableLoggingMessage from '../model/DisableLoggingMessage';
import DisableSnapshotCopyMessage from '../model/DisableSnapshotCopyMessage';
import DisableSnapshotCopyResult from '../model/DisableSnapshotCopyResult';
import DisassociateDataShareConsumerMessage from '../model/DisassociateDataShareConsumerMessage';
import EnableLoggingMessage from '../model/EnableLoggingMessage';
import EnableSnapshotCopyMessage from '../model/EnableSnapshotCopyMessage';
import EnableSnapshotCopyResult from '../model/EnableSnapshotCopyResult';
import EndpointAccess from '../model/EndpointAccess';
import EndpointAccessList from '../model/EndpointAccessList';
import EndpointAuthorization from '../model/EndpointAuthorization';
import EndpointAuthorizationList from '../model/EndpointAuthorizationList';
import EventCategoriesMessage from '../model/EventCategoriesMessage';
import EventSubscriptionsMessage from '../model/EventSubscriptionsMessage';
import EventsMessage from '../model/EventsMessage';
import GETBatchDeleteClusterSnapshotsIdentifiersParameterInner from '../model/GETBatchDeleteClusterSnapshotsIdentifiersParameterInner';
import GETCreateClusterTagsParameterInner from '../model/GETCreateClusterTagsParameterInner';
import GETCreateScheduledActionTargetActionParameter from '../model/GETCreateScheduledActionTargetActionParameter';
import GETDescribeClusterSnapshotsSortingEntitiesParameterInner from '../model/GETDescribeClusterSnapshotsSortingEntitiesParameterInner';
import GETDescribeNodeConfigurationOptionsFilterParameterInner from '../model/GETDescribeNodeConfigurationOptionsFilterParameterInner';
import GETDescribeScheduledActionsFiltersParameterInner from '../model/GETDescribeScheduledActionsFiltersParameterInner';
import GETModifyClusterParameterGroupParametersParameterInner from '../model/GETModifyClusterParameterGroupParametersParameterInner';
import GetClusterCredentialsMessage from '../model/GetClusterCredentialsMessage';
import GetClusterCredentialsWithIAMMessage from '../model/GetClusterCredentialsWithIAMMessage';
import GetReservedNodeExchangeConfigurationOptionsInputMessage from '../model/GetReservedNodeExchangeConfigurationOptionsInputMessage';
import GetReservedNodeExchangeConfigurationOptionsOutputMessage from '../model/GetReservedNodeExchangeConfigurationOptionsOutputMessage';
import GetReservedNodeExchangeOfferingsInputMessage from '../model/GetReservedNodeExchangeOfferingsInputMessage';
import GetReservedNodeExchangeOfferingsOutputMessage from '../model/GetReservedNodeExchangeOfferingsOutputMessage';
import HsmClientCertificateMessage from '../model/HsmClientCertificateMessage';
import HsmConfigurationMessage from '../model/HsmConfigurationMessage';
import LoggingStatus from '../model/LoggingStatus';
import ModifyAquaInputMessage from '../model/ModifyAquaInputMessage';
import ModifyAquaOutputMessage from '../model/ModifyAquaOutputMessage';
import ModifyAuthenticationProfileMessage from '../model/ModifyAuthenticationProfileMessage';
import ModifyAuthenticationProfileResult from '../model/ModifyAuthenticationProfileResult';
import ModifyClusterDbRevisionMessage from '../model/ModifyClusterDbRevisionMessage';
import ModifyClusterDbRevisionResult from '../model/ModifyClusterDbRevisionResult';
import ModifyClusterIamRolesMessage from '../model/ModifyClusterIamRolesMessage';
import ModifyClusterIamRolesResult from '../model/ModifyClusterIamRolesResult';
import ModifyClusterMaintenanceMessage from '../model/ModifyClusterMaintenanceMessage';
import ModifyClusterMaintenanceResult from '../model/ModifyClusterMaintenanceResult';
import ModifyClusterMessage from '../model/ModifyClusterMessage';
import ModifyClusterParameterGroupMessage from '../model/ModifyClusterParameterGroupMessage';
import ModifyClusterResult from '../model/ModifyClusterResult';
import ModifyClusterSnapshotMessage from '../model/ModifyClusterSnapshotMessage';
import ModifyClusterSnapshotResult from '../model/ModifyClusterSnapshotResult';
import ModifyClusterSnapshotScheduleMessage from '../model/ModifyClusterSnapshotScheduleMessage';
import ModifyClusterSubnetGroupMessage from '../model/ModifyClusterSubnetGroupMessage';
import ModifyClusterSubnetGroupResult from '../model/ModifyClusterSubnetGroupResult';
import ModifyCustomDomainAssociationMessage from '../model/ModifyCustomDomainAssociationMessage';
import ModifyCustomDomainAssociationResult from '../model/ModifyCustomDomainAssociationResult';
import ModifyEndpointAccessMessage from '../model/ModifyEndpointAccessMessage';
import ModifyEventSubscriptionMessage from '../model/ModifyEventSubscriptionMessage';
import ModifyEventSubscriptionResult from '../model/ModifyEventSubscriptionResult';
import ModifyScheduledActionMessage from '../model/ModifyScheduledActionMessage';
import ModifySnapshotCopyRetentionPeriodMessage from '../model/ModifySnapshotCopyRetentionPeriodMessage';
import ModifySnapshotCopyRetentionPeriodResult from '../model/ModifySnapshotCopyRetentionPeriodResult';
import ModifySnapshotScheduleMessage from '../model/ModifySnapshotScheduleMessage';
import ModifyUsageLimitMessage from '../model/ModifyUsageLimitMessage';
import NodeConfigurationOptionsMessage from '../model/NodeConfigurationOptionsMessage';
import OrderableClusterOptionsMessage from '../model/OrderableClusterOptionsMessage';
import PartnerIntegrationInputMessage from '../model/PartnerIntegrationInputMessage';
import PartnerIntegrationOutputMessage from '../model/PartnerIntegrationOutputMessage';
import PauseClusterMessage from '../model/PauseClusterMessage';
import PauseClusterResult from '../model/PauseClusterResult';
import PurchaseReservedNodeOfferingMessage from '../model/PurchaseReservedNodeOfferingMessage';
import PurchaseReservedNodeOfferingResult from '../model/PurchaseReservedNodeOfferingResult';
import RebootClusterMessage from '../model/RebootClusterMessage';
import RebootClusterResult from '../model/RebootClusterResult';
import RejectDataShareMessage from '../model/RejectDataShareMessage';
import ReservedNodeOfferingsMessage from '../model/ReservedNodeOfferingsMessage';
import ReservedNodesMessage from '../model/ReservedNodesMessage';
import ResetClusterParameterGroupMessage from '../model/ResetClusterParameterGroupMessage';
import ResizeClusterMessage from '../model/ResizeClusterMessage';
import ResizeClusterResult from '../model/ResizeClusterResult';
import ResizeProgressMessage from '../model/ResizeProgressMessage';
import RestoreFromClusterSnapshotMessage from '../model/RestoreFromClusterSnapshotMessage';
import RestoreFromClusterSnapshotResult from '../model/RestoreFromClusterSnapshotResult';
import RestoreTableFromClusterSnapshotMessage from '../model/RestoreTableFromClusterSnapshotMessage';
import RestoreTableFromClusterSnapshotResult from '../model/RestoreTableFromClusterSnapshotResult';
import ResumeClusterMessage from '../model/ResumeClusterMessage';
import ResumeClusterResult from '../model/ResumeClusterResult';
import RevokeClusterSecurityGroupIngressMessage from '../model/RevokeClusterSecurityGroupIngressMessage';
import RevokeClusterSecurityGroupIngressResult from '../model/RevokeClusterSecurityGroupIngressResult';
import RevokeEndpointAccessMessage from '../model/RevokeEndpointAccessMessage';
import RevokeSnapshotAccessMessage from '../model/RevokeSnapshotAccessMessage';
import RevokeSnapshotAccessResult from '../model/RevokeSnapshotAccessResult';
import RotateEncryptionKeyMessage from '../model/RotateEncryptionKeyMessage';
import RotateEncryptionKeyResult from '../model/RotateEncryptionKeyResult';
import ScheduledAction from '../model/ScheduledAction';
import ScheduledActionsMessage from '../model/ScheduledActionsMessage';
import SnapshotCopyGrantMessage from '../model/SnapshotCopyGrantMessage';
import SnapshotMessage from '../model/SnapshotMessage';
import SnapshotSchedule from '../model/SnapshotSchedule';
import TableRestoreStatusMessage from '../model/TableRestoreStatusMessage';
import TaggedResourceListMessage from '../model/TaggedResourceListMessage';
import TrackListMessage from '../model/TrackListMessage';
import UpdatePartnerStatusInputMessage from '../model/UpdatePartnerStatusInputMessage';
import UsageLimit from '../model/UsageLimit';
import UsageLimitList from '../model/UsageLimitList';

/**
* Default service.
* @module api/DefaultApi
* @version 2012-12-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gETAcceptReservedNodeExchange operation.
     * @callback module:api/DefaultApi~gETAcceptReservedNodeExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptReservedNodeExchangeOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
     * @param {String} reservedNodeId A string representing the node identifier of the DC1 Reserved Node to be exchanged.
     * @param {String} targetReservedNodeOfferingId The unique identifier of the DC2 Reserved Node offering to be used for the exchange. You can obtain the value for the parameter by calling <a>GetReservedNodeExchangeOfferings</a> 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAcceptReservedNodeExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptReservedNodeExchangeOutputMessage}
     */
    gETAcceptReservedNodeExchange(reservedNodeId, targetReservedNodeOfferingId, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reservedNodeId' is set
      if (reservedNodeId === undefined || reservedNodeId === null) {
        throw new Error("Missing the required parameter 'reservedNodeId' when calling gETAcceptReservedNodeExchange");
      }
      // verify the required parameter 'targetReservedNodeOfferingId' is set
      if (targetReservedNodeOfferingId === undefined || targetReservedNodeOfferingId === null) {
        throw new Error("Missing the required parameter 'targetReservedNodeOfferingId' when calling gETAcceptReservedNodeExchange");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAcceptReservedNodeExchange");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAcceptReservedNodeExchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'ReservedNodeId': reservedNodeId,
        'TargetReservedNodeOfferingId': targetReservedNodeOfferingId,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AcceptReservedNodeExchangeOutputMessage;
      return this.apiClient.callApi(
        '/#Action=AcceptReservedNodeExchange', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAddPartner operation.
     * @callback module:api/DefaultApi~gETAddPartnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerIntegrationOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a partner integration to a cluster. This operation authorizes a partner to push status updates for the specified database. To complete the integration, you also set up the integration on the partner website.
     * @param {String} accountId The Amazon Web Services account ID that owns the cluster.
     * @param {String} clusterIdentifier The cluster identifier of the cluster that receives data from the partner.
     * @param {String} databaseName The name of the database that receives data from the partner.
     * @param {String} partnerName The name of the partner that is authorized to send data.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAddPartnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerIntegrationOutputMessage}
     */
    gETAddPartner(accountId, clusterIdentifier, databaseName, partnerName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling gETAddPartner");
      }
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETAddPartner");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gETAddPartner");
      }
      // verify the required parameter 'partnerName' is set
      if (partnerName === undefined || partnerName === null) {
        throw new Error("Missing the required parameter 'partnerName' when calling gETAddPartner");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAddPartner");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAddPartner");
      }

      let pathParams = {
      };
      let queryParams = {
        'AccountId': accountId,
        'ClusterIdentifier': clusterIdentifier,
        'DatabaseName': databaseName,
        'PartnerName': partnerName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PartnerIntegrationOutputMessage;
      return this.apiClient.callApi(
        '/#Action=AddPartner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAssociateDataShareConsumer operation.
     * @callback module:api/DefaultApi~gETAssociateDataShareConsumerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare consumer account, associates a datashare with the account (AssociateEntireAccount) or the specified namespace (ConsumerArn). If you make this association, the consumer can consume the datashare.
     * @param {String} dataShareArn The Amazon Resource Name (ARN) of the datashare that the consumer is to use with the account or the namespace.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [associateEntireAccount] A value that specifies whether the datashare is associated with the entire account.
     * @param {String} [consumerArn] The Amazon Resource Name (ARN) of the consumer that is associated with the datashare.
     * @param {String} [consumerRegion] From a datashare consumer account, associates a datashare with all existing and future namespaces in the specified Amazon Web Services Region.
     * @param {module:api/DefaultApi~gETAssociateDataShareConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    gETAssociateDataShareConsumer(dataShareArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataShareArn' is set
      if (dataShareArn === undefined || dataShareArn === null) {
        throw new Error("Missing the required parameter 'dataShareArn' when calling gETAssociateDataShareConsumer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAssociateDataShareConsumer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAssociateDataShareConsumer");
      }

      let pathParams = {
      };
      let queryParams = {
        'DataShareArn': dataShareArn,
        'AssociateEntireAccount': opts['associateEntireAccount'],
        'ConsumerArn': opts['consumerArn'],
        'ConsumerRegion': opts['consumerRegion'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=AssociateDataShareConsumer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAuthorizeClusterSecurityGroupIngress operation.
     * @callback module:api/DefaultApi~gETAuthorizeClusterSecurityGroupIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeClusterSecurityGroupIngressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same Amazon Web Services Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterSecurityGroupName The name of the security group to which the ingress rule is added.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [CIDRIP] The IP range to be added the Amazon Redshift security group.
     * @param {String} [eC2SecurityGroupName] The EC2 security group to be added the Amazon Redshift security group.
     * @param {String} [eC2SecurityGroupOwnerId] <p>The Amazon Web Services account number of the owner of the security group specified by the <i>EC2SecurityGroupName</i> parameter. The Amazon Web Services Access Key ID is not an acceptable value. </p> <p>Example: <code>111122223333</code> </p>
     * @param {module:api/DefaultApi~gETAuthorizeClusterSecurityGroupIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeClusterSecurityGroupIngressResult}
     */
    gETAuthorizeClusterSecurityGroupIngress(clusterSecurityGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSecurityGroupName' is set
      if (clusterSecurityGroupName === undefined || clusterSecurityGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSecurityGroupName' when calling gETAuthorizeClusterSecurityGroupIngress");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAuthorizeClusterSecurityGroupIngress");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAuthorizeClusterSecurityGroupIngress");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSecurityGroupName': clusterSecurityGroupName,
        'CIDRIP': opts['CIDRIP'],
        'EC2SecurityGroupName': opts['eC2SecurityGroupName'],
        'EC2SecurityGroupOwnerId': opts['eC2SecurityGroupOwnerId'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AuthorizeClusterSecurityGroupIngressResult;
      return this.apiClient.callApi(
        '/#Action=AuthorizeClusterSecurityGroupIngress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAuthorizeDataShare operation.
     * @callback module:api/DefaultApi~gETAuthorizeDataShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a data producer account, authorizes the sharing of a datashare with one or more consumer accounts or managing entities. To authorize a datashare for a data consumer, the producer account must have the correct access permissions.
     * @param {String} dataShareArn The Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
     * @param {String} consumerIdentifier The identifier of the data consumer that is authorized to access the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETAuthorizeDataShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    gETAuthorizeDataShare(dataShareArn, consumerIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataShareArn' is set
      if (dataShareArn === undefined || dataShareArn === null) {
        throw new Error("Missing the required parameter 'dataShareArn' when calling gETAuthorizeDataShare");
      }
      // verify the required parameter 'consumerIdentifier' is set
      if (consumerIdentifier === undefined || consumerIdentifier === null) {
        throw new Error("Missing the required parameter 'consumerIdentifier' when calling gETAuthorizeDataShare");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAuthorizeDataShare");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAuthorizeDataShare");
      }

      let pathParams = {
      };
      let queryParams = {
        'DataShareArn': dataShareArn,
        'ConsumerIdentifier': consumerIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=AuthorizeDataShare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAuthorizeEndpointAccess operation.
     * @callback module:api/DefaultApi~gETAuthorizeEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAuthorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grants access to a cluster.
     * @param {String} account The Amazon Web Services account ID to grant access to.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The cluster identifier of the cluster to grant access to.
     * @param {Array.<String>} [vpcIds] The virtual private cloud (VPC) identifiers to grant access to.
     * @param {module:api/DefaultApi~gETAuthorizeEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAuthorization}
     */
    gETAuthorizeEndpointAccess(account, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'account' is set
      if (account === undefined || account === null) {
        throw new Error("Missing the required parameter 'account' when calling gETAuthorizeEndpointAccess");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAuthorizeEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAuthorizeEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'Account': account,
        'VpcIds': this.apiClient.buildCollectionParam(opts['vpcIds'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAuthorization;
      return this.apiClient.callApi(
        '/#Action=AuthorizeEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETAuthorizeSnapshotAccess operation.
     * @callback module:api/DefaultApi~gETAuthorizeSnapshotAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeSnapshotAccessResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Authorizes the specified Amazon Web Services account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} accountWithRestoreAccess <p>The identifier of the Amazon Web Services account authorized to restore the specified snapshot.</p> <p>To share a snapshot with Amazon Web Services Support, specify amazon-redshift-support.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snapshotIdentifier] The identifier of the snapshot the account is authorized to restore.
     * @param {String} [snapshotArn] The Amazon Resource Name (ARN) of the snapshot to authorize access to.
     * @param {String} [snapshotClusterIdentifier] The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
     * @param {module:api/DefaultApi~gETAuthorizeSnapshotAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeSnapshotAccessResult}
     */
    gETAuthorizeSnapshotAccess(accountWithRestoreAccess, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountWithRestoreAccess' is set
      if (accountWithRestoreAccess === undefined || accountWithRestoreAccess === null) {
        throw new Error("Missing the required parameter 'accountWithRestoreAccess' when calling gETAuthorizeSnapshotAccess");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETAuthorizeSnapshotAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETAuthorizeSnapshotAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotIdentifier': opts['snapshotIdentifier'],
        'SnapshotArn': opts['snapshotArn'],
        'SnapshotClusterIdentifier': opts['snapshotClusterIdentifier'],
        'AccountWithRestoreAccess': accountWithRestoreAccess,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AuthorizeSnapshotAccessResult;
      return this.apiClient.callApi(
        '/#Action=AuthorizeSnapshotAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETBatchDeleteClusterSnapshots operation.
     * @callback module:api/DefaultApi~gETBatchDeleteClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteClusterSnapshotsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a set of cluster snapshots.
     * @param {Array.<module:model/GETBatchDeleteClusterSnapshotsIdentifiersParameterInner>} identifiers A list of identifiers for the snapshots that you want to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETBatchDeleteClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteClusterSnapshotsResult}
     */
    gETBatchDeleteClusterSnapshots(identifiers, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'identifiers' is set
      if (identifiers === undefined || identifiers === null) {
        throw new Error("Missing the required parameter 'identifiers' when calling gETBatchDeleteClusterSnapshots");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETBatchDeleteClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETBatchDeleteClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'Identifiers': this.apiClient.buildCollectionParam(identifiers, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = BatchDeleteClusterSnapshotsResult;
      return this.apiClient.callApi(
        '/#Action=BatchDeleteClusterSnapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETBatchModifyClusterSnapshots operation.
     * @callback module:api/DefaultApi~gETBatchModifyClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchModifyClusterSnapshotsOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the settings for a set of cluster snapshots.
     * @param {Array.<String>} snapshotIdentifierList A list of snapshot identifiers you want to modify.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The number of days that a manual snapshot is retained. If you specify the value -1, the manual snapshot is retained indefinitely.</p> <p>The number must be either -1 or an integer between 1 and 3,653.</p> <p>If you decrease the manual snapshot retention period from its current value, existing manual snapshots that fall outside of the new retention period will return an error. If you want to suppress the errors and delete the snapshots, use the force option. </p>
     * @param {Boolean} [force] A boolean value indicating whether to override an exception if the retention period has passed. 
     * @param {module:api/DefaultApi~gETBatchModifyClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchModifyClusterSnapshotsOutputMessage}
     */
    gETBatchModifyClusterSnapshots(snapshotIdentifierList, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotIdentifierList' is set
      if (snapshotIdentifierList === undefined || snapshotIdentifierList === null) {
        throw new Error("Missing the required parameter 'snapshotIdentifierList' when calling gETBatchModifyClusterSnapshots");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETBatchModifyClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETBatchModifyClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotIdentifierList': this.apiClient.buildCollectionParam(snapshotIdentifierList, 'multi'),
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'Force': opts['force'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = BatchModifyClusterSnapshotsOutputMessage;
      return this.apiClient.callApi(
        '/#Action=BatchModifyClusterSnapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCancelResize operation.
     * @callback module:api/DefaultApi~gETCancelResizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResizeProgressMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a resize operation for a cluster.
     * @param {String} clusterIdentifier The unique identifier for the cluster that you want to cancel a resize operation for.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCancelResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResizeProgressMessage}
     */
    gETCancelResize(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETCancelResize");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCancelResize");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCancelResize");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ResizeProgressMessage;
      return this.apiClient.callApi(
        '/#Action=CancelResize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCopyClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETCopyClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} sourceSnapshotIdentifier <p>The identifier for the source snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid automated snapshot whose state is <code>available</code>.</p> </li> </ul>
     * @param {String} targetSnapshotIdentifier <p>The identifier given to the new manual snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for the Amazon Web Services account that is making the request.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceSnapshotClusterIdentifier] <p>The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier for a valid cluster.</p> </li> </ul>
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
     * @param {module:api/DefaultApi~gETCopyClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyClusterSnapshotResult}
     */
    gETCopyClusterSnapshot(sourceSnapshotIdentifier, targetSnapshotIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sourceSnapshotIdentifier' is set
      if (sourceSnapshotIdentifier === undefined || sourceSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'sourceSnapshotIdentifier' when calling gETCopyClusterSnapshot");
      }
      // verify the required parameter 'targetSnapshotIdentifier' is set
      if (targetSnapshotIdentifier === undefined || targetSnapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'targetSnapshotIdentifier' when calling gETCopyClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCopyClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCopyClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceSnapshotIdentifier': sourceSnapshotIdentifier,
        'SourceSnapshotClusterIdentifier': opts['sourceSnapshotClusterIdentifier'],
        'TargetSnapshotIdentifier': targetSnapshotIdentifier,
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CopyClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CopyClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateAuthenticationProfile operation.
     * @callback module:api/DefaultApi~gETCreateAuthenticationProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthenticationProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an authentication profile with the specified parameters.
     * @param {String} authenticationProfileName The name of the authentication profile to be created.
     * @param {String} authenticationProfileContent The content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateAuthenticationProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthenticationProfileResult}
     */
    gETCreateAuthenticationProfile(authenticationProfileName, authenticationProfileContent, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authenticationProfileName' is set
      if (authenticationProfileName === undefined || authenticationProfileName === null) {
        throw new Error("Missing the required parameter 'authenticationProfileName' when calling gETCreateAuthenticationProfile");
      }
      // verify the required parameter 'authenticationProfileContent' is set
      if (authenticationProfileContent === undefined || authenticationProfileContent === null) {
        throw new Error("Missing the required parameter 'authenticationProfileContent' when calling gETCreateAuthenticationProfile");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateAuthenticationProfile");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateAuthenticationProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'AuthenticationProfileName': authenticationProfileName,
        'AuthenticationProfileContent': authenticationProfileContent,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateAuthenticationProfileResult;
      return this.apiClient.callApi(
        '/#Action=CreateAuthenticationProfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateCluster operation.
     * @callback module:api/DefaultApi~gETCreateClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterIdentifier <p>A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul> <p>Example: <code>myexamplecluster</code> </p>
     * @param {String} nodeType <p>The node type to be provisioned for the cluster. For information about node types, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes\"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.xlplus</code> | <code>ra3.4xlarge</code> | <code>ra3.16xlarge</code> </p>
     * @param {String} masterUsername <p>The user name associated with the admin user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 - 128 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Must not contain a colon (:) or a slash (/).</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
     * @param {String} masterUserPassword <p>The password associated with the admin user account for the cluster that is being created.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33-126) except <code>'</code> (single quote), <code>\"</code> (double quote), <code>\\</code>, <code>/</code>, or <code>@</code>.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dBName] <p>The name of the first database to be created when the cluster is created.</p> <p>To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/t_creating_database.html\">Create a Database</a> in the Amazon Redshift Database Developer Guide. </p> <p>Default: <code>dev</code> </p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 alphanumeric characters.</p> </li> <li> <p>Must contain only lowercase letters.</p> </li> <li> <p>Cannot be a word that is reserved by the service. A list of reserved words can be found in <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\">Reserved Words</a> in the Amazon Redshift Database Developer Guide. </p> </li> </ul>
     * @param {String} [clusterType] <p>The type of the cluster. When cluster type is specified as</p> <ul> <li> <p> <code>single-node</code>, the <b>NumberOfNodes</b> parameter is not required.</p> </li> <li> <p> <code>multi-node</code>, the <b>NumberOfNodes</b> parameter is required.</p> </li> </ul> <p>Valid Values: <code>multi-node</code> | <code>single-node</code> </p> <p>Default: <code>multi-node</code> </p>
     * @param {Array.<String>} [clusterSecurityGroups] <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p>
     * @param {Array.<String>} [vpcSecurityGroupIds] <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p>
     * @param {String} [clusterSubnetGroupName] <p>The name of a cluster subnet group to be associated with this cluster.</p> <p>If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).</p>
     * @param {String} [availabilityZone] <p>The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency.</p> <p>Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint.</p> <p>Example: <code>us-east-2d</code> </p> <p>Constraint: The specified Availability Zone must be in the same region as the current endpoint.</p>
     * @param {String} [preferredMaintenanceWindow] <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows\">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
     * @param {String} [clusterParameterGroupName] <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Working with Amazon Redshift Parameter Groups</a> </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
     * @param {Number} [automatedSnapshotRetentionPeriod] <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p> <p>Default: <code>1</code> </p> <p>Constraints: Must be a value from 0 to 35.</p>
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
     * @param {Number} [port] <p>The port number on which the cluster accepts incoming connections.</p> <p>The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections.</p> <p>Default: <code>5439</code> </p> <p>Valid Values: <code>1150-65535</code> </p>
     * @param {String} [clusterVersion] <p>The version of the Amazon Redshift engine software that you want to deploy on the cluster.</p> <p>The version selected runs on all the nodes in the cluster.</p> <p>Constraints: Only version 1.0 is currently available.</p> <p>Example: <code>1.0</code> </p>
     * @param {Boolean} [allowVersionUpgrade] <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.</p> <p>When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster.</p> <p>Default: <code>true</code> </p>
     * @param {Number} [numberOfNodes] <p>The number of compute nodes in the cluster. This parameter is required when the <b>ClusterType</b> parameter is specified as <code>multi-node</code>. </p> <p>For information about determining how many nodes you need, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#how-many-nodes\"> Working with Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p> <p>If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster.</p> <p>Default: <code>1</code> </p> <p>Constraints: Value must be at least 1 and no more than 100.</p>
     * @param {Boolean} [publiclyAccessible] If <code>true</code>, the cluster can be accessed from a public network. 
     * @param {Boolean} [encrypted] <p>If <code>true</code>, the data in the cluster is encrypted at rest. </p> <p>Default: false</p>
     * @param {String} [hsmClientCertificateIdentifier] Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
     * @param {String} [hsmConfigurationIdentifier] Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
     * @param {String} [elasticIp] <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on. For more information about provisioning clusters in EC2-VPC, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms\">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {String} [kmsKeyId] The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
     * @param {Boolean} [enhancedVpcRouting] <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html\">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
     * @param {String} [additionalInfo] Reserved.
     * @param {Array.<String>} [iamRoles] <p>A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. </p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html\">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} [maintenanceTrackName] An optional parameter for the name of the maintenance track for the cluster. If you don't provide a maintenance track name, the cluster is assigned to the <code>current</code> track.
     * @param {String} [snapshotScheduleIdentifier] A unique identifier for the snapshot schedule.
     * @param {Boolean} [availabilityZoneRelocation] The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is created.
     * @param {module:model/String} [aquaConfigurationStatus] This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
     * @param {String} [defaultIamRoleArn] The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created. 
     * @param {String} [loadSampleData] A flag that specifies whether to load sample data once the cluster is created.
     * @param {module:api/DefaultApi~gETCreateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterResult}
     */
    gETCreateCluster(clusterIdentifier, nodeType, masterUsername, masterUserPassword, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETCreateCluster");
      }
      // verify the required parameter 'nodeType' is set
      if (nodeType === undefined || nodeType === null) {
        throw new Error("Missing the required parameter 'nodeType' when calling gETCreateCluster");
      }
      // verify the required parameter 'masterUsername' is set
      if (masterUsername === undefined || masterUsername === null) {
        throw new Error("Missing the required parameter 'masterUsername' when calling gETCreateCluster");
      }
      // verify the required parameter 'masterUserPassword' is set
      if (masterUserPassword === undefined || masterUserPassword === null) {
        throw new Error("Missing the required parameter 'masterUserPassword' when calling gETCreateCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'DBName': opts['dBName'],
        'ClusterIdentifier': clusterIdentifier,
        'ClusterType': opts['clusterType'],
        'NodeType': nodeType,
        'MasterUsername': masterUsername,
        'MasterUserPassword': masterUserPassword,
        'ClusterSecurityGroups': this.apiClient.buildCollectionParam(opts['clusterSecurityGroups'], 'multi'),
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'ClusterSubnetGroupName': opts['clusterSubnetGroupName'],
        'AvailabilityZone': opts['availabilityZone'],
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'ClusterParameterGroupName': opts['clusterParameterGroupName'],
        'AutomatedSnapshotRetentionPeriod': opts['automatedSnapshotRetentionPeriod'],
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'Port': opts['port'],
        'ClusterVersion': opts['clusterVersion'],
        'AllowVersionUpgrade': opts['allowVersionUpgrade'],
        'NumberOfNodes': opts['numberOfNodes'],
        'PubliclyAccessible': opts['publiclyAccessible'],
        'Encrypted': opts['encrypted'],
        'HsmClientCertificateIdentifier': opts['hsmClientCertificateIdentifier'],
        'HsmConfigurationIdentifier': opts['hsmConfigurationIdentifier'],
        'ElasticIp': opts['elasticIp'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'KmsKeyId': opts['kmsKeyId'],
        'EnhancedVpcRouting': opts['enhancedVpcRouting'],
        'AdditionalInfo': opts['additionalInfo'],
        'IamRoles': this.apiClient.buildCollectionParam(opts['iamRoles'], 'multi'),
        'MaintenanceTrackName': opts['maintenanceTrackName'],
        'SnapshotScheduleIdentifier': opts['snapshotScheduleIdentifier'],
        'AvailabilityZoneRelocation': opts['availabilityZoneRelocation'],
        'AquaConfigurationStatus': opts['aquaConfigurationStatus'],
        'DefaultIamRoleArn': opts['defaultIamRoleArn'],
        'LoadSampleData': opts['loadSampleData'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateClusterResult;
      return this.apiClient.callApi(
        '/#Action=CreateCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETCreateClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} parameterGroupName <p>The name of the cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique withing your Amazon Web Services account.</p> </li> </ul> <note> <p>This value is stored as a lower-case string.</p> </note>
     * @param {String} parameterGroupFamily <p>The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters.</p> <p>To get a list of valid parameter group family names, you can call <a>DescribeClusterParameterGroups</a>. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your Amazon Web Services account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is \"redshift-1.0\". </p>
     * @param {String} description A description of the parameter group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterParameterGroupResult}
     */
    gETCreateClusterParameterGroup(parameterGroupName, parameterGroupFamily, description, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parameterGroupName' is set
      if (parameterGroupName === undefined || parameterGroupName === null) {
        throw new Error("Missing the required parameter 'parameterGroupName' when calling gETCreateClusterParameterGroup");
      }
      // verify the required parameter 'parameterGroupFamily' is set
      if (parameterGroupFamily === undefined || parameterGroupFamily === null) {
        throw new Error("Missing the required parameter 'parameterGroupFamily' when calling gETCreateClusterParameterGroup");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling gETCreateClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupName': parameterGroupName,
        'ParameterGroupFamily': parameterGroupFamily,
        'Description': description,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateClusterParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateClusterSecurityGroup operation.
     * @callback module:api/DefaultApi~gETCreateClusterSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSecurityGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterSecurityGroupName <p>The name for the security group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be \"Default\".</p> </li> <li> <p>Must be unique for all security groups that are created by your Amazon Web Services account.</p> </li> </ul> <p>Example: <code>examplesecuritygroup</code> </p>
     * @param {String} description A description for the security group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateClusterSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSecurityGroupResult}
     */
    gETCreateClusterSecurityGroup(clusterSecurityGroupName, description, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSecurityGroupName' is set
      if (clusterSecurityGroupName === undefined || clusterSecurityGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSecurityGroupName' when calling gETCreateClusterSecurityGroup");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling gETCreateClusterSecurityGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateClusterSecurityGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateClusterSecurityGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSecurityGroupName': clusterSecurityGroupName,
        'Description': description,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateClusterSecurityGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterSecurityGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETCreateClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} snapshotIdentifier <p>A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the Amazon Web Services account.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
     * @param {String} clusterIdentifier The cluster identifier for which you want a snapshot.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSnapshotResult}
     */
    gETCreateClusterSnapshot(snapshotIdentifier, clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotIdentifier' is set
      if (snapshotIdentifier === undefined || snapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'snapshotIdentifier' when calling gETCreateClusterSnapshot");
      }
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETCreateClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotIdentifier': snapshotIdentifier,
        'ClusterIdentifier': clusterIdentifier,
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateClusterSubnetGroup operation.
     * @callback module:api/DefaultApi~gETCreateClusterSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html\">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterSubnetGroupName <p>The name for the subnet group. Amazon Redshift stores the value as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain no more than 255 alphanumeric characters or hyphens.</p> </li> <li> <p>Must not be \"Default\".</p> </li> <li> <p>Must be unique for all subnet groups that are created by your Amazon Web Services account.</p> </li> </ul> <p>Example: <code>examplesubnetgroup</code> </p>
     * @param {String} description A description for the subnet group.
     * @param {Array.<String>} subnetIds An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateClusterSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSubnetGroupResult}
     */
    gETCreateClusterSubnetGroup(clusterSubnetGroupName, description, subnetIds, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSubnetGroupName' is set
      if (clusterSubnetGroupName === undefined || clusterSubnetGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSubnetGroupName' when calling gETCreateClusterSubnetGroup");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling gETCreateClusterSubnetGroup");
      }
      // verify the required parameter 'subnetIds' is set
      if (subnetIds === undefined || subnetIds === null) {
        throw new Error("Missing the required parameter 'subnetIds' when calling gETCreateClusterSubnetGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateClusterSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateClusterSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSubnetGroupName': clusterSubnetGroupName,
        'Description': description,
        'SubnetIds': this.apiClient.buildCollectionParam(subnetIds, 'multi'),
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateClusterSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterSubnetGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateCustomDomainAssociation operation.
     * @callback module:api/DefaultApi~gETCreateCustomDomainAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomDomainAssociationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to create a custom domain name for a cluster. Properties include the custom domain name, the cluster the custom domain is associated with, and the certificate Amazon Resource Name (ARN).
     * @param {String} customDomainName The custom domain name for a custom domain association.
     * @param {String} customDomainCertificateArn The certificate Amazon Resource Name (ARN) for the custom domain name association.
     * @param {String} clusterIdentifier The cluster identifier that the custom domain is associated with.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateCustomDomainAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomDomainAssociationResult}
     */
    gETCreateCustomDomainAssociation(customDomainName, customDomainCertificateArn, clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customDomainName' is set
      if (customDomainName === undefined || customDomainName === null) {
        throw new Error("Missing the required parameter 'customDomainName' when calling gETCreateCustomDomainAssociation");
      }
      // verify the required parameter 'customDomainCertificateArn' is set
      if (customDomainCertificateArn === undefined || customDomainCertificateArn === null) {
        throw new Error("Missing the required parameter 'customDomainCertificateArn' when calling gETCreateCustomDomainAssociation");
      }
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETCreateCustomDomainAssociation");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateCustomDomainAssociation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateCustomDomainAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
        'CustomDomainName': customDomainName,
        'CustomDomainCertificateArn': customDomainCertificateArn,
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateCustomDomainAssociationResult;
      return this.apiClient.callApi(
        '/#Action=CreateCustomDomainAssociation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateEndpointAccess operation.
     * @callback module:api/DefaultApi~gETCreateEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Redshift-managed VPC endpoint.
     * @param {String} endpointName <p>The Redshift-managed VPC endpoint name.</p> <p>An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can't contain two consecutive hyphens or end with a hyphen.</p>
     * @param {String} subnetGroupName The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The cluster identifier of the cluster to access.
     * @param {String} [resourceOwner] The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
     * @param {Array.<String>} [vpcSecurityGroupIds] The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
     * @param {module:api/DefaultApi~gETCreateEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccess}
     */
    gETCreateEndpointAccess(endpointName, subnetGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling gETCreateEndpointAccess");
      }
      // verify the required parameter 'subnetGroupName' is set
      if (subnetGroupName === undefined || subnetGroupName === null) {
        throw new Error("Missing the required parameter 'subnetGroupName' when calling gETCreateEndpointAccess");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'ResourceOwner': opts['resourceOwner'],
        'EndpointName': endpointName,
        'SubnetGroupName': subnetGroupName,
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAccess;
      return this.apiClient.callApi(
        '/#Action=CreateEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateEventSubscription operation.
     * @callback module:api/DefaultApi~gETCreateEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your Amazon Web Services account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your Amazon Web Services account. You must specify a source type if you specify a source ID.</p>
     * @param {String} subscriptionName <p>The name of the event subscription to be created.</p> <p>Constraints:</p> <ul> <li> <p>Cannot be null, empty, or blank.</p> </li> <li> <p>Must contain from 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
     * @param {String} snsTopicArn The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceType] <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
     * @param {Array.<String>} [sourceIds] <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
     * @param {Array.<String>} [eventCategories] <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security, pending</p>
     * @param {String} [severity] <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
     * @param {Boolean} [enabled] A boolean value; set to <code>true</code> to activate the subscription, and set to <code>false</code> to create the subscription but not activate it. 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEventSubscriptionResult}
     */
    gETCreateEventSubscription(subscriptionName, snsTopicArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETCreateEventSubscription");
      }
      // verify the required parameter 'snsTopicArn' is set
      if (snsTopicArn === undefined || snsTopicArn === null) {
        throw new Error("Missing the required parameter 'snsTopicArn' when calling gETCreateEventSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'SnsTopicArn': snsTopicArn,
        'SourceType': opts['sourceType'],
        'SourceIds': this.apiClient.buildCollectionParam(opts['sourceIds'], 'multi'),
        'EventCategories': this.apiClient.buildCollectionParam(opts['eventCategories'], 'multi'),
        'Severity': opts['severity'],
        'Enabled': opts['enabled'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=CreateEventSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateHsmClientCertificate operation.
     * @callback module:api/DefaultApi~gETCreateHsmClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHsmClientCertificateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html#working-with-HSM\">Hardware Security Modules</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} hsmClientCertificateIdentifier The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateHsmClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHsmClientCertificateResult}
     */
    gETCreateHsmClientCertificate(hsmClientCertificateIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hsmClientCertificateIdentifier' is set
      if (hsmClientCertificateIdentifier === undefined || hsmClientCertificateIdentifier === null) {
        throw new Error("Missing the required parameter 'hsmClientCertificateIdentifier' when calling gETCreateHsmClientCertificate");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateHsmClientCertificate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateHsmClientCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'HsmClientCertificateIdentifier': hsmClientCertificateIdentifier,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateHsmClientCertificateResult;
      return this.apiClient.callApi(
        '/#Action=CreateHsmClientCertificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateHsmConfiguration operation.
     * @callback module:api/DefaultApi~gETCreateHsmConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHsmConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html\">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
     * @param {String} hsmConfigurationIdentifier The identifier to be assigned to the new Amazon Redshift HSM configuration.
     * @param {String} description A text description of the HSM configuration to be created.
     * @param {String} hsmIpAddress The IP address that the Amazon Redshift cluster must use to access the HSM.
     * @param {String} hsmPartitionName The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
     * @param {String} hsmPartitionPassword The password required to access the HSM partition.
     * @param {String} hsmServerPublicCertificate The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateHsmConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHsmConfigurationResult}
     */
    gETCreateHsmConfiguration(hsmConfigurationIdentifier, description, hsmIpAddress, hsmPartitionName, hsmPartitionPassword, hsmServerPublicCertificate, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hsmConfigurationIdentifier' is set
      if (hsmConfigurationIdentifier === undefined || hsmConfigurationIdentifier === null) {
        throw new Error("Missing the required parameter 'hsmConfigurationIdentifier' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'hsmIpAddress' is set
      if (hsmIpAddress === undefined || hsmIpAddress === null) {
        throw new Error("Missing the required parameter 'hsmIpAddress' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'hsmPartitionName' is set
      if (hsmPartitionName === undefined || hsmPartitionName === null) {
        throw new Error("Missing the required parameter 'hsmPartitionName' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'hsmPartitionPassword' is set
      if (hsmPartitionPassword === undefined || hsmPartitionPassword === null) {
        throw new Error("Missing the required parameter 'hsmPartitionPassword' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'hsmServerPublicCertificate' is set
      if (hsmServerPublicCertificate === undefined || hsmServerPublicCertificate === null) {
        throw new Error("Missing the required parameter 'hsmServerPublicCertificate' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateHsmConfiguration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateHsmConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'HsmConfigurationIdentifier': hsmConfigurationIdentifier,
        'Description': description,
        'HsmIpAddress': hsmIpAddress,
        'HsmPartitionName': hsmPartitionName,
        'HsmPartitionPassword': hsmPartitionPassword,
        'HsmServerPublicCertificate': hsmServerPublicCertificate,
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateHsmConfigurationResult;
      return this.apiClient.callApi(
        '/#Action=CreateHsmConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateScheduledAction operation.
     * @callback module:api/DefaultApi~gETCreateScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
     * @param {String} scheduledActionName The name of the scheduled action. The name must be unique within an account. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {module:model/GETCreateScheduledActionTargetActionParameter} targetAction A JSON format string of the Amazon Redshift API operation with input parameters. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {String} schedule The schedule in <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
     * @param {String} iamRole The IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [scheduledActionDescription] The description of the scheduled action. 
     * @param {Date} [startTime] The start time in UTC of the scheduled action. Before this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>.
     * @param {Date} [endTime] The end time in UTC of the scheduled action. After this time, the scheduled action does not trigger. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {Boolean} [enable] If true, the schedule is enabled. If false, the scheduled action does not trigger. For more information about <code>state</code> of the scheduled action, see <a>ScheduledAction</a>. 
     * @param {module:api/DefaultApi~gETCreateScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledAction}
     */
    gETCreateScheduledAction(scheduledActionName, targetAction, schedule, iamRole, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scheduledActionName' is set
      if (scheduledActionName === undefined || scheduledActionName === null) {
        throw new Error("Missing the required parameter 'scheduledActionName' when calling gETCreateScheduledAction");
      }
      // verify the required parameter 'targetAction' is set
      if (targetAction === undefined || targetAction === null) {
        throw new Error("Missing the required parameter 'targetAction' when calling gETCreateScheduledAction");
      }
      // verify the required parameter 'schedule' is set
      if (schedule === undefined || schedule === null) {
        throw new Error("Missing the required parameter 'schedule' when calling gETCreateScheduledAction");
      }
      // verify the required parameter 'iamRole' is set
      if (iamRole === undefined || iamRole === null) {
        throw new Error("Missing the required parameter 'iamRole' when calling gETCreateScheduledAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateScheduledAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateScheduledAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduledActionName': scheduledActionName,
        'TargetAction': targetAction,
        'Schedule': schedule,
        'IamRole': iamRole,
        'ScheduledActionDescription': opts['scheduledActionDescription'],
        'StartTime': opts['startTime'],
        'EndTime': opts['endTime'],
        'Enable': opts['enable'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ScheduledAction;
      return this.apiClient.callApi(
        '/#Action=CreateScheduledAction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateSnapshotCopyGrant operation.
     * @callback module:api/DefaultApi~gETCreateSnapshotCopyGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSnapshotCopyGrantResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a snapshot copy grant that permits Amazon Redshift to use an encrypted symmetric key from Key Management Service (KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
     * @param {String} snapshotCopyGrantName <p>The name of the snapshot copy grant. This name must be unique in the region for the Amazon Web Services account.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [kmsKeyId] The unique identifier of the encrypted symmetric key to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateSnapshotCopyGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSnapshotCopyGrantResult}
     */
    gETCreateSnapshotCopyGrant(snapshotCopyGrantName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotCopyGrantName' is set
      if (snapshotCopyGrantName === undefined || snapshotCopyGrantName === null) {
        throw new Error("Missing the required parameter 'snapshotCopyGrantName' when calling gETCreateSnapshotCopyGrant");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateSnapshotCopyGrant");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateSnapshotCopyGrant");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotCopyGrantName': snapshotCopyGrantName,
        'KmsKeyId': opts['kmsKeyId'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CreateSnapshotCopyGrantResult;
      return this.apiClient.callApi(
        '/#Action=CreateSnapshotCopyGrant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateSnapshotSchedule operation.
     * @callback module:api/DefaultApi~gETCreateSnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a snapshot schedule that can be associated to a cluster and which overrides the default system backup schedule. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [scheduleDefinitions] The definition of the snapshot schedule. The definition is made up of schedule expressions, for example \"cron(30 12 *)\" or \"rate(12 hours)\". 
     * @param {String} [scheduleIdentifier] A unique identifier for a snapshot schedule. Only alphanumeric characters are allowed for the identifier.
     * @param {String} [scheduleDescription] The description of the snapshot schedule.
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] An optional set of tags you can use to search for the schedule.
     * @param {Boolean} [dryRun] <p/>
     * @param {Number} [nextInvocations] <p/>
     * @param {module:api/DefaultApi~gETCreateSnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotSchedule}
     */
    gETCreateSnapshotSchedule(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateSnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateSnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduleDefinitions': this.apiClient.buildCollectionParam(opts['scheduleDefinitions'], 'multi'),
        'ScheduleIdentifier': opts['scheduleIdentifier'],
        'ScheduleDescription': opts['scheduleDescription'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'DryRun': opts['dryRun'],
        'NextInvocations': opts['nextInvocations'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = SnapshotSchedule;
      return this.apiClient.callApi(
        '/#Action=CreateSnapshotSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateTags operation.
     * @callback module:api/DefaultApi~gETCreateTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
     * @param {String} resourceName The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} tags One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter <code>Key</code> and the corresponding value is passed in with the parameter <code>Value</code>. The <code>Key</code> and <code>Value</code> parameters are separated by a comma (,). Separate multiple tags with a space. For example, <code>--tags \"Key\"=\"owner\",\"Value\"=\"admin\" \"Key\"=\"environment\",\"Value\"=\"test\" \"Key\"=\"version\",\"Value\"=\"1.0\"</code>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETCreateTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETCreateTags(resourceName, tags, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling gETCreateTags");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling gETCreateTags");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceName': resourceName,
        'Tags': this.apiClient.buildCollectionParam(tags, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=CreateTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETCreateUsageLimit operation.
     * @callback module:api/DefaultApi~gETCreateUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit is identified by the returned usage limit identifier.
     * @param {String} clusterIdentifier The identifier of the cluster that you want to limit usage.
     * @param {module:model/String} featureType The Amazon Redshift feature that you want to limit.
     * @param {module:model/String} limitType The type of limit. Depending on the feature type, this can be based on a time duration or data size. If <code>FeatureType</code> is <code>spectrum</code>, then <code>LimitType</code> must be <code>data-scanned</code>. If <code>FeatureType</code> is <code>concurrency-scaling</code>, then <code>LimitType</code> must be <code>time</code>. If <code>FeatureType</code> is <code>cross-region-datasharing</code>, then <code>LimitType</code> must be <code>data-scanned</code>. 
     * @param {Number} amount The limit amount. If time-based, this amount is in minutes. If data-based, this amount is in terabytes (TB). The value must be a positive number. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [period] The time period that the amount applies to. A <code>weekly</code> period begins on Sunday. The default is <code>monthly</code>. 
     * @param {module:model/String} [breachAction] The action that Amazon Redshift takes when the limit is reached. The default is log. For more information about this parameter, see <a>UsageLimit</a>.
     * @param {Array.<module:model/GETCreateClusterTagsParameterInner>} [tags] A list of tag instances.
     * @param {module:api/DefaultApi~gETCreateUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageLimit}
     */
    gETCreateUsageLimit(clusterIdentifier, featureType, limitType, amount, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETCreateUsageLimit");
      }
      // verify the required parameter 'featureType' is set
      if (featureType === undefined || featureType === null) {
        throw new Error("Missing the required parameter 'featureType' when calling gETCreateUsageLimit");
      }
      // verify the required parameter 'limitType' is set
      if (limitType === undefined || limitType === null) {
        throw new Error("Missing the required parameter 'limitType' when calling gETCreateUsageLimit");
      }
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling gETCreateUsageLimit");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETCreateUsageLimit");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETCreateUsageLimit");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'FeatureType': featureType,
        'LimitType': limitType,
        'Amount': amount,
        'Period': opts['period'],
        'BreachAction': opts['breachAction'],
        'Tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UsageLimit;
      return this.apiClient.callApi(
        '/#Action=CreateUsageLimit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeauthorizeDataShare operation.
     * @callback module:api/DefaultApi~gETDeauthorizeDataShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare producer account, removes authorization from the specified datashare. 
     * @param {String} dataShareArn The Amazon Resource Name (ARN) of the datashare to remove authorization from.
     * @param {String} consumerIdentifier The identifier of the data consumer that is to have authorization removed from the datashare. This identifier is an Amazon Web Services account ID or a keyword, such as ADX.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeauthorizeDataShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    gETDeauthorizeDataShare(dataShareArn, consumerIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataShareArn' is set
      if (dataShareArn === undefined || dataShareArn === null) {
        throw new Error("Missing the required parameter 'dataShareArn' when calling gETDeauthorizeDataShare");
      }
      // verify the required parameter 'consumerIdentifier' is set
      if (consumerIdentifier === undefined || consumerIdentifier === null) {
        throw new Error("Missing the required parameter 'consumerIdentifier' when calling gETDeauthorizeDataShare");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeauthorizeDataShare");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeauthorizeDataShare");
      }

      let pathParams = {
      };
      let queryParams = {
        'DataShareArn': dataShareArn,
        'ConsumerIdentifier': consumerIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=DeauthorizeDataShare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteAuthenticationProfile operation.
     * @callback module:api/DefaultApi~gETDeleteAuthenticationProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAuthenticationProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an authentication profile.
     * @param {String} authenticationProfileName The name of the authentication profile to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteAuthenticationProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAuthenticationProfileResult}
     */
    gETDeleteAuthenticationProfile(authenticationProfileName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authenticationProfileName' is set
      if (authenticationProfileName === undefined || authenticationProfileName === null) {
        throw new Error("Missing the required parameter 'authenticationProfileName' when calling gETDeleteAuthenticationProfile");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteAuthenticationProfile");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteAuthenticationProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'AuthenticationProfileName': authenticationProfileName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteAuthenticationProfileResult;
      return this.apiClient.callApi(
        '/#Action=DeleteAuthenticationProfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteCluster operation.
     * @callback module:api/DefaultApi~gETDeleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be \"final-snapshot\" while the snapshot is being taken, then it's \"deleting\" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterIdentifier <p>The identifier of the cluster to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must contain lowercase characters.</p> </li> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [skipFinalClusterSnapshot] <p>Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If <code>true</code>, a final cluster snapshot is not created. If <code>false</code>, a final cluster snapshot is created before the cluster is deleted. </p> <note> <p>The <i>FinalClusterSnapshotIdentifier</i> parameter must be specified if <i>SkipFinalClusterSnapshot</i> is <code>false</code>.</p> </note> <p>Default: <code>false</code> </p>
     * @param {String} [finalClusterSnapshotIdentifier] <p>The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, <i>SkipFinalClusterSnapshot</i> must be <code>false</code>. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
     * @param {Number} [finalClusterSnapshotRetentionPeriod] <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
     * @param {module:api/DefaultApi~gETDeleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterResult}
     */
    gETDeleteCluster(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDeleteCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'SkipFinalClusterSnapshot': opts['skipFinalClusterSnapshot'],
        'FinalClusterSnapshotIdentifier': opts['finalClusterSnapshotIdentifier'],
        'FinalClusterSnapshotRetentionPeriod': opts['finalClusterSnapshotRetentionPeriod'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteClusterResult;
      return this.apiClient.callApi(
        '/#Action=DeleteCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETDeleteClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
     * @param {String} parameterGroupName <p>The name of the parameter group to be deleted.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing cluster parameter group.</p> </li> <li> <p>Cannot delete a default cluster parameter group.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteClusterParameterGroup(parameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parameterGroupName' is set
      if (parameterGroupName === undefined || parameterGroupName === null) {
        throw new Error("Missing the required parameter 'parameterGroupName' when calling gETDeleteClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupName': parameterGroupName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteClusterSecurityGroup operation.
     * @callback module:api/DefaultApi~gETDeleteClusterSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterSecurityGroupName The name of the cluster security group to be deleted.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteClusterSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteClusterSecurityGroup(clusterSecurityGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSecurityGroupName' is set
      if (clusterSecurityGroupName === undefined || clusterSecurityGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSecurityGroupName' when calling gETDeleteClusterSecurityGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteClusterSecurityGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteClusterSecurityGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSecurityGroupName': clusterSecurityGroupName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterSecurityGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETDeleteClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
     * @param {String} snapshotIdentifier <p>The unique identifier of the manual snapshot to be deleted.</p> <p>Constraints: Must be the name of an existing snapshot that is in the <code>available</code>, <code>failed</code>, or <code>cancelled</code> state.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snapshotClusterIdentifier] <p>The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.</p> <p>Constraints: Must be the name of valid cluster.</p>
     * @param {module:api/DefaultApi~gETDeleteClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterSnapshotResult}
     */
    gETDeleteClusterSnapshot(snapshotIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotIdentifier' is set
      if (snapshotIdentifier === undefined || snapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'snapshotIdentifier' when calling gETDeleteClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotIdentifier': snapshotIdentifier,
        'SnapshotClusterIdentifier': opts['snapshotClusterIdentifier'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DeleteClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteClusterSubnetGroup operation.
     * @callback module:api/DefaultApi~gETDeleteClusterSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified cluster subnet group.
     * @param {String} clusterSubnetGroupName The name of the cluster subnet group name to be deleted.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteClusterSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteClusterSubnetGroup(clusterSubnetGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSubnetGroupName' is set
      if (clusterSubnetGroupName === undefined || clusterSubnetGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSubnetGroupName' when calling gETDeleteClusterSubnetGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteClusterSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteClusterSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSubnetGroupName': clusterSubnetGroupName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterSubnetGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteCustomDomainAssociation operation.
     * @callback module:api/DefaultApi~gETDeleteCustomDomainAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains information about deleting a custom domain association for a cluster.
     * @param {String} clusterIdentifier The identifier of the cluster to delete a custom domain association for.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteCustomDomainAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteCustomDomainAssociation(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDeleteCustomDomainAssociation");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteCustomDomainAssociation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteCustomDomainAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteCustomDomainAssociation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteEndpointAccess operation.
     * @callback module:api/DefaultApi~gETDeleteEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Redshift-managed VPC endpoint.
     * @param {String} endpointName The Redshift-managed VPC endpoint to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccess}
     */
    gETDeleteEndpointAccess(endpointName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling gETDeleteEndpointAccess");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'EndpointName': endpointName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAccess;
      return this.apiClient.callApi(
        '/#Action=DeleteEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteEventSubscription operation.
     * @callback module:api/DefaultApi~gETDeleteEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon Redshift event notification subscription.
     * @param {String} subscriptionName The name of the Amazon Redshift event notification subscription to be deleted.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteEventSubscription(subscriptionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETDeleteEventSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteEventSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteHsmClientCertificate operation.
     * @callback module:api/DefaultApi~gETDeleteHsmClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified HSM client certificate.
     * @param {String} hsmClientCertificateIdentifier The identifier of the HSM client certificate to be deleted.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteHsmClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteHsmClientCertificate(hsmClientCertificateIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hsmClientCertificateIdentifier' is set
      if (hsmClientCertificateIdentifier === undefined || hsmClientCertificateIdentifier === null) {
        throw new Error("Missing the required parameter 'hsmClientCertificateIdentifier' when calling gETDeleteHsmClientCertificate");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteHsmClientCertificate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteHsmClientCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'HsmClientCertificateIdentifier': hsmClientCertificateIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteHsmClientCertificate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteHsmConfiguration operation.
     * @callback module:api/DefaultApi~gETDeleteHsmConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Amazon Redshift HSM configuration.
     * @param {String} hsmConfigurationIdentifier The identifier of the Amazon Redshift HSM configuration to be deleted.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteHsmConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteHsmConfiguration(hsmConfigurationIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'hsmConfigurationIdentifier' is set
      if (hsmConfigurationIdentifier === undefined || hsmConfigurationIdentifier === null) {
        throw new Error("Missing the required parameter 'hsmConfigurationIdentifier' when calling gETDeleteHsmConfiguration");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteHsmConfiguration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteHsmConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'HsmConfigurationIdentifier': hsmConfigurationIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteHsmConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeletePartner operation.
     * @callback module:api/DefaultApi~gETDeletePartnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerIntegrationOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a partner integration from a cluster. Data can still flow to the cluster until the integration is deleted at the partner's website.
     * @param {String} accountId The Amazon Web Services account ID that owns the cluster.
     * @param {String} clusterIdentifier The cluster identifier of the cluster that receives data from the partner.
     * @param {String} databaseName The name of the database that receives data from the partner.
     * @param {String} partnerName The name of the partner that is authorized to send data.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeletePartnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerIntegrationOutputMessage}
     */
    gETDeletePartner(accountId, clusterIdentifier, databaseName, partnerName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling gETDeletePartner");
      }
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDeletePartner");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gETDeletePartner");
      }
      // verify the required parameter 'partnerName' is set
      if (partnerName === undefined || partnerName === null) {
        throw new Error("Missing the required parameter 'partnerName' when calling gETDeletePartner");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeletePartner");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeletePartner");
      }

      let pathParams = {
      };
      let queryParams = {
        'AccountId': accountId,
        'ClusterIdentifier': clusterIdentifier,
        'DatabaseName': databaseName,
        'PartnerName': partnerName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PartnerIntegrationOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DeletePartner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteScheduledAction operation.
     * @callback module:api/DefaultApi~gETDeleteScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a scheduled action. 
     * @param {String} scheduledActionName The name of the scheduled action to delete. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteScheduledAction(scheduledActionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scheduledActionName' is set
      if (scheduledActionName === undefined || scheduledActionName === null) {
        throw new Error("Missing the required parameter 'scheduledActionName' when calling gETDeleteScheduledAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteScheduledAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteScheduledAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduledActionName': scheduledActionName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteScheduledAction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteSnapshotCopyGrant operation.
     * @callback module:api/DefaultApi~gETDeleteSnapshotCopyGrantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified snapshot copy grant.
     * @param {String} snapshotCopyGrantName The name of the snapshot copy grant to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteSnapshotCopyGrantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteSnapshotCopyGrant(snapshotCopyGrantName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotCopyGrantName' is set
      if (snapshotCopyGrantName === undefined || snapshotCopyGrantName === null) {
        throw new Error("Missing the required parameter 'snapshotCopyGrantName' when calling gETDeleteSnapshotCopyGrant");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteSnapshotCopyGrant");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteSnapshotCopyGrant");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotCopyGrantName': snapshotCopyGrantName,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteSnapshotCopyGrant', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteSnapshotSchedule operation.
     * @callback module:api/DefaultApi~gETDeleteSnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a snapshot schedule.
     * @param {String} scheduleIdentifier A unique identifier of the snapshot schedule to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteSnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteSnapshotSchedule(scheduleIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scheduleIdentifier' is set
      if (scheduleIdentifier === undefined || scheduleIdentifier === null) {
        throw new Error("Missing the required parameter 'scheduleIdentifier' when calling gETDeleteSnapshotSchedule");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteSnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteSnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduleIdentifier': scheduleIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteSnapshotSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteTags operation.
     * @callback module:api/DefaultApi~gETDeleteTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
     * @param {String} resourceName The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
     * @param {Array.<String>} tagKeys The tag key that you want to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteTags(resourceName, tagKeys, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling gETDeleteTags");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling gETDeleteTags");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceName': resourceName,
        'TagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDeleteUsageLimit operation.
     * @callback module:api/DefaultApi~gETDeleteUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a usage limit from a cluster.
     * @param {String} usageLimitId The identifier of the usage limit to delete.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDeleteUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETDeleteUsageLimit(usageLimitId, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageLimitId' is set
      if (usageLimitId === undefined || usageLimitId === null) {
        throw new Error("Missing the required parameter 'usageLimitId' when calling gETDeleteUsageLimit");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDeleteUsageLimit");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDeleteUsageLimit");
      }

      let pathParams = {
      };
      let queryParams = {
        'UsageLimitId': usageLimitId,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteUsageLimit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeAccountAttributes operation.
     * @callback module:api/DefaultApi~gETDescribeAccountAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountAttributeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of attributes attached to an account
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [attributeNames] A list of attribute names.
     * @param {module:api/DefaultApi~gETDescribeAccountAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountAttributeList}
     */
    gETDescribeAccountAttributes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeAccountAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeAccountAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'AttributeNames': this.apiClient.buildCollectionParam(opts['attributeNames'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = AccountAttributeList;
      return this.apiClient.callApi(
        '/#Action=DescribeAccountAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeAuthenticationProfiles operation.
     * @callback module:api/DefaultApi~gETDescribeAuthenticationProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAuthenticationProfilesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an authentication profile.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [authenticationProfileName] The name of the authentication profile to describe. If not specified then all authentication profiles owned by the account are listed.
     * @param {module:api/DefaultApi~gETDescribeAuthenticationProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAuthenticationProfilesResult}
     */
    gETDescribeAuthenticationProfiles(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeAuthenticationProfiles");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeAuthenticationProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'AuthenticationProfileName': opts['authenticationProfileName'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeAuthenticationProfilesResult;
      return this.apiClient.callApi(
        '/#Action=DescribeAuthenticationProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterDbRevisions operation.
     * @callback module:api/DefaultApi~gETDescribeClusterDbRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterDbRevisionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of <code>ClusterDbRevision</code> objects.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] A unique identifier for a cluster whose <code>ClusterDbRevisions</code> you are requesting. This parameter is case sensitive. All clusters defined for an account are returned by default.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Default: 100</p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] <p>An optional parameter that specifies the starting point for returning a set of response records. When the results of a <code>DescribeClusterDbRevisions</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>marker</code> field of the response. You can retrieve the next set of response records by providing the returned <code>marker</code> value in the <code>marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <code>ClusterIdentifier</code> parameter, or the <code>marker</code> parameter, but not both.</p>
     * @param {module:api/DefaultApi~gETDescribeClusterDbRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterDbRevisionsMessage}
     */
    gETDescribeClusterDbRevisions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterDbRevisions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterDbRevisions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterDbRevisionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterDbRevisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterParameterGroups operation.
     * @callback module:api/DefaultApi~gETDescribeClusterParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [parameterGroupName] The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameterGroups</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeClusterParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupsMessage}
     */
    gETDescribeClusterParameterGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterParameterGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupName': opts['parameterGroupName'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterParameterGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterParameters operation.
     * @callback module:api/DefaultApi~gETDescribeClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} parameterGroupName The name of a cluster parameter group for which to return details.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [source] <p>The parameter types to return. Specify <code>user</code> to show parameters that are different form the default. Similarly, specify <code>engine-default</code> to show parameters that are the same as the default parameter group. </p> <p>Default: All parameter types returned.</p> <p>Valid Values: <code>user</code> | <code>engine-default</code> </p>
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupDetails}
     */
    gETDescribeClusterParameters(parameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parameterGroupName' is set
      if (parameterGroupName === undefined || parameterGroupName === null) {
        throw new Error("Missing the required parameter 'parameterGroupName' when calling gETDescribeClusterParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupName': parameterGroupName,
        'Source': opts['source'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupDetails;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterSecurityGroups operation.
     * @callback module:api/DefaultApi~gETDescribeClusterSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterSecurityGroupMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterSecurityGroupName] <p>The name of a cluster security group for which you are requesting details. You must specify either the <b>Marker</b> parameter or a <b>ClusterSecurityGroupName</b> parameter, but not both. </p> <p> Example: <code>securitygroup1</code> </p>
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSecurityGroups</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You must specify either the <b>ClusterSecurityGroupName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeClusterSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterSecurityGroupMessage}
     */
    gETDescribeClusterSecurityGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterSecurityGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterSecurityGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSecurityGroupName': opts['clusterSecurityGroupName'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterSecurityGroupMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterSecurityGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterSnapshots operation.
     * @callback module:api/DefaultApi~gETDescribeClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by your Amazon Web Services account. No information is returned for snapshots owned by inactive Amazon Web Services accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The identifier of the cluster which generated the requested snapshots.
     * @param {String} [snapshotIdentifier] The snapshot identifier of the snapshot about which to return information.
     * @param {String} [snapshotArn] The Amazon Resource Name (ARN) of the snapshot associated with the message to describe cluster snapshots.
     * @param {String} [snapshotType] <p>The type of snapshots for which you are requesting information. By default, snapshots of all types are returned.</p> <p>Valid Values: <code>automated</code> | <code>manual</code> </p>
     * @param {Date} [startTime] <p>A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
     * @param {Date} [endTime] <p>A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2012-07-16T18:00:00Z</code> </p>
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSnapshots</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {String} [ownerAccount] The Amazon Web Services account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your Amazon Web Services account, or do not specify the parameter.
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
     * @param {Boolean} [clusterExists] <p>A value that indicates whether to return snapshots only for an existing cluster. You can perform table-level restore only by using a snapshot of an existing cluster, that is, a cluster that has not been deleted. Values for this parameter work as follows: </p> <ul> <li> <p>If <code>ClusterExists</code> is set to <code>true</code>, <code>ClusterIdentifier</code> is required.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> isn't specified, all snapshots associated with deleted clusters (orphaned snapshots) are returned. </p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for a deleted cluster, snapshots associated with that cluster are returned.</p> </li> <li> <p>If <code>ClusterExists</code> is set to <code>false</code> and <code>ClusterIdentifier</code> is specified for an existing cluster, no snapshots are returned. </p> </li> </ul>
     * @param {Array.<module:model/GETDescribeClusterSnapshotsSortingEntitiesParameterInner>} [sortingEntities] <p/>
     * @param {module:api/DefaultApi~gETDescribeClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotMessage}
     */
    gETDescribeClusterSnapshots(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'SnapshotIdentifier': opts['snapshotIdentifier'],
        'SnapshotArn': opts['snapshotArn'],
        'SnapshotType': opts['snapshotType'],
        'StartTime': opts['startTime'],
        'EndTime': opts['endTime'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'OwnerAccount': opts['ownerAccount'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'ClusterExists': opts['clusterExists'],
        'SortingEntities': this.apiClient.buildCollectionParam(opts['sortingEntities'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = SnapshotMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterSnapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterSubnetGroups operation.
     * @callback module:api/DefaultApi~gETDescribeClusterSubnetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterSubnetGroupMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterSubnetGroupName] The name of the cluster subnet group for which information is requested.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterSubnetGroups</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeClusterSubnetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterSubnetGroupMessage}
     */
    gETDescribeClusterSubnetGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterSubnetGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterSubnetGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSubnetGroupName': opts['clusterSubnetGroupName'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterSubnetGroupMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterSubnetGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterTracks operation.
     * @callback module:api/DefaultApi~gETDescribeClusterTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackListMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the available maintenance tracks.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maintenanceTrackName] The name of the maintenance track. 
     * @param {Number} [maxRecords] An integer value for the maximum number of maintenance tracks to return.
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeClusterTracks</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Redshift returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeClusterTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackListMessage}
     */
    gETDescribeClusterTracks(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterTracks");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterTracks");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaintenanceTrackName': opts['maintenanceTrackName'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = TrackListMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterTracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusterVersions operation.
     * @callback module:api/DefaultApi~gETDescribeClusterVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterVersionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterVersion] <p>The specific cluster version to return.</p> <p>Example: <code>1.0</code> </p>
     * @param {String} [clusterParameterGroupFamily] <p>The name of a specific cluster parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusterVersions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeClusterVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterVersionsMessage}
     */
    gETDescribeClusterVersions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusterVersions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusterVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterVersion': opts['clusterVersion'],
        'ClusterParameterGroupFamily': opts['clusterParameterGroupFamily'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterVersionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeClusters operation.
     * @callback module:api/DefaultApi~gETDescribeClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClustersMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] <p>The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive.</p> <p>The default is that all clusters defined for an account are returned.</p>
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeClusters</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>ClusterIdentifier</b> parameter or the <b>Marker</b> parameter, but not both. </p>
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClustersMessage}
     */
    gETDescribeClusters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeClusters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClustersMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeCustomDomainAssociations operation.
     * @callback module:api/DefaultApi~gETDescribeCustomDomainAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomDomainAssociationsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains information for custom domain associations for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [customDomainName] The custom domain name for the custom domain association.
     * @param {String} [customDomainCertificateArn] The certificate Amazon Resource Name (ARN) for the custom domain association.
     * @param {Number} [maxRecords] The maximum records setting for the associated custom domain.
     * @param {String} [marker] The marker for the custom domain association.
     * @param {module:api/DefaultApi~gETDescribeCustomDomainAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomDomainAssociationsMessage}
     */
    gETDescribeCustomDomainAssociations(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeCustomDomainAssociations");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeCustomDomainAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'CustomDomainName': opts['customDomainName'],
        'CustomDomainCertificateArn': opts['customDomainCertificateArn'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CustomDomainAssociationsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeCustomDomainAssociations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDataShares operation.
     * @callback module:api/DefaultApi~gETDescribeDataSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSharesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows the status of any inbound or outbound datashares available in the specified account.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dataShareArn] The identifier of the datashare to describe details of.
     * @param {Number} [maxRecords] The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. 
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataShares</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeDataSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSharesResult}
     */
    gETDescribeDataShares(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDataShares");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDataShares");
      }

      let pathParams = {
      };
      let queryParams = {
        'DataShareArn': opts['dataShareArn'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDataSharesResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDataShares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDataSharesForConsumer operation.
     * @callback module:api/DefaultApi~gETDescribeDataSharesForConsumerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSharesForConsumerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of datashares where the account identifier being called is a consumer account identifier.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [consumerArn] The Amazon Resource Name (ARN) of the consumer that returns in the list of datashares.
     * @param {module:model/String} [status] An identifier giving the status of a datashare in the consumer cluster. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
     * @param {Number} [maxRecords] The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. 
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataSharesForConsumer</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeDataSharesForConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSharesForConsumerResult}
     */
    gETDescribeDataSharesForConsumer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDataSharesForConsumer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDataSharesForConsumer");
      }

      let pathParams = {
      };
      let queryParams = {
        'ConsumerArn': opts['consumerArn'],
        'Status': opts['status'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDataSharesForConsumerResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDataSharesForConsumer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDataSharesForProducer operation.
     * @callback module:api/DefaultApi~gETDescribeDataSharesForProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSharesForProducerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of datashares when the account identifier being called is a producer account identifier.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [producerArn] The Amazon Resource Name (ARN) of the producer that returns in the list of datashares.
     * @param {module:model/String} [status] An identifier giving the status of a datashare in the producer. If this field is specified, Amazon Redshift returns the list of datashares that have the specified status.
     * @param {Number} [maxRecords] The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. 
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDataSharesForProducer</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeDataSharesForProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSharesForProducerResult}
     */
    gETDescribeDataSharesForProducer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDataSharesForProducer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDataSharesForProducer");
      }

      let pathParams = {
      };
      let queryParams = {
        'ProducerArn': opts['producerArn'],
        'Status': opts['status'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDataSharesForProducerResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDataSharesForProducer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeDefaultClusterParameters operation.
     * @callback module:api/DefaultApi~gETDescribeDefaultClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDefaultClusterParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} parameterGroupFamily The name of the cluster parameter group family.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeDefaultClusterParameters</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeDefaultClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDefaultClusterParametersResult}
     */
    gETDescribeDefaultClusterParameters(parameterGroupFamily, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parameterGroupFamily' is set
      if (parameterGroupFamily === undefined || parameterGroupFamily === null) {
        throw new Error("Missing the required parameter 'parameterGroupFamily' when calling gETDescribeDefaultClusterParameters");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeDefaultClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeDefaultClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupFamily': parameterGroupFamily,
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeDefaultClusterParametersResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDefaultClusterParameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEndpointAccess operation.
     * @callback module:api/DefaultApi~gETDescribeEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccessList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a Redshift-managed VPC endpoint.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The cluster identifier associated with the described endpoint.
     * @param {String} [resourceOwner] The Amazon Web Services account ID of the owner of the cluster.
     * @param {String} [endpointName] The name of the endpoint to be described.
     * @param {String} [vpcId] The virtual private cloud (VPC) identifier with access to the cluster.
     * @param {Number} [maxRecords] The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a <code>Marker</code> is included in the response so that the remaining results can be retrieved.
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeEndpointAccess</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
     * @param {module:api/DefaultApi~gETDescribeEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccessList}
     */
    gETDescribeEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'ResourceOwner': opts['resourceOwner'],
        'EndpointName': opts['endpointName'],
        'VpcId': opts['vpcId'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAccessList;
      return this.apiClient.callApi(
        '/#Action=DescribeEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEndpointAuthorization operation.
     * @callback module:api/DefaultApi~gETDescribeEndpointAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAuthorizationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an endpoint authorization.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The cluster identifier of the cluster to access.
     * @param {String} [account] The Amazon Web Services account ID of either the cluster owner (grantor) or grantee. If <code>Grantee</code> parameter is true, then the <code>Account</code> value is of the grantor.
     * @param {Boolean} [grantee] Indicates whether to check authorization from a grantor or grantee point of view. If true, Amazon Redshift returns endpoint authorizations that you've been granted. If false (default), checks authorization from a grantor point of view.
     * @param {Number} [maxRecords] The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a <code>Marker</code> is included in the response so that the remaining results can be retrieved.
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeEndpointAuthorization</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
     * @param {module:api/DefaultApi~gETDescribeEndpointAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAuthorizationList}
     */
    gETDescribeEndpointAuthorization(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEndpointAuthorization");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEndpointAuthorization");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'Account': opts['account'],
        'Grantee': opts['grantee'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAuthorizationList;
      return this.apiClient.callApi(
        '/#Action=DescribeEndpointAuthorization', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEventCategories operation.
     * @callback module:api/DefaultApi~gETDescribeEventCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventCategoriesMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html\">Amazon Redshift Event Notifications</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceType] <p>The source type, such as cluster or parameter group, to which the described event categories apply.</p> <p>Valid values: cluster, cluster-snapshot, cluster-parameter-group, cluster-security-group, and scheduled-action.</p>
     * @param {module:api/DefaultApi~gETDescribeEventCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventCategoriesMessage}
     */
    gETDescribeEventCategories(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEventCategories");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEventCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceType': opts['sourceType'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EventCategoriesMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventCategories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEventSubscriptions operation.
     * @callback module:api/DefaultApi~gETDescribeEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [subscriptionName] The name of the Amazon Redshift event notification subscription to be described.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching event notification subscriptions that are associated with the specified key or keys. For example, suppose that you have subscriptions that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching event notification subscriptions that are associated with the specified tag value or values. For example, suppose that you have subscriptions that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subscriptions that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsMessage}
     */
    gETDescribeEventSubscriptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEventSubscriptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEventSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': opts['subscriptionName'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EventSubscriptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeEvents operation.
     * @callback module:api/DefaultApi~gETDescribeEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceIdentifier] <p>The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response.</p> <p>Constraints:</p> <p>If <i>SourceIdentifier</i> is supplied, <i>SourceType</i> must also be provided.</p> <ul> <li> <p>Specify a cluster identifier when <i>SourceType</i> is <code>cluster</code>.</p> </li> <li> <p>Specify a cluster security group name when <i>SourceType</i> is <code>cluster-security-group</code>.</p> </li> <li> <p>Specify a cluster parameter group name when <i>SourceType</i> is <code>cluster-parameter-group</code>.</p> </li> <li> <p>Specify a cluster snapshot identifier when <i>SourceType</i> is <code>cluster-snapshot</code>.</p> </li> </ul>
     * @param {module:model/String} [sourceType] <p>The event source to retrieve events for. If no value is specified, all events are returned.</p> <p>Constraints:</p> <p>If <i>SourceType</i> is supplied, <i>SourceIdentifier</i> must also be provided.</p> <ul> <li> <p>Specify <code>cluster</code> when <i>SourceIdentifier</i> is a cluster identifier.</p> </li> <li> <p>Specify <code>cluster-security-group</code> when <i>SourceIdentifier</i> is a cluster security group name.</p> </li> <li> <p>Specify <code>cluster-parameter-group</code> when <i>SourceIdentifier</i> is a cluster parameter group name.</p> </li> <li> <p>Specify <code>cluster-snapshot</code> when <i>SourceIdentifier</i> is a cluster snapshot identifier.</p> </li> </ul>
     * @param {Date} [startTime] <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
     * @param {Date} [endTime] <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">ISO8601 Wikipedia page.</a> </p> <p>Example: <code>2009-07-08T18:00Z</code> </p>
     * @param {Number} [duration] <p>The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned.</p> <p>Default: <code>60</code> </p>
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeEvents</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsMessage}
     */
    gETDescribeEvents(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeEvents");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'SourceIdentifier': opts['sourceIdentifier'],
        'SourceType': opts['sourceType'],
        'StartTime': opts['startTime'],
        'EndTime': opts['endTime'],
        'Duration': opts['duration'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EventsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeHsmClientCertificates operation.
     * @callback module:api/DefaultApi~gETDescribeHsmClientCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HsmClientCertificateMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [hsmClientCertificateIdentifier] The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your Amazon Web Services account.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmClientCertificates</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeHsmClientCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HsmClientCertificateMessage}
     */
    gETDescribeHsmClientCertificates(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeHsmClientCertificates");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeHsmClientCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
        'HsmClientCertificateIdentifier': opts['hsmClientCertificateIdentifier'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = HsmClientCertificateMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeHsmClientCertificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeHsmConfigurations operation.
     * @callback module:api/DefaultApi~gETDescribeHsmConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HsmConfigurationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [hsmConfigurationIdentifier] The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your Amazon Web Services account.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeHsmConfigurations</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeHsmConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HsmConfigurationMessage}
     */
    gETDescribeHsmConfigurations(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeHsmConfigurations");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeHsmConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
        'HsmConfigurationIdentifier': opts['hsmConfigurationIdentifier'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = HsmConfigurationMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeHsmConfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeLoggingStatus operation.
     * @callback module:api/DefaultApi~gETDescribeLoggingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoggingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
     * @param {String} clusterIdentifier <p>The identifier of the cluster from which to get the logging status.</p> <p>Example: <code>examplecluster</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeLoggingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoggingStatus}
     */
    gETDescribeLoggingStatus(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDescribeLoggingStatus");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeLoggingStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeLoggingStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = LoggingStatus;
      return this.apiClient.callApi(
        '/#Action=DescribeLoggingStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeNodeConfigurationOptions operation.
     * @callback module:api/DefaultApi~gETDescribeNodeConfigurationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeConfigurationOptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
     * @param {module:model/String} actionType The action type to evaluate for possible node configurations. Specify \"restore-cluster\" to get configuration combinations based on an existing snapshot. Specify \"recommend-node-config\" to get configuration recommendations based on an existing cluster or snapshot. Specify \"resize-cluster\" to get configuration combinations for elastic resize based on an existing cluster. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The identifier of the cluster to evaluate for possible node configurations.
     * @param {String} [snapshotIdentifier] The identifier of the snapshot to evaluate for possible node configurations.
     * @param {String} [snapshotArn] The Amazon Resource Name (ARN) of the snapshot associated with the message to describe node configuration.
     * @param {String} [ownerAccount] The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
     * @param {Array.<module:model/GETDescribeNodeConfigurationOptionsFilterParameterInner>} [filter] A set of name, operator, and value items to filter the results.
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeNodeConfigurationOptions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>500</code> </p> <p>Constraints: minimum 100, maximum 500.</p>
     * @param {module:api/DefaultApi~gETDescribeNodeConfigurationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeConfigurationOptionsMessage}
     */
    gETDescribeNodeConfigurationOptions(actionType, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'actionType' is set
      if (actionType === undefined || actionType === null) {
        throw new Error("Missing the required parameter 'actionType' when calling gETDescribeNodeConfigurationOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeNodeConfigurationOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeNodeConfigurationOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ActionType': actionType,
        'ClusterIdentifier': opts['clusterIdentifier'],
        'SnapshotIdentifier': opts['snapshotIdentifier'],
        'SnapshotArn': opts['snapshotArn'],
        'OwnerAccount': opts['ownerAccount'],
        'Filter': this.apiClient.buildCollectionParam(opts['filter'], 'multi'),
        'Marker': opts['marker'],
        'MaxRecords': opts['maxRecords'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = NodeConfigurationOptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeNodeConfigurationOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeOrderableClusterOptions operation.
     * @callback module:api/DefaultApi~gETDescribeOrderableClusterOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderableClusterOptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific Amazon Web Services Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterVersion] <p>The version filter value. Specify this parameter to show only the available offerings matching the specified version.</p> <p>Default: All versions.</p> <p>Constraints: Must be one of the version returned from <a>DescribeClusterVersions</a>.</p>
     * @param {String} [nodeType] The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeOrderableClusterOptions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeOrderableClusterOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderableClusterOptionsMessage}
     */
    gETDescribeOrderableClusterOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeOrderableClusterOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeOrderableClusterOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterVersion': opts['clusterVersion'],
        'NodeType': opts['nodeType'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = OrderableClusterOptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeOrderableClusterOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribePartners operation.
     * @callback module:api/DefaultApi~gETDescribePartnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePartnersOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the partner integrations defined for a cluster.
     * @param {String} accountId The Amazon Web Services account ID that owns the cluster.
     * @param {String} clusterIdentifier The cluster identifier of the cluster whose partner integration is being described.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [databaseName] The name of the database whose partner integration is being described. If database name is not specified, then all databases in the cluster are described.
     * @param {String} [partnerName] The name of the partner that is being described. If partner name is not specified, then all partner integrations are described.
     * @param {module:api/DefaultApi~gETDescribePartnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePartnersOutputMessage}
     */
    gETDescribePartners(accountId, clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling gETDescribePartners");
      }
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDescribePartners");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribePartners");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribePartners");
      }

      let pathParams = {
      };
      let queryParams = {
        'AccountId': accountId,
        'ClusterIdentifier': clusterIdentifier,
        'DatabaseName': opts['databaseName'],
        'PartnerName': opts['partnerName'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribePartnersOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DescribePartners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeReservedNodeExchangeStatus operation.
     * @callback module:api/DefaultApi~gETDescribeReservedNodeExchangeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedNodeExchangeStatusOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns exchange status details and associated metadata for a reserved-node exchange. Statuses include such values as in progress and requested.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [reservedNodeId] The identifier of the source reserved node in a reserved-node exchange request.
     * @param {String} [reservedNodeExchangeRequestId] The identifier of the reserved-node exchange request.
     * @param {Number} [maxRecords] The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeReservedNodeExchangeStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
     * @param {module:api/DefaultApi~gETDescribeReservedNodeExchangeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedNodeExchangeStatusOutputMessage}
     */
    gETDescribeReservedNodeExchangeStatus(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeReservedNodeExchangeStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeReservedNodeExchangeStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'ReservedNodeId': opts['reservedNodeId'],
        'ReservedNodeExchangeRequestId': opts['reservedNodeExchangeRequestId'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeReservedNodeExchangeStatusOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeReservedNodeExchangeStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeReservedNodeOfferings operation.
     * @callback module:api/DefaultApi~gETDescribeReservedNodeOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservedNodeOfferingsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [reservedNodeOfferingId] The unique identifier for the offering.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodeOfferings</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeReservedNodeOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservedNodeOfferingsMessage}
     */
    gETDescribeReservedNodeOfferings(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeReservedNodeOfferings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeReservedNodeOfferings");
      }

      let pathParams = {
      };
      let queryParams = {
        'ReservedNodeOfferingId': opts['reservedNodeOfferingId'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ReservedNodeOfferingsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeReservedNodeOfferings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeReservedNodes operation.
     * @callback module:api/DefaultApi~gETDescribeReservedNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservedNodesMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the descriptions of the reserved nodes.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [reservedNodeId] Identifier for the node reservation.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeReservedNodes</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {module:api/DefaultApi~gETDescribeReservedNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservedNodesMessage}
     */
    gETDescribeReservedNodes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeReservedNodes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeReservedNodes");
      }

      let pathParams = {
      };
      let queryParams = {
        'ReservedNodeId': opts['reservedNodeId'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ReservedNodesMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeReservedNodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeResize operation.
     * @callback module:api/DefaultApi~gETDescribeResizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResizeProgressMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
     * @param {String} clusterIdentifier <p>The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive.</p> <p>By default, resize operations for all clusters defined for an Amazon Web Services account are returned.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResizeProgressMessage}
     */
    gETDescribeResize(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDescribeResize");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeResize");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeResize");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ResizeProgressMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeResize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeScheduledActions operation.
     * @callback module:api/DefaultApi~gETDescribeScheduledActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledActionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes properties of scheduled actions. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [scheduledActionName] The name of the scheduled action to retrieve. 
     * @param {module:model/String} [targetActionType] The type of the scheduled actions to retrieve. 
     * @param {Date} [startTime] The start time in UTC of the scheduled actions to retrieve. Only active scheduled actions that have invocations after this time are retrieved.
     * @param {Date} [endTime] The end time in UTC of the scheduled action to retrieve. Only active scheduled actions that have invocations before this time are retrieved.
     * @param {Boolean} [active] If true, retrieve only active scheduled actions. If false, retrieve only disabled scheduled actions. 
     * @param {Array.<module:model/GETDescribeScheduledActionsFiltersParameterInner>} [filters] List of scheduled action filters. 
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeScheduledActions</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {module:api/DefaultApi~gETDescribeScheduledActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledActionsMessage}
     */
    gETDescribeScheduledActions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeScheduledActions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeScheduledActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduledActionName': opts['scheduledActionName'],
        'TargetActionType': opts['targetActionType'],
        'StartTime': opts['startTime'],
        'EndTime': opts['endTime'],
        'Active': opts['active'],
        'Filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'Marker': opts['marker'],
        'MaxRecords': opts['maxRecords'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ScheduledActionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeScheduledActions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeSnapshotCopyGrants operation.
     * @callback module:api/DefaultApi~gETDescribeSnapshotCopyGrantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCopyGrantMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of snapshot copy grants owned by the Amazon Web Services account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snapshotCopyGrantName] The name of the snapshot copy grant.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] <p>An optional parameter that specifies the starting point to return a set of response records. When the results of a <code>DescribeSnapshotCopyGrant</code> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. </p> <p>Constraints: You can specify either the <b>SnapshotCopyGrantName</b> parameter or the <b>Marker</b> parameter, but not both. </p>
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeSnapshotCopyGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCopyGrantMessage}
     */
    gETDescribeSnapshotCopyGrants(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeSnapshotCopyGrants");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeSnapshotCopyGrants");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotCopyGrantName': opts['snapshotCopyGrantName'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = SnapshotCopyGrantMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeSnapshotCopyGrants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeSnapshotSchedules operation.
     * @callback module:api/DefaultApi~gETDescribeSnapshotSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSnapshotSchedulesOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of snapshot schedules. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The unique identifier for the cluster whose snapshot schedules you want to view.
     * @param {String} [scheduleIdentifier] A unique identifier for a snapshot schedule.
     * @param {Array.<String>} [tagKeys] The key value for a snapshot schedule tag.
     * @param {Array.<String>} [tagValues] The value corresponding to the key of the snapshot schedule tag.
     * @param {String} [marker] A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request.
     * @param {Number} [maxRecords] The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value.
     * @param {module:api/DefaultApi~gETDescribeSnapshotSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSnapshotSchedulesOutputMessage}
     */
    gETDescribeSnapshotSchedules(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeSnapshotSchedules");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeSnapshotSchedules");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'ScheduleIdentifier': opts['scheduleIdentifier'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Marker': opts['marker'],
        'MaxRecords': opts['maxRecords'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DescribeSnapshotSchedulesOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeSnapshotSchedules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeStorage operation.
     * @callback module:api/DefaultApi~gETDescribeStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerStorageMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns account level backups storage size and provisional storage.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDescribeStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerStorageMessage}
     */
    gETDescribeStorage(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeStorage");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeStorage");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CustomerStorageMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeStorage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeTableRestoreStatus operation.
     * @callback module:api/DefaultApi~gETDescribeTableRestoreStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableRestoreStatusMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The Amazon Redshift cluster that the table is being restored to.
     * @param {String} [tableRestoreRequestId] The identifier of the table restore request to return status for. If you don't specify a <code>TableRestoreRequestId</code> value, then <code>DescribeTableRestoreStatus</code> returns the status of all in-progress table restore requests.
     * @param {Number} [maxRecords] The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
     * @param {String} [marker] An optional pagination token provided by a previous <code>DescribeTableRestoreStatus</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter.
     * @param {module:api/DefaultApi~gETDescribeTableRestoreStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableRestoreStatusMessage}
     */
    gETDescribeTableRestoreStatus(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeTableRestoreStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeTableRestoreStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'TableRestoreRequestId': opts['tableRestoreRequestId'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = TableRestoreStatusMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeTableRestoreStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeTags operation.
     * @callback module:api/DefaultApi~gETDescribeTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaggedResourceListMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [resourceName] The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, <code>arn:aws:redshift:us-east-2:123456789:cluster:t1</code>. 
     * @param {String} [resourceType] <p>The type of resource with which you want to view tags. Valid resource types are: </p> <ul> <li> <p>Cluster</p> </li> <li> <p>CIDR/IP</p> </li> <li> <p>EC2 security group</p> </li> <li> <p>Snapshot</p> </li> <li> <p>Cluster security group</p> </li> <li> <p>Subnet group</p> </li> <li> <p>HSM connection</p> </li> <li> <p>HSM certificate</p> </li> <li> <p>Parameter group</p> </li> <li> <p>Snapshot copy grant</p> </li> </ul> <p>For more information about Amazon Redshift resource types and constructing ARNs, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-overview.html#redshift-iam-access-control-specify-actions\">Specifying Policy Elements: Actions, Effects, Resources, and Principals</a> in the Amazon Redshift Cluster Management Guide. </p>
     * @param {Number} [maxRecords] The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned <code>marker</code> value. 
     * @param {String} [marker] A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the <code>marker</code> parameter and retrying the command. If the <code>marker</code> field is empty, all response records have been retrieved for the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaggedResourceListMessage}
     */
    gETDescribeTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'ResourceName': opts['resourceName'],
        'ResourceType': opts['resourceType'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = TaggedResourceListMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDescribeUsageLimits operation.
     * @callback module:api/DefaultApi~gETDescribeUsageLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageLimitList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:</p> <ul> <li> <p>If usage limit identifier, cluster identifier, and feature type are not provided, then all usage limit objects for the current account in the current region are returned.</p> </li> <li> <p>If usage limit identifier is provided, then the corresponding usage limit object is returned.</p> </li> <li> <p>If cluster identifier is provided, then all usage limit objects for the specified cluster are returned.</p> </li> <li> <p>If cluster identifier and feature type are provided, then all usage limit objects for the combination of cluster and feature are returned.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [usageLimitId] The identifier of the usage limit to describe.
     * @param {String} [clusterIdentifier] The identifier of the cluster for which you want to describe usage limits.
     * @param {module:model/String} [featureType] The feature type for which you want to describe usage limits.
     * @param {Number} [maxRecords] <p>The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. </p> <p>Default: <code>100</code> </p> <p>Constraints: minimum 20, maximum 100.</p>
     * @param {String} [marker] An optional parameter that specifies the starting point to return a set of response records. When the results of a <a>DescribeUsageLimits</a> request exceed the value specified in <code>MaxRecords</code>, Amazon Web Services returns a value in the <code>Marker</code> field of the response. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request. 
     * @param {Array.<String>} [tagKeys] A tag key or keys for which you want to return all matching usage limit objects that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called <code>owner</code> and <code>environment</code>. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the usage limit objects have either or both of these tag keys associated with them.
     * @param {Array.<String>} [tagValues] A tag value or values for which you want to return all matching usage limit objects that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called <code>admin</code> and <code>test</code>. If you specify both of these tag values in the request, Amazon Redshift returns a response with the usage limit objects that have either or both of these tag values associated with them.
     * @param {module:api/DefaultApi~gETDescribeUsageLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageLimitList}
     */
    gETDescribeUsageLimits(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDescribeUsageLimits");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDescribeUsageLimits");
      }

      let pathParams = {
      };
      let queryParams = {
        'UsageLimitId': opts['usageLimitId'],
        'ClusterIdentifier': opts['clusterIdentifier'],
        'FeatureType': opts['featureType'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'TagKeys': this.apiClient.buildCollectionParam(opts['tagKeys'], 'multi'),
        'TagValues': this.apiClient.buildCollectionParam(opts['tagValues'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UsageLimitList;
      return this.apiClient.callApi(
        '/#Action=DescribeUsageLimits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDisableLogging operation.
     * @callback module:api/DefaultApi~gETDisableLoggingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoggingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     * @param {String} clusterIdentifier <p>The identifier of the cluster on which logging is to be stopped.</p> <p>Example: <code>examplecluster</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDisableLoggingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoggingStatus}
     */
    gETDisableLogging(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDisableLogging");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDisableLogging");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDisableLogging");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = LoggingStatus;
      return this.apiClient.callApi(
        '/#Action=DisableLogging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDisableSnapshotCopy operation.
     * @callback module:api/DefaultApi~gETDisableSnapshotCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableSnapshotCopyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using an encrypted symmetric key from Key Management Service, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the key in the destination region. </p>
     * @param {String} clusterIdentifier <p>The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETDisableSnapshotCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableSnapshotCopyResult}
     */
    gETDisableSnapshotCopy(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETDisableSnapshotCopy");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDisableSnapshotCopy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDisableSnapshotCopy");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DisableSnapshotCopyResult;
      return this.apiClient.callApi(
        '/#Action=DisableSnapshotCopy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETDisassociateDataShareConsumer operation.
     * @callback module:api/DefaultApi~gETDisassociateDataShareConsumerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare consumer account, remove association for the specified datashare. 
     * @param {String} dataShareArn The Amazon Resource Name (ARN) of the datashare to remove association for. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [disassociateEntireAccount] A value that specifies whether association for the datashare is removed from the entire account.
     * @param {String} [consumerArn] The Amazon Resource Name (ARN) of the consumer that association for the datashare is removed from.
     * @param {String} [consumerRegion] From a datashare consumer account, removes association of a datashare from all the existing and future namespaces in the specified Amazon Web Services Region.
     * @param {module:api/DefaultApi~gETDisassociateDataShareConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    gETDisassociateDataShareConsumer(dataShareArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataShareArn' is set
      if (dataShareArn === undefined || dataShareArn === null) {
        throw new Error("Missing the required parameter 'dataShareArn' when calling gETDisassociateDataShareConsumer");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETDisassociateDataShareConsumer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETDisassociateDataShareConsumer");
      }

      let pathParams = {
      };
      let queryParams = {
        'DataShareArn': dataShareArn,
        'DisassociateEntireAccount': opts['disassociateEntireAccount'],
        'ConsumerArn': opts['consumerArn'],
        'ConsumerRegion': opts['consumerRegion'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=DisassociateDataShareConsumer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETEnableLogging operation.
     * @callback module:api/DefaultApi~gETEnableLoggingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoggingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     * @param {String} clusterIdentifier <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [bucketName] <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
     * @param {String} [s3KeyPrefix] <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes (\"), single quotes ('), a backslash (\\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
     * @param {module:model/String} [logDestinationType] The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.
     * @param {Array.<String>} [logExports] The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.
     * @param {module:api/DefaultApi~gETEnableLoggingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoggingStatus}
     */
    gETEnableLogging(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETEnableLogging");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETEnableLogging");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETEnableLogging");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'BucketName': opts['bucketName'],
        'S3KeyPrefix': opts['s3KeyPrefix'],
        'LogDestinationType': opts['logDestinationType'],
        'LogExports': this.apiClient.buildCollectionParam(opts['logExports'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = LoggingStatus;
      return this.apiClient.callApi(
        '/#Action=EnableLogging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETEnableSnapshotCopy operation.
     * @callback module:api/DefaultApi~gETEnableSnapshotCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableSnapshotCopyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the automatic copy of snapshots from one region to another region for a specified cluster.
     * @param {String} clusterIdentifier <p>The unique identifier of the source cluster to copy snapshots from.</p> <p>Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.</p>
     * @param {String} destinationRegion <p>The destination Amazon Web Services Region that you want to copy snapshots to.</p> <p>Constraints: Must be the name of a valid Amazon Web Services Region. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#redshift_region\">Regions and Endpoints</a> in the Amazon Web Services General Reference. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [retentionPeriod] <p>The number of days to retain automated snapshots in the destination region after they are copied from the source region.</p> <p>Default: 7.</p> <p>Constraints: Must be at least 1 and no more than 35.</p>
     * @param {String} [snapshotCopyGrantName] The name of the snapshot copy grant to use when snapshots of an Amazon Web Services KMS-encrypted cluster are copied to the destination region.
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The number of days to retain newly copied snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. If the value is -1, the manual snapshot is retained indefinitely. </p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
     * @param {module:api/DefaultApi~gETEnableSnapshotCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableSnapshotCopyResult}
     */
    gETEnableSnapshotCopy(clusterIdentifier, destinationRegion, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETEnableSnapshotCopy");
      }
      // verify the required parameter 'destinationRegion' is set
      if (destinationRegion === undefined || destinationRegion === null) {
        throw new Error("Missing the required parameter 'destinationRegion' when calling gETEnableSnapshotCopy");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETEnableSnapshotCopy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETEnableSnapshotCopy");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'DestinationRegion': destinationRegion,
        'RetentionPeriod': opts['retentionPeriod'],
        'SnapshotCopyGrantName': opts['snapshotCopyGrantName'],
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EnableSnapshotCopyResult;
      return this.apiClient.callApi(
        '/#Action=EnableSnapshotCopy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetClusterCredentials operation.
     * @callback module:api/DefaultApi~gETGetClusterCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html\">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The Identity and Access Management (IAM) user or role that runs GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources\">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> permission.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
     * @param {String} dbUser <p>The name of a database user. If a user name matching <code>DbUser</code> exists in the database, the temporary user credentials have the same permissions as the existing user. If <code>DbUser</code> doesn't exist in the database and <code>Autocreate</code> is <code>True</code>, a new user is created using the value for <code>DbUser</code> with PUBLIC permissions. If a database user matching the value for <code>DbUser</code> doesn't exist and <code>Autocreate</code> is <code>False</code>, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html\">CREATE USER</a> in the Amazon Redshift Database Developer Guide. </p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens. The user name can't be <code>PUBLIC</code>.</p> </li> <li> <p>Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dbName] <p>The name of a database that <code>DbUser</code> is authorized to log on to. If <code>DbName</code> is not specified, <code>DbUser</code> can log on to any existing database.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
     * @param {String} [clusterIdentifier] The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.
     * @param {Number} [durationSeconds] <p>The number of seconds until the returned temporary password expires.</p> <p>Constraint: minimum 900, maximum 3600.</p> <p>Default: 900</p>
     * @param {Boolean} [autoCreate] Create a database user with the name specified for the user named in <code>DbUser</code> if one does not exist.
     * @param {Array.<String>} [dbGroups] <p>A list of the names of existing database groups that the user named in <code>DbUser</code> will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.</p> <p>Database group name constraints</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens</p> </li> <li> <p>Must contain only lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ). </p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href=\"http://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html\">Reserved Words</a> in the Amazon Redshift Database Developer Guide.</p> </li> </ul>
     * @param {String} [customDomainName] The custom domain name for the cluster credentials.
     * @param {module:api/DefaultApi~gETGetClusterCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterCredentials}
     */
    gETGetClusterCredentials(dbUser, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dbUser' is set
      if (dbUser === undefined || dbUser === null) {
        throw new Error("Missing the required parameter 'dbUser' when calling gETGetClusterCredentials");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetClusterCredentials");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetClusterCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
        'DbUser': dbUser,
        'DbName': opts['dbName'],
        'ClusterIdentifier': opts['clusterIdentifier'],
        'DurationSeconds': opts['durationSeconds'],
        'AutoCreate': opts['autoCreate'],
        'DbGroups': this.apiClient.buildCollectionParam(opts['dbGroups'], 'multi'),
        'CustomDomainName': opts['customDomainName'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterCredentials;
      return this.apiClient.callApi(
        '/#Action=GetClusterCredentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetClusterCredentialsWithIAM operation.
     * @callback module:api/DefaultApi~gETGetClusterCredentialsWithIAMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterExtendedCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a database user name and temporary password with temporary authorization to log in to an Amazon Redshift database. The database user is mapped 1:1 to the source Identity and Access Management (IAM) identity. For more information about IAM identities, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html\">IAM Identities (users, user groups, and roles)</a> in the Amazon Web Services Identity and Access Management User Guide.</p> <p>The Identity and Access Management (IAM) identity that runs this operation must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html\">Using identity-based policies (IAM policies)</a> in the Amazon Redshift Cluster Management Guide. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dbName] The name of the database for which you are requesting credentials. If the database name is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. If the database name is not specified, access to all databases is allowed.
     * @param {String} [clusterIdentifier] The unique identifier of the cluster that contains the database for which you are requesting credentials. 
     * @param {Number} [durationSeconds] <p>The number of seconds until the returned temporary password expires.</p> <p>Range: 900-3600. Default: 900.</p>
     * @param {String} [customDomainName] The custom domain name for the IAM message cluster credentials.
     * @param {module:api/DefaultApi~gETGetClusterCredentialsWithIAMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterExtendedCredentials}
     */
    gETGetClusterCredentialsWithIAM(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetClusterCredentialsWithIAM");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetClusterCredentialsWithIAM");
      }

      let pathParams = {
      };
      let queryParams = {
        'DbName': opts['dbName'],
        'ClusterIdentifier': opts['clusterIdentifier'],
        'DurationSeconds': opts['durationSeconds'],
        'CustomDomainName': opts['customDomainName'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterExtendedCredentials;
      return this.apiClient.callApi(
        '/#Action=GetClusterCredentialsWithIAM', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetReservedNodeExchangeConfigurationOptions operation.
     * @callback module:api/DefaultApi~gETGetReservedNodeExchangeConfigurationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReservedNodeExchangeConfigurationOptionsOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node offering. Details include the node type, the price, the node count, and the offering type.
     * @param {module:model/String} actionType The action type of the reserved-node configuration. The action type can be an exchange initiated from either a snapshot or a resize.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The identifier for the cluster that is the source for a reserved-node exchange.
     * @param {String} [snapshotIdentifier] The identifier for the snapshot that is the source for the reserved-node exchange.
     * @param {Number} [maxRecords] The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified <code>MaxRecords</code> value, a value is returned in a <code>Marker</code> field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.
     * @param {String} [marker] An optional pagination token provided by a previous <code>GetReservedNodeExchangeConfigurationOptions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. You can retrieve the next set of response records by providing the returned marker value in the <code>Marker</code> parameter and retrying the request.
     * @param {module:api/DefaultApi~gETGetReservedNodeExchangeConfigurationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReservedNodeExchangeConfigurationOptionsOutputMessage}
     */
    gETGetReservedNodeExchangeConfigurationOptions(actionType, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'actionType' is set
      if (actionType === undefined || actionType === null) {
        throw new Error("Missing the required parameter 'actionType' when calling gETGetReservedNodeExchangeConfigurationOptions");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetReservedNodeExchangeConfigurationOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetReservedNodeExchangeConfigurationOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'ActionType': actionType,
        'ClusterIdentifier': opts['clusterIdentifier'],
        'SnapshotIdentifier': opts['snapshotIdentifier'],
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetReservedNodeExchangeConfigurationOptionsOutputMessage;
      return this.apiClient.callApi(
        '/#Action=GetReservedNodeExchangeConfigurationOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETGetReservedNodeExchangeOfferings operation.
     * @callback module:api/DefaultApi~gETGetReservedNodeExchangeOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReservedNodeExchangeOfferingsOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
     * @param {String} reservedNodeId A string representing the node identifier for the DC1 Reserved Node to be exchanged.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxRecords] An integer setting the maximum number of ReservedNodeOfferings to retrieve.
     * @param {String} [marker] A value that indicates the starting point for the next set of ReservedNodeOfferings.
     * @param {module:api/DefaultApi~gETGetReservedNodeExchangeOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReservedNodeExchangeOfferingsOutputMessage}
     */
    gETGetReservedNodeExchangeOfferings(reservedNodeId, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reservedNodeId' is set
      if (reservedNodeId === undefined || reservedNodeId === null) {
        throw new Error("Missing the required parameter 'reservedNodeId' when calling gETGetReservedNodeExchangeOfferings");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETGetReservedNodeExchangeOfferings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETGetReservedNodeExchangeOfferings");
      }

      let pathParams = {
      };
      let queryParams = {
        'ReservedNodeId': reservedNodeId,
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = GetReservedNodeExchangeOfferingsOutputMessage;
      return this.apiClient.callApi(
        '/#Action=GetReservedNodeExchangeOfferings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyAquaConfiguration operation.
     * @callback module:api/DefaultApi~gETModifyAquaConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyAquaOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation is retired. Calling this operation does not change AQUA configuration. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator). 
     * @param {String} clusterIdentifier The identifier of the cluster to be modified.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [aquaConfigurationStatus] This parameter is retired. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
     * @param {module:api/DefaultApi~gETModifyAquaConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyAquaOutputMessage}
     */
    gETModifyAquaConfiguration(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyAquaConfiguration");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyAquaConfiguration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyAquaConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'AquaConfigurationStatus': opts['aquaConfigurationStatus'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyAquaOutputMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyAquaConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyAuthenticationProfile operation.
     * @callback module:api/DefaultApi~gETModifyAuthenticationProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyAuthenticationProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an authentication profile.
     * @param {String} authenticationProfileName The name of the authentication profile to replace.
     * @param {String} authenticationProfileContent The new content of the authentication profile in JSON format. The maximum length of the JSON string is determined by a quota for your account.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifyAuthenticationProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyAuthenticationProfileResult}
     */
    gETModifyAuthenticationProfile(authenticationProfileName, authenticationProfileContent, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authenticationProfileName' is set
      if (authenticationProfileName === undefined || authenticationProfileName === null) {
        throw new Error("Missing the required parameter 'authenticationProfileName' when calling gETModifyAuthenticationProfile");
      }
      // verify the required parameter 'authenticationProfileContent' is set
      if (authenticationProfileContent === undefined || authenticationProfileContent === null) {
        throw new Error("Missing the required parameter 'authenticationProfileContent' when calling gETModifyAuthenticationProfile");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyAuthenticationProfile");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyAuthenticationProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'AuthenticationProfileName': authenticationProfileName,
        'AuthenticationProfileContent': authenticationProfileContent,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyAuthenticationProfileResult;
      return this.apiClient.callApi(
        '/#Action=ModifyAuthenticationProfile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyCluster operation.
     * @callback module:api/DefaultApi~gETModifyClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the admin user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterIdentifier <p>The unique identifier of the cluster to be modified.</p> <p>Example: <code>examplecluster</code> </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterType] <p>The new cluster type.</p> <p>When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use <a>DescribeResize</a> to track the progress of the resize request. </p> <p>Valid Values: <code> multi-node | single-node </code> </p>
     * @param {String} [nodeType] <p>The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter.</p> <p> For more information about resizing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html\">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: <code>ds2.xlarge</code> | <code>ds2.8xlarge</code> | <code>dc1.large</code> | <code>dc1.8xlarge</code> | <code>dc2.large</code> | <code>dc2.8xlarge</code> | <code>ra3.xlplus</code> | <code>ra3.4xlarge</code> | <code>ra3.16xlarge</code> </p>
     * @param {Number} [numberOfNodes] <p>The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter.</p> <p> For more information about resizing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/rs-resize-tutorial.html\">Resizing Clusters in Amazon Redshift</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Valid Values: Integer greater than <code>0</code>.</p>
     * @param {Array.<String>} [clusterSecurityGroups] <p>A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible.</p> <p>Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
     * @param {Array.<String>} [vpcSecurityGroupIds] A list of virtual private cloud (VPC) security groups to be associated with the cluster. This change is asynchronously applied as soon as possible.
     * @param {String} [masterUserPassword] <p>The new password for the cluster admin user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <note> <p>Operations never return the password, so this operation provides a way to regain access to the admin user account for a cluster if the password is lost.</p> </note> <p>Default: Uses existing setting.</p> <p>Constraints:</p> <ul> <li> <p>Must be between 8 and 64 characters in length.</p> </li> <li> <p>Must contain at least one uppercase letter.</p> </li> <li> <p>Must contain at least one lowercase letter.</p> </li> <li> <p>Must contain one number.</p> </li> <li> <p>Can be any printable ASCII character (ASCII code 33-126) except <code>'</code> (single quote), <code>\"</code> (double quote), <code>\\</code>, <code>/</code>, or <code>@</code>.</p> </li> </ul>
     * @param {String} [clusterParameterGroupName] <p>The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use <a>RebootCluster</a>. </p> <p>Default: Uses existing setting.</p> <p>Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.</p>
     * @param {Number} [automatedSnapshotRetentionPeriod] <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted.</p> <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p> <p>Default: Uses existing setting.</p> <p>Constraints: Must be a value from 0 to 35.</p>
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The default for number of days that a newly created manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely. This value doesn't retroactively change the retention periods of existing manual snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p> <p>The default value is -1.</p>
     * @param {String} [preferredMaintenanceWindow] <p>The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage.</p> <p>This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied.</p> <p>Default: Uses existing setting.</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi, for example <code>wed:07:30-wed:08:00</code>.</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes.</p>
     * @param {String} [clusterVersion] <p>The new version number of the Amazon Redshift engine to upgrade to.</p> <p>For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>Example: <code>1.0</code> </p>
     * @param {Boolean} [allowVersionUpgrade] <p>If <code>true</code>, major version upgrades will be applied automatically to the cluster during the maintenance window. </p> <p>Default: <code>false</code> </p>
     * @param {String} [hsmClientCertificateIdentifier] Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
     * @param {String} [hsmConfigurationIdentifier] Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
     * @param {String} [newClusterIdentifier] <p>The new identifier for the cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul> <p>Example: <code>examplecluster</code> </p>
     * @param {Boolean} [publiclyAccessible] If <code>true</code>, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
     * @param {String} [elasticIp] <p>The Elastic IP (EIP) address for the cluster.</p> <p>Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#cluster-platforms\">Supported Platforms to Launch Your Cluster</a> in the Amazon Redshift Cluster Management Guide.</p>
     * @param {Boolean} [enhancedVpcRouting] <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html\">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
     * @param {String} [maintenanceTrackName] The name for the maintenance track that you want to assign for the cluster. This name change is asynchronous. The new track name stays in the <code>PendingModifiedValues</code> for the cluster until the next maintenance window. When the maintenance track changes, the cluster is switched to the latest cluster release available for the maintenance track. At this point, the maintenance track name is applied.
     * @param {Boolean} [encrypted] <p>Indicates whether the cluster is encrypted. If the value is encrypted (true) and you provide a value for the <code>KmsKeyId</code> parameter, we encrypt the cluster with the provided <code>KmsKeyId</code>. If you don't provide a <code>KmsKeyId</code>, we encrypt with the default key. </p> <p>If the value is not encrypted (false), then the cluster is decrypted. </p>
     * @param {String} [kmsKeyId] The Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
     * @param {Boolean} [availabilityZoneRelocation] The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster modification is complete.
     * @param {String} [availabilityZone] The option to initiate relocation for an Amazon Redshift cluster to the target Availability Zone.
     * @param {Number} [port] The option to change the port of an Amazon Redshift cluster.
     * @param {module:api/DefaultApi~gETModifyClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterResult}
     */
    gETModifyCluster(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'ClusterType': opts['clusterType'],
        'NodeType': opts['nodeType'],
        'NumberOfNodes': opts['numberOfNodes'],
        'ClusterSecurityGroups': this.apiClient.buildCollectionParam(opts['clusterSecurityGroups'], 'multi'),
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'MasterUserPassword': opts['masterUserPassword'],
        'ClusterParameterGroupName': opts['clusterParameterGroupName'],
        'AutomatedSnapshotRetentionPeriod': opts['automatedSnapshotRetentionPeriod'],
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'ClusterVersion': opts['clusterVersion'],
        'AllowVersionUpgrade': opts['allowVersionUpgrade'],
        'HsmClientCertificateIdentifier': opts['hsmClientCertificateIdentifier'],
        'HsmConfigurationIdentifier': opts['hsmConfigurationIdentifier'],
        'NewClusterIdentifier': opts['newClusterIdentifier'],
        'PubliclyAccessible': opts['publiclyAccessible'],
        'ElasticIp': opts['elasticIp'],
        'EnhancedVpcRouting': opts['enhancedVpcRouting'],
        'MaintenanceTrackName': opts['maintenanceTrackName'],
        'Encrypted': opts['encrypted'],
        'KmsKeyId': opts['kmsKeyId'],
        'AvailabilityZoneRelocation': opts['availabilityZoneRelocation'],
        'AvailabilityZone': opts['availabilityZone'],
        'Port': opts['port'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterResult;
      return this.apiClient.callApi(
        '/#Action=ModifyCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterDbRevision operation.
     * @callback module:api/DefaultApi~gETModifyClusterDbRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterDbRevisionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
     * @param {String} clusterIdentifier <p>The unique identifier of a cluster whose database revision you want to modify. </p> <p>Example: <code>examplecluster</code> </p>
     * @param {String} revisionTarget The identifier of the database revision. You can retrieve this value from the response to the <a>DescribeClusterDbRevisions</a> request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifyClusterDbRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterDbRevisionResult}
     */
    gETModifyClusterDbRevision(clusterIdentifier, revisionTarget, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyClusterDbRevision");
      }
      // verify the required parameter 'revisionTarget' is set
      if (revisionTarget === undefined || revisionTarget === null) {
        throw new Error("Missing the required parameter 'revisionTarget' when calling gETModifyClusterDbRevision");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterDbRevision");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterDbRevision");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'RevisionTarget': revisionTarget,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterDbRevisionResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterDbRevision', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterIamRoles operation.
     * @callback module:api/DefaultApi~gETModifyClusterIamRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterIamRolesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.</p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html\">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterIdentifier The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [addIamRoles] Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. 
     * @param {Array.<String>} [removeIamRoles] Zero or more IAM roles in ARN format to disassociate from the cluster. 
     * @param {String} [defaultIamRoleArn] The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified.
     * @param {module:api/DefaultApi~gETModifyClusterIamRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterIamRolesResult}
     */
    gETModifyClusterIamRoles(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyClusterIamRoles");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterIamRoles");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterIamRoles");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'AddIamRoles': this.apiClient.buildCollectionParam(opts['addIamRoles'], 'multi'),
        'RemoveIamRoles': this.apiClient.buildCollectionParam(opts['removeIamRoles'], 'multi'),
        'DefaultIamRoleArn': opts['defaultIamRoleArn'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterIamRolesResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterIamRoles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterMaintenance operation.
     * @callback module:api/DefaultApi~gETModifyClusterMaintenanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterMaintenanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the maintenance settings of a cluster.
     * @param {String} clusterIdentifier A unique identifier for the cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [deferMaintenance] A boolean indicating whether to enable the deferred maintenance window. 
     * @param {String} [deferMaintenanceIdentifier] A unique identifier for the deferred maintenance window.
     * @param {Date} [deferMaintenanceStartTime] A timestamp indicating the start time for the deferred maintenance window.
     * @param {Date} [deferMaintenanceEndTime] A timestamp indicating end time for the deferred maintenance window. If you specify an end time, you can't specify a duration.
     * @param {Number} [deferMaintenanceDuration] An integer indicating the duration of the maintenance window in days. If you specify a duration, you can't specify an end time. The duration must be 45 days or less.
     * @param {module:api/DefaultApi~gETModifyClusterMaintenanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterMaintenanceResult}
     */
    gETModifyClusterMaintenance(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyClusterMaintenance");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterMaintenance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterMaintenance");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'DeferMaintenance': opts['deferMaintenance'],
        'DeferMaintenanceIdentifier': opts['deferMaintenanceIdentifier'],
        'DeferMaintenanceStartTime': opts['deferMaintenanceStartTime'],
        'DeferMaintenanceEndTime': opts['deferMaintenanceEndTime'],
        'DeferMaintenanceDuration': opts['deferMaintenanceDuration'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterMaintenanceResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterMaintenance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETModifyClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the parameters of a parameter group. For the parameters parameter, it can't contain ASCII characters.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} parameterGroupName The name of the parameter group to be modified.
     * @param {Array.<module:model/GETModifyClusterParameterGroupParametersParameterInner>} parameters <p>An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request.</p> <p>For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional.</p> <p>For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifyClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupNameMessage}
     */
    gETModifyClusterParameterGroup(parameterGroupName, parameters, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parameterGroupName' is set
      if (parameterGroupName === undefined || parameterGroupName === null) {
        throw new Error("Missing the required parameter 'parameterGroupName' when calling gETModifyClusterParameterGroup");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling gETModifyClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupName': parameterGroupName,
        'Parameters': this.apiClient.buildCollectionParam(parameters, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETModifyClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
     * @param {String} snapshotIdentifier The identifier of the snapshot whose setting you want to modify.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The number of days that a manual snapshot is retained. If the value is -1, the manual snapshot is retained indefinitely.</p> <p>If the manual snapshot falls outside of the new retention period, you can specify the force option to immediately delete the snapshot.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
     * @param {Boolean} [force] A Boolean option to override an exception if the retention period has already passed.
     * @param {module:api/DefaultApi~gETModifyClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterSnapshotResult}
     */
    gETModifyClusterSnapshot(snapshotIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'snapshotIdentifier' is set
      if (snapshotIdentifier === undefined || snapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'snapshotIdentifier' when calling gETModifyClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotIdentifier': snapshotIdentifier,
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'Force': opts['force'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterSnapshotSchedule operation.
     * @callback module:api/DefaultApi~gETModifyClusterSnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a snapshot schedule for a cluster.
     * @param {String} clusterIdentifier A unique identifier for the cluster whose snapshot schedule you want to modify. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [scheduleIdentifier] A unique alphanumeric identifier for the schedule that you want to associate with the cluster.
     * @param {Boolean} [disassociateSchedule] A boolean to indicate whether to remove the assoiciation between the cluster and the schedule.
     * @param {module:api/DefaultApi~gETModifyClusterSnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gETModifyClusterSnapshotSchedule(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyClusterSnapshotSchedule");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterSnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterSnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'ScheduleIdentifier': opts['scheduleIdentifier'],
        'DisassociateSchedule': opts['disassociateSchedule'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterSnapshotSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyClusterSubnetGroup operation.
     * @callback module:api/DefaultApi~gETModifyClusterSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
     * @param {String} clusterSubnetGroupName The name of the subnet group to be modified.
     * @param {Array.<String>} subnetIds An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [description] A text description of the subnet group to be modified.
     * @param {module:api/DefaultApi~gETModifyClusterSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterSubnetGroupResult}
     */
    gETModifyClusterSubnetGroup(clusterSubnetGroupName, subnetIds, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSubnetGroupName' is set
      if (clusterSubnetGroupName === undefined || clusterSubnetGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSubnetGroupName' when calling gETModifyClusterSubnetGroup");
      }
      // verify the required parameter 'subnetIds' is set
      if (subnetIds === undefined || subnetIds === null) {
        throw new Error("Missing the required parameter 'subnetIds' when calling gETModifyClusterSubnetGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyClusterSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyClusterSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSubnetGroupName': clusterSubnetGroupName,
        'Description': opts['description'],
        'SubnetIds': this.apiClient.buildCollectionParam(subnetIds, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterSubnetGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyCustomDomainAssociation operation.
     * @callback module:api/DefaultApi~gETModifyCustomDomainAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyCustomDomainAssociationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains information for changing a custom domain association.
     * @param {String} clusterIdentifier The identifier of the cluster to change a custom domain association for.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [customDomainName] The custom domain name for a changed custom domain association.
     * @param {String} [customDomainCertificateArn] The certificate Amazon Resource Name (ARN) for the changed custom domain association.
     * @param {module:api/DefaultApi~gETModifyCustomDomainAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyCustomDomainAssociationResult}
     */
    gETModifyCustomDomainAssociation(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifyCustomDomainAssociation");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyCustomDomainAssociation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyCustomDomainAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
        'CustomDomainName': opts['customDomainName'],
        'CustomDomainCertificateArn': opts['customDomainCertificateArn'],
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyCustomDomainAssociationResult;
      return this.apiClient.callApi(
        '/#Action=ModifyCustomDomainAssociation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyEndpointAccess operation.
     * @callback module:api/DefaultApi~gETModifyEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a Redshift-managed VPC endpoint.
     * @param {String} endpointName The endpoint to be modified.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [vpcSecurityGroupIds] The complete list of VPC security groups associated with the endpoint after the endpoint is modified.
     * @param {module:api/DefaultApi~gETModifyEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccess}
     */
    gETModifyEndpointAccess(endpointName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endpointName' is set
      if (endpointName === undefined || endpointName === null) {
        throw new Error("Missing the required parameter 'endpointName' when calling gETModifyEndpointAccess");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'EndpointName': endpointName,
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAccess;
      return this.apiClient.callApi(
        '/#Action=ModifyEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyEventSubscription operation.
     * @callback module:api/DefaultApi~gETModifyEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an existing Amazon Redshift event notification subscription.
     * @param {String} subscriptionName The name of the modified Amazon Redshift event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snsTopicArn] The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
     * @param {String} [sourceType] <p>The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your Amazon Web Services account. You must specify a source type in order to specify source IDs.</p> <p>Valid values: cluster, cluster-parameter-group, cluster-security-group, cluster-snapshot, and scheduled-action.</p>
     * @param {Array.<String>} [sourceIds] <p>A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified.</p> <p>Example: my-cluster-1, my-cluster-2</p> <p>Example: my-snapshot-20131010</p>
     * @param {Array.<String>} [eventCategories] <p>Specifies the Amazon Redshift event categories to be published by the event notification subscription.</p> <p>Values: configuration, management, monitoring, security, pending</p>
     * @param {String} [severity] <p>Specifies the Amazon Redshift event severity to be published by the event notification subscription.</p> <p>Values: ERROR, INFO</p>
     * @param {Boolean} [enabled] A Boolean value indicating if the subscription is enabled. <code>true</code> indicates the subscription is enabled 
     * @param {module:api/DefaultApi~gETModifyEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyEventSubscriptionResult}
     */
    gETModifyEventSubscription(subscriptionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionName' is set
      if (subscriptionName === undefined || subscriptionName === null) {
        throw new Error("Missing the required parameter 'subscriptionName' when calling gETModifyEventSubscription");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'SubscriptionName': subscriptionName,
        'SnsTopicArn': opts['snsTopicArn'],
        'SourceType': opts['sourceType'],
        'SourceIds': this.apiClient.buildCollectionParam(opts['sourceIds'], 'multi'),
        'EventCategories': this.apiClient.buildCollectionParam(opts['eventCategories'], 'multi'),
        'Severity': opts['severity'],
        'Enabled': opts['enabled'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifyEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=ModifyEventSubscription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyScheduledAction operation.
     * @callback module:api/DefaultApi~gETModifyScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a scheduled action. 
     * @param {String} scheduledActionName The name of the scheduled action to modify. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/GETCreateScheduledActionTargetActionParameter} [targetAction] A modified JSON format of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {String} [schedule] A modified schedule in either <code>at( )</code> or <code>cron( )</code> format. For more information about this parameter, see <a>ScheduledAction</a>.
     * @param {String} [iamRole] A different IAM role to assume to run the target action. For more information about this parameter, see <a>ScheduledAction</a>.
     * @param {String} [scheduledActionDescription] A modified description of the scheduled action. 
     * @param {Date} [startTime] A modified start time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {Date} [endTime] A modified end time of the scheduled action. For more information about this parameter, see <a>ScheduledAction</a>. 
     * @param {Boolean} [enable] A modified enable flag of the scheduled action. If true, the scheduled action is active. If false, the scheduled action is disabled. 
     * @param {module:api/DefaultApi~gETModifyScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledAction}
     */
    gETModifyScheduledAction(scheduledActionName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scheduledActionName' is set
      if (scheduledActionName === undefined || scheduledActionName === null) {
        throw new Error("Missing the required parameter 'scheduledActionName' when calling gETModifyScheduledAction");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyScheduledAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyScheduledAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduledActionName': scheduledActionName,
        'TargetAction': opts['targetAction'],
        'Schedule': opts['schedule'],
        'IamRole': opts['iamRole'],
        'ScheduledActionDescription': opts['scheduledActionDescription'],
        'StartTime': opts['startTime'],
        'EndTime': opts['endTime'],
        'Enable': opts['enable'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ScheduledAction;
      return this.apiClient.callApi(
        '/#Action=ModifyScheduledAction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifySnapshotCopyRetentionPeriod operation.
     * @callback module:api/DefaultApi~gETModifySnapshotCopyRetentionPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifySnapshotCopyRetentionPeriodResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the number of days to retain snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
     * @param {String} clusterIdentifier <p>The unique identifier of the cluster for which you want to change the retention period for either automated or manual snapshots that are copied to a destination Amazon Web Services Region.</p> <p>Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.</p>
     * @param {Number} retentionPeriod <p>The number of days to retain automated snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region.</p> <p>By default, this only changes the retention period of copied automated snapshots. </p> <p>If you decrease the retention period for automated snapshots that are copied to a destination Amazon Web Services Region, Amazon Redshift deletes any existing automated snapshots that were copied to the destination Amazon Web Services Region and that fall outside of the new retention period.</p> <p>Constraints: Must be at least 1 and no more than 35 for automated snapshots. </p> <p>If you specify the <code>manual</code> option, only newly copied manual snapshots will have the new retention period. </p> <p>If you specify the value of -1 newly copied manual snapshots are retained indefinitely.</p> <p>Constraints: The number of days must be either -1 or an integer between 1 and 3,653 for manual snapshots.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [manual] Indicates whether to apply the snapshot retention period to newly copied manual snapshots instead of automated snapshots.
     * @param {module:api/DefaultApi~gETModifySnapshotCopyRetentionPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifySnapshotCopyRetentionPeriodResult}
     */
    gETModifySnapshotCopyRetentionPeriod(clusterIdentifier, retentionPeriod, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETModifySnapshotCopyRetentionPeriod");
      }
      // verify the required parameter 'retentionPeriod' is set
      if (retentionPeriod === undefined || retentionPeriod === null) {
        throw new Error("Missing the required parameter 'retentionPeriod' when calling gETModifySnapshotCopyRetentionPeriod");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifySnapshotCopyRetentionPeriod");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifySnapshotCopyRetentionPeriod");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'RetentionPeriod': retentionPeriod,
        'Manual': opts['manual'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ModifySnapshotCopyRetentionPeriodResult;
      return this.apiClient.callApi(
        '/#Action=ModifySnapshotCopyRetentionPeriod', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifySnapshotSchedule operation.
     * @callback module:api/DefaultApi~gETModifySnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
     * @param {String} scheduleIdentifier A unique alphanumeric identifier of the schedule to modify.
     * @param {Array.<String>} scheduleDefinitions An updated list of schedule definitions. A schedule definition is made up of schedule expressions, for example, \"cron(30 12 *)\" or \"rate(12 hours)\".
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETModifySnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotSchedule}
     */
    gETModifySnapshotSchedule(scheduleIdentifier, scheduleDefinitions, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scheduleIdentifier' is set
      if (scheduleIdentifier === undefined || scheduleIdentifier === null) {
        throw new Error("Missing the required parameter 'scheduleIdentifier' when calling gETModifySnapshotSchedule");
      }
      // verify the required parameter 'scheduleDefinitions' is set
      if (scheduleDefinitions === undefined || scheduleDefinitions === null) {
        throw new Error("Missing the required parameter 'scheduleDefinitions' when calling gETModifySnapshotSchedule");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifySnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifySnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'ScheduleIdentifier': scheduleIdentifier,
        'ScheduleDefinitions': this.apiClient.buildCollectionParam(scheduleDefinitions, 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = SnapshotSchedule;
      return this.apiClient.callApi(
        '/#Action=ModifySnapshotSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETModifyUsageLimit operation.
     * @callback module:api/DefaultApi~gETModifyUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a usage limit in a cluster. You can't modify the feature type or period of a usage limit.
     * @param {String} usageLimitId The identifier of the usage limit to modify.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [amount] The new limit amount. For more information about this parameter, see <a>UsageLimit</a>. 
     * @param {module:model/String} [breachAction] The new action that Amazon Redshift takes when the limit is reached. For more information about this parameter, see <a>UsageLimit</a>. 
     * @param {module:api/DefaultApi~gETModifyUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageLimit}
     */
    gETModifyUsageLimit(usageLimitId, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'usageLimitId' is set
      if (usageLimitId === undefined || usageLimitId === null) {
        throw new Error("Missing the required parameter 'usageLimitId' when calling gETModifyUsageLimit");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETModifyUsageLimit");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETModifyUsageLimit");
      }

      let pathParams = {
      };
      let queryParams = {
        'UsageLimitId': usageLimitId,
        'Amount': opts['amount'],
        'BreachAction': opts['breachAction'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = UsageLimit;
      return this.apiClient.callApi(
        '/#Action=ModifyUsageLimit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETPauseCluster operation.
     * @callback module:api/DefaultApi~gETPauseClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PauseClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pauses a cluster.
     * @param {String} clusterIdentifier The identifier of the cluster to be paused.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETPauseClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PauseClusterResult}
     */
    gETPauseCluster(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETPauseCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETPauseCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETPauseCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PauseClusterResult;
      return this.apiClient.callApi(
        '/#Action=PauseCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETPurchaseReservedNodeOffering operation.
     * @callback module:api/DefaultApi~gETPurchaseReservedNodeOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseReservedNodeOfferingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} reservedNodeOfferingId The unique identifier of the reserved node offering you want to purchase.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [nodeCount] <p>The number of reserved nodes that you want to purchase.</p> <p>Default: <code>1</code> </p>
     * @param {module:api/DefaultApi~gETPurchaseReservedNodeOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseReservedNodeOfferingResult}
     */
    gETPurchaseReservedNodeOffering(reservedNodeOfferingId, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reservedNodeOfferingId' is set
      if (reservedNodeOfferingId === undefined || reservedNodeOfferingId === null) {
        throw new Error("Missing the required parameter 'reservedNodeOfferingId' when calling gETPurchaseReservedNodeOffering");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETPurchaseReservedNodeOffering");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETPurchaseReservedNodeOffering");
      }

      let pathParams = {
      };
      let queryParams = {
        'ReservedNodeOfferingId': reservedNodeOfferingId,
        'NodeCount': opts['nodeCount'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PurchaseReservedNodeOfferingResult;
      return this.apiClient.callApi(
        '/#Action=PurchaseReservedNodeOffering', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRebootCluster operation.
     * @callback module:api/DefaultApi~gETRebootClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
     * @param {String} clusterIdentifier The cluster identifier.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRebootClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootClusterResult}
     */
    gETRebootCluster(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETRebootCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRebootCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRebootCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RebootClusterResult;
      return this.apiClient.callApi(
        '/#Action=RebootCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRejectDataShare operation.
     * @callback module:api/DefaultApi~gETRejectDataShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare consumer account, rejects the specified datashare.
     * @param {String} dataShareArn The Amazon Resource Name (ARN) of the datashare to reject.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRejectDataShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    gETRejectDataShare(dataShareArn, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataShareArn' is set
      if (dataShareArn === undefined || dataShareArn === null) {
        throw new Error("Missing the required parameter 'dataShareArn' when calling gETRejectDataShare");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRejectDataShare");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRejectDataShare");
      }

      let pathParams = {
      };
      let queryParams = {
        'DataShareArn': dataShareArn,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=RejectDataShare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETResetClusterParameterGroup operation.
     * @callback module:api/DefaultApi~gETResetClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to \"engine-default\". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
     * @param {String} parameterGroupName The name of the cluster parameter group to be reset.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [resetAllParameters] <p>If <code>true</code>, all parameters in the specified parameter group will be reset to their default values. </p> <p>Default: <code>true</code> </p>
     * @param {Array.<module:model/GETModifyClusterParameterGroupParametersParameterInner>} [parameters] <p>An array of names of parameters to be reset. If <i>ResetAllParameters</i> option is not used, then at least one parameter name must be supplied. </p> <p>Constraints: A maximum of 20 parameters can be reset in a single request.</p>
     * @param {module:api/DefaultApi~gETResetClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupNameMessage}
     */
    gETResetClusterParameterGroup(parameterGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parameterGroupName' is set
      if (parameterGroupName === undefined || parameterGroupName === null) {
        throw new Error("Missing the required parameter 'parameterGroupName' when calling gETResetClusterParameterGroup");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETResetClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETResetClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'ParameterGroupName': parameterGroupName,
        'ResetAllParameters': opts['resetAllParameters'],
        'Parameters': this.apiClient.buildCollectionParam(opts['parameters'], 'multi'),
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ResetClusterParameterGroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETResizeCluster operation.
     * @callback module:api/DefaultApi~gETResizeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResizeClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc1.large (if your cluster is in a VPC)</p> </li> <li> <p>dc1.8xlarge (if your cluster is in a VPC)</p> </li> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.xlplus</p> </li> <li> <p>ra3.4xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
     * @param {String} clusterIdentifier The unique identifier for the cluster to resize.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterType] The new cluster type for the specified cluster.
     * @param {String} [nodeType] The new node type for the nodes you are adding. If not specified, the cluster's current node type is used.
     * @param {Number} [numberOfNodes] The new number of nodes for the cluster. If not specified, the cluster's current number of nodes is used.
     * @param {Boolean} [classic] A boolean value indicating whether the resize operation is using the classic resize process. If you don't provide this parameter or set the value to <code>false</code>, the resize type is elastic. 
     * @param {String} [reservedNodeId] The identifier of the reserved node.
     * @param {String} [targetReservedNodeOfferingId] The identifier of the target reserved node offering.
     * @param {module:api/DefaultApi~gETResizeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResizeClusterResult}
     */
    gETResizeCluster(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETResizeCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETResizeCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETResizeCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'ClusterType': opts['clusterType'],
        'NodeType': opts['nodeType'],
        'NumberOfNodes': opts['numberOfNodes'],
        'Classic': opts['classic'],
        'ReservedNodeId': opts['reservedNodeId'],
        'TargetReservedNodeOfferingId': opts['targetReservedNodeOfferingId'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ResizeClusterResult;
      return this.apiClient.callApi(
        '/#Action=ResizeCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRestoreFromClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETRestoreFromClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreFromClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} clusterIdentifier <p>The identifier of the cluster that will be created from restoring the snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>Alphabetic characters must be lowercase.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Must be unique for all clusters within an Amazon Web Services account.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snapshotIdentifier] <p>The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. You must specify this parameter or <code>snapshotArn</code>, but not both.</p> <p>Example: <code>my-snapshot-id</code> </p>
     * @param {String} [snapshotArn] The Amazon Resource Name (ARN) of the snapshot associated with the message to restore from a cluster. You must specify this parameter or <code>snapshotIdentifier</code>, but not both.
     * @param {String} [snapshotClusterIdentifier] The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
     * @param {Number} [port] <p>The port number on which the cluster accepts connections.</p> <p>Default: The same port as the original cluster.</p> <p>Constraints: Must be between <code>1115</code> and <code>65535</code>.</p>
     * @param {String} [availabilityZone] <p>The Amazon EC2 Availability Zone in which to restore the cluster.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Example: <code>us-east-2a</code> </p>
     * @param {Boolean} [allowVersionUpgrade] <p>If <code>true</code>, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. </p> <p>Default: <code>true</code> </p>
     * @param {String} [clusterSubnetGroupName] <p>The name of the subnet group where you want to cluster restored.</p> <p>A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.</p>
     * @param {Boolean} [publiclyAccessible] If <code>true</code>, the cluster can be accessed from a public network. 
     * @param {String} [ownerAccount] The Amazon Web Services account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
     * @param {String} [hsmClientCertificateIdentifier] Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
     * @param {String} [hsmConfigurationIdentifier] Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
     * @param {String} [elasticIp] The Elastic IP (EIP) address for the cluster. Don't specify the Elastic IP address for a publicly accessible cluster with availability zone relocation turned on.
     * @param {String} [clusterParameterGroupName] <p>The name of the parameter group to be associated with this cluster.</p> <p>Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Working with Amazon Redshift Parameter Groups</a>.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Cannot end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
     * @param {Array.<String>} [clusterSecurityGroups] <p>A list of security groups to be associated with this cluster.</p> <p>Default: The default cluster security group for Amazon Redshift.</p> <p>Cluster security groups only apply to clusters outside of VPCs.</p>
     * @param {Array.<String>} [vpcSecurityGroupIds] <p>A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.</p> <p>Default: The default VPC security group is associated with the cluster.</p> <p>VPC security groups only apply to clusters in VPCs.</p>
     * @param {String} [preferredMaintenanceWindow] <p>The weekly time range (in UTC) during which automated cluster maintenance can occur.</p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p> Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-maintenance-windows\">Maintenance Windows</a> in Amazon Redshift Cluster Management Guide. </p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Minimum 30-minute window.</p>
     * @param {Number} [automatedSnapshotRetentionPeriod] <p>The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with <a>CreateClusterSnapshot</a>. </p> <p>You can't disable automated snapshots for RA3 node types. Set the automated retention period from 1-35 days.</p> <p>Default: The value selected for the cluster from which the snapshot was taken.</p> <p>Constraints: Must be a value from 0 to 35.</p>
     * @param {Number} [manualSnapshotRetentionPeriod] <p>The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots.</p> <p>The value must be either -1 or an integer between 1 and 3,653.</p>
     * @param {String} [kmsKeyId] The Key Management Service (KMS) key ID of the encryption key that encrypts data in the cluster restored from a shared snapshot. You can also provide the key ID when you restore from an unencrypted snapshot to an encrypted cluster in the same account. Additionally, you can specify a new KMS key ID when you restore from an encrypted snapshot in the same account in order to change it. In that case, the restored cluster is encrypted with the new KMS key ID.
     * @param {String} [nodeType] <p>The node type that the restored cluster will be provisioned with.</p> <p>Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds1.xlarge into ds2.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type or dc2.large instance type. You can't restore dc1.8xlarge to dc2.8xlarge. First restore to a dc1.8xlarge cluster, then resize to a dc2.8large cluster. For more information about node types, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html#rs-about-clusters-and-nodes\"> About Clusters and Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
     * @param {Boolean} [enhancedVpcRouting] <p>An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/enhanced-vpc-routing.html\">Enhanced VPC Routing</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If this option is <code>true</code>, enhanced VPC routing is enabled. </p> <p>Default: false</p>
     * @param {String} [additionalInfo] Reserved.
     * @param {Array.<String>} [iamRoles] <p>A list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. </p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html\">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} [maintenanceTrackName] The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the <code>MaintenanceTrack</code> value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks.
     * @param {String} [snapshotScheduleIdentifier] A unique identifier for the snapshot schedule.
     * @param {Number} [numberOfNodes] The number of nodes specified when provisioning the restored cluster.
     * @param {Boolean} [availabilityZoneRelocation] The option to enable relocation for an Amazon Redshift cluster between Availability Zones after the cluster is restored.
     * @param {module:model/String} [aquaConfigurationStatus] This parameter is retired. It does not set the AQUA configuration status. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator).
     * @param {String} [defaultIamRoleArn] The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was last modified while it was restored from a snapshot.
     * @param {String} [reservedNodeId] The identifier of the target reserved node offering.
     * @param {String} [targetReservedNodeOfferingId] The identifier of the target reserved node offering.
     * @param {Boolean} [encrypted] Enables support for restoring an unencrypted snapshot to a cluster encrypted with Key Management Service (KMS) and a customer managed key.
     * @param {module:api/DefaultApi~gETRestoreFromClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreFromClusterSnapshotResult}
     */
    gETRestoreFromClusterSnapshot(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETRestoreFromClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRestoreFromClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRestoreFromClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'SnapshotIdentifier': opts['snapshotIdentifier'],
        'SnapshotArn': opts['snapshotArn'],
        'SnapshotClusterIdentifier': opts['snapshotClusterIdentifier'],
        'Port': opts['port'],
        'AvailabilityZone': opts['availabilityZone'],
        'AllowVersionUpgrade': opts['allowVersionUpgrade'],
        'ClusterSubnetGroupName': opts['clusterSubnetGroupName'],
        'PubliclyAccessible': opts['publiclyAccessible'],
        'OwnerAccount': opts['ownerAccount'],
        'HsmClientCertificateIdentifier': opts['hsmClientCertificateIdentifier'],
        'HsmConfigurationIdentifier': opts['hsmConfigurationIdentifier'],
        'ElasticIp': opts['elasticIp'],
        'ClusterParameterGroupName': opts['clusterParameterGroupName'],
        'ClusterSecurityGroups': this.apiClient.buildCollectionParam(opts['clusterSecurityGroups'], 'multi'),
        'VpcSecurityGroupIds': this.apiClient.buildCollectionParam(opts['vpcSecurityGroupIds'], 'multi'),
        'PreferredMaintenanceWindow': opts['preferredMaintenanceWindow'],
        'AutomatedSnapshotRetentionPeriod': opts['automatedSnapshotRetentionPeriod'],
        'ManualSnapshotRetentionPeriod': opts['manualSnapshotRetentionPeriod'],
        'KmsKeyId': opts['kmsKeyId'],
        'NodeType': opts['nodeType'],
        'EnhancedVpcRouting': opts['enhancedVpcRouting'],
        'AdditionalInfo': opts['additionalInfo'],
        'IamRoles': this.apiClient.buildCollectionParam(opts['iamRoles'], 'multi'),
        'MaintenanceTrackName': opts['maintenanceTrackName'],
        'SnapshotScheduleIdentifier': opts['snapshotScheduleIdentifier'],
        'NumberOfNodes': opts['numberOfNodes'],
        'AvailabilityZoneRelocation': opts['availabilityZoneRelocation'],
        'AquaConfigurationStatus': opts['aquaConfigurationStatus'],
        'DefaultIamRoleArn': opts['defaultIamRoleArn'],
        'ReservedNodeId': opts['reservedNodeId'],
        'TargetReservedNodeOfferingId': opts['targetReservedNodeOfferingId'],
        'Encrypted': opts['encrypted'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RestoreFromClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=RestoreFromClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRestoreTableFromClusterSnapshot operation.
     * @callback module:api/DefaultApi~gETRestoreTableFromClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreTableFromClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p> <p>You can't use this operation to restore tables with <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved\">interleaved sort keys</a>.</p>
     * @param {String} clusterIdentifier The identifier of the Amazon Redshift cluster to restore the table to.
     * @param {String} snapshotIdentifier The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the <code>ClusterIdentifier</code> parameter.
     * @param {String} sourceDatabaseName The name of the source database that contains the table to restore from.
     * @param {String} sourceTableName The name of the source table to restore from.
     * @param {String} newTableName The name of the table to create as a result of the current request.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sourceSchemaName] The name of the source schema that contains the table to restore from. If you do not specify a <code>SourceSchemaName</code> value, the default is <code>public</code>.
     * @param {String} [targetDatabaseName] The name of the database to restore the table to.
     * @param {String} [targetSchemaName] The name of the schema to restore the table to.
     * @param {Boolean} [enableCaseSensitiveIdentifier] Indicates whether name identifiers for database, schema, and table are case sensitive. If <code>true</code>, the names are case sensitive. If <code>false</code> (default), the names are not case sensitive.
     * @param {module:api/DefaultApi~gETRestoreTableFromClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreTableFromClusterSnapshotResult}
     */
    gETRestoreTableFromClusterSnapshot(clusterIdentifier, snapshotIdentifier, sourceDatabaseName, sourceTableName, newTableName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'snapshotIdentifier' is set
      if (snapshotIdentifier === undefined || snapshotIdentifier === null) {
        throw new Error("Missing the required parameter 'snapshotIdentifier' when calling gETRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'sourceDatabaseName' is set
      if (sourceDatabaseName === undefined || sourceDatabaseName === null) {
        throw new Error("Missing the required parameter 'sourceDatabaseName' when calling gETRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'sourceTableName' is set
      if (sourceTableName === undefined || sourceTableName === null) {
        throw new Error("Missing the required parameter 'sourceTableName' when calling gETRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'newTableName' is set
      if (newTableName === undefined || newTableName === null) {
        throw new Error("Missing the required parameter 'newTableName' when calling gETRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRestoreTableFromClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'SnapshotIdentifier': snapshotIdentifier,
        'SourceDatabaseName': sourceDatabaseName,
        'SourceSchemaName': opts['sourceSchemaName'],
        'SourceTableName': sourceTableName,
        'TargetDatabaseName': opts['targetDatabaseName'],
        'TargetSchemaName': opts['targetSchemaName'],
        'NewTableName': newTableName,
        'EnableCaseSensitiveIdentifier': opts['enableCaseSensitiveIdentifier'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RestoreTableFromClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=RestoreTableFromClusterSnapshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETResumeCluster operation.
     * @callback module:api/DefaultApi~gETResumeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResumeClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes a paused cluster.
     * @param {String} clusterIdentifier The identifier of the cluster to be resumed.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETResumeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResumeClusterResult}
     */
    gETResumeCluster(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETResumeCluster");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETResumeCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETResumeCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = ResumeClusterResult;
      return this.apiClient.callApi(
        '/#Action=ResumeCluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRevokeClusterSecurityGroupIngress operation.
     * @callback module:api/DefaultApi~gETRevokeClusterSecurityGroupIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeClusterSecurityGroupIngressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
     * @param {String} clusterSecurityGroupName The name of the security Group from which to revoke the ingress rule.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [CIDRIP] The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code> and <code>EC2SecurityGroupOwnerId</code> cannot be provided. 
     * @param {String} [eC2SecurityGroupName] The name of the EC2 Security Group whose access is to be revoked. If <code>EC2SecurityGroupName</code> is specified, <code>EC2SecurityGroupOwnerId</code> must also be provided and <code>CIDRIP</code> cannot be provided. 
     * @param {String} [eC2SecurityGroupOwnerId] <p>The Amazon Web Services account number of the owner of the security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID is not an acceptable value. If <code>EC2SecurityGroupOwnerId</code> is specified, <code>EC2SecurityGroupName</code> must also be provided. and <code>CIDRIP</code> cannot be provided. </p> <p>Example: <code>111122223333</code> </p>
     * @param {module:api/DefaultApi~gETRevokeClusterSecurityGroupIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeClusterSecurityGroupIngressResult}
     */
    gETRevokeClusterSecurityGroupIngress(clusterSecurityGroupName, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterSecurityGroupName' is set
      if (clusterSecurityGroupName === undefined || clusterSecurityGroupName === null) {
        throw new Error("Missing the required parameter 'clusterSecurityGroupName' when calling gETRevokeClusterSecurityGroupIngress");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRevokeClusterSecurityGroupIngress");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRevokeClusterSecurityGroupIngress");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterSecurityGroupName': clusterSecurityGroupName,
        'CIDRIP': opts['CIDRIP'],
        'EC2SecurityGroupName': opts['eC2SecurityGroupName'],
        'EC2SecurityGroupOwnerId': opts['eC2SecurityGroupOwnerId'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RevokeClusterSecurityGroupIngressResult;
      return this.apiClient.callApi(
        '/#Action=RevokeClusterSecurityGroupIngress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRevokeEndpointAccess operation.
     * @callback module:api/DefaultApi~gETRevokeEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAuthorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes access to a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterIdentifier] The cluster to revoke access from.
     * @param {String} [account] The Amazon Web Services account ID whose access is to be revoked.
     * @param {Array.<String>} [vpcIds] The virtual private cloud (VPC) identifiers for which access is to be revoked.
     * @param {Boolean} [force] Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted.
     * @param {module:api/DefaultApi~gETRevokeEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAuthorization}
     */
    gETRevokeEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRevokeEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRevokeEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': opts['clusterIdentifier'],
        'Account': opts['account'],
        'VpcIds': this.apiClient.buildCollectionParam(opts['vpcIds'], 'multi'),
        'Force': opts['force'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = EndpointAuthorization;
      return this.apiClient.callApi(
        '/#Action=RevokeEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRevokeSnapshotAccess operation.
     * @callback module:api/DefaultApi~gETRevokeSnapshotAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeSnapshotAccessResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the ability of the specified Amazon Web Services account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {String} accountWithRestoreAccess The identifier of the Amazon Web Services account that can no longer restore the specified snapshot.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [snapshotIdentifier] The identifier of the snapshot that the account can no longer access.
     * @param {String} [snapshotArn] The Amazon Resource Name (ARN) of the snapshot associated with the message to revoke access.
     * @param {String} [snapshotClusterIdentifier] The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
     * @param {module:api/DefaultApi~gETRevokeSnapshotAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeSnapshotAccessResult}
     */
    gETRevokeSnapshotAccess(accountWithRestoreAccess, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountWithRestoreAccess' is set
      if (accountWithRestoreAccess === undefined || accountWithRestoreAccess === null) {
        throw new Error("Missing the required parameter 'accountWithRestoreAccess' when calling gETRevokeSnapshotAccess");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRevokeSnapshotAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRevokeSnapshotAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'SnapshotIdentifier': opts['snapshotIdentifier'],
        'SnapshotArn': opts['snapshotArn'],
        'SnapshotClusterIdentifier': opts['snapshotClusterIdentifier'],
        'AccountWithRestoreAccess': accountWithRestoreAccess,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RevokeSnapshotAccessResult;
      return this.apiClient.callApi(
        '/#Action=RevokeSnapshotAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETRotateEncryptionKey operation.
     * @callback module:api/DefaultApi~gETRotateEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RotateEncryptionKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotates the encryption keys for a cluster.
     * @param {String} clusterIdentifier <p>The unique identifier of the cluster that you want to rotate the encryption keys for.</p> <p>Constraints: Must be the name of valid cluster that has encryption enabled.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~gETRotateEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RotateEncryptionKeyResult}
     */
    gETRotateEncryptionKey(clusterIdentifier, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETRotateEncryptionKey");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETRotateEncryptionKey");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETRotateEncryptionKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClusterIdentifier': clusterIdentifier,
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = RotateEncryptionKeyResult;
      return this.apiClient.callApi(
        '/#Action=RotateEncryptionKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gETUpdatePartnerStatus operation.
     * @callback module:api/DefaultApi~gETUpdatePartnerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerIntegrationOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of a partner integration.
     * @param {String} accountId The Amazon Web Services account ID that owns the cluster.
     * @param {String} clusterIdentifier The cluster identifier of the cluster whose partner integration status is being updated.
     * @param {String} databaseName The name of the database whose partner integration status is being updated.
     * @param {String} partnerName The name of the partner whose integration status is being updated.
     * @param {module:model/String} status The value of the updated status.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [statusMessage] The status message provided by the partner.
     * @param {module:api/DefaultApi~gETUpdatePartnerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerIntegrationOutputMessage}
     */
    gETUpdatePartnerStatus(accountId, clusterIdentifier, databaseName, partnerName, status, action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling gETUpdatePartnerStatus");
      }
      // verify the required parameter 'clusterIdentifier' is set
      if (clusterIdentifier === undefined || clusterIdentifier === null) {
        throw new Error("Missing the required parameter 'clusterIdentifier' when calling gETUpdatePartnerStatus");
      }
      // verify the required parameter 'databaseName' is set
      if (databaseName === undefined || databaseName === null) {
        throw new Error("Missing the required parameter 'databaseName' when calling gETUpdatePartnerStatus");
      }
      // verify the required parameter 'partnerName' is set
      if (partnerName === undefined || partnerName === null) {
        throw new Error("Missing the required parameter 'partnerName' when calling gETUpdatePartnerStatus");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling gETUpdatePartnerStatus");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling gETUpdatePartnerStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling gETUpdatePartnerStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'AccountId': accountId,
        'ClusterIdentifier': clusterIdentifier,
        'DatabaseName': databaseName,
        'PartnerName': partnerName,
        'Status': status,
        'StatusMessage': opts['statusMessage'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = PartnerIntegrationOutputMessage;
      return this.apiClient.callApi(
        '/#Action=UpdatePartnerStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAcceptReservedNodeExchange operation.
     * @callback module:api/DefaultApi~pOSTAcceptReservedNodeExchangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptReservedNodeExchangeOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AcceptReservedNodeExchangeInputMessage} [acceptReservedNodeExchangeInputMessage] 
     * @param {module:api/DefaultApi~pOSTAcceptReservedNodeExchangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptReservedNodeExchangeOutputMessage}
     */
    pOSTAcceptReservedNodeExchange(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['acceptReservedNodeExchangeInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAcceptReservedNodeExchange");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAcceptReservedNodeExchange");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AcceptReservedNodeExchangeOutputMessage;
      return this.apiClient.callApi(
        '/#Action=AcceptReservedNodeExchange', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAddPartner operation.
     * @callback module:api/DefaultApi~pOSTAddPartnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerIntegrationOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a partner integration to a cluster. This operation authorizes a partner to push status updates for the specified database. To complete the integration, you also set up the integration on the partner website.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/PartnerIntegrationInputMessage} [partnerIntegrationInputMessage] 
     * @param {module:api/DefaultApi~pOSTAddPartnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerIntegrationOutputMessage}
     */
    pOSTAddPartner(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['partnerIntegrationInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAddPartner");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAddPartner");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PartnerIntegrationOutputMessage;
      return this.apiClient.callApi(
        '/#Action=AddPartner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAssociateDataShareConsumer operation.
     * @callback module:api/DefaultApi~pOSTAssociateDataShareConsumerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare consumer account, associates a datashare with the account (AssociateEntireAccount) or the specified namespace (ConsumerArn). If you make this association, the consumer can consume the datashare.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AssociateDataShareConsumerMessage} [associateDataShareConsumerMessage] 
     * @param {module:api/DefaultApi~pOSTAssociateDataShareConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    pOSTAssociateDataShareConsumer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['associateDataShareConsumerMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAssociateDataShareConsumer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAssociateDataShareConsumer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=AssociateDataShareConsumer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAuthorizeClusterSecurityGroupIngress operation.
     * @callback module:api/DefaultApi~pOSTAuthorizeClusterSecurityGroupIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeClusterSecurityGroupIngressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.</p> <p>If you authorize access to an Amazon EC2 security group, specify <i>EC2SecurityGroupName</i> and <i>EC2SecurityGroupOwnerId</i>. The Amazon EC2 security group and Amazon Redshift cluster must be in the same Amazon Web Services Region. </p> <p>If you authorize access to a CIDR/IP address range, specify <i>CIDRIP</i>. For an overview of CIDR blocks, see the Wikipedia article on <a href=\"http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\">Classless Inter-Domain Routing</a>. </p> <p>You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Working with Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AuthorizeClusterSecurityGroupIngressMessage} [authorizeClusterSecurityGroupIngressMessage] 
     * @param {module:api/DefaultApi~pOSTAuthorizeClusterSecurityGroupIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeClusterSecurityGroupIngressResult}
     */
    pOSTAuthorizeClusterSecurityGroupIngress(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['authorizeClusterSecurityGroupIngressMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAuthorizeClusterSecurityGroupIngress");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAuthorizeClusterSecurityGroupIngress");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AuthorizeClusterSecurityGroupIngressResult;
      return this.apiClient.callApi(
        '/#Action=AuthorizeClusterSecurityGroupIngress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAuthorizeDataShare operation.
     * @callback module:api/DefaultApi~pOSTAuthorizeDataShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a data producer account, authorizes the sharing of a datashare with one or more consumer accounts or managing entities. To authorize a datashare for a data consumer, the producer account must have the correct access permissions.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AuthorizeDataShareMessage} [authorizeDataShareMessage] 
     * @param {module:api/DefaultApi~pOSTAuthorizeDataShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    pOSTAuthorizeDataShare(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['authorizeDataShareMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAuthorizeDataShare");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAuthorizeDataShare");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=AuthorizeDataShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAuthorizeEndpointAccess operation.
     * @callback module:api/DefaultApi~pOSTAuthorizeEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAuthorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grants access to a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AuthorizeEndpointAccessMessage} [authorizeEndpointAccessMessage] 
     * @param {module:api/DefaultApi~pOSTAuthorizeEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAuthorization}
     */
    pOSTAuthorizeEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['authorizeEndpointAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAuthorizeEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAuthorizeEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAuthorization;
      return this.apiClient.callApi(
        '/#Action=AuthorizeEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTAuthorizeSnapshotAccess operation.
     * @callback module:api/DefaultApi~pOSTAuthorizeSnapshotAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeSnapshotAccessResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Authorizes the specified Amazon Web Services account to restore the specified snapshot.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/AuthorizeSnapshotAccessMessage} [authorizeSnapshotAccessMessage] 
     * @param {module:api/DefaultApi~pOSTAuthorizeSnapshotAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeSnapshotAccessResult}
     */
    pOSTAuthorizeSnapshotAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['authorizeSnapshotAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTAuthorizeSnapshotAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTAuthorizeSnapshotAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AuthorizeSnapshotAccessResult;
      return this.apiClient.callApi(
        '/#Action=AuthorizeSnapshotAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTBatchDeleteClusterSnapshots operation.
     * @callback module:api/DefaultApi~pOSTBatchDeleteClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteClusterSnapshotsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a set of cluster snapshots.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/BatchDeleteClusterSnapshotsRequest} [batchDeleteClusterSnapshotsRequest] 
     * @param {module:api/DefaultApi~pOSTBatchDeleteClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteClusterSnapshotsResult}
     */
    pOSTBatchDeleteClusterSnapshots(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchDeleteClusterSnapshotsRequest'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTBatchDeleteClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTBatchDeleteClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = BatchDeleteClusterSnapshotsResult;
      return this.apiClient.callApi(
        '/#Action=BatchDeleteClusterSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTBatchModifyClusterSnapshots operation.
     * @callback module:api/DefaultApi~pOSTBatchModifyClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchModifyClusterSnapshotsOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the settings for a set of cluster snapshots.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/BatchModifyClusterSnapshotsMessage} [batchModifyClusterSnapshotsMessage] 
     * @param {module:api/DefaultApi~pOSTBatchModifyClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchModifyClusterSnapshotsOutputMessage}
     */
    pOSTBatchModifyClusterSnapshots(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchModifyClusterSnapshotsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTBatchModifyClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTBatchModifyClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = BatchModifyClusterSnapshotsOutputMessage;
      return this.apiClient.callApi(
        '/#Action=BatchModifyClusterSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCancelResize operation.
     * @callback module:api/DefaultApi~pOSTCancelResizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResizeProgressMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a resize operation for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CancelResizeMessage} [cancelResizeMessage] 
     * @param {module:api/DefaultApi~pOSTCancelResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResizeProgressMessage}
     */
    pOSTCancelResize(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelResizeMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCancelResize");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCancelResize");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ResizeProgressMessage;
      return this.apiClient.callApi(
        '/#Action=CancelResize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCopyClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTCopyClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CopyClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.</p> <p>When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CopyClusterSnapshotMessage} [copyClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTCopyClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CopyClusterSnapshotResult}
     */
    pOSTCopyClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['copyClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCopyClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCopyClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CopyClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CopyClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateAuthenticationProfile operation.
     * @callback module:api/DefaultApi~pOSTCreateAuthenticationProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthenticationProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an authentication profile with the specified parameters.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateAuthenticationProfileMessage} [createAuthenticationProfileMessage] 
     * @param {module:api/DefaultApi~pOSTCreateAuthenticationProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthenticationProfileResult}
     */
    pOSTCreateAuthenticationProfile(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createAuthenticationProfileMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateAuthenticationProfile");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateAuthenticationProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateAuthenticationProfileResult;
      return this.apiClient.callApi(
        '/#Action=CreateAuthenticationProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateCluster operation.
     * @callback module:api/DefaultApi~pOSTCreateClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new cluster with the specified parameters.</p> <p>To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateClusterMessage} [createClusterMessage] 
     * @param {module:api/DefaultApi~pOSTCreateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterResult}
     */
    pOSTCreateCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateClusterResult;
      return this.apiClient.callApi(
        '/#Action=CreateCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTCreateClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterParameterGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Redshift parameter group.</p> <p>Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using <a>ModifyCluster</a>. </p> <p>Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateClusterParameterGroupMessage} [createClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCreateClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterParameterGroupResult}
     */
    pOSTCreateClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateClusterParameterGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateClusterSecurityGroup operation.
     * @callback module:api/DefaultApi~pOSTCreateClusterSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSecurityGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.</p> <p> For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateClusterSecurityGroupMessage} [createClusterSecurityGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCreateClusterSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSecurityGroupResult}
     */
    pOSTCreateClusterSecurityGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createClusterSecurityGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateClusterSecurityGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateClusterSecurityGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateClusterSecurityGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterSecurityGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTCreateClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a manual snapshot of the specified cluster. The cluster must be in the <code>available</code> state. </p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateClusterSnapshotMessage} [createClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTCreateClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSnapshotResult}
     */
    pOSTCreateClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateClusterSubnetGroup operation.
     * @callback module:api/DefaultApi~pOSTCreateClusterSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.</p> <p> For information about subnet groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html\">Amazon Redshift Cluster Subnet Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateClusterSubnetGroupMessage} [createClusterSubnetGroupMessage] 
     * @param {module:api/DefaultApi~pOSTCreateClusterSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterSubnetGroupResult}
     */
    pOSTCreateClusterSubnetGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createClusterSubnetGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateClusterSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateClusterSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateClusterSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=CreateClusterSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateCustomDomainAssociation operation.
     * @callback module:api/DefaultApi~pOSTCreateCustomDomainAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCustomDomainAssociationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to create a custom domain name for a cluster. Properties include the custom domain name, the cluster the custom domain is associated with, and the certificate Amazon Resource Name (ARN).
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateCustomDomainAssociationMessage} [createCustomDomainAssociationMessage] 
     * @param {module:api/DefaultApi~pOSTCreateCustomDomainAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCustomDomainAssociationResult}
     */
    pOSTCreateCustomDomainAssociation(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createCustomDomainAssociationMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateCustomDomainAssociation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateCustomDomainAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateCustomDomainAssociationResult;
      return this.apiClient.callApi(
        '/#Action=CreateCustomDomainAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateEndpointAccess operation.
     * @callback module:api/DefaultApi~pOSTCreateEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Redshift-managed VPC endpoint.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateEndpointAccessMessage} [createEndpointAccessMessage] 
     * @param {module:api/DefaultApi~pOSTCreateEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccess}
     */
    pOSTCreateEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createEndpointAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAccess;
      return this.apiClient.callApi(
        '/#Action=CreateEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateEventSubscription operation.
     * @callback module:api/DefaultApi~pOSTCreateEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type = cluster, source ID = my-cluster-1 and mycluster2, event categories = Availability, Backup, and severity = ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.</p> <p>If you specify both the source type and source IDs, such as source type = cluster and source identifier = my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your Amazon Web Services account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your Amazon Web Services account. You must specify a source type if you specify a source ID.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateEventSubscriptionMessage} [createEventSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTCreateEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEventSubscriptionResult}
     */
    pOSTCreateEventSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createEventSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=CreateEventSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateHsmClientCertificate operation.
     * @callback module:api/DefaultApi~pOSTCreateHsmClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHsmClientCertificateResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client's HSM in order to store and retrieve the keys used to encrypt the cluster databases.</p> <p>The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html#working-with-HSM\">Hardware Security Modules</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateHsmClientCertificateMessage} [createHsmClientCertificateMessage] 
     * @param {module:api/DefaultApi~pOSTCreateHsmClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHsmClientCertificateResult}
     */
    pOSTCreateHsmClientCertificate(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createHsmClientCertificateMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateHsmClientCertificate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateHsmClientCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateHsmClientCertificateResult;
      return this.apiClient.callApi(
        '/#Action=CreateHsmClientCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateHsmConfiguration operation.
     * @callback module:api/DefaultApi~pOSTCreateHsmConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateHsmConfigurationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.</p> <p>In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html\">Hardware Security Modules</a> in the Amazon Redshift Cluster Management Guide.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateHsmConfigurationMessage} [createHsmConfigurationMessage] 
     * @param {module:api/DefaultApi~pOSTCreateHsmConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateHsmConfigurationResult}
     */
    pOSTCreateHsmConfiguration(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createHsmConfigurationMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateHsmConfiguration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateHsmConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateHsmConfigurationResult;
      return this.apiClient.callApi(
        '/#Action=CreateHsmConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateScheduledAction operation.
     * @callback module:api/DefaultApi~pOSTCreateScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the <code>ResizeCluster</code> API operation. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateScheduledActionMessage} [createScheduledActionMessage] 
     * @param {module:api/DefaultApi~pOSTCreateScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledAction}
     */
    pOSTCreateScheduledAction(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createScheduledActionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateScheduledAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateScheduledAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ScheduledAction;
      return this.apiClient.callApi(
        '/#Action=CreateScheduledAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateSnapshotCopyGrant operation.
     * @callback module:api/DefaultApi~pOSTCreateSnapshotCopyGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSnapshotCopyGrantResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a snapshot copy grant that permits Amazon Redshift to use an encrypted symmetric key from Key Management Service (KMS) to encrypt copied snapshots in a destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateSnapshotCopyGrantMessage} [createSnapshotCopyGrantMessage] 
     * @param {module:api/DefaultApi~pOSTCreateSnapshotCopyGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSnapshotCopyGrantResult}
     */
    pOSTCreateSnapshotCopyGrant(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createSnapshotCopyGrantMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateSnapshotCopyGrant");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateSnapshotCopyGrant");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CreateSnapshotCopyGrantResult;
      return this.apiClient.callApi(
        '/#Action=CreateSnapshotCopyGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateSnapshotSchedule operation.
     * @callback module:api/DefaultApi~pOSTCreateSnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a snapshot schedule that can be associated to a cluster and which overrides the default system backup schedule. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateSnapshotScheduleMessage} [createSnapshotScheduleMessage] 
     * @param {module:api/DefaultApi~pOSTCreateSnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotSchedule}
     */
    pOSTCreateSnapshotSchedule(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createSnapshotScheduleMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateSnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateSnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = SnapshotSchedule;
      return this.apiClient.callApi(
        '/#Action=CreateSnapshotSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateTags operation.
     * @callback module:api/DefaultApi~pOSTCreateTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds tags to a cluster.</p> <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.</p> <p>If you specify a key that already exists for the resource, the value for that key will be updated with the new value.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateTagsMessage} [createTagsMessage] 
     * @param {module:api/DefaultApi~pOSTCreateTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTCreateTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createTagsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=CreateTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTCreateUsageLimit operation.
     * @callback module:api/DefaultApi~pOSTCreateUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit is identified by the returned usage limit identifier.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/CreateUsageLimitMessage} [createUsageLimitMessage] 
     * @param {module:api/DefaultApi~pOSTCreateUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageLimit}
     */
    pOSTCreateUsageLimit(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['createUsageLimitMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTCreateUsageLimit");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTCreateUsageLimit");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UsageLimit;
      return this.apiClient.callApi(
        '/#Action=CreateUsageLimit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeauthorizeDataShare operation.
     * @callback module:api/DefaultApi~pOSTDeauthorizeDataShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare producer account, removes authorization from the specified datashare. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeauthorizeDataShareMessage} [deauthorizeDataShareMessage] 
     * @param {module:api/DefaultApi~pOSTDeauthorizeDataShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    pOSTDeauthorizeDataShare(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deauthorizeDataShareMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeauthorizeDataShare");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeauthorizeDataShare");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=DeauthorizeDataShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteAuthenticationProfile operation.
     * @callback module:api/DefaultApi~pOSTDeleteAuthenticationProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAuthenticationProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an authentication profile.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteAuthenticationProfileMessage} [deleteAuthenticationProfileMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteAuthenticationProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAuthenticationProfileResult}
     */
    pOSTDeleteAuthenticationProfile(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteAuthenticationProfileMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteAuthenticationProfile");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteAuthenticationProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteAuthenticationProfileResult;
      return this.apiClient.callApi(
        '/#Action=DeleteAuthenticationProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteCluster operation.
     * @callback module:api/DefaultApi~pOSTDeleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use <a>DescribeClusters</a> to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you want to shut down the cluster and retain it for future use, set <i>SkipFinalClusterSnapshot</i> to <code>false</code> and specify a name for <i>FinalClusterSnapshotIdentifier</i>. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be \"final-snapshot\" while the snapshot is being taken, then it's \"deleting\" once Amazon Redshift begins deleting the cluster. </p> <p> For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteClusterMessage} [deleteClusterMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterResult}
     */
    pOSTDeleteCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteClusterResult;
      return this.apiClient.callApi(
        '/#Action=DeleteCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTDeleteClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a specified Amazon Redshift parameter group.</p> <note> <p>You cannot delete a parameter group if it is associated with a cluster.</p> </note>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteClusterParameterGroupMessage} [deleteClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteClusterSecurityGroup operation.
     * @callback module:api/DefaultApi~pOSTDeleteClusterSecurityGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an Amazon Redshift security group.</p> <note> <p>You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.</p> </note> <p> For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteClusterSecurityGroupMessage} [deleteClusterSecurityGroupMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteClusterSecurityGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteClusterSecurityGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteClusterSecurityGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteClusterSecurityGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteClusterSecurityGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterSecurityGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTDeleteClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified manual snapshot. The snapshot must be in the <code>available</code> state, with no other users authorized to access the snapshot. </p> <p>Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteClusterSnapshotMessage} [deleteClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteClusterSnapshotResult}
     */
    pOSTDeleteClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DeleteClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteClusterSubnetGroup operation.
     * @callback module:api/DefaultApi~pOSTDeleteClusterSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified cluster subnet group.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteClusterSubnetGroupMessage} [deleteClusterSubnetGroupMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteClusterSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteClusterSubnetGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteClusterSubnetGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteClusterSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteClusterSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteClusterSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteCustomDomainAssociation operation.
     * @callback module:api/DefaultApi~pOSTDeleteCustomDomainAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains information about deleting a custom domain association for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteCustomDomainAssociationMessage} [deleteCustomDomainAssociationMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteCustomDomainAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteCustomDomainAssociation(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteCustomDomainAssociationMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteCustomDomainAssociation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteCustomDomainAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteCustomDomainAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteEndpointAccess operation.
     * @callback module:api/DefaultApi~pOSTDeleteEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Redshift-managed VPC endpoint.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteEndpointAccessMessage} [deleteEndpointAccessMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccess}
     */
    pOSTDeleteEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteEndpointAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAccess;
      return this.apiClient.callApi(
        '/#Action=DeleteEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteEventSubscription operation.
     * @callback module:api/DefaultApi~pOSTDeleteEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon Redshift event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteEventSubscriptionMessage} [deleteEventSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteEventSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteEventSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteEventSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteHsmClientCertificate operation.
     * @callback module:api/DefaultApi~pOSTDeleteHsmClientCertificateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified HSM client certificate.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteHsmClientCertificateMessage} [deleteHsmClientCertificateMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteHsmClientCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteHsmClientCertificate(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteHsmClientCertificateMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteHsmClientCertificate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteHsmClientCertificate");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteHsmClientCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteHsmConfiguration operation.
     * @callback module:api/DefaultApi~pOSTDeleteHsmConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Amazon Redshift HSM configuration.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteHsmConfigurationMessage} [deleteHsmConfigurationMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteHsmConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteHsmConfiguration(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteHsmConfigurationMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteHsmConfiguration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteHsmConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteHsmConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeletePartner operation.
     * @callback module:api/DefaultApi~pOSTDeletePartnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerIntegrationOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a partner integration from a cluster. Data can still flow to the cluster until the integration is deleted at the partner's website.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/PartnerIntegrationInputMessage} [partnerIntegrationInputMessage] 
     * @param {module:api/DefaultApi~pOSTDeletePartnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerIntegrationOutputMessage}
     */
    pOSTDeletePartner(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['partnerIntegrationInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeletePartner");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeletePartner");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PartnerIntegrationOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DeletePartner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteScheduledAction operation.
     * @callback module:api/DefaultApi~pOSTDeleteScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a scheduled action. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteScheduledActionMessage} [deleteScheduledActionMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteScheduledAction(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteScheduledActionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteScheduledAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteScheduledAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteScheduledAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteSnapshotCopyGrant operation.
     * @callback module:api/DefaultApi~pOSTDeleteSnapshotCopyGrantCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified snapshot copy grant.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteSnapshotCopyGrantMessage} [deleteSnapshotCopyGrantMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteSnapshotCopyGrantCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteSnapshotCopyGrant(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteSnapshotCopyGrantMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteSnapshotCopyGrant");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteSnapshotCopyGrant");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteSnapshotCopyGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteSnapshotSchedule operation.
     * @callback module:api/DefaultApi~pOSTDeleteSnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a snapshot schedule.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteSnapshotScheduleMessage} [deleteSnapshotScheduleMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteSnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteSnapshotSchedule(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteSnapshotScheduleMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteSnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteSnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteSnapshotSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteTags operation.
     * @callback module:api/DefaultApi~pOSTDeleteTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteTagsMessage} [deleteTagsMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteTagsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDeleteUsageLimit operation.
     * @callback module:api/DefaultApi~pOSTDeleteUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a usage limit from a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DeleteUsageLimitMessage} [deleteUsageLimitMessage] 
     * @param {module:api/DefaultApi~pOSTDeleteUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTDeleteUsageLimit(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['deleteUsageLimitMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDeleteUsageLimit");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDeleteUsageLimit");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=DeleteUsageLimit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeAccountAttributes operation.
     * @callback module:api/DefaultApi~pOSTDescribeAccountAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountAttributeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of attributes attached to an account
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeAccountAttributesMessage} [describeAccountAttributesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeAccountAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountAttributeList}
     */
    pOSTDescribeAccountAttributes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAccountAttributesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeAccountAttributes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeAccountAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = AccountAttributeList;
      return this.apiClient.callApi(
        '/#Action=DescribeAccountAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeAuthenticationProfiles operation.
     * @callback module:api/DefaultApi~pOSTDescribeAuthenticationProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAuthenticationProfilesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an authentication profile.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeAuthenticationProfilesMessage} [describeAuthenticationProfilesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeAuthenticationProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAuthenticationProfilesResult}
     */
    pOSTDescribeAuthenticationProfiles(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeAuthenticationProfilesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeAuthenticationProfiles");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeAuthenticationProfiles");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeAuthenticationProfilesResult;
      return this.apiClient.callApi(
        '/#Action=DescribeAuthenticationProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterDbRevisions operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterDbRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterDbRevisionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of <code>ClusterDbRevision</code> objects.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterDbRevisionsMessage} [describeClusterDbRevisionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterDbRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterDbRevisionsMessage}
     */
    pOSTDescribeClusterDbRevisions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterDbRevisionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterDbRevisions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterDbRevisions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterDbRevisionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterDbRevisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterParameterGroups operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterParameterGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all parameter groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterParameterGroupsMessage} [describeClusterParameterGroupsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterParameterGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupsMessage}
     */
    pOSTDescribeClusterParameterGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterParameterGroupsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterParameterGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterParameterGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterParameterGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.</p> <p>You can specify <i>source</i> filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from <a>ModifyClusterParameterGroup</a>, you can specify <i>source</i> equal to <i>user</i>.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterParametersMessage} [describeClusterParametersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupDetails}
     */
    pOSTDescribeClusterParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterParametersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupDetails;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterSecurityGroups operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterSecurityGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterSecurityGroupMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.</p> <p> For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all security groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterSecurityGroupsMessage} [describeClusterSecurityGroupsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterSecurityGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterSecurityGroupMessage}
     */
    pOSTDescribeClusterSecurityGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterSecurityGroupsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterSecurityGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterSecurityGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterSecurityGroupMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterSecurityGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterSnapshots operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by your Amazon Web Services account. No information is returned for snapshots owned by inactive Amazon Web Services accounts.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.</p> <p>If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterSnapshotsMessage} [describeClusterSnapshotsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotMessage}
     */
    pOSTDescribeClusterSnapshots(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterSnapshotsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterSnapshots");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterSnapshots");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = SnapshotMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterSnapshots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterSubnetGroups operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterSubnetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterSubnetGroupMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subnet groups that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterSubnetGroupsMessage} [describeClusterSubnetGroupsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterSubnetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterSubnetGroupMessage}
     */
    pOSTDescribeClusterSubnetGroups(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterSubnetGroupsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterSubnetGroups");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterSubnetGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterSubnetGroupMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterSubnetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterTracks operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackListMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all the available maintenance tracks.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterTracksMessage} [describeClusterTracksMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackListMessage}
     */
    pOSTDescribeClusterTracks(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterTracksMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterTracks");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterTracks");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = TrackListMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterTracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusterVersions operation.
     * @callback module:api/DefaultApi~pOSTDescribeClusterVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterVersionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClusterVersionsMessage} [describeClusterVersionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClusterVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterVersionsMessage}
     */
    pOSTDescribeClusterVersions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClusterVersionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusterVersions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusterVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterVersionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusterVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeClusters operation.
     * @callback module:api/DefaultApi~pOSTDescribeClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClustersMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all clusters that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeClustersMessage} [describeClustersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClustersMessage}
     */
    pOSTDescribeClusters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeClustersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeClusters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClustersMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeClusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeCustomDomainAssociations operation.
     * @callback module:api/DefaultApi~pOSTDescribeCustomDomainAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomDomainAssociationsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains information for custom domain associations for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeCustomDomainAssociationsMessage} [describeCustomDomainAssociationsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeCustomDomainAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomDomainAssociationsMessage}
     */
    pOSTDescribeCustomDomainAssociations(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeCustomDomainAssociationsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeCustomDomainAssociations");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeCustomDomainAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = CustomDomainAssociationsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeCustomDomainAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDataShares operation.
     * @callback module:api/DefaultApi~pOSTDescribeDataSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSharesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shows the status of any inbound or outbound datashares available in the specified account.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDataSharesMessage} [describeDataSharesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDataSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSharesResult}
     */
    pOSTDescribeDataShares(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDataSharesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDataShares");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDataShares");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDataSharesResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDataShares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDataSharesForConsumer operation.
     * @callback module:api/DefaultApi~pOSTDescribeDataSharesForConsumerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSharesForConsumerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of datashares where the account identifier being called is a consumer account identifier.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDataSharesForConsumerMessage} [describeDataSharesForConsumerMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDataSharesForConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSharesForConsumerResult}
     */
    pOSTDescribeDataSharesForConsumer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDataSharesForConsumerMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDataSharesForConsumer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDataSharesForConsumer");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDataSharesForConsumerResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDataSharesForConsumer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDataSharesForProducer operation.
     * @callback module:api/DefaultApi~pOSTDescribeDataSharesForProducerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDataSharesForProducerResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of datashares when the account identifier being called is a producer account identifier.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDataSharesForProducerMessage} [describeDataSharesForProducerMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDataSharesForProducerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDataSharesForProducerResult}
     */
    pOSTDescribeDataSharesForProducer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDataSharesForProducerMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDataSharesForProducer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDataSharesForProducer");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDataSharesForProducerResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDataSharesForProducer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeDefaultClusterParameters operation.
     * @callback module:api/DefaultApi~pOSTDescribeDefaultClusterParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDefaultClusterParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of parameter settings for the specified parameter group family.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeDefaultClusterParametersMessage} [describeDefaultClusterParametersMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeDefaultClusterParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDefaultClusterParametersResult}
     */
    pOSTDescribeDefaultClusterParameters(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeDefaultClusterParametersMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeDefaultClusterParameters");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeDefaultClusterParameters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeDefaultClusterParametersResult;
      return this.apiClient.callApi(
        '/#Action=DescribeDefaultClusterParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEndpointAccess operation.
     * @callback module:api/DefaultApi~pOSTDescribeEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccessList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a Redshift-managed VPC endpoint.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEndpointAccessMessage} [describeEndpointAccessMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccessList}
     */
    pOSTDescribeEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEndpointAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAccessList;
      return this.apiClient.callApi(
        '/#Action=DescribeEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEndpointAuthorization operation.
     * @callback module:api/DefaultApi~pOSTDescribeEndpointAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAuthorizationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an endpoint authorization.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEndpointAuthorizationMessage} [describeEndpointAuthorizationMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEndpointAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAuthorizationList}
     */
    pOSTDescribeEndpointAuthorization(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEndpointAuthorizationMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEndpointAuthorization");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEndpointAuthorization");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAuthorizationList;
      return this.apiClient.callApi(
        '/#Action=DescribeEndpointAuthorization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEventCategories operation.
     * @callback module:api/DefaultApi~pOSTDescribeEventCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventCategoriesMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html\">Amazon Redshift Event Notifications</a>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeEventCategoriesMessage} [describeEventCategoriesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEventCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventCategoriesMessage}
     */
    pOSTDescribeEventCategories(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEventCategoriesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEventCategories");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEventCategories");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EventCategoriesMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEventSubscriptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeEventSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all subscriptions that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEventSubscriptionsMessage} [describeEventSubscriptionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEventSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsMessage}
     */
    pOSTDescribeEventSubscriptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEventSubscriptionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEventSubscriptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEventSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EventSubscriptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEventSubscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeEvents operation.
     * @callback module:api/DefaultApi~pOSTDescribeEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeEventsMessage} [describeEventsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventsMessage}
     */
    pOSTDescribeEvents(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeEventsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeEvents");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeEvents");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EventsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeHsmClientCertificates operation.
     * @callback module:api/DefaultApi~pOSTDescribeHsmClientCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HsmClientCertificateMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM client certificates that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeHsmClientCertificatesMessage} [describeHsmClientCertificatesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeHsmClientCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HsmClientCertificateMessage}
     */
    pOSTDescribeHsmClientCertificates(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeHsmClientCertificatesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeHsmClientCertificates");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeHsmClientCertificates");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = HsmClientCertificateMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeHsmClientCertificates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeHsmConfigurations operation.
     * @callback module:api/DefaultApi~pOSTDescribeHsmConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HsmConfigurationMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your Amazon Web Services account.</p> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all HSM connections that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeHsmConfigurationsMessage} [describeHsmConfigurationsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeHsmConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HsmConfigurationMessage}
     */
    pOSTDescribeHsmConfigurations(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeHsmConfigurationsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeHsmConfigurations");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeHsmConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = HsmConfigurationMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeHsmConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeLoggingStatus operation.
     * @callback module:api/DefaultApi~pOSTDescribeLoggingStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoggingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeLoggingStatusMessage} [describeLoggingStatusMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeLoggingStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoggingStatus}
     */
    pOSTDescribeLoggingStatus(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeLoggingStatusMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeLoggingStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeLoggingStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = LoggingStatus;
      return this.apiClient.callApi(
        '/#Action=DescribeLoggingStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeNodeConfigurationOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeNodeConfigurationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeConfigurationOptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeNodeConfigurationOptionsMessage} [describeNodeConfigurationOptionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeNodeConfigurationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeConfigurationOptionsMessage}
     */
    pOSTDescribeNodeConfigurationOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeNodeConfigurationOptionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeNodeConfigurationOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeNodeConfigurationOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = NodeConfigurationOptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeNodeConfigurationOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeOrderableClusterOptions operation.
     * @callback module:api/DefaultApi~pOSTDescribeOrderableClusterOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderableClusterOptionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific Amazon Web Services Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeOrderableClusterOptionsMessage} [describeOrderableClusterOptionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeOrderableClusterOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderableClusterOptionsMessage}
     */
    pOSTDescribeOrderableClusterOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeOrderableClusterOptionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeOrderableClusterOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeOrderableClusterOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = OrderableClusterOptionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeOrderableClusterOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribePartners operation.
     * @callback module:api/DefaultApi~pOSTDescribePartnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePartnersOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the partner integrations defined for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribePartnersInputMessage} [describePartnersInputMessage] 
     * @param {module:api/DefaultApi~pOSTDescribePartnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePartnersOutputMessage}
     */
    pOSTDescribePartners(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describePartnersInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribePartners");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribePartners");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribePartnersOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DescribePartners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeReservedNodeExchangeStatus operation.
     * @callback module:api/DefaultApi~pOSTDescribeReservedNodeExchangeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedNodeExchangeStatusOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns exchange status details and associated metadata for a reserved-node exchange. Statuses include such values as in progress and requested.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeReservedNodeExchangeStatusInputMessage} [describeReservedNodeExchangeStatusInputMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeReservedNodeExchangeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedNodeExchangeStatusOutputMessage}
     */
    pOSTDescribeReservedNodeExchangeStatus(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeReservedNodeExchangeStatusInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeReservedNodeExchangeStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeReservedNodeExchangeStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeReservedNodeExchangeStatusOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeReservedNodeExchangeStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeReservedNodeOfferings operation.
     * @callback module:api/DefaultApi~pOSTDescribeReservedNodeOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservedNodeOfferingsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to <a>PurchaseReservedNodeOffering</a> to reserve one or more nodes for your Amazon Redshift cluster. </p> <p> For more information about reserved node offerings, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeReservedNodeOfferingsMessage} [describeReservedNodeOfferingsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeReservedNodeOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservedNodeOfferingsMessage}
     */
    pOSTDescribeReservedNodeOfferings(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeReservedNodeOfferingsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeReservedNodeOfferings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeReservedNodeOfferings");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ReservedNodeOfferingsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeReservedNodeOfferings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeReservedNodes operation.
     * @callback module:api/DefaultApi~pOSTDescribeReservedNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReservedNodesMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the descriptions of the reserved nodes.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeReservedNodesMessage} [describeReservedNodesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeReservedNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReservedNodesMessage}
     */
    pOSTDescribeReservedNodes(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeReservedNodesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeReservedNodes");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeReservedNodes");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ReservedNodesMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeReservedNodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeResize operation.
     * @callback module:api/DefaultApi~pOSTDescribeResizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResizeProgressMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a <code>HTTP 404</code> error is returned. If a resize operation was initiated and completed, the status of the resize remains as <code>SUCCEEDED</code> until the next resize. </p> <p>A resize operation can be requested using <a>ModifyCluster</a> and specifying a different number or type of nodes for the cluster. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DescribeResizeMessage} [describeResizeMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResizeProgressMessage}
     */
    pOSTDescribeResize(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeResizeMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeResize");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeResize");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ResizeProgressMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeResize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeScheduledActions operation.
     * @callback module:api/DefaultApi~pOSTDescribeScheduledActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledActionsMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes properties of scheduled actions. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeScheduledActionsMessage} [describeScheduledActionsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeScheduledActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledActionsMessage}
     */
    pOSTDescribeScheduledActions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeScheduledActionsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeScheduledActions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeScheduledActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ScheduledActionsMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeScheduledActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeSnapshotCopyGrants operation.
     * @callback module:api/DefaultApi~pOSTDescribeSnapshotCopyGrantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotCopyGrantMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of snapshot copy grants owned by the Amazon Web Services account in the destination region.</p> <p> For more information about managing snapshot copy grants, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\">Amazon Redshift Database Encryption</a> in the <i>Amazon Redshift Cluster Management Guide</i>. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeSnapshotCopyGrantsMessage} [describeSnapshotCopyGrantsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeSnapshotCopyGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotCopyGrantMessage}
     */
    pOSTDescribeSnapshotCopyGrants(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeSnapshotCopyGrantsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeSnapshotCopyGrants");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeSnapshotCopyGrants");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = SnapshotCopyGrantMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeSnapshotCopyGrants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeSnapshotSchedules operation.
     * @callback module:api/DefaultApi~pOSTDescribeSnapshotSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSnapshotSchedulesOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of snapshot schedules. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeSnapshotSchedulesMessage} [describeSnapshotSchedulesMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeSnapshotSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSnapshotSchedulesOutputMessage}
     */
    pOSTDescribeSnapshotSchedules(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeSnapshotSchedulesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeSnapshotSchedules");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeSnapshotSchedules");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DescribeSnapshotSchedulesOutputMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeSnapshotSchedules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeStorage operation.
     * @callback module:api/DefaultApi~pOSTDescribeStorageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerStorageMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns account level backups storage size and provisional storage.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~pOSTDescribeStorageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerStorageMessage}
     */
    pOSTDescribeStorage(action, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeStorage");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeStorage");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = CustomerStorageMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeStorage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeTableRestoreStatus operation.
     * @callback module:api/DefaultApi~pOSTDescribeTableRestoreStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableRestoreStatusMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the status of one or more table restore requests made using the <a>RestoreTableFromClusterSnapshot</a> API action. If you don't specify a value for the <code>TableRestoreRequestId</code> parameter, then <code>DescribeTableRestoreStatus</code> returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise <code>DescribeTableRestoreStatus</code> returns the status of the table specified by <code>TableRestoreRequestId</code>.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeTableRestoreStatusMessage} [describeTableRestoreStatusMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeTableRestoreStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableRestoreStatusMessage}
     */
    pOSTDescribeTableRestoreStatus(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeTableRestoreStatusMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeTableRestoreStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeTableRestoreStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = TableRestoreStatusMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeTableRestoreStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeTags operation.
     * @callback module:api/DefaultApi~pOSTDescribeTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaggedResourceListMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.</p> <p>The following are limitations for <code>DescribeTags</code>: </p> <ul> <li> <p>You cannot specify an ARN and a resource-type value together in the same request.</p> </li> <li> <p>You cannot use the <code>MaxRecords</code> and <code>Marker</code> parameters together with the ARN parameter.</p> </li> <li> <p>The <code>MaxRecords</code> parameter can be a range from 10 to 50 results to return in a request.</p> </li> </ul> <p>If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have <code>owner</code> and <code>environment</code> for tag keys, and <code>admin</code> and <code>test</code> for tag values, all resources that have any combination of those values are returned.</p> <p>If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeTagsMessage} [describeTagsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaggedResourceListMessage}
     */
    pOSTDescribeTags(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeTagsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeTags");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = TaggedResourceListMessage;
      return this.apiClient.callApi(
        '/#Action=DescribeTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDescribeUsageLimits operation.
     * @callback module:api/DefaultApi~pOSTDescribeUsageLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageLimitList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:</p> <ul> <li> <p>If usage limit identifier, cluster identifier, and feature type are not provided, then all usage limit objects for the current account in the current region are returned.</p> </li> <li> <p>If usage limit identifier is provided, then the corresponding usage limit object is returned.</p> </li> <li> <p>If cluster identifier is provided, then all usage limit objects for the specified cluster are returned.</p> </li> <li> <p>If cluster identifier and feature type are provided, then all usage limit objects for the combination of cluster and feature are returned.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/DescribeUsageLimitsMessage} [describeUsageLimitsMessage] 
     * @param {module:api/DefaultApi~pOSTDescribeUsageLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageLimitList}
     */
    pOSTDescribeUsageLimits(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['describeUsageLimitsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDescribeUsageLimits");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDescribeUsageLimits");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UsageLimitList;
      return this.apiClient.callApi(
        '/#Action=DescribeUsageLimits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDisableLogging operation.
     * @callback module:api/DefaultApi~pOSTDisableLoggingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoggingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DisableLoggingMessage} [disableLoggingMessage] 
     * @param {module:api/DefaultApi~pOSTDisableLoggingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoggingStatus}
     */
    pOSTDisableLogging(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['disableLoggingMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDisableLogging");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDisableLogging");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = LoggingStatus;
      return this.apiClient.callApi(
        '/#Action=DisableLogging', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDisableSnapshotCopy operation.
     * @callback module:api/DefaultApi~pOSTDisableSnapshotCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableSnapshotCopyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disables the automatic copying of snapshots from one region to another region for a specified cluster.</p> <p>If your cluster and its snapshots are encrypted using an encrypted symmetric key from Key Management Service, use <a>DeleteSnapshotCopyGrant</a> to delete the grant that grants Amazon Redshift permission to the key in the destination region. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DisableSnapshotCopyMessage} [disableSnapshotCopyMessage] 
     * @param {module:api/DefaultApi~pOSTDisableSnapshotCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableSnapshotCopyResult}
     */
    pOSTDisableSnapshotCopy(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['disableSnapshotCopyMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDisableSnapshotCopy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDisableSnapshotCopy");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DisableSnapshotCopyResult;
      return this.apiClient.callApi(
        '/#Action=DisableSnapshotCopy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTDisassociateDataShareConsumer operation.
     * @callback module:api/DefaultApi~pOSTDisassociateDataShareConsumerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare consumer account, remove association for the specified datashare. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/DisassociateDataShareConsumerMessage} [disassociateDataShareConsumerMessage] 
     * @param {module:api/DefaultApi~pOSTDisassociateDataShareConsumerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    pOSTDisassociateDataShareConsumer(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['disassociateDataShareConsumerMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTDisassociateDataShareConsumer");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTDisassociateDataShareConsumer");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=DisassociateDataShareConsumer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTEnableLogging operation.
     * @callback module:api/DefaultApi~pOSTEnableLoggingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoggingStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/EnableLoggingMessage} [enableLoggingMessage] 
     * @param {module:api/DefaultApi~pOSTEnableLoggingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoggingStatus}
     */
    pOSTEnableLogging(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['enableLoggingMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTEnableLogging");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTEnableLogging");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = LoggingStatus;
      return this.apiClient.callApi(
        '/#Action=EnableLogging', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTEnableSnapshotCopy operation.
     * @callback module:api/DefaultApi~pOSTEnableSnapshotCopyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableSnapshotCopyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the automatic copy of snapshots from one region to another region for a specified cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/EnableSnapshotCopyMessage} [enableSnapshotCopyMessage] 
     * @param {module:api/DefaultApi~pOSTEnableSnapshotCopyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableSnapshotCopyResult}
     */
    pOSTEnableSnapshotCopy(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['enableSnapshotCopyMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTEnableSnapshotCopy");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTEnableSnapshotCopy");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EnableSnapshotCopyResult;
      return this.apiClient.callApi(
        '/#Action=EnableSnapshotCopy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetClusterCredentials operation.
     * @callback module:api/DefaultApi~pOSTGetClusterCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with <code>IAM:</code> if <code>AutoCreate</code> is <code>False</code> or <code>IAMA:</code> if <code>AutoCreate</code> is <code>True</code>. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html\">Using IAM Authentication to Generate Database User Credentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>The Identity and Access Management (IAM) user or role that runs GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources\">Resource Policies for GetClusterCredentials</a> in the Amazon Redshift Cluster Management Guide.</p> <p>If the <code>DbGroups</code> parameter is specified, the IAM policy must allow the <code>redshift:JoinGroup</code> action with access to the listed <code>dbgroups</code>. </p> <p>In addition, if the <code>AutoCreate</code> parameter is set to <code>True</code>, then the policy must include the <code>redshift:CreateClusterUser</code> permission.</p> <p>If the <code>DbName</code> parameter is specified, the IAM policy must allow access to the resource <code>dbname</code> for the specified database name. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/GetClusterCredentialsMessage} [getClusterCredentialsMessage] 
     * @param {module:api/DefaultApi~pOSTGetClusterCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterCredentials}
     */
    pOSTGetClusterCredentials(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getClusterCredentialsMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetClusterCredentials");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetClusterCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterCredentials;
      return this.apiClient.callApi(
        '/#Action=GetClusterCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetClusterCredentialsWithIAM operation.
     * @callback module:api/DefaultApi~pOSTGetClusterCredentialsWithIAMCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterExtendedCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a database user name and temporary password with temporary authorization to log in to an Amazon Redshift database. The database user is mapped 1:1 to the source Identity and Access Management (IAM) identity. For more information about IAM identities, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html\">IAM Identities (users, user groups, and roles)</a> in the Amazon Web Services Identity and Access Management User Guide.</p> <p>The Identity and Access Management (IAM) identity that runs this operation must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html\">Using identity-based policies (IAM policies)</a> in the Amazon Redshift Cluster Management Guide. </p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/GetClusterCredentialsWithIAMMessage} [getClusterCredentialsWithIAMMessage] 
     * @param {module:api/DefaultApi~pOSTGetClusterCredentialsWithIAMCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterExtendedCredentials}
     */
    pOSTGetClusterCredentialsWithIAM(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getClusterCredentialsWithIAMMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetClusterCredentialsWithIAM");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetClusterCredentialsWithIAM");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterExtendedCredentials;
      return this.apiClient.callApi(
        '/#Action=GetClusterCredentialsWithIAM', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetReservedNodeExchangeConfigurationOptions operation.
     * @callback module:api/DefaultApi~pOSTGetReservedNodeExchangeConfigurationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReservedNodeExchangeConfigurationOptionsOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node offering. Details include the node type, the price, the node count, and the offering type.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/GetReservedNodeExchangeConfigurationOptionsInputMessage} [getReservedNodeExchangeConfigurationOptionsInputMessage] 
     * @param {module:api/DefaultApi~pOSTGetReservedNodeExchangeConfigurationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReservedNodeExchangeConfigurationOptionsOutputMessage}
     */
    pOSTGetReservedNodeExchangeConfigurationOptions(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getReservedNodeExchangeConfigurationOptionsInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetReservedNodeExchangeConfigurationOptions");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetReservedNodeExchangeConfigurationOptions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GetReservedNodeExchangeConfigurationOptionsOutputMessage;
      return this.apiClient.callApi(
        '/#Action=GetReservedNodeExchangeConfigurationOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTGetReservedNodeExchangeOfferings operation.
     * @callback module:api/DefaultApi~pOSTGetReservedNodeExchangeOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReservedNodeExchangeOfferingsOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxRecords] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:model/GetReservedNodeExchangeOfferingsInputMessage} [getReservedNodeExchangeOfferingsInputMessage] 
     * @param {module:api/DefaultApi~pOSTGetReservedNodeExchangeOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReservedNodeExchangeOfferingsOutputMessage}
     */
    pOSTGetReservedNodeExchangeOfferings(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['getReservedNodeExchangeOfferingsInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTGetReservedNodeExchangeOfferings");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTGetReservedNodeExchangeOfferings");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxRecords': opts['maxRecords'],
        'Marker': opts['marker'],
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = GetReservedNodeExchangeOfferingsOutputMessage;
      return this.apiClient.callApi(
        '/#Action=GetReservedNodeExchangeOfferings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyAquaConfiguration operation.
     * @callback module:api/DefaultApi~pOSTModifyAquaConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyAquaOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation is retired. Calling this operation does not change AQUA configuration. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator). 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyAquaInputMessage} [modifyAquaInputMessage] 
     * @param {module:api/DefaultApi~pOSTModifyAquaConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyAquaOutputMessage}
     */
    pOSTModifyAquaConfiguration(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyAquaInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyAquaConfiguration");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyAquaConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyAquaOutputMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyAquaConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyAuthenticationProfile operation.
     * @callback module:api/DefaultApi~pOSTModifyAuthenticationProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyAuthenticationProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an authentication profile.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyAuthenticationProfileMessage} [modifyAuthenticationProfileMessage] 
     * @param {module:api/DefaultApi~pOSTModifyAuthenticationProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyAuthenticationProfileResult}
     */
    pOSTModifyAuthenticationProfile(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyAuthenticationProfileMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyAuthenticationProfile");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyAuthenticationProfile");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyAuthenticationProfileResult;
      return this.apiClient.callApi(
        '/#Action=ModifyAuthenticationProfile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyCluster operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the settings for a cluster.</p> <p>You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.</p> <p>You can add another security or parameter group, or change the admin user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterMessage} [modifyClusterMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterResult}
     */
    pOSTModifyCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterResult;
      return this.apiClient.callApi(
        '/#Action=ModifyCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterDbRevision operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterDbRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterDbRevisionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterDbRevisionMessage} [modifyClusterDbRevisionMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterDbRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterDbRevisionResult}
     */
    pOSTModifyClusterDbRevision(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterDbRevisionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterDbRevision");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterDbRevision");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterDbRevisionResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterDbRevision', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterIamRoles operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterIamRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterIamRolesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.</p> <p>The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html\">Quotas and limits</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterIamRolesMessage} [modifyClusterIamRolesMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterIamRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterIamRolesResult}
     */
    pOSTModifyClusterIamRoles(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterIamRolesMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterIamRoles");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterIamRoles");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterIamRolesResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterIamRoles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterMaintenance operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterMaintenanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterMaintenanceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the maintenance settings of a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterMaintenanceMessage} [modifyClusterMaintenanceMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterMaintenanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterMaintenanceResult}
     */
    pOSTModifyClusterMaintenance(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterMaintenanceMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterMaintenance");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterMaintenance");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterMaintenanceResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterMaintenance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the parameters of a parameter group. For the parameters parameter, it can't contain ASCII characters.</p> <p> For more information about parameters and parameter groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\">Amazon Redshift Parameter Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterParameterGroupMessage} [modifyClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupNameMessage}
     */
    pOSTModifyClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Modifies the settings for a snapshot.</p> <p>This exanmple modifies the manual retention period setting for a cluster snapshot.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterSnapshotMessage} [modifyClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterSnapshotResult}
     */
    pOSTModifyClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterSnapshotSchedule operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterSnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a snapshot schedule for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterSnapshotScheduleMessage} [modifyClusterSnapshotScheduleMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterSnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pOSTModifyClusterSnapshotSchedule(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterSnapshotScheduleMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterSnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterSnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterSnapshotSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyClusterSubnetGroup operation.
     * @callback module:api/DefaultApi~pOSTModifyClusterSubnetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyClusterSubnetGroupResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyClusterSubnetGroupMessage} [modifyClusterSubnetGroupMessage] 
     * @param {module:api/DefaultApi~pOSTModifyClusterSubnetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyClusterSubnetGroupResult}
     */
    pOSTModifyClusterSubnetGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyClusterSubnetGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyClusterSubnetGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyClusterSubnetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyClusterSubnetGroupResult;
      return this.apiClient.callApi(
        '/#Action=ModifyClusterSubnetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyCustomDomainAssociation operation.
     * @callback module:api/DefaultApi~pOSTModifyCustomDomainAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyCustomDomainAssociationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contains information for changing a custom domain association.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyCustomDomainAssociationMessage} [modifyCustomDomainAssociationMessage] 
     * @param {module:api/DefaultApi~pOSTModifyCustomDomainAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyCustomDomainAssociationResult}
     */
    pOSTModifyCustomDomainAssociation(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyCustomDomainAssociationMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyCustomDomainAssociation");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyCustomDomainAssociation");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyCustomDomainAssociationResult;
      return this.apiClient.callApi(
        '/#Action=ModifyCustomDomainAssociation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyEndpointAccess operation.
     * @callback module:api/DefaultApi~pOSTModifyEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a Redshift-managed VPC endpoint.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyEndpointAccessMessage} [modifyEndpointAccessMessage] 
     * @param {module:api/DefaultApi~pOSTModifyEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAccess}
     */
    pOSTModifyEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyEndpointAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAccess;
      return this.apiClient.callApi(
        '/#Action=ModifyEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyEventSubscription operation.
     * @callback module:api/DefaultApi~pOSTModifyEventSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifyEventSubscriptionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an existing Amazon Redshift event notification subscription.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyEventSubscriptionMessage} [modifyEventSubscriptionMessage] 
     * @param {module:api/DefaultApi~pOSTModifyEventSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifyEventSubscriptionResult}
     */
    pOSTModifyEventSubscription(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyEventSubscriptionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyEventSubscription");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyEventSubscription");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifyEventSubscriptionResult;
      return this.apiClient.callApi(
        '/#Action=ModifyEventSubscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyScheduledAction operation.
     * @callback module:api/DefaultApi~pOSTModifyScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduledAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a scheduled action. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyScheduledActionMessage} [modifyScheduledActionMessage] 
     * @param {module:api/DefaultApi~pOSTModifyScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduledAction}
     */
    pOSTModifyScheduledAction(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyScheduledActionMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyScheduledAction");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyScheduledAction");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ScheduledAction;
      return this.apiClient.callApi(
        '/#Action=ModifyScheduledAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifySnapshotCopyRetentionPeriod operation.
     * @callback module:api/DefaultApi~pOSTModifySnapshotCopyRetentionPeriodCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModifySnapshotCopyRetentionPeriodResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the number of days to retain snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifySnapshotCopyRetentionPeriodMessage} [modifySnapshotCopyRetentionPeriodMessage] 
     * @param {module:api/DefaultApi~pOSTModifySnapshotCopyRetentionPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModifySnapshotCopyRetentionPeriodResult}
     */
    pOSTModifySnapshotCopyRetentionPeriod(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifySnapshotCopyRetentionPeriodMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifySnapshotCopyRetentionPeriod");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifySnapshotCopyRetentionPeriod");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ModifySnapshotCopyRetentionPeriodResult;
      return this.apiClient.callApi(
        '/#Action=ModifySnapshotCopyRetentionPeriod', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifySnapshotSchedule operation.
     * @callback module:api/DefaultApi~pOSTModifySnapshotScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SnapshotSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifySnapshotScheduleMessage} [modifySnapshotScheduleMessage] 
     * @param {module:api/DefaultApi~pOSTModifySnapshotScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SnapshotSchedule}
     */
    pOSTModifySnapshotSchedule(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifySnapshotScheduleMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifySnapshotSchedule");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifySnapshotSchedule");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = SnapshotSchedule;
      return this.apiClient.callApi(
        '/#Action=ModifySnapshotSchedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTModifyUsageLimit operation.
     * @callback module:api/DefaultApi~pOSTModifyUsageLimitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageLimit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a usage limit in a cluster. You can't modify the feature type or period of a usage limit.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ModifyUsageLimitMessage} [modifyUsageLimitMessage] 
     * @param {module:api/DefaultApi~pOSTModifyUsageLimitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageLimit}
     */
    pOSTModifyUsageLimit(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['modifyUsageLimitMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTModifyUsageLimit");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTModifyUsageLimit");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = UsageLimit;
      return this.apiClient.callApi(
        '/#Action=ModifyUsageLimit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTPauseCluster operation.
     * @callback module:api/DefaultApi~pOSTPauseClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PauseClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pauses a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/PauseClusterMessage} [pauseClusterMessage] 
     * @param {module:api/DefaultApi~pOSTPauseClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PauseClusterResult}
     */
    pOSTPauseCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['pauseClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTPauseCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTPauseCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PauseClusterResult;
      return this.apiClient.callApi(
        '/#Action=PauseCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTPurchaseReservedNodeOffering operation.
     * @callback module:api/DefaultApi~pOSTPurchaseReservedNodeOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseReservedNodeOfferingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the <a>DescribeReservedNodeOfferings</a> API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. </p> <p> For more information about reserved node offerings, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\">Purchasing Reserved Nodes</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/PurchaseReservedNodeOfferingMessage} [purchaseReservedNodeOfferingMessage] 
     * @param {module:api/DefaultApi~pOSTPurchaseReservedNodeOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseReservedNodeOfferingResult}
     */
    pOSTPurchaseReservedNodeOffering(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['purchaseReservedNodeOfferingMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTPurchaseReservedNodeOffering");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTPurchaseReservedNodeOffering");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PurchaseReservedNodeOfferingResult;
      return this.apiClient.callApi(
        '/#Action=PurchaseReservedNodeOffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRebootCluster operation.
     * @callback module:api/DefaultApi~pOSTRebootClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RebootClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to <code>rebooting</code>. A cluster event is created when the reboot is completed. Any pending cluster modifications (see <a>ModifyCluster</a>) are applied at this reboot. For more information about managing clusters, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\">Amazon Redshift Clusters</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RebootClusterMessage} [rebootClusterMessage] 
     * @param {module:api/DefaultApi~pOSTRebootClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RebootClusterResult}
     */
    pOSTRebootCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['rebootClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRebootCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRebootCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RebootClusterResult;
      return this.apiClient.callApi(
        '/#Action=RebootCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRejectDataShare operation.
     * @callback module:api/DefaultApi~pOSTRejectDataShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * From a datashare consumer account, rejects the specified datashare.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RejectDataShareMessage} [rejectDataShareMessage] 
     * @param {module:api/DefaultApi~pOSTRejectDataShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataShare}
     */
    pOSTRejectDataShare(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['rejectDataShareMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRejectDataShare");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRejectDataShare");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = DataShare;
      return this.apiClient.callApi(
        '/#Action=RejectDataShare', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTResetClusterParameterGroup operation.
     * @callback module:api/DefaultApi~pOSTResetClusterParameterGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClusterParameterGroupNameMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to \"engine-default\". To reset the entire parameter group specify the <i>ResetAllParameters</i> parameter. For parameter changes to take effect you must reboot any associated clusters. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ResetClusterParameterGroupMessage} [resetClusterParameterGroupMessage] 
     * @param {module:api/DefaultApi~pOSTResetClusterParameterGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClusterParameterGroupNameMessage}
     */
    pOSTResetClusterParameterGroup(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['resetClusterParameterGroupMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTResetClusterParameterGroup");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTResetClusterParameterGroup");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ClusterParameterGroupNameMessage;
      return this.apiClient.callApi(
        '/#Action=ResetClusterParameterGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTResizeCluster operation.
     * @callback module:api/DefaultApi~pOSTResizeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResizeClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Changes the size of the cluster. You can change the cluster's type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. </p> <p>Elastic resize operations have the following restrictions:</p> <ul> <li> <p>You can only resize clusters of the following types:</p> <ul> <li> <p>dc1.large (if your cluster is in a VPC)</p> </li> <li> <p>dc1.8xlarge (if your cluster is in a VPC)</p> </li> <li> <p>dc2.large</p> </li> <li> <p>dc2.8xlarge</p> </li> <li> <p>ds2.xlarge</p> </li> <li> <p>ds2.8xlarge</p> </li> <li> <p>ra3.xlplus</p> </li> <li> <p>ra3.4xlarge</p> </li> <li> <p>ra3.16xlarge</p> </li> </ul> </li> <li> <p>The type of nodes that you add must match the node type for the cluster.</p> </li> </ul>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ResizeClusterMessage} [resizeClusterMessage] 
     * @param {module:api/DefaultApi~pOSTResizeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResizeClusterResult}
     */
    pOSTResizeCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['resizeClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTResizeCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTResizeCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ResizeClusterResult;
      return this.apiClient.callApi(
        '/#Action=ResizeCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRestoreFromClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTRestoreFromClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreFromClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the <a>ModifyCluster</a> API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.</p> <p>If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RestoreFromClusterSnapshotMessage} [restoreFromClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTRestoreFromClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreFromClusterSnapshotResult}
     */
    pOSTRestoreFromClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['restoreFromClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRestoreFromClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRestoreFromClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RestoreFromClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=RestoreFromClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRestoreTableFromClusterSnapshot operation.
     * @callback module:api/DefaultApi~pOSTRestoreTableFromClusterSnapshotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreTableFromClusterSnapshotResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.</p> <p>You cannot use <code>RestoreTableFromClusterSnapshot</code> to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call <code>RestoreTableFromClusterSnapshot</code>. When you have renamed your original table, then you can pass the original name of the table as the <code>NewTableName</code> parameter value in the call to <code>RestoreTableFromClusterSnapshot</code>. This way, you can replace the original table with the table created from the snapshot.</p> <p>You can't use this operation to restore tables with <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved\">interleaved sort keys</a>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RestoreTableFromClusterSnapshotMessage} [restoreTableFromClusterSnapshotMessage] 
     * @param {module:api/DefaultApi~pOSTRestoreTableFromClusterSnapshotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreTableFromClusterSnapshotResult}
     */
    pOSTRestoreTableFromClusterSnapshot(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['restoreTableFromClusterSnapshotMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRestoreTableFromClusterSnapshot");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRestoreTableFromClusterSnapshot");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RestoreTableFromClusterSnapshotResult;
      return this.apiClient.callApi(
        '/#Action=RestoreTableFromClusterSnapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTResumeCluster operation.
     * @callback module:api/DefaultApi~pOSTResumeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResumeClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes a paused cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/ResumeClusterMessage} [resumeClusterMessage] 
     * @param {module:api/DefaultApi~pOSTResumeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResumeClusterResult}
     */
    pOSTResumeCluster(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['resumeClusterMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTResumeCluster");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTResumeCluster");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = ResumeClusterResult;
      return this.apiClient.callApi(
        '/#Action=ResumeCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRevokeClusterSecurityGroupIngress operation.
     * @callback module:api/DefaultApi~pOSTRevokeClusterSecurityGroupIngressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeClusterSecurityGroupIngressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see <a>AuthorizeClusterSecurityGroupIngress</a>. For information about managing security groups, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\">Amazon Redshift Cluster Security Groups</a> in the <i>Amazon Redshift Cluster Management Guide</i>. 
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RevokeClusterSecurityGroupIngressMessage} [revokeClusterSecurityGroupIngressMessage] 
     * @param {module:api/DefaultApi~pOSTRevokeClusterSecurityGroupIngressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeClusterSecurityGroupIngressResult}
     */
    pOSTRevokeClusterSecurityGroupIngress(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['revokeClusterSecurityGroupIngressMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRevokeClusterSecurityGroupIngress");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRevokeClusterSecurityGroupIngress");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RevokeClusterSecurityGroupIngressResult;
      return this.apiClient.callApi(
        '/#Action=RevokeClusterSecurityGroupIngress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRevokeEndpointAccess operation.
     * @callback module:api/DefaultApi~pOSTRevokeEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EndpointAuthorization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes access to a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RevokeEndpointAccessMessage} [revokeEndpointAccessMessage] 
     * @param {module:api/DefaultApi~pOSTRevokeEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EndpointAuthorization}
     */
    pOSTRevokeEndpointAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['revokeEndpointAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRevokeEndpointAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRevokeEndpointAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = EndpointAuthorization;
      return this.apiClient.callApi(
        '/#Action=RevokeEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRevokeSnapshotAccess operation.
     * @callback module:api/DefaultApi~pOSTRevokeSnapshotAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeSnapshotAccessResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Removes the ability of the specified Amazon Web Services account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.</p> <p> For more information about working with snapshots, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\">Amazon Redshift Snapshots</a> in the <i>Amazon Redshift Cluster Management Guide</i>.</p>
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RevokeSnapshotAccessMessage} [revokeSnapshotAccessMessage] 
     * @param {module:api/DefaultApi~pOSTRevokeSnapshotAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeSnapshotAccessResult}
     */
    pOSTRevokeSnapshotAccess(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['revokeSnapshotAccessMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRevokeSnapshotAccess");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRevokeSnapshotAccess");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RevokeSnapshotAccessResult;
      return this.apiClient.callApi(
        '/#Action=RevokeSnapshotAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTRotateEncryptionKey operation.
     * @callback module:api/DefaultApi~pOSTRotateEncryptionKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RotateEncryptionKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotates the encryption keys for a cluster.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/RotateEncryptionKeyMessage} [rotateEncryptionKeyMessage] 
     * @param {module:api/DefaultApi~pOSTRotateEncryptionKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RotateEncryptionKeyResult}
     */
    pOSTRotateEncryptionKey(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['rotateEncryptionKeyMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTRotateEncryptionKey");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTRotateEncryptionKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = RotateEncryptionKeyResult;
      return this.apiClient.callApi(
        '/#Action=RotateEncryptionKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pOSTUpdatePartnerStatus operation.
     * @callback module:api/DefaultApi~pOSTUpdatePartnerStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PartnerIntegrationOutputMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of a partner integration.
     * @param {module:model/String} action 
     * @param {module:model/String} version 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/UpdatePartnerStatusInputMessage} [updatePartnerStatusInputMessage] 
     * @param {module:api/DefaultApi~pOSTUpdatePartnerStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PartnerIntegrationOutputMessage}
     */
    pOSTUpdatePartnerStatus(action, version, opts, callback) {
      opts = opts || {};
      let postBody = opts['updatePartnerStatusInputMessage'];
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling pOSTUpdatePartnerStatus");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling pOSTUpdatePartnerStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'Action': action,
        'Version': version
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['text/xml'];
      let accepts = ['text/xml'];
      let returnType = PartnerIntegrationOutputMessage;
      return this.apiClient.callApi(
        '/#Action=UpdatePartnerStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
