/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRedshift);
  }
}(this, function(expect, AmazonRedshift) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRedshift.Parameter();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Parameter', function() {
    it('should create an instance of Parameter', function() {
      // uncomment below and update the code to test Parameter
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be.a(AmazonRedshift.Parameter);
    });

    it('should have the property parameterName (base name: "ParameterName")', function() {
      // uncomment below and update the code to test the property parameterName
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property parameterValue (base name: "ParameterValue")', function() {
      // uncomment below and update the code to test the property parameterValue
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "Source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property dataType (base name: "DataType")', function() {
      // uncomment below and update the code to test the property dataType
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property allowedValues (base name: "AllowedValues")', function() {
      // uncomment below and update the code to test the property allowedValues
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property applyType (base name: "ApplyType")', function() {
      // uncomment below and update the code to test the property applyType
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property isModifiable (base name: "IsModifiable")', function() {
      // uncomment below and update the code to test the property isModifiable
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

    it('should have the property minimumEngineVersion (base name: "MinimumEngineVersion")', function() {
      // uncomment below and update the code to test the property minimumEngineVersion
      //var instance = new AmazonRedshift.Parameter();
      //expect(instance).to.be();
    });

  });

}));
