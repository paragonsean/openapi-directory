/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRedshift);
  }
}(this, function(expect, AmazonRedshift) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRedshift.ReservedNodeListInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReservedNodeListInner', function() {
    it('should create an instance of ReservedNodeListInner', function() {
      // uncomment below and update the code to test ReservedNodeListInner
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be.a(AmazonRedshift.ReservedNodeListInner);
    });

    it('should have the property reservedNodeId (base name: "ReservedNodeId")', function() {
      // uncomment below and update the code to test the property reservedNodeId
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property reservedNodeOfferingId (base name: "ReservedNodeOfferingId")', function() {
      // uncomment below and update the code to test the property reservedNodeOfferingId
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property nodeType (base name: "NodeType")', function() {
      // uncomment below and update the code to test the property nodeType
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "StartTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property fixedPrice (base name: "FixedPrice")', function() {
      // uncomment below and update the code to test the property fixedPrice
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property usagePrice (base name: "UsagePrice")', function() {
      // uncomment below and update the code to test the property usagePrice
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property currencyCode (base name: "CurrencyCode")', function() {
      // uncomment below and update the code to test the property currencyCode
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property nodeCount (base name: "NodeCount")', function() {
      // uncomment below and update the code to test the property nodeCount
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property offeringType (base name: "OfferingType")', function() {
      // uncomment below and update the code to test the property offeringType
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property recurringCharges (base name: "RecurringCharges")', function() {
      // uncomment below and update the code to test the property recurringCharges
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

    it('should have the property reservedNodeOfferingType (base name: "ReservedNodeOfferingType")', function() {
      // uncomment below and update the code to test the property reservedNodeOfferingType
      //var instance = new AmazonRedshift.ReservedNodeListInner();
      //expect(instance).to.be();
    });

  });

}));
