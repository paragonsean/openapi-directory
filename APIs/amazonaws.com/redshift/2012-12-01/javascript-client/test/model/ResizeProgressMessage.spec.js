/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRedshift);
  }
}(this, function(expect, AmazonRedshift) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRedshift.ResizeProgressMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ResizeProgressMessage', function() {
    it('should create an instance of ResizeProgressMessage', function() {
      // uncomment below and update the code to test ResizeProgressMessage
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be.a(AmazonRedshift.ResizeProgressMessage);
    });

    it('should have the property targetNodeType (base name: "TargetNodeType")', function() {
      // uncomment below and update the code to test the property targetNodeType
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property targetNumberOfNodes (base name: "TargetNumberOfNodes")', function() {
      // uncomment below and update the code to test the property targetNumberOfNodes
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property targetClusterType (base name: "TargetClusterType")', function() {
      // uncomment below and update the code to test the property targetClusterType
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property importTablesCompleted (base name: "ImportTablesCompleted")', function() {
      // uncomment below and update the code to test the property importTablesCompleted
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property importTablesInProgress (base name: "ImportTablesInProgress")', function() {
      // uncomment below and update the code to test the property importTablesInProgress
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property importTablesNotStarted (base name: "ImportTablesNotStarted")', function() {
      // uncomment below and update the code to test the property importTablesNotStarted
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property avgResizeRateInMegaBytesPerSecond (base name: "AvgResizeRateInMegaBytesPerSecond")', function() {
      // uncomment below and update the code to test the property avgResizeRateInMegaBytesPerSecond
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property totalResizeDataInMegaBytes (base name: "TotalResizeDataInMegaBytes")', function() {
      // uncomment below and update the code to test the property totalResizeDataInMegaBytes
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property progressInMegaBytes (base name: "ProgressInMegaBytes")', function() {
      // uncomment below and update the code to test the property progressInMegaBytes
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property elapsedTimeInSeconds (base name: "ElapsedTimeInSeconds")', function() {
      // uncomment below and update the code to test the property elapsedTimeInSeconds
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property estimatedTimeToCompletionInSeconds (base name: "EstimatedTimeToCompletionInSeconds")', function() {
      // uncomment below and update the code to test the property estimatedTimeToCompletionInSeconds
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property resizeType (base name: "ResizeType")', function() {
      // uncomment below and update the code to test the property resizeType
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "Message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property targetEncryptionType (base name: "TargetEncryptionType")', function() {
      // uncomment below and update the code to test the property targetEncryptionType
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

    it('should have the property dataTransferProgressPercent (base name: "DataTransferProgressPercent")', function() {
      // uncomment below and update the code to test the property dataTransferProgressPercent
      //var instance = new AmazonRedshift.ResizeProgressMessage();
      //expect(instance).to.be();
    });

  });

}));
