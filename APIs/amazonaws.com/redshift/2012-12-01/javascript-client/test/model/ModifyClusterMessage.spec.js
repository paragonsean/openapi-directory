/**
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonRedshift);
  }
}(this, function(expect, AmazonRedshift) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonRedshift.ModifyClusterMessage();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModifyClusterMessage', function() {
    it('should create an instance of ModifyClusterMessage', function() {
      // uncomment below and update the code to test ModifyClusterMessage
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be.a(AmazonRedshift.ModifyClusterMessage);
    });

    it('should have the property clusterIdentifier (base name: "ClusterIdentifier")', function() {
      // uncomment below and update the code to test the property clusterIdentifier
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property clusterType (base name: "ClusterType")', function() {
      // uncomment below and update the code to test the property clusterType
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property nodeType (base name: "NodeType")', function() {
      // uncomment below and update the code to test the property nodeType
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property numberOfNodes (base name: "NumberOfNodes")', function() {
      // uncomment below and update the code to test the property numberOfNodes
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property clusterSecurityGroups (base name: "ClusterSecurityGroups")', function() {
      // uncomment below and update the code to test the property clusterSecurityGroups
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property vpcSecurityGroupIds (base name: "VpcSecurityGroupIds")', function() {
      // uncomment below and update the code to test the property vpcSecurityGroupIds
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property masterUserPassword (base name: "MasterUserPassword")', function() {
      // uncomment below and update the code to test the property masterUserPassword
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property clusterParameterGroupName (base name: "ClusterParameterGroupName")', function() {
      // uncomment below and update the code to test the property clusterParameterGroupName
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property automatedSnapshotRetentionPeriod (base name: "AutomatedSnapshotRetentionPeriod")', function() {
      // uncomment below and update the code to test the property automatedSnapshotRetentionPeriod
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property manualSnapshotRetentionPeriod (base name: "ManualSnapshotRetentionPeriod")', function() {
      // uncomment below and update the code to test the property manualSnapshotRetentionPeriod
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property preferredMaintenanceWindow (base name: "PreferredMaintenanceWindow")', function() {
      // uncomment below and update the code to test the property preferredMaintenanceWindow
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property clusterVersion (base name: "ClusterVersion")', function() {
      // uncomment below and update the code to test the property clusterVersion
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property allowVersionUpgrade (base name: "AllowVersionUpgrade")', function() {
      // uncomment below and update the code to test the property allowVersionUpgrade
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property hsmClientCertificateIdentifier (base name: "HsmClientCertificateIdentifier")', function() {
      // uncomment below and update the code to test the property hsmClientCertificateIdentifier
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property hsmConfigurationIdentifier (base name: "HsmConfigurationIdentifier")', function() {
      // uncomment below and update the code to test the property hsmConfigurationIdentifier
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property newClusterIdentifier (base name: "NewClusterIdentifier")', function() {
      // uncomment below and update the code to test the property newClusterIdentifier
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property publiclyAccessible (base name: "PubliclyAccessible")', function() {
      // uncomment below and update the code to test the property publiclyAccessible
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property elasticIp (base name: "ElasticIp")', function() {
      // uncomment below and update the code to test the property elasticIp
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property enhancedVpcRouting (base name: "EnhancedVpcRouting")', function() {
      // uncomment below and update the code to test the property enhancedVpcRouting
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceTrackName (base name: "MaintenanceTrackName")', function() {
      // uncomment below and update the code to test the property maintenanceTrackName
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property encrypted (base name: "Encrypted")', function() {
      // uncomment below and update the code to test the property encrypted
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "KmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZoneRelocation (base name: "AvailabilityZoneRelocation")', function() {
      // uncomment below and update the code to test the property availabilityZoneRelocation
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZone (base name: "AvailabilityZone")', function() {
      // uncomment below and update the code to test the property availabilityZone
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "Port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new AmazonRedshift.ModifyClusterMessage();
      //expect(instance).to.be();
    });

  });

}));
