/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeClusterSnapshotsMessage {
  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_SNAPSHOT_IDENTIFIER = "SnapshotIdentifier";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDENTIFIER)
  private String snapshotIdentifier;

  public static final String SERIALIZED_NAME_SNAPSHOT_ARN = "SnapshotArn";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ARN)
  private String snapshotArn;

  public static final String SERIALIZED_NAME_SNAPSHOT_TYPE = "SnapshotType";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_TYPE)
  private String snapshotType;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MAX_RECORDS = "MaxRecords";
  @SerializedName(SERIALIZED_NAME_MAX_RECORDS)
  private Integer maxRecords;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT = "OwnerAccount";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT)
  private String ownerAccount;

  public static final String SERIALIZED_NAME_TAG_KEYS = "TagKeys";
  @SerializedName(SERIALIZED_NAME_TAG_KEYS)
  private List tagKeys;

  public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";
  @SerializedName(SERIALIZED_NAME_TAG_VALUES)
  private List tagValues;

  public static final String SERIALIZED_NAME_CLUSTER_EXISTS = "ClusterExists";
  @SerializedName(SERIALIZED_NAME_CLUSTER_EXISTS)
  private Boolean clusterExists;

  public static final String SERIALIZED_NAME_SORTING_ENTITIES = "SortingEntities";
  @SerializedName(SERIALIZED_NAME_SORTING_ENTITIES)
  private List sortingEntities;

  public DescribeClusterSnapshotsMessage() {
  }

  public DescribeClusterSnapshotsMessage clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nullable
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public DescribeClusterSnapshotsMessage snapshotIdentifier(String snapshotIdentifier) {
    this.snapshotIdentifier = snapshotIdentifier;
    return this;
  }

  /**
   * Get snapshotIdentifier
   * @return snapshotIdentifier
   */
  @javax.annotation.Nullable
  public String getSnapshotIdentifier() {
    return snapshotIdentifier;
  }

  public void setSnapshotIdentifier(String snapshotIdentifier) {
    this.snapshotIdentifier = snapshotIdentifier;
  }


  public DescribeClusterSnapshotsMessage snapshotArn(String snapshotArn) {
    this.snapshotArn = snapshotArn;
    return this;
  }

  /**
   * Get snapshotArn
   * @return snapshotArn
   */
  @javax.annotation.Nullable
  public String getSnapshotArn() {
    return snapshotArn;
  }

  public void setSnapshotArn(String snapshotArn) {
    this.snapshotArn = snapshotArn;
  }


  public DescribeClusterSnapshotsMessage snapshotType(String snapshotType) {
    this.snapshotType = snapshotType;
    return this;
  }

  /**
   * Get snapshotType
   * @return snapshotType
   */
  @javax.annotation.Nullable
  public String getSnapshotType() {
    return snapshotType;
  }

  public void setSnapshotType(String snapshotType) {
    this.snapshotType = snapshotType;
  }


  public DescribeClusterSnapshotsMessage startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DescribeClusterSnapshotsMessage endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public DescribeClusterSnapshotsMessage maxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
    return this;
  }

  /**
   * Get maxRecords
   * @return maxRecords
   */
  @javax.annotation.Nullable
  public Integer getMaxRecords() {
    return maxRecords;
  }

  public void setMaxRecords(Integer maxRecords) {
    this.maxRecords = maxRecords;
  }


  public DescribeClusterSnapshotsMessage marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }


  public DescribeClusterSnapshotsMessage ownerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
    return this;
  }

  /**
   * Get ownerAccount
   * @return ownerAccount
   */
  @javax.annotation.Nullable
  public String getOwnerAccount() {
    return ownerAccount;
  }

  public void setOwnerAccount(String ownerAccount) {
    this.ownerAccount = ownerAccount;
  }


  public DescribeClusterSnapshotsMessage tagKeys(List tagKeys) {
    this.tagKeys = tagKeys;
    return this;
  }

  /**
   * Get tagKeys
   * @return tagKeys
   */
  @javax.annotation.Nullable
  public List getTagKeys() {
    return tagKeys;
  }

  public void setTagKeys(List tagKeys) {
    this.tagKeys = tagKeys;
  }


  public DescribeClusterSnapshotsMessage tagValues(List tagValues) {
    this.tagValues = tagValues;
    return this;
  }

  /**
   * Get tagValues
   * @return tagValues
   */
  @javax.annotation.Nullable
  public List getTagValues() {
    return tagValues;
  }

  public void setTagValues(List tagValues) {
    this.tagValues = tagValues;
  }


  public DescribeClusterSnapshotsMessage clusterExists(Boolean clusterExists) {
    this.clusterExists = clusterExists;
    return this;
  }

  /**
   * Get clusterExists
   * @return clusterExists
   */
  @javax.annotation.Nullable
  public Boolean getClusterExists() {
    return clusterExists;
  }

  public void setClusterExists(Boolean clusterExists) {
    this.clusterExists = clusterExists;
  }


  public DescribeClusterSnapshotsMessage sortingEntities(List sortingEntities) {
    this.sortingEntities = sortingEntities;
    return this;
  }

  /**
   * Get sortingEntities
   * @return sortingEntities
   */
  @javax.annotation.Nullable
  public List getSortingEntities() {
    return sortingEntities;
  }

  public void setSortingEntities(List sortingEntities) {
    this.sortingEntities = sortingEntities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeClusterSnapshotsMessage describeClusterSnapshotsMessage = (DescribeClusterSnapshotsMessage) o;
    return Objects.equals(this.clusterIdentifier, describeClusterSnapshotsMessage.clusterIdentifier) &&
        Objects.equals(this.snapshotIdentifier, describeClusterSnapshotsMessage.snapshotIdentifier) &&
        Objects.equals(this.snapshotArn, describeClusterSnapshotsMessage.snapshotArn) &&
        Objects.equals(this.snapshotType, describeClusterSnapshotsMessage.snapshotType) &&
        Objects.equals(this.startTime, describeClusterSnapshotsMessage.startTime) &&
        Objects.equals(this.endTime, describeClusterSnapshotsMessage.endTime) &&
        Objects.equals(this.maxRecords, describeClusterSnapshotsMessage.maxRecords) &&
        Objects.equals(this.marker, describeClusterSnapshotsMessage.marker) &&
        Objects.equals(this.ownerAccount, describeClusterSnapshotsMessage.ownerAccount) &&
        Objects.equals(this.tagKeys, describeClusterSnapshotsMessage.tagKeys) &&
        Objects.equals(this.tagValues, describeClusterSnapshotsMessage.tagValues) &&
        Objects.equals(this.clusterExists, describeClusterSnapshotsMessage.clusterExists) &&
        Objects.equals(this.sortingEntities, describeClusterSnapshotsMessage.sortingEntities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIdentifier, snapshotIdentifier, snapshotArn, snapshotType, startTime, endTime, maxRecords, marker, ownerAccount, tagKeys, tagValues, clusterExists, sortingEntities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeClusterSnapshotsMessage {\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    snapshotIdentifier: ").append(toIndentedString(snapshotIdentifier)).append("\n");
    sb.append("    snapshotArn: ").append(toIndentedString(snapshotArn)).append("\n");
    sb.append("    snapshotType: ").append(toIndentedString(snapshotType)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    maxRecords: ").append(toIndentedString(maxRecords)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    ownerAccount: ").append(toIndentedString(ownerAccount)).append("\n");
    sb.append("    tagKeys: ").append(toIndentedString(tagKeys)).append("\n");
    sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
    sb.append("    clusterExists: ").append(toIndentedString(clusterExists)).append("\n");
    sb.append("    sortingEntities: ").append(toIndentedString(sortingEntities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("SnapshotIdentifier");
    openapiFields.add("SnapshotArn");
    openapiFields.add("SnapshotType");
    openapiFields.add("StartTime");
    openapiFields.add("EndTime");
    openapiFields.add("MaxRecords");
    openapiFields.add("Marker");
    openapiFields.add("OwnerAccount");
    openapiFields.add("TagKeys");
    openapiFields.add("TagValues");
    openapiFields.add("ClusterExists");
    openapiFields.add("SortingEntities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeClusterSnapshotsMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeClusterSnapshotsMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeClusterSnapshotsMessage is not found in the empty JSON string", DescribeClusterSnapshotsMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeClusterSnapshotsMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeClusterSnapshotsMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ClusterIdentifier`
      if (jsonObj.get("ClusterIdentifier") != null && !jsonObj.get("ClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      }
      // validate the optional field `SnapshotIdentifier`
      if (jsonObj.get("SnapshotIdentifier") != null && !jsonObj.get("SnapshotIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotIdentifier"));
      }
      // validate the optional field `SnapshotArn`
      if (jsonObj.get("SnapshotArn") != null && !jsonObj.get("SnapshotArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotArn"));
      }
      // validate the optional field `SnapshotType`
      if (jsonObj.get("SnapshotType") != null && !jsonObj.get("SnapshotType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotType"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `MaxRecords`
      if (jsonObj.get("MaxRecords") != null && !jsonObj.get("MaxRecords").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxRecords"));
      }
      // validate the optional field `Marker`
      if (jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Marker"));
      }
      // validate the optional field `OwnerAccount`
      if (jsonObj.get("OwnerAccount") != null && !jsonObj.get("OwnerAccount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerAccount"));
      }
      // validate the optional field `TagKeys`
      if (jsonObj.get("TagKeys") != null && !jsonObj.get("TagKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TagKeys"));
      }
      // validate the optional field `TagValues`
      if (jsonObj.get("TagValues") != null && !jsonObj.get("TagValues").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TagValues"));
      }
      // validate the optional field `ClusterExists`
      if (jsonObj.get("ClusterExists") != null && !jsonObj.get("ClusterExists").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ClusterExists"));
      }
      // validate the optional field `SortingEntities`
      if (jsonObj.get("SortingEntities") != null && !jsonObj.get("SortingEntities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SortingEntities"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeClusterSnapshotsMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeClusterSnapshotsMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeClusterSnapshotsMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeClusterSnapshotsMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeClusterSnapshotsMessage>() {
           @Override
           public void write(JsonWriter out, DescribeClusterSnapshotsMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeClusterSnapshotsMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeClusterSnapshotsMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeClusterSnapshotsMessage
   * @throws IOException if the JSON string is invalid with respect to DescribeClusterSnapshotsMessage
   */
  public static DescribeClusterSnapshotsMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeClusterSnapshotsMessage.class);
  }

  /**
   * Convert an instance of DescribeClusterSnapshotsMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

