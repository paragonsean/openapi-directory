/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorizeSnapshotAccessMessage {
  public static final String SERIALIZED_NAME_SNAPSHOT_IDENTIFIER = "SnapshotIdentifier";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDENTIFIER)
  private String snapshotIdentifier;

  public static final String SERIALIZED_NAME_SNAPSHOT_ARN = "SnapshotArn";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ARN)
  private String snapshotArn;

  public static final String SERIALIZED_NAME_SNAPSHOT_CLUSTER_IDENTIFIER = "SnapshotClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_CLUSTER_IDENTIFIER)
  private String snapshotClusterIdentifier;

  public static final String SERIALIZED_NAME_ACCOUNT_WITH_RESTORE_ACCESS = "AccountWithRestoreAccess";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_WITH_RESTORE_ACCESS)
  private String accountWithRestoreAccess;

  public AuthorizeSnapshotAccessMessage() {
  }

  public AuthorizeSnapshotAccessMessage snapshotIdentifier(String snapshotIdentifier) {
    this.snapshotIdentifier = snapshotIdentifier;
    return this;
  }

  /**
   * Get snapshotIdentifier
   * @return snapshotIdentifier
   */
  @javax.annotation.Nullable
  public String getSnapshotIdentifier() {
    return snapshotIdentifier;
  }

  public void setSnapshotIdentifier(String snapshotIdentifier) {
    this.snapshotIdentifier = snapshotIdentifier;
  }


  public AuthorizeSnapshotAccessMessage snapshotArn(String snapshotArn) {
    this.snapshotArn = snapshotArn;
    return this;
  }

  /**
   * Get snapshotArn
   * @return snapshotArn
   */
  @javax.annotation.Nullable
  public String getSnapshotArn() {
    return snapshotArn;
  }

  public void setSnapshotArn(String snapshotArn) {
    this.snapshotArn = snapshotArn;
  }


  public AuthorizeSnapshotAccessMessage snapshotClusterIdentifier(String snapshotClusterIdentifier) {
    this.snapshotClusterIdentifier = snapshotClusterIdentifier;
    return this;
  }

  /**
   * Get snapshotClusterIdentifier
   * @return snapshotClusterIdentifier
   */
  @javax.annotation.Nullable
  public String getSnapshotClusterIdentifier() {
    return snapshotClusterIdentifier;
  }

  public void setSnapshotClusterIdentifier(String snapshotClusterIdentifier) {
    this.snapshotClusterIdentifier = snapshotClusterIdentifier;
  }


  public AuthorizeSnapshotAccessMessage accountWithRestoreAccess(String accountWithRestoreAccess) {
    this.accountWithRestoreAccess = accountWithRestoreAccess;
    return this;
  }

  /**
   * Get accountWithRestoreAccess
   * @return accountWithRestoreAccess
   */
  @javax.annotation.Nonnull
  public String getAccountWithRestoreAccess() {
    return accountWithRestoreAccess;
  }

  public void setAccountWithRestoreAccess(String accountWithRestoreAccess) {
    this.accountWithRestoreAccess = accountWithRestoreAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizeSnapshotAccessMessage authorizeSnapshotAccessMessage = (AuthorizeSnapshotAccessMessage) o;
    return Objects.equals(this.snapshotIdentifier, authorizeSnapshotAccessMessage.snapshotIdentifier) &&
        Objects.equals(this.snapshotArn, authorizeSnapshotAccessMessage.snapshotArn) &&
        Objects.equals(this.snapshotClusterIdentifier, authorizeSnapshotAccessMessage.snapshotClusterIdentifier) &&
        Objects.equals(this.accountWithRestoreAccess, authorizeSnapshotAccessMessage.accountWithRestoreAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotIdentifier, snapshotArn, snapshotClusterIdentifier, accountWithRestoreAccess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizeSnapshotAccessMessage {\n");
    sb.append("    snapshotIdentifier: ").append(toIndentedString(snapshotIdentifier)).append("\n");
    sb.append("    snapshotArn: ").append(toIndentedString(snapshotArn)).append("\n");
    sb.append("    snapshotClusterIdentifier: ").append(toIndentedString(snapshotClusterIdentifier)).append("\n");
    sb.append("    accountWithRestoreAccess: ").append(toIndentedString(accountWithRestoreAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SnapshotIdentifier");
    openapiFields.add("SnapshotArn");
    openapiFields.add("SnapshotClusterIdentifier");
    openapiFields.add("AccountWithRestoreAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccountWithRestoreAccess");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizeSnapshotAccessMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizeSnapshotAccessMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizeSnapshotAccessMessage is not found in the empty JSON string", AuthorizeSnapshotAccessMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizeSnapshotAccessMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizeSnapshotAccessMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthorizeSnapshotAccessMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SnapshotIdentifier`
      if (jsonObj.get("SnapshotIdentifier") != null && !jsonObj.get("SnapshotIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotIdentifier"));
      }
      // validate the optional field `SnapshotArn`
      if (jsonObj.get("SnapshotArn") != null && !jsonObj.get("SnapshotArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotArn"));
      }
      // validate the optional field `SnapshotClusterIdentifier`
      if (jsonObj.get("SnapshotClusterIdentifier") != null && !jsonObj.get("SnapshotClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotClusterIdentifier"));
      }
      // validate the required field `AccountWithRestoreAccess`
      String.validateJsonElement(jsonObj.get("AccountWithRestoreAccess"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizeSnapshotAccessMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizeSnapshotAccessMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizeSnapshotAccessMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizeSnapshotAccessMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizeSnapshotAccessMessage>() {
           @Override
           public void write(JsonWriter out, AuthorizeSnapshotAccessMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizeSnapshotAccessMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizeSnapshotAccessMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizeSnapshotAccessMessage
   * @throws IOException if the JSON string is invalid with respect to AuthorizeSnapshotAccessMessage
   */
  public static AuthorizeSnapshotAccessMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizeSnapshotAccessMessage.class);
  }

  /**
   * Convert an instance of AuthorizeSnapshotAccessMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

