/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PartnerIntegrationInputMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartnerIntegrationInputMessage {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_PARTNER_NAME = "PartnerName";
  @SerializedName(SERIALIZED_NAME_PARTNER_NAME)
  private String partnerName;

  public PartnerIntegrationInputMessage() {
  }

  public PartnerIntegrationInputMessage accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public PartnerIntegrationInputMessage clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nonnull
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public PartnerIntegrationInputMessage databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nonnull
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public PartnerIntegrationInputMessage partnerName(String partnerName) {
    this.partnerName = partnerName;
    return this;
  }

  /**
   * Get partnerName
   * @return partnerName
   */
  @javax.annotation.Nonnull
  public String getPartnerName() {
    return partnerName;
  }

  public void setPartnerName(String partnerName) {
    this.partnerName = partnerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartnerIntegrationInputMessage partnerIntegrationInputMessage = (PartnerIntegrationInputMessage) o;
    return Objects.equals(this.accountId, partnerIntegrationInputMessage.accountId) &&
        Objects.equals(this.clusterIdentifier, partnerIntegrationInputMessage.clusterIdentifier) &&
        Objects.equals(this.databaseName, partnerIntegrationInputMessage.databaseName) &&
        Objects.equals(this.partnerName, partnerIntegrationInputMessage.partnerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, clusterIdentifier, databaseName, partnerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartnerIntegrationInputMessage {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    partnerName: ").append(toIndentedString(partnerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("DatabaseName");
    openapiFields.add("PartnerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccountId");
    openapiRequiredFields.add("ClusterIdentifier");
    openapiRequiredFields.add("DatabaseName");
    openapiRequiredFields.add("PartnerName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartnerIntegrationInputMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartnerIntegrationInputMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartnerIntegrationInputMessage is not found in the empty JSON string", PartnerIntegrationInputMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartnerIntegrationInputMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartnerIntegrationInputMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PartnerIntegrationInputMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AccountId`
      String.validateJsonElement(jsonObj.get("AccountId"));
      // validate the required field `ClusterIdentifier`
      String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      // validate the required field `DatabaseName`
      String.validateJsonElement(jsonObj.get("DatabaseName"));
      // validate the required field `PartnerName`
      String.validateJsonElement(jsonObj.get("PartnerName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartnerIntegrationInputMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartnerIntegrationInputMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartnerIntegrationInputMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartnerIntegrationInputMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<PartnerIntegrationInputMessage>() {
           @Override
           public void write(JsonWriter out, PartnerIntegrationInputMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartnerIntegrationInputMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartnerIntegrationInputMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartnerIntegrationInputMessage
   * @throws IOException if the JSON string is invalid with respect to PartnerIntegrationInputMessage
   */
  public static PartnerIntegrationInputMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartnerIntegrationInputMessage.class);
  }

  /**
   * Convert an instance of PartnerIntegrationInputMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

