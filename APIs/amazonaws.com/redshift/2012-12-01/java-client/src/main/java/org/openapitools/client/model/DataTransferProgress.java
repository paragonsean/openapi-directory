/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the status of a cluster while it is in the process of resizing with an incremental resize.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataTransferProgress {
  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CURRENT_RATE_IN_MEGA_BYTES_PER_SECOND = "CurrentRateInMegaBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_CURRENT_RATE_IN_MEGA_BYTES_PER_SECOND)
  private Double currentRateInMegaBytesPerSecond;

  public static final String SERIALIZED_NAME_TOTAL_DATA_IN_MEGA_BYTES = "TotalDataInMegaBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_DATA_IN_MEGA_BYTES)
  private Integer totalDataInMegaBytes;

  public static final String SERIALIZED_NAME_DATA_TRANSFERRED_IN_MEGA_BYTES = "DataTransferredInMegaBytes";
  @SerializedName(SERIALIZED_NAME_DATA_TRANSFERRED_IN_MEGA_BYTES)
  private Integer dataTransferredInMegaBytes;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_TO_COMPLETION_IN_SECONDS = "EstimatedTimeToCompletionInSeconds";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_TO_COMPLETION_IN_SECONDS)
  private Integer estimatedTimeToCompletionInSeconds;

  public static final String SERIALIZED_NAME_ELAPSED_TIME_IN_SECONDS = "ElapsedTimeInSeconds";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME_IN_SECONDS)
  private Integer elapsedTimeInSeconds;

  public DataTransferProgress() {
  }

  public DataTransferProgress status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DataTransferProgress currentRateInMegaBytesPerSecond(Double currentRateInMegaBytesPerSecond) {
    this.currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond;
    return this;
  }

  /**
   * Get currentRateInMegaBytesPerSecond
   * @return currentRateInMegaBytesPerSecond
   */
  @javax.annotation.Nullable
  public Double getCurrentRateInMegaBytesPerSecond() {
    return currentRateInMegaBytesPerSecond;
  }

  public void setCurrentRateInMegaBytesPerSecond(Double currentRateInMegaBytesPerSecond) {
    this.currentRateInMegaBytesPerSecond = currentRateInMegaBytesPerSecond;
  }


  public DataTransferProgress totalDataInMegaBytes(Integer totalDataInMegaBytes) {
    this.totalDataInMegaBytes = totalDataInMegaBytes;
    return this;
  }

  /**
   * Get totalDataInMegaBytes
   * @return totalDataInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getTotalDataInMegaBytes() {
    return totalDataInMegaBytes;
  }

  public void setTotalDataInMegaBytes(Integer totalDataInMegaBytes) {
    this.totalDataInMegaBytes = totalDataInMegaBytes;
  }


  public DataTransferProgress dataTransferredInMegaBytes(Integer dataTransferredInMegaBytes) {
    this.dataTransferredInMegaBytes = dataTransferredInMegaBytes;
    return this;
  }

  /**
   * Get dataTransferredInMegaBytes
   * @return dataTransferredInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getDataTransferredInMegaBytes() {
    return dataTransferredInMegaBytes;
  }

  public void setDataTransferredInMegaBytes(Integer dataTransferredInMegaBytes) {
    this.dataTransferredInMegaBytes = dataTransferredInMegaBytes;
  }


  public DataTransferProgress estimatedTimeToCompletionInSeconds(Integer estimatedTimeToCompletionInSeconds) {
    this.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds;
    return this;
  }

  /**
   * Get estimatedTimeToCompletionInSeconds
   * @return estimatedTimeToCompletionInSeconds
   */
  @javax.annotation.Nullable
  public Integer getEstimatedTimeToCompletionInSeconds() {
    return estimatedTimeToCompletionInSeconds;
  }

  public void setEstimatedTimeToCompletionInSeconds(Integer estimatedTimeToCompletionInSeconds) {
    this.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds;
  }


  public DataTransferProgress elapsedTimeInSeconds(Integer elapsedTimeInSeconds) {
    this.elapsedTimeInSeconds = elapsedTimeInSeconds;
    return this;
  }

  /**
   * Get elapsedTimeInSeconds
   * @return elapsedTimeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getElapsedTimeInSeconds() {
    return elapsedTimeInSeconds;
  }

  public void setElapsedTimeInSeconds(Integer elapsedTimeInSeconds) {
    this.elapsedTimeInSeconds = elapsedTimeInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataTransferProgress dataTransferProgress = (DataTransferProgress) o;
    return Objects.equals(this.status, dataTransferProgress.status) &&
        Objects.equals(this.currentRateInMegaBytesPerSecond, dataTransferProgress.currentRateInMegaBytesPerSecond) &&
        Objects.equals(this.totalDataInMegaBytes, dataTransferProgress.totalDataInMegaBytes) &&
        Objects.equals(this.dataTransferredInMegaBytes, dataTransferProgress.dataTransferredInMegaBytes) &&
        Objects.equals(this.estimatedTimeToCompletionInSeconds, dataTransferProgress.estimatedTimeToCompletionInSeconds) &&
        Objects.equals(this.elapsedTimeInSeconds, dataTransferProgress.elapsedTimeInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, currentRateInMegaBytesPerSecond, totalDataInMegaBytes, dataTransferredInMegaBytes, estimatedTimeToCompletionInSeconds, elapsedTimeInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataTransferProgress {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currentRateInMegaBytesPerSecond: ").append(toIndentedString(currentRateInMegaBytesPerSecond)).append("\n");
    sb.append("    totalDataInMegaBytes: ").append(toIndentedString(totalDataInMegaBytes)).append("\n");
    sb.append("    dataTransferredInMegaBytes: ").append(toIndentedString(dataTransferredInMegaBytes)).append("\n");
    sb.append("    estimatedTimeToCompletionInSeconds: ").append(toIndentedString(estimatedTimeToCompletionInSeconds)).append("\n");
    sb.append("    elapsedTimeInSeconds: ").append(toIndentedString(elapsedTimeInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Status");
    openapiFields.add("CurrentRateInMegaBytesPerSecond");
    openapiFields.add("TotalDataInMegaBytes");
    openapiFields.add("DataTransferredInMegaBytes");
    openapiFields.add("EstimatedTimeToCompletionInSeconds");
    openapiFields.add("ElapsedTimeInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataTransferProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataTransferProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataTransferProgress is not found in the empty JSON string", DataTransferProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataTransferProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataTransferProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CurrentRateInMegaBytesPerSecond`
      if (jsonObj.get("CurrentRateInMegaBytesPerSecond") != null && !jsonObj.get("CurrentRateInMegaBytesPerSecond").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("CurrentRateInMegaBytesPerSecond"));
      }
      // validate the optional field `TotalDataInMegaBytes`
      if (jsonObj.get("TotalDataInMegaBytes") != null && !jsonObj.get("TotalDataInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalDataInMegaBytes"));
      }
      // validate the optional field `DataTransferredInMegaBytes`
      if (jsonObj.get("DataTransferredInMegaBytes") != null && !jsonObj.get("DataTransferredInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataTransferredInMegaBytes"));
      }
      // validate the optional field `EstimatedTimeToCompletionInSeconds`
      if (jsonObj.get("EstimatedTimeToCompletionInSeconds") != null && !jsonObj.get("EstimatedTimeToCompletionInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedTimeToCompletionInSeconds"));
      }
      // validate the optional field `ElapsedTimeInSeconds`
      if (jsonObj.get("ElapsedTimeInSeconds") != null && !jsonObj.get("ElapsedTimeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ElapsedTimeInSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataTransferProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataTransferProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataTransferProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataTransferProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<DataTransferProgress>() {
           @Override
           public void write(JsonWriter out, DataTransferProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataTransferProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataTransferProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataTransferProgress
   * @throws IOException if the JSON string is invalid with respect to DataTransferProgress
   */
  public static DataTransferProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataTransferProgress.class);
  }

  /**
   * Convert an instance of DataTransferProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

