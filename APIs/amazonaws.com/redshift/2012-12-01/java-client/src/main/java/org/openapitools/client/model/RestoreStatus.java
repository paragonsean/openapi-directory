/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the status of a cluster restore action. Returns null if the cluster was not created by restoring a snapshot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestoreStatus {
  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CURRENT_RESTORE_RATE_IN_MEGA_BYTES_PER_SECOND = "CurrentRestoreRateInMegaBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_CURRENT_RESTORE_RATE_IN_MEGA_BYTES_PER_SECOND)
  private Double currentRestoreRateInMegaBytesPerSecond;

  public static final String SERIALIZED_NAME_SNAPSHOT_SIZE_IN_MEGA_BYTES = "SnapshotSizeInMegaBytes";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_SIZE_IN_MEGA_BYTES)
  private Integer snapshotSizeInMegaBytes;

  public static final String SERIALIZED_NAME_PROGRESS_IN_MEGA_BYTES = "ProgressInMegaBytes";
  @SerializedName(SERIALIZED_NAME_PROGRESS_IN_MEGA_BYTES)
  private Integer progressInMegaBytes;

  public static final String SERIALIZED_NAME_ELAPSED_TIME_IN_SECONDS = "ElapsedTimeInSeconds";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME_IN_SECONDS)
  private Integer elapsedTimeInSeconds;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_TO_COMPLETION_IN_SECONDS = "EstimatedTimeToCompletionInSeconds";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_TO_COMPLETION_IN_SECONDS)
  private Integer estimatedTimeToCompletionInSeconds;

  public RestoreStatus() {
  }

  public RestoreStatus status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RestoreStatus currentRestoreRateInMegaBytesPerSecond(Double currentRestoreRateInMegaBytesPerSecond) {
    this.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond;
    return this;
  }

  /**
   * Get currentRestoreRateInMegaBytesPerSecond
   * @return currentRestoreRateInMegaBytesPerSecond
   */
  @javax.annotation.Nullable
  public Double getCurrentRestoreRateInMegaBytesPerSecond() {
    return currentRestoreRateInMegaBytesPerSecond;
  }

  public void setCurrentRestoreRateInMegaBytesPerSecond(Double currentRestoreRateInMegaBytesPerSecond) {
    this.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond;
  }


  public RestoreStatus snapshotSizeInMegaBytes(Integer snapshotSizeInMegaBytes) {
    this.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes;
    return this;
  }

  /**
   * Get snapshotSizeInMegaBytes
   * @return snapshotSizeInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getSnapshotSizeInMegaBytes() {
    return snapshotSizeInMegaBytes;
  }

  public void setSnapshotSizeInMegaBytes(Integer snapshotSizeInMegaBytes) {
    this.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes;
  }


  public RestoreStatus progressInMegaBytes(Integer progressInMegaBytes) {
    this.progressInMegaBytes = progressInMegaBytes;
    return this;
  }

  /**
   * Get progressInMegaBytes
   * @return progressInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getProgressInMegaBytes() {
    return progressInMegaBytes;
  }

  public void setProgressInMegaBytes(Integer progressInMegaBytes) {
    this.progressInMegaBytes = progressInMegaBytes;
  }


  public RestoreStatus elapsedTimeInSeconds(Integer elapsedTimeInSeconds) {
    this.elapsedTimeInSeconds = elapsedTimeInSeconds;
    return this;
  }

  /**
   * Get elapsedTimeInSeconds
   * @return elapsedTimeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getElapsedTimeInSeconds() {
    return elapsedTimeInSeconds;
  }

  public void setElapsedTimeInSeconds(Integer elapsedTimeInSeconds) {
    this.elapsedTimeInSeconds = elapsedTimeInSeconds;
  }


  public RestoreStatus estimatedTimeToCompletionInSeconds(Integer estimatedTimeToCompletionInSeconds) {
    this.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds;
    return this;
  }

  /**
   * Get estimatedTimeToCompletionInSeconds
   * @return estimatedTimeToCompletionInSeconds
   */
  @javax.annotation.Nullable
  public Integer getEstimatedTimeToCompletionInSeconds() {
    return estimatedTimeToCompletionInSeconds;
  }

  public void setEstimatedTimeToCompletionInSeconds(Integer estimatedTimeToCompletionInSeconds) {
    this.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestoreStatus restoreStatus = (RestoreStatus) o;
    return Objects.equals(this.status, restoreStatus.status) &&
        Objects.equals(this.currentRestoreRateInMegaBytesPerSecond, restoreStatus.currentRestoreRateInMegaBytesPerSecond) &&
        Objects.equals(this.snapshotSizeInMegaBytes, restoreStatus.snapshotSizeInMegaBytes) &&
        Objects.equals(this.progressInMegaBytes, restoreStatus.progressInMegaBytes) &&
        Objects.equals(this.elapsedTimeInSeconds, restoreStatus.elapsedTimeInSeconds) &&
        Objects.equals(this.estimatedTimeToCompletionInSeconds, restoreStatus.estimatedTimeToCompletionInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, currentRestoreRateInMegaBytesPerSecond, snapshotSizeInMegaBytes, progressInMegaBytes, elapsedTimeInSeconds, estimatedTimeToCompletionInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestoreStatus {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    currentRestoreRateInMegaBytesPerSecond: ").append(toIndentedString(currentRestoreRateInMegaBytesPerSecond)).append("\n");
    sb.append("    snapshotSizeInMegaBytes: ").append(toIndentedString(snapshotSizeInMegaBytes)).append("\n");
    sb.append("    progressInMegaBytes: ").append(toIndentedString(progressInMegaBytes)).append("\n");
    sb.append("    elapsedTimeInSeconds: ").append(toIndentedString(elapsedTimeInSeconds)).append("\n");
    sb.append("    estimatedTimeToCompletionInSeconds: ").append(toIndentedString(estimatedTimeToCompletionInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Status");
    openapiFields.add("CurrentRestoreRateInMegaBytesPerSecond");
    openapiFields.add("SnapshotSizeInMegaBytes");
    openapiFields.add("ProgressInMegaBytes");
    openapiFields.add("ElapsedTimeInSeconds");
    openapiFields.add("EstimatedTimeToCompletionInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestoreStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestoreStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestoreStatus is not found in the empty JSON string", RestoreStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestoreStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestoreStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CurrentRestoreRateInMegaBytesPerSecond`
      if (jsonObj.get("CurrentRestoreRateInMegaBytesPerSecond") != null && !jsonObj.get("CurrentRestoreRateInMegaBytesPerSecond").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("CurrentRestoreRateInMegaBytesPerSecond"));
      }
      // validate the optional field `SnapshotSizeInMegaBytes`
      if (jsonObj.get("SnapshotSizeInMegaBytes") != null && !jsonObj.get("SnapshotSizeInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SnapshotSizeInMegaBytes"));
      }
      // validate the optional field `ProgressInMegaBytes`
      if (jsonObj.get("ProgressInMegaBytes") != null && !jsonObj.get("ProgressInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgressInMegaBytes"));
      }
      // validate the optional field `ElapsedTimeInSeconds`
      if (jsonObj.get("ElapsedTimeInSeconds") != null && !jsonObj.get("ElapsedTimeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ElapsedTimeInSeconds"));
      }
      // validate the optional field `EstimatedTimeToCompletionInSeconds`
      if (jsonObj.get("EstimatedTimeToCompletionInSeconds") != null && !jsonObj.get("EstimatedTimeToCompletionInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedTimeToCompletionInSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestoreStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestoreStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestoreStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestoreStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<RestoreStatus>() {
           @Override
           public void write(JsonWriter out, RestoreStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestoreStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestoreStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestoreStatus
   * @throws IOException if the JSON string is invalid with respect to RestoreStatus
   */
  public static RestoreStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestoreStatus.class);
  }

  /**
   * Convert an instance of RestoreStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

