/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubnetSubnetAvailabilityZone;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubnetListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubnetListInner {
  public static final String SERIALIZED_NAME_SUBNET_IDENTIFIER = "SubnetIdentifier";
  @SerializedName(SERIALIZED_NAME_SUBNET_IDENTIFIER)
  private String subnetIdentifier;

  public static final String SERIALIZED_NAME_SUBNET_AVAILABILITY_ZONE = "SubnetAvailabilityZone";
  @SerializedName(SERIALIZED_NAME_SUBNET_AVAILABILITY_ZONE)
  private SubnetSubnetAvailabilityZone subnetAvailabilityZone;

  public static final String SERIALIZED_NAME_SUBNET_STATUS = "SubnetStatus";
  @SerializedName(SERIALIZED_NAME_SUBNET_STATUS)
  private String subnetStatus;

  public SubnetListInner() {
  }

  public SubnetListInner subnetIdentifier(String subnetIdentifier) {
    this.subnetIdentifier = subnetIdentifier;
    return this;
  }

  /**
   * Get subnetIdentifier
   * @return subnetIdentifier
   */
  @javax.annotation.Nullable
  public String getSubnetIdentifier() {
    return subnetIdentifier;
  }

  public void setSubnetIdentifier(String subnetIdentifier) {
    this.subnetIdentifier = subnetIdentifier;
  }


  public SubnetListInner subnetAvailabilityZone(SubnetSubnetAvailabilityZone subnetAvailabilityZone) {
    this.subnetAvailabilityZone = subnetAvailabilityZone;
    return this;
  }

  /**
   * Get subnetAvailabilityZone
   * @return subnetAvailabilityZone
   */
  @javax.annotation.Nullable
  public SubnetSubnetAvailabilityZone getSubnetAvailabilityZone() {
    return subnetAvailabilityZone;
  }

  public void setSubnetAvailabilityZone(SubnetSubnetAvailabilityZone subnetAvailabilityZone) {
    this.subnetAvailabilityZone = subnetAvailabilityZone;
  }


  public SubnetListInner subnetStatus(String subnetStatus) {
    this.subnetStatus = subnetStatus;
    return this;
  }

  /**
   * Get subnetStatus
   * @return subnetStatus
   */
  @javax.annotation.Nullable
  public String getSubnetStatus() {
    return subnetStatus;
  }

  public void setSubnetStatus(String subnetStatus) {
    this.subnetStatus = subnetStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubnetListInner subnetListInner = (SubnetListInner) o;
    return Objects.equals(this.subnetIdentifier, subnetListInner.subnetIdentifier) &&
        Objects.equals(this.subnetAvailabilityZone, subnetListInner.subnetAvailabilityZone) &&
        Objects.equals(this.subnetStatus, subnetListInner.subnetStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subnetIdentifier, subnetAvailabilityZone, subnetStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubnetListInner {\n");
    sb.append("    subnetIdentifier: ").append(toIndentedString(subnetIdentifier)).append("\n");
    sb.append("    subnetAvailabilityZone: ").append(toIndentedString(subnetAvailabilityZone)).append("\n");
    sb.append("    subnetStatus: ").append(toIndentedString(subnetStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SubnetIdentifier");
    openapiFields.add("SubnetAvailabilityZone");
    openapiFields.add("SubnetStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubnetListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubnetListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubnetListInner is not found in the empty JSON string", SubnetListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubnetListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubnetListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SubnetIdentifier`
      if (jsonObj.get("SubnetIdentifier") != null && !jsonObj.get("SubnetIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetIdentifier"));
      }
      // validate the optional field `SubnetAvailabilityZone`
      if (jsonObj.get("SubnetAvailabilityZone") != null && !jsonObj.get("SubnetAvailabilityZone").isJsonNull()) {
        SubnetSubnetAvailabilityZone.validateJsonElement(jsonObj.get("SubnetAvailabilityZone"));
      }
      // validate the optional field `SubnetStatus`
      if (jsonObj.get("SubnetStatus") != null && !jsonObj.get("SubnetStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubnetListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubnetListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubnetListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubnetListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SubnetListInner>() {
           @Override
           public void write(JsonWriter out, SubnetListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubnetListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubnetListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubnetListInner
   * @throws IOException if the JSON string is invalid with respect to SubnetListInner
   */
  public static SubnetListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubnetListInner.class);
  }

  /**
   * Convert an instance of SubnetListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

