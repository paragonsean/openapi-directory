/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the result of a cluster resize operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResizeProgressMessage {
  public static final String SERIALIZED_NAME_TARGET_NODE_TYPE = "TargetNodeType";
  @SerializedName(SERIALIZED_NAME_TARGET_NODE_TYPE)
  private String targetNodeType;

  public static final String SERIALIZED_NAME_TARGET_NUMBER_OF_NODES = "TargetNumberOfNodes";
  @SerializedName(SERIALIZED_NAME_TARGET_NUMBER_OF_NODES)
  private Integer targetNumberOfNodes;

  public static final String SERIALIZED_NAME_TARGET_CLUSTER_TYPE = "TargetClusterType";
  @SerializedName(SERIALIZED_NAME_TARGET_CLUSTER_TYPE)
  private String targetClusterType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_IMPORT_TABLES_COMPLETED = "ImportTablesCompleted";
  @SerializedName(SERIALIZED_NAME_IMPORT_TABLES_COMPLETED)
  private List importTablesCompleted;

  public static final String SERIALIZED_NAME_IMPORT_TABLES_IN_PROGRESS = "ImportTablesInProgress";
  @SerializedName(SERIALIZED_NAME_IMPORT_TABLES_IN_PROGRESS)
  private List importTablesInProgress;

  public static final String SERIALIZED_NAME_IMPORT_TABLES_NOT_STARTED = "ImportTablesNotStarted";
  @SerializedName(SERIALIZED_NAME_IMPORT_TABLES_NOT_STARTED)
  private List importTablesNotStarted;

  public static final String SERIALIZED_NAME_AVG_RESIZE_RATE_IN_MEGA_BYTES_PER_SECOND = "AvgResizeRateInMegaBytesPerSecond";
  @SerializedName(SERIALIZED_NAME_AVG_RESIZE_RATE_IN_MEGA_BYTES_PER_SECOND)
  private Double avgResizeRateInMegaBytesPerSecond;

  public static final String SERIALIZED_NAME_TOTAL_RESIZE_DATA_IN_MEGA_BYTES = "TotalResizeDataInMegaBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_RESIZE_DATA_IN_MEGA_BYTES)
  private Integer totalResizeDataInMegaBytes;

  public static final String SERIALIZED_NAME_PROGRESS_IN_MEGA_BYTES = "ProgressInMegaBytes";
  @SerializedName(SERIALIZED_NAME_PROGRESS_IN_MEGA_BYTES)
  private Integer progressInMegaBytes;

  public static final String SERIALIZED_NAME_ELAPSED_TIME_IN_SECONDS = "ElapsedTimeInSeconds";
  @SerializedName(SERIALIZED_NAME_ELAPSED_TIME_IN_SECONDS)
  private Integer elapsedTimeInSeconds;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_TO_COMPLETION_IN_SECONDS = "EstimatedTimeToCompletionInSeconds";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_TO_COMPLETION_IN_SECONDS)
  private Integer estimatedTimeToCompletionInSeconds;

  public static final String SERIALIZED_NAME_RESIZE_TYPE = "ResizeType";
  @SerializedName(SERIALIZED_NAME_RESIZE_TYPE)
  private String resizeType;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_TARGET_ENCRYPTION_TYPE = "TargetEncryptionType";
  @SerializedName(SERIALIZED_NAME_TARGET_ENCRYPTION_TYPE)
  private String targetEncryptionType;

  public static final String SERIALIZED_NAME_DATA_TRANSFER_PROGRESS_PERCENT = "DataTransferProgressPercent";
  @SerializedName(SERIALIZED_NAME_DATA_TRANSFER_PROGRESS_PERCENT)
  private Double dataTransferProgressPercent;

  public ResizeProgressMessage() {
  }

  public ResizeProgressMessage targetNodeType(String targetNodeType) {
    this.targetNodeType = targetNodeType;
    return this;
  }

  /**
   * Get targetNodeType
   * @return targetNodeType
   */
  @javax.annotation.Nullable
  public String getTargetNodeType() {
    return targetNodeType;
  }

  public void setTargetNodeType(String targetNodeType) {
    this.targetNodeType = targetNodeType;
  }


  public ResizeProgressMessage targetNumberOfNodes(Integer targetNumberOfNodes) {
    this.targetNumberOfNodes = targetNumberOfNodes;
    return this;
  }

  /**
   * Get targetNumberOfNodes
   * @return targetNumberOfNodes
   */
  @javax.annotation.Nullable
  public Integer getTargetNumberOfNodes() {
    return targetNumberOfNodes;
  }

  public void setTargetNumberOfNodes(Integer targetNumberOfNodes) {
    this.targetNumberOfNodes = targetNumberOfNodes;
  }


  public ResizeProgressMessage targetClusterType(String targetClusterType) {
    this.targetClusterType = targetClusterType;
    return this;
  }

  /**
   * Get targetClusterType
   * @return targetClusterType
   */
  @javax.annotation.Nullable
  public String getTargetClusterType() {
    return targetClusterType;
  }

  public void setTargetClusterType(String targetClusterType) {
    this.targetClusterType = targetClusterType;
  }


  public ResizeProgressMessage status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ResizeProgressMessage importTablesCompleted(List importTablesCompleted) {
    this.importTablesCompleted = importTablesCompleted;
    return this;
  }

  /**
   * Get importTablesCompleted
   * @return importTablesCompleted
   */
  @javax.annotation.Nullable
  public List getImportTablesCompleted() {
    return importTablesCompleted;
  }

  public void setImportTablesCompleted(List importTablesCompleted) {
    this.importTablesCompleted = importTablesCompleted;
  }


  public ResizeProgressMessage importTablesInProgress(List importTablesInProgress) {
    this.importTablesInProgress = importTablesInProgress;
    return this;
  }

  /**
   * Get importTablesInProgress
   * @return importTablesInProgress
   */
  @javax.annotation.Nullable
  public List getImportTablesInProgress() {
    return importTablesInProgress;
  }

  public void setImportTablesInProgress(List importTablesInProgress) {
    this.importTablesInProgress = importTablesInProgress;
  }


  public ResizeProgressMessage importTablesNotStarted(List importTablesNotStarted) {
    this.importTablesNotStarted = importTablesNotStarted;
    return this;
  }

  /**
   * Get importTablesNotStarted
   * @return importTablesNotStarted
   */
  @javax.annotation.Nullable
  public List getImportTablesNotStarted() {
    return importTablesNotStarted;
  }

  public void setImportTablesNotStarted(List importTablesNotStarted) {
    this.importTablesNotStarted = importTablesNotStarted;
  }


  public ResizeProgressMessage avgResizeRateInMegaBytesPerSecond(Double avgResizeRateInMegaBytesPerSecond) {
    this.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond;
    return this;
  }

  /**
   * Get avgResizeRateInMegaBytesPerSecond
   * @return avgResizeRateInMegaBytesPerSecond
   */
  @javax.annotation.Nullable
  public Double getAvgResizeRateInMegaBytesPerSecond() {
    return avgResizeRateInMegaBytesPerSecond;
  }

  public void setAvgResizeRateInMegaBytesPerSecond(Double avgResizeRateInMegaBytesPerSecond) {
    this.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond;
  }


  public ResizeProgressMessage totalResizeDataInMegaBytes(Integer totalResizeDataInMegaBytes) {
    this.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes;
    return this;
  }

  /**
   * Get totalResizeDataInMegaBytes
   * @return totalResizeDataInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getTotalResizeDataInMegaBytes() {
    return totalResizeDataInMegaBytes;
  }

  public void setTotalResizeDataInMegaBytes(Integer totalResizeDataInMegaBytes) {
    this.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes;
  }


  public ResizeProgressMessage progressInMegaBytes(Integer progressInMegaBytes) {
    this.progressInMegaBytes = progressInMegaBytes;
    return this;
  }

  /**
   * Get progressInMegaBytes
   * @return progressInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getProgressInMegaBytes() {
    return progressInMegaBytes;
  }

  public void setProgressInMegaBytes(Integer progressInMegaBytes) {
    this.progressInMegaBytes = progressInMegaBytes;
  }


  public ResizeProgressMessage elapsedTimeInSeconds(Integer elapsedTimeInSeconds) {
    this.elapsedTimeInSeconds = elapsedTimeInSeconds;
    return this;
  }

  /**
   * Get elapsedTimeInSeconds
   * @return elapsedTimeInSeconds
   */
  @javax.annotation.Nullable
  public Integer getElapsedTimeInSeconds() {
    return elapsedTimeInSeconds;
  }

  public void setElapsedTimeInSeconds(Integer elapsedTimeInSeconds) {
    this.elapsedTimeInSeconds = elapsedTimeInSeconds;
  }


  public ResizeProgressMessage estimatedTimeToCompletionInSeconds(Integer estimatedTimeToCompletionInSeconds) {
    this.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds;
    return this;
  }

  /**
   * Get estimatedTimeToCompletionInSeconds
   * @return estimatedTimeToCompletionInSeconds
   */
  @javax.annotation.Nullable
  public Integer getEstimatedTimeToCompletionInSeconds() {
    return estimatedTimeToCompletionInSeconds;
  }

  public void setEstimatedTimeToCompletionInSeconds(Integer estimatedTimeToCompletionInSeconds) {
    this.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds;
  }


  public ResizeProgressMessage resizeType(String resizeType) {
    this.resizeType = resizeType;
    return this;
  }

  /**
   * Get resizeType
   * @return resizeType
   */
  @javax.annotation.Nullable
  public String getResizeType() {
    return resizeType;
  }

  public void setResizeType(String resizeType) {
    this.resizeType = resizeType;
  }


  public ResizeProgressMessage message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ResizeProgressMessage targetEncryptionType(String targetEncryptionType) {
    this.targetEncryptionType = targetEncryptionType;
    return this;
  }

  /**
   * Get targetEncryptionType
   * @return targetEncryptionType
   */
  @javax.annotation.Nullable
  public String getTargetEncryptionType() {
    return targetEncryptionType;
  }

  public void setTargetEncryptionType(String targetEncryptionType) {
    this.targetEncryptionType = targetEncryptionType;
  }


  public ResizeProgressMessage dataTransferProgressPercent(Double dataTransferProgressPercent) {
    this.dataTransferProgressPercent = dataTransferProgressPercent;
    return this;
  }

  /**
   * Get dataTransferProgressPercent
   * @return dataTransferProgressPercent
   */
  @javax.annotation.Nullable
  public Double getDataTransferProgressPercent() {
    return dataTransferProgressPercent;
  }

  public void setDataTransferProgressPercent(Double dataTransferProgressPercent) {
    this.dataTransferProgressPercent = dataTransferProgressPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResizeProgressMessage resizeProgressMessage = (ResizeProgressMessage) o;
    return Objects.equals(this.targetNodeType, resizeProgressMessage.targetNodeType) &&
        Objects.equals(this.targetNumberOfNodes, resizeProgressMessage.targetNumberOfNodes) &&
        Objects.equals(this.targetClusterType, resizeProgressMessage.targetClusterType) &&
        Objects.equals(this.status, resizeProgressMessage.status) &&
        Objects.equals(this.importTablesCompleted, resizeProgressMessage.importTablesCompleted) &&
        Objects.equals(this.importTablesInProgress, resizeProgressMessage.importTablesInProgress) &&
        Objects.equals(this.importTablesNotStarted, resizeProgressMessage.importTablesNotStarted) &&
        Objects.equals(this.avgResizeRateInMegaBytesPerSecond, resizeProgressMessage.avgResizeRateInMegaBytesPerSecond) &&
        Objects.equals(this.totalResizeDataInMegaBytes, resizeProgressMessage.totalResizeDataInMegaBytes) &&
        Objects.equals(this.progressInMegaBytes, resizeProgressMessage.progressInMegaBytes) &&
        Objects.equals(this.elapsedTimeInSeconds, resizeProgressMessage.elapsedTimeInSeconds) &&
        Objects.equals(this.estimatedTimeToCompletionInSeconds, resizeProgressMessage.estimatedTimeToCompletionInSeconds) &&
        Objects.equals(this.resizeType, resizeProgressMessage.resizeType) &&
        Objects.equals(this.message, resizeProgressMessage.message) &&
        Objects.equals(this.targetEncryptionType, resizeProgressMessage.targetEncryptionType) &&
        Objects.equals(this.dataTransferProgressPercent, resizeProgressMessage.dataTransferProgressPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetNodeType, targetNumberOfNodes, targetClusterType, status, importTablesCompleted, importTablesInProgress, importTablesNotStarted, avgResizeRateInMegaBytesPerSecond, totalResizeDataInMegaBytes, progressInMegaBytes, elapsedTimeInSeconds, estimatedTimeToCompletionInSeconds, resizeType, message, targetEncryptionType, dataTransferProgressPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResizeProgressMessage {\n");
    sb.append("    targetNodeType: ").append(toIndentedString(targetNodeType)).append("\n");
    sb.append("    targetNumberOfNodes: ").append(toIndentedString(targetNumberOfNodes)).append("\n");
    sb.append("    targetClusterType: ").append(toIndentedString(targetClusterType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    importTablesCompleted: ").append(toIndentedString(importTablesCompleted)).append("\n");
    sb.append("    importTablesInProgress: ").append(toIndentedString(importTablesInProgress)).append("\n");
    sb.append("    importTablesNotStarted: ").append(toIndentedString(importTablesNotStarted)).append("\n");
    sb.append("    avgResizeRateInMegaBytesPerSecond: ").append(toIndentedString(avgResizeRateInMegaBytesPerSecond)).append("\n");
    sb.append("    totalResizeDataInMegaBytes: ").append(toIndentedString(totalResizeDataInMegaBytes)).append("\n");
    sb.append("    progressInMegaBytes: ").append(toIndentedString(progressInMegaBytes)).append("\n");
    sb.append("    elapsedTimeInSeconds: ").append(toIndentedString(elapsedTimeInSeconds)).append("\n");
    sb.append("    estimatedTimeToCompletionInSeconds: ").append(toIndentedString(estimatedTimeToCompletionInSeconds)).append("\n");
    sb.append("    resizeType: ").append(toIndentedString(resizeType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    targetEncryptionType: ").append(toIndentedString(targetEncryptionType)).append("\n");
    sb.append("    dataTransferProgressPercent: ").append(toIndentedString(dataTransferProgressPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TargetNodeType");
    openapiFields.add("TargetNumberOfNodes");
    openapiFields.add("TargetClusterType");
    openapiFields.add("Status");
    openapiFields.add("ImportTablesCompleted");
    openapiFields.add("ImportTablesInProgress");
    openapiFields.add("ImportTablesNotStarted");
    openapiFields.add("AvgResizeRateInMegaBytesPerSecond");
    openapiFields.add("TotalResizeDataInMegaBytes");
    openapiFields.add("ProgressInMegaBytes");
    openapiFields.add("ElapsedTimeInSeconds");
    openapiFields.add("EstimatedTimeToCompletionInSeconds");
    openapiFields.add("ResizeType");
    openapiFields.add("Message");
    openapiFields.add("TargetEncryptionType");
    openapiFields.add("DataTransferProgressPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResizeProgressMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResizeProgressMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResizeProgressMessage is not found in the empty JSON string", ResizeProgressMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResizeProgressMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResizeProgressMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TargetNodeType`
      if (jsonObj.get("TargetNodeType") != null && !jsonObj.get("TargetNodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetNodeType"));
      }
      // validate the optional field `TargetNumberOfNodes`
      if (jsonObj.get("TargetNumberOfNodes") != null && !jsonObj.get("TargetNumberOfNodes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TargetNumberOfNodes"));
      }
      // validate the optional field `TargetClusterType`
      if (jsonObj.get("TargetClusterType") != null && !jsonObj.get("TargetClusterType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetClusterType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `ImportTablesCompleted`
      if (jsonObj.get("ImportTablesCompleted") != null && !jsonObj.get("ImportTablesCompleted").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ImportTablesCompleted"));
      }
      // validate the optional field `ImportTablesInProgress`
      if (jsonObj.get("ImportTablesInProgress") != null && !jsonObj.get("ImportTablesInProgress").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ImportTablesInProgress"));
      }
      // validate the optional field `ImportTablesNotStarted`
      if (jsonObj.get("ImportTablesNotStarted") != null && !jsonObj.get("ImportTablesNotStarted").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ImportTablesNotStarted"));
      }
      // validate the optional field `AvgResizeRateInMegaBytesPerSecond`
      if (jsonObj.get("AvgResizeRateInMegaBytesPerSecond") != null && !jsonObj.get("AvgResizeRateInMegaBytesPerSecond").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("AvgResizeRateInMegaBytesPerSecond"));
      }
      // validate the optional field `TotalResizeDataInMegaBytes`
      if (jsonObj.get("TotalResizeDataInMegaBytes") != null && !jsonObj.get("TotalResizeDataInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalResizeDataInMegaBytes"));
      }
      // validate the optional field `ProgressInMegaBytes`
      if (jsonObj.get("ProgressInMegaBytes") != null && !jsonObj.get("ProgressInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgressInMegaBytes"));
      }
      // validate the optional field `ElapsedTimeInSeconds`
      if (jsonObj.get("ElapsedTimeInSeconds") != null && !jsonObj.get("ElapsedTimeInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ElapsedTimeInSeconds"));
      }
      // validate the optional field `EstimatedTimeToCompletionInSeconds`
      if (jsonObj.get("EstimatedTimeToCompletionInSeconds") != null && !jsonObj.get("EstimatedTimeToCompletionInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedTimeToCompletionInSeconds"));
      }
      // validate the optional field `ResizeType`
      if (jsonObj.get("ResizeType") != null && !jsonObj.get("ResizeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResizeType"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `TargetEncryptionType`
      if (jsonObj.get("TargetEncryptionType") != null && !jsonObj.get("TargetEncryptionType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetEncryptionType"));
      }
      // validate the optional field `DataTransferProgressPercent`
      if (jsonObj.get("DataTransferProgressPercent") != null && !jsonObj.get("DataTransferProgressPercent").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("DataTransferProgressPercent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResizeProgressMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResizeProgressMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResizeProgressMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResizeProgressMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ResizeProgressMessage>() {
           @Override
           public void write(JsonWriter out, ResizeProgressMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResizeProgressMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResizeProgressMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResizeProgressMessage
   * @throws IOException if the JSON string is invalid with respect to ResizeProgressMessage
   */
  public static ResizeProgressMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResizeProgressMessage.class);
  }

  /**
   * Convert an instance of ResizeProgressMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

