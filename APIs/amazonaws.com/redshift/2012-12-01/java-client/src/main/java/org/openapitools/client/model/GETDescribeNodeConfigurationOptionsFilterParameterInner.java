/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NodeConfigurationOptionsFilterName;
import org.openapitools.client.model.OperatorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GETDescribeNodeConfigurationOptionsFilterParameterInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GETDescribeNodeConfigurationOptionsFilterParameterInner {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NodeConfigurationOptionsFilterName name;

  public static final String SERIALIZED_NAME_OPERATOR = "Operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private OperatorType operator;

  public static final String SERIALIZED_NAME_VALUES = "Values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List values;

  public GETDescribeNodeConfigurationOptionsFilterParameterInner() {
  }

  public GETDescribeNodeConfigurationOptionsFilterParameterInner name(NodeConfigurationOptionsFilterName name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public NodeConfigurationOptionsFilterName getName() {
    return name;
  }

  public void setName(NodeConfigurationOptionsFilterName name) {
    this.name = name;
  }


  public GETDescribeNodeConfigurationOptionsFilterParameterInner operator(OperatorType operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public OperatorType getOperator() {
    return operator;
  }

  public void setOperator(OperatorType operator) {
    this.operator = operator;
  }


  public GETDescribeNodeConfigurationOptionsFilterParameterInner values(List values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List getValues() {
    return values;
  }

  public void setValues(List values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GETDescribeNodeConfigurationOptionsFilterParameterInner geTDescribeNodeConfigurationOptionsFilterParameterInner = (GETDescribeNodeConfigurationOptionsFilterParameterInner) o;
    return Objects.equals(this.name, geTDescribeNodeConfigurationOptionsFilterParameterInner.name) &&
        Objects.equals(this.operator, geTDescribeNodeConfigurationOptionsFilterParameterInner.operator) &&
        Objects.equals(this.values, geTDescribeNodeConfigurationOptionsFilterParameterInner.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, operator, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GETDescribeNodeConfigurationOptionsFilterParameterInner {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Operator");
    openapiFields.add("Values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GETDescribeNodeConfigurationOptionsFilterParameterInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GETDescribeNodeConfigurationOptionsFilterParameterInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GETDescribeNodeConfigurationOptionsFilterParameterInner is not found in the empty JSON string", GETDescribeNodeConfigurationOptionsFilterParameterInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GETDescribeNodeConfigurationOptionsFilterParameterInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GETDescribeNodeConfigurationOptionsFilterParameterInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        NodeConfigurationOptionsFilterName.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Operator`
      if (jsonObj.get("Operator") != null && !jsonObj.get("Operator").isJsonNull()) {
        OperatorType.validateJsonElement(jsonObj.get("Operator"));
      }
      // validate the optional field `Values`
      if (jsonObj.get("Values") != null && !jsonObj.get("Values").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Values"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GETDescribeNodeConfigurationOptionsFilterParameterInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GETDescribeNodeConfigurationOptionsFilterParameterInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GETDescribeNodeConfigurationOptionsFilterParameterInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GETDescribeNodeConfigurationOptionsFilterParameterInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GETDescribeNodeConfigurationOptionsFilterParameterInner>() {
           @Override
           public void write(JsonWriter out, GETDescribeNodeConfigurationOptionsFilterParameterInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GETDescribeNodeConfigurationOptionsFilterParameterInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GETDescribeNodeConfigurationOptionsFilterParameterInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GETDescribeNodeConfigurationOptionsFilterParameterInner
   * @throws IOException if the JSON string is invalid with respect to GETDescribeNodeConfigurationOptionsFilterParameterInner
   */
  public static GETDescribeNodeConfigurationOptionsFilterParameterInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GETDescribeNodeConfigurationOptionsFilterParameterInner.class);
  }

  /**
   * Convert an instance of GETDescribeNodeConfigurationOptionsFilterParameterInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

