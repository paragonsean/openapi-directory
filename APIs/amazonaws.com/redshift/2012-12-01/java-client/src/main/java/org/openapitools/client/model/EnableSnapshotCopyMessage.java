/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p/&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnableSnapshotCopyMessage {
  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_DESTINATION_REGION = "DestinationRegion";
  @SerializedName(SERIALIZED_NAME_DESTINATION_REGION)
  private String destinationRegion;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD = "RetentionPeriod";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD)
  private Integer retentionPeriod;

  public static final String SERIALIZED_NAME_SNAPSHOT_COPY_GRANT_NAME = "SnapshotCopyGrantName";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_COPY_GRANT_NAME)
  private String snapshotCopyGrantName;

  public static final String SERIALIZED_NAME_MANUAL_SNAPSHOT_RETENTION_PERIOD = "ManualSnapshotRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_MANUAL_SNAPSHOT_RETENTION_PERIOD)
  private Integer manualSnapshotRetentionPeriod;

  public EnableSnapshotCopyMessage() {
  }

  public EnableSnapshotCopyMessage clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nonnull
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public EnableSnapshotCopyMessage destinationRegion(String destinationRegion) {
    this.destinationRegion = destinationRegion;
    return this;
  }

  /**
   * Get destinationRegion
   * @return destinationRegion
   */
  @javax.annotation.Nonnull
  public String getDestinationRegion() {
    return destinationRegion;
  }

  public void setDestinationRegion(String destinationRegion) {
    this.destinationRegion = destinationRegion;
  }


  public EnableSnapshotCopyMessage retentionPeriod(Integer retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }

  /**
   * Get retentionPeriod
   * @return retentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getRetentionPeriod() {
    return retentionPeriod;
  }

  public void setRetentionPeriod(Integer retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
  }


  public EnableSnapshotCopyMessage snapshotCopyGrantName(String snapshotCopyGrantName) {
    this.snapshotCopyGrantName = snapshotCopyGrantName;
    return this;
  }

  /**
   * Get snapshotCopyGrantName
   * @return snapshotCopyGrantName
   */
  @javax.annotation.Nullable
  public String getSnapshotCopyGrantName() {
    return snapshotCopyGrantName;
  }

  public void setSnapshotCopyGrantName(String snapshotCopyGrantName) {
    this.snapshotCopyGrantName = snapshotCopyGrantName;
  }


  public EnableSnapshotCopyMessage manualSnapshotRetentionPeriod(Integer manualSnapshotRetentionPeriod) {
    this.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
    return this;
  }

  /**
   * Get manualSnapshotRetentionPeriod
   * @return manualSnapshotRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getManualSnapshotRetentionPeriod() {
    return manualSnapshotRetentionPeriod;
  }

  public void setManualSnapshotRetentionPeriod(Integer manualSnapshotRetentionPeriod) {
    this.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnableSnapshotCopyMessage enableSnapshotCopyMessage = (EnableSnapshotCopyMessage) o;
    return Objects.equals(this.clusterIdentifier, enableSnapshotCopyMessage.clusterIdentifier) &&
        Objects.equals(this.destinationRegion, enableSnapshotCopyMessage.destinationRegion) &&
        Objects.equals(this.retentionPeriod, enableSnapshotCopyMessage.retentionPeriod) &&
        Objects.equals(this.snapshotCopyGrantName, enableSnapshotCopyMessage.snapshotCopyGrantName) &&
        Objects.equals(this.manualSnapshotRetentionPeriod, enableSnapshotCopyMessage.manualSnapshotRetentionPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIdentifier, destinationRegion, retentionPeriod, snapshotCopyGrantName, manualSnapshotRetentionPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnableSnapshotCopyMessage {\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    destinationRegion: ").append(toIndentedString(destinationRegion)).append("\n");
    sb.append("    retentionPeriod: ").append(toIndentedString(retentionPeriod)).append("\n");
    sb.append("    snapshotCopyGrantName: ").append(toIndentedString(snapshotCopyGrantName)).append("\n");
    sb.append("    manualSnapshotRetentionPeriod: ").append(toIndentedString(manualSnapshotRetentionPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("DestinationRegion");
    openapiFields.add("RetentionPeriod");
    openapiFields.add("SnapshotCopyGrantName");
    openapiFields.add("ManualSnapshotRetentionPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClusterIdentifier");
    openapiRequiredFields.add("DestinationRegion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnableSnapshotCopyMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnableSnapshotCopyMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnableSnapshotCopyMessage is not found in the empty JSON string", EnableSnapshotCopyMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnableSnapshotCopyMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnableSnapshotCopyMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnableSnapshotCopyMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ClusterIdentifier`
      String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      // validate the required field `DestinationRegion`
      String.validateJsonElement(jsonObj.get("DestinationRegion"));
      // validate the optional field `RetentionPeriod`
      if (jsonObj.get("RetentionPeriod") != null && !jsonObj.get("RetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RetentionPeriod"));
      }
      // validate the optional field `SnapshotCopyGrantName`
      if (jsonObj.get("SnapshotCopyGrantName") != null && !jsonObj.get("SnapshotCopyGrantName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotCopyGrantName"));
      }
      // validate the optional field `ManualSnapshotRetentionPeriod`
      if (jsonObj.get("ManualSnapshotRetentionPeriod") != null && !jsonObj.get("ManualSnapshotRetentionPeriod").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ManualSnapshotRetentionPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnableSnapshotCopyMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnableSnapshotCopyMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnableSnapshotCopyMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnableSnapshotCopyMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<EnableSnapshotCopyMessage>() {
           @Override
           public void write(JsonWriter out, EnableSnapshotCopyMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnableSnapshotCopyMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnableSnapshotCopyMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnableSnapshotCopyMessage
   * @throws IOException if the JSON string is invalid with respect to EnableSnapshotCopyMessage
   */
  public static EnableSnapshotCopyMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnableSnapshotCopyMessage.class);
  }

  /**
   * Convert an instance of EnableSnapshotCopyMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

