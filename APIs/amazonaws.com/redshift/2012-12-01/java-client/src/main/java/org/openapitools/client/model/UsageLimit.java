/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UsageLimitBreachAction;
import org.openapitools.client.model.UsageLimitFeatureType;
import org.openapitools.client.model.UsageLimitLimitType;
import org.openapitools.client.model.UsageLimitPeriod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a usage limit object for a cluster. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageLimit {
  public static final String SERIALIZED_NAME_USAGE_LIMIT_ID = "UsageLimitId";
  @SerializedName(SERIALIZED_NAME_USAGE_LIMIT_ID)
  private String usageLimitId;

  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_FEATURE_TYPE = "FeatureType";
  @SerializedName(SERIALIZED_NAME_FEATURE_TYPE)
  private UsageLimitFeatureType featureType;

  public static final String SERIALIZED_NAME_LIMIT_TYPE = "LimitType";
  @SerializedName(SERIALIZED_NAME_LIMIT_TYPE)
  private UsageLimitLimitType limitType;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private UsageLimitPeriod period;

  public static final String SERIALIZED_NAME_BREACH_ACTION = "BreachAction";
  @SerializedName(SERIALIZED_NAME_BREACH_ACTION)
  private UsageLimitBreachAction breachAction;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public UsageLimit() {
  }

  public UsageLimit usageLimitId(String usageLimitId) {
    this.usageLimitId = usageLimitId;
    return this;
  }

  /**
   * Get usageLimitId
   * @return usageLimitId
   */
  @javax.annotation.Nullable
  public String getUsageLimitId() {
    return usageLimitId;
  }

  public void setUsageLimitId(String usageLimitId) {
    this.usageLimitId = usageLimitId;
  }


  public UsageLimit clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nullable
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public UsageLimit featureType(UsageLimitFeatureType featureType) {
    this.featureType = featureType;
    return this;
  }

  /**
   * Get featureType
   * @return featureType
   */
  @javax.annotation.Nullable
  public UsageLimitFeatureType getFeatureType() {
    return featureType;
  }

  public void setFeatureType(UsageLimitFeatureType featureType) {
    this.featureType = featureType;
  }


  public UsageLimit limitType(UsageLimitLimitType limitType) {
    this.limitType = limitType;
    return this;
  }

  /**
   * Get limitType
   * @return limitType
   */
  @javax.annotation.Nullable
  public UsageLimitLimitType getLimitType() {
    return limitType;
  }

  public void setLimitType(UsageLimitLimitType limitType) {
    this.limitType = limitType;
  }


  public UsageLimit amount(Integer amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }

  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public UsageLimit period(UsageLimitPeriod period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public UsageLimitPeriod getPeriod() {
    return period;
  }

  public void setPeriod(UsageLimitPeriod period) {
    this.period = period;
  }


  public UsageLimit breachAction(UsageLimitBreachAction breachAction) {
    this.breachAction = breachAction;
    return this;
  }

  /**
   * Get breachAction
   * @return breachAction
   */
  @javax.annotation.Nullable
  public UsageLimitBreachAction getBreachAction() {
    return breachAction;
  }

  public void setBreachAction(UsageLimitBreachAction breachAction) {
    this.breachAction = breachAction;
  }


  public UsageLimit tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageLimit usageLimit = (UsageLimit) o;
    return Objects.equals(this.usageLimitId, usageLimit.usageLimitId) &&
        Objects.equals(this.clusterIdentifier, usageLimit.clusterIdentifier) &&
        Objects.equals(this.featureType, usageLimit.featureType) &&
        Objects.equals(this.limitType, usageLimit.limitType) &&
        Objects.equals(this.amount, usageLimit.amount) &&
        Objects.equals(this.period, usageLimit.period) &&
        Objects.equals(this.breachAction, usageLimit.breachAction) &&
        Objects.equals(this.tags, usageLimit.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usageLimitId, clusterIdentifier, featureType, limitType, amount, period, breachAction, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageLimit {\n");
    sb.append("    usageLimitId: ").append(toIndentedString(usageLimitId)).append("\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    featureType: ").append(toIndentedString(featureType)).append("\n");
    sb.append("    limitType: ").append(toIndentedString(limitType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    breachAction: ").append(toIndentedString(breachAction)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UsageLimitId");
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("FeatureType");
    openapiFields.add("LimitType");
    openapiFields.add("Amount");
    openapiFields.add("Period");
    openapiFields.add("BreachAction");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageLimit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageLimit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageLimit is not found in the empty JSON string", UsageLimit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageLimit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageLimit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `UsageLimitId`
      if (jsonObj.get("UsageLimitId") != null && !jsonObj.get("UsageLimitId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UsageLimitId"));
      }
      // validate the optional field `ClusterIdentifier`
      if (jsonObj.get("ClusterIdentifier") != null && !jsonObj.get("ClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      }
      // validate the optional field `FeatureType`
      if (jsonObj.get("FeatureType") != null && !jsonObj.get("FeatureType").isJsonNull()) {
        UsageLimitFeatureType.validateJsonElement(jsonObj.get("FeatureType"));
      }
      // validate the optional field `LimitType`
      if (jsonObj.get("LimitType") != null && !jsonObj.get("LimitType").isJsonNull()) {
        UsageLimitLimitType.validateJsonElement(jsonObj.get("LimitType"));
      }
      // validate the optional field `Amount`
      if (jsonObj.get("Amount") != null && !jsonObj.get("Amount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Amount"));
      }
      // validate the optional field `Period`
      if (jsonObj.get("Period") != null && !jsonObj.get("Period").isJsonNull()) {
        UsageLimitPeriod.validateJsonElement(jsonObj.get("Period"));
      }
      // validate the optional field `BreachAction`
      if (jsonObj.get("BreachAction") != null && !jsonObj.get("BreachAction").isJsonNull()) {
        UsageLimitBreachAction.validateJsonElement(jsonObj.get("BreachAction"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageLimit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageLimit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageLimit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageLimit.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageLimit>() {
           @Override
           public void write(JsonWriter out, UsageLimit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageLimit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageLimit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageLimit
   * @throws IOException if the JSON string is invalid with respect to UsageLimit
   */
  public static UsageLimit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageLimit.class);
  }

  /**
   * Convert an instance of UsageLimit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

