/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReservedNodeOfferingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReservedNodeOfferingListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservedNodeOfferingListInner {
  public static final String SERIALIZED_NAME_RESERVED_NODE_OFFERING_ID = "ReservedNodeOfferingId";
  @SerializedName(SERIALIZED_NAME_RESERVED_NODE_OFFERING_ID)
  private String reservedNodeOfferingId;

  public static final String SERIALIZED_NAME_NODE_TYPE = "NodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private String nodeType;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "FixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Double fixedPrice;

  public static final String SERIALIZED_NAME_USAGE_PRICE = "UsagePrice";
  @SerializedName(SERIALIZED_NAME_USAGE_PRICE)
  private Double usagePrice;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_OFFERING_TYPE = "OfferingType";
  @SerializedName(SERIALIZED_NAME_OFFERING_TYPE)
  private String offeringType;

  public static final String SERIALIZED_NAME_RECURRING_CHARGES = "RecurringCharges";
  @SerializedName(SERIALIZED_NAME_RECURRING_CHARGES)
  private List recurringCharges;

  public static final String SERIALIZED_NAME_RESERVED_NODE_OFFERING_TYPE = "ReservedNodeOfferingType";
  @SerializedName(SERIALIZED_NAME_RESERVED_NODE_OFFERING_TYPE)
  private ReservedNodeOfferingType reservedNodeOfferingType;

  public ReservedNodeOfferingListInner() {
  }

  public ReservedNodeOfferingListInner reservedNodeOfferingId(String reservedNodeOfferingId) {
    this.reservedNodeOfferingId = reservedNodeOfferingId;
    return this;
  }

  /**
   * Get reservedNodeOfferingId
   * @return reservedNodeOfferingId
   */
  @javax.annotation.Nullable
  public String getReservedNodeOfferingId() {
    return reservedNodeOfferingId;
  }

  public void setReservedNodeOfferingId(String reservedNodeOfferingId) {
    this.reservedNodeOfferingId = reservedNodeOfferingId;
  }


  public ReservedNodeOfferingListInner nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  /**
   * Get nodeType
   * @return nodeType
   */
  @javax.annotation.Nullable
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }


  public ReservedNodeOfferingListInner duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public ReservedNodeOfferingListInner fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public ReservedNodeOfferingListInner usagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
    return this;
  }

  /**
   * Get usagePrice
   * @return usagePrice
   */
  @javax.annotation.Nullable
  public Double getUsagePrice() {
    return usagePrice;
  }

  public void setUsagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
  }


  public ReservedNodeOfferingListInner currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ReservedNodeOfferingListInner offeringType(String offeringType) {
    this.offeringType = offeringType;
    return this;
  }

  /**
   * Get offeringType
   * @return offeringType
   */
  @javax.annotation.Nullable
  public String getOfferingType() {
    return offeringType;
  }

  public void setOfferingType(String offeringType) {
    this.offeringType = offeringType;
  }


  public ReservedNodeOfferingListInner recurringCharges(List recurringCharges) {
    this.recurringCharges = recurringCharges;
    return this;
  }

  /**
   * Get recurringCharges
   * @return recurringCharges
   */
  @javax.annotation.Nullable
  public List getRecurringCharges() {
    return recurringCharges;
  }

  public void setRecurringCharges(List recurringCharges) {
    this.recurringCharges = recurringCharges;
  }


  public ReservedNodeOfferingListInner reservedNodeOfferingType(ReservedNodeOfferingType reservedNodeOfferingType) {
    this.reservedNodeOfferingType = reservedNodeOfferingType;
    return this;
  }

  /**
   * Get reservedNodeOfferingType
   * @return reservedNodeOfferingType
   */
  @javax.annotation.Nullable
  public ReservedNodeOfferingType getReservedNodeOfferingType() {
    return reservedNodeOfferingType;
  }

  public void setReservedNodeOfferingType(ReservedNodeOfferingType reservedNodeOfferingType) {
    this.reservedNodeOfferingType = reservedNodeOfferingType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservedNodeOfferingListInner reservedNodeOfferingListInner = (ReservedNodeOfferingListInner) o;
    return Objects.equals(this.reservedNodeOfferingId, reservedNodeOfferingListInner.reservedNodeOfferingId) &&
        Objects.equals(this.nodeType, reservedNodeOfferingListInner.nodeType) &&
        Objects.equals(this.duration, reservedNodeOfferingListInner.duration) &&
        Objects.equals(this.fixedPrice, reservedNodeOfferingListInner.fixedPrice) &&
        Objects.equals(this.usagePrice, reservedNodeOfferingListInner.usagePrice) &&
        Objects.equals(this.currencyCode, reservedNodeOfferingListInner.currencyCode) &&
        Objects.equals(this.offeringType, reservedNodeOfferingListInner.offeringType) &&
        Objects.equals(this.recurringCharges, reservedNodeOfferingListInner.recurringCharges) &&
        Objects.equals(this.reservedNodeOfferingType, reservedNodeOfferingListInner.reservedNodeOfferingType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservedNodeOfferingId, nodeType, duration, fixedPrice, usagePrice, currencyCode, offeringType, recurringCharges, reservedNodeOfferingType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservedNodeOfferingListInner {\n");
    sb.append("    reservedNodeOfferingId: ").append(toIndentedString(reservedNodeOfferingId)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    usagePrice: ").append(toIndentedString(usagePrice)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    offeringType: ").append(toIndentedString(offeringType)).append("\n");
    sb.append("    recurringCharges: ").append(toIndentedString(recurringCharges)).append("\n");
    sb.append("    reservedNodeOfferingType: ").append(toIndentedString(reservedNodeOfferingType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReservedNodeOfferingId");
    openapiFields.add("NodeType");
    openapiFields.add("Duration");
    openapiFields.add("FixedPrice");
    openapiFields.add("UsagePrice");
    openapiFields.add("CurrencyCode");
    openapiFields.add("OfferingType");
    openapiFields.add("RecurringCharges");
    openapiFields.add("ReservedNodeOfferingType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservedNodeOfferingListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservedNodeOfferingListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservedNodeOfferingListInner is not found in the empty JSON string", ReservedNodeOfferingListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservedNodeOfferingListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservedNodeOfferingListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReservedNodeOfferingId`
      if (jsonObj.get("ReservedNodeOfferingId") != null && !jsonObj.get("ReservedNodeOfferingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedNodeOfferingId"));
      }
      // validate the optional field `NodeType`
      if (jsonObj.get("NodeType") != null && !jsonObj.get("NodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeType"));
      }
      // validate the optional field `Duration`
      if (jsonObj.get("Duration") != null && !jsonObj.get("Duration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Duration"));
      }
      // validate the optional field `FixedPrice`
      if (jsonObj.get("FixedPrice") != null && !jsonObj.get("FixedPrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("FixedPrice"));
      }
      // validate the optional field `UsagePrice`
      if (jsonObj.get("UsagePrice") != null && !jsonObj.get("UsagePrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("UsagePrice"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `OfferingType`
      if (jsonObj.get("OfferingType") != null && !jsonObj.get("OfferingType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OfferingType"));
      }
      // validate the optional field `RecurringCharges`
      if (jsonObj.get("RecurringCharges") != null && !jsonObj.get("RecurringCharges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RecurringCharges"));
      }
      // validate the optional field `ReservedNodeOfferingType`
      if (jsonObj.get("ReservedNodeOfferingType") != null && !jsonObj.get("ReservedNodeOfferingType").isJsonNull()) {
        ReservedNodeOfferingType.validateJsonElement(jsonObj.get("ReservedNodeOfferingType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservedNodeOfferingListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservedNodeOfferingListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservedNodeOfferingListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservedNodeOfferingListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservedNodeOfferingListInner>() {
           @Override
           public void write(JsonWriter out, ReservedNodeOfferingListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservedNodeOfferingListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservedNodeOfferingListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservedNodeOfferingListInner
   * @throws IOException if the JSON string is invalid with respect to ReservedNodeOfferingListInner
   */
  public static ReservedNodeOfferingListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservedNodeOfferingListInner.class);
  }

  /**
   * Convert an instance of ReservedNodeOfferingListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

