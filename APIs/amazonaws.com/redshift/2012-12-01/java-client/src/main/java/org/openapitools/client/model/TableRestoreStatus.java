/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TableRestoreStatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the status of a &lt;a&gt;RestoreTableFromClusterSnapshot&lt;/a&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableRestoreStatus {
  public static final String SERIALIZED_NAME_TABLE_RESTORE_REQUEST_ID = "TableRestoreRequestId";
  @SerializedName(SERIALIZED_NAME_TABLE_RESTORE_REQUEST_ID)
  private String tableRestoreRequestId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TableRestoreStatusType status;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_REQUEST_TIME = "RequestTime";
  @SerializedName(SERIALIZED_NAME_REQUEST_TIME)
  private OffsetDateTime requestTime;

  public static final String SERIALIZED_NAME_PROGRESS_IN_MEGA_BYTES = "ProgressInMegaBytes";
  @SerializedName(SERIALIZED_NAME_PROGRESS_IN_MEGA_BYTES)
  private Integer progressInMegaBytes;

  public static final String SERIALIZED_NAME_TOTAL_DATA_IN_MEGA_BYTES = "TotalDataInMegaBytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_DATA_IN_MEGA_BYTES)
  private Integer totalDataInMegaBytes;

  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_SNAPSHOT_IDENTIFIER = "SnapshotIdentifier";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_IDENTIFIER)
  private String snapshotIdentifier;

  public static final String SERIALIZED_NAME_SOURCE_DATABASE_NAME = "SourceDatabaseName";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATABASE_NAME)
  private String sourceDatabaseName;

  public static final String SERIALIZED_NAME_SOURCE_SCHEMA_NAME = "SourceSchemaName";
  @SerializedName(SERIALIZED_NAME_SOURCE_SCHEMA_NAME)
  private String sourceSchemaName;

  public static final String SERIALIZED_NAME_SOURCE_TABLE_NAME = "SourceTableName";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE_NAME)
  private String sourceTableName;

  public static final String SERIALIZED_NAME_TARGET_DATABASE_NAME = "TargetDatabaseName";
  @SerializedName(SERIALIZED_NAME_TARGET_DATABASE_NAME)
  private String targetDatabaseName;

  public static final String SERIALIZED_NAME_TARGET_SCHEMA_NAME = "TargetSchemaName";
  @SerializedName(SERIALIZED_NAME_TARGET_SCHEMA_NAME)
  private String targetSchemaName;

  public static final String SERIALIZED_NAME_NEW_TABLE_NAME = "NewTableName";
  @SerializedName(SERIALIZED_NAME_NEW_TABLE_NAME)
  private String newTableName;

  public TableRestoreStatus() {
  }

  public TableRestoreStatus tableRestoreRequestId(String tableRestoreRequestId) {
    this.tableRestoreRequestId = tableRestoreRequestId;
    return this;
  }

  /**
   * Get tableRestoreRequestId
   * @return tableRestoreRequestId
   */
  @javax.annotation.Nullable
  public String getTableRestoreRequestId() {
    return tableRestoreRequestId;
  }

  public void setTableRestoreRequestId(String tableRestoreRequestId) {
    this.tableRestoreRequestId = tableRestoreRequestId;
  }


  public TableRestoreStatus status(TableRestoreStatusType status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public TableRestoreStatusType getStatus() {
    return status;
  }

  public void setStatus(TableRestoreStatusType status) {
    this.status = status;
  }


  public TableRestoreStatus message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public TableRestoreStatus requestTime(OffsetDateTime requestTime) {
    this.requestTime = requestTime;
    return this;
  }

  /**
   * Get requestTime
   * @return requestTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRequestTime() {
    return requestTime;
  }

  public void setRequestTime(OffsetDateTime requestTime) {
    this.requestTime = requestTime;
  }


  public TableRestoreStatus progressInMegaBytes(Integer progressInMegaBytes) {
    this.progressInMegaBytes = progressInMegaBytes;
    return this;
  }

  /**
   * Get progressInMegaBytes
   * @return progressInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getProgressInMegaBytes() {
    return progressInMegaBytes;
  }

  public void setProgressInMegaBytes(Integer progressInMegaBytes) {
    this.progressInMegaBytes = progressInMegaBytes;
  }


  public TableRestoreStatus totalDataInMegaBytes(Integer totalDataInMegaBytes) {
    this.totalDataInMegaBytes = totalDataInMegaBytes;
    return this;
  }

  /**
   * Get totalDataInMegaBytes
   * @return totalDataInMegaBytes
   */
  @javax.annotation.Nullable
  public Integer getTotalDataInMegaBytes() {
    return totalDataInMegaBytes;
  }

  public void setTotalDataInMegaBytes(Integer totalDataInMegaBytes) {
    this.totalDataInMegaBytes = totalDataInMegaBytes;
  }


  public TableRestoreStatus clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nullable
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public TableRestoreStatus snapshotIdentifier(String snapshotIdentifier) {
    this.snapshotIdentifier = snapshotIdentifier;
    return this;
  }

  /**
   * Get snapshotIdentifier
   * @return snapshotIdentifier
   */
  @javax.annotation.Nullable
  public String getSnapshotIdentifier() {
    return snapshotIdentifier;
  }

  public void setSnapshotIdentifier(String snapshotIdentifier) {
    this.snapshotIdentifier = snapshotIdentifier;
  }


  public TableRestoreStatus sourceDatabaseName(String sourceDatabaseName) {
    this.sourceDatabaseName = sourceDatabaseName;
    return this;
  }

  /**
   * Get sourceDatabaseName
   * @return sourceDatabaseName
   */
  @javax.annotation.Nullable
  public String getSourceDatabaseName() {
    return sourceDatabaseName;
  }

  public void setSourceDatabaseName(String sourceDatabaseName) {
    this.sourceDatabaseName = sourceDatabaseName;
  }


  public TableRestoreStatus sourceSchemaName(String sourceSchemaName) {
    this.sourceSchemaName = sourceSchemaName;
    return this;
  }

  /**
   * Get sourceSchemaName
   * @return sourceSchemaName
   */
  @javax.annotation.Nullable
  public String getSourceSchemaName() {
    return sourceSchemaName;
  }

  public void setSourceSchemaName(String sourceSchemaName) {
    this.sourceSchemaName = sourceSchemaName;
  }


  public TableRestoreStatus sourceTableName(String sourceTableName) {
    this.sourceTableName = sourceTableName;
    return this;
  }

  /**
   * Get sourceTableName
   * @return sourceTableName
   */
  @javax.annotation.Nullable
  public String getSourceTableName() {
    return sourceTableName;
  }

  public void setSourceTableName(String sourceTableName) {
    this.sourceTableName = sourceTableName;
  }


  public TableRestoreStatus targetDatabaseName(String targetDatabaseName) {
    this.targetDatabaseName = targetDatabaseName;
    return this;
  }

  /**
   * Get targetDatabaseName
   * @return targetDatabaseName
   */
  @javax.annotation.Nullable
  public String getTargetDatabaseName() {
    return targetDatabaseName;
  }

  public void setTargetDatabaseName(String targetDatabaseName) {
    this.targetDatabaseName = targetDatabaseName;
  }


  public TableRestoreStatus targetSchemaName(String targetSchemaName) {
    this.targetSchemaName = targetSchemaName;
    return this;
  }

  /**
   * Get targetSchemaName
   * @return targetSchemaName
   */
  @javax.annotation.Nullable
  public String getTargetSchemaName() {
    return targetSchemaName;
  }

  public void setTargetSchemaName(String targetSchemaName) {
    this.targetSchemaName = targetSchemaName;
  }


  public TableRestoreStatus newTableName(String newTableName) {
    this.newTableName = newTableName;
    return this;
  }

  /**
   * Get newTableName
   * @return newTableName
   */
  @javax.annotation.Nullable
  public String getNewTableName() {
    return newTableName;
  }

  public void setNewTableName(String newTableName) {
    this.newTableName = newTableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableRestoreStatus tableRestoreStatus = (TableRestoreStatus) o;
    return Objects.equals(this.tableRestoreRequestId, tableRestoreStatus.tableRestoreRequestId) &&
        Objects.equals(this.status, tableRestoreStatus.status) &&
        Objects.equals(this.message, tableRestoreStatus.message) &&
        Objects.equals(this.requestTime, tableRestoreStatus.requestTime) &&
        Objects.equals(this.progressInMegaBytes, tableRestoreStatus.progressInMegaBytes) &&
        Objects.equals(this.totalDataInMegaBytes, tableRestoreStatus.totalDataInMegaBytes) &&
        Objects.equals(this.clusterIdentifier, tableRestoreStatus.clusterIdentifier) &&
        Objects.equals(this.snapshotIdentifier, tableRestoreStatus.snapshotIdentifier) &&
        Objects.equals(this.sourceDatabaseName, tableRestoreStatus.sourceDatabaseName) &&
        Objects.equals(this.sourceSchemaName, tableRestoreStatus.sourceSchemaName) &&
        Objects.equals(this.sourceTableName, tableRestoreStatus.sourceTableName) &&
        Objects.equals(this.targetDatabaseName, tableRestoreStatus.targetDatabaseName) &&
        Objects.equals(this.targetSchemaName, tableRestoreStatus.targetSchemaName) &&
        Objects.equals(this.newTableName, tableRestoreStatus.newTableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableRestoreRequestId, status, message, requestTime, progressInMegaBytes, totalDataInMegaBytes, clusterIdentifier, snapshotIdentifier, sourceDatabaseName, sourceSchemaName, sourceTableName, targetDatabaseName, targetSchemaName, newTableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableRestoreStatus {\n");
    sb.append("    tableRestoreRequestId: ").append(toIndentedString(tableRestoreRequestId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    requestTime: ").append(toIndentedString(requestTime)).append("\n");
    sb.append("    progressInMegaBytes: ").append(toIndentedString(progressInMegaBytes)).append("\n");
    sb.append("    totalDataInMegaBytes: ").append(toIndentedString(totalDataInMegaBytes)).append("\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    snapshotIdentifier: ").append(toIndentedString(snapshotIdentifier)).append("\n");
    sb.append("    sourceDatabaseName: ").append(toIndentedString(sourceDatabaseName)).append("\n");
    sb.append("    sourceSchemaName: ").append(toIndentedString(sourceSchemaName)).append("\n");
    sb.append("    sourceTableName: ").append(toIndentedString(sourceTableName)).append("\n");
    sb.append("    targetDatabaseName: ").append(toIndentedString(targetDatabaseName)).append("\n");
    sb.append("    targetSchemaName: ").append(toIndentedString(targetSchemaName)).append("\n");
    sb.append("    newTableName: ").append(toIndentedString(newTableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableRestoreRequestId");
    openapiFields.add("Status");
    openapiFields.add("Message");
    openapiFields.add("RequestTime");
    openapiFields.add("ProgressInMegaBytes");
    openapiFields.add("TotalDataInMegaBytes");
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("SnapshotIdentifier");
    openapiFields.add("SourceDatabaseName");
    openapiFields.add("SourceSchemaName");
    openapiFields.add("SourceTableName");
    openapiFields.add("TargetDatabaseName");
    openapiFields.add("TargetSchemaName");
    openapiFields.add("NewTableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableRestoreStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableRestoreStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableRestoreStatus is not found in the empty JSON string", TableRestoreStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableRestoreStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableRestoreStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TableRestoreRequestId`
      if (jsonObj.get("TableRestoreRequestId") != null && !jsonObj.get("TableRestoreRequestId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableRestoreRequestId"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        TableRestoreStatusType.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `RequestTime`
      if (jsonObj.get("RequestTime") != null && !jsonObj.get("RequestTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("RequestTime"));
      }
      // validate the optional field `ProgressInMegaBytes`
      if (jsonObj.get("ProgressInMegaBytes") != null && !jsonObj.get("ProgressInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ProgressInMegaBytes"));
      }
      // validate the optional field `TotalDataInMegaBytes`
      if (jsonObj.get("TotalDataInMegaBytes") != null && !jsonObj.get("TotalDataInMegaBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalDataInMegaBytes"));
      }
      // validate the optional field `ClusterIdentifier`
      if (jsonObj.get("ClusterIdentifier") != null && !jsonObj.get("ClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      }
      // validate the optional field `SnapshotIdentifier`
      if (jsonObj.get("SnapshotIdentifier") != null && !jsonObj.get("SnapshotIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotIdentifier"));
      }
      // validate the optional field `SourceDatabaseName`
      if (jsonObj.get("SourceDatabaseName") != null && !jsonObj.get("SourceDatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceDatabaseName"));
      }
      // validate the optional field `SourceSchemaName`
      if (jsonObj.get("SourceSchemaName") != null && !jsonObj.get("SourceSchemaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceSchemaName"));
      }
      // validate the optional field `SourceTableName`
      if (jsonObj.get("SourceTableName") != null && !jsonObj.get("SourceTableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceTableName"));
      }
      // validate the optional field `TargetDatabaseName`
      if (jsonObj.get("TargetDatabaseName") != null && !jsonObj.get("TargetDatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetDatabaseName"));
      }
      // validate the optional field `TargetSchemaName`
      if (jsonObj.get("TargetSchemaName") != null && !jsonObj.get("TargetSchemaName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetSchemaName"));
      }
      // validate the optional field `NewTableName`
      if (jsonObj.get("NewTableName") != null && !jsonObj.get("NewTableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NewTableName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableRestoreStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableRestoreStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableRestoreStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableRestoreStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<TableRestoreStatus>() {
           @Override
           public void write(JsonWriter out, TableRestoreStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableRestoreStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableRestoreStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableRestoreStatus
   * @throws IOException if the JSON string is invalid with respect to TableRestoreStatus
   */
  public static TableRestoreStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableRestoreStatus.class);
  }

  /**
   * Convert an instance of TableRestoreStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

