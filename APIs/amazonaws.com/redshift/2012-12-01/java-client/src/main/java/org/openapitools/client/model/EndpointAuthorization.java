/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an endpoint authorization for authorizing Redshift-managed VPC endpoint access to a cluster across Amazon Web Services accounts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:09.549948-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointAuthorization {
  public static final String SERIALIZED_NAME_GRANTOR = "Grantor";
  @SerializedName(SERIALIZED_NAME_GRANTOR)
  private String grantor;

  public static final String SERIALIZED_NAME_GRANTEE = "Grantee";
  @SerializedName(SERIALIZED_NAME_GRANTEE)
  private String grantee;

  public static final String SERIALIZED_NAME_CLUSTER_IDENTIFIER = "ClusterIdentifier";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IDENTIFIER)
  private String clusterIdentifier;

  public static final String SERIALIZED_NAME_AUTHORIZE_TIME = "AuthorizeTime";
  @SerializedName(SERIALIZED_NAME_AUTHORIZE_TIME)
  private OffsetDateTime authorizeTime;

  public static final String SERIALIZED_NAME_CLUSTER_STATUS = "ClusterStatus";
  @SerializedName(SERIALIZED_NAME_CLUSTER_STATUS)
  private String clusterStatus;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AuthorizationStatus status;

  public static final String SERIALIZED_NAME_ALLOWED_ALL_V_P_CS = "AllowedAllVPCs";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ALL_V_P_CS)
  private Boolean allowedAllVPCs;

  public static final String SERIALIZED_NAME_ALLOWED_V_P_CS = "AllowedVPCs";
  @SerializedName(SERIALIZED_NAME_ALLOWED_V_P_CS)
  private List allowedVPCs;

  public static final String SERIALIZED_NAME_ENDPOINT_COUNT = "EndpointCount";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_COUNT)
  private Integer endpointCount;

  public EndpointAuthorization() {
  }

  public EndpointAuthorization grantor(String grantor) {
    this.grantor = grantor;
    return this;
  }

  /**
   * Get grantor
   * @return grantor
   */
  @javax.annotation.Nullable
  public String getGrantor() {
    return grantor;
  }

  public void setGrantor(String grantor) {
    this.grantor = grantor;
  }


  public EndpointAuthorization grantee(String grantee) {
    this.grantee = grantee;
    return this;
  }

  /**
   * Get grantee
   * @return grantee
   */
  @javax.annotation.Nullable
  public String getGrantee() {
    return grantee;
  }

  public void setGrantee(String grantee) {
    this.grantee = grantee;
  }


  public EndpointAuthorization clusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
    return this;
  }

  /**
   * Get clusterIdentifier
   * @return clusterIdentifier
   */
  @javax.annotation.Nullable
  public String getClusterIdentifier() {
    return clusterIdentifier;
  }

  public void setClusterIdentifier(String clusterIdentifier) {
    this.clusterIdentifier = clusterIdentifier;
  }


  public EndpointAuthorization authorizeTime(OffsetDateTime authorizeTime) {
    this.authorizeTime = authorizeTime;
    return this;
  }

  /**
   * Get authorizeTime
   * @return authorizeTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAuthorizeTime() {
    return authorizeTime;
  }

  public void setAuthorizeTime(OffsetDateTime authorizeTime) {
    this.authorizeTime = authorizeTime;
  }


  public EndpointAuthorization clusterStatus(String clusterStatus) {
    this.clusterStatus = clusterStatus;
    return this;
  }

  /**
   * Get clusterStatus
   * @return clusterStatus
   */
  @javax.annotation.Nullable
  public String getClusterStatus() {
    return clusterStatus;
  }

  public void setClusterStatus(String clusterStatus) {
    this.clusterStatus = clusterStatus;
  }


  public EndpointAuthorization status(AuthorizationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public AuthorizationStatus getStatus() {
    return status;
  }

  public void setStatus(AuthorizationStatus status) {
    this.status = status;
  }


  public EndpointAuthorization allowedAllVPCs(Boolean allowedAllVPCs) {
    this.allowedAllVPCs = allowedAllVPCs;
    return this;
  }

  /**
   * Get allowedAllVPCs
   * @return allowedAllVPCs
   */
  @javax.annotation.Nullable
  public Boolean getAllowedAllVPCs() {
    return allowedAllVPCs;
  }

  public void setAllowedAllVPCs(Boolean allowedAllVPCs) {
    this.allowedAllVPCs = allowedAllVPCs;
  }


  public EndpointAuthorization allowedVPCs(List allowedVPCs) {
    this.allowedVPCs = allowedVPCs;
    return this;
  }

  /**
   * Get allowedVPCs
   * @return allowedVPCs
   */
  @javax.annotation.Nullable
  public List getAllowedVPCs() {
    return allowedVPCs;
  }

  public void setAllowedVPCs(List allowedVPCs) {
    this.allowedVPCs = allowedVPCs;
  }


  public EndpointAuthorization endpointCount(Integer endpointCount) {
    this.endpointCount = endpointCount;
    return this;
  }

  /**
   * Get endpointCount
   * @return endpointCount
   */
  @javax.annotation.Nullable
  public Integer getEndpointCount() {
    return endpointCount;
  }

  public void setEndpointCount(Integer endpointCount) {
    this.endpointCount = endpointCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointAuthorization endpointAuthorization = (EndpointAuthorization) o;
    return Objects.equals(this.grantor, endpointAuthorization.grantor) &&
        Objects.equals(this.grantee, endpointAuthorization.grantee) &&
        Objects.equals(this.clusterIdentifier, endpointAuthorization.clusterIdentifier) &&
        Objects.equals(this.authorizeTime, endpointAuthorization.authorizeTime) &&
        Objects.equals(this.clusterStatus, endpointAuthorization.clusterStatus) &&
        Objects.equals(this.status, endpointAuthorization.status) &&
        Objects.equals(this.allowedAllVPCs, endpointAuthorization.allowedAllVPCs) &&
        Objects.equals(this.allowedVPCs, endpointAuthorization.allowedVPCs) &&
        Objects.equals(this.endpointCount, endpointAuthorization.endpointCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grantor, grantee, clusterIdentifier, authorizeTime, clusterStatus, status, allowedAllVPCs, allowedVPCs, endpointCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointAuthorization {\n");
    sb.append("    grantor: ").append(toIndentedString(grantor)).append("\n");
    sb.append("    grantee: ").append(toIndentedString(grantee)).append("\n");
    sb.append("    clusterIdentifier: ").append(toIndentedString(clusterIdentifier)).append("\n");
    sb.append("    authorizeTime: ").append(toIndentedString(authorizeTime)).append("\n");
    sb.append("    clusterStatus: ").append(toIndentedString(clusterStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    allowedAllVPCs: ").append(toIndentedString(allowedAllVPCs)).append("\n");
    sb.append("    allowedVPCs: ").append(toIndentedString(allowedVPCs)).append("\n");
    sb.append("    endpointCount: ").append(toIndentedString(endpointCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Grantor");
    openapiFields.add("Grantee");
    openapiFields.add("ClusterIdentifier");
    openapiFields.add("AuthorizeTime");
    openapiFields.add("ClusterStatus");
    openapiFields.add("Status");
    openapiFields.add("AllowedAllVPCs");
    openapiFields.add("AllowedVPCs");
    openapiFields.add("EndpointCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointAuthorization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointAuthorization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointAuthorization is not found in the empty JSON string", EndpointAuthorization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointAuthorization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointAuthorization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Grantor`
      if (jsonObj.get("Grantor") != null && !jsonObj.get("Grantor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Grantor"));
      }
      // validate the optional field `Grantee`
      if (jsonObj.get("Grantee") != null && !jsonObj.get("Grantee").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Grantee"));
      }
      // validate the optional field `ClusterIdentifier`
      if (jsonObj.get("ClusterIdentifier") != null && !jsonObj.get("ClusterIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterIdentifier"));
      }
      // validate the optional field `AuthorizeTime`
      if (jsonObj.get("AuthorizeTime") != null && !jsonObj.get("AuthorizeTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AuthorizeTime"));
      }
      // validate the optional field `ClusterStatus`
      if (jsonObj.get("ClusterStatus") != null && !jsonObj.get("ClusterStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClusterStatus"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        AuthorizationStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `AllowedAllVPCs`
      if (jsonObj.get("AllowedAllVPCs") != null && !jsonObj.get("AllowedAllVPCs").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowedAllVPCs"));
      }
      // validate the optional field `AllowedVPCs`
      if (jsonObj.get("AllowedVPCs") != null && !jsonObj.get("AllowedVPCs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AllowedVPCs"));
      }
      // validate the optional field `EndpointCount`
      if (jsonObj.get("EndpointCount") != null && !jsonObj.get("EndpointCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EndpointCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointAuthorization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointAuthorization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointAuthorization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointAuthorization.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointAuthorization>() {
           @Override
           public void write(JsonWriter out, EndpointAuthorization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointAuthorization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointAuthorization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointAuthorization
   * @throws IOException if the JSON string is invalid with respect to EndpointAuthorization
   */
  public static EndpointAuthorization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointAuthorization.class);
  }

  /**
   * Convert an instance of EndpointAuthorization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

