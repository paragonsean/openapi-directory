/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AquaConfigurationStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for RestoreFromClusterSnapshotMessage
 */
public class RestoreFromClusterSnapshotMessageTest {
    private final RestoreFromClusterSnapshotMessage model = new RestoreFromClusterSnapshotMessage();

    /**
     * Model tests for RestoreFromClusterSnapshotMessage
     */
    @Test
    public void testRestoreFromClusterSnapshotMessage() {
        // TODO: test RestoreFromClusterSnapshotMessage
    }

    /**
     * Test the property 'clusterIdentifier'
     */
    @Test
    public void clusterIdentifierTest() {
        // TODO: test clusterIdentifier
    }

    /**
     * Test the property 'snapshotIdentifier'
     */
    @Test
    public void snapshotIdentifierTest() {
        // TODO: test snapshotIdentifier
    }

    /**
     * Test the property 'snapshotArn'
     */
    @Test
    public void snapshotArnTest() {
        // TODO: test snapshotArn
    }

    /**
     * Test the property 'snapshotClusterIdentifier'
     */
    @Test
    public void snapshotClusterIdentifierTest() {
        // TODO: test snapshotClusterIdentifier
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'allowVersionUpgrade'
     */
    @Test
    public void allowVersionUpgradeTest() {
        // TODO: test allowVersionUpgrade
    }

    /**
     * Test the property 'clusterSubnetGroupName'
     */
    @Test
    public void clusterSubnetGroupNameTest() {
        // TODO: test clusterSubnetGroupName
    }

    /**
     * Test the property 'publiclyAccessible'
     */
    @Test
    public void publiclyAccessibleTest() {
        // TODO: test publiclyAccessible
    }

    /**
     * Test the property 'ownerAccount'
     */
    @Test
    public void ownerAccountTest() {
        // TODO: test ownerAccount
    }

    /**
     * Test the property 'hsmClientCertificateIdentifier'
     */
    @Test
    public void hsmClientCertificateIdentifierTest() {
        // TODO: test hsmClientCertificateIdentifier
    }

    /**
     * Test the property 'hsmConfigurationIdentifier'
     */
    @Test
    public void hsmConfigurationIdentifierTest() {
        // TODO: test hsmConfigurationIdentifier
    }

    /**
     * Test the property 'elasticIp'
     */
    @Test
    public void elasticIpTest() {
        // TODO: test elasticIp
    }

    /**
     * Test the property 'clusterParameterGroupName'
     */
    @Test
    public void clusterParameterGroupNameTest() {
        // TODO: test clusterParameterGroupName
    }

    /**
     * Test the property 'clusterSecurityGroups'
     */
    @Test
    public void clusterSecurityGroupsTest() {
        // TODO: test clusterSecurityGroups
    }

    /**
     * Test the property 'vpcSecurityGroupIds'
     */
    @Test
    public void vpcSecurityGroupIdsTest() {
        // TODO: test vpcSecurityGroupIds
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'automatedSnapshotRetentionPeriod'
     */
    @Test
    public void automatedSnapshotRetentionPeriodTest() {
        // TODO: test automatedSnapshotRetentionPeriod
    }

    /**
     * Test the property 'manualSnapshotRetentionPeriod'
     */
    @Test
    public void manualSnapshotRetentionPeriodTest() {
        // TODO: test manualSnapshotRetentionPeriod
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'nodeType'
     */
    @Test
    public void nodeTypeTest() {
        // TODO: test nodeType
    }

    /**
     * Test the property 'enhancedVpcRouting'
     */
    @Test
    public void enhancedVpcRoutingTest() {
        // TODO: test enhancedVpcRouting
    }

    /**
     * Test the property 'additionalInfo'
     */
    @Test
    public void additionalInfoTest() {
        // TODO: test additionalInfo
    }

    /**
     * Test the property 'iamRoles'
     */
    @Test
    public void iamRolesTest() {
        // TODO: test iamRoles
    }

    /**
     * Test the property 'maintenanceTrackName'
     */
    @Test
    public void maintenanceTrackNameTest() {
        // TODO: test maintenanceTrackName
    }

    /**
     * Test the property 'snapshotScheduleIdentifier'
     */
    @Test
    public void snapshotScheduleIdentifierTest() {
        // TODO: test snapshotScheduleIdentifier
    }

    /**
     * Test the property 'numberOfNodes'
     */
    @Test
    public void numberOfNodesTest() {
        // TODO: test numberOfNodes
    }

    /**
     * Test the property 'availabilityZoneRelocation'
     */
    @Test
    public void availabilityZoneRelocationTest() {
        // TODO: test availabilityZoneRelocation
    }

    /**
     * Test the property 'aquaConfigurationStatus'
     */
    @Test
    public void aquaConfigurationStatusTest() {
        // TODO: test aquaConfigurationStatus
    }

    /**
     * Test the property 'defaultIamRoleArn'
     */
    @Test
    public void defaultIamRoleArnTest() {
        // TODO: test defaultIamRoleArn
    }

    /**
     * Test the property 'reservedNodeId'
     */
    @Test
    public void reservedNodeIdTest() {
        // TODO: test reservedNodeId
    }

    /**
     * Test the property 'targetReservedNodeOfferingId'
     */
    @Test
    public void targetReservedNodeOfferingIdTest() {
        // TODO: test targetReservedNodeOfferingId
    }

    /**
     * Test the property 'encrypted'
     */
    @Test
    public void encryptedTest() {
        // TODO: test encrypted
    }

}
