/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.TableRestoreStatusType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TableRestoreStatus
 */
public class TableRestoreStatusTest {
    private final TableRestoreStatus model = new TableRestoreStatus();

    /**
     * Model tests for TableRestoreStatus
     */
    @Test
    public void testTableRestoreStatus() {
        // TODO: test TableRestoreStatus
    }

    /**
     * Test the property 'tableRestoreRequestId'
     */
    @Test
    public void tableRestoreRequestIdTest() {
        // TODO: test tableRestoreRequestId
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'message'
     */
    @Test
    public void messageTest() {
        // TODO: test message
    }

    /**
     * Test the property 'requestTime'
     */
    @Test
    public void requestTimeTest() {
        // TODO: test requestTime
    }

    /**
     * Test the property 'progressInMegaBytes'
     */
    @Test
    public void progressInMegaBytesTest() {
        // TODO: test progressInMegaBytes
    }

    /**
     * Test the property 'totalDataInMegaBytes'
     */
    @Test
    public void totalDataInMegaBytesTest() {
        // TODO: test totalDataInMegaBytes
    }

    /**
     * Test the property 'clusterIdentifier'
     */
    @Test
    public void clusterIdentifierTest() {
        // TODO: test clusterIdentifier
    }

    /**
     * Test the property 'snapshotIdentifier'
     */
    @Test
    public void snapshotIdentifierTest() {
        // TODO: test snapshotIdentifier
    }

    /**
     * Test the property 'sourceDatabaseName'
     */
    @Test
    public void sourceDatabaseNameTest() {
        // TODO: test sourceDatabaseName
    }

    /**
     * Test the property 'sourceSchemaName'
     */
    @Test
    public void sourceSchemaNameTest() {
        // TODO: test sourceSchemaName
    }

    /**
     * Test the property 'sourceTableName'
     */
    @Test
    public void sourceTableNameTest() {
        // TODO: test sourceTableName
    }

    /**
     * Test the property 'targetDatabaseName'
     */
    @Test
    public void targetDatabaseNameTest() {
        // TODO: test targetDatabaseName
    }

    /**
     * Test the property 'targetSchemaName'
     */
    @Test
    public void targetSchemaNameTest() {
        // TODO: test targetSchemaName
    }

    /**
     * Test the property 'newTableName'
     */
    @Test
    public void newTableNameTest() {
        // TODO: test newTableName
    }

}
