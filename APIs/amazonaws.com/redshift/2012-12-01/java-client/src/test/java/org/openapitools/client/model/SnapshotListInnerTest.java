/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SnapshotListInner
 */
public class SnapshotListInnerTest {
    private final SnapshotListInner model = new SnapshotListInner();

    /**
     * Model tests for SnapshotListInner
     */
    @Test
    public void testSnapshotListInner() {
        // TODO: test SnapshotListInner
    }

    /**
     * Test the property 'snapshotIdentifier'
     */
    @Test
    public void snapshotIdentifierTest() {
        // TODO: test snapshotIdentifier
    }

    /**
     * Test the property 'clusterIdentifier'
     */
    @Test
    public void clusterIdentifierTest() {
        // TODO: test clusterIdentifier
    }

    /**
     * Test the property 'snapshotCreateTime'
     */
    @Test
    public void snapshotCreateTimeTest() {
        // TODO: test snapshotCreateTime
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'clusterCreateTime'
     */
    @Test
    public void clusterCreateTimeTest() {
        // TODO: test clusterCreateTime
    }

    /**
     * Test the property 'masterUsername'
     */
    @Test
    public void masterUsernameTest() {
        // TODO: test masterUsername
    }

    /**
     * Test the property 'clusterVersion'
     */
    @Test
    public void clusterVersionTest() {
        // TODO: test clusterVersion
    }

    /**
     * Test the property 'engineFullVersion'
     */
    @Test
    public void engineFullVersionTest() {
        // TODO: test engineFullVersion
    }

    /**
     * Test the property 'snapshotType'
     */
    @Test
    public void snapshotTypeTest() {
        // TODO: test snapshotType
    }

    /**
     * Test the property 'nodeType'
     */
    @Test
    public void nodeTypeTest() {
        // TODO: test nodeType
    }

    /**
     * Test the property 'numberOfNodes'
     */
    @Test
    public void numberOfNodesTest() {
        // TODO: test numberOfNodes
    }

    /**
     * Test the property 'dbName'
     */
    @Test
    public void dbNameTest() {
        // TODO: test dbName
    }

    /**
     * Test the property 'vpcId'
     */
    @Test
    public void vpcIdTest() {
        // TODO: test vpcId
    }

    /**
     * Test the property 'encrypted'
     */
    @Test
    public void encryptedTest() {
        // TODO: test encrypted
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'encryptedWithHSM'
     */
    @Test
    public void encryptedWithHSMTest() {
        // TODO: test encryptedWithHSM
    }

    /**
     * Test the property 'accountsWithRestoreAccess'
     */
    @Test
    public void accountsWithRestoreAccessTest() {
        // TODO: test accountsWithRestoreAccess
    }

    /**
     * Test the property 'ownerAccount'
     */
    @Test
    public void ownerAccountTest() {
        // TODO: test ownerAccount
    }

    /**
     * Test the property 'totalBackupSizeInMegaBytes'
     */
    @Test
    public void totalBackupSizeInMegaBytesTest() {
        // TODO: test totalBackupSizeInMegaBytes
    }

    /**
     * Test the property 'actualIncrementalBackupSizeInMegaBytes'
     */
    @Test
    public void actualIncrementalBackupSizeInMegaBytesTest() {
        // TODO: test actualIncrementalBackupSizeInMegaBytes
    }

    /**
     * Test the property 'backupProgressInMegaBytes'
     */
    @Test
    public void backupProgressInMegaBytesTest() {
        // TODO: test backupProgressInMegaBytes
    }

    /**
     * Test the property 'currentBackupRateInMegaBytesPerSecond'
     */
    @Test
    public void currentBackupRateInMegaBytesPerSecondTest() {
        // TODO: test currentBackupRateInMegaBytesPerSecond
    }

    /**
     * Test the property 'estimatedSecondsToCompletion'
     */
    @Test
    public void estimatedSecondsToCompletionTest() {
        // TODO: test estimatedSecondsToCompletion
    }

    /**
     * Test the property 'elapsedTimeInSeconds'
     */
    @Test
    public void elapsedTimeInSecondsTest() {
        // TODO: test elapsedTimeInSeconds
    }

    /**
     * Test the property 'sourceRegion'
     */
    @Test
    public void sourceRegionTest() {
        // TODO: test sourceRegion
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'restorableNodeTypes'
     */
    @Test
    public void restorableNodeTypesTest() {
        // TODO: test restorableNodeTypes
    }

    /**
     * Test the property 'enhancedVpcRouting'
     */
    @Test
    public void enhancedVpcRoutingTest() {
        // TODO: test enhancedVpcRouting
    }

    /**
     * Test the property 'maintenanceTrackName'
     */
    @Test
    public void maintenanceTrackNameTest() {
        // TODO: test maintenanceTrackName
    }

    /**
     * Test the property 'manualSnapshotRetentionPeriod'
     */
    @Test
    public void manualSnapshotRetentionPeriodTest() {
        // TODO: test manualSnapshotRetentionPeriod
    }

    /**
     * Test the property 'manualSnapshotRemainingDays'
     */
    @Test
    public void manualSnapshotRemainingDaysTest() {
        // TODO: test manualSnapshotRemainingDays
    }

    /**
     * Test the property 'snapshotRetentionStartTime'
     */
    @Test
    public void snapshotRetentionStartTimeTest() {
        // TODO: test snapshotRetentionStartTime
    }

}
