/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptReservedNodeExchangeInputMessage;
import org.openapitools.client.model.AcceptReservedNodeExchangeOutputMessage;
import org.openapitools.client.model.AccountAttributeList;
import org.openapitools.client.model.AssociateDataShareConsumerMessage;
import org.openapitools.client.model.AuthorizeClusterSecurityGroupIngressMessage;
import org.openapitools.client.model.AuthorizeClusterSecurityGroupIngressResult;
import org.openapitools.client.model.AuthorizeDataShareMessage;
import org.openapitools.client.model.AuthorizeEndpointAccessMessage;
import org.openapitools.client.model.AuthorizeSnapshotAccessMessage;
import org.openapitools.client.model.AuthorizeSnapshotAccessResult;
import org.openapitools.client.model.BatchDeleteClusterSnapshotsRequest;
import org.openapitools.client.model.BatchDeleteClusterSnapshotsResult;
import org.openapitools.client.model.BatchModifyClusterSnapshotsMessage;
import org.openapitools.client.model.BatchModifyClusterSnapshotsOutputMessage;
import org.openapitools.client.model.CancelResizeMessage;
import org.openapitools.client.model.ClusterCredentials;
import org.openapitools.client.model.ClusterDbRevisionsMessage;
import org.openapitools.client.model.ClusterExtendedCredentials;
import org.openapitools.client.model.ClusterParameterGroupDetails;
import org.openapitools.client.model.ClusterParameterGroupNameMessage;
import org.openapitools.client.model.ClusterParameterGroupsMessage;
import org.openapitools.client.model.ClusterSecurityGroupMessage;
import org.openapitools.client.model.ClusterSubnetGroupMessage;
import org.openapitools.client.model.ClusterVersionsMessage;
import org.openapitools.client.model.ClustersMessage;
import org.openapitools.client.model.CopyClusterSnapshotMessage;
import org.openapitools.client.model.CopyClusterSnapshotResult;
import org.openapitools.client.model.CreateAuthenticationProfileMessage;
import org.openapitools.client.model.CreateAuthenticationProfileResult;
import org.openapitools.client.model.CreateClusterMessage;
import org.openapitools.client.model.CreateClusterParameterGroupMessage;
import org.openapitools.client.model.CreateClusterParameterGroupResult;
import org.openapitools.client.model.CreateClusterResult;
import org.openapitools.client.model.CreateClusterSecurityGroupMessage;
import org.openapitools.client.model.CreateClusterSecurityGroupResult;
import org.openapitools.client.model.CreateClusterSnapshotMessage;
import org.openapitools.client.model.CreateClusterSnapshotResult;
import org.openapitools.client.model.CreateClusterSubnetGroupMessage;
import org.openapitools.client.model.CreateClusterSubnetGroupResult;
import org.openapitools.client.model.CreateCustomDomainAssociationMessage;
import org.openapitools.client.model.CreateCustomDomainAssociationResult;
import org.openapitools.client.model.CreateEndpointAccessMessage;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResult;
import org.openapitools.client.model.CreateHsmClientCertificateMessage;
import org.openapitools.client.model.CreateHsmClientCertificateResult;
import org.openapitools.client.model.CreateHsmConfigurationMessage;
import org.openapitools.client.model.CreateHsmConfigurationResult;
import org.openapitools.client.model.CreateScheduledActionMessage;
import org.openapitools.client.model.CreateSnapshotCopyGrantMessage;
import org.openapitools.client.model.CreateSnapshotCopyGrantResult;
import org.openapitools.client.model.CreateSnapshotScheduleMessage;
import org.openapitools.client.model.CreateTagsMessage;
import org.openapitools.client.model.CreateUsageLimitMessage;
import org.openapitools.client.model.CustomDomainAssociationsMessage;
import org.openapitools.client.model.CustomerStorageMessage;
import org.openapitools.client.model.DataShare;
import org.openapitools.client.model.DeauthorizeDataShareMessage;
import org.openapitools.client.model.DeleteAuthenticationProfileMessage;
import org.openapitools.client.model.DeleteAuthenticationProfileResult;
import org.openapitools.client.model.DeleteClusterMessage;
import org.openapitools.client.model.DeleteClusterParameterGroupMessage;
import org.openapitools.client.model.DeleteClusterResult;
import org.openapitools.client.model.DeleteClusterSecurityGroupMessage;
import org.openapitools.client.model.DeleteClusterSnapshotMessage;
import org.openapitools.client.model.DeleteClusterSnapshotResult;
import org.openapitools.client.model.DeleteClusterSubnetGroupMessage;
import org.openapitools.client.model.DeleteCustomDomainAssociationMessage;
import org.openapitools.client.model.DeleteEndpointAccessMessage;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteHsmClientCertificateMessage;
import org.openapitools.client.model.DeleteHsmConfigurationMessage;
import org.openapitools.client.model.DeleteScheduledActionMessage;
import org.openapitools.client.model.DeleteSnapshotCopyGrantMessage;
import org.openapitools.client.model.DeleteSnapshotScheduleMessage;
import org.openapitools.client.model.DeleteTagsMessage;
import org.openapitools.client.model.DeleteUsageLimitMessage;
import org.openapitools.client.model.DescribeAccountAttributesMessage;
import org.openapitools.client.model.DescribeAuthenticationProfilesMessage;
import org.openapitools.client.model.DescribeAuthenticationProfilesResult;
import org.openapitools.client.model.DescribeClusterDbRevisionsMessage;
import org.openapitools.client.model.DescribeClusterParameterGroupsMessage;
import org.openapitools.client.model.DescribeClusterParametersMessage;
import org.openapitools.client.model.DescribeClusterSecurityGroupsMessage;
import org.openapitools.client.model.DescribeClusterSnapshotsMessage;
import org.openapitools.client.model.DescribeClusterSubnetGroupsMessage;
import org.openapitools.client.model.DescribeClusterTracksMessage;
import org.openapitools.client.model.DescribeClusterVersionsMessage;
import org.openapitools.client.model.DescribeClustersMessage;
import org.openapitools.client.model.DescribeCustomDomainAssociationsMessage;
import org.openapitools.client.model.DescribeDataSharesForConsumerMessage;
import org.openapitools.client.model.DescribeDataSharesForConsumerResult;
import org.openapitools.client.model.DescribeDataSharesForProducerMessage;
import org.openapitools.client.model.DescribeDataSharesForProducerResult;
import org.openapitools.client.model.DescribeDataSharesMessage;
import org.openapitools.client.model.DescribeDataSharesResult;
import org.openapitools.client.model.DescribeDefaultClusterParametersMessage;
import org.openapitools.client.model.DescribeDefaultClusterParametersResult;
import org.openapitools.client.model.DescribeEndpointAccessMessage;
import org.openapitools.client.model.DescribeEndpointAuthorizationMessage;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeHsmClientCertificatesMessage;
import org.openapitools.client.model.DescribeHsmConfigurationsMessage;
import org.openapitools.client.model.DescribeLoggingStatusMessage;
import org.openapitools.client.model.DescribeNodeConfigurationOptionsMessage;
import org.openapitools.client.model.DescribeOrderableClusterOptionsMessage;
import org.openapitools.client.model.DescribePartnersInputMessage;
import org.openapitools.client.model.DescribePartnersOutputMessage;
import org.openapitools.client.model.DescribeReservedNodeExchangeStatusInputMessage;
import org.openapitools.client.model.DescribeReservedNodeExchangeStatusOutputMessage;
import org.openapitools.client.model.DescribeReservedNodeOfferingsMessage;
import org.openapitools.client.model.DescribeReservedNodesMessage;
import org.openapitools.client.model.DescribeResizeMessage;
import org.openapitools.client.model.DescribeScheduledActionsMessage;
import org.openapitools.client.model.DescribeSnapshotCopyGrantsMessage;
import org.openapitools.client.model.DescribeSnapshotSchedulesMessage;
import org.openapitools.client.model.DescribeSnapshotSchedulesOutputMessage;
import org.openapitools.client.model.DescribeTableRestoreStatusMessage;
import org.openapitools.client.model.DescribeTagsMessage;
import org.openapitools.client.model.DescribeUsageLimitsMessage;
import org.openapitools.client.model.DisableLoggingMessage;
import org.openapitools.client.model.DisableSnapshotCopyMessage;
import org.openapitools.client.model.DisableSnapshotCopyResult;
import org.openapitools.client.model.DisassociateDataShareConsumerMessage;
import org.openapitools.client.model.EnableLoggingMessage;
import org.openapitools.client.model.EnableSnapshotCopyMessage;
import org.openapitools.client.model.EnableSnapshotCopyResult;
import org.openapitools.client.model.EndpointAccess;
import org.openapitools.client.model.EndpointAccessList;
import org.openapitools.client.model.EndpointAuthorization;
import org.openapitools.client.model.EndpointAuthorizationList;
import org.openapitools.client.model.EventCategoriesMessage;
import org.openapitools.client.model.EventSubscriptionsMessage;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.GETBatchDeleteClusterSnapshotsIdentifiersParameterInner;
import org.openapitools.client.model.GETCreateClusterTagsParameterInner;
import org.openapitools.client.model.GETCreateScheduledActionTargetActionParameter;
import org.openapitools.client.model.GETDescribeClusterSnapshotsSortingEntitiesParameterInner;
import org.openapitools.client.model.GETDescribeNodeConfigurationOptionsFilterParameterInner;
import org.openapitools.client.model.GETDescribeScheduledActionsFiltersParameterInner;
import org.openapitools.client.model.GETModifyClusterParameterGroupParametersParameterInner;
import org.openapitools.client.model.GetClusterCredentialsMessage;
import org.openapitools.client.model.GetClusterCredentialsWithIAMMessage;
import org.openapitools.client.model.GetReservedNodeExchangeConfigurationOptionsInputMessage;
import org.openapitools.client.model.GetReservedNodeExchangeConfigurationOptionsOutputMessage;
import org.openapitools.client.model.GetReservedNodeExchangeOfferingsInputMessage;
import org.openapitools.client.model.GetReservedNodeExchangeOfferingsOutputMessage;
import org.openapitools.client.model.HsmClientCertificateMessage;
import org.openapitools.client.model.HsmConfigurationMessage;
import org.openapitools.client.model.LoggingStatus;
import org.openapitools.client.model.ModifyAquaInputMessage;
import org.openapitools.client.model.ModifyAquaOutputMessage;
import org.openapitools.client.model.ModifyAuthenticationProfileMessage;
import org.openapitools.client.model.ModifyAuthenticationProfileResult;
import org.openapitools.client.model.ModifyClusterDbRevisionMessage;
import org.openapitools.client.model.ModifyClusterDbRevisionResult;
import org.openapitools.client.model.ModifyClusterIamRolesMessage;
import org.openapitools.client.model.ModifyClusterIamRolesResult;
import org.openapitools.client.model.ModifyClusterMaintenanceMessage;
import org.openapitools.client.model.ModifyClusterMaintenanceResult;
import org.openapitools.client.model.ModifyClusterMessage;
import org.openapitools.client.model.ModifyClusterParameterGroupMessage;
import org.openapitools.client.model.ModifyClusterResult;
import org.openapitools.client.model.ModifyClusterSnapshotMessage;
import org.openapitools.client.model.ModifyClusterSnapshotResult;
import org.openapitools.client.model.ModifyClusterSnapshotScheduleMessage;
import org.openapitools.client.model.ModifyClusterSubnetGroupMessage;
import org.openapitools.client.model.ModifyClusterSubnetGroupResult;
import org.openapitools.client.model.ModifyCustomDomainAssociationMessage;
import org.openapitools.client.model.ModifyCustomDomainAssociationResult;
import org.openapitools.client.model.ModifyEndpointAccessMessage;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResult;
import org.openapitools.client.model.ModifyScheduledActionMessage;
import org.openapitools.client.model.ModifySnapshotCopyRetentionPeriodMessage;
import org.openapitools.client.model.ModifySnapshotCopyRetentionPeriodResult;
import org.openapitools.client.model.ModifySnapshotScheduleMessage;
import org.openapitools.client.model.ModifyUsageLimitMessage;
import org.openapitools.client.model.NodeConfigurationOptionsMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OrderableClusterOptionsMessage;
import org.openapitools.client.model.PartnerIntegrationInputMessage;
import org.openapitools.client.model.PartnerIntegrationOutputMessage;
import org.openapitools.client.model.PauseClusterMessage;
import org.openapitools.client.model.PauseClusterResult;
import org.openapitools.client.model.PurchaseReservedNodeOfferingMessage;
import org.openapitools.client.model.PurchaseReservedNodeOfferingResult;
import org.openapitools.client.model.RebootClusterMessage;
import org.openapitools.client.model.RebootClusterResult;
import org.openapitools.client.model.RejectDataShareMessage;
import org.openapitools.client.model.ReservedNodeOfferingsMessage;
import org.openapitools.client.model.ReservedNodesMessage;
import org.openapitools.client.model.ResetClusterParameterGroupMessage;
import org.openapitools.client.model.ResizeClusterMessage;
import org.openapitools.client.model.ResizeClusterResult;
import org.openapitools.client.model.ResizeProgressMessage;
import org.openapitools.client.model.RestoreFromClusterSnapshotMessage;
import org.openapitools.client.model.RestoreFromClusterSnapshotResult;
import org.openapitools.client.model.RestoreTableFromClusterSnapshotMessage;
import org.openapitools.client.model.RestoreTableFromClusterSnapshotResult;
import org.openapitools.client.model.ResumeClusterMessage;
import org.openapitools.client.model.ResumeClusterResult;
import org.openapitools.client.model.RevokeClusterSecurityGroupIngressMessage;
import org.openapitools.client.model.RevokeClusterSecurityGroupIngressResult;
import org.openapitools.client.model.RevokeEndpointAccessMessage;
import org.openapitools.client.model.RevokeSnapshotAccessMessage;
import org.openapitools.client.model.RevokeSnapshotAccessResult;
import org.openapitools.client.model.RotateEncryptionKeyMessage;
import org.openapitools.client.model.RotateEncryptionKeyResult;
import org.openapitools.client.model.ScheduledAction;
import org.openapitools.client.model.ScheduledActionsMessage;
import org.openapitools.client.model.SnapshotCopyGrantMessage;
import org.openapitools.client.model.SnapshotMessage;
import org.openapitools.client.model.SnapshotSchedule;
import org.openapitools.client.model.TableRestoreStatusMessage;
import org.openapitools.client.model.TaggedResourceListMessage;
import org.openapitools.client.model.TrackListMessage;
import org.openapitools.client.model.UpdatePartnerStatusInputMessage;
import org.openapitools.client.model.UsageLimit;
import org.openapitools.client.model.UsageLimitList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAcceptReservedNodeExchangeTest() throws ApiException {
        String reservedNodeId = null;
        String targetReservedNodeOfferingId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AcceptReservedNodeExchangeOutputMessage response = api.gETAcceptReservedNodeExchange(reservedNodeId, targetReservedNodeOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a partner integration to a cluster. This operation authorizes a partner to push status updates for the specified database. To complete the integration, you also set up the integration on the partner website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAddPartnerTest() throws ApiException {
        String accountId = null;
        String clusterIdentifier = null;
        String databaseName = null;
        String partnerName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PartnerIntegrationOutputMessage response = api.gETAddPartner(accountId, clusterIdentifier, databaseName, partnerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * From a datashare consumer account, associates a datashare with the account (AssociateEntireAccount) or the specified namespace (ConsumerArn). If you make this association, the consumer can consume the datashare.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAssociateDataShareConsumerTest() throws ApiException {
        String dataShareArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean associateEntireAccount = null;
        String consumerArn = null;
        String consumerRegion = null;
        DataShare response = api.gETAssociateDataShareConsumer(dataShareArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, associateEntireAccount, consumerArn, consumerRegion);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.&lt;/p&gt; &lt;p&gt;If you authorize access to an Amazon EC2 security group, specify &lt;i&gt;EC2SecurityGroupName&lt;/i&gt; and &lt;i&gt;EC2SecurityGroupOwnerId&lt;/i&gt;. The Amazon EC2 security group and Amazon Redshift cluster must be in the same Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;If you authorize access to a CIDR/IP address range, specify &lt;i&gt;CIDRIP&lt;/i&gt;. For an overview of CIDR blocks, see the Wikipedia article on &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Classless Inter-Domain Routing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Working with Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAuthorizeClusterSecurityGroupIngressTest() throws ApiException {
        String clusterSecurityGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String CIDRIP = null;
        String ec2SecurityGroupName = null;
        String ec2SecurityGroupOwnerId = null;
        AuthorizeClusterSecurityGroupIngressResult response = api.gETAuthorizeClusterSecurityGroupIngress(clusterSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, CIDRIP, ec2SecurityGroupName, ec2SecurityGroupOwnerId);
        // TODO: test validations
    }

    /**
     * From a data producer account, authorizes the sharing of a datashare with one or more consumer accounts or managing entities. To authorize a datashare for a data consumer, the producer account must have the correct access permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAuthorizeDataShareTest() throws ApiException {
        String dataShareArn = null;
        String consumerIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DataShare response = api.gETAuthorizeDataShare(dataShareArn, consumerIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Grants access to a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAuthorizeEndpointAccessTest() throws ApiException {
        String account = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        List<String> vpcIds = null;
        EndpointAuthorization response = api.gETAuthorizeEndpointAccess(account, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, vpcIds);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Authorizes the specified Amazon Web Services account to restore the specified snapshot.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETAuthorizeSnapshotAccessTest() throws ApiException {
        String accountWithRestoreAccess = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snapshotIdentifier = null;
        String snapshotArn = null;
        String snapshotClusterIdentifier = null;
        AuthorizeSnapshotAccessResult response = api.gETAuthorizeSnapshotAccess(accountWithRestoreAccess, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snapshotIdentifier, snapshotArn, snapshotClusterIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes a set of cluster snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETBatchDeleteClusterSnapshotsTest() throws ApiException {
        List<GETBatchDeleteClusterSnapshotsIdentifiersParameterInner> identifiers = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteClusterSnapshotsResult response = api.gETBatchDeleteClusterSnapshots(identifiers, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a set of cluster snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETBatchModifyClusterSnapshotsTest() throws ApiException {
        List<String> snapshotIdentifierList = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer manualSnapshotRetentionPeriod = null;
        Boolean force = null;
        BatchModifyClusterSnapshotsOutputMessage response = api.gETBatchModifyClusterSnapshots(snapshotIdentifierList, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, manualSnapshotRetentionPeriod, force);
        // TODO: test validations
    }

    /**
     * Cancels a resize operation for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCancelResizeTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResizeProgressMessage response = api.gETCancelResize(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.&lt;/p&gt; &lt;p&gt;When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCopyClusterSnapshotTest() throws ApiException {
        String sourceSnapshotIdentifier = null;
        String targetSnapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceSnapshotClusterIdentifier = null;
        Integer manualSnapshotRetentionPeriod = null;
        CopyClusterSnapshotResult response = api.gETCopyClusterSnapshot(sourceSnapshotIdentifier, targetSnapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceSnapshotClusterIdentifier, manualSnapshotRetentionPeriod);
        // TODO: test validations
    }

    /**
     * Creates an authentication profile with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateAuthenticationProfileTest() throws ApiException {
        String authenticationProfileName = null;
        String authenticationProfileContent = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAuthenticationProfileResult response = api.gETCreateAuthenticationProfile(authenticationProfileName, authenticationProfileContent, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster with the specified parameters.&lt;/p&gt; &lt;p&gt;To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String nodeType = null;
        String masterUsername = null;
        String masterUserPassword = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbName = null;
        String clusterType = null;
        List<String> clusterSecurityGroups = null;
        List<String> vpcSecurityGroupIds = null;
        String clusterSubnetGroupName = null;
        String availabilityZone = null;
        String preferredMaintenanceWindow = null;
        String clusterParameterGroupName = null;
        Integer automatedSnapshotRetentionPeriod = null;
        Integer manualSnapshotRetentionPeriod = null;
        Integer port = null;
        String clusterVersion = null;
        Boolean allowVersionUpgrade = null;
        Integer numberOfNodes = null;
        Boolean publiclyAccessible = null;
        Boolean encrypted = null;
        String hsmClientCertificateIdentifier = null;
        String hsmConfigurationIdentifier = null;
        String elasticIp = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        String kmsKeyId = null;
        Boolean enhancedVpcRouting = null;
        String additionalInfo = null;
        List<String> iamRoles = null;
        String maintenanceTrackName = null;
        String snapshotScheduleIdentifier = null;
        Boolean availabilityZoneRelocation = null;
        String aquaConfigurationStatus = null;
        String defaultIamRoleArn = null;
        String loadSampleData = null;
        CreateClusterResult response = api.gETCreateCluster(clusterIdentifier, nodeType, masterUsername, masterUserPassword, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, clusterType, clusterSecurityGroups, vpcSecurityGroupIds, clusterSubnetGroupName, availabilityZone, preferredMaintenanceWindow, clusterParameterGroupName, automatedSnapshotRetentionPeriod, manualSnapshotRetentionPeriod, port, clusterVersion, allowVersionUpgrade, numberOfNodes, publiclyAccessible, encrypted, hsmClientCertificateIdentifier, hsmConfigurationIdentifier, elasticIp, tags, kmsKeyId, enhancedVpcRouting, additionalInfo, iamRoles, maintenanceTrackName, snapshotScheduleIdentifier, availabilityZoneRelocation, aquaConfigurationStatus, defaultIamRoleArn, loadSampleData);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Redshift parameter group.&lt;/p&gt; &lt;p&gt;Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using &lt;a&gt;ModifyCluster&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateClusterParameterGroupTest() throws ApiException {
        String parameterGroupName = null;
        String parameterGroupFamily = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateClusterParameterGroupResult response = api.gETCreateClusterParameterGroup(parameterGroupName, parameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.&lt;/p&gt; &lt;p&gt; For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateClusterSecurityGroupTest() throws ApiException {
        String clusterSecurityGroupName = null;
        String description = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateClusterSecurityGroupResult response = api.gETCreateClusterSecurityGroup(clusterSecurityGroupName, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a manual snapshot of the specified cluster. The cluster must be in the &lt;code&gt;available&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateClusterSnapshotTest() throws ApiException {
        String snapshotIdentifier = null;
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer manualSnapshotRetentionPeriod = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateClusterSnapshotResult response = api.gETCreateClusterSnapshot(snapshotIdentifier, clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, manualSnapshotRetentionPeriod, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.&lt;/p&gt; &lt;p&gt; For information about subnet groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html\&quot;&gt;Amazon Redshift Cluster Subnet Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateClusterSubnetGroupTest() throws ApiException {
        String clusterSubnetGroupName = null;
        String description = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateClusterSubnetGroupResult response = api.gETCreateClusterSubnetGroup(clusterSubnetGroupName, description, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Used to create a custom domain name for a cluster. Properties include the custom domain name, the cluster the custom domain is associated with, and the certificate Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateCustomDomainAssociationTest() throws ApiException {
        String customDomainName = null;
        String customDomainCertificateArn = null;
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCustomDomainAssociationResult response = api.gETCreateCustomDomainAssociation(customDomainName, customDomainCertificateArn, clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateEndpointAccessTest() throws ApiException {
        String endpointName = null;
        String subnetGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String resourceOwner = null;
        List<String> vpcSecurityGroupIds = null;
        EndpointAccess response = api.gETCreateEndpointAccess(endpointName, subnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, resourceOwner, vpcSecurityGroupIds);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type &#x3D; cluster, source ID &#x3D; my-cluster-1 and mycluster2, event categories &#x3D; Availability, Backup, and severity &#x3D; ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.&lt;/p&gt; &lt;p&gt;If you specify both the source type and source IDs, such as source type &#x3D; cluster and source identifier &#x3D; my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your Amazon Web Services account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your Amazon Web Services account. You must specify a source type if you specify a source ID.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String snsTopicArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceType = null;
        List<String> sourceIds = null;
        List<String> eventCategories = null;
        String severity = null;
        Boolean enabled = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateEventSubscriptionResult response = api.gETCreateEventSubscription(subscriptionName, snsTopicArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType, sourceIds, eventCategories, severity, enabled, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client&#39;s HSM in order to store and retrieve the keys used to encrypt the cluster databases.&lt;/p&gt; &lt;p&gt;The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html#working-with-HSM\&quot;&gt;Hardware Security Modules&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateHsmClientCertificateTest() throws ApiException {
        String hsmClientCertificateIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateHsmClientCertificateResult response = api.gETCreateHsmClientCertificate(hsmClientCertificateIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.&lt;/p&gt; &lt;p&gt;In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html\&quot;&gt;Hardware Security Modules&lt;/a&gt; in the Amazon Redshift Cluster Management Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateHsmConfigurationTest() throws ApiException {
        String hsmConfigurationIdentifier = null;
        String description = null;
        String hsmIpAddress = null;
        String hsmPartitionName = null;
        String hsmPartitionPassword = null;
        String hsmServerPublicCertificate = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateHsmConfigurationResult response = api.gETCreateHsmConfiguration(hsmConfigurationIdentifier, description, hsmIpAddress, hsmPartitionName, hsmPartitionPassword, hsmServerPublicCertificate, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        // TODO: test validations
    }

    /**
     * Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the &lt;code&gt;ResizeCluster&lt;/code&gt; API operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateScheduledActionTest() throws ApiException {
        String scheduledActionName = null;
        GETCreateScheduledActionTargetActionParameter targetAction = null;
        String schedule = null;
        String iamRole = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String scheduledActionDescription = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Boolean enable = null;
        ScheduledAction response = api.gETCreateScheduledAction(scheduledActionName, targetAction, schedule, iamRole, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scheduledActionDescription, startTime, endTime, enable);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a snapshot copy grant that permits Amazon Redshift to use an encrypted symmetric key from Key Management Service (KMS) to encrypt copied snapshots in a destination region.&lt;/p&gt; &lt;p&gt; For more information about managing snapshot copy grants, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\&quot;&gt;Amazon Redshift Database Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateSnapshotCopyGrantTest() throws ApiException {
        String snapshotCopyGrantName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String kmsKeyId = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        CreateSnapshotCopyGrantResult response = api.gETCreateSnapshotCopyGrant(snapshotCopyGrantName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, kmsKeyId, tags);
        // TODO: test validations
    }

    /**
     * Create a snapshot schedule that can be associated to a cluster and which overrides the default system backup schedule. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateSnapshotScheduleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> scheduleDefinitions = null;
        String scheduleIdentifier = null;
        String scheduleDescription = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        Boolean dryRun = null;
        Integer nextInvocations = null;
        SnapshotSchedule response = api.gETCreateSnapshotSchedule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scheduleDefinitions, scheduleIdentifier, scheduleDescription, tags, dryRun, nextInvocations);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds tags to a cluster.&lt;/p&gt; &lt;p&gt;A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.&lt;/p&gt; &lt;p&gt;If you specify a key that already exists for the resource, the value for that key will be updated with the new value.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateTagsTest() throws ApiException {
        String resourceName = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETCreateTags(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit is identified by the returned usage limit identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETCreateUsageLimitTest() throws ApiException {
        String clusterIdentifier = null;
        String featureType = null;
        String limitType = null;
        Integer amount = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String period = null;
        String breachAction = null;
        List<GETCreateClusterTagsParameterInner> tags = null;
        UsageLimit response = api.gETCreateUsageLimit(clusterIdentifier, featureType, limitType, amount, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, period, breachAction, tags);
        // TODO: test validations
    }

    /**
     * From a datashare producer account, removes authorization from the specified datashare. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeauthorizeDataShareTest() throws ApiException {
        String dataShareArn = null;
        String consumerIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DataShare response = api.gETDeauthorizeDataShare(dataShareArn, consumerIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an authentication profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteAuthenticationProfileTest() throws ApiException {
        String authenticationProfileName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAuthenticationProfileResult response = api.gETDeleteAuthenticationProfile(authenticationProfileName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use &lt;a&gt;DescribeClusters&lt;/a&gt; to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you want to shut down the cluster and retain it for future use, set &lt;i&gt;SkipFinalClusterSnapshot&lt;/i&gt; to &lt;code&gt;false&lt;/code&gt; and specify a name for &lt;i&gt;FinalClusterSnapshotIdentifier&lt;/i&gt;. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be \&quot;final-snapshot\&quot; while the snapshot is being taken, then it&#39;s \&quot;deleting\&quot; once Amazon Redshift begins deleting the cluster. &lt;/p&gt; &lt;p&gt; For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean skipFinalClusterSnapshot = null;
        String finalClusterSnapshotIdentifier = null;
        Integer finalClusterSnapshotRetentionPeriod = null;
        DeleteClusterResult response = api.gETDeleteCluster(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, skipFinalClusterSnapshot, finalClusterSnapshotIdentifier, finalClusterSnapshotRetentionPeriod);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a specified Amazon Redshift parameter group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a parameter group if it is associated with a cluster.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteClusterParameterGroupTest() throws ApiException {
        String parameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteClusterParameterGroup(parameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Amazon Redshift security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteClusterSecurityGroupTest() throws ApiException {
        String clusterSecurityGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteClusterSecurityGroup(clusterSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified manual snapshot. The snapshot must be in the &lt;code&gt;available&lt;/code&gt; state, with no other users authorized to access the snapshot. &lt;/p&gt; &lt;p&gt;Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteClusterSnapshotTest() throws ApiException {
        String snapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snapshotClusterIdentifier = null;
        DeleteClusterSnapshotResult response = api.gETDeleteClusterSnapshot(snapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snapshotClusterIdentifier);
        // TODO: test validations
    }

    /**
     * Deletes the specified cluster subnet group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteClusterSubnetGroupTest() throws ApiException {
        String clusterSubnetGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteClusterSubnetGroup(clusterSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Contains information about deleting a custom domain association for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteCustomDomainAssociationTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteCustomDomainAssociation(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteEndpointAccessTest() throws ApiException {
        String endpointName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EndpointAccess response = api.gETDeleteEndpointAccess(endpointName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon Redshift event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteEventSubscription(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified HSM client certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteHsmClientCertificateTest() throws ApiException {
        String hsmClientCertificateIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteHsmClientCertificate(hsmClientCertificateIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified Amazon Redshift HSM configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteHsmConfigurationTest() throws ApiException {
        String hsmConfigurationIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteHsmConfiguration(hsmConfigurationIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a partner integration from a cluster. Data can still flow to the cluster until the integration is deleted at the partner&#39;s website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeletePartnerTest() throws ApiException {
        String accountId = null;
        String clusterIdentifier = null;
        String databaseName = null;
        String partnerName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PartnerIntegrationOutputMessage response = api.gETDeletePartner(accountId, clusterIdentifier, databaseName, partnerName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a scheduled action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteScheduledActionTest() throws ApiException {
        String scheduledActionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteScheduledAction(scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified snapshot copy grant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteSnapshotCopyGrantTest() throws ApiException {
        String snapshotCopyGrantName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteSnapshotCopyGrant(snapshotCopyGrantName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a snapshot schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteSnapshotScheduleTest() throws ApiException {
        String scheduleIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteSnapshotSchedule(scheduleIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteTagsTest() throws ApiException {
        String resourceName = null;
        List<String> tagKeys = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteTags(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a usage limit from a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDeleteUsageLimitTest() throws ApiException {
        String usageLimitId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.gETDeleteUsageLimit(usageLimitId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of attributes attached to an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAccountAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> attributeNames = null;
        AccountAttributeList response = api.gETDescribeAccountAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, attributeNames);
        // TODO: test validations
    }

    /**
     * Describes an authentication profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeAuthenticationProfilesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String authenticationProfileName = null;
        DescribeAuthenticationProfilesResult response = api.gETDescribeAuthenticationProfiles(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authenticationProfileName);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;ClusterDbRevision&lt;/code&gt; objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterDbRevisionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        Integer maxRecords = null;
        String marker = null;
        ClusterDbRevisionsMessage response = api.gETDescribeClusterDbRevisions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all parameter groups that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String parameterGroupName = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        ClusterParameterGroupsMessage response = api.gETDescribeClusterParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, parameterGroupName, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.&lt;/p&gt; &lt;p&gt;You can specify &lt;i&gt;source&lt;/i&gt; filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from &lt;a&gt;ModifyClusterParameterGroup&lt;/a&gt;, you can specify &lt;i&gt;source&lt;/i&gt; equal to &lt;i&gt;user&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterParametersTest() throws ApiException {
        String parameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String source = null;
        Integer maxRecords = null;
        String marker = null;
        ClusterParameterGroupDetails response = api.gETDescribeClusterParameters(parameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.&lt;/p&gt; &lt;p&gt; For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all security groups that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterSecurityGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterSecurityGroupName = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        ClusterSecurityGroupMessage response = api.gETDescribeClusterSecurityGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterSecurityGroupName, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by your Amazon Web Services account. No information is returned for snapshots owned by inactive Amazon Web Services accounts.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String snapshotIdentifier = null;
        String snapshotArn = null;
        String snapshotType = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer maxRecords = null;
        String marker = null;
        String ownerAccount = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        Boolean clusterExists = null;
        List<GETDescribeClusterSnapshotsSortingEntitiesParameterInner> sortingEntities = null;
        SnapshotMessage response = api.gETDescribeClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, snapshotIdentifier, snapshotArn, snapshotType, startTime, endTime, maxRecords, marker, ownerAccount, tagKeys, tagValues, clusterExists, sortingEntities);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all subnet groups that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterSubnetGroupName = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        ClusterSubnetGroupMessage response = api.gETDescribeClusterSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterSubnetGroupName, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * Returns a list of all the available maintenance tracks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterTracksTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maintenanceTrackName = null;
        Integer maxRecords = null;
        String marker = null;
        TrackListMessage response = api.gETDescribeClusterTracks(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maintenanceTrackName, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClusterVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterVersion = null;
        String clusterParameterGroupFamily = null;
        Integer maxRecords = null;
        String marker = null;
        ClusterVersionsMessage response = api.gETDescribeClusterVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterVersion, clusterParameterGroupFamily, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all clusters that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        ClustersMessage response = api.gETDescribeClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * Contains information for custom domain associations for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeCustomDomainAssociationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String customDomainName = null;
        String customDomainCertificateArn = null;
        Integer maxRecords = null;
        String marker = null;
        CustomDomainAssociationsMessage response = api.gETDescribeCustomDomainAssociations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customDomainName, customDomainCertificateArn, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Shows the status of any inbound or outbound datashares available in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDataSharesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dataShareArn = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeDataSharesResult response = api.gETDescribeDataShares(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dataShareArn, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of datashares where the account identifier being called is a consumer account identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDataSharesForConsumerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String consumerArn = null;
        String status = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeDataSharesForConsumerResult response = api.gETDescribeDataSharesForConsumer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, consumerArn, status, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of datashares when the account identifier being called is a producer account identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDataSharesForProducerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String producerArn = null;
        String status = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeDataSharesForProducerResult response = api.gETDescribeDataSharesForProducer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, producerArn, status, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of parameter settings for the specified parameter group family.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeDefaultClusterParametersTest() throws ApiException {
        String parameterGroupFamily = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeDefaultClusterParametersResult response = api.gETDescribeDefaultClusterParameters(parameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Describes a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String resourceOwner = null;
        String endpointName = null;
        String vpcId = null;
        Integer maxRecords = null;
        String marker = null;
        EndpointAccessList response = api.gETDescribeEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, resourceOwner, endpointName, vpcId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Describes an endpoint authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEndpointAuthorizationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String account = null;
        Boolean grantee = null;
        Integer maxRecords = null;
        String marker = null;
        EndpointAuthorizationList response = api.gETDescribeEndpointAuthorization(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, account, grantee, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html\&quot;&gt;Amazon Redshift Event Notifications&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventCategoriesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceType = null;
        EventCategoriesMessage response = api.gETDescribeEventCategories(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceType);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all subscriptions that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String subscriptionName = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        EventSubscriptionsMessage response = api.gETDescribeEventSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, subscriptionName, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceIdentifier = null;
        String sourceType = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer duration = null;
        Integer maxRecords = null;
        String marker = null;
        EventsMessage response = api.gETDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all HSM client certificates that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeHsmClientCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String hsmClientCertificateIdentifier = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        HsmClientCertificateMessage response = api.gETDescribeHsmClientCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hsmClientCertificateIdentifier, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all HSM connections that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeHsmConfigurationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String hsmConfigurationIdentifier = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        HsmConfigurationMessage response = api.gETDescribeHsmConfigurations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hsmConfigurationIdentifier, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeLoggingStatusTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LoggingStatus response = api.gETDescribeLoggingStatus(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeNodeConfigurationOptionsTest() throws ApiException {
        String actionType = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String snapshotIdentifier = null;
        String snapshotArn = null;
        String ownerAccount = null;
        List<GETDescribeNodeConfigurationOptionsFilterParameterInner> filter = null;
        String marker = null;
        Integer maxRecords = null;
        NodeConfigurationOptionsMessage response = api.gETDescribeNodeConfigurationOptions(actionType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, snapshotIdentifier, snapshotArn, ownerAccount, filter, marker, maxRecords);
        // TODO: test validations
    }

    /**
     * Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific Amazon Web Services Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeOrderableClusterOptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterVersion = null;
        String nodeType = null;
        Integer maxRecords = null;
        String marker = null;
        OrderableClusterOptionsMessage response = api.gETDescribeOrderableClusterOptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterVersion, nodeType, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about the partner integrations defined for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribePartnersTest() throws ApiException {
        String accountId = null;
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String databaseName = null;
        String partnerName = null;
        DescribePartnersOutputMessage response = api.gETDescribePartners(accountId, clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, databaseName, partnerName);
        // TODO: test validations
    }

    /**
     * Returns exchange status details and associated metadata for a reserved-node exchange. Statuses include such values as in progress and requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeReservedNodeExchangeStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservedNodeId = null;
        String reservedNodeExchangeRequestId = null;
        Integer maxRecords = null;
        String marker = null;
        DescribeReservedNodeExchangeStatusOutputMessage response = api.gETDescribeReservedNodeExchangeStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedNodeId, reservedNodeExchangeRequestId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to &lt;a&gt;PurchaseReservedNodeOffering&lt;/a&gt; to reserve one or more nodes for your Amazon Redshift cluster. &lt;/p&gt; &lt;p&gt; For more information about reserved node offerings, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\&quot;&gt;Purchasing Reserved Nodes&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeReservedNodeOfferingsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservedNodeOfferingId = null;
        Integer maxRecords = null;
        String marker = null;
        ReservedNodeOfferingsMessage response = api.gETDescribeReservedNodeOfferings(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedNodeOfferingId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns the descriptions of the reserved nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeReservedNodesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String reservedNodeId = null;
        Integer maxRecords = null;
        String marker = null;
        ReservedNodesMessage response = api.gETDescribeReservedNodes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedNodeId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a &lt;code&gt;HTTP 404&lt;/code&gt; error is returned. If a resize operation was initiated and completed, the status of the resize remains as &lt;code&gt;SUCCEEDED&lt;/code&gt; until the next resize. &lt;/p&gt; &lt;p&gt;A resize operation can be requested using &lt;a&gt;ModifyCluster&lt;/a&gt; and specifying a different number or type of nodes for the cluster. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeResizeTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResizeProgressMessage response = api.gETDescribeResize(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes properties of scheduled actions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeScheduledActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String scheduledActionName = null;
        String targetActionType = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Boolean active = null;
        List<GETDescribeScheduledActionsFiltersParameterInner> filters = null;
        String marker = null;
        Integer maxRecords = null;
        ScheduledActionsMessage response = api.gETDescribeScheduledActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scheduledActionName, targetActionType, startTime, endTime, active, filters, marker, maxRecords);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of snapshot copy grants owned by the Amazon Web Services account in the destination region.&lt;/p&gt; &lt;p&gt; For more information about managing snapshot copy grants, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\&quot;&gt;Amazon Redshift Database Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeSnapshotCopyGrantsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snapshotCopyGrantName = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        SnapshotCopyGrantMessage response = api.gETDescribeSnapshotCopyGrants(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snapshotCopyGrantName, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * Returns a list of snapshot schedules. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeSnapshotSchedulesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String scheduleIdentifier = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        String marker = null;
        Integer maxRecords = null;
        DescribeSnapshotSchedulesOutputMessage response = api.gETDescribeSnapshotSchedules(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, scheduleIdentifier, tagKeys, tagValues, marker, maxRecords);
        // TODO: test validations
    }

    /**
     * Returns account level backups storage size and provisional storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeStorageTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CustomerStorageMessage response = api.gETDescribeStorage(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the status of one or more table restore requests made using the &lt;a&gt;RestoreTableFromClusterSnapshot&lt;/a&gt; API action. If you don&#39;t specify a value for the &lt;code&gt;TableRestoreRequestId&lt;/code&gt; parameter, then &lt;code&gt;DescribeTableRestoreStatus&lt;/code&gt; returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise &lt;code&gt;DescribeTableRestoreStatus&lt;/code&gt; returns the status of the table specified by &lt;code&gt;TableRestoreRequestId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTableRestoreStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String tableRestoreRequestId = null;
        Integer maxRecords = null;
        String marker = null;
        TableRestoreStatusMessage response = api.gETDescribeTableRestoreStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, tableRestoreRequestId, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.&lt;/p&gt; &lt;p&gt;The following are limitations for &lt;code&gt;DescribeTags&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You cannot specify an ARN and a resource-type value together in the same request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You cannot use the &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;Marker&lt;/code&gt; parameters together with the ARN parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MaxRecords&lt;/code&gt; parameter can be a range from 10 to 50 results to return in a request.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all resources that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String resourceName = null;
        String resourceType = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        TaggedResourceListMessage response = api.gETDescribeTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resourceName, resourceType, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If usage limit identifier, cluster identifier, and feature type are not provided, then all usage limit objects for the current account in the current region are returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If usage limit identifier is provided, then the corresponding usage limit object is returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If cluster identifier is provided, then all usage limit objects for the specified cluster are returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If cluster identifier and feature type are provided, then all usage limit objects for the combination of cluster and feature are returned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDescribeUsageLimitsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String usageLimitId = null;
        String clusterIdentifier = null;
        String featureType = null;
        Integer maxRecords = null;
        String marker = null;
        List<String> tagKeys = null;
        List<String> tagValues = null;
        UsageLimitList response = api.gETDescribeUsageLimits(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, usageLimitId, clusterIdentifier, featureType, maxRecords, marker, tagKeys, tagValues);
        // TODO: test validations
    }

    /**
     * Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDisableLoggingTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LoggingStatus response = api.gETDisableLogging(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disables the automatic copying of snapshots from one region to another region for a specified cluster.&lt;/p&gt; &lt;p&gt;If your cluster and its snapshots are encrypted using an encrypted symmetric key from Key Management Service, use &lt;a&gt;DeleteSnapshotCopyGrant&lt;/a&gt; to delete the grant that grants Amazon Redshift permission to the key in the destination region. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDisableSnapshotCopyTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableSnapshotCopyResult response = api.gETDisableSnapshotCopy(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * From a datashare consumer account, remove association for the specified datashare. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETDisassociateDataShareConsumerTest() throws ApiException {
        String dataShareArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean disassociateEntireAccount = null;
        String consumerArn = null;
        String consumerRegion = null;
        DataShare response = api.gETDisassociateDataShareConsumer(dataShareArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateEntireAccount, consumerArn, consumerRegion);
        // TODO: test validations
    }

    /**
     * Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETEnableLoggingTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String bucketName = null;
        String s3KeyPrefix = null;
        String logDestinationType = null;
        List<String> logExports = null;
        LoggingStatus response = api.gETEnableLogging(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, bucketName, s3KeyPrefix, logDestinationType, logExports);
        // TODO: test validations
    }

    /**
     * Enables the automatic copy of snapshots from one region to another region for a specified cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETEnableSnapshotCopyTest() throws ApiException {
        String clusterIdentifier = null;
        String destinationRegion = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer retentionPeriod = null;
        String snapshotCopyGrantName = null;
        Integer manualSnapshotRetentionPeriod = null;
        EnableSnapshotCopyResult response = api.gETEnableSnapshotCopy(clusterIdentifier, destinationRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retentionPeriod, snapshotCopyGrantName, manualSnapshotRetentionPeriod);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with &lt;code&gt;IAM:&lt;/code&gt; if &lt;code&gt;AutoCreate&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;IAMA:&lt;/code&gt; if &lt;code&gt;AutoCreate&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html\&quot;&gt;Using IAM Authentication to Generate Database User Credentials&lt;/a&gt; in the Amazon Redshift Cluster Management Guide.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) user or role that runs GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources\&quot;&gt;Resource Policies for GetClusterCredentials&lt;/a&gt; in the Amazon Redshift Cluster Management Guide.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;DbGroups&lt;/code&gt; parameter is specified, the IAM policy must allow the &lt;code&gt;redshift:JoinGroup&lt;/code&gt; action with access to the listed &lt;code&gt;dbgroups&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;In addition, if the &lt;code&gt;AutoCreate&lt;/code&gt; parameter is set to &lt;code&gt;True&lt;/code&gt;, then the policy must include the &lt;code&gt;redshift:CreateClusterUser&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;DbName&lt;/code&gt; parameter is specified, the IAM policy must allow access to the resource &lt;code&gt;dbname&lt;/code&gt; for the specified database name. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetClusterCredentialsTest() throws ApiException {
        String dbUser = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbName = null;
        String clusterIdentifier = null;
        Integer durationSeconds = null;
        Boolean autoCreate = null;
        List<String> dbGroups = null;
        String customDomainName = null;
        ClusterCredentials response = api.gETGetClusterCredentials(dbUser, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, clusterIdentifier, durationSeconds, autoCreate, dbGroups, customDomainName);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a database user name and temporary password with temporary authorization to log in to an Amazon Redshift database. The database user is mapped 1:1 to the source Identity and Access Management (IAM) identity. For more information about IAM identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html\&quot;&gt;IAM Identities (users, user groups, and roles)&lt;/a&gt; in the Amazon Web Services Identity and Access Management User Guide.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) identity that runs this operation must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html\&quot;&gt;Using identity-based policies (IAM policies)&lt;/a&gt; in the Amazon Redshift Cluster Management Guide. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetClusterCredentialsWithIAMTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dbName = null;
        String clusterIdentifier = null;
        Integer durationSeconds = null;
        String customDomainName = null;
        ClusterExtendedCredentials response = api.gETGetClusterCredentialsWithIAM(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dbName, clusterIdentifier, durationSeconds, customDomainName);
        // TODO: test validations
    }

    /**
     * Gets the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node offering. Details include the node type, the price, the node count, and the offering type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetReservedNodeExchangeConfigurationOptionsTest() throws ApiException {
        String actionType = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String snapshotIdentifier = null;
        Integer maxRecords = null;
        String marker = null;
        GetReservedNodeExchangeConfigurationOptionsOutputMessage response = api.gETGetReservedNodeExchangeConfigurationOptions(actionType, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, snapshotIdentifier, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETGetReservedNodeExchangeOfferingsTest() throws ApiException {
        String reservedNodeId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxRecords = null;
        String marker = null;
        GetReservedNodeExchangeOfferingsOutputMessage response = api.gETGetReservedNodeExchangeOfferings(reservedNodeId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * This operation is retired. Calling this operation does not change AQUA configuration. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyAquaConfigurationTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String aquaConfigurationStatus = null;
        ModifyAquaOutputMessage response = api.gETModifyAquaConfiguration(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, aquaConfigurationStatus);
        // TODO: test validations
    }

    /**
     * Modifies an authentication profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyAuthenticationProfileTest() throws ApiException {
        String authenticationProfileName = null;
        String authenticationProfileContent = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyAuthenticationProfileResult response = api.gETModifyAuthenticationProfile(authenticationProfileName, authenticationProfileContent, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the settings for a cluster.&lt;/p&gt; &lt;p&gt;You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.&lt;/p&gt; &lt;p&gt;You can add another security or parameter group, or change the admin user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterType = null;
        String nodeType = null;
        Integer numberOfNodes = null;
        List<String> clusterSecurityGroups = null;
        List<String> vpcSecurityGroupIds = null;
        String masterUserPassword = null;
        String clusterParameterGroupName = null;
        Integer automatedSnapshotRetentionPeriod = null;
        Integer manualSnapshotRetentionPeriod = null;
        String preferredMaintenanceWindow = null;
        String clusterVersion = null;
        Boolean allowVersionUpgrade = null;
        String hsmClientCertificateIdentifier = null;
        String hsmConfigurationIdentifier = null;
        String newClusterIdentifier = null;
        Boolean publiclyAccessible = null;
        String elasticIp = null;
        Boolean enhancedVpcRouting = null;
        String maintenanceTrackName = null;
        Boolean encrypted = null;
        String kmsKeyId = null;
        Boolean availabilityZoneRelocation = null;
        String availabilityZone = null;
        Integer port = null;
        ModifyClusterResult response = api.gETModifyCluster(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterType, nodeType, numberOfNodes, clusterSecurityGroups, vpcSecurityGroupIds, masterUserPassword, clusterParameterGroupName, automatedSnapshotRetentionPeriod, manualSnapshotRetentionPeriod, preferredMaintenanceWindow, clusterVersion, allowVersionUpgrade, hsmClientCertificateIdentifier, hsmConfigurationIdentifier, newClusterIdentifier, publiclyAccessible, elasticIp, enhancedVpcRouting, maintenanceTrackName, encrypted, kmsKeyId, availabilityZoneRelocation, availabilityZone, port);
        // TODO: test validations
    }

    /**
     * Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterDbRevisionTest() throws ApiException {
        String clusterIdentifier = null;
        String revisionTarget = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterDbRevisionResult response = api.gETModifyClusterDbRevision(clusterIdentifier, revisionTarget, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.&lt;/p&gt; &lt;p&gt;The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html\&quot;&gt;Quotas and limits&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterIamRolesTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> addIamRoles = null;
        List<String> removeIamRoles = null;
        String defaultIamRoleArn = null;
        ModifyClusterIamRolesResult response = api.gETModifyClusterIamRoles(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addIamRoles, removeIamRoles, defaultIamRoleArn);
        // TODO: test validations
    }

    /**
     * Modifies the maintenance settings of a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterMaintenanceTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean deferMaintenance = null;
        String deferMaintenanceIdentifier = null;
        OffsetDateTime deferMaintenanceStartTime = null;
        OffsetDateTime deferMaintenanceEndTime = null;
        Integer deferMaintenanceDuration = null;
        ModifyClusterMaintenanceResult response = api.gETModifyClusterMaintenance(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deferMaintenance, deferMaintenanceIdentifier, deferMaintenanceStartTime, deferMaintenanceEndTime, deferMaintenanceDuration);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the parameters of a parameter group. For the parameters parameter, it can&#39;t contain ASCII characters.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterParameterGroupTest() throws ApiException {
        String parameterGroupName = null;
        List<GETModifyClusterParameterGroupParametersParameterInner> parameters = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ClusterParameterGroupNameMessage response = api.gETModifyClusterParameterGroup(parameterGroupName, parameters, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the settings for a snapshot.&lt;/p&gt; &lt;p&gt;This exanmple modifies the manual retention period setting for a cluster snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterSnapshotTest() throws ApiException {
        String snapshotIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer manualSnapshotRetentionPeriod = null;
        Boolean force = null;
        ModifyClusterSnapshotResult response = api.gETModifyClusterSnapshot(snapshotIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, manualSnapshotRetentionPeriod, force);
        // TODO: test validations
    }

    /**
     * Modifies a snapshot schedule for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterSnapshotScheduleTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String scheduleIdentifier = null;
        Boolean disassociateSchedule = null;
        api.gETModifyClusterSnapshotSchedule(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, scheduleIdentifier, disassociateSchedule);
        // TODO: test validations
    }

    /**
     * Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyClusterSubnetGroupTest() throws ApiException {
        String clusterSubnetGroupName = null;
        List<String> subnetIds = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String description = null;
        ModifyClusterSubnetGroupResult response = api.gETModifyClusterSubnetGroup(clusterSubnetGroupName, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, description);
        // TODO: test validations
    }

    /**
     * Contains information for changing a custom domain association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyCustomDomainAssociationTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String customDomainName = null;
        String customDomainCertificateArn = null;
        ModifyCustomDomainAssociationResult response = api.gETModifyCustomDomainAssociation(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, customDomainName, customDomainCertificateArn);
        // TODO: test validations
    }

    /**
     * Modifies a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyEndpointAccessTest() throws ApiException {
        String endpointName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> vpcSecurityGroupIds = null;
        EndpointAccess response = api.gETModifyEndpointAccess(endpointName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, vpcSecurityGroupIds);
        // TODO: test validations
    }

    /**
     * Modifies an existing Amazon Redshift event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyEventSubscriptionTest() throws ApiException {
        String subscriptionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snsTopicArn = null;
        String sourceType = null;
        List<String> sourceIds = null;
        List<String> eventCategories = null;
        String severity = null;
        Boolean enabled = null;
        ModifyEventSubscriptionResult response = api.gETModifyEventSubscription(subscriptionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snsTopicArn, sourceType, sourceIds, eventCategories, severity, enabled);
        // TODO: test validations
    }

    /**
     * Modifies a scheduled action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyScheduledActionTest() throws ApiException {
        String scheduledActionName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GETCreateScheduledActionTargetActionParameter targetAction = null;
        String schedule = null;
        String iamRole = null;
        String scheduledActionDescription = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Boolean enable = null;
        ScheduledAction response = api.gETModifyScheduledAction(scheduledActionName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetAction, schedule, iamRole, scheduledActionDescription, startTime, endTime, enable);
        // TODO: test validations
    }

    /**
     * Modifies the number of days to retain snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifySnapshotCopyRetentionPeriodTest() throws ApiException {
        String clusterIdentifier = null;
        Integer retentionPeriod = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean manual = null;
        ModifySnapshotCopyRetentionPeriodResult response = api.gETModifySnapshotCopyRetentionPeriod(clusterIdentifier, retentionPeriod, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, manual);
        // TODO: test validations
    }

    /**
     * Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifySnapshotScheduleTest() throws ApiException {
        String scheduleIdentifier = null;
        List<String> scheduleDefinitions = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SnapshotSchedule response = api.gETModifySnapshotSchedule(scheduleIdentifier, scheduleDefinitions, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies a usage limit in a cluster. You can&#39;t modify the feature type or period of a usage limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETModifyUsageLimitTest() throws ApiException {
        String usageLimitId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer amount = null;
        String breachAction = null;
        UsageLimit response = api.gETModifyUsageLimit(usageLimitId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, amount, breachAction);
        // TODO: test validations
    }

    /**
     * Pauses a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPauseClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PauseClusterResult response = api.gETPauseCluster(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the &lt;a&gt;DescribeReservedNodeOfferings&lt;/a&gt; API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. &lt;/p&gt; &lt;p&gt; For more information about reserved node offerings, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\&quot;&gt;Purchasing Reserved Nodes&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETPurchaseReservedNodeOfferingTest() throws ApiException {
        String reservedNodeOfferingId = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer nodeCount = null;
        PurchaseReservedNodeOfferingResult response = api.gETPurchaseReservedNodeOffering(reservedNodeOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nodeCount);
        // TODO: test validations
    }

    /**
     * Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to &lt;code&gt;rebooting&lt;/code&gt;. A cluster event is created when the reboot is completed. Any pending cluster modifications (see &lt;a&gt;ModifyCluster&lt;/a&gt;) are applied at this reboot. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRebootClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootClusterResult response = api.gETRebootCluster(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * From a datashare consumer account, rejects the specified datashare.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRejectDataShareTest() throws ApiException {
        String dataShareArn = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DataShare response = api.gETRejectDataShare(dataShareArn, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to \&quot;engine-default\&quot;. To reset the entire parameter group specify the &lt;i&gt;ResetAllParameters&lt;/i&gt; parameter. For parameter changes to take effect you must reboot any associated clusters. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResetClusterParameterGroupTest() throws ApiException {
        String parameterGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean resetAllParameters = null;
        List<GETModifyClusterParameterGroupParametersParameterInner> parameters = null;
        ClusterParameterGroupNameMessage response = api.gETResetClusterParameterGroup(parameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameters);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the size of the cluster. You can change the cluster&#39;s type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. &lt;/p&gt; &lt;p&gt;Elastic resize operations have the following restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can only resize clusters of the following types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;dc1.large (if your cluster is in a VPC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;dc1.8xlarge (if your cluster is in a VPC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;dc2.large&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;dc2.8xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ds2.xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ds2.8xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ra3.xlplus&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ra3.4xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ra3.16xlarge&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The type of nodes that you add must match the node type for the cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResizeClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterType = null;
        String nodeType = null;
        Integer numberOfNodes = null;
        Boolean classic = null;
        String reservedNodeId = null;
        String targetReservedNodeOfferingId = null;
        ResizeClusterResult response = api.gETResizeCluster(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterType, nodeType, numberOfNodes, classic, reservedNodeId, targetReservedNodeOfferingId);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the &lt;a&gt;ModifyCluster&lt;/a&gt; API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.&lt;/p&gt; &lt;p&gt;If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRestoreFromClusterSnapshotTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snapshotIdentifier = null;
        String snapshotArn = null;
        String snapshotClusterIdentifier = null;
        Integer port = null;
        String availabilityZone = null;
        Boolean allowVersionUpgrade = null;
        String clusterSubnetGroupName = null;
        Boolean publiclyAccessible = null;
        String ownerAccount = null;
        String hsmClientCertificateIdentifier = null;
        String hsmConfigurationIdentifier = null;
        String elasticIp = null;
        String clusterParameterGroupName = null;
        List<String> clusterSecurityGroups = null;
        List<String> vpcSecurityGroupIds = null;
        String preferredMaintenanceWindow = null;
        Integer automatedSnapshotRetentionPeriod = null;
        Integer manualSnapshotRetentionPeriod = null;
        String kmsKeyId = null;
        String nodeType = null;
        Boolean enhancedVpcRouting = null;
        String additionalInfo = null;
        List<String> iamRoles = null;
        String maintenanceTrackName = null;
        String snapshotScheduleIdentifier = null;
        Integer numberOfNodes = null;
        Boolean availabilityZoneRelocation = null;
        String aquaConfigurationStatus = null;
        String defaultIamRoleArn = null;
        String reservedNodeId = null;
        String targetReservedNodeOfferingId = null;
        Boolean encrypted = null;
        RestoreFromClusterSnapshotResult response = api.gETRestoreFromClusterSnapshot(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snapshotIdentifier, snapshotArn, snapshotClusterIdentifier, port, availabilityZone, allowVersionUpgrade, clusterSubnetGroupName, publiclyAccessible, ownerAccount, hsmClientCertificateIdentifier, hsmConfigurationIdentifier, elasticIp, clusterParameterGroupName, clusterSecurityGroups, vpcSecurityGroupIds, preferredMaintenanceWindow, automatedSnapshotRetentionPeriod, manualSnapshotRetentionPeriod, kmsKeyId, nodeType, enhancedVpcRouting, additionalInfo, iamRoles, maintenanceTrackName, snapshotScheduleIdentifier, numberOfNodes, availabilityZoneRelocation, aquaConfigurationStatus, defaultIamRoleArn, reservedNodeId, targetReservedNodeOfferingId, encrypted);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.&lt;/p&gt; &lt;p&gt;You cannot use &lt;code&gt;RestoreTableFromClusterSnapshot&lt;/code&gt; to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call &lt;code&gt;RestoreTableFromClusterSnapshot&lt;/code&gt;. When you have renamed your original table, then you can pass the original name of the table as the &lt;code&gt;NewTableName&lt;/code&gt; parameter value in the call to &lt;code&gt;RestoreTableFromClusterSnapshot&lt;/code&gt;. This way, you can replace the original table with the table created from the snapshot.&lt;/p&gt; &lt;p&gt;You can&#39;t use this operation to restore tables with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved\&quot;&gt;interleaved sort keys&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRestoreTableFromClusterSnapshotTest() throws ApiException {
        String clusterIdentifier = null;
        String snapshotIdentifier = null;
        String sourceDatabaseName = null;
        String sourceTableName = null;
        String newTableName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sourceSchemaName = null;
        String targetDatabaseName = null;
        String targetSchemaName = null;
        Boolean enableCaseSensitiveIdentifier = null;
        RestoreTableFromClusterSnapshotResult response = api.gETRestoreTableFromClusterSnapshot(clusterIdentifier, snapshotIdentifier, sourceDatabaseName, sourceTableName, newTableName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceSchemaName, targetDatabaseName, targetSchemaName, enableCaseSensitiveIdentifier);
        // TODO: test validations
    }

    /**
     * Resumes a paused cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETResumeClusterTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResumeClusterResult response = api.gETResumeCluster(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see &lt;a&gt;AuthorizeClusterSecurityGroupIngress&lt;/a&gt;. For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRevokeClusterSecurityGroupIngressTest() throws ApiException {
        String clusterSecurityGroupName = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String CIDRIP = null;
        String ec2SecurityGroupName = null;
        String ec2SecurityGroupOwnerId = null;
        RevokeClusterSecurityGroupIngressResult response = api.gETRevokeClusterSecurityGroupIngress(clusterSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, CIDRIP, ec2SecurityGroupName, ec2SecurityGroupOwnerId);
        // TODO: test validations
    }

    /**
     * Revokes access to a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRevokeEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clusterIdentifier = null;
        String account = null;
        List<String> vpcIds = null;
        Boolean force = null;
        EndpointAuthorization response = api.gETRevokeEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clusterIdentifier, account, vpcIds, force);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the ability of the specified Amazon Web Services account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRevokeSnapshotAccessTest() throws ApiException {
        String accountWithRestoreAccess = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String snapshotIdentifier = null;
        String snapshotArn = null;
        String snapshotClusterIdentifier = null;
        RevokeSnapshotAccessResult response = api.gETRevokeSnapshotAccess(accountWithRestoreAccess, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, snapshotIdentifier, snapshotArn, snapshotClusterIdentifier);
        // TODO: test validations
    }

    /**
     * Rotates the encryption keys for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETRotateEncryptionKeyTest() throws ApiException {
        String clusterIdentifier = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RotateEncryptionKeyResult response = api.gETRotateEncryptionKey(clusterIdentifier, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the status of a partner integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gETUpdatePartnerStatusTest() throws ApiException {
        String accountId = null;
        String clusterIdentifier = null;
        String databaseName = null;
        String partnerName = null;
        String status = null;
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String statusMessage = null;
        PartnerIntegrationOutputMessage response = api.gETUpdatePartnerStatus(accountId, clusterIdentifier, databaseName, partnerName, status, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, statusMessage);
        // TODO: test validations
    }

    /**
     * Exchanges a DC1 Reserved Node for a DC2 Reserved Node with no changes to the configuration (term, payment type, or number of nodes) and no additional costs. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAcceptReservedNodeExchangeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AcceptReservedNodeExchangeInputMessage acceptReservedNodeExchangeInputMessage = null;
        AcceptReservedNodeExchangeOutputMessage response = api.pOSTAcceptReservedNodeExchange(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, acceptReservedNodeExchangeInputMessage);
        // TODO: test validations
    }

    /**
     * Adds a partner integration to a cluster. This operation authorizes a partner to push status updates for the specified database. To complete the integration, you also set up the integration on the partner website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAddPartnerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PartnerIntegrationInputMessage partnerIntegrationInputMessage = null;
        PartnerIntegrationOutputMessage response = api.pOSTAddPartner(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, partnerIntegrationInputMessage);
        // TODO: test validations
    }

    /**
     * From a datashare consumer account, associates a datashare with the account (AssociateEntireAccount) or the specified namespace (ConsumerArn). If you make this association, the consumer can consume the datashare.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAssociateDataShareConsumerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssociateDataShareConsumerMessage associateDataShareConsumerMessage = null;
        DataShare response = api.pOSTAssociateDataShareConsumer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, associateDataShareConsumerMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds an inbound (ingress) rule to an Amazon Redshift security group. Depending on whether the application accessing your cluster is running on the Internet or an Amazon EC2 instance, you can authorize inbound access to either a Classless Interdomain Routing (CIDR)/Internet Protocol (IP) range or to an Amazon EC2 security group. You can add as many as 20 ingress rules to an Amazon Redshift security group.&lt;/p&gt; &lt;p&gt;If you authorize access to an Amazon EC2 security group, specify &lt;i&gt;EC2SecurityGroupName&lt;/i&gt; and &lt;i&gt;EC2SecurityGroupOwnerId&lt;/i&gt;. The Amazon EC2 security group and Amazon Redshift cluster must be in the same Amazon Web Services Region. &lt;/p&gt; &lt;p&gt;If you authorize access to a CIDR/IP address range, specify &lt;i&gt;CIDRIP&lt;/i&gt;. For an overview of CIDR blocks, see the Wikipedia article on &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing\&quot;&gt;Classless Inter-Domain Routing&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;You must also associate the security group with a cluster so that clients running on these IP addresses or the EC2 instance are authorized to connect to the cluster. For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Working with Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAuthorizeClusterSecurityGroupIngressTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeClusterSecurityGroupIngressMessage authorizeClusterSecurityGroupIngressMessage = null;
        AuthorizeClusterSecurityGroupIngressResult response = api.pOSTAuthorizeClusterSecurityGroupIngress(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeClusterSecurityGroupIngressMessage);
        // TODO: test validations
    }

    /**
     * From a data producer account, authorizes the sharing of a datashare with one or more consumer accounts or managing entities. To authorize a datashare for a data consumer, the producer account must have the correct access permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAuthorizeDataShareTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeDataShareMessage authorizeDataShareMessage = null;
        DataShare response = api.pOSTAuthorizeDataShare(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeDataShareMessage);
        // TODO: test validations
    }

    /**
     * Grants access to a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAuthorizeEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeEndpointAccessMessage authorizeEndpointAccessMessage = null;
        EndpointAuthorization response = api.pOSTAuthorizeEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeEndpointAccessMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Authorizes the specified Amazon Web Services account to restore the specified snapshot.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTAuthorizeSnapshotAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AuthorizeSnapshotAccessMessage authorizeSnapshotAccessMessage = null;
        AuthorizeSnapshotAccessResult response = api.pOSTAuthorizeSnapshotAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeSnapshotAccessMessage);
        // TODO: test validations
    }

    /**
     * Deletes a set of cluster snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTBatchDeleteClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteClusterSnapshotsRequest batchDeleteClusterSnapshotsRequest = null;
        BatchDeleteClusterSnapshotsResult response = api.pOSTBatchDeleteClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchDeleteClusterSnapshotsRequest);
        // TODO: test validations
    }

    /**
     * Modifies the settings for a set of cluster snapshots.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTBatchModifyClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchModifyClusterSnapshotsMessage batchModifyClusterSnapshotsMessage = null;
        BatchModifyClusterSnapshotsOutputMessage response = api.pOSTBatchModifyClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchModifyClusterSnapshotsMessage);
        // TODO: test validations
    }

    /**
     * Cancels a resize operation for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCancelResizeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelResizeMessage cancelResizeMessage = null;
        ResizeProgressMessage response = api.pOSTCancelResize(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cancelResizeMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Copies the specified automated cluster snapshot to a new manual cluster snapshot. The source must be an automated snapshot and it must be in the available state.&lt;/p&gt; &lt;p&gt;When you delete a cluster, Amazon Redshift deletes any automated snapshots of the cluster. Also, when the retention period of the snapshot expires, Amazon Redshift automatically deletes it. If you want to keep an automated snapshot for a longer period, you can make a manual copy of the snapshot. Manual snapshots are retained until you delete them.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCopyClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CopyClusterSnapshotMessage copyClusterSnapshotMessage = null;
        CopyClusterSnapshotResult response = api.pOSTCopyClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copyClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Creates an authentication profile with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateAuthenticationProfileTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAuthenticationProfileMessage createAuthenticationProfileMessage = null;
        CreateAuthenticationProfileResult response = api.pOSTCreateAuthenticationProfile(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createAuthenticationProfileMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster with the specified parameters.&lt;/p&gt; &lt;p&gt;To create a cluster in Virtual Private Cloud (VPC), you must provide a cluster subnet group name. The cluster subnet group identifies the subnets of your VPC that Amazon Redshift uses when creating the cluster. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterMessage createClusterMessage = null;
        CreateClusterResult response = api.pOSTCreateCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Redshift parameter group.&lt;/p&gt; &lt;p&gt;Creating parameter groups is independent of creating clusters. You can associate a cluster with a parameter group when you create the cluster. You can also associate an existing cluster with a parameter group after the cluster is created by using &lt;a&gt;ModifyCluster&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Parameters in the parameter group define specific behavior that applies to the databases you create on the cluster. For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterParameterGroupMessage createClusterParameterGroupMessage = null;
        CreateClusterParameterGroupResult response = api.pOSTCreateClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon Redshift security group. You use security groups to control access to non-VPC clusters.&lt;/p&gt; &lt;p&gt; For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateClusterSecurityGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterSecurityGroupMessage createClusterSecurityGroupMessage = null;
        CreateClusterSecurityGroupResult response = api.pOSTCreateClusterSecurityGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createClusterSecurityGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a manual snapshot of the specified cluster. The cluster must be in the &lt;code&gt;available&lt;/code&gt; state. &lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterSnapshotMessage createClusterSnapshotMessage = null;
        CreateClusterSnapshotResult response = api.pOSTCreateClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.&lt;/p&gt; &lt;p&gt; For information about subnet groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-cluster-subnet-groups.html\&quot;&gt;Amazon Redshift Cluster Subnet Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateClusterSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterSubnetGroupMessage createClusterSubnetGroupMessage = null;
        CreateClusterSubnetGroupResult response = api.pOSTCreateClusterSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createClusterSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Used to create a custom domain name for a cluster. Properties include the custom domain name, the cluster the custom domain is associated with, and the certificate Amazon Resource Name (ARN).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateCustomDomainAssociationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCustomDomainAssociationMessage createCustomDomainAssociationMessage = null;
        CreateCustomDomainAssociationResult response = api.pOSTCreateCustomDomainAssociation(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCustomDomainAssociationMessage);
        // TODO: test validations
    }

    /**
     * Creates a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEndpointAccessMessage createEndpointAccessMessage = null;
        EndpointAccess response = api.pOSTCreateEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEndpointAccessMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Amazon Redshift event notification subscription. This action requires an ARN (Amazon Resource Name) of an Amazon SNS topic created by either the Amazon Redshift console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.&lt;/p&gt; &lt;p&gt;You can specify the source type, and lists of Amazon Redshift source IDs, event categories, and event severities. Notifications will be sent for all events you want that match those criteria. For example, you can specify source type &#x3D; cluster, source ID &#x3D; my-cluster-1 and mycluster2, event categories &#x3D; Availability, Backup, and severity &#x3D; ERROR. The subscription will only send notifications for those ERROR events in the Availability and Backup categories for the specified clusters.&lt;/p&gt; &lt;p&gt;If you specify both the source type and source IDs, such as source type &#x3D; cluster and source identifier &#x3D; my-cluster-1, notifications will be sent for all the cluster events for my-cluster-1. If you specify a source type but do not specify a source identifier, you will receive notice of the events for the objects of that type in your Amazon Web Services account. If you do not specify either the SourceType nor the SourceIdentifier, you will be notified of events generated from all Amazon Redshift sources belonging to your Amazon Web Services account. You must specify a source type if you specify a source ID.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventSubscriptionMessage createEventSubscriptionMessage = null;
        CreateEventSubscriptionResult response = api.pOSTCreateEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an HSM client certificate that an Amazon Redshift cluster will use to connect to the client&#39;s HSM in order to store and retrieve the keys used to encrypt the cluster databases.&lt;/p&gt; &lt;p&gt;The command returns a public key, which you must store in the HSM. In addition to creating the HSM certificate, you must create an Amazon Redshift HSM configuration that provides a cluster the information needed to store and use encryption keys in the HSM. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html#working-with-HSM\&quot;&gt;Hardware Security Modules&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateHsmClientCertificateTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHsmClientCertificateMessage createHsmClientCertificateMessage = null;
        CreateHsmClientCertificateResult response = api.pOSTCreateHsmClientCertificate(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createHsmClientCertificateMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an HSM configuration that contains the information required by an Amazon Redshift cluster to store and use database encryption keys in a Hardware Security Module (HSM). After creating the HSM configuration, you can specify it as a parameter when creating a cluster. The cluster will then store its encryption keys in the HSM.&lt;/p&gt; &lt;p&gt;In addition to creating an HSM configuration, you must also create an HSM client certificate. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-HSM.html\&quot;&gt;Hardware Security Modules&lt;/a&gt; in the Amazon Redshift Cluster Management Guide.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateHsmConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateHsmConfigurationMessage createHsmConfigurationMessage = null;
        CreateHsmConfigurationResult response = api.pOSTCreateHsmConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createHsmConfigurationMessage);
        // TODO: test validations
    }

    /**
     * Creates a scheduled action. A scheduled action contains a schedule and an Amazon Redshift API action. For example, you can create a schedule of when to run the &lt;code&gt;ResizeCluster&lt;/code&gt; API operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateScheduledActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateScheduledActionMessage createScheduledActionMessage = null;
        ScheduledAction response = api.pOSTCreateScheduledAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createScheduledActionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a snapshot copy grant that permits Amazon Redshift to use an encrypted symmetric key from Key Management Service (KMS) to encrypt copied snapshots in a destination region.&lt;/p&gt; &lt;p&gt; For more information about managing snapshot copy grants, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\&quot;&gt;Amazon Redshift Database Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateSnapshotCopyGrantTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSnapshotCopyGrantMessage createSnapshotCopyGrantMessage = null;
        CreateSnapshotCopyGrantResult response = api.pOSTCreateSnapshotCopyGrant(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotCopyGrantMessage);
        // TODO: test validations
    }

    /**
     * Create a snapshot schedule that can be associated to a cluster and which overrides the default system backup schedule. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateSnapshotScheduleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSnapshotScheduleMessage createSnapshotScheduleMessage = null;
        SnapshotSchedule response = api.pOSTCreateSnapshotSchedule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotScheduleMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds tags to a cluster.&lt;/p&gt; &lt;p&gt;A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, you will receive an error and the attempt will fail.&lt;/p&gt; &lt;p&gt;If you specify a key that already exists for the resource, the value for that key will be updated with the new value.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTagsMessage createTagsMessage = null;
        api.pOSTCreateTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createTagsMessage);
        // TODO: test validations
    }

    /**
     * Creates a usage limit for a specified Amazon Redshift feature on a cluster. The usage limit is identified by the returned usage limit identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTCreateUsageLimitTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUsageLimitMessage createUsageLimitMessage = null;
        UsageLimit response = api.pOSTCreateUsageLimit(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUsageLimitMessage);
        // TODO: test validations
    }

    /**
     * From a datashare producer account, removes authorization from the specified datashare. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeauthorizeDataShareTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeauthorizeDataShareMessage deauthorizeDataShareMessage = null;
        DataShare response = api.pOSTDeauthorizeDataShare(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deauthorizeDataShareMessage);
        // TODO: test validations
    }

    /**
     * Deletes an authentication profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteAuthenticationProfileTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAuthenticationProfileMessage deleteAuthenticationProfileMessage = null;
        DeleteAuthenticationProfileResult response = api.pOSTDeleteAuthenticationProfile(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteAuthenticationProfileMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a previously provisioned cluster without its final snapshot being created. A successful response from the web service indicates that the request was received correctly. Use &lt;a&gt;DescribeClusters&lt;/a&gt; to monitor the status of the deletion. The delete operation cannot be canceled or reverted once submitted. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you want to shut down the cluster and retain it for future use, set &lt;i&gt;SkipFinalClusterSnapshot&lt;/i&gt; to &lt;code&gt;false&lt;/code&gt; and specify a name for &lt;i&gt;FinalClusterSnapshotIdentifier&lt;/i&gt;. You can later restore this snapshot to resume using the cluster. If a final cluster snapshot is requested, the status of the cluster will be \&quot;final-snapshot\&quot; while the snapshot is being taken, then it&#39;s \&quot;deleting\&quot; once Amazon Redshift begins deleting the cluster. &lt;/p&gt; &lt;p&gt; For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteClusterMessage deleteClusterMessage = null;
        DeleteClusterResult response = api.pOSTDeleteCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a specified Amazon Redshift parameter group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a parameter group if it is associated with a cluster.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteClusterParameterGroupMessage deleteClusterParameterGroupMessage = null;
        api.pOSTDeleteClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Amazon Redshift security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a security group that is associated with any clusters. You cannot delete the default security group.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteClusterSecurityGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteClusterSecurityGroupMessage deleteClusterSecurityGroupMessage = null;
        api.pOSTDeleteClusterSecurityGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteClusterSecurityGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified manual snapshot. The snapshot must be in the &lt;code&gt;available&lt;/code&gt; state, with no other users authorized to access the snapshot. &lt;/p&gt; &lt;p&gt;Unlike automated snapshots, manual snapshots are retained even after you delete your cluster. Amazon Redshift does not delete your manual snapshots. You must delete manual snapshot explicitly to avoid getting charged. If other accounts are authorized to access the snapshot, you must revoke all of the authorizations before you can delete the snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteClusterSnapshotMessage deleteClusterSnapshotMessage = null;
        DeleteClusterSnapshotResult response = api.pOSTDeleteClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Deletes the specified cluster subnet group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteClusterSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteClusterSubnetGroupMessage deleteClusterSubnetGroupMessage = null;
        api.pOSTDeleteClusterSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteClusterSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Contains information about deleting a custom domain association for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteCustomDomainAssociationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCustomDomainAssociationMessage deleteCustomDomainAssociationMessage = null;
        api.pOSTDeleteCustomDomainAssociation(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCustomDomainAssociationMessage);
        // TODO: test validations
    }

    /**
     * Deletes a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEndpointAccessMessage deleteEndpointAccessMessage = null;
        EndpointAccess response = api.pOSTDeleteEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEndpointAccessMessage);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon Redshift event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventSubscriptionMessage deleteEventSubscriptionMessage = null;
        api.pOSTDeleteEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Deletes the specified HSM client certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteHsmClientCertificateTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteHsmClientCertificateMessage deleteHsmClientCertificateMessage = null;
        api.pOSTDeleteHsmClientCertificate(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteHsmClientCertificateMessage);
        // TODO: test validations
    }

    /**
     * Deletes the specified Amazon Redshift HSM configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteHsmConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteHsmConfigurationMessage deleteHsmConfigurationMessage = null;
        api.pOSTDeleteHsmConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteHsmConfigurationMessage);
        // TODO: test validations
    }

    /**
     * Deletes a partner integration from a cluster. Data can still flow to the cluster until the integration is deleted at the partner&#39;s website.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeletePartnerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PartnerIntegrationInputMessage partnerIntegrationInputMessage = null;
        PartnerIntegrationOutputMessage response = api.pOSTDeletePartner(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, partnerIntegrationInputMessage);
        // TODO: test validations
    }

    /**
     * Deletes a scheduled action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteScheduledActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteScheduledActionMessage deleteScheduledActionMessage = null;
        api.pOSTDeleteScheduledAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteScheduledActionMessage);
        // TODO: test validations
    }

    /**
     * Deletes the specified snapshot copy grant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteSnapshotCopyGrantTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSnapshotCopyGrantMessage deleteSnapshotCopyGrantMessage = null;
        api.pOSTDeleteSnapshotCopyGrant(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotCopyGrantMessage);
        // TODO: test validations
    }

    /**
     * Deletes a snapshot schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteSnapshotScheduleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSnapshotScheduleMessage deleteSnapshotScheduleMessage = null;
        api.pOSTDeleteSnapshotSchedule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotScheduleMessage);
        // TODO: test validations
    }

    /**
     * Deletes tags from a resource. You must provide the ARN of the resource from which you want to delete the tag or tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteTagsMessage deleteTagsMessage = null;
        api.pOSTDeleteTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteTagsMessage);
        // TODO: test validations
    }

    /**
     * Deletes a usage limit from a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDeleteUsageLimitTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteUsageLimitMessage deleteUsageLimitMessage = null;
        api.pOSTDeleteUsageLimit(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUsageLimitMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of attributes attached to an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAccountAttributesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountAttributesMessage describeAccountAttributesMessage = null;
        AccountAttributeList response = api.pOSTDescribeAccountAttributes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAccountAttributesMessage);
        // TODO: test validations
    }

    /**
     * Describes an authentication profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeAuthenticationProfilesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAuthenticationProfilesMessage describeAuthenticationProfilesMessage = null;
        DescribeAuthenticationProfilesResult response = api.pOSTDescribeAuthenticationProfiles(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeAuthenticationProfilesMessage);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;ClusterDbRevision&lt;/code&gt; objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterDbRevisionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterDbRevisionsMessage describeClusterDbRevisionsMessage = null;
        ClusterDbRevisionsMessage response = api.pOSTDescribeClusterDbRevisions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterDbRevisionsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of Amazon Redshift parameter groups, including parameter groups you created and the default parameter group. For each parameter group, the response includes the parameter group name, description, and parameter group family name. You can optionally specify a name to retrieve the description of a specific parameter group.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all parameter groups that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all parameter groups that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, parameter groups are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterParameterGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterParameterGroupsMessage describeClusterParameterGroupsMessage = null;
        ClusterParameterGroupsMessage response = api.pOSTDescribeClusterParameterGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterParameterGroupsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a detailed list of parameters contained within the specified Amazon Redshift parameter group. For each parameter the response includes information such as parameter name, description, data type, value, whether the parameter value is modifiable, and so on.&lt;/p&gt; &lt;p&gt;You can specify &lt;i&gt;source&lt;/i&gt; filter to retrieve parameters of only specific type. For example, to retrieve parameters that were modified by a user action such as from &lt;a&gt;ModifyClusterParameterGroup&lt;/a&gt;, you can specify &lt;i&gt;source&lt;/i&gt; equal to &lt;i&gt;user&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterParametersMessage describeClusterParametersMessage = null;
        ClusterParameterGroupDetails response = api.pOSTDescribeClusterParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterParametersMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about Amazon Redshift security groups. If the name of a security group is specified, the response will contain only information about only that security group.&lt;/p&gt; &lt;p&gt; For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all security groups that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all security groups that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, security groups are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterSecurityGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterSecurityGroupsMessage describeClusterSecurityGroupsMessage = null;
        ClusterSecurityGroupMessage response = api.pOSTDescribeClusterSecurityGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterSecurityGroupsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns one or more snapshot objects, which contain metadata about your cluster snapshots. By default, this operation returns information about all snapshots of all clusters that are owned by your Amazon Web Services account. No information is returned for snapshots owned by inactive Amazon Web Services accounts.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all snapshots that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all snapshots that have any combination of those values are returned. Only snapshots that you own are returned in the response; shared snapshots are not returned with the tag key and tag value request parameters.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, snapshots are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterSnapshotsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterSnapshotsMessage describeClusterSnapshotsMessage = null;
        SnapshotMessage response = api.pOSTDescribeClusterSnapshots(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterSnapshotsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns one or more cluster subnet group objects, which contain metadata about your cluster subnet groups. By default, this operation returns information about all cluster subnet groups that are defined in your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all subnet groups that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all subnet groups that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, subnet groups are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterSubnetGroupsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterSubnetGroupsMessage describeClusterSubnetGroupsMessage = null;
        ClusterSubnetGroupMessage response = api.pOSTDescribeClusterSubnetGroups(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterSubnetGroupsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of all the available maintenance tracks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterTracksTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterTracksMessage describeClusterTracksMessage = null;
        TrackListMessage response = api.pOSTDescribeClusterTracks(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterTracksMessage);
        // TODO: test validations
    }

    /**
     * Returns descriptions of the available Amazon Redshift cluster versions. You can call this operation even before creating any clusters to learn more about the Amazon Redshift versions. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClusterVersionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClusterVersionsMessage describeClusterVersionsMessage = null;
        ClusterVersionsMessage response = api.pOSTDescribeClusterVersions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClusterVersionsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns properties of provisioned clusters including general cluster properties, cluster database properties, maintenance and backup properties, and security and access properties. This operation supports pagination. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all clusters that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all clusters that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, clusters are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeClustersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeClustersMessage describeClustersMessage = null;
        ClustersMessage response = api.pOSTDescribeClusters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeClustersMessage);
        // TODO: test validations
    }

    /**
     * Contains information for custom domain associations for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeCustomDomainAssociationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCustomDomainAssociationsMessage describeCustomDomainAssociationsMessage = null;
        CustomDomainAssociationsMessage response = api.pOSTDescribeCustomDomainAssociations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCustomDomainAssociationsMessage);
        // TODO: test validations
    }

    /**
     * Shows the status of any inbound or outbound datashares available in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDataSharesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDataSharesMessage describeDataSharesMessage = null;
        DescribeDataSharesResult response = api.pOSTDescribeDataShares(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDataSharesMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of datashares where the account identifier being called is a consumer account identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDataSharesForConsumerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDataSharesForConsumerMessage describeDataSharesForConsumerMessage = null;
        DescribeDataSharesForConsumerResult response = api.pOSTDescribeDataSharesForConsumer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDataSharesForConsumerMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of datashares when the account identifier being called is a producer account identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDataSharesForProducerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDataSharesForProducerMessage describeDataSharesForProducerMessage = null;
        DescribeDataSharesForProducerResult response = api.pOSTDescribeDataSharesForProducer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDataSharesForProducerMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of parameter settings for the specified parameter group family.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeDefaultClusterParametersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeDefaultClusterParametersMessage describeDefaultClusterParametersMessage = null;
        DescribeDefaultClusterParametersResult response = api.pOSTDescribeDefaultClusterParameters(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeDefaultClusterParametersMessage);
        // TODO: test validations
    }

    /**
     * Describes a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEndpointAccessMessage describeEndpointAccessMessage = null;
        EndpointAccessList response = api.pOSTDescribeEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEndpointAccessMessage);
        // TODO: test validations
    }

    /**
     * Describes an endpoint authorization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEndpointAuthorizationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEndpointAuthorizationMessage describeEndpointAuthorizationMessage = null;
        EndpointAuthorizationList response = api.pOSTDescribeEndpointAuthorization(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEndpointAuthorizationMessage);
        // TODO: test validations
    }

    /**
     * Displays a list of event categories for all event source types, or for a specified source type. For a list of the event categories and source types, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-event-notifications.html\&quot;&gt;Amazon Redshift Event Notifications&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventCategoriesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEventCategoriesMessage describeEventCategoriesMessage = null;
        EventCategoriesMessage response = api.pOSTDescribeEventCategories(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeEventCategoriesMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists descriptions of all the Amazon Redshift event notification subscriptions for a customer account. If you specify a subscription name, lists the description for that subscription.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all event notification subscriptions that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all subscriptions that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, subscriptions are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventSubscriptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage = null;
        EventSubscriptionsMessage response = api.pOSTDescribeEventSubscriptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventSubscriptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns events related to clusters, security groups, snapshots, and parameter groups for the past 14 days. Events specific to a particular cluster, security group, snapshot or parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeEventsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventsMessage describeEventsMessage = null;
        EventsMessage response = api.pOSTDescribeEvents(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the specified HSM client certificate. If no certificate ID is specified, returns information about all the HSM certificates owned by your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM client certificates that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all HSM client certificates that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, HSM client certificates are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeHsmClientCertificatesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeHsmClientCertificatesMessage describeHsmClientCertificatesMessage = null;
        HsmClientCertificateMessage response = api.pOSTDescribeHsmClientCertificates(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeHsmClientCertificatesMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the specified Amazon Redshift HSM configuration. If no configuration ID is specified, returns information about all the HSM configurations owned by your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all HSM connections that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all HSM connections that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, HSM connections are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeHsmConfigurationsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeHsmConfigurationsMessage describeHsmConfigurationsMessage = null;
        HsmConfigurationMessage response = api.pOSTDescribeHsmConfigurations(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeHsmConfigurationsMessage);
        // TODO: test validations
    }

    /**
     * Describes whether information, such as queries and connection attempts, is being logged for the specified Amazon Redshift cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeLoggingStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoggingStatusMessage describeLoggingStatusMessage = null;
        LoggingStatus response = api.pOSTDescribeLoggingStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeLoggingStatusMessage);
        // TODO: test validations
    }

    /**
     * Returns properties of possible node configurations such as node type, number of nodes, and disk usage for the specified action type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeNodeConfigurationOptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeNodeConfigurationOptionsMessage describeNodeConfigurationOptionsMessage = null;
        NodeConfigurationOptionsMessage response = api.pOSTDescribeNodeConfigurationOptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeNodeConfigurationOptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of orderable cluster options. Before you create a new cluster you can use this operation to find what options are available, such as the EC2 Availability Zones (AZ) in the specific Amazon Web Services Region that you can specify, and the node types you can request. The node types differ by available storage, memory, CPU and price. With the cost involved you might want to obtain a list of cluster options in the specific region and specify values when creating a cluster. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeOrderableClusterOptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeOrderableClusterOptionsMessage describeOrderableClusterOptionsMessage = null;
        OrderableClusterOptionsMessage response = api.pOSTDescribeOrderableClusterOptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeOrderableClusterOptionsMessage);
        // TODO: test validations
    }

    /**
     * Returns information about the partner integrations defined for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribePartnersTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribePartnersInputMessage describePartnersInputMessage = null;
        DescribePartnersOutputMessage response = api.pOSTDescribePartners(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describePartnersInputMessage);
        // TODO: test validations
    }

    /**
     * Returns exchange status details and associated metadata for a reserved-node exchange. Statuses include such values as in progress and requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeReservedNodeExchangeStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReservedNodeExchangeStatusInputMessage describeReservedNodeExchangeStatusInputMessage = null;
        DescribeReservedNodeExchangeStatusOutputMessage response = api.pOSTDescribeReservedNodeExchangeStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedNodeExchangeStatusInputMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the available reserved node offerings by Amazon Redshift with their descriptions including the node type, the fixed and recurring costs of reserving the node and duration the node will be reserved for you. These descriptions help you determine which reserve node offering you want to purchase. You then use the unique offering ID in you call to &lt;a&gt;PurchaseReservedNodeOffering&lt;/a&gt; to reserve one or more nodes for your Amazon Redshift cluster. &lt;/p&gt; &lt;p&gt; For more information about reserved node offerings, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\&quot;&gt;Purchasing Reserved Nodes&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeReservedNodeOfferingsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReservedNodeOfferingsMessage describeReservedNodeOfferingsMessage = null;
        ReservedNodeOfferingsMessage response = api.pOSTDescribeReservedNodeOfferings(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedNodeOfferingsMessage);
        // TODO: test validations
    }

    /**
     * Returns the descriptions of the reserved nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeReservedNodesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReservedNodesMessage describeReservedNodesMessage = null;
        ReservedNodesMessage response = api.pOSTDescribeReservedNodes(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedNodesMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the last resize operation for the specified cluster. If no resize operation has ever been initiated for the specified cluster, a &lt;code&gt;HTTP 404&lt;/code&gt; error is returned. If a resize operation was initiated and completed, the status of the resize remains as &lt;code&gt;SUCCEEDED&lt;/code&gt; until the next resize. &lt;/p&gt; &lt;p&gt;A resize operation can be requested using &lt;a&gt;ModifyCluster&lt;/a&gt; and specifying a different number or type of nodes for the cluster. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeResizeTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResizeMessage describeResizeMessage = null;
        ResizeProgressMessage response = api.pOSTDescribeResize(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, describeResizeMessage);
        // TODO: test validations
    }

    /**
     * Describes properties of scheduled actions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeScheduledActionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeScheduledActionsMessage describeScheduledActionsMessage = null;
        ScheduledActionsMessage response = api.pOSTDescribeScheduledActions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeScheduledActionsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of snapshot copy grants owned by the Amazon Web Services account in the destination region.&lt;/p&gt; &lt;p&gt; For more information about managing snapshot copy grants, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-db-encryption.html\&quot;&gt;Amazon Redshift Database Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeSnapshotCopyGrantsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeSnapshotCopyGrantsMessage describeSnapshotCopyGrantsMessage = null;
        SnapshotCopyGrantMessage response = api.pOSTDescribeSnapshotCopyGrants(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotCopyGrantsMessage);
        // TODO: test validations
    }

    /**
     * Returns a list of snapshot schedules. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeSnapshotSchedulesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeSnapshotSchedulesMessage describeSnapshotSchedulesMessage = null;
        DescribeSnapshotSchedulesOutputMessage response = api.pOSTDescribeSnapshotSchedules(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotSchedulesMessage);
        // TODO: test validations
    }

    /**
     * Returns account level backups storage size and provisional storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeStorageTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CustomerStorageMessage response = api.pOSTDescribeStorage(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the status of one or more table restore requests made using the &lt;a&gt;RestoreTableFromClusterSnapshot&lt;/a&gt; API action. If you don&#39;t specify a value for the &lt;code&gt;TableRestoreRequestId&lt;/code&gt; parameter, then &lt;code&gt;DescribeTableRestoreStatus&lt;/code&gt; returns the status of all table restore requests ordered by the date and time of the request in ascending order. Otherwise &lt;code&gt;DescribeTableRestoreStatus&lt;/code&gt; returns the status of the table specified by &lt;code&gt;TableRestoreRequestId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTableRestoreStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeTableRestoreStatusMessage describeTableRestoreStatusMessage = null;
        TableRestoreStatusMessage response = api.pOSTDescribeTableRestoreStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeTableRestoreStatusMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of tags. You can return tags from a specific resource by specifying an ARN, or you can return all tags for a given type of resource, such as clusters, snapshots, and so on.&lt;/p&gt; &lt;p&gt;The following are limitations for &lt;code&gt;DescribeTags&lt;/code&gt;: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You cannot specify an ARN and a resource-type value together in the same request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You cannot use the &lt;code&gt;MaxRecords&lt;/code&gt; and &lt;code&gt;Marker&lt;/code&gt; parameters together with the ARN parameter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;MaxRecords&lt;/code&gt; parameter can be a range from 10 to 50 results to return in a request.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you specify both tag keys and tag values in the same request, Amazon Redshift returns all resources that match any combination of the specified keys and values. For example, if you have &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; for tag keys, and &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; for tag values, all resources that have any combination of those values are returned.&lt;/p&gt; &lt;p&gt;If both tag keys and values are omitted from the request, resources are returned regardless of whether they have tag keys or values associated with them.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeTagsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeTagsMessage describeTagsMessage = null;
        TaggedResourceListMessage response = api.pOSTDescribeTags(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeTagsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Shows usage limits on a cluster. Results are filtered based on the combination of input usage limit identifier, cluster identifier, and feature type parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If usage limit identifier, cluster identifier, and feature type are not provided, then all usage limit objects for the current account in the current region are returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If usage limit identifier is provided, then the corresponding usage limit object is returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If cluster identifier is provided, then all usage limit objects for the specified cluster are returned.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If cluster identifier and feature type are provided, then all usage limit objects for the combination of cluster and feature are returned.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDescribeUsageLimitsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeUsageLimitsMessage describeUsageLimitsMessage = null;
        UsageLimitList response = api.pOSTDescribeUsageLimits(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUsageLimitsMessage);
        // TODO: test validations
    }

    /**
     * Stops logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDisableLoggingTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableLoggingMessage disableLoggingMessage = null;
        LoggingStatus response = api.pOSTDisableLogging(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableLoggingMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disables the automatic copying of snapshots from one region to another region for a specified cluster.&lt;/p&gt; &lt;p&gt;If your cluster and its snapshots are encrypted using an encrypted symmetric key from Key Management Service, use &lt;a&gt;DeleteSnapshotCopyGrant&lt;/a&gt; to delete the grant that grants Amazon Redshift permission to the key in the destination region. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDisableSnapshotCopyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableSnapshotCopyMessage disableSnapshotCopyMessage = null;
        DisableSnapshotCopyResult response = api.pOSTDisableSnapshotCopy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disableSnapshotCopyMessage);
        // TODO: test validations
    }

    /**
     * From a datashare consumer account, remove association for the specified datashare. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTDisassociateDataShareConsumerTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisassociateDataShareConsumerMessage disassociateDataShareConsumerMessage = null;
        DataShare response = api.pOSTDisassociateDataShareConsumer(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateDataShareConsumerMessage);
        // TODO: test validations
    }

    /**
     * Starts logging information, such as queries and connection attempts, for the specified Amazon Redshift cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTEnableLoggingTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableLoggingMessage enableLoggingMessage = null;
        LoggingStatus response = api.pOSTEnableLogging(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableLoggingMessage);
        // TODO: test validations
    }

    /**
     * Enables the automatic copy of snapshots from one region to another region for a specified cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTEnableSnapshotCopyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableSnapshotCopyMessage enableSnapshotCopyMessage = null;
        EnableSnapshotCopyResult response = api.pOSTEnableSnapshotCopy(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, enableSnapshotCopyMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a database user name and temporary password with temporary authorization to log on to an Amazon Redshift database. The action returns the database user name prefixed with &lt;code&gt;IAM:&lt;/code&gt; if &lt;code&gt;AutoCreate&lt;/code&gt; is &lt;code&gt;False&lt;/code&gt; or &lt;code&gt;IAMA:&lt;/code&gt; if &lt;code&gt;AutoCreate&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;. You can optionally specify one or more database user groups that the user will join at log on. By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/generating-user-credentials.html\&quot;&gt;Using IAM Authentication to Generate Database User Credentials&lt;/a&gt; in the Amazon Redshift Cluster Management Guide.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) user or role that runs GetClusterCredentials must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html#redshift-policy-resources.getclustercredentials-resources\&quot;&gt;Resource Policies for GetClusterCredentials&lt;/a&gt; in the Amazon Redshift Cluster Management Guide.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;DbGroups&lt;/code&gt; parameter is specified, the IAM policy must allow the &lt;code&gt;redshift:JoinGroup&lt;/code&gt; action with access to the listed &lt;code&gt;dbgroups&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;In addition, if the &lt;code&gt;AutoCreate&lt;/code&gt; parameter is set to &lt;code&gt;True&lt;/code&gt;, then the policy must include the &lt;code&gt;redshift:CreateClusterUser&lt;/code&gt; permission.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;DbName&lt;/code&gt; parameter is specified, the IAM policy must allow access to the resource &lt;code&gt;dbname&lt;/code&gt; for the specified database name. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetClusterCredentialsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetClusterCredentialsMessage getClusterCredentialsMessage = null;
        ClusterCredentials response = api.pOSTGetClusterCredentials(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getClusterCredentialsMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a database user name and temporary password with temporary authorization to log in to an Amazon Redshift database. The database user is mapped 1:1 to the source Identity and Access Management (IAM) identity. For more information about IAM identities, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id.html\&quot;&gt;IAM Identities (users, user groups, and roles)&lt;/a&gt; in the Amazon Web Services Identity and Access Management User Guide.&lt;/p&gt; &lt;p&gt;The Identity and Access Management (IAM) identity that runs this operation must have an IAM policy attached that allows access to all necessary actions and resources. For more information about permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-access-control-identity-based.html\&quot;&gt;Using identity-based policies (IAM policies)&lt;/a&gt; in the Amazon Redshift Cluster Management Guide. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetClusterCredentialsWithIAMTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetClusterCredentialsWithIAMMessage getClusterCredentialsWithIAMMessage = null;
        ClusterExtendedCredentials response = api.pOSTGetClusterCredentialsWithIAM(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, getClusterCredentialsWithIAMMessage);
        // TODO: test validations
    }

    /**
     * Gets the configuration options for the reserved-node exchange. These options include information about the source reserved node and target reserved node offering. Details include the node type, the price, the node count, and the offering type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetReservedNodeExchangeConfigurationOptionsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        GetReservedNodeExchangeConfigurationOptionsInputMessage getReservedNodeExchangeConfigurationOptionsInputMessage = null;
        GetReservedNodeExchangeConfigurationOptionsOutputMessage response = api.pOSTGetReservedNodeExchangeConfigurationOptions(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, getReservedNodeExchangeConfigurationOptionsInputMessage);
        // TODO: test validations
    }

    /**
     * Returns an array of DC2 ReservedNodeOfferings that matches the payment type, term, and usage price of the given DC1 reserved node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTGetReservedNodeExchangeOfferingsTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        GetReservedNodeExchangeOfferingsInputMessage getReservedNodeExchangeOfferingsInputMessage = null;
        GetReservedNodeExchangeOfferingsOutputMessage response = api.pOSTGetReservedNodeExchangeOfferings(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, getReservedNodeExchangeOfferingsInputMessage);
        // TODO: test validations
    }

    /**
     * This operation is retired. Calling this operation does not change AQUA configuration. Amazon Redshift automatically determines whether to use AQUA (Advanced Query Accelerator). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyAquaConfigurationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyAquaInputMessage modifyAquaInputMessage = null;
        ModifyAquaOutputMessage response = api.pOSTModifyAquaConfiguration(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyAquaInputMessage);
        // TODO: test validations
    }

    /**
     * Modifies an authentication profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyAuthenticationProfileTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyAuthenticationProfileMessage modifyAuthenticationProfileMessage = null;
        ModifyAuthenticationProfileResult response = api.pOSTModifyAuthenticationProfile(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyAuthenticationProfileMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the settings for a cluster.&lt;/p&gt; &lt;p&gt;You can also change node type and the number of nodes to scale up or down the cluster. When resizing a cluster, you must specify both the number of nodes and the node type even if one of the parameters does not change.&lt;/p&gt; &lt;p&gt;You can add another security or parameter group, or change the admin user password. Resetting a cluster password or modifying the security groups associated with a cluster do not need a reboot. However, modifying a parameter group requires a reboot for parameters to take effect. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterMessage modifyClusterMessage = null;
        ModifyClusterResult response = api.pOSTModifyCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterMessage);
        // TODO: test validations
    }

    /**
     * Modifies the database revision of a cluster. The database revision is a unique revision of the database running in a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterDbRevisionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterDbRevisionMessage modifyClusterDbRevisionMessage = null;
        ModifyClusterDbRevisionResult response = api.pOSTModifyClusterDbRevision(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterDbRevisionMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the list of Identity and Access Management (IAM) roles that can be used by the cluster to access other Amazon Web Services services.&lt;/p&gt; &lt;p&gt;The maximum number of IAM roles that you can associate is subject to a quota. For more information, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/amazon-redshift-limits.html\&quot;&gt;Quotas and limits&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterIamRolesTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterIamRolesMessage modifyClusterIamRolesMessage = null;
        ModifyClusterIamRolesResult response = api.pOSTModifyClusterIamRoles(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterIamRolesMessage);
        // TODO: test validations
    }

    /**
     * Modifies the maintenance settings of a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterMaintenanceTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterMaintenanceMessage modifyClusterMaintenanceMessage = null;
        ModifyClusterMaintenanceResult response = api.pOSTModifyClusterMaintenance(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterMaintenanceMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the parameters of a parameter group. For the parameters parameter, it can&#39;t contain ASCII characters.&lt;/p&gt; &lt;p&gt; For more information about parameters and parameter groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-parameter-groups.html\&quot;&gt;Amazon Redshift Parameter Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterParameterGroupMessage modifyClusterParameterGroupMessage = null;
        ClusterParameterGroupNameMessage response = api.pOSTModifyClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the settings for a snapshot.&lt;/p&gt; &lt;p&gt;This exanmple modifies the manual retention period setting for a cluster snapshot.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterSnapshotMessage modifyClusterSnapshotMessage = null;
        ModifyClusterSnapshotResult response = api.pOSTModifyClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Modifies a snapshot schedule for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterSnapshotScheduleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterSnapshotScheduleMessage modifyClusterSnapshotScheduleMessage = null;
        api.pOSTModifyClusterSnapshotSchedule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterSnapshotScheduleMessage);
        // TODO: test validations
    }

    /**
     * Modifies a cluster subnet group to include the specified list of VPC subnets. The operation replaces the existing list of subnets with the new list of subnets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyClusterSubnetGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyClusterSubnetGroupMessage modifyClusterSubnetGroupMessage = null;
        ModifyClusterSubnetGroupResult response = api.pOSTModifyClusterSubnetGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyClusterSubnetGroupMessage);
        // TODO: test validations
    }

    /**
     * Contains information for changing a custom domain association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyCustomDomainAssociationTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyCustomDomainAssociationMessage modifyCustomDomainAssociationMessage = null;
        ModifyCustomDomainAssociationResult response = api.pOSTModifyCustomDomainAssociation(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCustomDomainAssociationMessage);
        // TODO: test validations
    }

    /**
     * Modifies a Redshift-managed VPC endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyEndpointAccessMessage modifyEndpointAccessMessage = null;
        EndpointAccess response = api.pOSTModifyEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEndpointAccessMessage);
        // TODO: test validations
    }

    /**
     * Modifies an existing Amazon Redshift event notification subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyEventSubscriptionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyEventSubscriptionMessage modifyEventSubscriptionMessage = null;
        ModifyEventSubscriptionResult response = api.pOSTModifyEventSubscription(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyEventSubscriptionMessage);
        // TODO: test validations
    }

    /**
     * Modifies a scheduled action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyScheduledActionTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyScheduledActionMessage modifyScheduledActionMessage = null;
        ScheduledAction response = api.pOSTModifyScheduledAction(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyScheduledActionMessage);
        // TODO: test validations
    }

    /**
     * Modifies the number of days to retain snapshots in the destination Amazon Web Services Region after they are copied from the source Amazon Web Services Region. By default, this operation only changes the retention period of copied automated snapshots. The retention periods for both new and existing copied automated snapshots are updated with the new retention period. You can set the manual option to change only the retention periods of copied manual snapshots. If you set this option, only newly copied manual snapshots have the new retention period. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifySnapshotCopyRetentionPeriodTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifySnapshotCopyRetentionPeriodMessage modifySnapshotCopyRetentionPeriodMessage = null;
        ModifySnapshotCopyRetentionPeriodResult response = api.pOSTModifySnapshotCopyRetentionPeriod(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifySnapshotCopyRetentionPeriodMessage);
        // TODO: test validations
    }

    /**
     * Modifies a snapshot schedule. Any schedule associated with a cluster is modified asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifySnapshotScheduleTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifySnapshotScheduleMessage modifySnapshotScheduleMessage = null;
        SnapshotSchedule response = api.pOSTModifySnapshotSchedule(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifySnapshotScheduleMessage);
        // TODO: test validations
    }

    /**
     * Modifies a usage limit in a cluster. You can&#39;t modify the feature type or period of a usage limit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTModifyUsageLimitTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyUsageLimitMessage modifyUsageLimitMessage = null;
        UsageLimit response = api.pOSTModifyUsageLimit(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUsageLimitMessage);
        // TODO: test validations
    }

    /**
     * Pauses a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPauseClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PauseClusterMessage pauseClusterMessage = null;
        PauseClusterResult response = api.pOSTPauseCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pauseClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows you to purchase reserved nodes. Amazon Redshift offers a predefined set of reserved node offerings. You can purchase one or more of the offerings. You can call the &lt;a&gt;DescribeReservedNodeOfferings&lt;/a&gt; API to obtain the available reserved node offerings. You can call this API by providing a specific reserved node offering and the number of nodes you want to reserve. &lt;/p&gt; &lt;p&gt; For more information about reserved node offerings, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/purchase-reserved-node-instance.html\&quot;&gt;Purchasing Reserved Nodes&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTPurchaseReservedNodeOfferingTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PurchaseReservedNodeOfferingMessage purchaseReservedNodeOfferingMessage = null;
        PurchaseReservedNodeOfferingResult response = api.pOSTPurchaseReservedNodeOffering(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purchaseReservedNodeOfferingMessage);
        // TODO: test validations
    }

    /**
     * Reboots a cluster. This action is taken as soon as possible. It results in a momentary outage to the cluster, during which the cluster status is set to &lt;code&gt;rebooting&lt;/code&gt;. A cluster event is created when the reboot is completed. Any pending cluster modifications (see &lt;a&gt;ModifyCluster&lt;/a&gt;) are applied at this reboot. For more information about managing clusters, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-clusters.html\&quot;&gt;Amazon Redshift Clusters&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRebootClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootClusterMessage rebootClusterMessage = null;
        RebootClusterResult response = api.pOSTRebootCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootClusterMessage);
        // TODO: test validations
    }

    /**
     * From a datashare consumer account, rejects the specified datashare.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRejectDataShareTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RejectDataShareMessage rejectDataShareMessage = null;
        DataShare response = api.pOSTRejectDataShare(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rejectDataShareMessage);
        // TODO: test validations
    }

    /**
     * Sets one or more parameters of the specified parameter group to their default values and sets the source values of the parameters to \&quot;engine-default\&quot;. To reset the entire parameter group specify the &lt;i&gt;ResetAllParameters&lt;/i&gt; parameter. For parameter changes to take effect you must reboot any associated clusters. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResetClusterParameterGroupTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResetClusterParameterGroupMessage resetClusterParameterGroupMessage = null;
        ClusterParameterGroupNameMessage response = api.pOSTResetClusterParameterGroup(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetClusterParameterGroupMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Changes the size of the cluster. You can change the cluster&#39;s type, or change the number or type of nodes. The default behavior is to use the elastic resize method. With an elastic resize, your cluster is available for read and write operations more quickly than with the classic resize method. &lt;/p&gt; &lt;p&gt;Elastic resize operations have the following restrictions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;You can only resize clusters of the following types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;dc1.large (if your cluster is in a VPC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;dc1.8xlarge (if your cluster is in a VPC)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;dc2.large&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;dc2.8xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ds2.xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ds2.8xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ra3.xlplus&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ra3.4xlarge&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;ra3.16xlarge&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The type of nodes that you add must match the node type for the cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResizeClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResizeClusterMessage resizeClusterMessage = null;
        ResizeClusterResult response = api.pOSTResizeCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resizeClusterMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new cluster from a snapshot. By default, Amazon Redshift creates the resulting cluster with the same configuration as the original cluster from which the snapshot was created, except that the new cluster is created with the default cluster security and parameter groups. After Amazon Redshift creates the cluster, you can use the &lt;a&gt;ModifyCluster&lt;/a&gt; API to associate a different security group and different parameter group with the restored cluster. If you are using a DS node type, you can also choose to change to another DS node type of the same size during restore.&lt;/p&gt; &lt;p&gt;If you restore a cluster into a VPC, you must provide a cluster subnet group where you want the cluster restored.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRestoreFromClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreFromClusterSnapshotMessage restoreFromClusterSnapshotMessage = null;
        RestoreFromClusterSnapshotResult response = api.pOSTRestoreFromClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreFromClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new table from a table in an Amazon Redshift cluster snapshot. You must create the new table within the Amazon Redshift cluster that the snapshot was taken from.&lt;/p&gt; &lt;p&gt;You cannot use &lt;code&gt;RestoreTableFromClusterSnapshot&lt;/code&gt; to restore a table with the same name as an existing table in an Amazon Redshift cluster. That is, you cannot overwrite an existing table in a cluster with a restored table. If you want to replace your original table with a new, restored table, then rename or drop your original table before you call &lt;code&gt;RestoreTableFromClusterSnapshot&lt;/code&gt;. When you have renamed your original table, then you can pass the original name of the table as the &lt;code&gt;NewTableName&lt;/code&gt; parameter value in the call to &lt;code&gt;RestoreTableFromClusterSnapshot&lt;/code&gt;. This way, you can replace the original table with the table created from the snapshot.&lt;/p&gt; &lt;p&gt;You can&#39;t use this operation to restore tables with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved\&quot;&gt;interleaved sort keys&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRestoreTableFromClusterSnapshotTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RestoreTableFromClusterSnapshotMessage restoreTableFromClusterSnapshotMessage = null;
        RestoreTableFromClusterSnapshotResult response = api.pOSTRestoreTableFromClusterSnapshot(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, restoreTableFromClusterSnapshotMessage);
        // TODO: test validations
    }

    /**
     * Resumes a paused cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTResumeClusterTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ResumeClusterMessage resumeClusterMessage = null;
        ResumeClusterResult response = api.pOSTResumeCluster(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resumeClusterMessage);
        // TODO: test validations
    }

    /**
     * Revokes an ingress rule in an Amazon Redshift security group for a previously authorized IP range or Amazon EC2 security group. To add an ingress rule, see &lt;a&gt;AuthorizeClusterSecurityGroupIngress&lt;/a&gt;. For information about managing security groups, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-security-groups.html\&quot;&gt;Amazon Redshift Cluster Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRevokeClusterSecurityGroupIngressTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeClusterSecurityGroupIngressMessage revokeClusterSecurityGroupIngressMessage = null;
        RevokeClusterSecurityGroupIngressResult response = api.pOSTRevokeClusterSecurityGroupIngress(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeClusterSecurityGroupIngressMessage);
        // TODO: test validations
    }

    /**
     * Revokes access to a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRevokeEndpointAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeEndpointAccessMessage revokeEndpointAccessMessage = null;
        EndpointAuthorization response = api.pOSTRevokeEndpointAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeEndpointAccessMessage);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Removes the ability of the specified Amazon Web Services account to restore the specified snapshot. If the account is currently restoring the snapshot, the restore will run to completion.&lt;/p&gt; &lt;p&gt; For more information about working with snapshots, go to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/redshift/latest/mgmt/working-with-snapshots.html\&quot;&gt;Amazon Redshift Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Redshift Cluster Management Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRevokeSnapshotAccessTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeSnapshotAccessMessage revokeSnapshotAccessMessage = null;
        RevokeSnapshotAccessResult response = api.pOSTRevokeSnapshotAccess(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeSnapshotAccessMessage);
        // TODO: test validations
    }

    /**
     * Rotates the encryption keys for a cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTRotateEncryptionKeyTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RotateEncryptionKeyMessage rotateEncryptionKeyMessage = null;
        RotateEncryptionKeyResult response = api.pOSTRotateEncryptionKey(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rotateEncryptionKeyMessage);
        // TODO: test validations
    }

    /**
     * Updates the status of a partner integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pOSTUpdatePartnerStatusTest() throws ApiException {
        String action = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdatePartnerStatusInputMessage updatePartnerStatusInputMessage = null;
        PartnerIntegrationOutputMessage response = api.pOSTUpdatePartnerStatus(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, updatePartnerStatusInputMessage);
        // TODO: test validations
    }

}
