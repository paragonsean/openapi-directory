/*
 * Amazon Redshift
 * <fullname>Amazon Redshift</fullname> <p> <b>Overview</b> </p> <p>This is an interface reference for Amazon Redshift. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift clusters. Note that Amazon Redshift is asynchronous, which means that some interfaces may require techniques, such as polling or asynchronous callback handlers, to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a change is applied immediately, on the next instance reboot, or during the next maintenance window. For a summary of the Amazon Redshift cluster management interfaces, go to <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/using-aws-sdk.html\">Using the Amazon Redshift Management Interfaces</a>.</p> <p>Amazon Redshift manages all the work of setting up, operating, and scaling a data warehouse: provisioning capacity, monitoring and backing up the cluster, and applying patches and upgrades to the Amazon Redshift engine. You can focus on using your data to acquire new insights for your business and customers.</p> <p>If you are a first-time user of Amazon Redshift, we recommend that you begin by reading the <a href=\"https://docs.aws.amazon.com/redshift/latest/gsg/getting-started.html\">Amazon Redshift Getting Started Guide</a>.</p> <p>If you are a database developer, the <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\">Amazon Redshift Database Developer Guide</a> explains how to design, build, query, and maintain the databases that make up your data warehouse. </p>
 *
 * The version of the OpenAPI document: 2012-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClusterAquaConfiguration;
import org.openapitools.client.model.ClusterClusterSnapshotCopyStatus;
import org.openapitools.client.model.ClusterDataTransferProgress;
import org.openapitools.client.model.ClusterElasticIpStatus;
import org.openapitools.client.model.ClusterEndpoint;
import org.openapitools.client.model.ClusterHsmStatus;
import org.openapitools.client.model.ClusterPendingModifiedValues;
import org.openapitools.client.model.ClusterReservedNodeExchangeStatus;
import org.openapitools.client.model.ClusterResizeInfo;
import org.openapitools.client.model.ClusterRestoreStatus;
import org.openapitools.client.model.ScheduleState;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Cluster
 */
public class ClusterTest {
    private final Cluster model = new Cluster();

    /**
     * Model tests for Cluster
     */
    @Test
    public void testCluster() {
        // TODO: test Cluster
    }

    /**
     * Test the property 'clusterIdentifier'
     */
    @Test
    public void clusterIdentifierTest() {
        // TODO: test clusterIdentifier
    }

    /**
     * Test the property 'nodeType'
     */
    @Test
    public void nodeTypeTest() {
        // TODO: test nodeType
    }

    /**
     * Test the property 'clusterStatus'
     */
    @Test
    public void clusterStatusTest() {
        // TODO: test clusterStatus
    }

    /**
     * Test the property 'clusterAvailabilityStatus'
     */
    @Test
    public void clusterAvailabilityStatusTest() {
        // TODO: test clusterAvailabilityStatus
    }

    /**
     * Test the property 'modifyStatus'
     */
    @Test
    public void modifyStatusTest() {
        // TODO: test modifyStatus
    }

    /**
     * Test the property 'masterUsername'
     */
    @Test
    public void masterUsernameTest() {
        // TODO: test masterUsername
    }

    /**
     * Test the property 'dbName'
     */
    @Test
    public void dbNameTest() {
        // TODO: test dbName
    }

    /**
     * Test the property 'endpoint'
     */
    @Test
    public void endpointTest() {
        // TODO: test endpoint
    }

    /**
     * Test the property 'clusterCreateTime'
     */
    @Test
    public void clusterCreateTimeTest() {
        // TODO: test clusterCreateTime
    }

    /**
     * Test the property 'automatedSnapshotRetentionPeriod'
     */
    @Test
    public void automatedSnapshotRetentionPeriodTest() {
        // TODO: test automatedSnapshotRetentionPeriod
    }

    /**
     * Test the property 'manualSnapshotRetentionPeriod'
     */
    @Test
    public void manualSnapshotRetentionPeriodTest() {
        // TODO: test manualSnapshotRetentionPeriod
    }

    /**
     * Test the property 'clusterSecurityGroups'
     */
    @Test
    public void clusterSecurityGroupsTest() {
        // TODO: test clusterSecurityGroups
    }

    /**
     * Test the property 'vpcSecurityGroups'
     */
    @Test
    public void vpcSecurityGroupsTest() {
        // TODO: test vpcSecurityGroups
    }

    /**
     * Test the property 'clusterParameterGroups'
     */
    @Test
    public void clusterParameterGroupsTest() {
        // TODO: test clusterParameterGroups
    }

    /**
     * Test the property 'clusterSubnetGroupName'
     */
    @Test
    public void clusterSubnetGroupNameTest() {
        // TODO: test clusterSubnetGroupName
    }

    /**
     * Test the property 'vpcId'
     */
    @Test
    public void vpcIdTest() {
        // TODO: test vpcId
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'pendingModifiedValues'
     */
    @Test
    public void pendingModifiedValuesTest() {
        // TODO: test pendingModifiedValues
    }

    /**
     * Test the property 'clusterVersion'
     */
    @Test
    public void clusterVersionTest() {
        // TODO: test clusterVersion
    }

    /**
     * Test the property 'allowVersionUpgrade'
     */
    @Test
    public void allowVersionUpgradeTest() {
        // TODO: test allowVersionUpgrade
    }

    /**
     * Test the property 'numberOfNodes'
     */
    @Test
    public void numberOfNodesTest() {
        // TODO: test numberOfNodes
    }

    /**
     * Test the property 'publiclyAccessible'
     */
    @Test
    public void publiclyAccessibleTest() {
        // TODO: test publiclyAccessible
    }

    /**
     * Test the property 'encrypted'
     */
    @Test
    public void encryptedTest() {
        // TODO: test encrypted
    }

    /**
     * Test the property 'restoreStatus'
     */
    @Test
    public void restoreStatusTest() {
        // TODO: test restoreStatus
    }

    /**
     * Test the property 'dataTransferProgress'
     */
    @Test
    public void dataTransferProgressTest() {
        // TODO: test dataTransferProgress
    }

    /**
     * Test the property 'hsmStatus'
     */
    @Test
    public void hsmStatusTest() {
        // TODO: test hsmStatus
    }

    /**
     * Test the property 'clusterSnapshotCopyStatus'
     */
    @Test
    public void clusterSnapshotCopyStatusTest() {
        // TODO: test clusterSnapshotCopyStatus
    }

    /**
     * Test the property 'clusterPublicKey'
     */
    @Test
    public void clusterPublicKeyTest() {
        // TODO: test clusterPublicKey
    }

    /**
     * Test the property 'clusterNodes'
     */
    @Test
    public void clusterNodesTest() {
        // TODO: test clusterNodes
    }

    /**
     * Test the property 'elasticIpStatus'
     */
    @Test
    public void elasticIpStatusTest() {
        // TODO: test elasticIpStatus
    }

    /**
     * Test the property 'clusterRevisionNumber'
     */
    @Test
    public void clusterRevisionNumberTest() {
        // TODO: test clusterRevisionNumber
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'enhancedVpcRouting'
     */
    @Test
    public void enhancedVpcRoutingTest() {
        // TODO: test enhancedVpcRouting
    }

    /**
     * Test the property 'iamRoles'
     */
    @Test
    public void iamRolesTest() {
        // TODO: test iamRoles
    }

    /**
     * Test the property 'pendingActions'
     */
    @Test
    public void pendingActionsTest() {
        // TODO: test pendingActions
    }

    /**
     * Test the property 'maintenanceTrackName'
     */
    @Test
    public void maintenanceTrackNameTest() {
        // TODO: test maintenanceTrackName
    }

    /**
     * Test the property 'elasticResizeNumberOfNodeOptions'
     */
    @Test
    public void elasticResizeNumberOfNodeOptionsTest() {
        // TODO: test elasticResizeNumberOfNodeOptions
    }

    /**
     * Test the property 'deferredMaintenanceWindows'
     */
    @Test
    public void deferredMaintenanceWindowsTest() {
        // TODO: test deferredMaintenanceWindows
    }

    /**
     * Test the property 'snapshotScheduleIdentifier'
     */
    @Test
    public void snapshotScheduleIdentifierTest() {
        // TODO: test snapshotScheduleIdentifier
    }

    /**
     * Test the property 'snapshotScheduleState'
     */
    @Test
    public void snapshotScheduleStateTest() {
        // TODO: test snapshotScheduleState
    }

    /**
     * Test the property 'expectedNextSnapshotScheduleTime'
     */
    @Test
    public void expectedNextSnapshotScheduleTimeTest() {
        // TODO: test expectedNextSnapshotScheduleTime
    }

    /**
     * Test the property 'expectedNextSnapshotScheduleTimeStatus'
     */
    @Test
    public void expectedNextSnapshotScheduleTimeStatusTest() {
        // TODO: test expectedNextSnapshotScheduleTimeStatus
    }

    /**
     * Test the property 'nextMaintenanceWindowStartTime'
     */
    @Test
    public void nextMaintenanceWindowStartTimeTest() {
        // TODO: test nextMaintenanceWindowStartTime
    }

    /**
     * Test the property 'resizeInfo'
     */
    @Test
    public void resizeInfoTest() {
        // TODO: test resizeInfo
    }

    /**
     * Test the property 'availabilityZoneRelocationStatus'
     */
    @Test
    public void availabilityZoneRelocationStatusTest() {
        // TODO: test availabilityZoneRelocationStatus
    }

    /**
     * Test the property 'clusterNamespaceArn'
     */
    @Test
    public void clusterNamespaceArnTest() {
        // TODO: test clusterNamespaceArn
    }

    /**
     * Test the property 'totalStorageCapacityInMegaBytes'
     */
    @Test
    public void totalStorageCapacityInMegaBytesTest() {
        // TODO: test totalStorageCapacityInMegaBytes
    }

    /**
     * Test the property 'aquaConfiguration'
     */
    @Test
    public void aquaConfigurationTest() {
        // TODO: test aquaConfiguration
    }

    /**
     * Test the property 'defaultIamRoleArn'
     */
    @Test
    public void defaultIamRoleArnTest() {
        // TODO: test defaultIamRoleArn
    }

    /**
     * Test the property 'reservedNodeExchangeStatus'
     */
    @Test
    public void reservedNodeExchangeStatusTest() {
        // TODO: test reservedNodeExchangeStatus
    }

    /**
     * Test the property 'customDomainName'
     */
    @Test
    public void customDomainNameTest() {
        // TODO: test customDomainName
    }

    /**
     * Test the property 'customDomainCertificateArn'
     */
    @Test
    public void customDomainCertificateArnTest() {
        // TODO: test customDomainCertificateArn
    }

    /**
     * Test the property 'customDomainCertificateExpiryDate'
     */
    @Test
    public void customDomainCertificateExpiryDateTest() {
        // TODO: test customDomainCertificateExpiryDate
    }

}
