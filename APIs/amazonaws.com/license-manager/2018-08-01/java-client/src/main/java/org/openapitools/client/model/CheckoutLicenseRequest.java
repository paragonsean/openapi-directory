/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckoutType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckoutLicenseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckoutLicenseRequest {
  public static final String SERIALIZED_NAME_PRODUCT_S_K_U = "ProductSKU";
  @SerializedName(SERIALIZED_NAME_PRODUCT_S_K_U)
  private String productSKU;

  public static final String SERIALIZED_NAME_CHECKOUT_TYPE = "CheckoutType";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_TYPE)
  private CheckoutType checkoutType;

  public static final String SERIALIZED_NAME_KEY_FINGERPRINT = "KeyFingerprint";
  @SerializedName(SERIALIZED_NAME_KEY_FINGERPRINT)
  private String keyFingerprint;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "Entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List entitlements;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_BENEFICIARY = "Beneficiary";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY)
  private String beneficiary;

  public static final String SERIALIZED_NAME_NODE_ID = "NodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public CheckoutLicenseRequest() {
  }

  public CheckoutLicenseRequest productSKU(String productSKU) {
    this.productSKU = productSKU;
    return this;
  }

  /**
   * Get productSKU
   * @return productSKU
   */
  @javax.annotation.Nonnull
  public String getProductSKU() {
    return productSKU;
  }

  public void setProductSKU(String productSKU) {
    this.productSKU = productSKU;
  }


  public CheckoutLicenseRequest checkoutType(CheckoutType checkoutType) {
    this.checkoutType = checkoutType;
    return this;
  }

  /**
   * Get checkoutType
   * @return checkoutType
   */
  @javax.annotation.Nonnull
  public CheckoutType getCheckoutType() {
    return checkoutType;
  }

  public void setCheckoutType(CheckoutType checkoutType) {
    this.checkoutType = checkoutType;
  }


  public CheckoutLicenseRequest keyFingerprint(String keyFingerprint) {
    this.keyFingerprint = keyFingerprint;
    return this;
  }

  /**
   * Get keyFingerprint
   * @return keyFingerprint
   */
  @javax.annotation.Nonnull
  public String getKeyFingerprint() {
    return keyFingerprint;
  }

  public void setKeyFingerprint(String keyFingerprint) {
    this.keyFingerprint = keyFingerprint;
  }


  public CheckoutLicenseRequest entitlements(List entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  /**
   * Get entitlements
   * @return entitlements
   */
  @javax.annotation.Nonnull
  public List getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List entitlements) {
    this.entitlements = entitlements;
  }


  public CheckoutLicenseRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CheckoutLicenseRequest beneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
    return this;
  }

  /**
   * Get beneficiary
   * @return beneficiary
   */
  @javax.annotation.Nullable
  public String getBeneficiary() {
    return beneficiary;
  }

  public void setBeneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
  }


  public CheckoutLicenseRequest nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutLicenseRequest checkoutLicenseRequest = (CheckoutLicenseRequest) o;
    return Objects.equals(this.productSKU, checkoutLicenseRequest.productSKU) &&
        Objects.equals(this.checkoutType, checkoutLicenseRequest.checkoutType) &&
        Objects.equals(this.keyFingerprint, checkoutLicenseRequest.keyFingerprint) &&
        Objects.equals(this.entitlements, checkoutLicenseRequest.entitlements) &&
        Objects.equals(this.clientToken, checkoutLicenseRequest.clientToken) &&
        Objects.equals(this.beneficiary, checkoutLicenseRequest.beneficiary) &&
        Objects.equals(this.nodeId, checkoutLicenseRequest.nodeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productSKU, checkoutType, keyFingerprint, entitlements, clientToken, beneficiary, nodeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutLicenseRequest {\n");
    sb.append("    productSKU: ").append(toIndentedString(productSKU)).append("\n");
    sb.append("    checkoutType: ").append(toIndentedString(checkoutType)).append("\n");
    sb.append("    keyFingerprint: ").append(toIndentedString(keyFingerprint)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    beneficiary: ").append(toIndentedString(beneficiary)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProductSKU");
    openapiFields.add("CheckoutType");
    openapiFields.add("KeyFingerprint");
    openapiFields.add("Entitlements");
    openapiFields.add("ClientToken");
    openapiFields.add("Beneficiary");
    openapiFields.add("NodeId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ProductSKU");
    openapiRequiredFields.add("CheckoutType");
    openapiRequiredFields.add("KeyFingerprint");
    openapiRequiredFields.add("Entitlements");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutLicenseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutLicenseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutLicenseRequest is not found in the empty JSON string", CheckoutLicenseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutLicenseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutLicenseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutLicenseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ProductSKU`
      String.validateJsonElement(jsonObj.get("ProductSKU"));
      // validate the required field `CheckoutType`
      CheckoutType.validateJsonElement(jsonObj.get("CheckoutType"));
      // validate the required field `KeyFingerprint`
      String.validateJsonElement(jsonObj.get("KeyFingerprint"));
      // validate the required field `Entitlements`
      List.validateJsonElement(jsonObj.get("Entitlements"));
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
      // validate the optional field `Beneficiary`
      if (jsonObj.get("Beneficiary") != null && !jsonObj.get("Beneficiary").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Beneficiary"));
      }
      // validate the optional field `NodeId`
      if (jsonObj.get("NodeId") != null && !jsonObj.get("NodeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutLicenseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutLicenseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutLicenseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutLicenseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutLicenseRequest>() {
           @Override
           public void write(JsonWriter out, CheckoutLicenseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutLicenseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutLicenseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutLicenseRequest
   * @throws IOException if the JSON string is invalid with respect to CheckoutLicenseRequest
   */
  public static CheckoutLicenseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutLicenseRequest.class);
  }

  /**
   * Convert an instance of CheckoutLicenseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

