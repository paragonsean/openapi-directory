/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LicenseConversionTaskDestinationLicenseContext;
import org.openapitools.client.model.LicenseConversionTaskSourceLicenseContext;
import org.openapitools.client.model.LicenseConversionTaskStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a license type conversion task.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseConversionTask {
  public static final String SERIALIZED_NAME_LICENSE_CONVERSION_TASK_ID = "LicenseConversionTaskId";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONVERSION_TASK_ID)
  private String licenseConversionTaskId;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_SOURCE_LICENSE_CONTEXT = "SourceLicenseContext";
  @SerializedName(SERIALIZED_NAME_SOURCE_LICENSE_CONTEXT)
  private LicenseConversionTaskSourceLicenseContext sourceLicenseContext;

  public static final String SERIALIZED_NAME_DESTINATION_LICENSE_CONTEXT = "DestinationLicenseContext";
  @SerializedName(SERIALIZED_NAME_DESTINATION_LICENSE_CONTEXT)
  private LicenseConversionTaskDestinationLicenseContext destinationLicenseContext;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LicenseConversionTaskStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "StatusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_LICENSE_CONVERSION_TIME = "LicenseConversionTime";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONVERSION_TIME)
  private OffsetDateTime licenseConversionTime;

  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public LicenseConversionTask() {
  }

  public LicenseConversionTask licenseConversionTaskId(String licenseConversionTaskId) {
    this.licenseConversionTaskId = licenseConversionTaskId;
    return this;
  }

  /**
   * Get licenseConversionTaskId
   * @return licenseConversionTaskId
   */
  @javax.annotation.Nullable
  public String getLicenseConversionTaskId() {
    return licenseConversionTaskId;
  }

  public void setLicenseConversionTaskId(String licenseConversionTaskId) {
    this.licenseConversionTaskId = licenseConversionTaskId;
  }


  public LicenseConversionTask resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public LicenseConversionTask sourceLicenseContext(LicenseConversionTaskSourceLicenseContext sourceLicenseContext) {
    this.sourceLicenseContext = sourceLicenseContext;
    return this;
  }

  /**
   * Get sourceLicenseContext
   * @return sourceLicenseContext
   */
  @javax.annotation.Nullable
  public LicenseConversionTaskSourceLicenseContext getSourceLicenseContext() {
    return sourceLicenseContext;
  }

  public void setSourceLicenseContext(LicenseConversionTaskSourceLicenseContext sourceLicenseContext) {
    this.sourceLicenseContext = sourceLicenseContext;
  }


  public LicenseConversionTask destinationLicenseContext(LicenseConversionTaskDestinationLicenseContext destinationLicenseContext) {
    this.destinationLicenseContext = destinationLicenseContext;
    return this;
  }

  /**
   * Get destinationLicenseContext
   * @return destinationLicenseContext
   */
  @javax.annotation.Nullable
  public LicenseConversionTaskDestinationLicenseContext getDestinationLicenseContext() {
    return destinationLicenseContext;
  }

  public void setDestinationLicenseContext(LicenseConversionTaskDestinationLicenseContext destinationLicenseContext) {
    this.destinationLicenseContext = destinationLicenseContext;
  }


  public LicenseConversionTask status(LicenseConversionTaskStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LicenseConversionTaskStatus getStatus() {
    return status;
  }

  public void setStatus(LicenseConversionTaskStatus status) {
    this.status = status;
  }


  public LicenseConversionTask statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public LicenseConversionTask startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public LicenseConversionTask licenseConversionTime(OffsetDateTime licenseConversionTime) {
    this.licenseConversionTime = licenseConversionTime;
    return this;
  }

  /**
   * Get licenseConversionTime
   * @return licenseConversionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLicenseConversionTime() {
    return licenseConversionTime;
  }

  public void setLicenseConversionTime(OffsetDateTime licenseConversionTime) {
    this.licenseConversionTime = licenseConversionTime;
  }


  public LicenseConversionTask endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseConversionTask licenseConversionTask = (LicenseConversionTask) o;
    return Objects.equals(this.licenseConversionTaskId, licenseConversionTask.licenseConversionTaskId) &&
        Objects.equals(this.resourceArn, licenseConversionTask.resourceArn) &&
        Objects.equals(this.sourceLicenseContext, licenseConversionTask.sourceLicenseContext) &&
        Objects.equals(this.destinationLicenseContext, licenseConversionTask.destinationLicenseContext) &&
        Objects.equals(this.status, licenseConversionTask.status) &&
        Objects.equals(this.statusMessage, licenseConversionTask.statusMessage) &&
        Objects.equals(this.startTime, licenseConversionTask.startTime) &&
        Objects.equals(this.licenseConversionTime, licenseConversionTask.licenseConversionTime) &&
        Objects.equals(this.endTime, licenseConversionTask.endTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseConversionTaskId, resourceArn, sourceLicenseContext, destinationLicenseContext, status, statusMessage, startTime, licenseConversionTime, endTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseConversionTask {\n");
    sb.append("    licenseConversionTaskId: ").append(toIndentedString(licenseConversionTaskId)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    sourceLicenseContext: ").append(toIndentedString(sourceLicenseContext)).append("\n");
    sb.append("    destinationLicenseContext: ").append(toIndentedString(destinationLicenseContext)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    licenseConversionTime: ").append(toIndentedString(licenseConversionTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseConversionTaskId");
    openapiFields.add("ResourceArn");
    openapiFields.add("SourceLicenseContext");
    openapiFields.add("DestinationLicenseContext");
    openapiFields.add("Status");
    openapiFields.add("StatusMessage");
    openapiFields.add("StartTime");
    openapiFields.add("LicenseConversionTime");
    openapiFields.add("EndTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseConversionTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseConversionTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseConversionTask is not found in the empty JSON string", LicenseConversionTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseConversionTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseConversionTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LicenseConversionTaskId`
      if (jsonObj.get("LicenseConversionTaskId") != null && !jsonObj.get("LicenseConversionTaskId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseConversionTaskId"));
      }
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `SourceLicenseContext`
      if (jsonObj.get("SourceLicenseContext") != null && !jsonObj.get("SourceLicenseContext").isJsonNull()) {
        LicenseConversionTaskSourceLicenseContext.validateJsonElement(jsonObj.get("SourceLicenseContext"));
      }
      // validate the optional field `DestinationLicenseContext`
      if (jsonObj.get("DestinationLicenseContext") != null && !jsonObj.get("DestinationLicenseContext").isJsonNull()) {
        LicenseConversionTaskDestinationLicenseContext.validateJsonElement(jsonObj.get("DestinationLicenseContext"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        LicenseConversionTaskStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `StatusMessage`
      if (jsonObj.get("StatusMessage") != null && !jsonObj.get("StatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusMessage"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `LicenseConversionTime`
      if (jsonObj.get("LicenseConversionTime") != null && !jsonObj.get("LicenseConversionTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LicenseConversionTime"));
      }
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseConversionTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseConversionTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseConversionTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseConversionTask.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseConversionTask>() {
           @Override
           public void write(JsonWriter out, LicenseConversionTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseConversionTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseConversionTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseConversionTask
   * @throws IOException if the JSON string is invalid with respect to LicenseConversionTask
   */
  public static LicenseConversionTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseConversionTask.class);
  }

  /**
   * Convert an instance of LicenseConversionTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

