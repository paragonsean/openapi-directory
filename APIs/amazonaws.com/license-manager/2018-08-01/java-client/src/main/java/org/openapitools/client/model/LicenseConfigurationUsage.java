/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the usage of a resource associated with a license configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseConfigurationUsage {
  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_STATUS = "ResourceStatus";
  @SerializedName(SERIALIZED_NAME_RESOURCE_STATUS)
  private String resourceStatus;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER_ID = "ResourceOwnerId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER_ID)
  private String resourceOwnerId;

  public static final String SERIALIZED_NAME_ASSOCIATION_TIME = "AssociationTime";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_TIME)
  private OffsetDateTime associationTime;

  public static final String SERIALIZED_NAME_CONSUMED_LICENSES = "ConsumedLicenses";
  @SerializedName(SERIALIZED_NAME_CONSUMED_LICENSES)
  private Integer consumedLicenses;

  public LicenseConfigurationUsage() {
  }

  public LicenseConfigurationUsage resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public LicenseConfigurationUsage resourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public LicenseConfigurationUsage resourceStatus(String resourceStatus) {
    this.resourceStatus = resourceStatus;
    return this;
  }

  /**
   * Get resourceStatus
   * @return resourceStatus
   */
  @javax.annotation.Nullable
  public String getResourceStatus() {
    return resourceStatus;
  }

  public void setResourceStatus(String resourceStatus) {
    this.resourceStatus = resourceStatus;
  }


  public LicenseConfigurationUsage resourceOwnerId(String resourceOwnerId) {
    this.resourceOwnerId = resourceOwnerId;
    return this;
  }

  /**
   * Get resourceOwnerId
   * @return resourceOwnerId
   */
  @javax.annotation.Nullable
  public String getResourceOwnerId() {
    return resourceOwnerId;
  }

  public void setResourceOwnerId(String resourceOwnerId) {
    this.resourceOwnerId = resourceOwnerId;
  }


  public LicenseConfigurationUsage associationTime(OffsetDateTime associationTime) {
    this.associationTime = associationTime;
    return this;
  }

  /**
   * Get associationTime
   * @return associationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAssociationTime() {
    return associationTime;
  }

  public void setAssociationTime(OffsetDateTime associationTime) {
    this.associationTime = associationTime;
  }


  public LicenseConfigurationUsage consumedLicenses(Integer consumedLicenses) {
    this.consumedLicenses = consumedLicenses;
    return this;
  }

  /**
   * Get consumedLicenses
   * @return consumedLicenses
   */
  @javax.annotation.Nullable
  public Integer getConsumedLicenses() {
    return consumedLicenses;
  }

  public void setConsumedLicenses(Integer consumedLicenses) {
    this.consumedLicenses = consumedLicenses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseConfigurationUsage licenseConfigurationUsage = (LicenseConfigurationUsage) o;
    return Objects.equals(this.resourceArn, licenseConfigurationUsage.resourceArn) &&
        Objects.equals(this.resourceType, licenseConfigurationUsage.resourceType) &&
        Objects.equals(this.resourceStatus, licenseConfigurationUsage.resourceStatus) &&
        Objects.equals(this.resourceOwnerId, licenseConfigurationUsage.resourceOwnerId) &&
        Objects.equals(this.associationTime, licenseConfigurationUsage.associationTime) &&
        Objects.equals(this.consumedLicenses, licenseConfigurationUsage.consumedLicenses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceArn, resourceType, resourceStatus, resourceOwnerId, associationTime, consumedLicenses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseConfigurationUsage {\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceStatus: ").append(toIndentedString(resourceStatus)).append("\n");
    sb.append("    resourceOwnerId: ").append(toIndentedString(resourceOwnerId)).append("\n");
    sb.append("    associationTime: ").append(toIndentedString(associationTime)).append("\n");
    sb.append("    consumedLicenses: ").append(toIndentedString(consumedLicenses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceArn");
    openapiFields.add("ResourceType");
    openapiFields.add("ResourceStatus");
    openapiFields.add("ResourceOwnerId");
    openapiFields.add("AssociationTime");
    openapiFields.add("ConsumedLicenses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseConfigurationUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseConfigurationUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseConfigurationUsage is not found in the empty JSON string", LicenseConfigurationUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseConfigurationUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseConfigurationUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `ResourceStatus`
      if (jsonObj.get("ResourceStatus") != null && !jsonObj.get("ResourceStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceStatus"));
      }
      // validate the optional field `ResourceOwnerId`
      if (jsonObj.get("ResourceOwnerId") != null && !jsonObj.get("ResourceOwnerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceOwnerId"));
      }
      // validate the optional field `AssociationTime`
      if (jsonObj.get("AssociationTime") != null && !jsonObj.get("AssociationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AssociationTime"));
      }
      // validate the optional field `ConsumedLicenses`
      if (jsonObj.get("ConsumedLicenses") != null && !jsonObj.get("ConsumedLicenses").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConsumedLicenses"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseConfigurationUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseConfigurationUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseConfigurationUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseConfigurationUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseConfigurationUsage>() {
           @Override
           public void write(JsonWriter out, LicenseConfigurationUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseConfigurationUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseConfigurationUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseConfigurationUsage
   * @throws IOException if the JSON string is invalid with respect to LicenseConfigurationUsage
   */
  public static LicenseConfigurationUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseConfigurationUsage.class);
  }

  /**
   * Convert an instance of LicenseConfigurationUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

