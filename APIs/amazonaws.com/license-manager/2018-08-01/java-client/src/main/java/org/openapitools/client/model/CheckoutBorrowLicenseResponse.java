/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckoutBorrowLicenseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckoutBorrowLicenseResponse {
  public static final String SERIALIZED_NAME_LICENSE_ARN = "LicenseArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_ARN)
  private String licenseArn;

  public static final String SERIALIZED_NAME_LICENSE_CONSUMPTION_TOKEN = "LicenseConsumptionToken";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONSUMPTION_TOKEN)
  private String licenseConsumptionToken;

  public static final String SERIALIZED_NAME_ENTITLEMENTS_ALLOWED = "EntitlementsAllowed";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS_ALLOWED)
  private List entitlementsAllowed;

  public static final String SERIALIZED_NAME_NODE_ID = "NodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_SIGNED_TOKEN = "SignedToken";
  @SerializedName(SERIALIZED_NAME_SIGNED_TOKEN)
  private String signedToken;

  public static final String SERIALIZED_NAME_ISSUED_AT = "IssuedAt";
  @SerializedName(SERIALIZED_NAME_ISSUED_AT)
  private String issuedAt;

  public static final String SERIALIZED_NAME_EXPIRATION = "Expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private String expiration;

  public static final String SERIALIZED_NAME_CHECKOUT_METADATA = "CheckoutMetadata";
  @SerializedName(SERIALIZED_NAME_CHECKOUT_METADATA)
  private List checkoutMetadata;

  public CheckoutBorrowLicenseResponse() {
  }

  public CheckoutBorrowLicenseResponse licenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
    return this;
  }

  /**
   * Get licenseArn
   * @return licenseArn
   */
  @javax.annotation.Nullable
  public String getLicenseArn() {
    return licenseArn;
  }

  public void setLicenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
  }


  public CheckoutBorrowLicenseResponse licenseConsumptionToken(String licenseConsumptionToken) {
    this.licenseConsumptionToken = licenseConsumptionToken;
    return this;
  }

  /**
   * Get licenseConsumptionToken
   * @return licenseConsumptionToken
   */
  @javax.annotation.Nullable
  public String getLicenseConsumptionToken() {
    return licenseConsumptionToken;
  }

  public void setLicenseConsumptionToken(String licenseConsumptionToken) {
    this.licenseConsumptionToken = licenseConsumptionToken;
  }


  public CheckoutBorrowLicenseResponse entitlementsAllowed(List entitlementsAllowed) {
    this.entitlementsAllowed = entitlementsAllowed;
    return this;
  }

  /**
   * Get entitlementsAllowed
   * @return entitlementsAllowed
   */
  @javax.annotation.Nullable
  public List getEntitlementsAllowed() {
    return entitlementsAllowed;
  }

  public void setEntitlementsAllowed(List entitlementsAllowed) {
    this.entitlementsAllowed = entitlementsAllowed;
  }


  public CheckoutBorrowLicenseResponse nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public CheckoutBorrowLicenseResponse signedToken(String signedToken) {
    this.signedToken = signedToken;
    return this;
  }

  /**
   * Get signedToken
   * @return signedToken
   */
  @javax.annotation.Nullable
  public String getSignedToken() {
    return signedToken;
  }

  public void setSignedToken(String signedToken) {
    this.signedToken = signedToken;
  }


  public CheckoutBorrowLicenseResponse issuedAt(String issuedAt) {
    this.issuedAt = issuedAt;
    return this;
  }

  /**
   * Get issuedAt
   * @return issuedAt
   */
  @javax.annotation.Nullable
  public String getIssuedAt() {
    return issuedAt;
  }

  public void setIssuedAt(String issuedAt) {
    this.issuedAt = issuedAt;
  }


  public CheckoutBorrowLicenseResponse expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }


  public CheckoutBorrowLicenseResponse checkoutMetadata(List checkoutMetadata) {
    this.checkoutMetadata = checkoutMetadata;
    return this;
  }

  /**
   * Get checkoutMetadata
   * @return checkoutMetadata
   */
  @javax.annotation.Nullable
  public List getCheckoutMetadata() {
    return checkoutMetadata;
  }

  public void setCheckoutMetadata(List checkoutMetadata) {
    this.checkoutMetadata = checkoutMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutBorrowLicenseResponse checkoutBorrowLicenseResponse = (CheckoutBorrowLicenseResponse) o;
    return Objects.equals(this.licenseArn, checkoutBorrowLicenseResponse.licenseArn) &&
        Objects.equals(this.licenseConsumptionToken, checkoutBorrowLicenseResponse.licenseConsumptionToken) &&
        Objects.equals(this.entitlementsAllowed, checkoutBorrowLicenseResponse.entitlementsAllowed) &&
        Objects.equals(this.nodeId, checkoutBorrowLicenseResponse.nodeId) &&
        Objects.equals(this.signedToken, checkoutBorrowLicenseResponse.signedToken) &&
        Objects.equals(this.issuedAt, checkoutBorrowLicenseResponse.issuedAt) &&
        Objects.equals(this.expiration, checkoutBorrowLicenseResponse.expiration) &&
        Objects.equals(this.checkoutMetadata, checkoutBorrowLicenseResponse.checkoutMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseArn, licenseConsumptionToken, entitlementsAllowed, nodeId, signedToken, issuedAt, expiration, checkoutMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutBorrowLicenseResponse {\n");
    sb.append("    licenseArn: ").append(toIndentedString(licenseArn)).append("\n");
    sb.append("    licenseConsumptionToken: ").append(toIndentedString(licenseConsumptionToken)).append("\n");
    sb.append("    entitlementsAllowed: ").append(toIndentedString(entitlementsAllowed)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    signedToken: ").append(toIndentedString(signedToken)).append("\n");
    sb.append("    issuedAt: ").append(toIndentedString(issuedAt)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    checkoutMetadata: ").append(toIndentedString(checkoutMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseArn");
    openapiFields.add("LicenseConsumptionToken");
    openapiFields.add("EntitlementsAllowed");
    openapiFields.add("NodeId");
    openapiFields.add("SignedToken");
    openapiFields.add("IssuedAt");
    openapiFields.add("Expiration");
    openapiFields.add("CheckoutMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutBorrowLicenseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutBorrowLicenseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutBorrowLicenseResponse is not found in the empty JSON string", CheckoutBorrowLicenseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutBorrowLicenseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutBorrowLicenseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LicenseArn`
      if (jsonObj.get("LicenseArn") != null && !jsonObj.get("LicenseArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseArn"));
      }
      // validate the optional field `LicenseConsumptionToken`
      if (jsonObj.get("LicenseConsumptionToken") != null && !jsonObj.get("LicenseConsumptionToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseConsumptionToken"));
      }
      // validate the optional field `EntitlementsAllowed`
      if (jsonObj.get("EntitlementsAllowed") != null && !jsonObj.get("EntitlementsAllowed").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EntitlementsAllowed"));
      }
      // validate the optional field `NodeId`
      if (jsonObj.get("NodeId") != null && !jsonObj.get("NodeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeId"));
      }
      // validate the optional field `SignedToken`
      if (jsonObj.get("SignedToken") != null && !jsonObj.get("SignedToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SignedToken"));
      }
      // validate the optional field `IssuedAt`
      if (jsonObj.get("IssuedAt") != null && !jsonObj.get("IssuedAt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IssuedAt"));
      }
      // validate the optional field `Expiration`
      if (jsonObj.get("Expiration") != null && !jsonObj.get("Expiration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Expiration"));
      }
      // validate the optional field `CheckoutMetadata`
      if (jsonObj.get("CheckoutMetadata") != null && !jsonObj.get("CheckoutMetadata").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CheckoutMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutBorrowLicenseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutBorrowLicenseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutBorrowLicenseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutBorrowLicenseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutBorrowLicenseResponse>() {
           @Override
           public void write(JsonWriter out, CheckoutBorrowLicenseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutBorrowLicenseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutBorrowLicenseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutBorrowLicenseResponse
   * @throws IOException if the JSON string is invalid with respect to CheckoutBorrowLicenseResponse
   */
  public static CheckoutBorrowLicenseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutBorrowLicenseResponse.class);
  }

  /**
   * Convert an instance of CheckoutBorrowLicenseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

