/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UpdateLicenseManagerReportGeneratorRequestReportContext;
import org.openapitools.client.model.UpdateLicenseManagerReportGeneratorRequestReportFrequency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLicenseManagerReportGeneratorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLicenseManagerReportGeneratorRequest {
  public static final String SERIALIZED_NAME_LICENSE_MANAGER_REPORT_GENERATOR_ARN = "LicenseManagerReportGeneratorArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_MANAGER_REPORT_GENERATOR_ARN)
  private String licenseManagerReportGeneratorArn;

  public static final String SERIALIZED_NAME_REPORT_GENERATOR_NAME = "ReportGeneratorName";
  @SerializedName(SERIALIZED_NAME_REPORT_GENERATOR_NAME)
  private String reportGeneratorName;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List type;

  public static final String SERIALIZED_NAME_REPORT_CONTEXT = "ReportContext";
  @SerializedName(SERIALIZED_NAME_REPORT_CONTEXT)
  private UpdateLicenseManagerReportGeneratorRequestReportContext reportContext;

  public static final String SERIALIZED_NAME_REPORT_FREQUENCY = "ReportFrequency";
  @SerializedName(SERIALIZED_NAME_REPORT_FREQUENCY)
  private UpdateLicenseManagerReportGeneratorRequestReportFrequency reportFrequency;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public UpdateLicenseManagerReportGeneratorRequest() {
  }

  public UpdateLicenseManagerReportGeneratorRequest licenseManagerReportGeneratorArn(String licenseManagerReportGeneratorArn) {
    this.licenseManagerReportGeneratorArn = licenseManagerReportGeneratorArn;
    return this;
  }

  /**
   * Get licenseManagerReportGeneratorArn
   * @return licenseManagerReportGeneratorArn
   */
  @javax.annotation.Nonnull
  public String getLicenseManagerReportGeneratorArn() {
    return licenseManagerReportGeneratorArn;
  }

  public void setLicenseManagerReportGeneratorArn(String licenseManagerReportGeneratorArn) {
    this.licenseManagerReportGeneratorArn = licenseManagerReportGeneratorArn;
  }


  public UpdateLicenseManagerReportGeneratorRequest reportGeneratorName(String reportGeneratorName) {
    this.reportGeneratorName = reportGeneratorName;
    return this;
  }

  /**
   * Get reportGeneratorName
   * @return reportGeneratorName
   */
  @javax.annotation.Nonnull
  public String getReportGeneratorName() {
    return reportGeneratorName;
  }

  public void setReportGeneratorName(String reportGeneratorName) {
    this.reportGeneratorName = reportGeneratorName;
  }


  public UpdateLicenseManagerReportGeneratorRequest type(List type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public List getType() {
    return type;
  }

  public void setType(List type) {
    this.type = type;
  }


  public UpdateLicenseManagerReportGeneratorRequest reportContext(UpdateLicenseManagerReportGeneratorRequestReportContext reportContext) {
    this.reportContext = reportContext;
    return this;
  }

  /**
   * Get reportContext
   * @return reportContext
   */
  @javax.annotation.Nonnull
  public UpdateLicenseManagerReportGeneratorRequestReportContext getReportContext() {
    return reportContext;
  }

  public void setReportContext(UpdateLicenseManagerReportGeneratorRequestReportContext reportContext) {
    this.reportContext = reportContext;
  }


  public UpdateLicenseManagerReportGeneratorRequest reportFrequency(UpdateLicenseManagerReportGeneratorRequestReportFrequency reportFrequency) {
    this.reportFrequency = reportFrequency;
    return this;
  }

  /**
   * Get reportFrequency
   * @return reportFrequency
   */
  @javax.annotation.Nonnull
  public UpdateLicenseManagerReportGeneratorRequestReportFrequency getReportFrequency() {
    return reportFrequency;
  }

  public void setReportFrequency(UpdateLicenseManagerReportGeneratorRequestReportFrequency reportFrequency) {
    this.reportFrequency = reportFrequency;
  }


  public UpdateLicenseManagerReportGeneratorRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public UpdateLicenseManagerReportGeneratorRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLicenseManagerReportGeneratorRequest updateLicenseManagerReportGeneratorRequest = (UpdateLicenseManagerReportGeneratorRequest) o;
    return Objects.equals(this.licenseManagerReportGeneratorArn, updateLicenseManagerReportGeneratorRequest.licenseManagerReportGeneratorArn) &&
        Objects.equals(this.reportGeneratorName, updateLicenseManagerReportGeneratorRequest.reportGeneratorName) &&
        Objects.equals(this.type, updateLicenseManagerReportGeneratorRequest.type) &&
        Objects.equals(this.reportContext, updateLicenseManagerReportGeneratorRequest.reportContext) &&
        Objects.equals(this.reportFrequency, updateLicenseManagerReportGeneratorRequest.reportFrequency) &&
        Objects.equals(this.clientToken, updateLicenseManagerReportGeneratorRequest.clientToken) &&
        Objects.equals(this.description, updateLicenseManagerReportGeneratorRequest.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseManagerReportGeneratorArn, reportGeneratorName, type, reportContext, reportFrequency, clientToken, description);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLicenseManagerReportGeneratorRequest {\n");
    sb.append("    licenseManagerReportGeneratorArn: ").append(toIndentedString(licenseManagerReportGeneratorArn)).append("\n");
    sb.append("    reportGeneratorName: ").append(toIndentedString(reportGeneratorName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    reportContext: ").append(toIndentedString(reportContext)).append("\n");
    sb.append("    reportFrequency: ").append(toIndentedString(reportFrequency)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseManagerReportGeneratorArn");
    openapiFields.add("ReportGeneratorName");
    openapiFields.add("Type");
    openapiFields.add("ReportContext");
    openapiFields.add("ReportFrequency");
    openapiFields.add("ClientToken");
    openapiFields.add("Description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LicenseManagerReportGeneratorArn");
    openapiRequiredFields.add("ReportGeneratorName");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("ReportContext");
    openapiRequiredFields.add("ReportFrequency");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLicenseManagerReportGeneratorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLicenseManagerReportGeneratorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLicenseManagerReportGeneratorRequest is not found in the empty JSON string", UpdateLicenseManagerReportGeneratorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLicenseManagerReportGeneratorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLicenseManagerReportGeneratorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLicenseManagerReportGeneratorRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LicenseManagerReportGeneratorArn`
      String.validateJsonElement(jsonObj.get("LicenseManagerReportGeneratorArn"));
      // validate the required field `ReportGeneratorName`
      String.validateJsonElement(jsonObj.get("ReportGeneratorName"));
      // validate the required field `Type`
      List.validateJsonElement(jsonObj.get("Type"));
      // validate the required field `ReportContext`
      UpdateLicenseManagerReportGeneratorRequestReportContext.validateJsonElement(jsonObj.get("ReportContext"));
      // validate the required field `ReportFrequency`
      UpdateLicenseManagerReportGeneratorRequestReportFrequency.validateJsonElement(jsonObj.get("ReportFrequency"));
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLicenseManagerReportGeneratorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLicenseManagerReportGeneratorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLicenseManagerReportGeneratorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLicenseManagerReportGeneratorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLicenseManagerReportGeneratorRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLicenseManagerReportGeneratorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLicenseManagerReportGeneratorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLicenseManagerReportGeneratorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLicenseManagerReportGeneratorRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLicenseManagerReportGeneratorRequest
   */
  public static UpdateLicenseManagerReportGeneratorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLicenseManagerReportGeneratorRequest.class);
  }

  /**
   * Convert an instance of UpdateLicenseManagerReportGeneratorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

