/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LicenseConfigurationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLicenseConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLicenseConfigurationRequest {
  public static final String SERIALIZED_NAME_LICENSE_CONFIGURATION_ARN = "LicenseConfigurationArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONFIGURATION_ARN)
  private String licenseConfigurationArn;

  public static final String SERIALIZED_NAME_LICENSE_CONFIGURATION_STATUS = "LicenseConfigurationStatus";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONFIGURATION_STATUS)
  private LicenseConfigurationStatus licenseConfigurationStatus;

  public static final String SERIALIZED_NAME_LICENSE_RULES = "LicenseRules";
  @SerializedName(SERIALIZED_NAME_LICENSE_RULES)
  private List licenseRules;

  public static final String SERIALIZED_NAME_LICENSE_COUNT = "LicenseCount";
  @SerializedName(SERIALIZED_NAME_LICENSE_COUNT)
  private Integer licenseCount;

  public static final String SERIALIZED_NAME_LICENSE_COUNT_HARD_LIMIT = "LicenseCountHardLimit";
  @SerializedName(SERIALIZED_NAME_LICENSE_COUNT_HARD_LIMIT)
  private Boolean licenseCountHardLimit;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRODUCT_INFORMATION_LIST = "ProductInformationList";
  @SerializedName(SERIALIZED_NAME_PRODUCT_INFORMATION_LIST)
  private List productInformationList;

  public static final String SERIALIZED_NAME_DISASSOCIATE_WHEN_NOT_FOUND = "DisassociateWhenNotFound";
  @SerializedName(SERIALIZED_NAME_DISASSOCIATE_WHEN_NOT_FOUND)
  private Boolean disassociateWhenNotFound;

  public UpdateLicenseConfigurationRequest() {
  }

  public UpdateLicenseConfigurationRequest licenseConfigurationArn(String licenseConfigurationArn) {
    this.licenseConfigurationArn = licenseConfigurationArn;
    return this;
  }

  /**
   * Get licenseConfigurationArn
   * @return licenseConfigurationArn
   */
  @javax.annotation.Nonnull
  public String getLicenseConfigurationArn() {
    return licenseConfigurationArn;
  }

  public void setLicenseConfigurationArn(String licenseConfigurationArn) {
    this.licenseConfigurationArn = licenseConfigurationArn;
  }


  public UpdateLicenseConfigurationRequest licenseConfigurationStatus(LicenseConfigurationStatus licenseConfigurationStatus) {
    this.licenseConfigurationStatus = licenseConfigurationStatus;
    return this;
  }

  /**
   * Get licenseConfigurationStatus
   * @return licenseConfigurationStatus
   */
  @javax.annotation.Nullable
  public LicenseConfigurationStatus getLicenseConfigurationStatus() {
    return licenseConfigurationStatus;
  }

  public void setLicenseConfigurationStatus(LicenseConfigurationStatus licenseConfigurationStatus) {
    this.licenseConfigurationStatus = licenseConfigurationStatus;
  }


  public UpdateLicenseConfigurationRequest licenseRules(List licenseRules) {
    this.licenseRules = licenseRules;
    return this;
  }

  /**
   * Get licenseRules
   * @return licenseRules
   */
  @javax.annotation.Nullable
  public List getLicenseRules() {
    return licenseRules;
  }

  public void setLicenseRules(List licenseRules) {
    this.licenseRules = licenseRules;
  }


  public UpdateLicenseConfigurationRequest licenseCount(Integer licenseCount) {
    this.licenseCount = licenseCount;
    return this;
  }

  /**
   * Get licenseCount
   * @return licenseCount
   */
  @javax.annotation.Nullable
  public Integer getLicenseCount() {
    return licenseCount;
  }

  public void setLicenseCount(Integer licenseCount) {
    this.licenseCount = licenseCount;
  }


  public UpdateLicenseConfigurationRequest licenseCountHardLimit(Boolean licenseCountHardLimit) {
    this.licenseCountHardLimit = licenseCountHardLimit;
    return this;
  }

  /**
   * Get licenseCountHardLimit
   * @return licenseCountHardLimit
   */
  @javax.annotation.Nullable
  public Boolean getLicenseCountHardLimit() {
    return licenseCountHardLimit;
  }

  public void setLicenseCountHardLimit(Boolean licenseCountHardLimit) {
    this.licenseCountHardLimit = licenseCountHardLimit;
  }


  public UpdateLicenseConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateLicenseConfigurationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateLicenseConfigurationRequest productInformationList(List productInformationList) {
    this.productInformationList = productInformationList;
    return this;
  }

  /**
   * Get productInformationList
   * @return productInformationList
   */
  @javax.annotation.Nullable
  public List getProductInformationList() {
    return productInformationList;
  }

  public void setProductInformationList(List productInformationList) {
    this.productInformationList = productInformationList;
  }


  public UpdateLicenseConfigurationRequest disassociateWhenNotFound(Boolean disassociateWhenNotFound) {
    this.disassociateWhenNotFound = disassociateWhenNotFound;
    return this;
  }

  /**
   * Get disassociateWhenNotFound
   * @return disassociateWhenNotFound
   */
  @javax.annotation.Nullable
  public Boolean getDisassociateWhenNotFound() {
    return disassociateWhenNotFound;
  }

  public void setDisassociateWhenNotFound(Boolean disassociateWhenNotFound) {
    this.disassociateWhenNotFound = disassociateWhenNotFound;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLicenseConfigurationRequest updateLicenseConfigurationRequest = (UpdateLicenseConfigurationRequest) o;
    return Objects.equals(this.licenseConfigurationArn, updateLicenseConfigurationRequest.licenseConfigurationArn) &&
        Objects.equals(this.licenseConfigurationStatus, updateLicenseConfigurationRequest.licenseConfigurationStatus) &&
        Objects.equals(this.licenseRules, updateLicenseConfigurationRequest.licenseRules) &&
        Objects.equals(this.licenseCount, updateLicenseConfigurationRequest.licenseCount) &&
        Objects.equals(this.licenseCountHardLimit, updateLicenseConfigurationRequest.licenseCountHardLimit) &&
        Objects.equals(this.name, updateLicenseConfigurationRequest.name) &&
        Objects.equals(this.description, updateLicenseConfigurationRequest.description) &&
        Objects.equals(this.productInformationList, updateLicenseConfigurationRequest.productInformationList) &&
        Objects.equals(this.disassociateWhenNotFound, updateLicenseConfigurationRequest.disassociateWhenNotFound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseConfigurationArn, licenseConfigurationStatus, licenseRules, licenseCount, licenseCountHardLimit, name, description, productInformationList, disassociateWhenNotFound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLicenseConfigurationRequest {\n");
    sb.append("    licenseConfigurationArn: ").append(toIndentedString(licenseConfigurationArn)).append("\n");
    sb.append("    licenseConfigurationStatus: ").append(toIndentedString(licenseConfigurationStatus)).append("\n");
    sb.append("    licenseRules: ").append(toIndentedString(licenseRules)).append("\n");
    sb.append("    licenseCount: ").append(toIndentedString(licenseCount)).append("\n");
    sb.append("    licenseCountHardLimit: ").append(toIndentedString(licenseCountHardLimit)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    productInformationList: ").append(toIndentedString(productInformationList)).append("\n");
    sb.append("    disassociateWhenNotFound: ").append(toIndentedString(disassociateWhenNotFound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseConfigurationArn");
    openapiFields.add("LicenseConfigurationStatus");
    openapiFields.add("LicenseRules");
    openapiFields.add("LicenseCount");
    openapiFields.add("LicenseCountHardLimit");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("ProductInformationList");
    openapiFields.add("DisassociateWhenNotFound");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LicenseConfigurationArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLicenseConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLicenseConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLicenseConfigurationRequest is not found in the empty JSON string", UpdateLicenseConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLicenseConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLicenseConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLicenseConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LicenseConfigurationArn`
      String.validateJsonElement(jsonObj.get("LicenseConfigurationArn"));
      // validate the optional field `LicenseConfigurationStatus`
      if (jsonObj.get("LicenseConfigurationStatus") != null && !jsonObj.get("LicenseConfigurationStatus").isJsonNull()) {
        LicenseConfigurationStatus.validateJsonElement(jsonObj.get("LicenseConfigurationStatus"));
      }
      // validate the optional field `LicenseRules`
      if (jsonObj.get("LicenseRules") != null && !jsonObj.get("LicenseRules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LicenseRules"));
      }
      // validate the optional field `LicenseCount`
      if (jsonObj.get("LicenseCount") != null && !jsonObj.get("LicenseCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LicenseCount"));
      }
      // validate the optional field `LicenseCountHardLimit`
      if (jsonObj.get("LicenseCountHardLimit") != null && !jsonObj.get("LicenseCountHardLimit").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("LicenseCountHardLimit"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ProductInformationList`
      if (jsonObj.get("ProductInformationList") != null && !jsonObj.get("ProductInformationList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProductInformationList"));
      }
      // validate the optional field `DisassociateWhenNotFound`
      if (jsonObj.get("DisassociateWhenNotFound") != null && !jsonObj.get("DisassociateWhenNotFound").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisassociateWhenNotFound"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLicenseConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLicenseConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLicenseConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLicenseConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLicenseConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLicenseConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLicenseConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLicenseConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLicenseConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLicenseConfigurationRequest
   */
  public static UpdateLicenseConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLicenseConfigurationRequest.class);
  }

  /**
   * Convert an instance of UpdateLicenseConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

