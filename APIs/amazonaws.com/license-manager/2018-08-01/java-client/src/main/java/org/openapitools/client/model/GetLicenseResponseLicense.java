/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLicenseRequestValidity;
import org.openapitools.client.model.LicenseConsumptionConfiguration;
import org.openapitools.client.model.LicenseIssuer;
import org.openapitools.client.model.LicenseStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetLicenseResponseLicense
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetLicenseResponseLicense {
  public static final String SERIALIZED_NAME_LICENSE_ARN = "LicenseArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_ARN)
  private String licenseArn;

  public static final String SERIALIZED_NAME_LICENSE_NAME = "LicenseName";
  @SerializedName(SERIALIZED_NAME_LICENSE_NAME)
  private String licenseName;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_PRODUCT_S_K_U = "ProductSKU";
  @SerializedName(SERIALIZED_NAME_PRODUCT_S_K_U)
  private String productSKU;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private LicenseIssuer issuer;

  public static final String SERIALIZED_NAME_HOME_REGION = "HomeRegion";
  @SerializedName(SERIALIZED_NAME_HOME_REGION)
  private String homeRegion;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LicenseStatus status;

  public static final String SERIALIZED_NAME_VALIDITY = "Validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private CreateLicenseRequestValidity validity;

  public static final String SERIALIZED_NAME_BENEFICIARY = "Beneficiary";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY)
  private String beneficiary;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "Entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List entitlements;

  public static final String SERIALIZED_NAME_CONSUMPTION_CONFIGURATION = "ConsumptionConfiguration";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_CONFIGURATION)
  private LicenseConsumptionConfiguration consumptionConfiguration;

  public static final String SERIALIZED_NAME_LICENSE_METADATA = "LicenseMetadata";
  @SerializedName(SERIALIZED_NAME_LICENSE_METADATA)
  private List licenseMetadata;

  public static final String SERIALIZED_NAME_CREATE_TIME = "CreateTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GetLicenseResponseLicense() {
  }

  public GetLicenseResponseLicense licenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
    return this;
  }

  /**
   * Get licenseArn
   * @return licenseArn
   */
  @javax.annotation.Nullable
  public String getLicenseArn() {
    return licenseArn;
  }

  public void setLicenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
  }


  public GetLicenseResponseLicense licenseName(String licenseName) {
    this.licenseName = licenseName;
    return this;
  }

  /**
   * Get licenseName
   * @return licenseName
   */
  @javax.annotation.Nullable
  public String getLicenseName() {
    return licenseName;
  }

  public void setLicenseName(String licenseName) {
    this.licenseName = licenseName;
  }


  public GetLicenseResponseLicense productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public GetLicenseResponseLicense productSKU(String productSKU) {
    this.productSKU = productSKU;
    return this;
  }

  /**
   * Get productSKU
   * @return productSKU
   */
  @javax.annotation.Nullable
  public String getProductSKU() {
    return productSKU;
  }

  public void setProductSKU(String productSKU) {
    this.productSKU = productSKU;
  }


  public GetLicenseResponseLicense issuer(LicenseIssuer issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public LicenseIssuer getIssuer() {
    return issuer;
  }

  public void setIssuer(LicenseIssuer issuer) {
    this.issuer = issuer;
  }


  public GetLicenseResponseLicense homeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
    return this;
  }

  /**
   * Get homeRegion
   * @return homeRegion
   */
  @javax.annotation.Nullable
  public String getHomeRegion() {
    return homeRegion;
  }

  public void setHomeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
  }


  public GetLicenseResponseLicense status(LicenseStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public LicenseStatus getStatus() {
    return status;
  }

  public void setStatus(LicenseStatus status) {
    this.status = status;
  }


  public GetLicenseResponseLicense validity(CreateLicenseRequestValidity validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   * @return validity
   */
  @javax.annotation.Nullable
  public CreateLicenseRequestValidity getValidity() {
    return validity;
  }

  public void setValidity(CreateLicenseRequestValidity validity) {
    this.validity = validity;
  }


  public GetLicenseResponseLicense beneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
    return this;
  }

  /**
   * Get beneficiary
   * @return beneficiary
   */
  @javax.annotation.Nullable
  public String getBeneficiary() {
    return beneficiary;
  }

  public void setBeneficiary(String beneficiary) {
    this.beneficiary = beneficiary;
  }


  public GetLicenseResponseLicense entitlements(List entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  /**
   * Get entitlements
   * @return entitlements
   */
  @javax.annotation.Nullable
  public List getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List entitlements) {
    this.entitlements = entitlements;
  }


  public GetLicenseResponseLicense consumptionConfiguration(LicenseConsumptionConfiguration consumptionConfiguration) {
    this.consumptionConfiguration = consumptionConfiguration;
    return this;
  }

  /**
   * Get consumptionConfiguration
   * @return consumptionConfiguration
   */
  @javax.annotation.Nullable
  public LicenseConsumptionConfiguration getConsumptionConfiguration() {
    return consumptionConfiguration;
  }

  public void setConsumptionConfiguration(LicenseConsumptionConfiguration consumptionConfiguration) {
    this.consumptionConfiguration = consumptionConfiguration;
  }


  public GetLicenseResponseLicense licenseMetadata(List licenseMetadata) {
    this.licenseMetadata = licenseMetadata;
    return this;
  }

  /**
   * Get licenseMetadata
   * @return licenseMetadata
   */
  @javax.annotation.Nullable
  public List getLicenseMetadata() {
    return licenseMetadata;
  }

  public void setLicenseMetadata(List licenseMetadata) {
    this.licenseMetadata = licenseMetadata;
  }


  public GetLicenseResponseLicense createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GetLicenseResponseLicense version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetLicenseResponseLicense getLicenseResponseLicense = (GetLicenseResponseLicense) o;
    return Objects.equals(this.licenseArn, getLicenseResponseLicense.licenseArn) &&
        Objects.equals(this.licenseName, getLicenseResponseLicense.licenseName) &&
        Objects.equals(this.productName, getLicenseResponseLicense.productName) &&
        Objects.equals(this.productSKU, getLicenseResponseLicense.productSKU) &&
        Objects.equals(this.issuer, getLicenseResponseLicense.issuer) &&
        Objects.equals(this.homeRegion, getLicenseResponseLicense.homeRegion) &&
        Objects.equals(this.status, getLicenseResponseLicense.status) &&
        Objects.equals(this.validity, getLicenseResponseLicense.validity) &&
        Objects.equals(this.beneficiary, getLicenseResponseLicense.beneficiary) &&
        Objects.equals(this.entitlements, getLicenseResponseLicense.entitlements) &&
        Objects.equals(this.consumptionConfiguration, getLicenseResponseLicense.consumptionConfiguration) &&
        Objects.equals(this.licenseMetadata, getLicenseResponseLicense.licenseMetadata) &&
        Objects.equals(this.createTime, getLicenseResponseLicense.createTime) &&
        Objects.equals(this.version, getLicenseResponseLicense.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseArn, licenseName, productName, productSKU, issuer, homeRegion, status, validity, beneficiary, entitlements, consumptionConfiguration, licenseMetadata, createTime, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetLicenseResponseLicense {\n");
    sb.append("    licenseArn: ").append(toIndentedString(licenseArn)).append("\n");
    sb.append("    licenseName: ").append(toIndentedString(licenseName)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productSKU: ").append(toIndentedString(productSKU)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    homeRegion: ").append(toIndentedString(homeRegion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    beneficiary: ").append(toIndentedString(beneficiary)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    consumptionConfiguration: ").append(toIndentedString(consumptionConfiguration)).append("\n");
    sb.append("    licenseMetadata: ").append(toIndentedString(licenseMetadata)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseArn");
    openapiFields.add("LicenseName");
    openapiFields.add("ProductName");
    openapiFields.add("ProductSKU");
    openapiFields.add("Issuer");
    openapiFields.add("HomeRegion");
    openapiFields.add("Status");
    openapiFields.add("Validity");
    openapiFields.add("Beneficiary");
    openapiFields.add("Entitlements");
    openapiFields.add("ConsumptionConfiguration");
    openapiFields.add("LicenseMetadata");
    openapiFields.add("CreateTime");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetLicenseResponseLicense
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetLicenseResponseLicense.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetLicenseResponseLicense is not found in the empty JSON string", GetLicenseResponseLicense.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetLicenseResponseLicense.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetLicenseResponseLicense` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LicenseArn`
      if (jsonObj.get("LicenseArn") != null && !jsonObj.get("LicenseArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseArn"));
      }
      // validate the optional field `LicenseName`
      if (jsonObj.get("LicenseName") != null && !jsonObj.get("LicenseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseName"));
      }
      // validate the optional field `ProductName`
      if (jsonObj.get("ProductName") != null && !jsonObj.get("ProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProductName"));
      }
      // validate the optional field `ProductSKU`
      if (jsonObj.get("ProductSKU") != null && !jsonObj.get("ProductSKU").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProductSKU"));
      }
      // validate the optional field `Issuer`
      if (jsonObj.get("Issuer") != null && !jsonObj.get("Issuer").isJsonNull()) {
        LicenseIssuer.validateJsonElement(jsonObj.get("Issuer"));
      }
      // validate the optional field `HomeRegion`
      if (jsonObj.get("HomeRegion") != null && !jsonObj.get("HomeRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HomeRegion"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        LicenseStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Validity`
      if (jsonObj.get("Validity") != null && !jsonObj.get("Validity").isJsonNull()) {
        CreateLicenseRequestValidity.validateJsonElement(jsonObj.get("Validity"));
      }
      // validate the optional field `Beneficiary`
      if (jsonObj.get("Beneficiary") != null && !jsonObj.get("Beneficiary").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Beneficiary"));
      }
      // validate the optional field `Entitlements`
      if (jsonObj.get("Entitlements") != null && !jsonObj.get("Entitlements").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Entitlements"));
      }
      // validate the optional field `ConsumptionConfiguration`
      if (jsonObj.get("ConsumptionConfiguration") != null && !jsonObj.get("ConsumptionConfiguration").isJsonNull()) {
        LicenseConsumptionConfiguration.validateJsonElement(jsonObj.get("ConsumptionConfiguration"));
      }
      // validate the optional field `LicenseMetadata`
      if (jsonObj.get("LicenseMetadata") != null && !jsonObj.get("LicenseMetadata").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LicenseMetadata"));
      }
      // validate the optional field `CreateTime`
      if (jsonObj.get("CreateTime") != null && !jsonObj.get("CreateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreateTime"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetLicenseResponseLicense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetLicenseResponseLicense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetLicenseResponseLicense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetLicenseResponseLicense.class));

       return (TypeAdapter<T>) new TypeAdapter<GetLicenseResponseLicense>() {
           @Override
           public void write(JsonWriter out, GetLicenseResponseLicense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetLicenseResponseLicense read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetLicenseResponseLicense given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetLicenseResponseLicense
   * @throws IOException if the JSON string is invalid with respect to GetLicenseResponseLicense
   */
  public static GetLicenseResponseLicense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetLicenseResponseLicense.class);
  }

  /**
   * Convert an instance of GetLicenseResponseLicense to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

