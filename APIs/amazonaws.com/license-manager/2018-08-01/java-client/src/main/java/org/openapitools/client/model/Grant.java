/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateGrantVersionRequestOptions;
import org.openapitools.client.model.GrantStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a grant.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Grant {
  public static final String SERIALIZED_NAME_GRANT_ARN = "GrantArn";
  @SerializedName(SERIALIZED_NAME_GRANT_ARN)
  private String grantArn;

  public static final String SERIALIZED_NAME_GRANT_NAME = "GrantName";
  @SerializedName(SERIALIZED_NAME_GRANT_NAME)
  private String grantName;

  public static final String SERIALIZED_NAME_PARENT_ARN = "ParentArn";
  @SerializedName(SERIALIZED_NAME_PARENT_ARN)
  private String parentArn;

  public static final String SERIALIZED_NAME_LICENSE_ARN = "LicenseArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_ARN)
  private String licenseArn;

  public static final String SERIALIZED_NAME_GRANTEE_PRINCIPAL_ARN = "GranteePrincipalArn";
  @SerializedName(SERIALIZED_NAME_GRANTEE_PRINCIPAL_ARN)
  private String granteePrincipalArn;

  public static final String SERIALIZED_NAME_HOME_REGION = "HomeRegion";
  @SerializedName(SERIALIZED_NAME_HOME_REGION)
  private String homeRegion;

  public static final String SERIALIZED_NAME_GRANT_STATUS = "GrantStatus";
  @SerializedName(SERIALIZED_NAME_GRANT_STATUS)
  private GrantStatus grantStatus;

  public static final String SERIALIZED_NAME_STATUS_REASON = "StatusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_GRANTED_OPERATIONS = "GrantedOperations";
  @SerializedName(SERIALIZED_NAME_GRANTED_OPERATIONS)
  private List grantedOperations;

  public static final String SERIALIZED_NAME_OPTIONS = "Options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private CreateGrantVersionRequestOptions options;

  public Grant() {
  }

  public Grant grantArn(String grantArn) {
    this.grantArn = grantArn;
    return this;
  }

  /**
   * Get grantArn
   * @return grantArn
   */
  @javax.annotation.Nonnull
  public String getGrantArn() {
    return grantArn;
  }

  public void setGrantArn(String grantArn) {
    this.grantArn = grantArn;
  }


  public Grant grantName(String grantName) {
    this.grantName = grantName;
    return this;
  }

  /**
   * Get grantName
   * @return grantName
   */
  @javax.annotation.Nonnull
  public String getGrantName() {
    return grantName;
  }

  public void setGrantName(String grantName) {
    this.grantName = grantName;
  }


  public Grant parentArn(String parentArn) {
    this.parentArn = parentArn;
    return this;
  }

  /**
   * Get parentArn
   * @return parentArn
   */
  @javax.annotation.Nonnull
  public String getParentArn() {
    return parentArn;
  }

  public void setParentArn(String parentArn) {
    this.parentArn = parentArn;
  }


  public Grant licenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
    return this;
  }

  /**
   * Get licenseArn
   * @return licenseArn
   */
  @javax.annotation.Nonnull
  public String getLicenseArn() {
    return licenseArn;
  }

  public void setLicenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
  }


  public Grant granteePrincipalArn(String granteePrincipalArn) {
    this.granteePrincipalArn = granteePrincipalArn;
    return this;
  }

  /**
   * Get granteePrincipalArn
   * @return granteePrincipalArn
   */
  @javax.annotation.Nonnull
  public String getGranteePrincipalArn() {
    return granteePrincipalArn;
  }

  public void setGranteePrincipalArn(String granteePrincipalArn) {
    this.granteePrincipalArn = granteePrincipalArn;
  }


  public Grant homeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
    return this;
  }

  /**
   * Get homeRegion
   * @return homeRegion
   */
  @javax.annotation.Nonnull
  public String getHomeRegion() {
    return homeRegion;
  }

  public void setHomeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
  }


  public Grant grantStatus(GrantStatus grantStatus) {
    this.grantStatus = grantStatus;
    return this;
  }

  /**
   * Get grantStatus
   * @return grantStatus
   */
  @javax.annotation.Nonnull
  public GrantStatus getGrantStatus() {
    return grantStatus;
  }

  public void setGrantStatus(GrantStatus grantStatus) {
    this.grantStatus = grantStatus;
  }


  public Grant statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public Grant version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public Grant grantedOperations(List grantedOperations) {
    this.grantedOperations = grantedOperations;
    return this;
  }

  /**
   * Get grantedOperations
   * @return grantedOperations
   */
  @javax.annotation.Nonnull
  public List getGrantedOperations() {
    return grantedOperations;
  }

  public void setGrantedOperations(List grantedOperations) {
    this.grantedOperations = grantedOperations;
  }


  public Grant options(CreateGrantVersionRequestOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public CreateGrantVersionRequestOptions getOptions() {
    return options;
  }

  public void setOptions(CreateGrantVersionRequestOptions options) {
    this.options = options;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Grant grant = (Grant) o;
    return Objects.equals(this.grantArn, grant.grantArn) &&
        Objects.equals(this.grantName, grant.grantName) &&
        Objects.equals(this.parentArn, grant.parentArn) &&
        Objects.equals(this.licenseArn, grant.licenseArn) &&
        Objects.equals(this.granteePrincipalArn, grant.granteePrincipalArn) &&
        Objects.equals(this.homeRegion, grant.homeRegion) &&
        Objects.equals(this.grantStatus, grant.grantStatus) &&
        Objects.equals(this.statusReason, grant.statusReason) &&
        Objects.equals(this.version, grant.version) &&
        Objects.equals(this.grantedOperations, grant.grantedOperations) &&
        Objects.equals(this.options, grant.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grantArn, grantName, parentArn, licenseArn, granteePrincipalArn, homeRegion, grantStatus, statusReason, version, grantedOperations, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Grant {\n");
    sb.append("    grantArn: ").append(toIndentedString(grantArn)).append("\n");
    sb.append("    grantName: ").append(toIndentedString(grantName)).append("\n");
    sb.append("    parentArn: ").append(toIndentedString(parentArn)).append("\n");
    sb.append("    licenseArn: ").append(toIndentedString(licenseArn)).append("\n");
    sb.append("    granteePrincipalArn: ").append(toIndentedString(granteePrincipalArn)).append("\n");
    sb.append("    homeRegion: ").append(toIndentedString(homeRegion)).append("\n");
    sb.append("    grantStatus: ").append(toIndentedString(grantStatus)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    grantedOperations: ").append(toIndentedString(grantedOperations)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GrantArn");
    openapiFields.add("GrantName");
    openapiFields.add("ParentArn");
    openapiFields.add("LicenseArn");
    openapiFields.add("GranteePrincipalArn");
    openapiFields.add("HomeRegion");
    openapiFields.add("GrantStatus");
    openapiFields.add("StatusReason");
    openapiFields.add("Version");
    openapiFields.add("GrantedOperations");
    openapiFields.add("Options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("GrantArn");
    openapiRequiredFields.add("GrantName");
    openapiRequiredFields.add("ParentArn");
    openapiRequiredFields.add("LicenseArn");
    openapiRequiredFields.add("GranteePrincipalArn");
    openapiRequiredFields.add("HomeRegion");
    openapiRequiredFields.add("GrantStatus");
    openapiRequiredFields.add("Version");
    openapiRequiredFields.add("GrantedOperations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Grant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Grant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Grant is not found in the empty JSON string", Grant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Grant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Grant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Grant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `GrantArn`
      String.validateJsonElement(jsonObj.get("GrantArn"));
      // validate the required field `GrantName`
      String.validateJsonElement(jsonObj.get("GrantName"));
      // validate the required field `ParentArn`
      String.validateJsonElement(jsonObj.get("ParentArn"));
      // validate the required field `LicenseArn`
      String.validateJsonElement(jsonObj.get("LicenseArn"));
      // validate the required field `GranteePrincipalArn`
      String.validateJsonElement(jsonObj.get("GranteePrincipalArn"));
      // validate the required field `HomeRegion`
      String.validateJsonElement(jsonObj.get("HomeRegion"));
      // validate the required field `GrantStatus`
      GrantStatus.validateJsonElement(jsonObj.get("GrantStatus"));
      // validate the optional field `StatusReason`
      if (jsonObj.get("StatusReason") != null && !jsonObj.get("StatusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StatusReason"));
      }
      // validate the required field `Version`
      String.validateJsonElement(jsonObj.get("Version"));
      // validate the required field `GrantedOperations`
      List.validateJsonElement(jsonObj.get("GrantedOperations"));
      // validate the optional field `Options`
      if (jsonObj.get("Options") != null && !jsonObj.get("Options").isJsonNull()) {
        CreateGrantVersionRequestOptions.validateJsonElement(jsonObj.get("Options"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Grant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Grant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Grant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Grant.class));

       return (TypeAdapter<T>) new TypeAdapter<Grant>() {
           @Override
           public void write(JsonWriter out, Grant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Grant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Grant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Grant
   * @throws IOException if the JSON string is invalid with respect to Grant
   */
  public static Grant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Grant.class);
  }

  /**
   * Convert an instance of Grant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

