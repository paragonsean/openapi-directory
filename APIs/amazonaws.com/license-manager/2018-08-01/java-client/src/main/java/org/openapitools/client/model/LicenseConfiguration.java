/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetLicenseConfigurationResponseAutomatedDiscoveryInformation;
import org.openapitools.client.model.LicenseCountingType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), host affinity (how long a VM must be associated with a host), and the number of licenses purchased and used.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseConfiguration {
  public static final String SERIALIZED_NAME_LICENSE_CONFIGURATION_ID = "LicenseConfigurationId";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONFIGURATION_ID)
  private String licenseConfigurationId;

  public static final String SERIALIZED_NAME_LICENSE_CONFIGURATION_ARN = "LicenseConfigurationArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_CONFIGURATION_ARN)
  private String licenseConfigurationArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LICENSE_COUNTING_TYPE = "LicenseCountingType";
  @SerializedName(SERIALIZED_NAME_LICENSE_COUNTING_TYPE)
  private LicenseCountingType licenseCountingType;

  public static final String SERIALIZED_NAME_LICENSE_RULES = "LicenseRules";
  @SerializedName(SERIALIZED_NAME_LICENSE_RULES)
  private List licenseRules;

  public static final String SERIALIZED_NAME_LICENSE_COUNT = "LicenseCount";
  @SerializedName(SERIALIZED_NAME_LICENSE_COUNT)
  private Integer licenseCount;

  public static final String SERIALIZED_NAME_LICENSE_COUNT_HARD_LIMIT = "LicenseCountHardLimit";
  @SerializedName(SERIALIZED_NAME_LICENSE_COUNT_HARD_LIMIT)
  private Boolean licenseCountHardLimit;

  public static final String SERIALIZED_NAME_DISASSOCIATE_WHEN_NOT_FOUND = "DisassociateWhenNotFound";
  @SerializedName(SERIALIZED_NAME_DISASSOCIATE_WHEN_NOT_FOUND)
  private Boolean disassociateWhenNotFound;

  public static final String SERIALIZED_NAME_CONSUMED_LICENSES = "ConsumedLicenses";
  @SerializedName(SERIALIZED_NAME_CONSUMED_LICENSES)
  private Integer consumedLicenses;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_OWNER_ACCOUNT_ID = "OwnerAccountId";
  @SerializedName(SERIALIZED_NAME_OWNER_ACCOUNT_ID)
  private String ownerAccountId;

  public static final String SERIALIZED_NAME_CONSUMED_LICENSE_SUMMARY_LIST = "ConsumedLicenseSummaryList";
  @SerializedName(SERIALIZED_NAME_CONSUMED_LICENSE_SUMMARY_LIST)
  private List consumedLicenseSummaryList;

  public static final String SERIALIZED_NAME_MANAGED_RESOURCE_SUMMARY_LIST = "ManagedResourceSummaryList";
  @SerializedName(SERIALIZED_NAME_MANAGED_RESOURCE_SUMMARY_LIST)
  private List managedResourceSummaryList;

  public static final String SERIALIZED_NAME_PRODUCT_INFORMATION_LIST = "ProductInformationList";
  @SerializedName(SERIALIZED_NAME_PRODUCT_INFORMATION_LIST)
  private List productInformationList;

  public static final String SERIALIZED_NAME_AUTOMATED_DISCOVERY_INFORMATION = "AutomatedDiscoveryInformation";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_DISCOVERY_INFORMATION)
  private GetLicenseConfigurationResponseAutomatedDiscoveryInformation automatedDiscoveryInformation;

  public LicenseConfiguration() {
  }

  public LicenseConfiguration licenseConfigurationId(String licenseConfigurationId) {
    this.licenseConfigurationId = licenseConfigurationId;
    return this;
  }

  /**
   * Get licenseConfigurationId
   * @return licenseConfigurationId
   */
  @javax.annotation.Nullable
  public String getLicenseConfigurationId() {
    return licenseConfigurationId;
  }

  public void setLicenseConfigurationId(String licenseConfigurationId) {
    this.licenseConfigurationId = licenseConfigurationId;
  }


  public LicenseConfiguration licenseConfigurationArn(String licenseConfigurationArn) {
    this.licenseConfigurationArn = licenseConfigurationArn;
    return this;
  }

  /**
   * Get licenseConfigurationArn
   * @return licenseConfigurationArn
   */
  @javax.annotation.Nullable
  public String getLicenseConfigurationArn() {
    return licenseConfigurationArn;
  }

  public void setLicenseConfigurationArn(String licenseConfigurationArn) {
    this.licenseConfigurationArn = licenseConfigurationArn;
  }


  public LicenseConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LicenseConfiguration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LicenseConfiguration licenseCountingType(LicenseCountingType licenseCountingType) {
    this.licenseCountingType = licenseCountingType;
    return this;
  }

  /**
   * Get licenseCountingType
   * @return licenseCountingType
   */
  @javax.annotation.Nullable
  public LicenseCountingType getLicenseCountingType() {
    return licenseCountingType;
  }

  public void setLicenseCountingType(LicenseCountingType licenseCountingType) {
    this.licenseCountingType = licenseCountingType;
  }


  public LicenseConfiguration licenseRules(List licenseRules) {
    this.licenseRules = licenseRules;
    return this;
  }

  /**
   * Get licenseRules
   * @return licenseRules
   */
  @javax.annotation.Nullable
  public List getLicenseRules() {
    return licenseRules;
  }

  public void setLicenseRules(List licenseRules) {
    this.licenseRules = licenseRules;
  }


  public LicenseConfiguration licenseCount(Integer licenseCount) {
    this.licenseCount = licenseCount;
    return this;
  }

  /**
   * Get licenseCount
   * @return licenseCount
   */
  @javax.annotation.Nullable
  public Integer getLicenseCount() {
    return licenseCount;
  }

  public void setLicenseCount(Integer licenseCount) {
    this.licenseCount = licenseCount;
  }


  public LicenseConfiguration licenseCountHardLimit(Boolean licenseCountHardLimit) {
    this.licenseCountHardLimit = licenseCountHardLimit;
    return this;
  }

  /**
   * Get licenseCountHardLimit
   * @return licenseCountHardLimit
   */
  @javax.annotation.Nullable
  public Boolean getLicenseCountHardLimit() {
    return licenseCountHardLimit;
  }

  public void setLicenseCountHardLimit(Boolean licenseCountHardLimit) {
    this.licenseCountHardLimit = licenseCountHardLimit;
  }


  public LicenseConfiguration disassociateWhenNotFound(Boolean disassociateWhenNotFound) {
    this.disassociateWhenNotFound = disassociateWhenNotFound;
    return this;
  }

  /**
   * Get disassociateWhenNotFound
   * @return disassociateWhenNotFound
   */
  @javax.annotation.Nullable
  public Boolean getDisassociateWhenNotFound() {
    return disassociateWhenNotFound;
  }

  public void setDisassociateWhenNotFound(Boolean disassociateWhenNotFound) {
    this.disassociateWhenNotFound = disassociateWhenNotFound;
  }


  public LicenseConfiguration consumedLicenses(Integer consumedLicenses) {
    this.consumedLicenses = consumedLicenses;
    return this;
  }

  /**
   * Get consumedLicenses
   * @return consumedLicenses
   */
  @javax.annotation.Nullable
  public Integer getConsumedLicenses() {
    return consumedLicenses;
  }

  public void setConsumedLicenses(Integer consumedLicenses) {
    this.consumedLicenses = consumedLicenses;
  }


  public LicenseConfiguration status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public LicenseConfiguration ownerAccountId(String ownerAccountId) {
    this.ownerAccountId = ownerAccountId;
    return this;
  }

  /**
   * Get ownerAccountId
   * @return ownerAccountId
   */
  @javax.annotation.Nullable
  public String getOwnerAccountId() {
    return ownerAccountId;
  }

  public void setOwnerAccountId(String ownerAccountId) {
    this.ownerAccountId = ownerAccountId;
  }


  public LicenseConfiguration consumedLicenseSummaryList(List consumedLicenseSummaryList) {
    this.consumedLicenseSummaryList = consumedLicenseSummaryList;
    return this;
  }

  /**
   * Get consumedLicenseSummaryList
   * @return consumedLicenseSummaryList
   */
  @javax.annotation.Nullable
  public List getConsumedLicenseSummaryList() {
    return consumedLicenseSummaryList;
  }

  public void setConsumedLicenseSummaryList(List consumedLicenseSummaryList) {
    this.consumedLicenseSummaryList = consumedLicenseSummaryList;
  }


  public LicenseConfiguration managedResourceSummaryList(List managedResourceSummaryList) {
    this.managedResourceSummaryList = managedResourceSummaryList;
    return this;
  }

  /**
   * Get managedResourceSummaryList
   * @return managedResourceSummaryList
   */
  @javax.annotation.Nullable
  public List getManagedResourceSummaryList() {
    return managedResourceSummaryList;
  }

  public void setManagedResourceSummaryList(List managedResourceSummaryList) {
    this.managedResourceSummaryList = managedResourceSummaryList;
  }


  public LicenseConfiguration productInformationList(List productInformationList) {
    this.productInformationList = productInformationList;
    return this;
  }

  /**
   * Get productInformationList
   * @return productInformationList
   */
  @javax.annotation.Nullable
  public List getProductInformationList() {
    return productInformationList;
  }

  public void setProductInformationList(List productInformationList) {
    this.productInformationList = productInformationList;
  }


  public LicenseConfiguration automatedDiscoveryInformation(GetLicenseConfigurationResponseAutomatedDiscoveryInformation automatedDiscoveryInformation) {
    this.automatedDiscoveryInformation = automatedDiscoveryInformation;
    return this;
  }

  /**
   * Get automatedDiscoveryInformation
   * @return automatedDiscoveryInformation
   */
  @javax.annotation.Nullable
  public GetLicenseConfigurationResponseAutomatedDiscoveryInformation getAutomatedDiscoveryInformation() {
    return automatedDiscoveryInformation;
  }

  public void setAutomatedDiscoveryInformation(GetLicenseConfigurationResponseAutomatedDiscoveryInformation automatedDiscoveryInformation) {
    this.automatedDiscoveryInformation = automatedDiscoveryInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseConfiguration licenseConfiguration = (LicenseConfiguration) o;
    return Objects.equals(this.licenseConfigurationId, licenseConfiguration.licenseConfigurationId) &&
        Objects.equals(this.licenseConfigurationArn, licenseConfiguration.licenseConfigurationArn) &&
        Objects.equals(this.name, licenseConfiguration.name) &&
        Objects.equals(this.description, licenseConfiguration.description) &&
        Objects.equals(this.licenseCountingType, licenseConfiguration.licenseCountingType) &&
        Objects.equals(this.licenseRules, licenseConfiguration.licenseRules) &&
        Objects.equals(this.licenseCount, licenseConfiguration.licenseCount) &&
        Objects.equals(this.licenseCountHardLimit, licenseConfiguration.licenseCountHardLimit) &&
        Objects.equals(this.disassociateWhenNotFound, licenseConfiguration.disassociateWhenNotFound) &&
        Objects.equals(this.consumedLicenses, licenseConfiguration.consumedLicenses) &&
        Objects.equals(this.status, licenseConfiguration.status) &&
        Objects.equals(this.ownerAccountId, licenseConfiguration.ownerAccountId) &&
        Objects.equals(this.consumedLicenseSummaryList, licenseConfiguration.consumedLicenseSummaryList) &&
        Objects.equals(this.managedResourceSummaryList, licenseConfiguration.managedResourceSummaryList) &&
        Objects.equals(this.productInformationList, licenseConfiguration.productInformationList) &&
        Objects.equals(this.automatedDiscoveryInformation, licenseConfiguration.automatedDiscoveryInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseConfigurationId, licenseConfigurationArn, name, description, licenseCountingType, licenseRules, licenseCount, licenseCountHardLimit, disassociateWhenNotFound, consumedLicenses, status, ownerAccountId, consumedLicenseSummaryList, managedResourceSummaryList, productInformationList, automatedDiscoveryInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseConfiguration {\n");
    sb.append("    licenseConfigurationId: ").append(toIndentedString(licenseConfigurationId)).append("\n");
    sb.append("    licenseConfigurationArn: ").append(toIndentedString(licenseConfigurationArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    licenseCountingType: ").append(toIndentedString(licenseCountingType)).append("\n");
    sb.append("    licenseRules: ").append(toIndentedString(licenseRules)).append("\n");
    sb.append("    licenseCount: ").append(toIndentedString(licenseCount)).append("\n");
    sb.append("    licenseCountHardLimit: ").append(toIndentedString(licenseCountHardLimit)).append("\n");
    sb.append("    disassociateWhenNotFound: ").append(toIndentedString(disassociateWhenNotFound)).append("\n");
    sb.append("    consumedLicenses: ").append(toIndentedString(consumedLicenses)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ownerAccountId: ").append(toIndentedString(ownerAccountId)).append("\n");
    sb.append("    consumedLicenseSummaryList: ").append(toIndentedString(consumedLicenseSummaryList)).append("\n");
    sb.append("    managedResourceSummaryList: ").append(toIndentedString(managedResourceSummaryList)).append("\n");
    sb.append("    productInformationList: ").append(toIndentedString(productInformationList)).append("\n");
    sb.append("    automatedDiscoveryInformation: ").append(toIndentedString(automatedDiscoveryInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseConfigurationId");
    openapiFields.add("LicenseConfigurationArn");
    openapiFields.add("Name");
    openapiFields.add("Description");
    openapiFields.add("LicenseCountingType");
    openapiFields.add("LicenseRules");
    openapiFields.add("LicenseCount");
    openapiFields.add("LicenseCountHardLimit");
    openapiFields.add("DisassociateWhenNotFound");
    openapiFields.add("ConsumedLicenses");
    openapiFields.add("Status");
    openapiFields.add("OwnerAccountId");
    openapiFields.add("ConsumedLicenseSummaryList");
    openapiFields.add("ManagedResourceSummaryList");
    openapiFields.add("ProductInformationList");
    openapiFields.add("AutomatedDiscoveryInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseConfiguration is not found in the empty JSON string", LicenseConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LicenseConfigurationId`
      if (jsonObj.get("LicenseConfigurationId") != null && !jsonObj.get("LicenseConfigurationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseConfigurationId"));
      }
      // validate the optional field `LicenseConfigurationArn`
      if (jsonObj.get("LicenseConfigurationArn") != null && !jsonObj.get("LicenseConfigurationArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LicenseConfigurationArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `LicenseCountingType`
      if (jsonObj.get("LicenseCountingType") != null && !jsonObj.get("LicenseCountingType").isJsonNull()) {
        LicenseCountingType.validateJsonElement(jsonObj.get("LicenseCountingType"));
      }
      // validate the optional field `LicenseRules`
      if (jsonObj.get("LicenseRules") != null && !jsonObj.get("LicenseRules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LicenseRules"));
      }
      // validate the optional field `LicenseCount`
      if (jsonObj.get("LicenseCount") != null && !jsonObj.get("LicenseCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LicenseCount"));
      }
      // validate the optional field `LicenseCountHardLimit`
      if (jsonObj.get("LicenseCountHardLimit") != null && !jsonObj.get("LicenseCountHardLimit").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("LicenseCountHardLimit"));
      }
      // validate the optional field `DisassociateWhenNotFound`
      if (jsonObj.get("DisassociateWhenNotFound") != null && !jsonObj.get("DisassociateWhenNotFound").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisassociateWhenNotFound"));
      }
      // validate the optional field `ConsumedLicenses`
      if (jsonObj.get("ConsumedLicenses") != null && !jsonObj.get("ConsumedLicenses").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConsumedLicenses"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `OwnerAccountId`
      if (jsonObj.get("OwnerAccountId") != null && !jsonObj.get("OwnerAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnerAccountId"));
      }
      // validate the optional field `ConsumedLicenseSummaryList`
      if (jsonObj.get("ConsumedLicenseSummaryList") != null && !jsonObj.get("ConsumedLicenseSummaryList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ConsumedLicenseSummaryList"));
      }
      // validate the optional field `ManagedResourceSummaryList`
      if (jsonObj.get("ManagedResourceSummaryList") != null && !jsonObj.get("ManagedResourceSummaryList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ManagedResourceSummaryList"));
      }
      // validate the optional field `ProductInformationList`
      if (jsonObj.get("ProductInformationList") != null && !jsonObj.get("ProductInformationList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProductInformationList"));
      }
      // validate the optional field `AutomatedDiscoveryInformation`
      if (jsonObj.get("AutomatedDiscoveryInformation") != null && !jsonObj.get("AutomatedDiscoveryInformation").isJsonNull()) {
        GetLicenseConfigurationResponseAutomatedDiscoveryInformation.validateJsonElement(jsonObj.get("AutomatedDiscoveryInformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseConfiguration>() {
           @Override
           public void write(JsonWriter out, LicenseConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseConfiguration
   * @throws IOException if the JSON string is invalid with respect to LicenseConfiguration
   */
  public static LicenseConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseConfiguration.class);
  }

  /**
   * Convert an instance of LicenseConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

