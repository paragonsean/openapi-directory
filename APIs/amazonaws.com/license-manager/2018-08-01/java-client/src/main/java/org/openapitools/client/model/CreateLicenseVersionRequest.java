/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLicenseRequestConsumptionConfiguration;
import org.openapitools.client.model.CreateLicenseRequestIssuer;
import org.openapitools.client.model.CreateLicenseRequestValidity;
import org.openapitools.client.model.LicenseStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLicenseVersionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLicenseVersionRequest {
  public static final String SERIALIZED_NAME_LICENSE_ARN = "LicenseArn";
  @SerializedName(SERIALIZED_NAME_LICENSE_ARN)
  private String licenseArn;

  public static final String SERIALIZED_NAME_LICENSE_NAME = "LicenseName";
  @SerializedName(SERIALIZED_NAME_LICENSE_NAME)
  private String licenseName;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private CreateLicenseRequestIssuer issuer;

  public static final String SERIALIZED_NAME_HOME_REGION = "HomeRegion";
  @SerializedName(SERIALIZED_NAME_HOME_REGION)
  private String homeRegion;

  public static final String SERIALIZED_NAME_VALIDITY = "Validity";
  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private CreateLicenseRequestValidity validity;

  public static final String SERIALIZED_NAME_LICENSE_METADATA = "LicenseMetadata";
  @SerializedName(SERIALIZED_NAME_LICENSE_METADATA)
  private List licenseMetadata;

  public static final String SERIALIZED_NAME_ENTITLEMENTS = "Entitlements";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENTS)
  private List entitlements;

  public static final String SERIALIZED_NAME_CONSUMPTION_CONFIGURATION = "ConsumptionConfiguration";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_CONFIGURATION)
  private CreateLicenseRequestConsumptionConfiguration consumptionConfiguration;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LicenseStatus status;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_SOURCE_VERSION = "SourceVersion";
  @SerializedName(SERIALIZED_NAME_SOURCE_VERSION)
  private String sourceVersion;

  public CreateLicenseVersionRequest() {
  }

  public CreateLicenseVersionRequest licenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
    return this;
  }

  /**
   * Get licenseArn
   * @return licenseArn
   */
  @javax.annotation.Nonnull
  public String getLicenseArn() {
    return licenseArn;
  }

  public void setLicenseArn(String licenseArn) {
    this.licenseArn = licenseArn;
  }


  public CreateLicenseVersionRequest licenseName(String licenseName) {
    this.licenseName = licenseName;
    return this;
  }

  /**
   * Get licenseName
   * @return licenseName
   */
  @javax.annotation.Nonnull
  public String getLicenseName() {
    return licenseName;
  }

  public void setLicenseName(String licenseName) {
    this.licenseName = licenseName;
  }


  public CreateLicenseVersionRequest productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nonnull
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public CreateLicenseVersionRequest issuer(CreateLicenseRequestIssuer issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nonnull
  public CreateLicenseRequestIssuer getIssuer() {
    return issuer;
  }

  public void setIssuer(CreateLicenseRequestIssuer issuer) {
    this.issuer = issuer;
  }


  public CreateLicenseVersionRequest homeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
    return this;
  }

  /**
   * Get homeRegion
   * @return homeRegion
   */
  @javax.annotation.Nonnull
  public String getHomeRegion() {
    return homeRegion;
  }

  public void setHomeRegion(String homeRegion) {
    this.homeRegion = homeRegion;
  }


  public CreateLicenseVersionRequest validity(CreateLicenseRequestValidity validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   * @return validity
   */
  @javax.annotation.Nonnull
  public CreateLicenseRequestValidity getValidity() {
    return validity;
  }

  public void setValidity(CreateLicenseRequestValidity validity) {
    this.validity = validity;
  }


  public CreateLicenseVersionRequest licenseMetadata(List licenseMetadata) {
    this.licenseMetadata = licenseMetadata;
    return this;
  }

  /**
   * Get licenseMetadata
   * @return licenseMetadata
   */
  @javax.annotation.Nullable
  public List getLicenseMetadata() {
    return licenseMetadata;
  }

  public void setLicenseMetadata(List licenseMetadata) {
    this.licenseMetadata = licenseMetadata;
  }


  public CreateLicenseVersionRequest entitlements(List entitlements) {
    this.entitlements = entitlements;
    return this;
  }

  /**
   * Get entitlements
   * @return entitlements
   */
  @javax.annotation.Nonnull
  public List getEntitlements() {
    return entitlements;
  }

  public void setEntitlements(List entitlements) {
    this.entitlements = entitlements;
  }


  public CreateLicenseVersionRequest consumptionConfiguration(CreateLicenseRequestConsumptionConfiguration consumptionConfiguration) {
    this.consumptionConfiguration = consumptionConfiguration;
    return this;
  }

  /**
   * Get consumptionConfiguration
   * @return consumptionConfiguration
   */
  @javax.annotation.Nonnull
  public CreateLicenseRequestConsumptionConfiguration getConsumptionConfiguration() {
    return consumptionConfiguration;
  }

  public void setConsumptionConfiguration(CreateLicenseRequestConsumptionConfiguration consumptionConfiguration) {
    this.consumptionConfiguration = consumptionConfiguration;
  }


  public CreateLicenseVersionRequest status(LicenseStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public LicenseStatus getStatus() {
    return status;
  }

  public void setStatus(LicenseStatus status) {
    this.status = status;
  }


  public CreateLicenseVersionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateLicenseVersionRequest sourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  /**
   * Get sourceVersion
   * @return sourceVersion
   */
  @javax.annotation.Nullable
  public String getSourceVersion() {
    return sourceVersion;
  }

  public void setSourceVersion(String sourceVersion) {
    this.sourceVersion = sourceVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLicenseVersionRequest createLicenseVersionRequest = (CreateLicenseVersionRequest) o;
    return Objects.equals(this.licenseArn, createLicenseVersionRequest.licenseArn) &&
        Objects.equals(this.licenseName, createLicenseVersionRequest.licenseName) &&
        Objects.equals(this.productName, createLicenseVersionRequest.productName) &&
        Objects.equals(this.issuer, createLicenseVersionRequest.issuer) &&
        Objects.equals(this.homeRegion, createLicenseVersionRequest.homeRegion) &&
        Objects.equals(this.validity, createLicenseVersionRequest.validity) &&
        Objects.equals(this.licenseMetadata, createLicenseVersionRequest.licenseMetadata) &&
        Objects.equals(this.entitlements, createLicenseVersionRequest.entitlements) &&
        Objects.equals(this.consumptionConfiguration, createLicenseVersionRequest.consumptionConfiguration) &&
        Objects.equals(this.status, createLicenseVersionRequest.status) &&
        Objects.equals(this.clientToken, createLicenseVersionRequest.clientToken) &&
        Objects.equals(this.sourceVersion, createLicenseVersionRequest.sourceVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(licenseArn, licenseName, productName, issuer, homeRegion, validity, licenseMetadata, entitlements, consumptionConfiguration, status, clientToken, sourceVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLicenseVersionRequest {\n");
    sb.append("    licenseArn: ").append(toIndentedString(licenseArn)).append("\n");
    sb.append("    licenseName: ").append(toIndentedString(licenseName)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    homeRegion: ").append(toIndentedString(homeRegion)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    licenseMetadata: ").append(toIndentedString(licenseMetadata)).append("\n");
    sb.append("    entitlements: ").append(toIndentedString(entitlements)).append("\n");
    sb.append("    consumptionConfiguration: ").append(toIndentedString(consumptionConfiguration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    sourceVersion: ").append(toIndentedString(sourceVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LicenseArn");
    openapiFields.add("LicenseName");
    openapiFields.add("ProductName");
    openapiFields.add("Issuer");
    openapiFields.add("HomeRegion");
    openapiFields.add("Validity");
    openapiFields.add("LicenseMetadata");
    openapiFields.add("Entitlements");
    openapiFields.add("ConsumptionConfiguration");
    openapiFields.add("Status");
    openapiFields.add("ClientToken");
    openapiFields.add("SourceVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LicenseArn");
    openapiRequiredFields.add("LicenseName");
    openapiRequiredFields.add("ProductName");
    openapiRequiredFields.add("Issuer");
    openapiRequiredFields.add("HomeRegion");
    openapiRequiredFields.add("Validity");
    openapiRequiredFields.add("Entitlements");
    openapiRequiredFields.add("ConsumptionConfiguration");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLicenseVersionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLicenseVersionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLicenseVersionRequest is not found in the empty JSON string", CreateLicenseVersionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLicenseVersionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLicenseVersionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLicenseVersionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LicenseArn`
      String.validateJsonElement(jsonObj.get("LicenseArn"));
      // validate the required field `LicenseName`
      String.validateJsonElement(jsonObj.get("LicenseName"));
      // validate the required field `ProductName`
      String.validateJsonElement(jsonObj.get("ProductName"));
      // validate the required field `Issuer`
      CreateLicenseRequestIssuer.validateJsonElement(jsonObj.get("Issuer"));
      // validate the required field `HomeRegion`
      String.validateJsonElement(jsonObj.get("HomeRegion"));
      // validate the required field `Validity`
      CreateLicenseRequestValidity.validateJsonElement(jsonObj.get("Validity"));
      // validate the optional field `LicenseMetadata`
      if (jsonObj.get("LicenseMetadata") != null && !jsonObj.get("LicenseMetadata").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LicenseMetadata"));
      }
      // validate the required field `Entitlements`
      List.validateJsonElement(jsonObj.get("Entitlements"));
      // validate the required field `ConsumptionConfiguration`
      CreateLicenseRequestConsumptionConfiguration.validateJsonElement(jsonObj.get("ConsumptionConfiguration"));
      // validate the required field `Status`
      LicenseStatus.validateJsonElement(jsonObj.get("Status"));
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
      // validate the optional field `SourceVersion`
      if (jsonObj.get("SourceVersion") != null && !jsonObj.get("SourceVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLicenseVersionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLicenseVersionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLicenseVersionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLicenseVersionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLicenseVersionRequest>() {
           @Override
           public void write(JsonWriter out, CreateLicenseVersionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLicenseVersionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLicenseVersionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLicenseVersionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLicenseVersionRequest
   */
  public static CreateLicenseVersionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLicenseVersionRequest.class);
  }

  /**
   * Convert an instance of CreateLicenseVersionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

