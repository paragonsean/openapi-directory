/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the failure of a license operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:48.545503-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseOperationFailure {
  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_FAILURE_TIME = "FailureTime";
  @SerializedName(SERIALIZED_NAME_FAILURE_TIME)
  private OffsetDateTime failureTime;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "OperationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private String operationName;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER_ID = "ResourceOwnerId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER_ID)
  private String resourceOwnerId;

  public static final String SERIALIZED_NAME_OPERATION_REQUESTED_BY = "OperationRequestedBy";
  @SerializedName(SERIALIZED_NAME_OPERATION_REQUESTED_BY)
  private String operationRequestedBy;

  public static final String SERIALIZED_NAME_METADATA_LIST = "MetadataList";
  @SerializedName(SERIALIZED_NAME_METADATA_LIST)
  private List metadataList;

  public LicenseOperationFailure() {
  }

  public LicenseOperationFailure resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public LicenseOperationFailure resourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public LicenseOperationFailure errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public LicenseOperationFailure failureTime(OffsetDateTime failureTime) {
    this.failureTime = failureTime;
    return this;
  }

  /**
   * Get failureTime
   * @return failureTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFailureTime() {
    return failureTime;
  }

  public void setFailureTime(OffsetDateTime failureTime) {
    this.failureTime = failureTime;
  }


  public LicenseOperationFailure operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * Get operationName
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }


  public LicenseOperationFailure resourceOwnerId(String resourceOwnerId) {
    this.resourceOwnerId = resourceOwnerId;
    return this;
  }

  /**
   * Get resourceOwnerId
   * @return resourceOwnerId
   */
  @javax.annotation.Nullable
  public String getResourceOwnerId() {
    return resourceOwnerId;
  }

  public void setResourceOwnerId(String resourceOwnerId) {
    this.resourceOwnerId = resourceOwnerId;
  }


  public LicenseOperationFailure operationRequestedBy(String operationRequestedBy) {
    this.operationRequestedBy = operationRequestedBy;
    return this;
  }

  /**
   * Get operationRequestedBy
   * @return operationRequestedBy
   */
  @javax.annotation.Nullable
  public String getOperationRequestedBy() {
    return operationRequestedBy;
  }

  public void setOperationRequestedBy(String operationRequestedBy) {
    this.operationRequestedBy = operationRequestedBy;
  }


  public LicenseOperationFailure metadataList(List metadataList) {
    this.metadataList = metadataList;
    return this;
  }

  /**
   * Get metadataList
   * @return metadataList
   */
  @javax.annotation.Nullable
  public List getMetadataList() {
    return metadataList;
  }

  public void setMetadataList(List metadataList) {
    this.metadataList = metadataList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseOperationFailure licenseOperationFailure = (LicenseOperationFailure) o;
    return Objects.equals(this.resourceArn, licenseOperationFailure.resourceArn) &&
        Objects.equals(this.resourceType, licenseOperationFailure.resourceType) &&
        Objects.equals(this.errorMessage, licenseOperationFailure.errorMessage) &&
        Objects.equals(this.failureTime, licenseOperationFailure.failureTime) &&
        Objects.equals(this.operationName, licenseOperationFailure.operationName) &&
        Objects.equals(this.resourceOwnerId, licenseOperationFailure.resourceOwnerId) &&
        Objects.equals(this.operationRequestedBy, licenseOperationFailure.operationRequestedBy) &&
        Objects.equals(this.metadataList, licenseOperationFailure.metadataList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceArn, resourceType, errorMessage, failureTime, operationName, resourceOwnerId, operationRequestedBy, metadataList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseOperationFailure {\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    failureTime: ").append(toIndentedString(failureTime)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    resourceOwnerId: ").append(toIndentedString(resourceOwnerId)).append("\n");
    sb.append("    operationRequestedBy: ").append(toIndentedString(operationRequestedBy)).append("\n");
    sb.append("    metadataList: ").append(toIndentedString(metadataList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceArn");
    openapiFields.add("ResourceType");
    openapiFields.add("ErrorMessage");
    openapiFields.add("FailureTime");
    openapiFields.add("OperationName");
    openapiFields.add("ResourceOwnerId");
    openapiFields.add("OperationRequestedBy");
    openapiFields.add("MetadataList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseOperationFailure
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseOperationFailure.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseOperationFailure is not found in the empty JSON string", LicenseOperationFailure.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseOperationFailure.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseOperationFailure` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `FailureTime`
      if (jsonObj.get("FailureTime") != null && !jsonObj.get("FailureTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("FailureTime"));
      }
      // validate the optional field `OperationName`
      if (jsonObj.get("OperationName") != null && !jsonObj.get("OperationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperationName"));
      }
      // validate the optional field `ResourceOwnerId`
      if (jsonObj.get("ResourceOwnerId") != null && !jsonObj.get("ResourceOwnerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceOwnerId"));
      }
      // validate the optional field `OperationRequestedBy`
      if (jsonObj.get("OperationRequestedBy") != null && !jsonObj.get("OperationRequestedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperationRequestedBy"));
      }
      // validate the optional field `MetadataList`
      if (jsonObj.get("MetadataList") != null && !jsonObj.get("MetadataList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MetadataList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseOperationFailure.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseOperationFailure' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseOperationFailure> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseOperationFailure.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseOperationFailure>() {
           @Override
           public void write(JsonWriter out, LicenseOperationFailure value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseOperationFailure read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseOperationFailure given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseOperationFailure
   * @throws IOException if the JSON string is invalid with respect to LicenseOperationFailure
   */
  public static LicenseOperationFailure fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseOperationFailure.class);
  }

  /**
   * Convert an instance of LicenseOperationFailure to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

