/*
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptGrantRequest;
import org.openapitools.client.model.AcceptGrantResponse;
import org.openapitools.client.model.CheckInLicenseRequest;
import org.openapitools.client.model.CheckoutBorrowLicenseRequest;
import org.openapitools.client.model.CheckoutBorrowLicenseResponse;
import org.openapitools.client.model.CheckoutLicenseRequest;
import org.openapitools.client.model.CheckoutLicenseResponse;
import org.openapitools.client.model.CreateGrantRequest;
import org.openapitools.client.model.CreateGrantResponse;
import org.openapitools.client.model.CreateGrantVersionRequest;
import org.openapitools.client.model.CreateGrantVersionResponse;
import org.openapitools.client.model.CreateLicenseConfigurationRequest;
import org.openapitools.client.model.CreateLicenseConfigurationResponse;
import org.openapitools.client.model.CreateLicenseConversionTaskForResourceRequest;
import org.openapitools.client.model.CreateLicenseConversionTaskForResourceResponse;
import org.openapitools.client.model.CreateLicenseManagerReportGeneratorRequest;
import org.openapitools.client.model.CreateLicenseManagerReportGeneratorResponse;
import org.openapitools.client.model.CreateLicenseRequest;
import org.openapitools.client.model.CreateLicenseResponse;
import org.openapitools.client.model.CreateLicenseVersionRequest;
import org.openapitools.client.model.CreateLicenseVersionResponse;
import org.openapitools.client.model.CreateTokenRequest;
import org.openapitools.client.model.CreateTokenResponse;
import org.openapitools.client.model.DeleteGrantRequest;
import org.openapitools.client.model.DeleteGrantResponse;
import org.openapitools.client.model.DeleteLicenseConfigurationRequest;
import org.openapitools.client.model.DeleteLicenseManagerReportGeneratorRequest;
import org.openapitools.client.model.DeleteLicenseRequest;
import org.openapitools.client.model.DeleteLicenseResponse;
import org.openapitools.client.model.DeleteTokenRequest;
import org.openapitools.client.model.ExtendLicenseConsumptionRequest;
import org.openapitools.client.model.ExtendLicenseConsumptionResponse;
import org.openapitools.client.model.GetAccessTokenRequest;
import org.openapitools.client.model.GetAccessTokenResponse;
import org.openapitools.client.model.GetGrantRequest;
import org.openapitools.client.model.GetGrantResponse;
import org.openapitools.client.model.GetLicenseConfigurationRequest;
import org.openapitools.client.model.GetLicenseConfigurationResponse;
import org.openapitools.client.model.GetLicenseConversionTaskRequest;
import org.openapitools.client.model.GetLicenseConversionTaskResponse;
import org.openapitools.client.model.GetLicenseManagerReportGeneratorRequest;
import org.openapitools.client.model.GetLicenseManagerReportGeneratorResponse;
import org.openapitools.client.model.GetLicenseRequest;
import org.openapitools.client.model.GetLicenseResponse;
import org.openapitools.client.model.GetLicenseUsageRequest;
import org.openapitools.client.model.GetLicenseUsageResponse;
import org.openapitools.client.model.GetServiceSettingsResponse;
import org.openapitools.client.model.ListAssociationsForLicenseConfigurationRequest;
import org.openapitools.client.model.ListAssociationsForLicenseConfigurationResponse;
import org.openapitools.client.model.ListDistributedGrantsRequest;
import org.openapitools.client.model.ListDistributedGrantsResponse;
import org.openapitools.client.model.ListFailuresForLicenseConfigurationOperationsRequest;
import org.openapitools.client.model.ListFailuresForLicenseConfigurationOperationsResponse;
import org.openapitools.client.model.ListLicenseConfigurationsRequest;
import org.openapitools.client.model.ListLicenseConfigurationsResponse;
import org.openapitools.client.model.ListLicenseConversionTasksRequest;
import org.openapitools.client.model.ListLicenseConversionTasksResponse;
import org.openapitools.client.model.ListLicenseManagerReportGeneratorsRequest;
import org.openapitools.client.model.ListLicenseManagerReportGeneratorsResponse;
import org.openapitools.client.model.ListLicenseSpecificationsForResourceRequest;
import org.openapitools.client.model.ListLicenseSpecificationsForResourceResponse;
import org.openapitools.client.model.ListLicenseVersionsRequest;
import org.openapitools.client.model.ListLicenseVersionsResponse;
import org.openapitools.client.model.ListLicensesRequest;
import org.openapitools.client.model.ListLicensesResponse;
import org.openapitools.client.model.ListReceivedGrantsForOrganizationRequest;
import org.openapitools.client.model.ListReceivedGrantsForOrganizationResponse;
import org.openapitools.client.model.ListReceivedGrantsRequest;
import org.openapitools.client.model.ListReceivedGrantsResponse;
import org.openapitools.client.model.ListReceivedLicensesForOrganizationRequest;
import org.openapitools.client.model.ListReceivedLicensesForOrganizationResponse;
import org.openapitools.client.model.ListReceivedLicensesRequest;
import org.openapitools.client.model.ListReceivedLicensesResponse;
import org.openapitools.client.model.ListResourceInventoryRequest;
import org.openapitools.client.model.ListResourceInventoryResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTokensRequest;
import org.openapitools.client.model.ListTokensResponse;
import org.openapitools.client.model.ListUsageForLicenseConfigurationRequest;
import org.openapitools.client.model.ListUsageForLicenseConfigurationResponse;
import org.openapitools.client.model.RejectGrantRequest;
import org.openapitools.client.model.RejectGrantResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateLicenseConfigurationRequest;
import org.openapitools.client.model.UpdateLicenseManagerReportGeneratorRequest;
import org.openapitools.client.model.UpdateLicenseSpecificationsForResourceRequest;
import org.openapitools.client.model.UpdateServiceSettingsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Accepts the specified grant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptGrantTest() throws ApiException {
        String xAmzTarget = null;
        AcceptGrantRequest acceptGrantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AcceptGrantResponse response = api.acceptGrant(xAmzTarget, acceptGrantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks in the specified license. Check in a license when it is no longer in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkInLicenseTest() throws ApiException {
        String xAmzTarget = null;
        CheckInLicenseRequest checkInLicenseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.checkInLicense(xAmzTarget, checkInLicenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks out the specified license for offline use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkoutBorrowLicenseTest() throws ApiException {
        String xAmzTarget = null;
        CheckoutBorrowLicenseRequest checkoutBorrowLicenseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CheckoutBorrowLicenseResponse response = api.checkoutBorrowLicense(xAmzTarget, checkoutBorrowLicenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Checks out the specified license.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the account that created the license is the same that is performing the check out, you must specify the account as the beneficiary.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkoutLicenseTest() throws ApiException {
        String xAmzTarget = null;
        CheckoutLicenseRequest checkoutLicenseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CheckoutLicenseResponse response = api.checkoutLicense(xAmzTarget, checkoutLicenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a grant for the specified license. A grant shares the use of license entitlements with a specific Amazon Web Services account, an organization, or an organizational unit (OU). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/license-manager/latest/userguide/granted-licenses.html\&quot;&gt;Granted licenses in License Manager&lt;/a&gt; in the &lt;i&gt;License Manager User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGrantTest() throws ApiException {
        String xAmzTarget = null;
        CreateGrantRequest createGrantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGrantResponse response = api.createGrant(xAmzTarget, createGrantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new version of the specified grant. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/license-manager/latest/userguide/granted-licenses.html\&quot;&gt;Granted licenses in License Manager&lt;/a&gt; in the &lt;i&gt;License Manager User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGrantVersionTest() throws ApiException {
        String xAmzTarget = null;
        CreateGrantVersionRequest createGrantVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGrantVersionResponse response = api.createGrantVersion(xAmzTarget, createGrantVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseTest() throws ApiException {
        String xAmzTarget = null;
        CreateLicenseRequest createLicenseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLicenseResponse response = api.createLicense(xAmzTarget, createLicenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a license configuration.&lt;/p&gt; &lt;p&gt;A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), license affinity to host (how long a license must be associated with a host), and the number of licenses purchased and used.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateLicenseConfigurationRequest createLicenseConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLicenseConfigurationResponse response = api.createLicenseConfiguration(xAmzTarget, createLicenseConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new license conversion task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseConversionTaskForResourceTest() throws ApiException {
        String xAmzTarget = null;
        CreateLicenseConversionTaskForResourceRequest createLicenseConversionTaskForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLicenseConversionTaskForResourceResponse response = api.createLicenseConversionTaskForResource(xAmzTarget, createLicenseConversionTaskForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a report generator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseManagerReportGeneratorTest() throws ApiException {
        String xAmzTarget = null;
        CreateLicenseManagerReportGeneratorRequest createLicenseManagerReportGeneratorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLicenseManagerReportGeneratorResponse response = api.createLicenseManagerReportGenerator(xAmzTarget, createLicenseManagerReportGeneratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new version of the specified license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseVersionTest() throws ApiException {
        String xAmzTarget = null;
        CreateLicenseVersionRequest createLicenseVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLicenseVersionResponse response = api.createLicenseVersion(xAmzTarget, createLicenseVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a long-lived token.&lt;/p&gt; &lt;p&gt;A refresh token is a JWT token used to get an access token. With an access token, you can call AssumeRoleWithWebIdentity to get role credentials that you can use to call License Manager to manage the specified license.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTokenTest() throws ApiException {
        String xAmzTarget = null;
        CreateTokenRequest createTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateTokenResponse response = api.createToken(xAmzTarget, createTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified grant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGrantTest() throws ApiException {
        String xAmzTarget = null;
        DeleteGrantRequest deleteGrantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGrantResponse response = api.deleteGrant(xAmzTarget, deleteGrantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLicenseTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLicenseRequest deleteLicenseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteLicenseResponse response = api.deleteLicense(xAmzTarget, deleteLicenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified license configuration.&lt;/p&gt; &lt;p&gt;You cannot delete a license configuration that is in use.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLicenseConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLicenseConfigurationRequest deleteLicenseConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLicenseConfiguration(xAmzTarget, deleteLicenseConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified report generator.&lt;/p&gt; &lt;p&gt;This action deletes the report generator, which stops it from generating future reports. The action cannot be reversed. It has no effect on the previous reports from this generator.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLicenseManagerReportGeneratorTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLicenseManagerReportGeneratorRequest deleteLicenseManagerReportGeneratorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLicenseManagerReportGenerator(xAmzTarget, deleteLicenseManagerReportGeneratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified token. Must be called in the license home Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTokenTest() throws ApiException {
        String xAmzTarget = null;
        DeleteTokenRequest deleteTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteToken(xAmzTarget, deleteTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Extends the expiration date for license consumption.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendLicenseConsumptionTest() throws ApiException {
        String xAmzTarget = null;
        ExtendLicenseConsumptionRequest extendLicenseConsumptionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ExtendLicenseConsumptionResponse response = api.extendLicenseConsumption(xAmzTarget, extendLicenseConsumptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a temporary access token to use with AssumeRoleWithWebIdentity. Access tokens are valid for one hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessTokenTest() throws ApiException {
        String xAmzTarget = null;
        GetAccessTokenRequest getAccessTokenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccessTokenResponse response = api.getAccessToken(xAmzTarget, getAccessTokenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets detailed information about the specified grant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrantTest() throws ApiException {
        String xAmzTarget = null;
        GetGrantRequest getGrantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGrantResponse response = api.getGrant(xAmzTarget, getGrantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets detailed information about the specified license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseTest() throws ApiException {
        String xAmzTarget = null;
        GetLicenseRequest getLicenseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLicenseResponse response = api.getLicense(xAmzTarget, getLicenseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets detailed information about the specified license configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetLicenseConfigurationRequest getLicenseConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLicenseConfigurationResponse response = api.getLicenseConfiguration(xAmzTarget, getLicenseConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified license type conversion task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseConversionTaskTest() throws ApiException {
        String xAmzTarget = null;
        GetLicenseConversionTaskRequest getLicenseConversionTaskRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLicenseConversionTaskResponse response = api.getLicenseConversionTask(xAmzTarget, getLicenseConversionTaskRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets information about the specified report generator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseManagerReportGeneratorTest() throws ApiException {
        String xAmzTarget = null;
        GetLicenseManagerReportGeneratorRequest getLicenseManagerReportGeneratorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLicenseManagerReportGeneratorResponse response = api.getLicenseManagerReportGenerator(xAmzTarget, getLicenseManagerReportGeneratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets detailed information about the usage of the specified license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLicenseUsageTest() throws ApiException {
        String xAmzTarget = null;
        GetLicenseUsageRequest getLicenseUsageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLicenseUsageResponse response = api.getLicenseUsage(xAmzTarget, getLicenseUsageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the License Manager settings for the current Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceSettingsTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetServiceSettingsResponse response = api.getServiceSettings(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the resource associations for the specified license configuration.&lt;/p&gt; &lt;p&gt;Resource associations need not consume licenses from a license configuration. For example, an AMI or a stopped instance might not consume a license (depending on the license rules).&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssociationsForLicenseConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        ListAssociationsForLicenseConfigurationRequest listAssociationsForLicenseConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAssociationsForLicenseConfigurationResponse response = api.listAssociationsForLicenseConfiguration(xAmzTarget, listAssociationsForLicenseConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the grants distributed for the specified license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDistributedGrantsTest() throws ApiException {
        String xAmzTarget = null;
        ListDistributedGrantsRequest listDistributedGrantsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListDistributedGrantsResponse response = api.listDistributedGrants(xAmzTarget, listDistributedGrantsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the license configuration operations that failed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFailuresForLicenseConfigurationOperationsTest() throws ApiException {
        String xAmzTarget = null;
        ListFailuresForLicenseConfigurationOperationsRequest listFailuresForLicenseConfigurationOperationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListFailuresForLicenseConfigurationOperationsResponse response = api.listFailuresForLicenseConfigurationOperations(xAmzTarget, listFailuresForLicenseConfigurationOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the license configurations for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicenseConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListLicenseConfigurationsRequest listLicenseConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListLicenseConfigurationsResponse response = api.listLicenseConfigurations(xAmzTarget, listLicenseConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the license type conversion tasks for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicenseConversionTasksTest() throws ApiException {
        String xAmzTarget = null;
        ListLicenseConversionTasksRequest listLicenseConversionTasksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListLicenseConversionTasksResponse response = api.listLicenseConversionTasks(xAmzTarget, listLicenseConversionTasksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the report generators for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicenseManagerReportGeneratorsTest() throws ApiException {
        String xAmzTarget = null;
        ListLicenseManagerReportGeneratorsRequest listLicenseManagerReportGeneratorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListLicenseManagerReportGeneratorsResponse response = api.listLicenseManagerReportGenerators(xAmzTarget, listLicenseManagerReportGeneratorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the license configurations for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicenseSpecificationsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListLicenseSpecificationsForResourceRequest listLicenseSpecificationsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListLicenseSpecificationsForResourceResponse response = api.listLicenseSpecificationsForResource(xAmzTarget, listLicenseSpecificationsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all versions of the specified license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicenseVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListLicenseVersionsRequest listLicenseVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListLicenseVersionsResponse response = api.listLicenseVersions(xAmzTarget, listLicenseVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the licenses for your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLicensesTest() throws ApiException {
        String xAmzTarget = null;
        ListLicensesRequest listLicensesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListLicensesResponse response = api.listLicenses(xAmzTarget, listLicensesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists grants that are received. Received grants are grants created while specifying the recipient as this Amazon Web Services account, your organization, or an organizational unit (OU) to which this member account belongs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReceivedGrantsTest() throws ApiException {
        String xAmzTarget = null;
        ListReceivedGrantsRequest listReceivedGrantsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListReceivedGrantsResponse response = api.listReceivedGrants(xAmzTarget, listReceivedGrantsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the grants received for all accounts in the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReceivedGrantsForOrganizationTest() throws ApiException {
        String xAmzTarget = null;
        ListReceivedGrantsForOrganizationRequest listReceivedGrantsForOrganizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListReceivedGrantsForOrganizationResponse response = api.listReceivedGrantsForOrganization(xAmzTarget, listReceivedGrantsForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists received licenses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReceivedLicensesTest() throws ApiException {
        String xAmzTarget = null;
        ListReceivedLicensesRequest listReceivedLicensesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListReceivedLicensesResponse response = api.listReceivedLicenses(xAmzTarget, listReceivedLicensesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the licenses received for all accounts in the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listReceivedLicensesForOrganizationTest() throws ApiException {
        String xAmzTarget = null;
        ListReceivedLicensesForOrganizationRequest listReceivedLicensesForOrganizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListReceivedLicensesForOrganizationResponse response = api.listReceivedLicensesForOrganization(xAmzTarget, listReceivedLicensesForOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists resources managed using Systems Manager inventory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceInventoryTest() throws ApiException {
        String xAmzTarget = null;
        ListResourceInventoryRequest listResourceInventoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListResourceInventoryResponse response = api.listResourceInventory(xAmzTarget, listResourceInventoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the tags for the specified license configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists your tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTokensTest() throws ApiException {
        String xAmzTarget = null;
        ListTokensRequest listTokensRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTokensResponse response = api.listTokens(xAmzTarget, listTokensRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all license usage records for a license configuration, displaying license consumption details by resource at a selected point in time. Use this action to audit the current license consumption for any license inventory and configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsageForLicenseConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        ListUsageForLicenseConfigurationRequest listUsageForLicenseConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListUsageForLicenseConfigurationResponse response = api.listUsageForLicenseConfiguration(xAmzTarget, listUsageForLicenseConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Rejects the specified grant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectGrantTest() throws ApiException {
        String xAmzTarget = null;
        RejectGrantRequest rejectGrantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RejectGrantResponse response = api.rejectGrant(xAmzTarget, rejectGrantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds the specified tags to the specified license configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified tags from the specified license configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the attributes of an existing license configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLicenseConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLicenseConfigurationRequest updateLicenseConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLicenseConfiguration(xAmzTarget, updateLicenseConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a report generator.&lt;/p&gt; &lt;p&gt;After you make changes to a report generator, it starts generating new reports within 60 minutes of being updated.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLicenseManagerReportGeneratorTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLicenseManagerReportGeneratorRequest updateLicenseManagerReportGeneratorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLicenseManagerReportGenerator(xAmzTarget, updateLicenseManagerReportGeneratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds or removes the specified license configurations for the specified Amazon Web Services resource.&lt;/p&gt; &lt;p&gt;You can update the license specifications of AMIs, instances, and hosts. You cannot update the license specifications for launch templates and CloudFormation templates, as they send license configurations to the operation that creates the resource.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLicenseSpecificationsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLicenseSpecificationsForResourceRequest updateLicenseSpecificationsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLicenseSpecificationsForResource(xAmzTarget, updateLicenseSpecificationsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates License Manager settings for the current Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceSettingsTest() throws ApiException {
        String xAmzTarget = null;
        UpdateServiceSettingsRequest updateServiceSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateServiceSettings(xAmzTarget, updateServiceSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
