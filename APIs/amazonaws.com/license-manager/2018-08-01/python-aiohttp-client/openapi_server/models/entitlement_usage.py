# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entitlement_data_unit import EntitlementDataUnit
from openapi_server import util


class EntitlementUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, consumed_value: str=None, max_count: str=None, unit: EntitlementDataUnit=None):
        """EntitlementUsage - a model defined in OpenAPI

        :param name: The name of this EntitlementUsage.
        :param consumed_value: The consumed_value of this EntitlementUsage.
        :param max_count: The max_count of this EntitlementUsage.
        :param unit: The unit of this EntitlementUsage.
        """
        self.openapi_types = {
            'name': str,
            'consumed_value': str,
            'max_count': str,
            'unit': EntitlementDataUnit
        }

        self.attribute_map = {
            'name': 'Name',
            'consumed_value': 'ConsumedValue',
            'max_count': 'MaxCount',
            'unit': 'Unit'
        }

        self._name = name
        self._consumed_value = consumed_value
        self._max_count = max_count
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntitlementUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntitlementUsage of this EntitlementUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this EntitlementUsage.


        :return: The name of this EntitlementUsage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntitlementUsage.


        :param name: The name of this EntitlementUsage.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def consumed_value(self):
        """Gets the consumed_value of this EntitlementUsage.


        :return: The consumed_value of this EntitlementUsage.
        :rtype: str
        """
        return self._consumed_value

    @consumed_value.setter
    def consumed_value(self, consumed_value):
        """Sets the consumed_value of this EntitlementUsage.


        :param consumed_value: The consumed_value of this EntitlementUsage.
        :type consumed_value: str
        """
        if consumed_value is None:
            raise ValueError("Invalid value for `consumed_value`, must not be `None`")

        self._consumed_value = consumed_value

    @property
    def max_count(self):
        """Gets the max_count of this EntitlementUsage.


        :return: The max_count of this EntitlementUsage.
        :rtype: str
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this EntitlementUsage.


        :param max_count: The max_count of this EntitlementUsage.
        :type max_count: str
        """

        self._max_count = max_count

    @property
    def unit(self):
        """Gets the unit of this EntitlementUsage.


        :return: The unit of this EntitlementUsage.
        :rtype: EntitlementDataUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this EntitlementUsage.


        :param unit: The unit of this EntitlementUsage.
        :type unit: EntitlementDataUnit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
