# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_grant_version_request_options import CreateGrantVersionRequestOptions
from openapi_server.models.grant_status import GrantStatus
from openapi_server import util


class Grant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grant_arn: str=None, grant_name: str=None, parent_arn: str=None, license_arn: str=None, grantee_principal_arn: str=None, home_region: str=None, grant_status: GrantStatus=None, status_reason: str=None, version: str=None, granted_operations: List=None, options: CreateGrantVersionRequestOptions=None):
        """Grant - a model defined in OpenAPI

        :param grant_arn: The grant_arn of this Grant.
        :param grant_name: The grant_name of this Grant.
        :param parent_arn: The parent_arn of this Grant.
        :param license_arn: The license_arn of this Grant.
        :param grantee_principal_arn: The grantee_principal_arn of this Grant.
        :param home_region: The home_region of this Grant.
        :param grant_status: The grant_status of this Grant.
        :param status_reason: The status_reason of this Grant.
        :param version: The version of this Grant.
        :param granted_operations: The granted_operations of this Grant.
        :param options: The options of this Grant.
        """
        self.openapi_types = {
            'grant_arn': str,
            'grant_name': str,
            'parent_arn': str,
            'license_arn': str,
            'grantee_principal_arn': str,
            'home_region': str,
            'grant_status': GrantStatus,
            'status_reason': str,
            'version': str,
            'granted_operations': List,
            'options': CreateGrantVersionRequestOptions
        }

        self.attribute_map = {
            'grant_arn': 'GrantArn',
            'grant_name': 'GrantName',
            'parent_arn': 'ParentArn',
            'license_arn': 'LicenseArn',
            'grantee_principal_arn': 'GranteePrincipalArn',
            'home_region': 'HomeRegion',
            'grant_status': 'GrantStatus',
            'status_reason': 'StatusReason',
            'version': 'Version',
            'granted_operations': 'GrantedOperations',
            'options': 'Options'
        }

        self._grant_arn = grant_arn
        self._grant_name = grant_name
        self._parent_arn = parent_arn
        self._license_arn = license_arn
        self._grantee_principal_arn = grantee_principal_arn
        self._home_region = home_region
        self._grant_status = grant_status
        self._status_reason = status_reason
        self._version = version
        self._granted_operations = granted_operations
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Grant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Grant of this Grant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grant_arn(self):
        """Gets the grant_arn of this Grant.


        :return: The grant_arn of this Grant.
        :rtype: str
        """
        return self._grant_arn

    @grant_arn.setter
    def grant_arn(self, grant_arn):
        """Sets the grant_arn of this Grant.


        :param grant_arn: The grant_arn of this Grant.
        :type grant_arn: str
        """
        if grant_arn is None:
            raise ValueError("Invalid value for `grant_arn`, must not be `None`")

        self._grant_arn = grant_arn

    @property
    def grant_name(self):
        """Gets the grant_name of this Grant.


        :return: The grant_name of this Grant.
        :rtype: str
        """
        return self._grant_name

    @grant_name.setter
    def grant_name(self, grant_name):
        """Sets the grant_name of this Grant.


        :param grant_name: The grant_name of this Grant.
        :type grant_name: str
        """
        if grant_name is None:
            raise ValueError("Invalid value for `grant_name`, must not be `None`")

        self._grant_name = grant_name

    @property
    def parent_arn(self):
        """Gets the parent_arn of this Grant.


        :return: The parent_arn of this Grant.
        :rtype: str
        """
        return self._parent_arn

    @parent_arn.setter
    def parent_arn(self, parent_arn):
        """Sets the parent_arn of this Grant.


        :param parent_arn: The parent_arn of this Grant.
        :type parent_arn: str
        """
        if parent_arn is None:
            raise ValueError("Invalid value for `parent_arn`, must not be `None`")

        self._parent_arn = parent_arn

    @property
    def license_arn(self):
        """Gets the license_arn of this Grant.


        :return: The license_arn of this Grant.
        :rtype: str
        """
        return self._license_arn

    @license_arn.setter
    def license_arn(self, license_arn):
        """Sets the license_arn of this Grant.


        :param license_arn: The license_arn of this Grant.
        :type license_arn: str
        """
        if license_arn is None:
            raise ValueError("Invalid value for `license_arn`, must not be `None`")

        self._license_arn = license_arn

    @property
    def grantee_principal_arn(self):
        """Gets the grantee_principal_arn of this Grant.


        :return: The grantee_principal_arn of this Grant.
        :rtype: str
        """
        return self._grantee_principal_arn

    @grantee_principal_arn.setter
    def grantee_principal_arn(self, grantee_principal_arn):
        """Sets the grantee_principal_arn of this Grant.


        :param grantee_principal_arn: The grantee_principal_arn of this Grant.
        :type grantee_principal_arn: str
        """
        if grantee_principal_arn is None:
            raise ValueError("Invalid value for `grantee_principal_arn`, must not be `None`")

        self._grantee_principal_arn = grantee_principal_arn

    @property
    def home_region(self):
        """Gets the home_region of this Grant.


        :return: The home_region of this Grant.
        :rtype: str
        """
        return self._home_region

    @home_region.setter
    def home_region(self, home_region):
        """Sets the home_region of this Grant.


        :param home_region: The home_region of this Grant.
        :type home_region: str
        """
        if home_region is None:
            raise ValueError("Invalid value for `home_region`, must not be `None`")

        self._home_region = home_region

    @property
    def grant_status(self):
        """Gets the grant_status of this Grant.


        :return: The grant_status of this Grant.
        :rtype: GrantStatus
        """
        return self._grant_status

    @grant_status.setter
    def grant_status(self, grant_status):
        """Sets the grant_status of this Grant.


        :param grant_status: The grant_status of this Grant.
        :type grant_status: GrantStatus
        """
        if grant_status is None:
            raise ValueError("Invalid value for `grant_status`, must not be `None`")

        self._grant_status = grant_status

    @property
    def status_reason(self):
        """Gets the status_reason of this Grant.


        :return: The status_reason of this Grant.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this Grant.


        :param status_reason: The status_reason of this Grant.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def version(self):
        """Gets the version of this Grant.


        :return: The version of this Grant.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Grant.


        :param version: The version of this Grant.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def granted_operations(self):
        """Gets the granted_operations of this Grant.


        :return: The granted_operations of this Grant.
        :rtype: List
        """
        return self._granted_operations

    @granted_operations.setter
    def granted_operations(self, granted_operations):
        """Sets the granted_operations of this Grant.


        :param granted_operations: The granted_operations of this Grant.
        :type granted_operations: List
        """
        if granted_operations is None:
            raise ValueError("Invalid value for `granted_operations`, must not be `None`")

        self._granted_operations = granted_operations

    @property
    def options(self):
        """Gets the options of this Grant.


        :return: The options of this Grant.
        :rtype: CreateGrantVersionRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Grant.


        :param options: The options of this Grant.
        :type options: CreateGrantVersionRequestOptions
        """

        self._options = options
