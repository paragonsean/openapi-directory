# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, product_information_filter_list: List=None):
        """ProductInformation - a model defined in OpenAPI

        :param resource_type: The resource_type of this ProductInformation.
        :param product_information_filter_list: The product_information_filter_list of this ProductInformation.
        """
        self.openapi_types = {
            'resource_type': str,
            'product_information_filter_list': List
        }

        self.attribute_map = {
            'resource_type': 'ResourceType',
            'product_information_filter_list': 'ProductInformationFilterList'
        }

        self._resource_type = resource_type
        self._product_information_filter_list = product_information_filter_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductInformation of this ProductInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this ProductInformation.


        :return: The resource_type of this ProductInformation.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ProductInformation.


        :param resource_type: The resource_type of this ProductInformation.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def product_information_filter_list(self):
        """Gets the product_information_filter_list of this ProductInformation.


        :return: The product_information_filter_list of this ProductInformation.
        :rtype: List
        """
        return self._product_information_filter_list

    @product_information_filter_list.setter
    def product_information_filter_list(self, product_information_filter_list):
        """Sets the product_information_filter_list of this ProductInformation.


        :param product_information_filter_list: The product_information_filter_list of this ProductInformation.
        :type product_information_filter_list: List
        """
        if product_information_filter_list is None:
            raise ValueError("Invalid value for `product_information_filter_list`, must not be `None`")

        self._product_information_filter_list = product_information_filter_list
