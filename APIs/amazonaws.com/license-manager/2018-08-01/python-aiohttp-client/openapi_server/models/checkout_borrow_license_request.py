# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.digital_signature_method import DigitalSignatureMethod
from openapi_server import util


class CheckoutBorrowLicenseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_arn: str=None, entitlements: List=None, digital_signature_method: DigitalSignatureMethod=None, node_id: str=None, checkout_metadata: List=None, client_token: str=None):
        """CheckoutBorrowLicenseRequest - a model defined in OpenAPI

        :param license_arn: The license_arn of this CheckoutBorrowLicenseRequest.
        :param entitlements: The entitlements of this CheckoutBorrowLicenseRequest.
        :param digital_signature_method: The digital_signature_method of this CheckoutBorrowLicenseRequest.
        :param node_id: The node_id of this CheckoutBorrowLicenseRequest.
        :param checkout_metadata: The checkout_metadata of this CheckoutBorrowLicenseRequest.
        :param client_token: The client_token of this CheckoutBorrowLicenseRequest.
        """
        self.openapi_types = {
            'license_arn': str,
            'entitlements': List,
            'digital_signature_method': DigitalSignatureMethod,
            'node_id': str,
            'checkout_metadata': List,
            'client_token': str
        }

        self.attribute_map = {
            'license_arn': 'LicenseArn',
            'entitlements': 'Entitlements',
            'digital_signature_method': 'DigitalSignatureMethod',
            'node_id': 'NodeId',
            'checkout_metadata': 'CheckoutMetadata',
            'client_token': 'ClientToken'
        }

        self._license_arn = license_arn
        self._entitlements = entitlements
        self._digital_signature_method = digital_signature_method
        self._node_id = node_id
        self._checkout_metadata = checkout_metadata
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutBorrowLicenseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckoutBorrowLicenseRequest of this CheckoutBorrowLicenseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_arn(self):
        """Gets the license_arn of this CheckoutBorrowLicenseRequest.


        :return: The license_arn of this CheckoutBorrowLicenseRequest.
        :rtype: str
        """
        return self._license_arn

    @license_arn.setter
    def license_arn(self, license_arn):
        """Sets the license_arn of this CheckoutBorrowLicenseRequest.


        :param license_arn: The license_arn of this CheckoutBorrowLicenseRequest.
        :type license_arn: str
        """
        if license_arn is None:
            raise ValueError("Invalid value for `license_arn`, must not be `None`")

        self._license_arn = license_arn

    @property
    def entitlements(self):
        """Gets the entitlements of this CheckoutBorrowLicenseRequest.


        :return: The entitlements of this CheckoutBorrowLicenseRequest.
        :rtype: List
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this CheckoutBorrowLicenseRequest.


        :param entitlements: The entitlements of this CheckoutBorrowLicenseRequest.
        :type entitlements: List
        """
        if entitlements is None:
            raise ValueError("Invalid value for `entitlements`, must not be `None`")

        self._entitlements = entitlements

    @property
    def digital_signature_method(self):
        """Gets the digital_signature_method of this CheckoutBorrowLicenseRequest.


        :return: The digital_signature_method of this CheckoutBorrowLicenseRequest.
        :rtype: DigitalSignatureMethod
        """
        return self._digital_signature_method

    @digital_signature_method.setter
    def digital_signature_method(self, digital_signature_method):
        """Sets the digital_signature_method of this CheckoutBorrowLicenseRequest.


        :param digital_signature_method: The digital_signature_method of this CheckoutBorrowLicenseRequest.
        :type digital_signature_method: DigitalSignatureMethod
        """
        if digital_signature_method is None:
            raise ValueError("Invalid value for `digital_signature_method`, must not be `None`")

        self._digital_signature_method = digital_signature_method

    @property
    def node_id(self):
        """Gets the node_id of this CheckoutBorrowLicenseRequest.


        :return: The node_id of this CheckoutBorrowLicenseRequest.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CheckoutBorrowLicenseRequest.


        :param node_id: The node_id of this CheckoutBorrowLicenseRequest.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def checkout_metadata(self):
        """Gets the checkout_metadata of this CheckoutBorrowLicenseRequest.


        :return: The checkout_metadata of this CheckoutBorrowLicenseRequest.
        :rtype: List
        """
        return self._checkout_metadata

    @checkout_metadata.setter
    def checkout_metadata(self, checkout_metadata):
        """Sets the checkout_metadata of this CheckoutBorrowLicenseRequest.


        :param checkout_metadata: The checkout_metadata of this CheckoutBorrowLicenseRequest.
        :type checkout_metadata: List
        """

        self._checkout_metadata = checkout_metadata

    @property
    def client_token(self):
        """Gets the client_token of this CheckoutBorrowLicenseRequest.


        :return: The client_token of this CheckoutBorrowLicenseRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CheckoutBorrowLicenseRequest.


        :param client_token: The client_token of this CheckoutBorrowLicenseRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
