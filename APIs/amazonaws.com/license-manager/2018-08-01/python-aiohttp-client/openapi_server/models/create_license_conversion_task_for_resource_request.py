# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_license_conversion_task_for_resource_request_destination_license_context import CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext
from openapi_server.models.create_license_conversion_task_for_resource_request_source_license_context import CreateLicenseConversionTaskForResourceRequestSourceLicenseContext
from openapi_server import util


class CreateLicenseConversionTaskForResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, source_license_context: CreateLicenseConversionTaskForResourceRequestSourceLicenseContext=None, destination_license_context: CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext=None):
        """CreateLicenseConversionTaskForResourceRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this CreateLicenseConversionTaskForResourceRequest.
        :param source_license_context: The source_license_context of this CreateLicenseConversionTaskForResourceRequest.
        :param destination_license_context: The destination_license_context of this CreateLicenseConversionTaskForResourceRequest.
        """
        self.openapi_types = {
            'resource_arn': str,
            'source_license_context': CreateLicenseConversionTaskForResourceRequestSourceLicenseContext,
            'destination_license_context': CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext
        }

        self.attribute_map = {
            'resource_arn': 'ResourceArn',
            'source_license_context': 'SourceLicenseContext',
            'destination_license_context': 'DestinationLicenseContext'
        }

        self._resource_arn = resource_arn
        self._source_license_context = source_license_context
        self._destination_license_context = destination_license_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLicenseConversionTaskForResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLicenseConversionTaskForResourceRequest of this CreateLicenseConversionTaskForResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this CreateLicenseConversionTaskForResourceRequest.


        :return: The resource_arn of this CreateLicenseConversionTaskForResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this CreateLicenseConversionTaskForResourceRequest.


        :param resource_arn: The resource_arn of this CreateLicenseConversionTaskForResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")

        self._resource_arn = resource_arn

    @property
    def source_license_context(self):
        """Gets the source_license_context of this CreateLicenseConversionTaskForResourceRequest.


        :return: The source_license_context of this CreateLicenseConversionTaskForResourceRequest.
        :rtype: CreateLicenseConversionTaskForResourceRequestSourceLicenseContext
        """
        return self._source_license_context

    @source_license_context.setter
    def source_license_context(self, source_license_context):
        """Sets the source_license_context of this CreateLicenseConversionTaskForResourceRequest.


        :param source_license_context: The source_license_context of this CreateLicenseConversionTaskForResourceRequest.
        :type source_license_context: CreateLicenseConversionTaskForResourceRequestSourceLicenseContext
        """
        if source_license_context is None:
            raise ValueError("Invalid value for `source_license_context`, must not be `None`")

        self._source_license_context = source_license_context

    @property
    def destination_license_context(self):
        """Gets the destination_license_context of this CreateLicenseConversionTaskForResourceRequest.


        :return: The destination_license_context of this CreateLicenseConversionTaskForResourceRequest.
        :rtype: CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext
        """
        return self._destination_license_context

    @destination_license_context.setter
    def destination_license_context(self, destination_license_context):
        """Sets the destination_license_context of this CreateLicenseConversionTaskForResourceRequest.


        :param destination_license_context: The destination_license_context of this CreateLicenseConversionTaskForResourceRequest.
        :type destination_license_context: CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext
        """
        if destination_license_context is None:
            raise ValueError("Invalid value for `destination_license_context`, must not be `None`")

        self._destination_license_context = destination_license_context
