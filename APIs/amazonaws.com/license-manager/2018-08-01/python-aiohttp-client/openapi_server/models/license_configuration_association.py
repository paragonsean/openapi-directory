# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_type import ResourceType
from openapi_server import util


class LicenseConfigurationAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, resource_type: ResourceType=None, resource_owner_id: str=None, association_time: datetime=None, ami_association_scope: str=None):
        """LicenseConfigurationAssociation - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this LicenseConfigurationAssociation.
        :param resource_type: The resource_type of this LicenseConfigurationAssociation.
        :param resource_owner_id: The resource_owner_id of this LicenseConfigurationAssociation.
        :param association_time: The association_time of this LicenseConfigurationAssociation.
        :param ami_association_scope: The ami_association_scope of this LicenseConfigurationAssociation.
        """
        self.openapi_types = {
            'resource_arn': str,
            'resource_type': ResourceType,
            'resource_owner_id': str,
            'association_time': datetime,
            'ami_association_scope': str
        }

        self.attribute_map = {
            'resource_arn': 'ResourceArn',
            'resource_type': 'ResourceType',
            'resource_owner_id': 'ResourceOwnerId',
            'association_time': 'AssociationTime',
            'ami_association_scope': 'AmiAssociationScope'
        }

        self._resource_arn = resource_arn
        self._resource_type = resource_type
        self._resource_owner_id = resource_owner_id
        self._association_time = association_time
        self._ami_association_scope = ami_association_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseConfigurationAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseConfigurationAssociation of this LicenseConfigurationAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this LicenseConfigurationAssociation.


        :return: The resource_arn of this LicenseConfigurationAssociation.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this LicenseConfigurationAssociation.


        :param resource_arn: The resource_arn of this LicenseConfigurationAssociation.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def resource_type(self):
        """Gets the resource_type of this LicenseConfigurationAssociation.


        :return: The resource_type of this LicenseConfigurationAssociation.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LicenseConfigurationAssociation.


        :param resource_type: The resource_type of this LicenseConfigurationAssociation.
        :type resource_type: ResourceType
        """

        self._resource_type = resource_type

    @property
    def resource_owner_id(self):
        """Gets the resource_owner_id of this LicenseConfigurationAssociation.


        :return: The resource_owner_id of this LicenseConfigurationAssociation.
        :rtype: str
        """
        return self._resource_owner_id

    @resource_owner_id.setter
    def resource_owner_id(self, resource_owner_id):
        """Sets the resource_owner_id of this LicenseConfigurationAssociation.


        :param resource_owner_id: The resource_owner_id of this LicenseConfigurationAssociation.
        :type resource_owner_id: str
        """

        self._resource_owner_id = resource_owner_id

    @property
    def association_time(self):
        """Gets the association_time of this LicenseConfigurationAssociation.


        :return: The association_time of this LicenseConfigurationAssociation.
        :rtype: datetime
        """
        return self._association_time

    @association_time.setter
    def association_time(self, association_time):
        """Sets the association_time of this LicenseConfigurationAssociation.


        :param association_time: The association_time of this LicenseConfigurationAssociation.
        :type association_time: datetime
        """

        self._association_time = association_time

    @property
    def ami_association_scope(self):
        """Gets the ami_association_scope of this LicenseConfigurationAssociation.


        :return: The ami_association_scope of this LicenseConfigurationAssociation.
        :rtype: str
        """
        return self._ami_association_scope

    @ami_association_scope.setter
    def ami_association_scope(self, ami_association_scope):
        """Sets the ami_association_scope of this LicenseConfigurationAssociation.


        :param ami_association_scope: The ami_association_scope of this LicenseConfigurationAssociation.
        :type ami_association_scope: str
        """

        self._ami_association_scope = ami_association_scope
