# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_license_request_validity import CreateLicenseRequestValidity
from openapi_server.models.license_consumption_configuration import LicenseConsumptionConfiguration
from openapi_server.models.license_issuer import LicenseIssuer
from openapi_server.models.license_status import LicenseStatus
from openapi_server import util


class License(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_arn: str=None, license_name: str=None, product_name: str=None, product_sku: str=None, issuer: LicenseIssuer=None, home_region: str=None, status: LicenseStatus=None, validity: CreateLicenseRequestValidity=None, beneficiary: str=None, entitlements: List=None, consumption_configuration: LicenseConsumptionConfiguration=None, license_metadata: List=None, create_time: str=None, version: str=None):
        """License - a model defined in OpenAPI

        :param license_arn: The license_arn of this License.
        :param license_name: The license_name of this License.
        :param product_name: The product_name of this License.
        :param product_sku: The product_sku of this License.
        :param issuer: The issuer of this License.
        :param home_region: The home_region of this License.
        :param status: The status of this License.
        :param validity: The validity of this License.
        :param beneficiary: The beneficiary of this License.
        :param entitlements: The entitlements of this License.
        :param consumption_configuration: The consumption_configuration of this License.
        :param license_metadata: The license_metadata of this License.
        :param create_time: The create_time of this License.
        :param version: The version of this License.
        """
        self.openapi_types = {
            'license_arn': str,
            'license_name': str,
            'product_name': str,
            'product_sku': str,
            'issuer': LicenseIssuer,
            'home_region': str,
            'status': LicenseStatus,
            'validity': CreateLicenseRequestValidity,
            'beneficiary': str,
            'entitlements': List,
            'consumption_configuration': LicenseConsumptionConfiguration,
            'license_metadata': List,
            'create_time': str,
            'version': str
        }

        self.attribute_map = {
            'license_arn': 'LicenseArn',
            'license_name': 'LicenseName',
            'product_name': 'ProductName',
            'product_sku': 'ProductSKU',
            'issuer': 'Issuer',
            'home_region': 'HomeRegion',
            'status': 'Status',
            'validity': 'Validity',
            'beneficiary': 'Beneficiary',
            'entitlements': 'Entitlements',
            'consumption_configuration': 'ConsumptionConfiguration',
            'license_metadata': 'LicenseMetadata',
            'create_time': 'CreateTime',
            'version': 'Version'
        }

        self._license_arn = license_arn
        self._license_name = license_name
        self._product_name = product_name
        self._product_sku = product_sku
        self._issuer = issuer
        self._home_region = home_region
        self._status = status
        self._validity = validity
        self._beneficiary = beneficiary
        self._entitlements = entitlements
        self._consumption_configuration = consumption_configuration
        self._license_metadata = license_metadata
        self._create_time = create_time
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The License of this License.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_arn(self):
        """Gets the license_arn of this License.


        :return: The license_arn of this License.
        :rtype: str
        """
        return self._license_arn

    @license_arn.setter
    def license_arn(self, license_arn):
        """Sets the license_arn of this License.


        :param license_arn: The license_arn of this License.
        :type license_arn: str
        """

        self._license_arn = license_arn

    @property
    def license_name(self):
        """Gets the license_name of this License.


        :return: The license_name of this License.
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """Sets the license_name of this License.


        :param license_name: The license_name of this License.
        :type license_name: str
        """

        self._license_name = license_name

    @property
    def product_name(self):
        """Gets the product_name of this License.


        :return: The product_name of this License.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this License.


        :param product_name: The product_name of this License.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def product_sku(self):
        """Gets the product_sku of this License.


        :return: The product_sku of this License.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this License.


        :param product_sku: The product_sku of this License.
        :type product_sku: str
        """

        self._product_sku = product_sku

    @property
    def issuer(self):
        """Gets the issuer of this License.


        :return: The issuer of this License.
        :rtype: LicenseIssuer
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this License.


        :param issuer: The issuer of this License.
        :type issuer: LicenseIssuer
        """

        self._issuer = issuer

    @property
    def home_region(self):
        """Gets the home_region of this License.


        :return: The home_region of this License.
        :rtype: str
        """
        return self._home_region

    @home_region.setter
    def home_region(self, home_region):
        """Sets the home_region of this License.


        :param home_region: The home_region of this License.
        :type home_region: str
        """

        self._home_region = home_region

    @property
    def status(self):
        """Gets the status of this License.


        :return: The status of this License.
        :rtype: LicenseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this License.


        :param status: The status of this License.
        :type status: LicenseStatus
        """

        self._status = status

    @property
    def validity(self):
        """Gets the validity of this License.


        :return: The validity of this License.
        :rtype: CreateLicenseRequestValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this License.


        :param validity: The validity of this License.
        :type validity: CreateLicenseRequestValidity
        """

        self._validity = validity

    @property
    def beneficiary(self):
        """Gets the beneficiary of this License.


        :return: The beneficiary of this License.
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this License.


        :param beneficiary: The beneficiary of this License.
        :type beneficiary: str
        """

        self._beneficiary = beneficiary

    @property
    def entitlements(self):
        """Gets the entitlements of this License.


        :return: The entitlements of this License.
        :rtype: List
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this License.


        :param entitlements: The entitlements of this License.
        :type entitlements: List
        """

        self._entitlements = entitlements

    @property
    def consumption_configuration(self):
        """Gets the consumption_configuration of this License.


        :return: The consumption_configuration of this License.
        :rtype: LicenseConsumptionConfiguration
        """
        return self._consumption_configuration

    @consumption_configuration.setter
    def consumption_configuration(self, consumption_configuration):
        """Sets the consumption_configuration of this License.


        :param consumption_configuration: The consumption_configuration of this License.
        :type consumption_configuration: LicenseConsumptionConfiguration
        """

        self._consumption_configuration = consumption_configuration

    @property
    def license_metadata(self):
        """Gets the license_metadata of this License.


        :return: The license_metadata of this License.
        :rtype: List
        """
        return self._license_metadata

    @license_metadata.setter
    def license_metadata(self, license_metadata):
        """Sets the license_metadata of this License.


        :param license_metadata: The license_metadata of this License.
        :type license_metadata: List
        """

        self._license_metadata = license_metadata

    @property
    def create_time(self):
        """Gets the create_time of this License.


        :return: The create_time of this License.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this License.


        :param create_time: The create_time of this License.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def version(self):
        """Gets the version of this License.


        :return: The version of this License.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this License.


        :param version: The version of this License.
        :type version: str
        """

        self._version = version
