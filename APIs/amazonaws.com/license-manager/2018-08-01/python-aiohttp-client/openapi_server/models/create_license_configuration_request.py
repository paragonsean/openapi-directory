# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_counting_type import LicenseCountingType
from openapi_server import util


class CreateLicenseConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, license_counting_type: LicenseCountingType=None, license_count: int=None, license_count_hard_limit: bool=None, license_rules: List=None, tags: List=None, disassociate_when_not_found: bool=None, product_information_list: List=None):
        """CreateLicenseConfigurationRequest - a model defined in OpenAPI

        :param name: The name of this CreateLicenseConfigurationRequest.
        :param description: The description of this CreateLicenseConfigurationRequest.
        :param license_counting_type: The license_counting_type of this CreateLicenseConfigurationRequest.
        :param license_count: The license_count of this CreateLicenseConfigurationRequest.
        :param license_count_hard_limit: The license_count_hard_limit of this CreateLicenseConfigurationRequest.
        :param license_rules: The license_rules of this CreateLicenseConfigurationRequest.
        :param tags: The tags of this CreateLicenseConfigurationRequest.
        :param disassociate_when_not_found: The disassociate_when_not_found of this CreateLicenseConfigurationRequest.
        :param product_information_list: The product_information_list of this CreateLicenseConfigurationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'license_counting_type': LicenseCountingType,
            'license_count': int,
            'license_count_hard_limit': bool,
            'license_rules': List,
            'tags': List,
            'disassociate_when_not_found': bool,
            'product_information_list': List
        }

        self.attribute_map = {
            'name': 'Name',
            'description': 'Description',
            'license_counting_type': 'LicenseCountingType',
            'license_count': 'LicenseCount',
            'license_count_hard_limit': 'LicenseCountHardLimit',
            'license_rules': 'LicenseRules',
            'tags': 'Tags',
            'disassociate_when_not_found': 'DisassociateWhenNotFound',
            'product_information_list': 'ProductInformationList'
        }

        self._name = name
        self._description = description
        self._license_counting_type = license_counting_type
        self._license_count = license_count
        self._license_count_hard_limit = license_count_hard_limit
        self._license_rules = license_rules
        self._tags = tags
        self._disassociate_when_not_found = disassociate_when_not_found
        self._product_information_list = product_information_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLicenseConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLicenseConfigurationRequest of this CreateLicenseConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateLicenseConfigurationRequest.


        :return: The name of this CreateLicenseConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLicenseConfigurationRequest.


        :param name: The name of this CreateLicenseConfigurationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateLicenseConfigurationRequest.


        :return: The description of this CreateLicenseConfigurationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLicenseConfigurationRequest.


        :param description: The description of this CreateLicenseConfigurationRequest.
        :type description: str
        """

        self._description = description

    @property
    def license_counting_type(self):
        """Gets the license_counting_type of this CreateLicenseConfigurationRequest.


        :return: The license_counting_type of this CreateLicenseConfigurationRequest.
        :rtype: LicenseCountingType
        """
        return self._license_counting_type

    @license_counting_type.setter
    def license_counting_type(self, license_counting_type):
        """Sets the license_counting_type of this CreateLicenseConfigurationRequest.


        :param license_counting_type: The license_counting_type of this CreateLicenseConfigurationRequest.
        :type license_counting_type: LicenseCountingType
        """
        if license_counting_type is None:
            raise ValueError("Invalid value for `license_counting_type`, must not be `None`")

        self._license_counting_type = license_counting_type

    @property
    def license_count(self):
        """Gets the license_count of this CreateLicenseConfigurationRequest.


        :return: The license_count of this CreateLicenseConfigurationRequest.
        :rtype: int
        """
        return self._license_count

    @license_count.setter
    def license_count(self, license_count):
        """Sets the license_count of this CreateLicenseConfigurationRequest.


        :param license_count: The license_count of this CreateLicenseConfigurationRequest.
        :type license_count: int
        """

        self._license_count = license_count

    @property
    def license_count_hard_limit(self):
        """Gets the license_count_hard_limit of this CreateLicenseConfigurationRequest.


        :return: The license_count_hard_limit of this CreateLicenseConfigurationRequest.
        :rtype: bool
        """
        return self._license_count_hard_limit

    @license_count_hard_limit.setter
    def license_count_hard_limit(self, license_count_hard_limit):
        """Sets the license_count_hard_limit of this CreateLicenseConfigurationRequest.


        :param license_count_hard_limit: The license_count_hard_limit of this CreateLicenseConfigurationRequest.
        :type license_count_hard_limit: bool
        """

        self._license_count_hard_limit = license_count_hard_limit

    @property
    def license_rules(self):
        """Gets the license_rules of this CreateLicenseConfigurationRequest.


        :return: The license_rules of this CreateLicenseConfigurationRequest.
        :rtype: List
        """
        return self._license_rules

    @license_rules.setter
    def license_rules(self, license_rules):
        """Sets the license_rules of this CreateLicenseConfigurationRequest.


        :param license_rules: The license_rules of this CreateLicenseConfigurationRequest.
        :type license_rules: List
        """

        self._license_rules = license_rules

    @property
    def tags(self):
        """Gets the tags of this CreateLicenseConfigurationRequest.


        :return: The tags of this CreateLicenseConfigurationRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLicenseConfigurationRequest.


        :param tags: The tags of this CreateLicenseConfigurationRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def disassociate_when_not_found(self):
        """Gets the disassociate_when_not_found of this CreateLicenseConfigurationRequest.


        :return: The disassociate_when_not_found of this CreateLicenseConfigurationRequest.
        :rtype: bool
        """
        return self._disassociate_when_not_found

    @disassociate_when_not_found.setter
    def disassociate_when_not_found(self, disassociate_when_not_found):
        """Sets the disassociate_when_not_found of this CreateLicenseConfigurationRequest.


        :param disassociate_when_not_found: The disassociate_when_not_found of this CreateLicenseConfigurationRequest.
        :type disassociate_when_not_found: bool
        """

        self._disassociate_when_not_found = disassociate_when_not_found

    @property
    def product_information_list(self):
        """Gets the product_information_list of this CreateLicenseConfigurationRequest.


        :return: The product_information_list of this CreateLicenseConfigurationRequest.
        :rtype: List
        """
        return self._product_information_list

    @product_information_list.setter
    def product_information_list(self, product_information_list):
        """Sets the product_information_list of this CreateLicenseConfigurationRequest.


        :param product_information_list: The product_information_list of this CreateLicenseConfigurationRequest.
        :type product_information_list: List
        """

        self._product_information_list = product_information_list
