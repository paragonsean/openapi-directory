# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_generator_report_context import ReportGeneratorReportContext
from openapi_server.models.report_generator_report_frequency import ReportGeneratorReportFrequency
from openapi_server.models.report_generator_s3_location import ReportGeneratorS3Location
from openapi_server import util


class ReportGenerator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_generator_name: str=None, report_type: List=None, report_context: ReportGeneratorReportContext=None, report_frequency: ReportGeneratorReportFrequency=None, license_manager_report_generator_arn: str=None, last_run_status: str=None, last_run_failure_reason: str=None, last_report_generation_time: str=None, report_creator_account: str=None, description: str=None, s3_location: ReportGeneratorS3Location=None, create_time: str=None, tags: List=None):
        """ReportGenerator - a model defined in OpenAPI

        :param report_generator_name: The report_generator_name of this ReportGenerator.
        :param report_type: The report_type of this ReportGenerator.
        :param report_context: The report_context of this ReportGenerator.
        :param report_frequency: The report_frequency of this ReportGenerator.
        :param license_manager_report_generator_arn: The license_manager_report_generator_arn of this ReportGenerator.
        :param last_run_status: The last_run_status of this ReportGenerator.
        :param last_run_failure_reason: The last_run_failure_reason of this ReportGenerator.
        :param last_report_generation_time: The last_report_generation_time of this ReportGenerator.
        :param report_creator_account: The report_creator_account of this ReportGenerator.
        :param description: The description of this ReportGenerator.
        :param s3_location: The s3_location of this ReportGenerator.
        :param create_time: The create_time of this ReportGenerator.
        :param tags: The tags of this ReportGenerator.
        """
        self.openapi_types = {
            'report_generator_name': str,
            'report_type': List,
            'report_context': ReportGeneratorReportContext,
            'report_frequency': ReportGeneratorReportFrequency,
            'license_manager_report_generator_arn': str,
            'last_run_status': str,
            'last_run_failure_reason': str,
            'last_report_generation_time': str,
            'report_creator_account': str,
            'description': str,
            's3_location': ReportGeneratorS3Location,
            'create_time': str,
            'tags': List
        }

        self.attribute_map = {
            'report_generator_name': 'ReportGeneratorName',
            'report_type': 'ReportType',
            'report_context': 'ReportContext',
            'report_frequency': 'ReportFrequency',
            'license_manager_report_generator_arn': 'LicenseManagerReportGeneratorArn',
            'last_run_status': 'LastRunStatus',
            'last_run_failure_reason': 'LastRunFailureReason',
            'last_report_generation_time': 'LastReportGenerationTime',
            'report_creator_account': 'ReportCreatorAccount',
            'description': 'Description',
            's3_location': 'S3Location',
            'create_time': 'CreateTime',
            'tags': 'Tags'
        }

        self._report_generator_name = report_generator_name
        self._report_type = report_type
        self._report_context = report_context
        self._report_frequency = report_frequency
        self._license_manager_report_generator_arn = license_manager_report_generator_arn
        self._last_run_status = last_run_status
        self._last_run_failure_reason = last_run_failure_reason
        self._last_report_generation_time = last_report_generation_time
        self._report_creator_account = report_creator_account
        self._description = description
        self._s3_location = s3_location
        self._create_time = create_time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportGenerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportGenerator of this ReportGenerator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_generator_name(self):
        """Gets the report_generator_name of this ReportGenerator.


        :return: The report_generator_name of this ReportGenerator.
        :rtype: str
        """
        return self._report_generator_name

    @report_generator_name.setter
    def report_generator_name(self, report_generator_name):
        """Sets the report_generator_name of this ReportGenerator.


        :param report_generator_name: The report_generator_name of this ReportGenerator.
        :type report_generator_name: str
        """

        self._report_generator_name = report_generator_name

    @property
    def report_type(self):
        """Gets the report_type of this ReportGenerator.


        :return: The report_type of this ReportGenerator.
        :rtype: List
        """
        return self._report_type

    @report_type.setter
    def report_type(self, report_type):
        """Sets the report_type of this ReportGenerator.


        :param report_type: The report_type of this ReportGenerator.
        :type report_type: List
        """

        self._report_type = report_type

    @property
    def report_context(self):
        """Gets the report_context of this ReportGenerator.


        :return: The report_context of this ReportGenerator.
        :rtype: ReportGeneratorReportContext
        """
        return self._report_context

    @report_context.setter
    def report_context(self, report_context):
        """Sets the report_context of this ReportGenerator.


        :param report_context: The report_context of this ReportGenerator.
        :type report_context: ReportGeneratorReportContext
        """

        self._report_context = report_context

    @property
    def report_frequency(self):
        """Gets the report_frequency of this ReportGenerator.


        :return: The report_frequency of this ReportGenerator.
        :rtype: ReportGeneratorReportFrequency
        """
        return self._report_frequency

    @report_frequency.setter
    def report_frequency(self, report_frequency):
        """Sets the report_frequency of this ReportGenerator.


        :param report_frequency: The report_frequency of this ReportGenerator.
        :type report_frequency: ReportGeneratorReportFrequency
        """

        self._report_frequency = report_frequency

    @property
    def license_manager_report_generator_arn(self):
        """Gets the license_manager_report_generator_arn of this ReportGenerator.


        :return: The license_manager_report_generator_arn of this ReportGenerator.
        :rtype: str
        """
        return self._license_manager_report_generator_arn

    @license_manager_report_generator_arn.setter
    def license_manager_report_generator_arn(self, license_manager_report_generator_arn):
        """Sets the license_manager_report_generator_arn of this ReportGenerator.


        :param license_manager_report_generator_arn: The license_manager_report_generator_arn of this ReportGenerator.
        :type license_manager_report_generator_arn: str
        """

        self._license_manager_report_generator_arn = license_manager_report_generator_arn

    @property
    def last_run_status(self):
        """Gets the last_run_status of this ReportGenerator.


        :return: The last_run_status of this ReportGenerator.
        :rtype: str
        """
        return self._last_run_status

    @last_run_status.setter
    def last_run_status(self, last_run_status):
        """Sets the last_run_status of this ReportGenerator.


        :param last_run_status: The last_run_status of this ReportGenerator.
        :type last_run_status: str
        """

        self._last_run_status = last_run_status

    @property
    def last_run_failure_reason(self):
        """Gets the last_run_failure_reason of this ReportGenerator.


        :return: The last_run_failure_reason of this ReportGenerator.
        :rtype: str
        """
        return self._last_run_failure_reason

    @last_run_failure_reason.setter
    def last_run_failure_reason(self, last_run_failure_reason):
        """Sets the last_run_failure_reason of this ReportGenerator.


        :param last_run_failure_reason: The last_run_failure_reason of this ReportGenerator.
        :type last_run_failure_reason: str
        """

        self._last_run_failure_reason = last_run_failure_reason

    @property
    def last_report_generation_time(self):
        """Gets the last_report_generation_time of this ReportGenerator.


        :return: The last_report_generation_time of this ReportGenerator.
        :rtype: str
        """
        return self._last_report_generation_time

    @last_report_generation_time.setter
    def last_report_generation_time(self, last_report_generation_time):
        """Sets the last_report_generation_time of this ReportGenerator.


        :param last_report_generation_time: The last_report_generation_time of this ReportGenerator.
        :type last_report_generation_time: str
        """

        self._last_report_generation_time = last_report_generation_time

    @property
    def report_creator_account(self):
        """Gets the report_creator_account of this ReportGenerator.


        :return: The report_creator_account of this ReportGenerator.
        :rtype: str
        """
        return self._report_creator_account

    @report_creator_account.setter
    def report_creator_account(self, report_creator_account):
        """Sets the report_creator_account of this ReportGenerator.


        :param report_creator_account: The report_creator_account of this ReportGenerator.
        :type report_creator_account: str
        """

        self._report_creator_account = report_creator_account

    @property
    def description(self):
        """Gets the description of this ReportGenerator.


        :return: The description of this ReportGenerator.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReportGenerator.


        :param description: The description of this ReportGenerator.
        :type description: str
        """

        self._description = description

    @property
    def s3_location(self):
        """Gets the s3_location of this ReportGenerator.


        :return: The s3_location of this ReportGenerator.
        :rtype: ReportGeneratorS3Location
        """
        return self._s3_location

    @s3_location.setter
    def s3_location(self, s3_location):
        """Sets the s3_location of this ReportGenerator.


        :param s3_location: The s3_location of this ReportGenerator.
        :type s3_location: ReportGeneratorS3Location
        """

        self._s3_location = s3_location

    @property
    def create_time(self):
        """Gets the create_time of this ReportGenerator.


        :return: The create_time of this ReportGenerator.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ReportGenerator.


        :param create_time: The create_time of this ReportGenerator.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def tags(self):
        """Gets the tags of this ReportGenerator.


        :return: The tags of this ReportGenerator.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReportGenerator.


        :param tags: The tags of this ReportGenerator.
        :type tags: List
        """

        self._tags = tags
