# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExtendLicenseConsumptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_consumption_token: str=None, dry_run: bool=None):
        """ExtendLicenseConsumptionRequest - a model defined in OpenAPI

        :param license_consumption_token: The license_consumption_token of this ExtendLicenseConsumptionRequest.
        :param dry_run: The dry_run of this ExtendLicenseConsumptionRequest.
        """
        self.openapi_types = {
            'license_consumption_token': str,
            'dry_run': bool
        }

        self.attribute_map = {
            'license_consumption_token': 'LicenseConsumptionToken',
            'dry_run': 'DryRun'
        }

        self._license_consumption_token = license_consumption_token
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendLicenseConsumptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendLicenseConsumptionRequest of this ExtendLicenseConsumptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_consumption_token(self):
        """Gets the license_consumption_token of this ExtendLicenseConsumptionRequest.


        :return: The license_consumption_token of this ExtendLicenseConsumptionRequest.
        :rtype: str
        """
        return self._license_consumption_token

    @license_consumption_token.setter
    def license_consumption_token(self, license_consumption_token):
        """Sets the license_consumption_token of this ExtendLicenseConsumptionRequest.


        :param license_consumption_token: The license_consumption_token of this ExtendLicenseConsumptionRequest.
        :type license_consumption_token: str
        """
        if license_consumption_token is None:
            raise ValueError("Invalid value for `license_consumption_token`, must not be `None`")

        self._license_consumption_token = license_consumption_token

    @property
    def dry_run(self):
        """Gets the dry_run of this ExtendLicenseConsumptionRequest.


        :return: The dry_run of this ExtendLicenseConsumptionRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this ExtendLicenseConsumptionRequest.


        :param dry_run: The dry_run of this ExtendLicenseConsumptionRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run
