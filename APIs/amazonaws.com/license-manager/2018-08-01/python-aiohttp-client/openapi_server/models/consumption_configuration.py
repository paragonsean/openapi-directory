# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumption_configuration_borrow_configuration import ConsumptionConfigurationBorrowConfiguration
from openapi_server.models.consumption_configuration_provisional_configuration import ConsumptionConfigurationProvisionalConfiguration
from openapi_server.models.renew_type import RenewType
from openapi_server import util


class ConsumptionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, renew_type: RenewType=None, provisional_configuration: ConsumptionConfigurationProvisionalConfiguration=None, borrow_configuration: ConsumptionConfigurationBorrowConfiguration=None):
        """ConsumptionConfiguration - a model defined in OpenAPI

        :param renew_type: The renew_type of this ConsumptionConfiguration.
        :param provisional_configuration: The provisional_configuration of this ConsumptionConfiguration.
        :param borrow_configuration: The borrow_configuration of this ConsumptionConfiguration.
        """
        self.openapi_types = {
            'renew_type': RenewType,
            'provisional_configuration': ConsumptionConfigurationProvisionalConfiguration,
            'borrow_configuration': ConsumptionConfigurationBorrowConfiguration
        }

        self.attribute_map = {
            'renew_type': 'RenewType',
            'provisional_configuration': 'ProvisionalConfiguration',
            'borrow_configuration': 'BorrowConfiguration'
        }

        self._renew_type = renew_type
        self._provisional_configuration = provisional_configuration
        self._borrow_configuration = borrow_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumptionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumptionConfiguration of this ConsumptionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def renew_type(self):
        """Gets the renew_type of this ConsumptionConfiguration.


        :return: The renew_type of this ConsumptionConfiguration.
        :rtype: RenewType
        """
        return self._renew_type

    @renew_type.setter
    def renew_type(self, renew_type):
        """Sets the renew_type of this ConsumptionConfiguration.


        :param renew_type: The renew_type of this ConsumptionConfiguration.
        :type renew_type: RenewType
        """

        self._renew_type = renew_type

    @property
    def provisional_configuration(self):
        """Gets the provisional_configuration of this ConsumptionConfiguration.


        :return: The provisional_configuration of this ConsumptionConfiguration.
        :rtype: ConsumptionConfigurationProvisionalConfiguration
        """
        return self._provisional_configuration

    @provisional_configuration.setter
    def provisional_configuration(self, provisional_configuration):
        """Sets the provisional_configuration of this ConsumptionConfiguration.


        :param provisional_configuration: The provisional_configuration of this ConsumptionConfiguration.
        :type provisional_configuration: ConsumptionConfigurationProvisionalConfiguration
        """

        self._provisional_configuration = provisional_configuration

    @property
    def borrow_configuration(self):
        """Gets the borrow_configuration of this ConsumptionConfiguration.


        :return: The borrow_configuration of this ConsumptionConfiguration.
        :rtype: ConsumptionConfigurationBorrowConfiguration
        """
        return self._borrow_configuration

    @borrow_configuration.setter
    def borrow_configuration(self, borrow_configuration):
        """Sets the borrow_configuration of this ConsumptionConfiguration.


        :param borrow_configuration: The borrow_configuration of this ConsumptionConfiguration.
        :type borrow_configuration: ConsumptionConfigurationBorrowConfiguration
        """

        self._borrow_configuration = borrow_configuration
