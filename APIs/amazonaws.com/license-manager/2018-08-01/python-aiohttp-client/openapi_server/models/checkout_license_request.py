# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.checkout_type import CheckoutType
from openapi_server import util


class CheckoutLicenseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_sku: str=None, checkout_type: CheckoutType=None, key_fingerprint: str=None, entitlements: List=None, client_token: str=None, beneficiary: str=None, node_id: str=None):
        """CheckoutLicenseRequest - a model defined in OpenAPI

        :param product_sku: The product_sku of this CheckoutLicenseRequest.
        :param checkout_type: The checkout_type of this CheckoutLicenseRequest.
        :param key_fingerprint: The key_fingerprint of this CheckoutLicenseRequest.
        :param entitlements: The entitlements of this CheckoutLicenseRequest.
        :param client_token: The client_token of this CheckoutLicenseRequest.
        :param beneficiary: The beneficiary of this CheckoutLicenseRequest.
        :param node_id: The node_id of this CheckoutLicenseRequest.
        """
        self.openapi_types = {
            'product_sku': str,
            'checkout_type': CheckoutType,
            'key_fingerprint': str,
            'entitlements': List,
            'client_token': str,
            'beneficiary': str,
            'node_id': str
        }

        self.attribute_map = {
            'product_sku': 'ProductSKU',
            'checkout_type': 'CheckoutType',
            'key_fingerprint': 'KeyFingerprint',
            'entitlements': 'Entitlements',
            'client_token': 'ClientToken',
            'beneficiary': 'Beneficiary',
            'node_id': 'NodeId'
        }

        self._product_sku = product_sku
        self._checkout_type = checkout_type
        self._key_fingerprint = key_fingerprint
        self._entitlements = entitlements
        self._client_token = client_token
        self._beneficiary = beneficiary
        self._node_id = node_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutLicenseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckoutLicenseRequest of this CheckoutLicenseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_sku(self):
        """Gets the product_sku of this CheckoutLicenseRequest.


        :return: The product_sku of this CheckoutLicenseRequest.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this CheckoutLicenseRequest.


        :param product_sku: The product_sku of this CheckoutLicenseRequest.
        :type product_sku: str
        """
        if product_sku is None:
            raise ValueError("Invalid value for `product_sku`, must not be `None`")

        self._product_sku = product_sku

    @property
    def checkout_type(self):
        """Gets the checkout_type of this CheckoutLicenseRequest.


        :return: The checkout_type of this CheckoutLicenseRequest.
        :rtype: CheckoutType
        """
        return self._checkout_type

    @checkout_type.setter
    def checkout_type(self, checkout_type):
        """Sets the checkout_type of this CheckoutLicenseRequest.


        :param checkout_type: The checkout_type of this CheckoutLicenseRequest.
        :type checkout_type: CheckoutType
        """
        if checkout_type is None:
            raise ValueError("Invalid value for `checkout_type`, must not be `None`")

        self._checkout_type = checkout_type

    @property
    def key_fingerprint(self):
        """Gets the key_fingerprint of this CheckoutLicenseRequest.


        :return: The key_fingerprint of this CheckoutLicenseRequest.
        :rtype: str
        """
        return self._key_fingerprint

    @key_fingerprint.setter
    def key_fingerprint(self, key_fingerprint):
        """Sets the key_fingerprint of this CheckoutLicenseRequest.


        :param key_fingerprint: The key_fingerprint of this CheckoutLicenseRequest.
        :type key_fingerprint: str
        """
        if key_fingerprint is None:
            raise ValueError("Invalid value for `key_fingerprint`, must not be `None`")

        self._key_fingerprint = key_fingerprint

    @property
    def entitlements(self):
        """Gets the entitlements of this CheckoutLicenseRequest.


        :return: The entitlements of this CheckoutLicenseRequest.
        :rtype: List
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this CheckoutLicenseRequest.


        :param entitlements: The entitlements of this CheckoutLicenseRequest.
        :type entitlements: List
        """
        if entitlements is None:
            raise ValueError("Invalid value for `entitlements`, must not be `None`")

        self._entitlements = entitlements

    @property
    def client_token(self):
        """Gets the client_token of this CheckoutLicenseRequest.


        :return: The client_token of this CheckoutLicenseRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CheckoutLicenseRequest.


        :param client_token: The client_token of this CheckoutLicenseRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def beneficiary(self):
        """Gets the beneficiary of this CheckoutLicenseRequest.


        :return: The beneficiary of this CheckoutLicenseRequest.
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this CheckoutLicenseRequest.


        :param beneficiary: The beneficiary of this CheckoutLicenseRequest.
        :type beneficiary: str
        """

        self._beneficiary = beneficiary

    @property
    def node_id(self):
        """Gets the node_id of this CheckoutLicenseRequest.


        :return: The node_id of this CheckoutLicenseRequest.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this CheckoutLicenseRequest.


        :param node_id: The node_id of this CheckoutLicenseRequest.
        :type node_id: str
        """

        self._node_id = node_id
