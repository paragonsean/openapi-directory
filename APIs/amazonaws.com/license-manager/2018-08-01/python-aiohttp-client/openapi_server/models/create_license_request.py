# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_license_request_consumption_configuration import CreateLicenseRequestConsumptionConfiguration
from openapi_server.models.create_license_request_issuer import CreateLicenseRequestIssuer
from openapi_server.models.create_license_request_validity import CreateLicenseRequestValidity
from openapi_server import util


class CreateLicenseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_name: str=None, product_name: str=None, product_sku: str=None, issuer: CreateLicenseRequestIssuer=None, home_region: str=None, validity: CreateLicenseRequestValidity=None, entitlements: List=None, beneficiary: str=None, consumption_configuration: CreateLicenseRequestConsumptionConfiguration=None, license_metadata: List=None, client_token: str=None):
        """CreateLicenseRequest - a model defined in OpenAPI

        :param license_name: The license_name of this CreateLicenseRequest.
        :param product_name: The product_name of this CreateLicenseRequest.
        :param product_sku: The product_sku of this CreateLicenseRequest.
        :param issuer: The issuer of this CreateLicenseRequest.
        :param home_region: The home_region of this CreateLicenseRequest.
        :param validity: The validity of this CreateLicenseRequest.
        :param entitlements: The entitlements of this CreateLicenseRequest.
        :param beneficiary: The beneficiary of this CreateLicenseRequest.
        :param consumption_configuration: The consumption_configuration of this CreateLicenseRequest.
        :param license_metadata: The license_metadata of this CreateLicenseRequest.
        :param client_token: The client_token of this CreateLicenseRequest.
        """
        self.openapi_types = {
            'license_name': str,
            'product_name': str,
            'product_sku': str,
            'issuer': CreateLicenseRequestIssuer,
            'home_region': str,
            'validity': CreateLicenseRequestValidity,
            'entitlements': List,
            'beneficiary': str,
            'consumption_configuration': CreateLicenseRequestConsumptionConfiguration,
            'license_metadata': List,
            'client_token': str
        }

        self.attribute_map = {
            'license_name': 'LicenseName',
            'product_name': 'ProductName',
            'product_sku': 'ProductSKU',
            'issuer': 'Issuer',
            'home_region': 'HomeRegion',
            'validity': 'Validity',
            'entitlements': 'Entitlements',
            'beneficiary': 'Beneficiary',
            'consumption_configuration': 'ConsumptionConfiguration',
            'license_metadata': 'LicenseMetadata',
            'client_token': 'ClientToken'
        }

        self._license_name = license_name
        self._product_name = product_name
        self._product_sku = product_sku
        self._issuer = issuer
        self._home_region = home_region
        self._validity = validity
        self._entitlements = entitlements
        self._beneficiary = beneficiary
        self._consumption_configuration = consumption_configuration
        self._license_metadata = license_metadata
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLicenseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLicenseRequest of this CreateLicenseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_name(self):
        """Gets the license_name of this CreateLicenseRequest.


        :return: The license_name of this CreateLicenseRequest.
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """Sets the license_name of this CreateLicenseRequest.


        :param license_name: The license_name of this CreateLicenseRequest.
        :type license_name: str
        """
        if license_name is None:
            raise ValueError("Invalid value for `license_name`, must not be `None`")

        self._license_name = license_name

    @property
    def product_name(self):
        """Gets the product_name of this CreateLicenseRequest.


        :return: The product_name of this CreateLicenseRequest.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CreateLicenseRequest.


        :param product_name: The product_name of this CreateLicenseRequest.
        :type product_name: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")

        self._product_name = product_name

    @property
    def product_sku(self):
        """Gets the product_sku of this CreateLicenseRequest.


        :return: The product_sku of this CreateLicenseRequest.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this CreateLicenseRequest.


        :param product_sku: The product_sku of this CreateLicenseRequest.
        :type product_sku: str
        """
        if product_sku is None:
            raise ValueError("Invalid value for `product_sku`, must not be `None`")

        self._product_sku = product_sku

    @property
    def issuer(self):
        """Gets the issuer of this CreateLicenseRequest.


        :return: The issuer of this CreateLicenseRequest.
        :rtype: CreateLicenseRequestIssuer
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CreateLicenseRequest.


        :param issuer: The issuer of this CreateLicenseRequest.
        :type issuer: CreateLicenseRequestIssuer
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def home_region(self):
        """Gets the home_region of this CreateLicenseRequest.


        :return: The home_region of this CreateLicenseRequest.
        :rtype: str
        """
        return self._home_region

    @home_region.setter
    def home_region(self, home_region):
        """Sets the home_region of this CreateLicenseRequest.


        :param home_region: The home_region of this CreateLicenseRequest.
        :type home_region: str
        """
        if home_region is None:
            raise ValueError("Invalid value for `home_region`, must not be `None`")

        self._home_region = home_region

    @property
    def validity(self):
        """Gets the validity of this CreateLicenseRequest.


        :return: The validity of this CreateLicenseRequest.
        :rtype: CreateLicenseRequestValidity
        """
        return self._validity

    @validity.setter
    def validity(self, validity):
        """Sets the validity of this CreateLicenseRequest.


        :param validity: The validity of this CreateLicenseRequest.
        :type validity: CreateLicenseRequestValidity
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")

        self._validity = validity

    @property
    def entitlements(self):
        """Gets the entitlements of this CreateLicenseRequest.


        :return: The entitlements of this CreateLicenseRequest.
        :rtype: List
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this CreateLicenseRequest.


        :param entitlements: The entitlements of this CreateLicenseRequest.
        :type entitlements: List
        """
        if entitlements is None:
            raise ValueError("Invalid value for `entitlements`, must not be `None`")

        self._entitlements = entitlements

    @property
    def beneficiary(self):
        """Gets the beneficiary of this CreateLicenseRequest.


        :return: The beneficiary of this CreateLicenseRequest.
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this CreateLicenseRequest.


        :param beneficiary: The beneficiary of this CreateLicenseRequest.
        :type beneficiary: str
        """
        if beneficiary is None:
            raise ValueError("Invalid value for `beneficiary`, must not be `None`")

        self._beneficiary = beneficiary

    @property
    def consumption_configuration(self):
        """Gets the consumption_configuration of this CreateLicenseRequest.


        :return: The consumption_configuration of this CreateLicenseRequest.
        :rtype: CreateLicenseRequestConsumptionConfiguration
        """
        return self._consumption_configuration

    @consumption_configuration.setter
    def consumption_configuration(self, consumption_configuration):
        """Sets the consumption_configuration of this CreateLicenseRequest.


        :param consumption_configuration: The consumption_configuration of this CreateLicenseRequest.
        :type consumption_configuration: CreateLicenseRequestConsumptionConfiguration
        """
        if consumption_configuration is None:
            raise ValueError("Invalid value for `consumption_configuration`, must not be `None`")

        self._consumption_configuration = consumption_configuration

    @property
    def license_metadata(self):
        """Gets the license_metadata of this CreateLicenseRequest.


        :return: The license_metadata of this CreateLicenseRequest.
        :rtype: List
        """
        return self._license_metadata

    @license_metadata.setter
    def license_metadata(self, license_metadata):
        """Sets the license_metadata of this CreateLicenseRequest.


        :param license_metadata: The license_metadata of this CreateLicenseRequest.
        :type license_metadata: List
        """

        self._license_metadata = license_metadata

    @property
    def client_token(self):
        """Gets the client_token of this CreateLicenseRequest.


        :return: The client_token of this CreateLicenseRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateLicenseRequest.


        :param client_token: The client_token of this CreateLicenseRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
