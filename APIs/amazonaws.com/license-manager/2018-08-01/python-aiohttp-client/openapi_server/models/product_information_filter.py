# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductInformationFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_information_filter_name: str=None, product_information_filter_value: List=None, product_information_filter_comparator: str=None):
        """ProductInformationFilter - a model defined in OpenAPI

        :param product_information_filter_name: The product_information_filter_name of this ProductInformationFilter.
        :param product_information_filter_value: The product_information_filter_value of this ProductInformationFilter.
        :param product_information_filter_comparator: The product_information_filter_comparator of this ProductInformationFilter.
        """
        self.openapi_types = {
            'product_information_filter_name': str,
            'product_information_filter_value': List,
            'product_information_filter_comparator': str
        }

        self.attribute_map = {
            'product_information_filter_name': 'ProductInformationFilterName',
            'product_information_filter_value': 'ProductInformationFilterValue',
            'product_information_filter_comparator': 'ProductInformationFilterComparator'
        }

        self._product_information_filter_name = product_information_filter_name
        self._product_information_filter_value = product_information_filter_value
        self._product_information_filter_comparator = product_information_filter_comparator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductInformationFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductInformationFilter of this ProductInformationFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_information_filter_name(self):
        """Gets the product_information_filter_name of this ProductInformationFilter.


        :return: The product_information_filter_name of this ProductInformationFilter.
        :rtype: str
        """
        return self._product_information_filter_name

    @product_information_filter_name.setter
    def product_information_filter_name(self, product_information_filter_name):
        """Sets the product_information_filter_name of this ProductInformationFilter.


        :param product_information_filter_name: The product_information_filter_name of this ProductInformationFilter.
        :type product_information_filter_name: str
        """
        if product_information_filter_name is None:
            raise ValueError("Invalid value for `product_information_filter_name`, must not be `None`")

        self._product_information_filter_name = product_information_filter_name

    @property
    def product_information_filter_value(self):
        """Gets the product_information_filter_value of this ProductInformationFilter.


        :return: The product_information_filter_value of this ProductInformationFilter.
        :rtype: List
        """
        return self._product_information_filter_value

    @product_information_filter_value.setter
    def product_information_filter_value(self, product_information_filter_value):
        """Sets the product_information_filter_value of this ProductInformationFilter.


        :param product_information_filter_value: The product_information_filter_value of this ProductInformationFilter.
        :type product_information_filter_value: List
        """

        self._product_information_filter_value = product_information_filter_value

    @property
    def product_information_filter_comparator(self):
        """Gets the product_information_filter_comparator of this ProductInformationFilter.


        :return: The product_information_filter_comparator of this ProductInformationFilter.
        :rtype: str
        """
        return self._product_information_filter_comparator

    @product_information_filter_comparator.setter
    def product_information_filter_comparator(self, product_information_filter_comparator):
        """Sets the product_information_filter_comparator of this ProductInformationFilter.


        :param product_information_filter_comparator: The product_information_filter_comparator of this ProductInformationFilter.
        :type product_information_filter_comparator: str
        """
        if product_information_filter_comparator is None:
            raise ValueError("Invalid value for `product_information_filter_comparator`, must not be `None`")

        self._product_information_filter_comparator = product_information_filter_comparator
