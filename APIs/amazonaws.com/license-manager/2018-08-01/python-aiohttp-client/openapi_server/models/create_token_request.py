# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_arn: str=None, role_arns: List=None, expiration_in_days: int=None, token_properties: List=None, client_token: str=None):
        """CreateTokenRequest - a model defined in OpenAPI

        :param license_arn: The license_arn of this CreateTokenRequest.
        :param role_arns: The role_arns of this CreateTokenRequest.
        :param expiration_in_days: The expiration_in_days of this CreateTokenRequest.
        :param token_properties: The token_properties of this CreateTokenRequest.
        :param client_token: The client_token of this CreateTokenRequest.
        """
        self.openapi_types = {
            'license_arn': str,
            'role_arns': List,
            'expiration_in_days': int,
            'token_properties': List,
            'client_token': str
        }

        self.attribute_map = {
            'license_arn': 'LicenseArn',
            'role_arns': 'RoleArns',
            'expiration_in_days': 'ExpirationInDays',
            'token_properties': 'TokenProperties',
            'client_token': 'ClientToken'
        }

        self._license_arn = license_arn
        self._role_arns = role_arns
        self._expiration_in_days = expiration_in_days
        self._token_properties = token_properties
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTokenRequest of this CreateTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_arn(self):
        """Gets the license_arn of this CreateTokenRequest.


        :return: The license_arn of this CreateTokenRequest.
        :rtype: str
        """
        return self._license_arn

    @license_arn.setter
    def license_arn(self, license_arn):
        """Sets the license_arn of this CreateTokenRequest.


        :param license_arn: The license_arn of this CreateTokenRequest.
        :type license_arn: str
        """
        if license_arn is None:
            raise ValueError("Invalid value for `license_arn`, must not be `None`")

        self._license_arn = license_arn

    @property
    def role_arns(self):
        """Gets the role_arns of this CreateTokenRequest.


        :return: The role_arns of this CreateTokenRequest.
        :rtype: List
        """
        return self._role_arns

    @role_arns.setter
    def role_arns(self, role_arns):
        """Sets the role_arns of this CreateTokenRequest.


        :param role_arns: The role_arns of this CreateTokenRequest.
        :type role_arns: List
        """

        self._role_arns = role_arns

    @property
    def expiration_in_days(self):
        """Gets the expiration_in_days of this CreateTokenRequest.


        :return: The expiration_in_days of this CreateTokenRequest.
        :rtype: int
        """
        return self._expiration_in_days

    @expiration_in_days.setter
    def expiration_in_days(self, expiration_in_days):
        """Sets the expiration_in_days of this CreateTokenRequest.


        :param expiration_in_days: The expiration_in_days of this CreateTokenRequest.
        :type expiration_in_days: int
        """

        self._expiration_in_days = expiration_in_days

    @property
    def token_properties(self):
        """Gets the token_properties of this CreateTokenRequest.


        :return: The token_properties of this CreateTokenRequest.
        :rtype: List
        """
        return self._token_properties

    @token_properties.setter
    def token_properties(self, token_properties):
        """Sets the token_properties of this CreateTokenRequest.


        :param token_properties: The token_properties of this CreateTokenRequest.
        :type token_properties: List
        """

        self._token_properties = token_properties

    @property
    def client_token(self):
        """Gets the client_token of this CreateTokenRequest.


        :return: The client_token of this CreateTokenRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateTokenRequest.


        :param client_token: The client_token of this CreateTokenRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token
