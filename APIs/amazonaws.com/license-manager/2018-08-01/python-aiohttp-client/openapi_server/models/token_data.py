# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token_id: str=None, token_type: str=None, license_arn: str=None, expiration_time: str=None, token_properties: List=None, role_arns: List=None, status: str=None):
        """TokenData - a model defined in OpenAPI

        :param token_id: The token_id of this TokenData.
        :param token_type: The token_type of this TokenData.
        :param license_arn: The license_arn of this TokenData.
        :param expiration_time: The expiration_time of this TokenData.
        :param token_properties: The token_properties of this TokenData.
        :param role_arns: The role_arns of this TokenData.
        :param status: The status of this TokenData.
        """
        self.openapi_types = {
            'token_id': str,
            'token_type': str,
            'license_arn': str,
            'expiration_time': str,
            'token_properties': List,
            'role_arns': List,
            'status': str
        }

        self.attribute_map = {
            'token_id': 'TokenId',
            'token_type': 'TokenType',
            'license_arn': 'LicenseArn',
            'expiration_time': 'ExpirationTime',
            'token_properties': 'TokenProperties',
            'role_arns': 'RoleArns',
            'status': 'Status'
        }

        self._token_id = token_id
        self._token_type = token_type
        self._license_arn = license_arn
        self._expiration_time = expiration_time
        self._token_properties = token_properties
        self._role_arns = role_arns
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenData of this TokenData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_id(self):
        """Gets the token_id of this TokenData.


        :return: The token_id of this TokenData.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this TokenData.


        :param token_id: The token_id of this TokenData.
        :type token_id: str
        """

        self._token_id = token_id

    @property
    def token_type(self):
        """Gets the token_type of this TokenData.


        :return: The token_type of this TokenData.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this TokenData.


        :param token_type: The token_type of this TokenData.
        :type token_type: str
        """

        self._token_type = token_type

    @property
    def license_arn(self):
        """Gets the license_arn of this TokenData.


        :return: The license_arn of this TokenData.
        :rtype: str
        """
        return self._license_arn

    @license_arn.setter
    def license_arn(self, license_arn):
        """Sets the license_arn of this TokenData.


        :param license_arn: The license_arn of this TokenData.
        :type license_arn: str
        """

        self._license_arn = license_arn

    @property
    def expiration_time(self):
        """Gets the expiration_time of this TokenData.


        :return: The expiration_time of this TokenData.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this TokenData.


        :param expiration_time: The expiration_time of this TokenData.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def token_properties(self):
        """Gets the token_properties of this TokenData.


        :return: The token_properties of this TokenData.
        :rtype: List
        """
        return self._token_properties

    @token_properties.setter
    def token_properties(self, token_properties):
        """Sets the token_properties of this TokenData.


        :param token_properties: The token_properties of this TokenData.
        :type token_properties: List
        """

        self._token_properties = token_properties

    @property
    def role_arns(self):
        """Gets the role_arns of this TokenData.


        :return: The role_arns of this TokenData.
        :rtype: List
        """
        return self._role_arns

    @role_arns.setter
    def role_arns(self, role_arns):
        """Sets the role_arns of this TokenData.


        :param role_arns: The role_arns of this TokenData.
        :type role_arns: List
        """

        self._role_arns = role_arns

    @property
    def status(self):
        """Gets the status of this TokenData.


        :return: The status of this TokenData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TokenData.


        :param status: The status of this TokenData.
        :type status: str
        """

        self._status = status
