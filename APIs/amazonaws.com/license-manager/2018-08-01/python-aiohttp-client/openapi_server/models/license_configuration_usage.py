# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_type import ResourceType
from openapi_server import util


class LicenseConfigurationUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, resource_type: ResourceType=None, resource_status: str=None, resource_owner_id: str=None, association_time: datetime=None, consumed_licenses: int=None):
        """LicenseConfigurationUsage - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this LicenseConfigurationUsage.
        :param resource_type: The resource_type of this LicenseConfigurationUsage.
        :param resource_status: The resource_status of this LicenseConfigurationUsage.
        :param resource_owner_id: The resource_owner_id of this LicenseConfigurationUsage.
        :param association_time: The association_time of this LicenseConfigurationUsage.
        :param consumed_licenses: The consumed_licenses of this LicenseConfigurationUsage.
        """
        self.openapi_types = {
            'resource_arn': str,
            'resource_type': ResourceType,
            'resource_status': str,
            'resource_owner_id': str,
            'association_time': datetime,
            'consumed_licenses': int
        }

        self.attribute_map = {
            'resource_arn': 'ResourceArn',
            'resource_type': 'ResourceType',
            'resource_status': 'ResourceStatus',
            'resource_owner_id': 'ResourceOwnerId',
            'association_time': 'AssociationTime',
            'consumed_licenses': 'ConsumedLicenses'
        }

        self._resource_arn = resource_arn
        self._resource_type = resource_type
        self._resource_status = resource_status
        self._resource_owner_id = resource_owner_id
        self._association_time = association_time
        self._consumed_licenses = consumed_licenses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseConfigurationUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseConfigurationUsage of this LicenseConfigurationUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this LicenseConfigurationUsage.


        :return: The resource_arn of this LicenseConfigurationUsage.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this LicenseConfigurationUsage.


        :param resource_arn: The resource_arn of this LicenseConfigurationUsage.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def resource_type(self):
        """Gets the resource_type of this LicenseConfigurationUsage.


        :return: The resource_type of this LicenseConfigurationUsage.
        :rtype: ResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LicenseConfigurationUsage.


        :param resource_type: The resource_type of this LicenseConfigurationUsage.
        :type resource_type: ResourceType
        """

        self._resource_type = resource_type

    @property
    def resource_status(self):
        """Gets the resource_status of this LicenseConfigurationUsage.


        :return: The resource_status of this LicenseConfigurationUsage.
        :rtype: str
        """
        return self._resource_status

    @resource_status.setter
    def resource_status(self, resource_status):
        """Sets the resource_status of this LicenseConfigurationUsage.


        :param resource_status: The resource_status of this LicenseConfigurationUsage.
        :type resource_status: str
        """

        self._resource_status = resource_status

    @property
    def resource_owner_id(self):
        """Gets the resource_owner_id of this LicenseConfigurationUsage.


        :return: The resource_owner_id of this LicenseConfigurationUsage.
        :rtype: str
        """
        return self._resource_owner_id

    @resource_owner_id.setter
    def resource_owner_id(self, resource_owner_id):
        """Sets the resource_owner_id of this LicenseConfigurationUsage.


        :param resource_owner_id: The resource_owner_id of this LicenseConfigurationUsage.
        :type resource_owner_id: str
        """

        self._resource_owner_id = resource_owner_id

    @property
    def association_time(self):
        """Gets the association_time of this LicenseConfigurationUsage.


        :return: The association_time of this LicenseConfigurationUsage.
        :rtype: datetime
        """
        return self._association_time

    @association_time.setter
    def association_time(self, association_time):
        """Sets the association_time of this LicenseConfigurationUsage.


        :param association_time: The association_time of this LicenseConfigurationUsage.
        :type association_time: datetime
        """

        self._association_time = association_time

    @property
    def consumed_licenses(self):
        """Gets the consumed_licenses of this LicenseConfigurationUsage.


        :return: The consumed_licenses of this LicenseConfigurationUsage.
        :rtype: int
        """
        return self._consumed_licenses

    @consumed_licenses.setter
    def consumed_licenses(self, consumed_licenses):
        """Sets the consumed_licenses of this LicenseConfigurationUsage.


        :param consumed_licenses: The consumed_licenses of this LicenseConfigurationUsage.
        :type consumed_licenses: int
        """

        self._consumed_licenses = consumed_licenses
