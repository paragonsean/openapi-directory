# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_license_manager_report_generator_request_report_context import CreateLicenseManagerReportGeneratorRequestReportContext
from openapi_server.models.create_license_manager_report_generator_request_report_frequency import CreateLicenseManagerReportGeneratorRequestReportFrequency
from openapi_server import util


class CreateLicenseManagerReportGeneratorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_generator_name: str=None, type: List=None, report_context: CreateLicenseManagerReportGeneratorRequestReportContext=None, report_frequency: CreateLicenseManagerReportGeneratorRequestReportFrequency=None, client_token: str=None, description: str=None, tags: List=None):
        """CreateLicenseManagerReportGeneratorRequest - a model defined in OpenAPI

        :param report_generator_name: The report_generator_name of this CreateLicenseManagerReportGeneratorRequest.
        :param type: The type of this CreateLicenseManagerReportGeneratorRequest.
        :param report_context: The report_context of this CreateLicenseManagerReportGeneratorRequest.
        :param report_frequency: The report_frequency of this CreateLicenseManagerReportGeneratorRequest.
        :param client_token: The client_token of this CreateLicenseManagerReportGeneratorRequest.
        :param description: The description of this CreateLicenseManagerReportGeneratorRequest.
        :param tags: The tags of this CreateLicenseManagerReportGeneratorRequest.
        """
        self.openapi_types = {
            'report_generator_name': str,
            'type': List,
            'report_context': CreateLicenseManagerReportGeneratorRequestReportContext,
            'report_frequency': CreateLicenseManagerReportGeneratorRequestReportFrequency,
            'client_token': str,
            'description': str,
            'tags': List
        }

        self.attribute_map = {
            'report_generator_name': 'ReportGeneratorName',
            'type': 'Type',
            'report_context': 'ReportContext',
            'report_frequency': 'ReportFrequency',
            'client_token': 'ClientToken',
            'description': 'Description',
            'tags': 'Tags'
        }

        self._report_generator_name = report_generator_name
        self._type = type
        self._report_context = report_context
        self._report_frequency = report_frequency
        self._client_token = client_token
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLicenseManagerReportGeneratorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLicenseManagerReportGeneratorRequest of this CreateLicenseManagerReportGeneratorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_generator_name(self):
        """Gets the report_generator_name of this CreateLicenseManagerReportGeneratorRequest.


        :return: The report_generator_name of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: str
        """
        return self._report_generator_name

    @report_generator_name.setter
    def report_generator_name(self, report_generator_name):
        """Sets the report_generator_name of this CreateLicenseManagerReportGeneratorRequest.


        :param report_generator_name: The report_generator_name of this CreateLicenseManagerReportGeneratorRequest.
        :type report_generator_name: str
        """
        if report_generator_name is None:
            raise ValueError("Invalid value for `report_generator_name`, must not be `None`")

        self._report_generator_name = report_generator_name

    @property
    def type(self):
        """Gets the type of this CreateLicenseManagerReportGeneratorRequest.


        :return: The type of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: List
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateLicenseManagerReportGeneratorRequest.


        :param type: The type of this CreateLicenseManagerReportGeneratorRequest.
        :type type: List
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def report_context(self):
        """Gets the report_context of this CreateLicenseManagerReportGeneratorRequest.


        :return: The report_context of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: CreateLicenseManagerReportGeneratorRequestReportContext
        """
        return self._report_context

    @report_context.setter
    def report_context(self, report_context):
        """Sets the report_context of this CreateLicenseManagerReportGeneratorRequest.


        :param report_context: The report_context of this CreateLicenseManagerReportGeneratorRequest.
        :type report_context: CreateLicenseManagerReportGeneratorRequestReportContext
        """
        if report_context is None:
            raise ValueError("Invalid value for `report_context`, must not be `None`")

        self._report_context = report_context

    @property
    def report_frequency(self):
        """Gets the report_frequency of this CreateLicenseManagerReportGeneratorRequest.


        :return: The report_frequency of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: CreateLicenseManagerReportGeneratorRequestReportFrequency
        """
        return self._report_frequency

    @report_frequency.setter
    def report_frequency(self, report_frequency):
        """Sets the report_frequency of this CreateLicenseManagerReportGeneratorRequest.


        :param report_frequency: The report_frequency of this CreateLicenseManagerReportGeneratorRequest.
        :type report_frequency: CreateLicenseManagerReportGeneratorRequestReportFrequency
        """
        if report_frequency is None:
            raise ValueError("Invalid value for `report_frequency`, must not be `None`")

        self._report_frequency = report_frequency

    @property
    def client_token(self):
        """Gets the client_token of this CreateLicenseManagerReportGeneratorRequest.


        :return: The client_token of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateLicenseManagerReportGeneratorRequest.


        :param client_token: The client_token of this CreateLicenseManagerReportGeneratorRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateLicenseManagerReportGeneratorRequest.


        :return: The description of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLicenseManagerReportGeneratorRequest.


        :param description: The description of this CreateLicenseManagerReportGeneratorRequest.
        :type description: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateLicenseManagerReportGeneratorRequest.


        :return: The tags of this CreateLicenseManagerReportGeneratorRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLicenseManagerReportGeneratorRequest.


        :param tags: The tags of this CreateLicenseManagerReportGeneratorRequest.
        :type tags: List
        """

        self._tags = tags
