# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckInLicenseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_consumption_token: str=None, beneficiary: str=None):
        """CheckInLicenseRequest - a model defined in OpenAPI

        :param license_consumption_token: The license_consumption_token of this CheckInLicenseRequest.
        :param beneficiary: The beneficiary of this CheckInLicenseRequest.
        """
        self.openapi_types = {
            'license_consumption_token': str,
            'beneficiary': str
        }

        self.attribute_map = {
            'license_consumption_token': 'LicenseConsumptionToken',
            'beneficiary': 'Beneficiary'
        }

        self._license_consumption_token = license_consumption_token
        self._beneficiary = beneficiary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckInLicenseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckInLicenseRequest of this CheckInLicenseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_consumption_token(self):
        """Gets the license_consumption_token of this CheckInLicenseRequest.


        :return: The license_consumption_token of this CheckInLicenseRequest.
        :rtype: str
        """
        return self._license_consumption_token

    @license_consumption_token.setter
    def license_consumption_token(self, license_consumption_token):
        """Sets the license_consumption_token of this CheckInLicenseRequest.


        :param license_consumption_token: The license_consumption_token of this CheckInLicenseRequest.
        :type license_consumption_token: str
        """
        if license_consumption_token is None:
            raise ValueError("Invalid value for `license_consumption_token`, must not be `None`")

        self._license_consumption_token = license_consumption_token

    @property
    def beneficiary(self):
        """Gets the beneficiary of this CheckInLicenseRequest.


        :return: The beneficiary of this CheckInLicenseRequest.
        :rtype: str
        """
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, beneficiary):
        """Sets the beneficiary of this CheckInLicenseRequest.


        :param beneficiary: The beneficiary of this CheckInLicenseRequest.
        :type beneficiary: str
        """

        self._beneficiary = beneficiary
