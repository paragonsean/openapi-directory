# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entitlement_unit import EntitlementUnit
from openapi_server import util


class Entitlement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: str=None, max_count: int=None, overage: bool=None, unit: EntitlementUnit=None, allow_check_in: bool=None):
        """Entitlement - a model defined in OpenAPI

        :param name: The name of this Entitlement.
        :param value: The value of this Entitlement.
        :param max_count: The max_count of this Entitlement.
        :param overage: The overage of this Entitlement.
        :param unit: The unit of this Entitlement.
        :param allow_check_in: The allow_check_in of this Entitlement.
        """
        self.openapi_types = {
            'name': str,
            'value': str,
            'max_count': int,
            'overage': bool,
            'unit': EntitlementUnit,
            'allow_check_in': bool
        }

        self.attribute_map = {
            'name': 'Name',
            'value': 'Value',
            'max_count': 'MaxCount',
            'overage': 'Overage',
            'unit': 'Unit',
            'allow_check_in': 'AllowCheckIn'
        }

        self._name = name
        self._value = value
        self._max_count = max_count
        self._overage = overage
        self._unit = unit
        self._allow_check_in = allow_check_in

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entitlement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entitlement of this Entitlement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Entitlement.


        :return: The name of this Entitlement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Entitlement.


        :param name: The name of this Entitlement.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this Entitlement.


        :return: The value of this Entitlement.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Entitlement.


        :param value: The value of this Entitlement.
        :type value: str
        """

        self._value = value

    @property
    def max_count(self):
        """Gets the max_count of this Entitlement.


        :return: The max_count of this Entitlement.
        :rtype: int
        """
        return self._max_count

    @max_count.setter
    def max_count(self, max_count):
        """Sets the max_count of this Entitlement.


        :param max_count: The max_count of this Entitlement.
        :type max_count: int
        """

        self._max_count = max_count

    @property
    def overage(self):
        """Gets the overage of this Entitlement.


        :return: The overage of this Entitlement.
        :rtype: bool
        """
        return self._overage

    @overage.setter
    def overage(self, overage):
        """Sets the overage of this Entitlement.


        :param overage: The overage of this Entitlement.
        :type overage: bool
        """

        self._overage = overage

    @property
    def unit(self):
        """Gets the unit of this Entitlement.


        :return: The unit of this Entitlement.
        :rtype: EntitlementUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Entitlement.


        :param unit: The unit of this Entitlement.
        :type unit: EntitlementUnit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit

    @property
    def allow_check_in(self):
        """Gets the allow_check_in of this Entitlement.


        :return: The allow_check_in of this Entitlement.
        :rtype: bool
        """
        return self._allow_check_in

    @allow_check_in.setter
    def allow_check_in(self, allow_check_in):
        """Sets the allow_check_in of this Entitlement.


        :param allow_check_in: The allow_check_in of this Entitlement.
        :type allow_check_in: bool
        """

        self._allow_check_in = allow_check_in
