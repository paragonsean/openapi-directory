# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_configuration_arn: str=None, ami_association_scope: str=None):
        """LicenseSpecification - a model defined in OpenAPI

        :param license_configuration_arn: The license_configuration_arn of this LicenseSpecification.
        :param ami_association_scope: The ami_association_scope of this LicenseSpecification.
        """
        self.openapi_types = {
            'license_configuration_arn': str,
            'ami_association_scope': str
        }

        self.attribute_map = {
            'license_configuration_arn': 'LicenseConfigurationArn',
            'ami_association_scope': 'AmiAssociationScope'
        }

        self._license_configuration_arn = license_configuration_arn
        self._ami_association_scope = ami_association_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseSpecification of this LicenseSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_configuration_arn(self):
        """Gets the license_configuration_arn of this LicenseSpecification.


        :return: The license_configuration_arn of this LicenseSpecification.
        :rtype: str
        """
        return self._license_configuration_arn

    @license_configuration_arn.setter
    def license_configuration_arn(self, license_configuration_arn):
        """Sets the license_configuration_arn of this LicenseSpecification.


        :param license_configuration_arn: The license_configuration_arn of this LicenseSpecification.
        :type license_configuration_arn: str
        """
        if license_configuration_arn is None:
            raise ValueError("Invalid value for `license_configuration_arn`, must not be `None`")

        self._license_configuration_arn = license_configuration_arn

    @property
    def ami_association_scope(self):
        """Gets the ami_association_scope of this LicenseSpecification.


        :return: The ami_association_scope of this LicenseSpecification.
        :rtype: str
        """
        return self._ami_association_scope

    @ami_association_scope.setter
    def ami_association_scope(self, ami_association_scope):
        """Sets the ami_association_scope of this LicenseSpecification.


        :param ami_association_scope: The ami_association_scope of this LicenseSpecification.
        :type ami_association_scope: str
        """

        self._ami_association_scope = ami_association_scope
