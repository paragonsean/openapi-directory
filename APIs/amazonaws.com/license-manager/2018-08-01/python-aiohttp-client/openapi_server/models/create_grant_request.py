# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateGrantRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, grant_name: str=None, license_arn: str=None, principals: List=None, home_region: str=None, allowed_operations: List=None):
        """CreateGrantRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateGrantRequest.
        :param grant_name: The grant_name of this CreateGrantRequest.
        :param license_arn: The license_arn of this CreateGrantRequest.
        :param principals: The principals of this CreateGrantRequest.
        :param home_region: The home_region of this CreateGrantRequest.
        :param allowed_operations: The allowed_operations of this CreateGrantRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'grant_name': str,
            'license_arn': str,
            'principals': List,
            'home_region': str,
            'allowed_operations': List
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'grant_name': 'GrantName',
            'license_arn': 'LicenseArn',
            'principals': 'Principals',
            'home_region': 'HomeRegion',
            'allowed_operations': 'AllowedOperations'
        }

        self._client_token = client_token
        self._grant_name = grant_name
        self._license_arn = license_arn
        self._principals = principals
        self._home_region = home_region
        self._allowed_operations = allowed_operations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateGrantRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateGrantRequest of this CreateGrantRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateGrantRequest.


        :return: The client_token of this CreateGrantRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateGrantRequest.


        :param client_token: The client_token of this CreateGrantRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def grant_name(self):
        """Gets the grant_name of this CreateGrantRequest.


        :return: The grant_name of this CreateGrantRequest.
        :rtype: str
        """
        return self._grant_name

    @grant_name.setter
    def grant_name(self, grant_name):
        """Sets the grant_name of this CreateGrantRequest.


        :param grant_name: The grant_name of this CreateGrantRequest.
        :type grant_name: str
        """
        if grant_name is None:
            raise ValueError("Invalid value for `grant_name`, must not be `None`")

        self._grant_name = grant_name

    @property
    def license_arn(self):
        """Gets the license_arn of this CreateGrantRequest.


        :return: The license_arn of this CreateGrantRequest.
        :rtype: str
        """
        return self._license_arn

    @license_arn.setter
    def license_arn(self, license_arn):
        """Sets the license_arn of this CreateGrantRequest.


        :param license_arn: The license_arn of this CreateGrantRequest.
        :type license_arn: str
        """
        if license_arn is None:
            raise ValueError("Invalid value for `license_arn`, must not be `None`")

        self._license_arn = license_arn

    @property
    def principals(self):
        """Gets the principals of this CreateGrantRequest.


        :return: The principals of this CreateGrantRequest.
        :rtype: List
        """
        return self._principals

    @principals.setter
    def principals(self, principals):
        """Sets the principals of this CreateGrantRequest.


        :param principals: The principals of this CreateGrantRequest.
        :type principals: List
        """
        if principals is None:
            raise ValueError("Invalid value for `principals`, must not be `None`")

        self._principals = principals

    @property
    def home_region(self):
        """Gets the home_region of this CreateGrantRequest.


        :return: The home_region of this CreateGrantRequest.
        :rtype: str
        """
        return self._home_region

    @home_region.setter
    def home_region(self, home_region):
        """Sets the home_region of this CreateGrantRequest.


        :param home_region: The home_region of this CreateGrantRequest.
        :type home_region: str
        """
        if home_region is None:
            raise ValueError("Invalid value for `home_region`, must not be `None`")

        self._home_region = home_region

    @property
    def allowed_operations(self):
        """Gets the allowed_operations of this CreateGrantRequest.


        :return: The allowed_operations of this CreateGrantRequest.
        :rtype: List
        """
        return self._allowed_operations

    @allowed_operations.setter
    def allowed_operations(self, allowed_operations):
        """Sets the allowed_operations of this CreateGrantRequest.


        :param allowed_operations: The allowed_operations of this CreateGrantRequest.
        :type allowed_operations: List
        """
        if allowed_operations is None:
            raise ValueError("Invalid value for `allowed_operations`, must not be `None`")

        self._allowed_operations = allowed_operations
