/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext from './CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext';
import CreateLicenseConversionTaskForResourceRequestSourceLicenseContext from './CreateLicenseConversionTaskForResourceRequestSourceLicenseContext';

/**
 * The CreateLicenseConversionTaskForResourceRequest model module.
 * @module model/CreateLicenseConversionTaskForResourceRequest
 * @version 2018-08-01
 */
class CreateLicenseConversionTaskForResourceRequest {
    /**
     * Constructs a new <code>CreateLicenseConversionTaskForResourceRequest</code>.
     * @alias module:model/CreateLicenseConversionTaskForResourceRequest
     * @param resourceArn {String} 
     * @param sourceLicenseContext {module:model/CreateLicenseConversionTaskForResourceRequestSourceLicenseContext} 
     * @param destinationLicenseContext {module:model/CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext} 
     */
    constructor(resourceArn, sourceLicenseContext, destinationLicenseContext) { 
        
        CreateLicenseConversionTaskForResourceRequest.initialize(this, resourceArn, sourceLicenseContext, destinationLicenseContext);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceArn, sourceLicenseContext, destinationLicenseContext) { 
        obj['ResourceArn'] = resourceArn;
        obj['SourceLicenseContext'] = sourceLicenseContext;
        obj['DestinationLicenseContext'] = destinationLicenseContext;
    }

    /**
     * Constructs a <code>CreateLicenseConversionTaskForResourceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLicenseConversionTaskForResourceRequest} obj Optional instance to populate.
     * @return {module:model/CreateLicenseConversionTaskForResourceRequest} The populated <code>CreateLicenseConversionTaskForResourceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLicenseConversionTaskForResourceRequest();

            if (data.hasOwnProperty('ResourceArn')) {
                obj['ResourceArn'] = ApiClient.convertToType(data['ResourceArn'], 'String');
            }
            if (data.hasOwnProperty('SourceLicenseContext')) {
                obj['SourceLicenseContext'] = CreateLicenseConversionTaskForResourceRequestSourceLicenseContext.constructFromObject(data['SourceLicenseContext']);
            }
            if (data.hasOwnProperty('DestinationLicenseContext')) {
                obj['DestinationLicenseContext'] = CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext.constructFromObject(data['DestinationLicenseContext']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLicenseConversionTaskForResourceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLicenseConversionTaskForResourceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateLicenseConversionTaskForResourceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ResourceArn`
        if (data['ResourceArn']) { // data not null
          String.validateJSON(data['ResourceArn']);
        }
        // validate the optional field `SourceLicenseContext`
        if (data['SourceLicenseContext']) { // data not null
          CreateLicenseConversionTaskForResourceRequestSourceLicenseContext.validateJSON(data['SourceLicenseContext']);
        }
        // validate the optional field `DestinationLicenseContext`
        if (data['DestinationLicenseContext']) { // data not null
          CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext.validateJSON(data['DestinationLicenseContext']);
        }

        return true;
    }


}

CreateLicenseConversionTaskForResourceRequest.RequiredProperties = ["ResourceArn", "SourceLicenseContext", "DestinationLicenseContext"];

/**
 * @member {String} ResourceArn
 */
CreateLicenseConversionTaskForResourceRequest.prototype['ResourceArn'] = undefined;

/**
 * @member {module:model/CreateLicenseConversionTaskForResourceRequestSourceLicenseContext} SourceLicenseContext
 */
CreateLicenseConversionTaskForResourceRequest.prototype['SourceLicenseContext'] = undefined;

/**
 * @member {module:model/CreateLicenseConversionTaskForResourceRequestDestinationLicenseContext} DestinationLicenseContext
 */
CreateLicenseConversionTaskForResourceRequest.prototype['DestinationLicenseContext'] = undefined;






export default CreateLicenseConversionTaskForResourceRequest;

