/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntitlementDataUnit from './EntitlementDataUnit';

/**
 * The EntitlementUsage model module.
 * @module model/EntitlementUsage
 * @version 2018-08-01
 */
class EntitlementUsage {
    /**
     * Constructs a new <code>EntitlementUsage</code>.
     * Usage associated with an entitlement resource.
     * @alias module:model/EntitlementUsage
     * @param name {String} 
     * @param consumedValue {String} 
     * @param unit {module:model/EntitlementDataUnit} 
     */
    constructor(name, consumedValue, unit) { 
        
        EntitlementUsage.initialize(this, name, consumedValue, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, consumedValue, unit) { 
        obj['Name'] = name;
        obj['ConsumedValue'] = consumedValue;
        obj['Unit'] = unit;
    }

    /**
     * Constructs a <code>EntitlementUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntitlementUsage} obj Optional instance to populate.
     * @return {module:model/EntitlementUsage} The populated <code>EntitlementUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntitlementUsage();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ConsumedValue')) {
                obj['ConsumedValue'] = ApiClient.convertToType(data['ConsumedValue'], 'String');
            }
            if (data.hasOwnProperty('MaxCount')) {
                obj['MaxCount'] = ApiClient.convertToType(data['MaxCount'], 'String');
            }
            if (data.hasOwnProperty('Unit')) {
                obj['Unit'] = ApiClient.convertToType(data['Unit'], EntitlementDataUnit);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntitlementUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntitlementUsage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntitlementUsage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `ConsumedValue`
        if (data['ConsumedValue']) { // data not null
          String.validateJSON(data['ConsumedValue']);
        }
        // validate the optional field `MaxCount`
        if (data['MaxCount']) { // data not null
          String.validateJSON(data['MaxCount']);
        }
        // validate the optional field `Unit`
        if (data['Unit']) { // data not null
          EntitlementDataUnit.validateJSON(data['Unit']);
        }

        return true;
    }


}

EntitlementUsage.RequiredProperties = ["Name", "ConsumedValue", "Unit"];

/**
 * @member {String} Name
 */
EntitlementUsage.prototype['Name'] = undefined;

/**
 * @member {String} ConsumedValue
 */
EntitlementUsage.prototype['ConsumedValue'] = undefined;

/**
 * @member {String} MaxCount
 */
EntitlementUsage.prototype['MaxCount'] = undefined;

/**
 * @member {module:model/EntitlementDataUnit} Unit
 */
EntitlementUsage.prototype['Unit'] = undefined;






export default EntitlementUsage;

