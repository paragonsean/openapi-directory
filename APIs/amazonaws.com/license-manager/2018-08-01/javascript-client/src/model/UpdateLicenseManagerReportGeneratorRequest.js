/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateLicenseManagerReportGeneratorRequestReportContext from './UpdateLicenseManagerReportGeneratorRequestReportContext';
import UpdateLicenseManagerReportGeneratorRequestReportFrequency from './UpdateLicenseManagerReportGeneratorRequestReportFrequency';

/**
 * The UpdateLicenseManagerReportGeneratorRequest model module.
 * @module model/UpdateLicenseManagerReportGeneratorRequest
 * @version 2018-08-01
 */
class UpdateLicenseManagerReportGeneratorRequest {
    /**
     * Constructs a new <code>UpdateLicenseManagerReportGeneratorRequest</code>.
     * @alias module:model/UpdateLicenseManagerReportGeneratorRequest
     * @param licenseManagerReportGeneratorArn {String} 
     * @param reportGeneratorName {String} 
     * @param type {Array} 
     * @param reportContext {module:model/UpdateLicenseManagerReportGeneratorRequestReportContext} 
     * @param reportFrequency {module:model/UpdateLicenseManagerReportGeneratorRequestReportFrequency} 
     * @param clientToken {String} 
     */
    constructor(licenseManagerReportGeneratorArn, reportGeneratorName, type, reportContext, reportFrequency, clientToken) { 
        
        UpdateLicenseManagerReportGeneratorRequest.initialize(this, licenseManagerReportGeneratorArn, reportGeneratorName, type, reportContext, reportFrequency, clientToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, licenseManagerReportGeneratorArn, reportGeneratorName, type, reportContext, reportFrequency, clientToken) { 
        obj['LicenseManagerReportGeneratorArn'] = licenseManagerReportGeneratorArn;
        obj['ReportGeneratorName'] = reportGeneratorName;
        obj['Type'] = type;
        obj['ReportContext'] = reportContext;
        obj['ReportFrequency'] = reportFrequency;
        obj['ClientToken'] = clientToken;
    }

    /**
     * Constructs a <code>UpdateLicenseManagerReportGeneratorRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateLicenseManagerReportGeneratorRequest} obj Optional instance to populate.
     * @return {module:model/UpdateLicenseManagerReportGeneratorRequest} The populated <code>UpdateLicenseManagerReportGeneratorRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateLicenseManagerReportGeneratorRequest();

            if (data.hasOwnProperty('LicenseManagerReportGeneratorArn')) {
                obj['LicenseManagerReportGeneratorArn'] = ApiClient.convertToType(data['LicenseManagerReportGeneratorArn'], 'String');
            }
            if (data.hasOwnProperty('ReportGeneratorName')) {
                obj['ReportGeneratorName'] = ApiClient.convertToType(data['ReportGeneratorName'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], Array);
            }
            if (data.hasOwnProperty('ReportContext')) {
                obj['ReportContext'] = UpdateLicenseManagerReportGeneratorRequestReportContext.constructFromObject(data['ReportContext']);
            }
            if (data.hasOwnProperty('ReportFrequency')) {
                obj['ReportFrequency'] = UpdateLicenseManagerReportGeneratorRequestReportFrequency.constructFromObject(data['ReportFrequency']);
            }
            if (data.hasOwnProperty('ClientToken')) {
                obj['ClientToken'] = ApiClient.convertToType(data['ClientToken'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateLicenseManagerReportGeneratorRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateLicenseManagerReportGeneratorRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateLicenseManagerReportGeneratorRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LicenseManagerReportGeneratorArn`
        if (data['LicenseManagerReportGeneratorArn']) { // data not null
          String.validateJSON(data['LicenseManagerReportGeneratorArn']);
        }
        // validate the optional field `ReportGeneratorName`
        if (data['ReportGeneratorName']) { // data not null
          String.validateJSON(data['ReportGeneratorName']);
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          Array.validateJSON(data['Type']);
        }
        // validate the optional field `ReportContext`
        if (data['ReportContext']) { // data not null
          UpdateLicenseManagerReportGeneratorRequestReportContext.validateJSON(data['ReportContext']);
        }
        // validate the optional field `ReportFrequency`
        if (data['ReportFrequency']) { // data not null
          UpdateLicenseManagerReportGeneratorRequestReportFrequency.validateJSON(data['ReportFrequency']);
        }
        // validate the optional field `ClientToken`
        if (data['ClientToken']) { // data not null
          String.validateJSON(data['ClientToken']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }

        return true;
    }


}

UpdateLicenseManagerReportGeneratorRequest.RequiredProperties = ["LicenseManagerReportGeneratorArn", "ReportGeneratorName", "Type", "ReportContext", "ReportFrequency", "ClientToken"];

/**
 * @member {String} LicenseManagerReportGeneratorArn
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['LicenseManagerReportGeneratorArn'] = undefined;

/**
 * @member {String} ReportGeneratorName
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['ReportGeneratorName'] = undefined;

/**
 * @member {Array} Type
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['Type'] = undefined;

/**
 * @member {module:model/UpdateLicenseManagerReportGeneratorRequestReportContext} ReportContext
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['ReportContext'] = undefined;

/**
 * @member {module:model/UpdateLicenseManagerReportGeneratorRequestReportFrequency} ReportFrequency
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['ReportFrequency'] = undefined;

/**
 * @member {String} ClientToken
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['ClientToken'] = undefined;

/**
 * @member {String} Description
 */
UpdateLicenseManagerReportGeneratorRequest.prototype['Description'] = undefined;






export default UpdateLicenseManagerReportGeneratorRequest;

