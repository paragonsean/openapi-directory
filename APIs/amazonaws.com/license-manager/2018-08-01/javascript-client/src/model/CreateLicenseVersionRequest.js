/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateLicenseRequestConsumptionConfiguration from './CreateLicenseRequestConsumptionConfiguration';
import CreateLicenseRequestIssuer from './CreateLicenseRequestIssuer';
import CreateLicenseRequestValidity from './CreateLicenseRequestValidity';
import LicenseStatus from './LicenseStatus';

/**
 * The CreateLicenseVersionRequest model module.
 * @module model/CreateLicenseVersionRequest
 * @version 2018-08-01
 */
class CreateLicenseVersionRequest {
    /**
     * Constructs a new <code>CreateLicenseVersionRequest</code>.
     * @alias module:model/CreateLicenseVersionRequest
     * @param licenseArn {String} 
     * @param licenseName {String} 
     * @param productName {String} 
     * @param issuer {module:model/CreateLicenseRequestIssuer} 
     * @param homeRegion {String} 
     * @param validity {module:model/CreateLicenseRequestValidity} 
     * @param entitlements {Array} 
     * @param consumptionConfiguration {module:model/CreateLicenseRequestConsumptionConfiguration} 
     * @param status {module:model/LicenseStatus} 
     * @param clientToken {String} 
     */
    constructor(licenseArn, licenseName, productName, issuer, homeRegion, validity, entitlements, consumptionConfiguration, status, clientToken) { 
        
        CreateLicenseVersionRequest.initialize(this, licenseArn, licenseName, productName, issuer, homeRegion, validity, entitlements, consumptionConfiguration, status, clientToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, licenseArn, licenseName, productName, issuer, homeRegion, validity, entitlements, consumptionConfiguration, status, clientToken) { 
        obj['LicenseArn'] = licenseArn;
        obj['LicenseName'] = licenseName;
        obj['ProductName'] = productName;
        obj['Issuer'] = issuer;
        obj['HomeRegion'] = homeRegion;
        obj['Validity'] = validity;
        obj['Entitlements'] = entitlements;
        obj['ConsumptionConfiguration'] = consumptionConfiguration;
        obj['Status'] = status;
        obj['ClientToken'] = clientToken;
    }

    /**
     * Constructs a <code>CreateLicenseVersionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLicenseVersionRequest} obj Optional instance to populate.
     * @return {module:model/CreateLicenseVersionRequest} The populated <code>CreateLicenseVersionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLicenseVersionRequest();

            if (data.hasOwnProperty('LicenseArn')) {
                obj['LicenseArn'] = ApiClient.convertToType(data['LicenseArn'], 'String');
            }
            if (data.hasOwnProperty('LicenseName')) {
                obj['LicenseName'] = ApiClient.convertToType(data['LicenseName'], 'String');
            }
            if (data.hasOwnProperty('ProductName')) {
                obj['ProductName'] = ApiClient.convertToType(data['ProductName'], 'String');
            }
            if (data.hasOwnProperty('Issuer')) {
                obj['Issuer'] = CreateLicenseRequestIssuer.constructFromObject(data['Issuer']);
            }
            if (data.hasOwnProperty('HomeRegion')) {
                obj['HomeRegion'] = ApiClient.convertToType(data['HomeRegion'], 'String');
            }
            if (data.hasOwnProperty('Validity')) {
                obj['Validity'] = CreateLicenseRequestValidity.constructFromObject(data['Validity']);
            }
            if (data.hasOwnProperty('LicenseMetadata')) {
                obj['LicenseMetadata'] = ApiClient.convertToType(data['LicenseMetadata'], Array);
            }
            if (data.hasOwnProperty('Entitlements')) {
                obj['Entitlements'] = ApiClient.convertToType(data['Entitlements'], Array);
            }
            if (data.hasOwnProperty('ConsumptionConfiguration')) {
                obj['ConsumptionConfiguration'] = CreateLicenseRequestConsumptionConfiguration.constructFromObject(data['ConsumptionConfiguration']);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], LicenseStatus);
            }
            if (data.hasOwnProperty('ClientToken')) {
                obj['ClientToken'] = ApiClient.convertToType(data['ClientToken'], 'String');
            }
            if (data.hasOwnProperty('SourceVersion')) {
                obj['SourceVersion'] = ApiClient.convertToType(data['SourceVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLicenseVersionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLicenseVersionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateLicenseVersionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LicenseArn`
        if (data['LicenseArn']) { // data not null
          String.validateJSON(data['LicenseArn']);
        }
        // validate the optional field `LicenseName`
        if (data['LicenseName']) { // data not null
          String.validateJSON(data['LicenseName']);
        }
        // validate the optional field `ProductName`
        if (data['ProductName']) { // data not null
          String.validateJSON(data['ProductName']);
        }
        // validate the optional field `Issuer`
        if (data['Issuer']) { // data not null
          CreateLicenseRequestIssuer.validateJSON(data['Issuer']);
        }
        // validate the optional field `HomeRegion`
        if (data['HomeRegion']) { // data not null
          String.validateJSON(data['HomeRegion']);
        }
        // validate the optional field `Validity`
        if (data['Validity']) { // data not null
          CreateLicenseRequestValidity.validateJSON(data['Validity']);
        }
        // validate the optional field `LicenseMetadata`
        if (data['LicenseMetadata']) { // data not null
          Array.validateJSON(data['LicenseMetadata']);
        }
        // validate the optional field `Entitlements`
        if (data['Entitlements']) { // data not null
          Array.validateJSON(data['Entitlements']);
        }
        // validate the optional field `ConsumptionConfiguration`
        if (data['ConsumptionConfiguration']) { // data not null
          CreateLicenseRequestConsumptionConfiguration.validateJSON(data['ConsumptionConfiguration']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          LicenseStatus.validateJSON(data['Status']);
        }
        // validate the optional field `ClientToken`
        if (data['ClientToken']) { // data not null
          String.validateJSON(data['ClientToken']);
        }
        // validate the optional field `SourceVersion`
        if (data['SourceVersion']) { // data not null
          String.validateJSON(data['SourceVersion']);
        }

        return true;
    }


}

CreateLicenseVersionRequest.RequiredProperties = ["LicenseArn", "LicenseName", "ProductName", "Issuer", "HomeRegion", "Validity", "Entitlements", "ConsumptionConfiguration", "Status", "ClientToken"];

/**
 * @member {String} LicenseArn
 */
CreateLicenseVersionRequest.prototype['LicenseArn'] = undefined;

/**
 * @member {String} LicenseName
 */
CreateLicenseVersionRequest.prototype['LicenseName'] = undefined;

/**
 * @member {String} ProductName
 */
CreateLicenseVersionRequest.prototype['ProductName'] = undefined;

/**
 * @member {module:model/CreateLicenseRequestIssuer} Issuer
 */
CreateLicenseVersionRequest.prototype['Issuer'] = undefined;

/**
 * @member {String} HomeRegion
 */
CreateLicenseVersionRequest.prototype['HomeRegion'] = undefined;

/**
 * @member {module:model/CreateLicenseRequestValidity} Validity
 */
CreateLicenseVersionRequest.prototype['Validity'] = undefined;

/**
 * @member {Array} LicenseMetadata
 */
CreateLicenseVersionRequest.prototype['LicenseMetadata'] = undefined;

/**
 * @member {Array} Entitlements
 */
CreateLicenseVersionRequest.prototype['Entitlements'] = undefined;

/**
 * @member {module:model/CreateLicenseRequestConsumptionConfiguration} ConsumptionConfiguration
 */
CreateLicenseVersionRequest.prototype['ConsumptionConfiguration'] = undefined;

/**
 * @member {module:model/LicenseStatus} Status
 */
CreateLicenseVersionRequest.prototype['Status'] = undefined;

/**
 * @member {String} ClientToken
 */
CreateLicenseVersionRequest.prototype['ClientToken'] = undefined;

/**
 * @member {String} SourceVersion
 */
CreateLicenseVersionRequest.prototype['SourceVersion'] = undefined;






export default CreateLicenseVersionRequest;

