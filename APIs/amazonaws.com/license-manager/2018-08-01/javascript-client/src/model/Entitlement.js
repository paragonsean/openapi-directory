/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntitlementUnit from './EntitlementUnit';

/**
 * The Entitlement model module.
 * @module model/Entitlement
 * @version 2018-08-01
 */
class Entitlement {
    /**
     * Constructs a new <code>Entitlement</code>.
     * Describes a resource entitled for use with a license.
     * @alias module:model/Entitlement
     * @param name {String} 
     * @param unit {module:model/EntitlementUnit} 
     */
    constructor(name, unit) { 
        
        Entitlement.initialize(this, name, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, unit) { 
        obj['Name'] = name;
        obj['Unit'] = unit;
    }

    /**
     * Constructs a <code>Entitlement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Entitlement} obj Optional instance to populate.
     * @return {module:model/Entitlement} The populated <code>Entitlement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Entitlement();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
            if (data.hasOwnProperty('MaxCount')) {
                obj['MaxCount'] = ApiClient.convertToType(data['MaxCount'], 'Number');
            }
            if (data.hasOwnProperty('Overage')) {
                obj['Overage'] = ApiClient.convertToType(data['Overage'], 'Boolean');
            }
            if (data.hasOwnProperty('Unit')) {
                obj['Unit'] = ApiClient.convertToType(data['Unit'], EntitlementUnit);
            }
            if (data.hasOwnProperty('AllowCheckIn')) {
                obj['AllowCheckIn'] = ApiClient.convertToType(data['AllowCheckIn'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Entitlement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Entitlement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Entitlement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          String.validateJSON(data['Value']);
        }
        // validate the optional field `MaxCount`
        if (data['MaxCount']) { // data not null
          Number.validateJSON(data['MaxCount']);
        }
        // validate the optional field `Overage`
        if (data['Overage']) { // data not null
          Boolean.validateJSON(data['Overage']);
        }
        // validate the optional field `Unit`
        if (data['Unit']) { // data not null
          EntitlementUnit.validateJSON(data['Unit']);
        }
        // validate the optional field `AllowCheckIn`
        if (data['AllowCheckIn']) { // data not null
          Boolean.validateJSON(data['AllowCheckIn']);
        }

        return true;
    }


}

Entitlement.RequiredProperties = ["Name", "Unit"];

/**
 * @member {String} Name
 */
Entitlement.prototype['Name'] = undefined;

/**
 * @member {String} Value
 */
Entitlement.prototype['Value'] = undefined;

/**
 * @member {Number} MaxCount
 */
Entitlement.prototype['MaxCount'] = undefined;

/**
 * @member {Boolean} Overage
 */
Entitlement.prototype['Overage'] = undefined;

/**
 * @member {module:model/EntitlementUnit} Unit
 */
Entitlement.prototype['Unit'] = undefined;

/**
 * @member {Boolean} AllowCheckIn
 */
Entitlement.prototype['AllowCheckIn'] = undefined;






export default Entitlement;

