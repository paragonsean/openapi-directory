/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductInformation model module.
 * @module model/ProductInformation
 * @version 2018-08-01
 */
class ProductInformation {
    /**
     * Constructs a new <code>ProductInformation</code>.
     * Describes product information for a license configuration.
     * @alias module:model/ProductInformation
     * @param resourceType {String} 
     * @param productInformationFilterList {Array} 
     */
    constructor(resourceType, productInformationFilterList) { 
        
        ProductInformation.initialize(this, resourceType, productInformationFilterList);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceType, productInformationFilterList) { 
        obj['ResourceType'] = resourceType;
        obj['ProductInformationFilterList'] = productInformationFilterList;
    }

    /**
     * Constructs a <code>ProductInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductInformation} obj Optional instance to populate.
     * @return {module:model/ProductInformation} The populated <code>ProductInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductInformation();

            if (data.hasOwnProperty('ResourceType')) {
                obj['ResourceType'] = ApiClient.convertToType(data['ResourceType'], 'String');
            }
            if (data.hasOwnProperty('ProductInformationFilterList')) {
                obj['ProductInformationFilterList'] = ApiClient.convertToType(data['ProductInformationFilterList'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ResourceType`
        if (data['ResourceType']) { // data not null
          String.validateJSON(data['ResourceType']);
        }
        // validate the optional field `ProductInformationFilterList`
        if (data['ProductInformationFilterList']) { // data not null
          Array.validateJSON(data['ProductInformationFilterList']);
        }

        return true;
    }


}

ProductInformation.RequiredProperties = ["ResourceType", "ProductInformationFilterList"];

/**
 * @member {String} ResourceType
 */
ProductInformation.prototype['ResourceType'] = undefined;

/**
 * @member {Array} ProductInformationFilterList
 */
ProductInformation.prototype['ProductInformationFilterList'] = undefined;






export default ProductInformation;

