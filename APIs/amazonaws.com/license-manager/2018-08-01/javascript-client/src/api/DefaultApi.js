/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptGrantRequest from '../model/AcceptGrantRequest';
import AcceptGrantResponse from '../model/AcceptGrantResponse';
import CheckInLicenseRequest from '../model/CheckInLicenseRequest';
import CheckoutBorrowLicenseRequest from '../model/CheckoutBorrowLicenseRequest';
import CheckoutBorrowLicenseResponse from '../model/CheckoutBorrowLicenseResponse';
import CheckoutLicenseRequest from '../model/CheckoutLicenseRequest';
import CheckoutLicenseResponse from '../model/CheckoutLicenseResponse';
import CreateGrantRequest from '../model/CreateGrantRequest';
import CreateGrantResponse from '../model/CreateGrantResponse';
import CreateGrantVersionRequest from '../model/CreateGrantVersionRequest';
import CreateGrantVersionResponse from '../model/CreateGrantVersionResponse';
import CreateLicenseConfigurationRequest from '../model/CreateLicenseConfigurationRequest';
import CreateLicenseConfigurationResponse from '../model/CreateLicenseConfigurationResponse';
import CreateLicenseConversionTaskForResourceRequest from '../model/CreateLicenseConversionTaskForResourceRequest';
import CreateLicenseConversionTaskForResourceResponse from '../model/CreateLicenseConversionTaskForResourceResponse';
import CreateLicenseManagerReportGeneratorRequest from '../model/CreateLicenseManagerReportGeneratorRequest';
import CreateLicenseManagerReportGeneratorResponse from '../model/CreateLicenseManagerReportGeneratorResponse';
import CreateLicenseRequest from '../model/CreateLicenseRequest';
import CreateLicenseResponse from '../model/CreateLicenseResponse';
import CreateLicenseVersionRequest from '../model/CreateLicenseVersionRequest';
import CreateLicenseVersionResponse from '../model/CreateLicenseVersionResponse';
import CreateTokenRequest from '../model/CreateTokenRequest';
import CreateTokenResponse from '../model/CreateTokenResponse';
import DeleteGrantRequest from '../model/DeleteGrantRequest';
import DeleteGrantResponse from '../model/DeleteGrantResponse';
import DeleteLicenseConfigurationRequest from '../model/DeleteLicenseConfigurationRequest';
import DeleteLicenseManagerReportGeneratorRequest from '../model/DeleteLicenseManagerReportGeneratorRequest';
import DeleteLicenseRequest from '../model/DeleteLicenseRequest';
import DeleteLicenseResponse from '../model/DeleteLicenseResponse';
import DeleteTokenRequest from '../model/DeleteTokenRequest';
import ExtendLicenseConsumptionRequest from '../model/ExtendLicenseConsumptionRequest';
import ExtendLicenseConsumptionResponse from '../model/ExtendLicenseConsumptionResponse';
import GetAccessTokenRequest from '../model/GetAccessTokenRequest';
import GetAccessTokenResponse from '../model/GetAccessTokenResponse';
import GetGrantRequest from '../model/GetGrantRequest';
import GetGrantResponse from '../model/GetGrantResponse';
import GetLicenseConfigurationRequest from '../model/GetLicenseConfigurationRequest';
import GetLicenseConfigurationResponse from '../model/GetLicenseConfigurationResponse';
import GetLicenseConversionTaskRequest from '../model/GetLicenseConversionTaskRequest';
import GetLicenseConversionTaskResponse from '../model/GetLicenseConversionTaskResponse';
import GetLicenseManagerReportGeneratorRequest from '../model/GetLicenseManagerReportGeneratorRequest';
import GetLicenseManagerReportGeneratorResponse from '../model/GetLicenseManagerReportGeneratorResponse';
import GetLicenseRequest from '../model/GetLicenseRequest';
import GetLicenseResponse from '../model/GetLicenseResponse';
import GetLicenseUsageRequest from '../model/GetLicenseUsageRequest';
import GetLicenseUsageResponse from '../model/GetLicenseUsageResponse';
import GetServiceSettingsResponse from '../model/GetServiceSettingsResponse';
import ListAssociationsForLicenseConfigurationRequest from '../model/ListAssociationsForLicenseConfigurationRequest';
import ListAssociationsForLicenseConfigurationResponse from '../model/ListAssociationsForLicenseConfigurationResponse';
import ListDistributedGrantsRequest from '../model/ListDistributedGrantsRequest';
import ListDistributedGrantsResponse from '../model/ListDistributedGrantsResponse';
import ListFailuresForLicenseConfigurationOperationsRequest from '../model/ListFailuresForLicenseConfigurationOperationsRequest';
import ListFailuresForLicenseConfigurationOperationsResponse from '../model/ListFailuresForLicenseConfigurationOperationsResponse';
import ListLicenseConfigurationsRequest from '../model/ListLicenseConfigurationsRequest';
import ListLicenseConfigurationsResponse from '../model/ListLicenseConfigurationsResponse';
import ListLicenseConversionTasksRequest from '../model/ListLicenseConversionTasksRequest';
import ListLicenseConversionTasksResponse from '../model/ListLicenseConversionTasksResponse';
import ListLicenseManagerReportGeneratorsRequest from '../model/ListLicenseManagerReportGeneratorsRequest';
import ListLicenseManagerReportGeneratorsResponse from '../model/ListLicenseManagerReportGeneratorsResponse';
import ListLicenseSpecificationsForResourceRequest from '../model/ListLicenseSpecificationsForResourceRequest';
import ListLicenseSpecificationsForResourceResponse from '../model/ListLicenseSpecificationsForResourceResponse';
import ListLicenseVersionsRequest from '../model/ListLicenseVersionsRequest';
import ListLicenseVersionsResponse from '../model/ListLicenseVersionsResponse';
import ListLicensesRequest from '../model/ListLicensesRequest';
import ListLicensesResponse from '../model/ListLicensesResponse';
import ListReceivedGrantsForOrganizationRequest from '../model/ListReceivedGrantsForOrganizationRequest';
import ListReceivedGrantsForOrganizationResponse from '../model/ListReceivedGrantsForOrganizationResponse';
import ListReceivedGrantsRequest from '../model/ListReceivedGrantsRequest';
import ListReceivedGrantsResponse from '../model/ListReceivedGrantsResponse';
import ListReceivedLicensesForOrganizationRequest from '../model/ListReceivedLicensesForOrganizationRequest';
import ListReceivedLicensesForOrganizationResponse from '../model/ListReceivedLicensesForOrganizationResponse';
import ListReceivedLicensesRequest from '../model/ListReceivedLicensesRequest';
import ListReceivedLicensesResponse from '../model/ListReceivedLicensesResponse';
import ListResourceInventoryRequest from '../model/ListResourceInventoryRequest';
import ListResourceInventoryResponse from '../model/ListResourceInventoryResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTokensRequest from '../model/ListTokensRequest';
import ListTokensResponse from '../model/ListTokensResponse';
import ListUsageForLicenseConfigurationRequest from '../model/ListUsageForLicenseConfigurationRequest';
import ListUsageForLicenseConfigurationResponse from '../model/ListUsageForLicenseConfigurationResponse';
import RejectGrantRequest from '../model/RejectGrantRequest';
import RejectGrantResponse from '../model/RejectGrantResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateLicenseConfigurationRequest from '../model/UpdateLicenseConfigurationRequest';
import UpdateLicenseManagerReportGeneratorRequest from '../model/UpdateLicenseManagerReportGeneratorRequest';
import UpdateLicenseSpecificationsForResourceRequest from '../model/UpdateLicenseSpecificationsForResourceRequest';
import UpdateServiceSettingsRequest from '../model/UpdateServiceSettingsRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-08-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptGrant operation.
     * @callback module:api/DefaultApi~acceptGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptGrantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts the specified grant.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AcceptGrantRequest} acceptGrantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptGrantResponse}
     */
    acceptGrant(xAmzTarget, acceptGrantRequest, opts, callback) {
      opts = opts || {};
      let postBody = acceptGrantRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling acceptGrant");
      }
      // verify the required parameter 'acceptGrantRequest' is set
      if (acceptGrantRequest === undefined || acceptGrantRequest === null) {
        throw new Error("Missing the required parameter 'acceptGrantRequest' when calling acceptGrant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AcceptGrantResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.AcceptGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkInLicense operation.
     * @callback module:api/DefaultApi~checkInLicenseCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks in the specified license. Check in a license when it is no longer in use.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CheckInLicenseRequest} checkInLicenseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~checkInLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    checkInLicense(xAmzTarget, checkInLicenseRequest, opts, callback) {
      opts = opts || {};
      let postBody = checkInLicenseRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling checkInLicense");
      }
      // verify the required parameter 'checkInLicenseRequest' is set
      if (checkInLicenseRequest === undefined || checkInLicenseRequest === null) {
        throw new Error("Missing the required parameter 'checkInLicenseRequest' when calling checkInLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CheckInLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkoutBorrowLicense operation.
     * @callback module:api/DefaultApi~checkoutBorrowLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckoutBorrowLicenseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks out the specified license for offline use.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CheckoutBorrowLicenseRequest} checkoutBorrowLicenseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~checkoutBorrowLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckoutBorrowLicenseResponse}
     */
    checkoutBorrowLicense(xAmzTarget, checkoutBorrowLicenseRequest, opts, callback) {
      opts = opts || {};
      let postBody = checkoutBorrowLicenseRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling checkoutBorrowLicense");
      }
      // verify the required parameter 'checkoutBorrowLicenseRequest' is set
      if (checkoutBorrowLicenseRequest === undefined || checkoutBorrowLicenseRequest === null) {
        throw new Error("Missing the required parameter 'checkoutBorrowLicenseRequest' when calling checkoutBorrowLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckoutBorrowLicenseResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CheckoutBorrowLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkoutLicense operation.
     * @callback module:api/DefaultApi~checkoutLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckoutLicenseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Checks out the specified license.</p> <note> <p>If the account that created the license is the same that is performing the check out, you must specify the account as the beneficiary.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CheckoutLicenseRequest} checkoutLicenseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~checkoutLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckoutLicenseResponse}
     */
    checkoutLicense(xAmzTarget, checkoutLicenseRequest, opts, callback) {
      opts = opts || {};
      let postBody = checkoutLicenseRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling checkoutLicense");
      }
      // verify the required parameter 'checkoutLicenseRequest' is set
      if (checkoutLicenseRequest === undefined || checkoutLicenseRequest === null) {
        throw new Error("Missing the required parameter 'checkoutLicenseRequest' when calling checkoutLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckoutLicenseResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CheckoutLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGrant operation.
     * @callback module:api/DefaultApi~createGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGrantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a grant for the specified license. A grant shares the use of license entitlements with a specific Amazon Web Services account, an organization, or an organizational unit (OU). For more information, see <a href=\"https://docs.aws.amazon.com/license-manager/latest/userguide/granted-licenses.html\">Granted licenses in License Manager</a> in the <i>License Manager User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateGrantRequest} createGrantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGrantResponse}
     */
    createGrant(xAmzTarget, createGrantRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGrantRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createGrant");
      }
      // verify the required parameter 'createGrantRequest' is set
      if (createGrantRequest === undefined || createGrantRequest === null) {
        throw new Error("Missing the required parameter 'createGrantRequest' when calling createGrant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGrantResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGrantVersion operation.
     * @callback module:api/DefaultApi~createGrantVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateGrantVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new version of the specified grant. For more information, see <a href=\"https://docs.aws.amazon.com/license-manager/latest/userguide/granted-licenses.html\">Granted licenses in License Manager</a> in the <i>License Manager User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateGrantVersionRequest} createGrantVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createGrantVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateGrantVersionResponse}
     */
    createGrantVersion(xAmzTarget, createGrantVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGrantVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createGrantVersion");
      }
      // verify the required parameter 'createGrantVersionRequest' is set
      if (createGrantVersionRequest === undefined || createGrantVersionRequest === null) {
        throw new Error("Missing the required parameter 'createGrantVersionRequest' when calling createGrantVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGrantVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateGrantVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLicense operation.
     * @callback module:api/DefaultApi~createLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLicenseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLicenseRequest} createLicenseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLicenseResponse}
     */
    createLicense(xAmzTarget, createLicenseRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLicenseRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLicense");
      }
      // verify the required parameter 'createLicenseRequest' is set
      if (createLicenseRequest === undefined || createLicenseRequest === null) {
        throw new Error("Missing the required parameter 'createLicenseRequest' when calling createLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLicenseResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLicenseConfiguration operation.
     * @callback module:api/DefaultApi~createLicenseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLicenseConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a license configuration.</p> <p>A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), license affinity to host (how long a license must be associated with a host), and the number of licenses purchased and used.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLicenseConfigurationRequest} createLicenseConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLicenseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLicenseConfigurationResponse}
     */
    createLicenseConfiguration(xAmzTarget, createLicenseConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLicenseConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLicenseConfiguration");
      }
      // verify the required parameter 'createLicenseConfigurationRequest' is set
      if (createLicenseConfigurationRequest === undefined || createLicenseConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createLicenseConfigurationRequest' when calling createLicenseConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLicenseConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateLicenseConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLicenseConversionTaskForResource operation.
     * @callback module:api/DefaultApi~createLicenseConversionTaskForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLicenseConversionTaskForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new license conversion task.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLicenseConversionTaskForResourceRequest} createLicenseConversionTaskForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLicenseConversionTaskForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLicenseConversionTaskForResourceResponse}
     */
    createLicenseConversionTaskForResource(xAmzTarget, createLicenseConversionTaskForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLicenseConversionTaskForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLicenseConversionTaskForResource");
      }
      // verify the required parameter 'createLicenseConversionTaskForResourceRequest' is set
      if (createLicenseConversionTaskForResourceRequest === undefined || createLicenseConversionTaskForResourceRequest === null) {
        throw new Error("Missing the required parameter 'createLicenseConversionTaskForResourceRequest' when calling createLicenseConversionTaskForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLicenseConversionTaskForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateLicenseConversionTaskForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLicenseManagerReportGenerator operation.
     * @callback module:api/DefaultApi~createLicenseManagerReportGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLicenseManagerReportGeneratorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a report generator.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLicenseManagerReportGeneratorRequest} createLicenseManagerReportGeneratorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLicenseManagerReportGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLicenseManagerReportGeneratorResponse}
     */
    createLicenseManagerReportGenerator(xAmzTarget, createLicenseManagerReportGeneratorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLicenseManagerReportGeneratorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLicenseManagerReportGenerator");
      }
      // verify the required parameter 'createLicenseManagerReportGeneratorRequest' is set
      if (createLicenseManagerReportGeneratorRequest === undefined || createLicenseManagerReportGeneratorRequest === null) {
        throw new Error("Missing the required parameter 'createLicenseManagerReportGeneratorRequest' when calling createLicenseManagerReportGenerator");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLicenseManagerReportGeneratorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateLicenseManagerReportGenerator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLicenseVersion operation.
     * @callback module:api/DefaultApi~createLicenseVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLicenseVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new version of the specified license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLicenseVersionRequest} createLicenseVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLicenseVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLicenseVersionResponse}
     */
    createLicenseVersion(xAmzTarget, createLicenseVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLicenseVersionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLicenseVersion");
      }
      // verify the required parameter 'createLicenseVersionRequest' is set
      if (createLicenseVersionRequest === undefined || createLicenseVersionRequest === null) {
        throw new Error("Missing the required parameter 'createLicenseVersionRequest' when calling createLicenseVersion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLicenseVersionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateLicenseVersion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createToken operation.
     * @callback module:api/DefaultApi~createTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a long-lived token.</p> <p>A refresh token is a JWT token used to get an access token. With an access token, you can call AssumeRoleWithWebIdentity to get role credentials that you can use to call License Manager to manage the specified license.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateTokenRequest} createTokenRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTokenResponse}
     */
    createToken(xAmzTarget, createTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = createTokenRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createToken");
      }
      // verify the required parameter 'createTokenRequest' is set
      if (createTokenRequest === undefined || createTokenRequest === null) {
        throw new Error("Missing the required parameter 'createTokenRequest' when calling createToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTokenResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.CreateToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGrant operation.
     * @callback module:api/DefaultApi~deleteGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGrantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified grant.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteGrantRequest} deleteGrantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGrantResponse}
     */
    deleteGrant(xAmzTarget, deleteGrantRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteGrantRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteGrant");
      }
      // verify the required parameter 'deleteGrantRequest' is set
      if (deleteGrantRequest === undefined || deleteGrantRequest === null) {
        throw new Error("Missing the required parameter 'deleteGrantRequest' when calling deleteGrant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteGrantResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.DeleteGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLicense operation.
     * @callback module:api/DefaultApi~deleteLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteLicenseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLicenseRequest} deleteLicenseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteLicenseResponse}
     */
    deleteLicense(xAmzTarget, deleteLicenseRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLicenseRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLicense");
      }
      // verify the required parameter 'deleteLicenseRequest' is set
      if (deleteLicenseRequest === undefined || deleteLicenseRequest === null) {
        throw new Error("Missing the required parameter 'deleteLicenseRequest' when calling deleteLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteLicenseResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.DeleteLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLicenseConfiguration operation.
     * @callback module:api/DefaultApi~deleteLicenseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified license configuration.</p> <p>You cannot delete a license configuration that is in use.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLicenseConfigurationRequest} deleteLicenseConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLicenseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLicenseConfiguration(xAmzTarget, deleteLicenseConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLicenseConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLicenseConfiguration");
      }
      // verify the required parameter 'deleteLicenseConfigurationRequest' is set
      if (deleteLicenseConfigurationRequest === undefined || deleteLicenseConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteLicenseConfigurationRequest' when calling deleteLicenseConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.DeleteLicenseConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLicenseManagerReportGenerator operation.
     * @callback module:api/DefaultApi~deleteLicenseManagerReportGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified report generator.</p> <p>This action deletes the report generator, which stops it from generating future reports. The action cannot be reversed. It has no effect on the previous reports from this generator.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteLicenseManagerReportGeneratorRequest} deleteLicenseManagerReportGeneratorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLicenseManagerReportGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLicenseManagerReportGenerator(xAmzTarget, deleteLicenseManagerReportGeneratorRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLicenseManagerReportGeneratorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteLicenseManagerReportGenerator");
      }
      // verify the required parameter 'deleteLicenseManagerReportGeneratorRequest' is set
      if (deleteLicenseManagerReportGeneratorRequest === undefined || deleteLicenseManagerReportGeneratorRequest === null) {
        throw new Error("Missing the required parameter 'deleteLicenseManagerReportGeneratorRequest' when calling deleteLicenseManagerReportGenerator");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.DeleteLicenseManagerReportGenerator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/DefaultApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified token. Must be called in the license home Region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTokenRequest} deleteTokenRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteToken(xAmzTarget, deleteTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTokenRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteToken");
      }
      // verify the required parameter 'deleteTokenRequest' is set
      if (deleteTokenRequest === undefined || deleteTokenRequest === null) {
        throw new Error("Missing the required parameter 'deleteTokenRequest' when calling deleteToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.DeleteToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extendLicenseConsumption operation.
     * @callback module:api/DefaultApi~extendLicenseConsumptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtendLicenseConsumptionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extends the expiration date for license consumption.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ExtendLicenseConsumptionRequest} extendLicenseConsumptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~extendLicenseConsumptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtendLicenseConsumptionResponse}
     */
    extendLicenseConsumption(xAmzTarget, extendLicenseConsumptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = extendLicenseConsumptionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling extendLicenseConsumption");
      }
      // verify the required parameter 'extendLicenseConsumptionRequest' is set
      if (extendLicenseConsumptionRequest === undefined || extendLicenseConsumptionRequest === null) {
        throw new Error("Missing the required parameter 'extendLicenseConsumptionRequest' when calling extendLicenseConsumption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExtendLicenseConsumptionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ExtendLicenseConsumption', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessToken operation.
     * @callback module:api/DefaultApi~getAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a temporary access token to use with AssumeRoleWithWebIdentity. Access tokens are valid for one hour.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAccessTokenRequest} getAccessTokenRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessTokenResponse}
     */
    getAccessToken(xAmzTarget, getAccessTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAccessTokenRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAccessToken");
      }
      // verify the required parameter 'getAccessTokenRequest' is set
      if (getAccessTokenRequest === undefined || getAccessTokenRequest === null) {
        throw new Error("Missing the required parameter 'getAccessTokenRequest' when calling getAccessToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccessTokenResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetAccessToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGrant operation.
     * @callback module:api/DefaultApi~getGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGrantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets detailed information about the specified grant.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetGrantRequest} getGrantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGrantResponse}
     */
    getGrant(xAmzTarget, getGrantRequest, opts, callback) {
      opts = opts || {};
      let postBody = getGrantRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getGrant");
      }
      // verify the required parameter 'getGrantRequest' is set
      if (getGrantRequest === undefined || getGrantRequest === null) {
        throw new Error("Missing the required parameter 'getGrantRequest' when calling getGrant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetGrantResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicense operation.
     * @callback module:api/DefaultApi~getLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLicenseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets detailed information about the specified license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLicenseRequest} getLicenseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLicenseResponse}
     */
    getLicense(xAmzTarget, getLicenseRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLicenseRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLicense");
      }
      // verify the required parameter 'getLicenseRequest' is set
      if (getLicenseRequest === undefined || getLicenseRequest === null) {
        throw new Error("Missing the required parameter 'getLicenseRequest' when calling getLicense");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLicenseResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetLicense', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseConfiguration operation.
     * @callback module:api/DefaultApi~getLicenseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLicenseConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets detailed information about the specified license configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLicenseConfigurationRequest} getLicenseConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLicenseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLicenseConfigurationResponse}
     */
    getLicenseConfiguration(xAmzTarget, getLicenseConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLicenseConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLicenseConfiguration");
      }
      // verify the required parameter 'getLicenseConfigurationRequest' is set
      if (getLicenseConfigurationRequest === undefined || getLicenseConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getLicenseConfigurationRequest' when calling getLicenseConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLicenseConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetLicenseConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseConversionTask operation.
     * @callback module:api/DefaultApi~getLicenseConversionTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLicenseConversionTaskResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified license type conversion task.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLicenseConversionTaskRequest} getLicenseConversionTaskRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLicenseConversionTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLicenseConversionTaskResponse}
     */
    getLicenseConversionTask(xAmzTarget, getLicenseConversionTaskRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLicenseConversionTaskRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLicenseConversionTask");
      }
      // verify the required parameter 'getLicenseConversionTaskRequest' is set
      if (getLicenseConversionTaskRequest === undefined || getLicenseConversionTaskRequest === null) {
        throw new Error("Missing the required parameter 'getLicenseConversionTaskRequest' when calling getLicenseConversionTask");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLicenseConversionTaskResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetLicenseConversionTask', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseManagerReportGenerator operation.
     * @callback module:api/DefaultApi~getLicenseManagerReportGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLicenseManagerReportGeneratorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified report generator.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLicenseManagerReportGeneratorRequest} getLicenseManagerReportGeneratorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLicenseManagerReportGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLicenseManagerReportGeneratorResponse}
     */
    getLicenseManagerReportGenerator(xAmzTarget, getLicenseManagerReportGeneratorRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLicenseManagerReportGeneratorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLicenseManagerReportGenerator");
      }
      // verify the required parameter 'getLicenseManagerReportGeneratorRequest' is set
      if (getLicenseManagerReportGeneratorRequest === undefined || getLicenseManagerReportGeneratorRequest === null) {
        throw new Error("Missing the required parameter 'getLicenseManagerReportGeneratorRequest' when calling getLicenseManagerReportGenerator");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLicenseManagerReportGeneratorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetLicenseManagerReportGenerator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicenseUsage operation.
     * @callback module:api/DefaultApi~getLicenseUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLicenseUsageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets detailed information about the usage of the specified license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetLicenseUsageRequest} getLicenseUsageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLicenseUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLicenseUsageResponse}
     */
    getLicenseUsage(xAmzTarget, getLicenseUsageRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLicenseUsageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getLicenseUsage");
      }
      // verify the required parameter 'getLicenseUsageRequest' is set
      if (getLicenseUsageRequest === undefined || getLicenseUsageRequest === null) {
        throw new Error("Missing the required parameter 'getLicenseUsageRequest' when calling getLicenseUsage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLicenseUsageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetLicenseUsage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServiceSettings operation.
     * @callback module:api/DefaultApi~getServiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServiceSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the License Manager settings for the current Region.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getServiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServiceSettingsResponse}
     */
    getServiceSettings(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getServiceSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getServiceSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetServiceSettingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.GetServiceSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssociationsForLicenseConfiguration operation.
     * @callback module:api/DefaultApi~listAssociationsForLicenseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssociationsForLicenseConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the resource associations for the specified license configuration.</p> <p>Resource associations need not consume licenses from a license configuration. For example, an AMI or a stopped instance might not consume a license (depending on the license rules).</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAssociationsForLicenseConfigurationRequest} listAssociationsForLicenseConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listAssociationsForLicenseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssociationsForLicenseConfigurationResponse}
     */
    listAssociationsForLicenseConfiguration(xAmzTarget, listAssociationsForLicenseConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAssociationsForLicenseConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAssociationsForLicenseConfiguration");
      }
      // verify the required parameter 'listAssociationsForLicenseConfigurationRequest' is set
      if (listAssociationsForLicenseConfigurationRequest === undefined || listAssociationsForLicenseConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'listAssociationsForLicenseConfigurationRequest' when calling listAssociationsForLicenseConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAssociationsForLicenseConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListAssociationsForLicenseConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDistributedGrants operation.
     * @callback module:api/DefaultApi~listDistributedGrantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDistributedGrantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the grants distributed for the specified license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDistributedGrantsRequest} listDistributedGrantsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listDistributedGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDistributedGrantsResponse}
     */
    listDistributedGrants(xAmzTarget, listDistributedGrantsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDistributedGrantsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDistributedGrants");
      }
      // verify the required parameter 'listDistributedGrantsRequest' is set
      if (listDistributedGrantsRequest === undefined || listDistributedGrantsRequest === null) {
        throw new Error("Missing the required parameter 'listDistributedGrantsRequest' when calling listDistributedGrants");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDistributedGrantsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListDistributedGrants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFailuresForLicenseConfigurationOperations operation.
     * @callback module:api/DefaultApi~listFailuresForLicenseConfigurationOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFailuresForLicenseConfigurationOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the license configuration operations that failed.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListFailuresForLicenseConfigurationOperationsRequest} listFailuresForLicenseConfigurationOperationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listFailuresForLicenseConfigurationOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFailuresForLicenseConfigurationOperationsResponse}
     */
    listFailuresForLicenseConfigurationOperations(xAmzTarget, listFailuresForLicenseConfigurationOperationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listFailuresForLicenseConfigurationOperationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listFailuresForLicenseConfigurationOperations");
      }
      // verify the required parameter 'listFailuresForLicenseConfigurationOperationsRequest' is set
      if (listFailuresForLicenseConfigurationOperationsRequest === undefined || listFailuresForLicenseConfigurationOperationsRequest === null) {
        throw new Error("Missing the required parameter 'listFailuresForLicenseConfigurationOperationsRequest' when calling listFailuresForLicenseConfigurationOperations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListFailuresForLicenseConfigurationOperationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListFailuresForLicenseConfigurationOperations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenseConfigurations operation.
     * @callback module:api/DefaultApi~listLicenseConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLicenseConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the license configurations for your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLicenseConfigurationsRequest} listLicenseConfigurationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listLicenseConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLicenseConfigurationsResponse}
     */
    listLicenseConfigurations(xAmzTarget, listLicenseConfigurationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLicenseConfigurationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLicenseConfigurations");
      }
      // verify the required parameter 'listLicenseConfigurationsRequest' is set
      if (listLicenseConfigurationsRequest === undefined || listLicenseConfigurationsRequest === null) {
        throw new Error("Missing the required parameter 'listLicenseConfigurationsRequest' when calling listLicenseConfigurations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLicenseConfigurationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListLicenseConfigurations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenseConversionTasks operation.
     * @callback module:api/DefaultApi~listLicenseConversionTasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLicenseConversionTasksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the license type conversion tasks for your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLicenseConversionTasksRequest} listLicenseConversionTasksRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listLicenseConversionTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLicenseConversionTasksResponse}
     */
    listLicenseConversionTasks(xAmzTarget, listLicenseConversionTasksRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLicenseConversionTasksRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLicenseConversionTasks");
      }
      // verify the required parameter 'listLicenseConversionTasksRequest' is set
      if (listLicenseConversionTasksRequest === undefined || listLicenseConversionTasksRequest === null) {
        throw new Error("Missing the required parameter 'listLicenseConversionTasksRequest' when calling listLicenseConversionTasks");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLicenseConversionTasksResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListLicenseConversionTasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenseManagerReportGenerators operation.
     * @callback module:api/DefaultApi~listLicenseManagerReportGeneratorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLicenseManagerReportGeneratorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the report generators for your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLicenseManagerReportGeneratorsRequest} listLicenseManagerReportGeneratorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listLicenseManagerReportGeneratorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLicenseManagerReportGeneratorsResponse}
     */
    listLicenseManagerReportGenerators(xAmzTarget, listLicenseManagerReportGeneratorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLicenseManagerReportGeneratorsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLicenseManagerReportGenerators");
      }
      // verify the required parameter 'listLicenseManagerReportGeneratorsRequest' is set
      if (listLicenseManagerReportGeneratorsRequest === undefined || listLicenseManagerReportGeneratorsRequest === null) {
        throw new Error("Missing the required parameter 'listLicenseManagerReportGeneratorsRequest' when calling listLicenseManagerReportGenerators");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLicenseManagerReportGeneratorsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListLicenseManagerReportGenerators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenseSpecificationsForResource operation.
     * @callback module:api/DefaultApi~listLicenseSpecificationsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLicenseSpecificationsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the license configurations for the specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLicenseSpecificationsForResourceRequest} listLicenseSpecificationsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listLicenseSpecificationsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLicenseSpecificationsForResourceResponse}
     */
    listLicenseSpecificationsForResource(xAmzTarget, listLicenseSpecificationsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLicenseSpecificationsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLicenseSpecificationsForResource");
      }
      // verify the required parameter 'listLicenseSpecificationsForResourceRequest' is set
      if (listLicenseSpecificationsForResourceRequest === undefined || listLicenseSpecificationsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listLicenseSpecificationsForResourceRequest' when calling listLicenseSpecificationsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLicenseSpecificationsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListLicenseSpecificationsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenseVersions operation.
     * @callback module:api/DefaultApi~listLicenseVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLicenseVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all versions of the specified license.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLicenseVersionsRequest} listLicenseVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listLicenseVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLicenseVersionsResponse}
     */
    listLicenseVersions(xAmzTarget, listLicenseVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLicenseVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLicenseVersions");
      }
      // verify the required parameter 'listLicenseVersionsRequest' is set
      if (listLicenseVersionsRequest === undefined || listLicenseVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listLicenseVersionsRequest' when calling listLicenseVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLicenseVersionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListLicenseVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLicenses operation.
     * @callback module:api/DefaultApi~listLicensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLicensesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the licenses for your account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLicensesRequest} listLicensesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLicensesResponse}
     */
    listLicenses(xAmzTarget, listLicensesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLicensesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLicenses");
      }
      // verify the required parameter 'listLicensesRequest' is set
      if (listLicensesRequest === undefined || listLicensesRequest === null) {
        throw new Error("Missing the required parameter 'listLicensesRequest' when calling listLicenses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLicensesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListLicenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReceivedGrants operation.
     * @callback module:api/DefaultApi~listReceivedGrantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReceivedGrantsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists grants that are received. Received grants are grants created while specifying the recipient as this Amazon Web Services account, your organization, or an organizational unit (OU) to which this member account belongs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReceivedGrantsRequest} listReceivedGrantsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listReceivedGrantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReceivedGrantsResponse}
     */
    listReceivedGrants(xAmzTarget, listReceivedGrantsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReceivedGrantsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReceivedGrants");
      }
      // verify the required parameter 'listReceivedGrantsRequest' is set
      if (listReceivedGrantsRequest === undefined || listReceivedGrantsRequest === null) {
        throw new Error("Missing the required parameter 'listReceivedGrantsRequest' when calling listReceivedGrants");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReceivedGrantsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListReceivedGrants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReceivedGrantsForOrganization operation.
     * @callback module:api/DefaultApi~listReceivedGrantsForOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReceivedGrantsForOrganizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the grants received for all accounts in the organization.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReceivedGrantsForOrganizationRequest} listReceivedGrantsForOrganizationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listReceivedGrantsForOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReceivedGrantsForOrganizationResponse}
     */
    listReceivedGrantsForOrganization(xAmzTarget, listReceivedGrantsForOrganizationRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReceivedGrantsForOrganizationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReceivedGrantsForOrganization");
      }
      // verify the required parameter 'listReceivedGrantsForOrganizationRequest' is set
      if (listReceivedGrantsForOrganizationRequest === undefined || listReceivedGrantsForOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'listReceivedGrantsForOrganizationRequest' when calling listReceivedGrantsForOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReceivedGrantsForOrganizationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListReceivedGrantsForOrganization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReceivedLicenses operation.
     * @callback module:api/DefaultApi~listReceivedLicensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReceivedLicensesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists received licenses.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReceivedLicensesRequest} listReceivedLicensesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listReceivedLicensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReceivedLicensesResponse}
     */
    listReceivedLicenses(xAmzTarget, listReceivedLicensesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReceivedLicensesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReceivedLicenses");
      }
      // verify the required parameter 'listReceivedLicensesRequest' is set
      if (listReceivedLicensesRequest === undefined || listReceivedLicensesRequest === null) {
        throw new Error("Missing the required parameter 'listReceivedLicensesRequest' when calling listReceivedLicenses");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReceivedLicensesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListReceivedLicenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReceivedLicensesForOrganization operation.
     * @callback module:api/DefaultApi~listReceivedLicensesForOrganizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReceivedLicensesForOrganizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the licenses received for all accounts in the organization.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListReceivedLicensesForOrganizationRequest} listReceivedLicensesForOrganizationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listReceivedLicensesForOrganizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReceivedLicensesForOrganizationResponse}
     */
    listReceivedLicensesForOrganization(xAmzTarget, listReceivedLicensesForOrganizationRequest, opts, callback) {
      opts = opts || {};
      let postBody = listReceivedLicensesForOrganizationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listReceivedLicensesForOrganization");
      }
      // verify the required parameter 'listReceivedLicensesForOrganizationRequest' is set
      if (listReceivedLicensesForOrganizationRequest === undefined || listReceivedLicensesForOrganizationRequest === null) {
        throw new Error("Missing the required parameter 'listReceivedLicensesForOrganizationRequest' when calling listReceivedLicensesForOrganization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListReceivedLicensesForOrganizationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListReceivedLicensesForOrganization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResourceInventory operation.
     * @callback module:api/DefaultApi~listResourceInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourceInventoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists resources managed using Systems Manager inventory.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListResourceInventoryRequest} listResourceInventoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listResourceInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourceInventoryResponse}
     */
    listResourceInventory(xAmzTarget, listResourceInventoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResourceInventoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listResourceInventory");
      }
      // verify the required parameter 'listResourceInventoryRequest' is set
      if (listResourceInventoryRequest === undefined || listResourceInventoryRequest === null) {
        throw new Error("Missing the required parameter 'listResourceInventoryRequest' when calling listResourceInventory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResourceInventoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListResourceInventory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for the specified license configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTokens operation.
     * @callback module:api/DefaultApi~listTokensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTokensResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists your tokens.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTokensRequest} listTokensRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTokensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTokensResponse}
     */
    listTokens(xAmzTarget, listTokensRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTokensRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTokens");
      }
      // verify the required parameter 'listTokensRequest' is set
      if (listTokensRequest === undefined || listTokensRequest === null) {
        throw new Error("Missing the required parameter 'listTokensRequest' when calling listTokens");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTokensResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListTokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUsageForLicenseConfiguration operation.
     * @callback module:api/DefaultApi~listUsageForLicenseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUsageForLicenseConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all license usage records for a license configuration, displaying license consumption details by resource at a selected point in time. Use this action to audit the current license consumption for any license inventory and configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListUsageForLicenseConfigurationRequest} listUsageForLicenseConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listUsageForLicenseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUsageForLicenseConfigurationResponse}
     */
    listUsageForLicenseConfiguration(xAmzTarget, listUsageForLicenseConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = listUsageForLicenseConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listUsageForLicenseConfiguration");
      }
      // verify the required parameter 'listUsageForLicenseConfigurationRequest' is set
      if (listUsageForLicenseConfigurationRequest === undefined || listUsageForLicenseConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'listUsageForLicenseConfigurationRequest' when calling listUsageForLicenseConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListUsageForLicenseConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.ListUsageForLicenseConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectGrant operation.
     * @callback module:api/DefaultApi~rejectGrantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RejectGrantResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rejects the specified grant.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RejectGrantRequest} rejectGrantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectGrantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RejectGrantResponse}
     */
    rejectGrant(xAmzTarget, rejectGrantRequest, opts, callback) {
      opts = opts || {};
      let postBody = rejectGrantRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling rejectGrant");
      }
      // verify the required parameter 'rejectGrantRequest' is set
      if (rejectGrantRequest === undefined || rejectGrantRequest === null) {
        throw new Error("Missing the required parameter 'rejectGrantRequest' when calling rejectGrant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RejectGrantResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.RejectGrant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the specified tags to the specified license configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified license configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLicenseConfiguration operation.
     * @callback module:api/DefaultApi~updateLicenseConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the attributes of an existing license configuration.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLicenseConfigurationRequest} updateLicenseConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLicenseConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLicenseConfiguration(xAmzTarget, updateLicenseConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLicenseConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLicenseConfiguration");
      }
      // verify the required parameter 'updateLicenseConfigurationRequest' is set
      if (updateLicenseConfigurationRequest === undefined || updateLicenseConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateLicenseConfigurationRequest' when calling updateLicenseConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.UpdateLicenseConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLicenseManagerReportGenerator operation.
     * @callback module:api/DefaultApi~updateLicenseManagerReportGeneratorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a report generator.</p> <p>After you make changes to a report generator, it starts generating new reports within 60 minutes of being updated.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLicenseManagerReportGeneratorRequest} updateLicenseManagerReportGeneratorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLicenseManagerReportGeneratorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLicenseManagerReportGenerator(xAmzTarget, updateLicenseManagerReportGeneratorRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLicenseManagerReportGeneratorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLicenseManagerReportGenerator");
      }
      // verify the required parameter 'updateLicenseManagerReportGeneratorRequest' is set
      if (updateLicenseManagerReportGeneratorRequest === undefined || updateLicenseManagerReportGeneratorRequest === null) {
        throw new Error("Missing the required parameter 'updateLicenseManagerReportGeneratorRequest' when calling updateLicenseManagerReportGenerator");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.UpdateLicenseManagerReportGenerator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLicenseSpecificationsForResource operation.
     * @callback module:api/DefaultApi~updateLicenseSpecificationsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds or removes the specified license configurations for the specified Amazon Web Services resource.</p> <p>You can update the license specifications of AMIs, instances, and hosts. You cannot update the license specifications for launch templates and CloudFormation templates, as they send license configurations to the operation that creates the resource.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLicenseSpecificationsForResourceRequest} updateLicenseSpecificationsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLicenseSpecificationsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLicenseSpecificationsForResource(xAmzTarget, updateLicenseSpecificationsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLicenseSpecificationsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLicenseSpecificationsForResource");
      }
      // verify the required parameter 'updateLicenseSpecificationsForResourceRequest' is set
      if (updateLicenseSpecificationsForResourceRequest === undefined || updateLicenseSpecificationsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'updateLicenseSpecificationsForResourceRequest' when calling updateLicenseSpecificationsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.UpdateLicenseSpecificationsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServiceSettings operation.
     * @callback module:api/DefaultApi~updateServiceSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates License Manager settings for the current Region.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateServiceSettingsRequest} updateServiceSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateServiceSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateServiceSettings(xAmzTarget, updateServiceSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateServiceSettingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateServiceSettings");
      }
      // verify the required parameter 'updateServiceSettingsRequest' is set
      if (updateServiceSettingsRequest === undefined || updateServiceSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateServiceSettingsRequest' when calling updateServiceSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSLicenseManager.UpdateServiceSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
