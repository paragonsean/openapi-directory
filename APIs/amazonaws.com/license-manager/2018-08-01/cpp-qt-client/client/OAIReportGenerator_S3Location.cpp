/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportGenerator_S3Location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportGenerator_S3Location::OAIReportGenerator_S3Location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportGenerator_S3Location::OAIReportGenerator_S3Location() {
    this->initializeModel();
}

OAIReportGenerator_S3Location::~OAIReportGenerator_S3Location() {}

void OAIReportGenerator_S3Location::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_prefix_isSet = false;
    m_key_prefix_isValid = false;
}

void OAIReportGenerator_S3Location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportGenerator_S3Location::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_key_prefix, json[QString("keyPrefix")]);
    m_key_prefix_isSet = !json[QString("keyPrefix")].isNull() && m_key_prefix_isValid;
}

QString OAIReportGenerator_S3Location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportGenerator_S3Location::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_prefix_isSet) {
        obj.insert(QString("keyPrefix"), ::OpenAPI::toJsonValue(m_key_prefix));
    }
    return obj;
}

QString OAIReportGenerator_S3Location::getBucket() const {
    return m_bucket;
}
void OAIReportGenerator_S3Location::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIReportGenerator_S3Location::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIReportGenerator_S3Location::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIReportGenerator_S3Location::getKeyPrefix() const {
    return m_key_prefix;
}
void OAIReportGenerator_S3Location::setKeyPrefix(const QString &key_prefix) {
    m_key_prefix = key_prefix;
    m_key_prefix_isSet = true;
}

bool OAIReportGenerator_S3Location::is_key_prefix_Set() const{
    return m_key_prefix_isSet;
}

bool OAIReportGenerator_S3Location::is_key_prefix_Valid() const{
    return m_key_prefix_isValid;
}

bool OAIReportGenerator_S3Location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportGenerator_S3Location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
