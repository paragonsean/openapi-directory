/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutLicenseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutLicenseRequest::OAICheckoutLicenseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutLicenseRequest::OAICheckoutLicenseRequest() {
    this->initializeModel();
}

OAICheckoutLicenseRequest::~OAICheckoutLicenseRequest() {}

void OAICheckoutLicenseRequest::initializeModel() {

    m_product_sku_isSet = false;
    m_product_sku_isValid = false;

    m_checkout_type_isSet = false;
    m_checkout_type_isValid = false;

    m_key_fingerprint_isSet = false;
    m_key_fingerprint_isValid = false;

    m_entitlements_isSet = false;
    m_entitlements_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_beneficiary_isSet = false;
    m_beneficiary_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;
}

void OAICheckoutLicenseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckoutLicenseRequest::fromJsonObject(QJsonObject json) {

    m_product_sku_isValid = ::OpenAPI::fromJsonValue(m_product_sku, json[QString("ProductSKU")]);
    m_product_sku_isSet = !json[QString("ProductSKU")].isNull() && m_product_sku_isValid;

    m_checkout_type_isValid = ::OpenAPI::fromJsonValue(m_checkout_type, json[QString("CheckoutType")]);
    m_checkout_type_isSet = !json[QString("CheckoutType")].isNull() && m_checkout_type_isValid;

    m_key_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_key_fingerprint, json[QString("KeyFingerprint")]);
    m_key_fingerprint_isSet = !json[QString("KeyFingerprint")].isNull() && m_key_fingerprint_isValid;

    m_entitlements_isValid = ::OpenAPI::fromJsonValue(m_entitlements, json[QString("Entitlements")]);
    m_entitlements_isSet = !json[QString("Entitlements")].isNull() && m_entitlements_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_beneficiary, json[QString("Beneficiary")]);
    m_beneficiary_isSet = !json[QString("Beneficiary")].isNull() && m_beneficiary_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;
}

QString OAICheckoutLicenseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckoutLicenseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_product_sku_isSet) {
        obj.insert(QString("ProductSKU"), ::OpenAPI::toJsonValue(m_product_sku));
    }
    if (m_checkout_type.isSet()) {
        obj.insert(QString("CheckoutType"), ::OpenAPI::toJsonValue(m_checkout_type));
    }
    if (m_key_fingerprint_isSet) {
        obj.insert(QString("KeyFingerprint"), ::OpenAPI::toJsonValue(m_key_fingerprint));
    }
    if (m_entitlements.isSet()) {
        obj.insert(QString("Entitlements"), ::OpenAPI::toJsonValue(m_entitlements));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_beneficiary_isSet) {
        obj.insert(QString("Beneficiary"), ::OpenAPI::toJsonValue(m_beneficiary));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    return obj;
}

QString OAICheckoutLicenseRequest::getProductSku() const {
    return m_product_sku;
}
void OAICheckoutLicenseRequest::setProductSku(const QString &product_sku) {
    m_product_sku = product_sku;
    m_product_sku_isSet = true;
}

bool OAICheckoutLicenseRequest::is_product_sku_Set() const{
    return m_product_sku_isSet;
}

bool OAICheckoutLicenseRequest::is_product_sku_Valid() const{
    return m_product_sku_isValid;
}

OAICheckoutType OAICheckoutLicenseRequest::getCheckoutType() const {
    return m_checkout_type;
}
void OAICheckoutLicenseRequest::setCheckoutType(const OAICheckoutType &checkout_type) {
    m_checkout_type = checkout_type;
    m_checkout_type_isSet = true;
}

bool OAICheckoutLicenseRequest::is_checkout_type_Set() const{
    return m_checkout_type_isSet;
}

bool OAICheckoutLicenseRequest::is_checkout_type_Valid() const{
    return m_checkout_type_isValid;
}

QString OAICheckoutLicenseRequest::getKeyFingerprint() const {
    return m_key_fingerprint;
}
void OAICheckoutLicenseRequest::setKeyFingerprint(const QString &key_fingerprint) {
    m_key_fingerprint = key_fingerprint;
    m_key_fingerprint_isSet = true;
}

bool OAICheckoutLicenseRequest::is_key_fingerprint_Set() const{
    return m_key_fingerprint_isSet;
}

bool OAICheckoutLicenseRequest::is_key_fingerprint_Valid() const{
    return m_key_fingerprint_isValid;
}

QList OAICheckoutLicenseRequest::getEntitlements() const {
    return m_entitlements;
}
void OAICheckoutLicenseRequest::setEntitlements(const QList &entitlements) {
    m_entitlements = entitlements;
    m_entitlements_isSet = true;
}

bool OAICheckoutLicenseRequest::is_entitlements_Set() const{
    return m_entitlements_isSet;
}

bool OAICheckoutLicenseRequest::is_entitlements_Valid() const{
    return m_entitlements_isValid;
}

QString OAICheckoutLicenseRequest::getClientToken() const {
    return m_client_token;
}
void OAICheckoutLicenseRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICheckoutLicenseRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICheckoutLicenseRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICheckoutLicenseRequest::getBeneficiary() const {
    return m_beneficiary;
}
void OAICheckoutLicenseRequest::setBeneficiary(const QString &beneficiary) {
    m_beneficiary = beneficiary;
    m_beneficiary_isSet = true;
}

bool OAICheckoutLicenseRequest::is_beneficiary_Set() const{
    return m_beneficiary_isSet;
}

bool OAICheckoutLicenseRequest::is_beneficiary_Valid() const{
    return m_beneficiary_isValid;
}

QString OAICheckoutLicenseRequest::getNodeId() const {
    return m_node_id;
}
void OAICheckoutLicenseRequest::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICheckoutLicenseRequest::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICheckoutLicenseRequest::is_node_id_Valid() const{
    return m_node_id_isValid;
}

bool OAICheckoutLicenseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_product_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckoutLicenseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_sku_isValid && m_checkout_type_isValid && m_key_fingerprint_isValid && m_entitlements_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
