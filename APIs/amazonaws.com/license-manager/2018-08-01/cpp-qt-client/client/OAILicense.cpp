/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicense.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicense::OAILicense(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicense::OAILicense() {
    this->initializeModel();
}

OAILicense::~OAILicense() {}

void OAILicense::initializeModel() {

    m_license_arn_isSet = false;
    m_license_arn_isValid = false;

    m_license_name_isSet = false;
    m_license_name_isValid = false;

    m_product_name_isSet = false;
    m_product_name_isValid = false;

    m_product_sku_isSet = false;
    m_product_sku_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_home_region_isSet = false;
    m_home_region_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_validity_isSet = false;
    m_validity_isValid = false;

    m_beneficiary_isSet = false;
    m_beneficiary_isValid = false;

    m_entitlements_isSet = false;
    m_entitlements_isValid = false;

    m_consumption_configuration_isSet = false;
    m_consumption_configuration_isValid = false;

    m_license_metadata_isSet = false;
    m_license_metadata_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAILicense::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicense::fromJsonObject(QJsonObject json) {

    m_license_arn_isValid = ::OpenAPI::fromJsonValue(m_license_arn, json[QString("LicenseArn")]);
    m_license_arn_isSet = !json[QString("LicenseArn")].isNull() && m_license_arn_isValid;

    m_license_name_isValid = ::OpenAPI::fromJsonValue(m_license_name, json[QString("LicenseName")]);
    m_license_name_isSet = !json[QString("LicenseName")].isNull() && m_license_name_isValid;

    m_product_name_isValid = ::OpenAPI::fromJsonValue(m_product_name, json[QString("ProductName")]);
    m_product_name_isSet = !json[QString("ProductName")].isNull() && m_product_name_isValid;

    m_product_sku_isValid = ::OpenAPI::fromJsonValue(m_product_sku, json[QString("ProductSKU")]);
    m_product_sku_isSet = !json[QString("ProductSKU")].isNull() && m_product_sku_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;

    m_home_region_isValid = ::OpenAPI::fromJsonValue(m_home_region, json[QString("HomeRegion")]);
    m_home_region_isSet = !json[QString("HomeRegion")].isNull() && m_home_region_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_validity_isValid = ::OpenAPI::fromJsonValue(m_validity, json[QString("Validity")]);
    m_validity_isSet = !json[QString("Validity")].isNull() && m_validity_isValid;

    m_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_beneficiary, json[QString("Beneficiary")]);
    m_beneficiary_isSet = !json[QString("Beneficiary")].isNull() && m_beneficiary_isValid;

    m_entitlements_isValid = ::OpenAPI::fromJsonValue(m_entitlements, json[QString("Entitlements")]);
    m_entitlements_isSet = !json[QString("Entitlements")].isNull() && m_entitlements_isValid;

    m_consumption_configuration_isValid = ::OpenAPI::fromJsonValue(m_consumption_configuration, json[QString("ConsumptionConfiguration")]);
    m_consumption_configuration_isSet = !json[QString("ConsumptionConfiguration")].isNull() && m_consumption_configuration_isValid;

    m_license_metadata_isValid = ::OpenAPI::fromJsonValue(m_license_metadata, json[QString("LicenseMetadata")]);
    m_license_metadata_isSet = !json[QString("LicenseMetadata")].isNull() && m_license_metadata_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAILicense::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicense::asJsonObject() const {
    QJsonObject obj;
    if (m_license_arn_isSet) {
        obj.insert(QString("LicenseArn"), ::OpenAPI::toJsonValue(m_license_arn));
    }
    if (m_license_name_isSet) {
        obj.insert(QString("LicenseName"), ::OpenAPI::toJsonValue(m_license_name));
    }
    if (m_product_name_isSet) {
        obj.insert(QString("ProductName"), ::OpenAPI::toJsonValue(m_product_name));
    }
    if (m_product_sku_isSet) {
        obj.insert(QString("ProductSKU"), ::OpenAPI::toJsonValue(m_product_sku));
    }
    if (m_issuer.isSet()) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_home_region_isSet) {
        obj.insert(QString("HomeRegion"), ::OpenAPI::toJsonValue(m_home_region));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_validity.isSet()) {
        obj.insert(QString("Validity"), ::OpenAPI::toJsonValue(m_validity));
    }
    if (m_beneficiary_isSet) {
        obj.insert(QString("Beneficiary"), ::OpenAPI::toJsonValue(m_beneficiary));
    }
    if (m_entitlements.isSet()) {
        obj.insert(QString("Entitlements"), ::OpenAPI::toJsonValue(m_entitlements));
    }
    if (m_consumption_configuration.isSet()) {
        obj.insert(QString("ConsumptionConfiguration"), ::OpenAPI::toJsonValue(m_consumption_configuration));
    }
    if (m_license_metadata.isSet()) {
        obj.insert(QString("LicenseMetadata"), ::OpenAPI::toJsonValue(m_license_metadata));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAILicense::getLicenseArn() const {
    return m_license_arn;
}
void OAILicense::setLicenseArn(const QString &license_arn) {
    m_license_arn = license_arn;
    m_license_arn_isSet = true;
}

bool OAILicense::is_license_arn_Set() const{
    return m_license_arn_isSet;
}

bool OAILicense::is_license_arn_Valid() const{
    return m_license_arn_isValid;
}

QString OAILicense::getLicenseName() const {
    return m_license_name;
}
void OAILicense::setLicenseName(const QString &license_name) {
    m_license_name = license_name;
    m_license_name_isSet = true;
}

bool OAILicense::is_license_name_Set() const{
    return m_license_name_isSet;
}

bool OAILicense::is_license_name_Valid() const{
    return m_license_name_isValid;
}

QString OAILicense::getProductName() const {
    return m_product_name;
}
void OAILicense::setProductName(const QString &product_name) {
    m_product_name = product_name;
    m_product_name_isSet = true;
}

bool OAILicense::is_product_name_Set() const{
    return m_product_name_isSet;
}

bool OAILicense::is_product_name_Valid() const{
    return m_product_name_isValid;
}

QString OAILicense::getProductSku() const {
    return m_product_sku;
}
void OAILicense::setProductSku(const QString &product_sku) {
    m_product_sku = product_sku;
    m_product_sku_isSet = true;
}

bool OAILicense::is_product_sku_Set() const{
    return m_product_sku_isSet;
}

bool OAILicense::is_product_sku_Valid() const{
    return m_product_sku_isValid;
}

OAILicense_Issuer OAILicense::getIssuer() const {
    return m_issuer;
}
void OAILicense::setIssuer(const OAILicense_Issuer &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAILicense::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAILicense::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAILicense::getHomeRegion() const {
    return m_home_region;
}
void OAILicense::setHomeRegion(const QString &home_region) {
    m_home_region = home_region;
    m_home_region_isSet = true;
}

bool OAILicense::is_home_region_Set() const{
    return m_home_region_isSet;
}

bool OAILicense::is_home_region_Valid() const{
    return m_home_region_isValid;
}

OAILicenseStatus OAILicense::getStatus() const {
    return m_status;
}
void OAILicense::setStatus(const OAILicenseStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILicense::is_status_Set() const{
    return m_status_isSet;
}

bool OAILicense::is_status_Valid() const{
    return m_status_isValid;
}

OAICreateLicenseRequest_Validity OAILicense::getValidity() const {
    return m_validity;
}
void OAILicense::setValidity(const OAICreateLicenseRequest_Validity &validity) {
    m_validity = validity;
    m_validity_isSet = true;
}

bool OAILicense::is_validity_Set() const{
    return m_validity_isSet;
}

bool OAILicense::is_validity_Valid() const{
    return m_validity_isValid;
}

QString OAILicense::getBeneficiary() const {
    return m_beneficiary;
}
void OAILicense::setBeneficiary(const QString &beneficiary) {
    m_beneficiary = beneficiary;
    m_beneficiary_isSet = true;
}

bool OAILicense::is_beneficiary_Set() const{
    return m_beneficiary_isSet;
}

bool OAILicense::is_beneficiary_Valid() const{
    return m_beneficiary_isValid;
}

QList OAILicense::getEntitlements() const {
    return m_entitlements;
}
void OAILicense::setEntitlements(const QList &entitlements) {
    m_entitlements = entitlements;
    m_entitlements_isSet = true;
}

bool OAILicense::is_entitlements_Set() const{
    return m_entitlements_isSet;
}

bool OAILicense::is_entitlements_Valid() const{
    return m_entitlements_isValid;
}

OAILicense_ConsumptionConfiguration OAILicense::getConsumptionConfiguration() const {
    return m_consumption_configuration;
}
void OAILicense::setConsumptionConfiguration(const OAILicense_ConsumptionConfiguration &consumption_configuration) {
    m_consumption_configuration = consumption_configuration;
    m_consumption_configuration_isSet = true;
}

bool OAILicense::is_consumption_configuration_Set() const{
    return m_consumption_configuration_isSet;
}

bool OAILicense::is_consumption_configuration_Valid() const{
    return m_consumption_configuration_isValid;
}

QList OAILicense::getLicenseMetadata() const {
    return m_license_metadata;
}
void OAILicense::setLicenseMetadata(const QList &license_metadata) {
    m_license_metadata = license_metadata;
    m_license_metadata_isSet = true;
}

bool OAILicense::is_license_metadata_Set() const{
    return m_license_metadata_isSet;
}

bool OAILicense::is_license_metadata_Valid() const{
    return m_license_metadata_isValid;
}

QString OAILicense::getCreateTime() const {
    return m_create_time;
}
void OAILicense::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAILicense::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAILicense::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAILicense::getVersion() const {
    return m_version;
}
void OAILicense::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAILicense::is_version_Set() const{
    return m_version_isSet;
}

bool OAILicense::is_version_Valid() const{
    return m_version_isValid;
}

bool OAILicense::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicense::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
