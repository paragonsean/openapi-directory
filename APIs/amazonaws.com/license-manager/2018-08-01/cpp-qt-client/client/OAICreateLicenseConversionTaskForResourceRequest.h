/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLicenseConversionTaskForResourceRequest.h
 *
 * 
 */

#ifndef OAICreateLicenseConversionTaskForResourceRequest_H
#define OAICreateLicenseConversionTaskForResourceRequest_H

#include <QJsonObject>

#include "OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext.h"
#include "OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext;
class OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext;

class OAICreateLicenseConversionTaskForResourceRequest : public OAIObject {
public:
    OAICreateLicenseConversionTaskForResourceRequest();
    OAICreateLicenseConversionTaskForResourceRequest(QString json);
    ~OAICreateLicenseConversionTaskForResourceRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext getSourceLicenseContext() const;
    void setSourceLicenseContext(const OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext &source_license_context);
    bool is_source_license_context_Set() const;
    bool is_source_license_context_Valid() const;

    OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext getDestinationLicenseContext() const;
    void setDestinationLicenseContext(const OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext &destination_license_context);
    bool is_destination_license_context_Set() const;
    bool is_destination_license_context_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext m_source_license_context;
    bool m_source_license_context_isSet;
    bool m_source_license_context_isValid;

    OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext m_destination_license_context;
    bool m_destination_license_context_isSet;
    bool m_destination_license_context_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLicenseConversionTaskForResourceRequest)

#endif // OAICreateLicenseConversionTaskForResourceRequest_H
