/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOptions::OAIOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOptions::OAIOptions() {
    this->initializeModel();
}

OAIOptions::~OAIOptions() {}

void OAIOptions::initializeModel() {

    m_activation_override_behavior_isSet = false;
    m_activation_override_behavior_isValid = false;
}

void OAIOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOptions::fromJsonObject(QJsonObject json) {

    m_activation_override_behavior_isValid = ::OpenAPI::fromJsonValue(m_activation_override_behavior, json[QString("ActivationOverrideBehavior")]);
    m_activation_override_behavior_isSet = !json[QString("ActivationOverrideBehavior")].isNull() && m_activation_override_behavior_isValid;
}

QString OAIOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_override_behavior.isSet()) {
        obj.insert(QString("ActivationOverrideBehavior"), ::OpenAPI::toJsonValue(m_activation_override_behavior));
    }
    return obj;
}

OAIActivationOverrideBehavior OAIOptions::getActivationOverrideBehavior() const {
    return m_activation_override_behavior;
}
void OAIOptions::setActivationOverrideBehavior(const OAIActivationOverrideBehavior &activation_override_behavior) {
    m_activation_override_behavior = activation_override_behavior;
    m_activation_override_behavior_isSet = true;
}

bool OAIOptions::is_activation_override_behavior_Set() const{
    return m_activation_override_behavior_isSet;
}

bool OAIOptions::is_activation_override_behavior_Valid() const{
    return m_activation_override_behavior_isValid;
}

bool OAIOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_override_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
