/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceivedStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceivedStatus::OAIReceivedStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceivedStatus::OAIReceivedStatus() {
    this->initializeModel();
}

OAIReceivedStatus::~OAIReceivedStatus() {}

void OAIReceivedStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReceivedStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReceivedStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING_WORKFLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::PENDING_WORKFLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_ACCEPT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::PENDING_ACCEPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_WORKFLOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::FAILED_WORKFLOW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WORKFLOW_COMPLETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReceivedStatus::WORKFLOW_COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReceivedStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReceivedStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReceivedStatus::PENDING_WORKFLOW:
            val = "PENDING_WORKFLOW";
            break;
        case eOAIReceivedStatus::PENDING_ACCEPT:
            val = "PENDING_ACCEPT";
            break;
        case eOAIReceivedStatus::REJECTED:
            val = "REJECTED";
            break;
        case eOAIReceivedStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIReceivedStatus::FAILED_WORKFLOW:
            val = "FAILED_WORKFLOW";
            break;
        case eOAIReceivedStatus::DELETED:
            val = "DELETED";
            break;
        case eOAIReceivedStatus::DISABLED:
            val = "DISABLED";
            break;
        case eOAIReceivedStatus::WORKFLOW_COMPLETED:
            val = "WORKFLOW_COMPLETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReceivedStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReceivedStatus::eOAIReceivedStatus OAIReceivedStatus::getValue() const {
    return m_value;
}

void OAIReceivedStatus::setValue(const OAIReceivedStatus::eOAIReceivedStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReceivedStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIReceivedStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
