/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceivedMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceivedMetadata::OAIReceivedMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceivedMetadata::OAIReceivedMetadata() {
    this->initializeModel();
}

OAIReceivedMetadata::~OAIReceivedMetadata() {}

void OAIReceivedMetadata::initializeModel() {

    m_received_status_isSet = false;
    m_received_status_isValid = false;

    m_received_status_reason_isSet = false;
    m_received_status_reason_isValid = false;

    m_allowed_operations_isSet = false;
    m_allowed_operations_isValid = false;
}

void OAIReceivedMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceivedMetadata::fromJsonObject(QJsonObject json) {

    m_received_status_isValid = ::OpenAPI::fromJsonValue(m_received_status, json[QString("ReceivedStatus")]);
    m_received_status_isSet = !json[QString("ReceivedStatus")].isNull() && m_received_status_isValid;

    m_received_status_reason_isValid = ::OpenAPI::fromJsonValue(m_received_status_reason, json[QString("ReceivedStatusReason")]);
    m_received_status_reason_isSet = !json[QString("ReceivedStatusReason")].isNull() && m_received_status_reason_isValid;

    m_allowed_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_operations, json[QString("AllowedOperations")]);
    m_allowed_operations_isSet = !json[QString("AllowedOperations")].isNull() && m_allowed_operations_isValid;
}

QString OAIReceivedMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceivedMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_received_status.isSet()) {
        obj.insert(QString("ReceivedStatus"), ::OpenAPI::toJsonValue(m_received_status));
    }
    if (m_received_status_reason_isSet) {
        obj.insert(QString("ReceivedStatusReason"), ::OpenAPI::toJsonValue(m_received_status_reason));
    }
    if (m_allowed_operations.isSet()) {
        obj.insert(QString("AllowedOperations"), ::OpenAPI::toJsonValue(m_allowed_operations));
    }
    return obj;
}

OAIReceivedStatus OAIReceivedMetadata::getReceivedStatus() const {
    return m_received_status;
}
void OAIReceivedMetadata::setReceivedStatus(const OAIReceivedStatus &received_status) {
    m_received_status = received_status;
    m_received_status_isSet = true;
}

bool OAIReceivedMetadata::is_received_status_Set() const{
    return m_received_status_isSet;
}

bool OAIReceivedMetadata::is_received_status_Valid() const{
    return m_received_status_isValid;
}

QString OAIReceivedMetadata::getReceivedStatusReason() const {
    return m_received_status_reason;
}
void OAIReceivedMetadata::setReceivedStatusReason(const QString &received_status_reason) {
    m_received_status_reason = received_status_reason;
    m_received_status_reason_isSet = true;
}

bool OAIReceivedMetadata::is_received_status_reason_Set() const{
    return m_received_status_reason_isSet;
}

bool OAIReceivedMetadata::is_received_status_reason_Valid() const{
    return m_received_status_reason_isValid;
}

QList OAIReceivedMetadata::getAllowedOperations() const {
    return m_allowed_operations;
}
void OAIReceivedMetadata::setAllowedOperations(const QList &allowed_operations) {
    m_allowed_operations = allowed_operations;
    m_allowed_operations_isSet = true;
}

bool OAIReceivedMetadata::is_allowed_operations_Set() const{
    return m_allowed_operations_isSet;
}

bool OAIReceivedMetadata::is_allowed_operations_Valid() const{
    return m_allowed_operations_isValid;
}

bool OAIReceivedMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_received_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceivedMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
