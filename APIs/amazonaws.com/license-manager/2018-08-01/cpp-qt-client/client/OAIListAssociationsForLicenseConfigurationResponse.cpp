/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAssociationsForLicenseConfigurationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAssociationsForLicenseConfigurationResponse::OAIListAssociationsForLicenseConfigurationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAssociationsForLicenseConfigurationResponse::OAIListAssociationsForLicenseConfigurationResponse() {
    this->initializeModel();
}

OAIListAssociationsForLicenseConfigurationResponse::~OAIListAssociationsForLicenseConfigurationResponse() {}

void OAIListAssociationsForLicenseConfigurationResponse::initializeModel() {

    m_license_configuration_associations_isSet = false;
    m_license_configuration_associations_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAssociationsForLicenseConfigurationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAssociationsForLicenseConfigurationResponse::fromJsonObject(QJsonObject json) {

    m_license_configuration_associations_isValid = ::OpenAPI::fromJsonValue(m_license_configuration_associations, json[QString("LicenseConfigurationAssociations")]);
    m_license_configuration_associations_isSet = !json[QString("LicenseConfigurationAssociations")].isNull() && m_license_configuration_associations_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAssociationsForLicenseConfigurationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAssociationsForLicenseConfigurationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_license_configuration_associations.isSet()) {
        obj.insert(QString("LicenseConfigurationAssociations"), ::OpenAPI::toJsonValue(m_license_configuration_associations));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAssociationsForLicenseConfigurationResponse::getLicenseConfigurationAssociations() const {
    return m_license_configuration_associations;
}
void OAIListAssociationsForLicenseConfigurationResponse::setLicenseConfigurationAssociations(const QList &license_configuration_associations) {
    m_license_configuration_associations = license_configuration_associations;
    m_license_configuration_associations_isSet = true;
}

bool OAIListAssociationsForLicenseConfigurationResponse::is_license_configuration_associations_Set() const{
    return m_license_configuration_associations_isSet;
}

bool OAIListAssociationsForLicenseConfigurationResponse::is_license_configuration_associations_Valid() const{
    return m_license_configuration_associations_isValid;
}

QString OAIListAssociationsForLicenseConfigurationResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAssociationsForLicenseConfigurationResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAssociationsForLicenseConfigurationResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAssociationsForLicenseConfigurationResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAssociationsForLicenseConfigurationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_configuration_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAssociationsForLicenseConfigurationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
