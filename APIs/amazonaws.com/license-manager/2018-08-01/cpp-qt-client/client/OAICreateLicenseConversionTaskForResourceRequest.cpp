/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLicenseConversionTaskForResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLicenseConversionTaskForResourceRequest::OAICreateLicenseConversionTaskForResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLicenseConversionTaskForResourceRequest::OAICreateLicenseConversionTaskForResourceRequest() {
    this->initializeModel();
}

OAICreateLicenseConversionTaskForResourceRequest::~OAICreateLicenseConversionTaskForResourceRequest() {}

void OAICreateLicenseConversionTaskForResourceRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_source_license_context_isSet = false;
    m_source_license_context_isValid = false;

    m_destination_license_context_isSet = false;
    m_destination_license_context_isValid = false;
}

void OAICreateLicenseConversionTaskForResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLicenseConversionTaskForResourceRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_source_license_context_isValid = ::OpenAPI::fromJsonValue(m_source_license_context, json[QString("SourceLicenseContext")]);
    m_source_license_context_isSet = !json[QString("SourceLicenseContext")].isNull() && m_source_license_context_isValid;

    m_destination_license_context_isValid = ::OpenAPI::fromJsonValue(m_destination_license_context, json[QString("DestinationLicenseContext")]);
    m_destination_license_context_isSet = !json[QString("DestinationLicenseContext")].isNull() && m_destination_license_context_isValid;
}

QString OAICreateLicenseConversionTaskForResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLicenseConversionTaskForResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_source_license_context.isSet()) {
        obj.insert(QString("SourceLicenseContext"), ::OpenAPI::toJsonValue(m_source_license_context));
    }
    if (m_destination_license_context.isSet()) {
        obj.insert(QString("DestinationLicenseContext"), ::OpenAPI::toJsonValue(m_destination_license_context));
    }
    return obj;
}

QString OAICreateLicenseConversionTaskForResourceRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAICreateLicenseConversionTaskForResourceRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAICreateLicenseConversionTaskForResourceRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAICreateLicenseConversionTaskForResourceRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext OAICreateLicenseConversionTaskForResourceRequest::getSourceLicenseContext() const {
    return m_source_license_context;
}
void OAICreateLicenseConversionTaskForResourceRequest::setSourceLicenseContext(const OAICreateLicenseConversionTaskForResourceRequest_SourceLicenseContext &source_license_context) {
    m_source_license_context = source_license_context;
    m_source_license_context_isSet = true;
}

bool OAICreateLicenseConversionTaskForResourceRequest::is_source_license_context_Set() const{
    return m_source_license_context_isSet;
}

bool OAICreateLicenseConversionTaskForResourceRequest::is_source_license_context_Valid() const{
    return m_source_license_context_isValid;
}

OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext OAICreateLicenseConversionTaskForResourceRequest::getDestinationLicenseContext() const {
    return m_destination_license_context;
}
void OAICreateLicenseConversionTaskForResourceRequest::setDestinationLicenseContext(const OAICreateLicenseConversionTaskForResourceRequest_DestinationLicenseContext &destination_license_context) {
    m_destination_license_context = destination_license_context;
    m_destination_license_context_isSet = true;
}

bool OAICreateLicenseConversionTaskForResourceRequest::is_destination_license_context_Set() const{
    return m_destination_license_context_isSet;
}

bool OAICreateLicenseConversionTaskForResourceRequest::is_destination_license_context_Valid() const{
    return m_destination_license_context_isValid;
}

bool OAICreateLicenseConversionTaskForResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_license_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_license_context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLicenseConversionTaskForResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_source_license_context_isValid && m_destination_license_context_isValid && true;
}

} // namespace OpenAPI
