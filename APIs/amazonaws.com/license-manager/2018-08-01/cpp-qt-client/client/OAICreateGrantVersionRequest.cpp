/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGrantVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGrantVersionRequest::OAICreateGrantVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGrantVersionRequest::OAICreateGrantVersionRequest() {
    this->initializeModel();
}

OAICreateGrantVersionRequest::~OAICreateGrantVersionRequest() {}

void OAICreateGrantVersionRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_grant_arn_isSet = false;
    m_grant_arn_isValid = false;

    m_grant_name_isSet = false;
    m_grant_name_isValid = false;

    m_allowed_operations_isSet = false;
    m_allowed_operations_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAICreateGrantVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGrantVersionRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_grant_arn_isValid = ::OpenAPI::fromJsonValue(m_grant_arn, json[QString("GrantArn")]);
    m_grant_arn_isSet = !json[QString("GrantArn")].isNull() && m_grant_arn_isValid;

    m_grant_name_isValid = ::OpenAPI::fromJsonValue(m_grant_name, json[QString("GrantName")]);
    m_grant_name_isSet = !json[QString("GrantName")].isNull() && m_grant_name_isValid;

    m_allowed_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_operations, json[QString("AllowedOperations")]);
    m_allowed_operations_isSet = !json[QString("AllowedOperations")].isNull() && m_allowed_operations_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("SourceVersion")]);
    m_source_version_isSet = !json[QString("SourceVersion")].isNull() && m_source_version_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;
}

QString OAICreateGrantVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGrantVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_grant_arn_isSet) {
        obj.insert(QString("GrantArn"), ::OpenAPI::toJsonValue(m_grant_arn));
    }
    if (m_grant_name_isSet) {
        obj.insert(QString("GrantName"), ::OpenAPI::toJsonValue(m_grant_name));
    }
    if (m_allowed_operations.isSet()) {
        obj.insert(QString("AllowedOperations"), ::OpenAPI::toJsonValue(m_allowed_operations));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("SourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAICreateGrantVersionRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateGrantVersionRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateGrantVersionRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateGrantVersionRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateGrantVersionRequest::getGrantArn() const {
    return m_grant_arn;
}
void OAICreateGrantVersionRequest::setGrantArn(const QString &grant_arn) {
    m_grant_arn = grant_arn;
    m_grant_arn_isSet = true;
}

bool OAICreateGrantVersionRequest::is_grant_arn_Set() const{
    return m_grant_arn_isSet;
}

bool OAICreateGrantVersionRequest::is_grant_arn_Valid() const{
    return m_grant_arn_isValid;
}

QString OAICreateGrantVersionRequest::getGrantName() const {
    return m_grant_name;
}
void OAICreateGrantVersionRequest::setGrantName(const QString &grant_name) {
    m_grant_name = grant_name;
    m_grant_name_isSet = true;
}

bool OAICreateGrantVersionRequest::is_grant_name_Set() const{
    return m_grant_name_isSet;
}

bool OAICreateGrantVersionRequest::is_grant_name_Valid() const{
    return m_grant_name_isValid;
}

QList OAICreateGrantVersionRequest::getAllowedOperations() const {
    return m_allowed_operations;
}
void OAICreateGrantVersionRequest::setAllowedOperations(const QList &allowed_operations) {
    m_allowed_operations = allowed_operations;
    m_allowed_operations_isSet = true;
}

bool OAICreateGrantVersionRequest::is_allowed_operations_Set() const{
    return m_allowed_operations_isSet;
}

bool OAICreateGrantVersionRequest::is_allowed_operations_Valid() const{
    return m_allowed_operations_isValid;
}

OAIGrantStatus OAICreateGrantVersionRequest::getStatus() const {
    return m_status;
}
void OAICreateGrantVersionRequest::setStatus(const OAIGrantStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateGrantVersionRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateGrantVersionRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAICreateGrantVersionRequest::getStatusReason() const {
    return m_status_reason;
}
void OAICreateGrantVersionRequest::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAICreateGrantVersionRequest::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAICreateGrantVersionRequest::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAICreateGrantVersionRequest::getSourceVersion() const {
    return m_source_version;
}
void OAICreateGrantVersionRequest::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAICreateGrantVersionRequest::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAICreateGrantVersionRequest::is_source_version_Valid() const{
    return m_source_version_isValid;
}

OAICreateGrantVersionRequest_Options OAICreateGrantVersionRequest::getOptions() const {
    return m_options;
}
void OAICreateGrantVersionRequest::setOptions(const OAICreateGrantVersionRequest_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICreateGrantVersionRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAICreateGrantVersionRequest::is_options_Valid() const{
    return m_options_isValid;
}

bool OAICreateGrantVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGrantVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_grant_arn_isValid && true;
}

} // namespace OpenAPI
