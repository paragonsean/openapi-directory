/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowedOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowedOperation::OAIAllowedOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowedOperation::OAIAllowedOperation() {
    this->initializeModel();
}

OAIAllowedOperation::~OAIAllowedOperation() {}

void OAIAllowedOperation::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAllowedOperation::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAllowedOperation::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CreateGrant", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::CREATEGRANT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CheckoutLicense", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::CHECKOUTLICENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CheckoutBorrowLicense", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::CHECKOUTBORROWLICENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CheckInLicense", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::CHECKINLICENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExtendConsumptionLicense", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::EXTENDCONSUMPTIONLICENSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ListPurchasedLicenses", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::LISTPURCHASEDLICENSES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreateToken", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAllowedOperation::CREATETOKEN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAllowedOperation::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAllowedOperation::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAllowedOperation::CREATEGRANT:
            val = "CreateGrant";
            break;
        case eOAIAllowedOperation::CHECKOUTLICENSE:
            val = "CheckoutLicense";
            break;
        case eOAIAllowedOperation::CHECKOUTBORROWLICENSE:
            val = "CheckoutBorrowLicense";
            break;
        case eOAIAllowedOperation::CHECKINLICENSE:
            val = "CheckInLicense";
            break;
        case eOAIAllowedOperation::EXTENDCONSUMPTIONLICENSE:
            val = "ExtendConsumptionLicense";
            break;
        case eOAIAllowedOperation::LISTPURCHASEDLICENSES:
            val = "ListPurchasedLicenses";
            break;
        case eOAIAllowedOperation::CREATETOKEN:
            val = "CreateToken";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAllowedOperation::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAllowedOperation::eOAIAllowedOperation OAIAllowedOperation::getValue() const {
    return m_value;
}

void OAIAllowedOperation::setValue(const OAIAllowedOperation::eOAIAllowedOperation& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAllowedOperation::isSet() const {
    
    return m_value_isSet;
}

bool OAIAllowedOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
