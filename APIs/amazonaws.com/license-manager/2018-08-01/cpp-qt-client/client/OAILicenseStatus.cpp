/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseStatus::OAILicenseStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseStatus::OAILicenseStatus() {
    this->initializeModel();
}

OAILicenseStatus::~OAILicenseStatus() {}

void OAILicenseStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILicenseStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILicenseStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::PENDING_AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEACTIVATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::DEACTIVATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUSPENDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_DELETE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::PENDING_DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILicenseStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILicenseStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILicenseStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILicenseStatus::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAILicenseStatus::PENDING_AVAILABLE:
            val = "PENDING_AVAILABLE";
            break;
        case eOAILicenseStatus::DEACTIVATED:
            val = "DEACTIVATED";
            break;
        case eOAILicenseStatus::SUSPENDED:
            val = "SUSPENDED";
            break;
        case eOAILicenseStatus::EXPIRED:
            val = "EXPIRED";
            break;
        case eOAILicenseStatus::PENDING_DELETE:
            val = "PENDING_DELETE";
            break;
        case eOAILicenseStatus::DELETED:
            val = "DELETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILicenseStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILicenseStatus::eOAILicenseStatus OAILicenseStatus::getValue() const {
    return m_value;
}

void OAILicenseStatus::setValue(const OAILicenseStatus::eOAILicenseStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILicenseStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAILicenseStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
