/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILicenseOperationFailure.h
 *
 * Describes the failure of a license operation.
 */

#ifndef OAILicenseOperationFailure_H
#define OAILicenseOperationFailure_H

#include <QJsonObject>

#include "OAIResourceType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILicenseOperationFailure : public OAIObject {
public:
    OAILicenseOperationFailure();
    OAILicenseOperationFailure(QString json);
    ~OAILicenseOperationFailure() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    OAIResourceType getResourceType() const;
    void setResourceType(const OAIResourceType &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QDateTime getFailureTime() const;
    void setFailureTime(const QDateTime &failure_time);
    bool is_failure_time_Set() const;
    bool is_failure_time_Valid() const;

    QString getOperationName() const;
    void setOperationName(const QString &operation_name);
    bool is_operation_name_Set() const;
    bool is_operation_name_Valid() const;

    QString getResourceOwnerId() const;
    void setResourceOwnerId(const QString &resource_owner_id);
    bool is_resource_owner_id_Set() const;
    bool is_resource_owner_id_Valid() const;

    QString getOperationRequestedBy() const;
    void setOperationRequestedBy(const QString &operation_requested_by);
    bool is_operation_requested_by_Set() const;
    bool is_operation_requested_by_Valid() const;

    QList getMetadataList() const;
    void setMetadataList(const QList &metadata_list);
    bool is_metadata_list_Set() const;
    bool is_metadata_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    OAIResourceType m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QDateTime m_failure_time;
    bool m_failure_time_isSet;
    bool m_failure_time_isValid;

    QString m_operation_name;
    bool m_operation_name_isSet;
    bool m_operation_name_isValid;

    QString m_resource_owner_id;
    bool m_resource_owner_id_isSet;
    bool m_resource_owner_id_isValid;

    QString m_operation_requested_by;
    bool m_operation_requested_by_isSet;
    bool m_operation_requested_by_isValid;

    QList m_metadata_list;
    bool m_metadata_list_isSet;
    bool m_metadata_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILicenseOperationFailure)

#endif // OAILicenseOperationFailure_H
