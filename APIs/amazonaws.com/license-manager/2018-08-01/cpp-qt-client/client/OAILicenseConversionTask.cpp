/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseConversionTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseConversionTask::OAILicenseConversionTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseConversionTask::OAILicenseConversionTask() {
    this->initializeModel();
}

OAILicenseConversionTask::~OAILicenseConversionTask() {}

void OAILicenseConversionTask::initializeModel() {

    m_license_conversion_task_id_isSet = false;
    m_license_conversion_task_id_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_source_license_context_isSet = false;
    m_source_license_context_isValid = false;

    m_destination_license_context_isSet = false;
    m_destination_license_context_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_license_conversion_time_isSet = false;
    m_license_conversion_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;
}

void OAILicenseConversionTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseConversionTask::fromJsonObject(QJsonObject json) {

    m_license_conversion_task_id_isValid = ::OpenAPI::fromJsonValue(m_license_conversion_task_id, json[QString("LicenseConversionTaskId")]);
    m_license_conversion_task_id_isSet = !json[QString("LicenseConversionTaskId")].isNull() && m_license_conversion_task_id_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_source_license_context_isValid = ::OpenAPI::fromJsonValue(m_source_license_context, json[QString("SourceLicenseContext")]);
    m_source_license_context_isSet = !json[QString("SourceLicenseContext")].isNull() && m_source_license_context_isValid;

    m_destination_license_context_isValid = ::OpenAPI::fromJsonValue(m_destination_license_context, json[QString("DestinationLicenseContext")]);
    m_destination_license_context_isSet = !json[QString("DestinationLicenseContext")].isNull() && m_destination_license_context_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_license_conversion_time_isValid = ::OpenAPI::fromJsonValue(m_license_conversion_time, json[QString("LicenseConversionTime")]);
    m_license_conversion_time_isSet = !json[QString("LicenseConversionTime")].isNull() && m_license_conversion_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;
}

QString OAILicenseConversionTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseConversionTask::asJsonObject() const {
    QJsonObject obj;
    if (m_license_conversion_task_id_isSet) {
        obj.insert(QString("LicenseConversionTaskId"), ::OpenAPI::toJsonValue(m_license_conversion_task_id));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_source_license_context.isSet()) {
        obj.insert(QString("SourceLicenseContext"), ::OpenAPI::toJsonValue(m_source_license_context));
    }
    if (m_destination_license_context.isSet()) {
        obj.insert(QString("DestinationLicenseContext"), ::OpenAPI::toJsonValue(m_destination_license_context));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_license_conversion_time_isSet) {
        obj.insert(QString("LicenseConversionTime"), ::OpenAPI::toJsonValue(m_license_conversion_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    return obj;
}

QString OAILicenseConversionTask::getLicenseConversionTaskId() const {
    return m_license_conversion_task_id;
}
void OAILicenseConversionTask::setLicenseConversionTaskId(const QString &license_conversion_task_id) {
    m_license_conversion_task_id = license_conversion_task_id;
    m_license_conversion_task_id_isSet = true;
}

bool OAILicenseConversionTask::is_license_conversion_task_id_Set() const{
    return m_license_conversion_task_id_isSet;
}

bool OAILicenseConversionTask::is_license_conversion_task_id_Valid() const{
    return m_license_conversion_task_id_isValid;
}

QString OAILicenseConversionTask::getResourceArn() const {
    return m_resource_arn;
}
void OAILicenseConversionTask::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAILicenseConversionTask::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAILicenseConversionTask::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAILicenseConversionTask_SourceLicenseContext OAILicenseConversionTask::getSourceLicenseContext() const {
    return m_source_license_context;
}
void OAILicenseConversionTask::setSourceLicenseContext(const OAILicenseConversionTask_SourceLicenseContext &source_license_context) {
    m_source_license_context = source_license_context;
    m_source_license_context_isSet = true;
}

bool OAILicenseConversionTask::is_source_license_context_Set() const{
    return m_source_license_context_isSet;
}

bool OAILicenseConversionTask::is_source_license_context_Valid() const{
    return m_source_license_context_isValid;
}

OAILicenseConversionTask_DestinationLicenseContext OAILicenseConversionTask::getDestinationLicenseContext() const {
    return m_destination_license_context;
}
void OAILicenseConversionTask::setDestinationLicenseContext(const OAILicenseConversionTask_DestinationLicenseContext &destination_license_context) {
    m_destination_license_context = destination_license_context;
    m_destination_license_context_isSet = true;
}

bool OAILicenseConversionTask::is_destination_license_context_Set() const{
    return m_destination_license_context_isSet;
}

bool OAILicenseConversionTask::is_destination_license_context_Valid() const{
    return m_destination_license_context_isValid;
}

OAILicenseConversionTaskStatus OAILicenseConversionTask::getStatus() const {
    return m_status;
}
void OAILicenseConversionTask::setStatus(const OAILicenseConversionTaskStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILicenseConversionTask::is_status_Set() const{
    return m_status_isSet;
}

bool OAILicenseConversionTask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILicenseConversionTask::getStatusMessage() const {
    return m_status_message;
}
void OAILicenseConversionTask::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAILicenseConversionTask::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAILicenseConversionTask::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAILicenseConversionTask::getStartTime() const {
    return m_start_time;
}
void OAILicenseConversionTask::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAILicenseConversionTask::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAILicenseConversionTask::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAILicenseConversionTask::getLicenseConversionTime() const {
    return m_license_conversion_time;
}
void OAILicenseConversionTask::setLicenseConversionTime(const QDateTime &license_conversion_time) {
    m_license_conversion_time = license_conversion_time;
    m_license_conversion_time_isSet = true;
}

bool OAILicenseConversionTask::is_license_conversion_time_Set() const{
    return m_license_conversion_time_isSet;
}

bool OAILicenseConversionTask::is_license_conversion_time_Valid() const{
    return m_license_conversion_time_isValid;
}

QDateTime OAILicenseConversionTask::getEndTime() const {
    return m_end_time;
}
void OAILicenseConversionTask::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAILicenseConversionTask::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAILicenseConversionTask::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAILicenseConversionTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_conversion_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_license_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_license_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_conversion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseConversionTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
