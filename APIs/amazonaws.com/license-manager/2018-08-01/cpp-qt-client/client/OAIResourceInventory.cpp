/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceInventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceInventory::OAIResourceInventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceInventory::OAIResourceInventory() {
    this->initializeModel();
}

OAIResourceInventory::~OAIResourceInventory() {}

void OAIResourceInventory::initializeModel() {

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_resource_owning_account_id_isSet = false;
    m_resource_owning_account_id_isValid = false;
}

void OAIResourceInventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceInventory::fromJsonObject(QJsonObject json) {

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("ResourceId")]);
    m_resource_id_isSet = !json[QString("ResourceId")].isNull() && m_resource_id_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("PlatformVersion")]);
    m_platform_version_isSet = !json[QString("PlatformVersion")].isNull() && m_platform_version_isValid;

    m_resource_owning_account_id_isValid = ::OpenAPI::fromJsonValue(m_resource_owning_account_id, json[QString("ResourceOwningAccountId")]);
    m_resource_owning_account_id_isSet = !json[QString("ResourceOwningAccountId")].isNull() && m_resource_owning_account_id_isValid;
}

QString OAIResourceInventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceInventory::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_id_isSet) {
        obj.insert(QString("ResourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_platform_isSet) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("PlatformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_resource_owning_account_id_isSet) {
        obj.insert(QString("ResourceOwningAccountId"), ::OpenAPI::toJsonValue(m_resource_owning_account_id));
    }
    return obj;
}

QString OAIResourceInventory::getResourceId() const {
    return m_resource_id;
}
void OAIResourceInventory::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceInventory::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceInventory::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAIResourceType OAIResourceInventory::getResourceType() const {
    return m_resource_type;
}
void OAIResourceInventory::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceInventory::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceInventory::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIResourceInventory::getResourceArn() const {
    return m_resource_arn;
}
void OAIResourceInventory::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIResourceInventory::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIResourceInventory::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIResourceInventory::getPlatform() const {
    return m_platform;
}
void OAIResourceInventory::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIResourceInventory::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIResourceInventory::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIResourceInventory::getPlatformVersion() const {
    return m_platform_version;
}
void OAIResourceInventory::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIResourceInventory::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIResourceInventory::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

QString OAIResourceInventory::getResourceOwningAccountId() const {
    return m_resource_owning_account_id;
}
void OAIResourceInventory::setResourceOwningAccountId(const QString &resource_owning_account_id) {
    m_resource_owning_account_id = resource_owning_account_id;
    m_resource_owning_account_id_isSet = true;
}

bool OAIResourceInventory::is_resource_owning_account_id_Set() const{
    return m_resource_owning_account_id_isSet;
}

bool OAIResourceInventory::is_resource_owning_account_id_Valid() const{
    return m_resource_owning_account_id_isValid;
}

bool OAIResourceInventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owning_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceInventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
