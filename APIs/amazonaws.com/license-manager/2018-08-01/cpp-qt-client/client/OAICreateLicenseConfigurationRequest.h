/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLicenseConfigurationRequest.h
 *
 * 
 */

#ifndef OAICreateLicenseConfigurationRequest_H
#define OAICreateLicenseConfigurationRequest_H

#include <QJsonObject>

#include "OAILicenseCountingType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateLicenseConfigurationRequest : public OAIObject {
public:
    OAICreateLicenseConfigurationRequest();
    OAICreateLicenseConfigurationRequest(QString json);
    ~OAICreateLicenseConfigurationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAILicenseCountingType getLicenseCountingType() const;
    void setLicenseCountingType(const OAILicenseCountingType &license_counting_type);
    bool is_license_counting_type_Set() const;
    bool is_license_counting_type_Valid() const;

    qint32 getLicenseCount() const;
    void setLicenseCount(const qint32 &license_count);
    bool is_license_count_Set() const;
    bool is_license_count_Valid() const;

    bool getLicenseCountHardLimit() const;
    void setLicenseCountHardLimit(const bool &license_count_hard_limit);
    bool is_license_count_hard_limit_Set() const;
    bool is_license_count_hard_limit_Valid() const;

    QList getLicenseRules() const;
    void setLicenseRules(const QList &license_rules);
    bool is_license_rules_Set() const;
    bool is_license_rules_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    bool getDisassociateWhenNotFound() const;
    void setDisassociateWhenNotFound(const bool &disassociate_when_not_found);
    bool is_disassociate_when_not_found_Set() const;
    bool is_disassociate_when_not_found_Valid() const;

    QList getProductInformationList() const;
    void setProductInformationList(const QList &product_information_list);
    bool is_product_information_list_Set() const;
    bool is_product_information_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAILicenseCountingType m_license_counting_type;
    bool m_license_counting_type_isSet;
    bool m_license_counting_type_isValid;

    qint32 m_license_count;
    bool m_license_count_isSet;
    bool m_license_count_isValid;

    bool m_license_count_hard_limit;
    bool m_license_count_hard_limit_isSet;
    bool m_license_count_hard_limit_isValid;

    QList m_license_rules;
    bool m_license_rules_isSet;
    bool m_license_rules_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    bool m_disassociate_when_not_found;
    bool m_disassociate_when_not_found_isSet;
    bool m_disassociate_when_not_found_isValid;

    QList m_product_information_list;
    bool m_product_information_list_isSet;
    bool m_product_information_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLicenseConfigurationRequest)

#endif // OAICreateLicenseConfigurationRequest_H
