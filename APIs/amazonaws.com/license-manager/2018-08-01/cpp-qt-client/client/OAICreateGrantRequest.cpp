/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateGrantRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateGrantRequest::OAICreateGrantRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateGrantRequest::OAICreateGrantRequest() {
    this->initializeModel();
}

OAICreateGrantRequest::~OAICreateGrantRequest() {}

void OAICreateGrantRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_grant_name_isSet = false;
    m_grant_name_isValid = false;

    m_license_arn_isSet = false;
    m_license_arn_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_home_region_isSet = false;
    m_home_region_isValid = false;

    m_allowed_operations_isSet = false;
    m_allowed_operations_isValid = false;
}

void OAICreateGrantRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateGrantRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_grant_name_isValid = ::OpenAPI::fromJsonValue(m_grant_name, json[QString("GrantName")]);
    m_grant_name_isSet = !json[QString("GrantName")].isNull() && m_grant_name_isValid;

    m_license_arn_isValid = ::OpenAPI::fromJsonValue(m_license_arn, json[QString("LicenseArn")]);
    m_license_arn_isSet = !json[QString("LicenseArn")].isNull() && m_license_arn_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("Principals")]);
    m_principals_isSet = !json[QString("Principals")].isNull() && m_principals_isValid;

    m_home_region_isValid = ::OpenAPI::fromJsonValue(m_home_region, json[QString("HomeRegion")]);
    m_home_region_isSet = !json[QString("HomeRegion")].isNull() && m_home_region_isValid;

    m_allowed_operations_isValid = ::OpenAPI::fromJsonValue(m_allowed_operations, json[QString("AllowedOperations")]);
    m_allowed_operations_isSet = !json[QString("AllowedOperations")].isNull() && m_allowed_operations_isValid;
}

QString OAICreateGrantRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateGrantRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_grant_name_isSet) {
        obj.insert(QString("GrantName"), ::OpenAPI::toJsonValue(m_grant_name));
    }
    if (m_license_arn_isSet) {
        obj.insert(QString("LicenseArn"), ::OpenAPI::toJsonValue(m_license_arn));
    }
    if (m_principals.isSet()) {
        obj.insert(QString("Principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_home_region_isSet) {
        obj.insert(QString("HomeRegion"), ::OpenAPI::toJsonValue(m_home_region));
    }
    if (m_allowed_operations.isSet()) {
        obj.insert(QString("AllowedOperations"), ::OpenAPI::toJsonValue(m_allowed_operations));
    }
    return obj;
}

QString OAICreateGrantRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateGrantRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateGrantRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateGrantRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateGrantRequest::getGrantName() const {
    return m_grant_name;
}
void OAICreateGrantRequest::setGrantName(const QString &grant_name) {
    m_grant_name = grant_name;
    m_grant_name_isSet = true;
}

bool OAICreateGrantRequest::is_grant_name_Set() const{
    return m_grant_name_isSet;
}

bool OAICreateGrantRequest::is_grant_name_Valid() const{
    return m_grant_name_isValid;
}

QString OAICreateGrantRequest::getLicenseArn() const {
    return m_license_arn;
}
void OAICreateGrantRequest::setLicenseArn(const QString &license_arn) {
    m_license_arn = license_arn;
    m_license_arn_isSet = true;
}

bool OAICreateGrantRequest::is_license_arn_Set() const{
    return m_license_arn_isSet;
}

bool OAICreateGrantRequest::is_license_arn_Valid() const{
    return m_license_arn_isValid;
}

QList OAICreateGrantRequest::getPrincipals() const {
    return m_principals;
}
void OAICreateGrantRequest::setPrincipals(const QList &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAICreateGrantRequest::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAICreateGrantRequest::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAICreateGrantRequest::getHomeRegion() const {
    return m_home_region;
}
void OAICreateGrantRequest::setHomeRegion(const QString &home_region) {
    m_home_region = home_region;
    m_home_region_isSet = true;
}

bool OAICreateGrantRequest::is_home_region_Set() const{
    return m_home_region_isSet;
}

bool OAICreateGrantRequest::is_home_region_Valid() const{
    return m_home_region_isValid;
}

QList OAICreateGrantRequest::getAllowedOperations() const {
    return m_allowed_operations;
}
void OAICreateGrantRequest::setAllowedOperations(const QList &allowed_operations) {
    m_allowed_operations = allowed_operations;
    m_allowed_operations_isSet = true;
}

bool OAICreateGrantRequest::is_allowed_operations_Set() const{
    return m_allowed_operations_isSet;
}

bool OAICreateGrantRequest::is_allowed_operations_Valid() const{
    return m_allowed_operations_isValid;
}

bool OAICreateGrantRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateGrantRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_grant_name_isValid && m_license_arn_isValid && m_principals_isValid && m_home_region_isValid && m_allowed_operations_isValid && true;
}

} // namespace OpenAPI
