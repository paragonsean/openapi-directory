/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutBorrowLicenseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutBorrowLicenseResponse::OAICheckoutBorrowLicenseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutBorrowLicenseResponse::OAICheckoutBorrowLicenseResponse() {
    this->initializeModel();
}

OAICheckoutBorrowLicenseResponse::~OAICheckoutBorrowLicenseResponse() {}

void OAICheckoutBorrowLicenseResponse::initializeModel() {

    m_license_arn_isSet = false;
    m_license_arn_isValid = false;

    m_license_consumption_token_isSet = false;
    m_license_consumption_token_isValid = false;

    m_entitlements_allowed_isSet = false;
    m_entitlements_allowed_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_signed_token_isSet = false;
    m_signed_token_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_checkout_metadata_isSet = false;
    m_checkout_metadata_isValid = false;
}

void OAICheckoutBorrowLicenseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckoutBorrowLicenseResponse::fromJsonObject(QJsonObject json) {

    m_license_arn_isValid = ::OpenAPI::fromJsonValue(m_license_arn, json[QString("LicenseArn")]);
    m_license_arn_isSet = !json[QString("LicenseArn")].isNull() && m_license_arn_isValid;

    m_license_consumption_token_isValid = ::OpenAPI::fromJsonValue(m_license_consumption_token, json[QString("LicenseConsumptionToken")]);
    m_license_consumption_token_isSet = !json[QString("LicenseConsumptionToken")].isNull() && m_license_consumption_token_isValid;

    m_entitlements_allowed_isValid = ::OpenAPI::fromJsonValue(m_entitlements_allowed, json[QString("EntitlementsAllowed")]);
    m_entitlements_allowed_isSet = !json[QString("EntitlementsAllowed")].isNull() && m_entitlements_allowed_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;

    m_signed_token_isValid = ::OpenAPI::fromJsonValue(m_signed_token, json[QString("SignedToken")]);
    m_signed_token_isSet = !json[QString("SignedToken")].isNull() && m_signed_token_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("IssuedAt")]);
    m_issued_at_isSet = !json[QString("IssuedAt")].isNull() && m_issued_at_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("Expiration")]);
    m_expiration_isSet = !json[QString("Expiration")].isNull() && m_expiration_isValid;

    m_checkout_metadata_isValid = ::OpenAPI::fromJsonValue(m_checkout_metadata, json[QString("CheckoutMetadata")]);
    m_checkout_metadata_isSet = !json[QString("CheckoutMetadata")].isNull() && m_checkout_metadata_isValid;
}

QString OAICheckoutBorrowLicenseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckoutBorrowLicenseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_license_arn_isSet) {
        obj.insert(QString("LicenseArn"), ::OpenAPI::toJsonValue(m_license_arn));
    }
    if (m_license_consumption_token_isSet) {
        obj.insert(QString("LicenseConsumptionToken"), ::OpenAPI::toJsonValue(m_license_consumption_token));
    }
    if (m_entitlements_allowed.isSet()) {
        obj.insert(QString("EntitlementsAllowed"), ::OpenAPI::toJsonValue(m_entitlements_allowed));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_signed_token_isSet) {
        obj.insert(QString("SignedToken"), ::OpenAPI::toJsonValue(m_signed_token));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("IssuedAt"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("Expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_checkout_metadata.isSet()) {
        obj.insert(QString("CheckoutMetadata"), ::OpenAPI::toJsonValue(m_checkout_metadata));
    }
    return obj;
}

QString OAICheckoutBorrowLicenseResponse::getLicenseArn() const {
    return m_license_arn;
}
void OAICheckoutBorrowLicenseResponse::setLicenseArn(const QString &license_arn) {
    m_license_arn = license_arn;
    m_license_arn_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_license_arn_Set() const{
    return m_license_arn_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_license_arn_Valid() const{
    return m_license_arn_isValid;
}

QString OAICheckoutBorrowLicenseResponse::getLicenseConsumptionToken() const {
    return m_license_consumption_token;
}
void OAICheckoutBorrowLicenseResponse::setLicenseConsumptionToken(const QString &license_consumption_token) {
    m_license_consumption_token = license_consumption_token;
    m_license_consumption_token_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_license_consumption_token_Set() const{
    return m_license_consumption_token_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_license_consumption_token_Valid() const{
    return m_license_consumption_token_isValid;
}

QList OAICheckoutBorrowLicenseResponse::getEntitlementsAllowed() const {
    return m_entitlements_allowed;
}
void OAICheckoutBorrowLicenseResponse::setEntitlementsAllowed(const QList &entitlements_allowed) {
    m_entitlements_allowed = entitlements_allowed;
    m_entitlements_allowed_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_entitlements_allowed_Set() const{
    return m_entitlements_allowed_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_entitlements_allowed_Valid() const{
    return m_entitlements_allowed_isValid;
}

QString OAICheckoutBorrowLicenseResponse::getNodeId() const {
    return m_node_id;
}
void OAICheckoutBorrowLicenseResponse::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAICheckoutBorrowLicenseResponse::getSignedToken() const {
    return m_signed_token;
}
void OAICheckoutBorrowLicenseResponse::setSignedToken(const QString &signed_token) {
    m_signed_token = signed_token;
    m_signed_token_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_signed_token_Set() const{
    return m_signed_token_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_signed_token_Valid() const{
    return m_signed_token_isValid;
}

QString OAICheckoutBorrowLicenseResponse::getIssuedAt() const {
    return m_issued_at;
}
void OAICheckoutBorrowLicenseResponse::setIssuedAt(const QString &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QString OAICheckoutBorrowLicenseResponse::getExpiration() const {
    return m_expiration;
}
void OAICheckoutBorrowLicenseResponse::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QList OAICheckoutBorrowLicenseResponse::getCheckoutMetadata() const {
    return m_checkout_metadata;
}
void OAICheckoutBorrowLicenseResponse::setCheckoutMetadata(const QList &checkout_metadata) {
    m_checkout_metadata = checkout_metadata;
    m_checkout_metadata_isSet = true;
}

bool OAICheckoutBorrowLicenseResponse::is_checkout_metadata_Set() const{
    return m_checkout_metadata_isSet;
}

bool OAICheckoutBorrowLicenseResponse::is_checkout_metadata_Valid() const{
    return m_checkout_metadata_isValid;
}

bool OAICheckoutBorrowLicenseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_consumption_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements_allowed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signed_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckoutBorrowLicenseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
