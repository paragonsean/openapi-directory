/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLicenseConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLicenseConfigurationRequest::OAIUpdateLicenseConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLicenseConfigurationRequest::OAIUpdateLicenseConfigurationRequest() {
    this->initializeModel();
}

OAIUpdateLicenseConfigurationRequest::~OAIUpdateLicenseConfigurationRequest() {}

void OAIUpdateLicenseConfigurationRequest::initializeModel() {

    m_license_configuration_arn_isSet = false;
    m_license_configuration_arn_isValid = false;

    m_license_configuration_status_isSet = false;
    m_license_configuration_status_isValid = false;

    m_license_rules_isSet = false;
    m_license_rules_isValid = false;

    m_license_count_isSet = false;
    m_license_count_isValid = false;

    m_license_count_hard_limit_isSet = false;
    m_license_count_hard_limit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_product_information_list_isSet = false;
    m_product_information_list_isValid = false;

    m_disassociate_when_not_found_isSet = false;
    m_disassociate_when_not_found_isValid = false;
}

void OAIUpdateLicenseConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLicenseConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_license_configuration_arn_isValid = ::OpenAPI::fromJsonValue(m_license_configuration_arn, json[QString("LicenseConfigurationArn")]);
    m_license_configuration_arn_isSet = !json[QString("LicenseConfigurationArn")].isNull() && m_license_configuration_arn_isValid;

    m_license_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_license_configuration_status, json[QString("LicenseConfigurationStatus")]);
    m_license_configuration_status_isSet = !json[QString("LicenseConfigurationStatus")].isNull() && m_license_configuration_status_isValid;

    m_license_rules_isValid = ::OpenAPI::fromJsonValue(m_license_rules, json[QString("LicenseRules")]);
    m_license_rules_isSet = !json[QString("LicenseRules")].isNull() && m_license_rules_isValid;

    m_license_count_isValid = ::OpenAPI::fromJsonValue(m_license_count, json[QString("LicenseCount")]);
    m_license_count_isSet = !json[QString("LicenseCount")].isNull() && m_license_count_isValid;

    m_license_count_hard_limit_isValid = ::OpenAPI::fromJsonValue(m_license_count_hard_limit, json[QString("LicenseCountHardLimit")]);
    m_license_count_hard_limit_isSet = !json[QString("LicenseCountHardLimit")].isNull() && m_license_count_hard_limit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_product_information_list_isValid = ::OpenAPI::fromJsonValue(m_product_information_list, json[QString("ProductInformationList")]);
    m_product_information_list_isSet = !json[QString("ProductInformationList")].isNull() && m_product_information_list_isValid;

    m_disassociate_when_not_found_isValid = ::OpenAPI::fromJsonValue(m_disassociate_when_not_found, json[QString("DisassociateWhenNotFound")]);
    m_disassociate_when_not_found_isSet = !json[QString("DisassociateWhenNotFound")].isNull() && m_disassociate_when_not_found_isValid;
}

QString OAIUpdateLicenseConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLicenseConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_license_configuration_arn_isSet) {
        obj.insert(QString("LicenseConfigurationArn"), ::OpenAPI::toJsonValue(m_license_configuration_arn));
    }
    if (m_license_configuration_status.isSet()) {
        obj.insert(QString("LicenseConfigurationStatus"), ::OpenAPI::toJsonValue(m_license_configuration_status));
    }
    if (m_license_rules.isSet()) {
        obj.insert(QString("LicenseRules"), ::OpenAPI::toJsonValue(m_license_rules));
    }
    if (m_license_count_isSet) {
        obj.insert(QString("LicenseCount"), ::OpenAPI::toJsonValue(m_license_count));
    }
    if (m_license_count_hard_limit_isSet) {
        obj.insert(QString("LicenseCountHardLimit"), ::OpenAPI::toJsonValue(m_license_count_hard_limit));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_product_information_list.isSet()) {
        obj.insert(QString("ProductInformationList"), ::OpenAPI::toJsonValue(m_product_information_list));
    }
    if (m_disassociate_when_not_found_isSet) {
        obj.insert(QString("DisassociateWhenNotFound"), ::OpenAPI::toJsonValue(m_disassociate_when_not_found));
    }
    return obj;
}

QString OAIUpdateLicenseConfigurationRequest::getLicenseConfigurationArn() const {
    return m_license_configuration_arn;
}
void OAIUpdateLicenseConfigurationRequest::setLicenseConfigurationArn(const QString &license_configuration_arn) {
    m_license_configuration_arn = license_configuration_arn;
    m_license_configuration_arn_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_configuration_arn_Set() const{
    return m_license_configuration_arn_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_configuration_arn_Valid() const{
    return m_license_configuration_arn_isValid;
}

OAILicenseConfigurationStatus OAIUpdateLicenseConfigurationRequest::getLicenseConfigurationStatus() const {
    return m_license_configuration_status;
}
void OAIUpdateLicenseConfigurationRequest::setLicenseConfigurationStatus(const OAILicenseConfigurationStatus &license_configuration_status) {
    m_license_configuration_status = license_configuration_status;
    m_license_configuration_status_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_configuration_status_Set() const{
    return m_license_configuration_status_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_configuration_status_Valid() const{
    return m_license_configuration_status_isValid;
}

QList OAIUpdateLicenseConfigurationRequest::getLicenseRules() const {
    return m_license_rules;
}
void OAIUpdateLicenseConfigurationRequest::setLicenseRules(const QList &license_rules) {
    m_license_rules = license_rules;
    m_license_rules_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_rules_Set() const{
    return m_license_rules_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_rules_Valid() const{
    return m_license_rules_isValid;
}

qint32 OAIUpdateLicenseConfigurationRequest::getLicenseCount() const {
    return m_license_count;
}
void OAIUpdateLicenseConfigurationRequest::setLicenseCount(const qint32 &license_count) {
    m_license_count = license_count;
    m_license_count_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_count_Set() const{
    return m_license_count_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_count_Valid() const{
    return m_license_count_isValid;
}

bool OAIUpdateLicenseConfigurationRequest::getLicenseCountHardLimit() const {
    return m_license_count_hard_limit;
}
void OAIUpdateLicenseConfigurationRequest::setLicenseCountHardLimit(const bool &license_count_hard_limit) {
    m_license_count_hard_limit = license_count_hard_limit;
    m_license_count_hard_limit_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_count_hard_limit_Set() const{
    return m_license_count_hard_limit_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_license_count_hard_limit_Valid() const{
    return m_license_count_hard_limit_isValid;
}

QString OAIUpdateLicenseConfigurationRequest::getName() const {
    return m_name;
}
void OAIUpdateLicenseConfigurationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateLicenseConfigurationRequest::getDescription() const {
    return m_description;
}
void OAIUpdateLicenseConfigurationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateLicenseConfigurationRequest::getProductInformationList() const {
    return m_product_information_list;
}
void OAIUpdateLicenseConfigurationRequest::setProductInformationList(const QList &product_information_list) {
    m_product_information_list = product_information_list;
    m_product_information_list_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_product_information_list_Set() const{
    return m_product_information_list_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_product_information_list_Valid() const{
    return m_product_information_list_isValid;
}

bool OAIUpdateLicenseConfigurationRequest::getDisassociateWhenNotFound() const {
    return m_disassociate_when_not_found;
}
void OAIUpdateLicenseConfigurationRequest::setDisassociateWhenNotFound(const bool &disassociate_when_not_found) {
    m_disassociate_when_not_found = disassociate_when_not_found;
    m_disassociate_when_not_found_isSet = true;
}

bool OAIUpdateLicenseConfigurationRequest::is_disassociate_when_not_found_Set() const{
    return m_disassociate_when_not_found_isSet;
}

bool OAIUpdateLicenseConfigurationRequest::is_disassociate_when_not_found_Valid() const{
    return m_disassociate_when_not_found_isValid;
}

bool OAIUpdateLicenseConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_configuration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_count_hard_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_information_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disassociate_when_not_found_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLicenseConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_license_configuration_arn_isValid && true;
}

} // namespace OpenAPI
