/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitlementUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitlementUsage::OAIEntitlementUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitlementUsage::OAIEntitlementUsage() {
    this->initializeModel();
}

OAIEntitlementUsage::~OAIEntitlementUsage() {}

void OAIEntitlementUsage::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_consumed_value_isSet = false;
    m_consumed_value_isValid = false;

    m_max_count_isSet = false;
    m_max_count_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIEntitlementUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitlementUsage::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_consumed_value_isValid = ::OpenAPI::fromJsonValue(m_consumed_value, json[QString("ConsumedValue")]);
    m_consumed_value_isSet = !json[QString("ConsumedValue")].isNull() && m_consumed_value_isValid;

    m_max_count_isValid = ::OpenAPI::fromJsonValue(m_max_count, json[QString("MaxCount")]);
    m_max_count_isSet = !json[QString("MaxCount")].isNull() && m_max_count_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;
}

QString OAIEntitlementUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitlementUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_consumed_value_isSet) {
        obj.insert(QString("ConsumedValue"), ::OpenAPI::toJsonValue(m_consumed_value));
    }
    if (m_max_count_isSet) {
        obj.insert(QString("MaxCount"), ::OpenAPI::toJsonValue(m_max_count));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIEntitlementUsage::getName() const {
    return m_name;
}
void OAIEntitlementUsage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntitlementUsage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntitlementUsage::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEntitlementUsage::getConsumedValue() const {
    return m_consumed_value;
}
void OAIEntitlementUsage::setConsumedValue(const QString &consumed_value) {
    m_consumed_value = consumed_value;
    m_consumed_value_isSet = true;
}

bool OAIEntitlementUsage::is_consumed_value_Set() const{
    return m_consumed_value_isSet;
}

bool OAIEntitlementUsage::is_consumed_value_Valid() const{
    return m_consumed_value_isValid;
}

QString OAIEntitlementUsage::getMaxCount() const {
    return m_max_count;
}
void OAIEntitlementUsage::setMaxCount(const QString &max_count) {
    m_max_count = max_count;
    m_max_count_isSet = true;
}

bool OAIEntitlementUsage::is_max_count_Set() const{
    return m_max_count_isSet;
}

bool OAIEntitlementUsage::is_max_count_Valid() const{
    return m_max_count_isValid;
}

OAIEntitlementDataUnit OAIEntitlementUsage::getUnit() const {
    return m_unit;
}
void OAIEntitlementUsage::setUnit(const OAIEntitlementDataUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIEntitlementUsage::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIEntitlementUsage::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIEntitlementUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitlementUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_consumed_value_isValid && m_unit_isValid && true;
}

} // namespace OpenAPI
