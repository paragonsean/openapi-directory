/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseConfigurationUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseConfigurationUsage::OAILicenseConfigurationUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseConfigurationUsage::OAILicenseConfigurationUsage() {
    this->initializeModel();
}

OAILicenseConfigurationUsage::~OAILicenseConfigurationUsage() {}

void OAILicenseConfigurationUsage::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_status_isSet = false;
    m_resource_status_isValid = false;

    m_resource_owner_id_isSet = false;
    m_resource_owner_id_isValid = false;

    m_association_time_isSet = false;
    m_association_time_isValid = false;

    m_consumed_licenses_isSet = false;
    m_consumed_licenses_isValid = false;
}

void OAILicenseConfigurationUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseConfigurationUsage::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_status_isValid = ::OpenAPI::fromJsonValue(m_resource_status, json[QString("ResourceStatus")]);
    m_resource_status_isSet = !json[QString("ResourceStatus")].isNull() && m_resource_status_isValid;

    m_resource_owner_id_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_id, json[QString("ResourceOwnerId")]);
    m_resource_owner_id_isSet = !json[QString("ResourceOwnerId")].isNull() && m_resource_owner_id_isValid;

    m_association_time_isValid = ::OpenAPI::fromJsonValue(m_association_time, json[QString("AssociationTime")]);
    m_association_time_isSet = !json[QString("AssociationTime")].isNull() && m_association_time_isValid;

    m_consumed_licenses_isValid = ::OpenAPI::fromJsonValue(m_consumed_licenses, json[QString("ConsumedLicenses")]);
    m_consumed_licenses_isSet = !json[QString("ConsumedLicenses")].isNull() && m_consumed_licenses_isValid;
}

QString OAILicenseConfigurationUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseConfigurationUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_status_isSet) {
        obj.insert(QString("ResourceStatus"), ::OpenAPI::toJsonValue(m_resource_status));
    }
    if (m_resource_owner_id_isSet) {
        obj.insert(QString("ResourceOwnerId"), ::OpenAPI::toJsonValue(m_resource_owner_id));
    }
    if (m_association_time_isSet) {
        obj.insert(QString("AssociationTime"), ::OpenAPI::toJsonValue(m_association_time));
    }
    if (m_consumed_licenses_isSet) {
        obj.insert(QString("ConsumedLicenses"), ::OpenAPI::toJsonValue(m_consumed_licenses));
    }
    return obj;
}

QString OAILicenseConfigurationUsage::getResourceArn() const {
    return m_resource_arn;
}
void OAILicenseConfigurationUsage::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAILicenseConfigurationUsage::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAILicenseConfigurationUsage::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIResourceType OAILicenseConfigurationUsage::getResourceType() const {
    return m_resource_type;
}
void OAILicenseConfigurationUsage::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAILicenseConfigurationUsage::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAILicenseConfigurationUsage::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAILicenseConfigurationUsage::getResourceStatus() const {
    return m_resource_status;
}
void OAILicenseConfigurationUsage::setResourceStatus(const QString &resource_status) {
    m_resource_status = resource_status;
    m_resource_status_isSet = true;
}

bool OAILicenseConfigurationUsage::is_resource_status_Set() const{
    return m_resource_status_isSet;
}

bool OAILicenseConfigurationUsage::is_resource_status_Valid() const{
    return m_resource_status_isValid;
}

QString OAILicenseConfigurationUsage::getResourceOwnerId() const {
    return m_resource_owner_id;
}
void OAILicenseConfigurationUsage::setResourceOwnerId(const QString &resource_owner_id) {
    m_resource_owner_id = resource_owner_id;
    m_resource_owner_id_isSet = true;
}

bool OAILicenseConfigurationUsage::is_resource_owner_id_Set() const{
    return m_resource_owner_id_isSet;
}

bool OAILicenseConfigurationUsage::is_resource_owner_id_Valid() const{
    return m_resource_owner_id_isValid;
}

QDateTime OAILicenseConfigurationUsage::getAssociationTime() const {
    return m_association_time;
}
void OAILicenseConfigurationUsage::setAssociationTime(const QDateTime &association_time) {
    m_association_time = association_time;
    m_association_time_isSet = true;
}

bool OAILicenseConfigurationUsage::is_association_time_Set() const{
    return m_association_time_isSet;
}

bool OAILicenseConfigurationUsage::is_association_time_Valid() const{
    return m_association_time_isValid;
}

qint32 OAILicenseConfigurationUsage::getConsumedLicenses() const {
    return m_consumed_licenses;
}
void OAILicenseConfigurationUsage::setConsumedLicenses(const qint32 &consumed_licenses) {
    m_consumed_licenses = consumed_licenses;
    m_consumed_licenses_isSet = true;
}

bool OAILicenseConfigurationUsage::is_consumed_licenses_Set() const{
    return m_consumed_licenses_isSet;
}

bool OAILicenseConfigurationUsage::is_consumed_licenses_Valid() const{
    return m_consumed_licenses_isValid;
}

bool OAILicenseConfigurationUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_licenses_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseConfigurationUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
