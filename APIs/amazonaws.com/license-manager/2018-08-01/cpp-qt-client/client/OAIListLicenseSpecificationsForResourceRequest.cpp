/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLicenseSpecificationsForResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLicenseSpecificationsForResourceRequest::OAIListLicenseSpecificationsForResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLicenseSpecificationsForResourceRequest::OAIListLicenseSpecificationsForResourceRequest() {
    this->initializeModel();
}

OAIListLicenseSpecificationsForResourceRequest::~OAIListLicenseSpecificationsForResourceRequest() {}

void OAIListLicenseSpecificationsForResourceRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListLicenseSpecificationsForResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLicenseSpecificationsForResourceRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListLicenseSpecificationsForResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLicenseSpecificationsForResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListLicenseSpecificationsForResourceRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIListLicenseSpecificationsForResourceRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIListLicenseSpecificationsForResourceRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIListLicenseSpecificationsForResourceRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

qint32 OAIListLicenseSpecificationsForResourceRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListLicenseSpecificationsForResourceRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListLicenseSpecificationsForResourceRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListLicenseSpecificationsForResourceRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListLicenseSpecificationsForResourceRequest::getNextToken() const {
    return m_next_token;
}
void OAIListLicenseSpecificationsForResourceRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListLicenseSpecificationsForResourceRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListLicenseSpecificationsForResourceRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListLicenseSpecificationsForResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLicenseSpecificationsForResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
