/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTokenResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTokenResponse::OAICreateTokenResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTokenResponse::OAICreateTokenResponse() {
    this->initializeModel();
}

OAICreateTokenResponse::~OAICreateTokenResponse() {}

void OAICreateTokenResponse::initializeModel() {

    m_token_id_isSet = false;
    m_token_id_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAICreateTokenResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTokenResponse::fromJsonObject(QJsonObject json) {

    m_token_id_isValid = ::OpenAPI::fromJsonValue(m_token_id, json[QString("TokenId")]);
    m_token_id_isSet = !json[QString("TokenId")].isNull() && m_token_id_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("TokenType")]);
    m_token_type_isSet = !json[QString("TokenType")].isNull() && m_token_type_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;
}

QString OAICreateTokenResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTokenResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_token_id_isSet) {
        obj.insert(QString("TokenId"), ::OpenAPI::toJsonValue(m_token_id));
    }
    if (m_token_type.isSet()) {
        obj.insert(QString("TokenType"), ::OpenAPI::toJsonValue(m_token_type));
    }
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAICreateTokenResponse::getTokenId() const {
    return m_token_id;
}
void OAICreateTokenResponse::setTokenId(const QString &token_id) {
    m_token_id = token_id;
    m_token_id_isSet = true;
}

bool OAICreateTokenResponse::is_token_id_Set() const{
    return m_token_id_isSet;
}

bool OAICreateTokenResponse::is_token_id_Valid() const{
    return m_token_id_isValid;
}

OAITokenType OAICreateTokenResponse::getTokenType() const {
    return m_token_type;
}
void OAICreateTokenResponse::setTokenType(const OAITokenType &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAICreateTokenResponse::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAICreateTokenResponse::is_token_type_Valid() const{
    return m_token_type_isValid;
}

QString OAICreateTokenResponse::getToken() const {
    return m_token;
}
void OAICreateTokenResponse::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAICreateTokenResponse::is_token_Set() const{
    return m_token_isSet;
}

bool OAICreateTokenResponse::is_token_Valid() const{
    return m_token_isValid;
}

bool OAICreateTokenResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTokenResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
