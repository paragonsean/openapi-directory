/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateServiceSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateServiceSettingsRequest::OAIUpdateServiceSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateServiceSettingsRequest::OAIUpdateServiceSettingsRequest() {
    this->initializeModel();
}

OAIUpdateServiceSettingsRequest::~OAIUpdateServiceSettingsRequest() {}

void OAIUpdateServiceSettingsRequest::initializeModel() {

    m_s3_bucket_arn_isSet = false;
    m_s3_bucket_arn_isValid = false;

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_organization_configuration_isSet = false;
    m_organization_configuration_isValid = false;

    m_enable_cross_accounts_discovery_isSet = false;
    m_enable_cross_accounts_discovery_isValid = false;
}

void OAIUpdateServiceSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateServiceSettingsRequest::fromJsonObject(QJsonObject json) {

    m_s3_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_arn, json[QString("S3BucketArn")]);
    m_s3_bucket_arn_isSet = !json[QString("S3BucketArn")].isNull() && m_s3_bucket_arn_isValid;

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicArn")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicArn")].isNull() && m_sns_topic_arn_isValid;

    m_organization_configuration_isValid = ::OpenAPI::fromJsonValue(m_organization_configuration, json[QString("OrganizationConfiguration")]);
    m_organization_configuration_isSet = !json[QString("OrganizationConfiguration")].isNull() && m_organization_configuration_isValid;

    m_enable_cross_accounts_discovery_isValid = ::OpenAPI::fromJsonValue(m_enable_cross_accounts_discovery, json[QString("EnableCrossAccountsDiscovery")]);
    m_enable_cross_accounts_discovery_isSet = !json[QString("EnableCrossAccountsDiscovery")].isNull() && m_enable_cross_accounts_discovery_isValid;
}

QString OAIUpdateServiceSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateServiceSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_arn_isSet) {
        obj.insert(QString("S3BucketArn"), ::OpenAPI::toJsonValue(m_s3_bucket_arn));
    }
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicArn"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_organization_configuration.isSet()) {
        obj.insert(QString("OrganizationConfiguration"), ::OpenAPI::toJsonValue(m_organization_configuration));
    }
    if (m_enable_cross_accounts_discovery_isSet) {
        obj.insert(QString("EnableCrossAccountsDiscovery"), ::OpenAPI::toJsonValue(m_enable_cross_accounts_discovery));
    }
    return obj;
}

QString OAIUpdateServiceSettingsRequest::getS3BucketArn() const {
    return m_s3_bucket_arn;
}
void OAIUpdateServiceSettingsRequest::setS3BucketArn(const QString &s3_bucket_arn) {
    m_s3_bucket_arn = s3_bucket_arn;
    m_s3_bucket_arn_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_s3_bucket_arn_Set() const{
    return m_s3_bucket_arn_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_s3_bucket_arn_Valid() const{
    return m_s3_bucket_arn_isValid;
}

QString OAIUpdateServiceSettingsRequest::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIUpdateServiceSettingsRequest::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

OAIUpdateServiceSettingsRequest_OrganizationConfiguration OAIUpdateServiceSettingsRequest::getOrganizationConfiguration() const {
    return m_organization_configuration;
}
void OAIUpdateServiceSettingsRequest::setOrganizationConfiguration(const OAIUpdateServiceSettingsRequest_OrganizationConfiguration &organization_configuration) {
    m_organization_configuration = organization_configuration;
    m_organization_configuration_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_organization_configuration_Set() const{
    return m_organization_configuration_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_organization_configuration_Valid() const{
    return m_organization_configuration_isValid;
}

bool OAIUpdateServiceSettingsRequest::getEnableCrossAccountsDiscovery() const {
    return m_enable_cross_accounts_discovery;
}
void OAIUpdateServiceSettingsRequest::setEnableCrossAccountsDiscovery(const bool &enable_cross_accounts_discovery) {
    m_enable_cross_accounts_discovery = enable_cross_accounts_discovery;
    m_enable_cross_accounts_discovery_isSet = true;
}

bool OAIUpdateServiceSettingsRequest::is_enable_cross_accounts_discovery_Set() const{
    return m_enable_cross_accounts_discovery_isSet;
}

bool OAIUpdateServiceSettingsRequest::is_enable_cross_accounts_discovery_Valid() const{
    return m_enable_cross_accounts_discovery_isValid;
}

bool OAIUpdateServiceSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_cross_accounts_discovery_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateServiceSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
