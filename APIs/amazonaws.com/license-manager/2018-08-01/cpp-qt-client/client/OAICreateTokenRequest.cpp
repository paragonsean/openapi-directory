/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTokenRequest::OAICreateTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTokenRequest::OAICreateTokenRequest() {
    this->initializeModel();
}

OAICreateTokenRequest::~OAICreateTokenRequest() {}

void OAICreateTokenRequest::initializeModel() {

    m_license_arn_isSet = false;
    m_license_arn_isValid = false;

    m_role_arns_isSet = false;
    m_role_arns_isValid = false;

    m_expiration_in_days_isSet = false;
    m_expiration_in_days_isValid = false;

    m_token_properties_isSet = false;
    m_token_properties_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreateTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTokenRequest::fromJsonObject(QJsonObject json) {

    m_license_arn_isValid = ::OpenAPI::fromJsonValue(m_license_arn, json[QString("LicenseArn")]);
    m_license_arn_isSet = !json[QString("LicenseArn")].isNull() && m_license_arn_isValid;

    m_role_arns_isValid = ::OpenAPI::fromJsonValue(m_role_arns, json[QString("RoleArns")]);
    m_role_arns_isSet = !json[QString("RoleArns")].isNull() && m_role_arns_isValid;

    m_expiration_in_days_isValid = ::OpenAPI::fromJsonValue(m_expiration_in_days, json[QString("ExpirationInDays")]);
    m_expiration_in_days_isSet = !json[QString("ExpirationInDays")].isNull() && m_expiration_in_days_isValid;

    m_token_properties_isValid = ::OpenAPI::fromJsonValue(m_token_properties, json[QString("TokenProperties")]);
    m_token_properties_isSet = !json[QString("TokenProperties")].isNull() && m_token_properties_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICreateTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_license_arn_isSet) {
        obj.insert(QString("LicenseArn"), ::OpenAPI::toJsonValue(m_license_arn));
    }
    if (m_role_arns.isSet()) {
        obj.insert(QString("RoleArns"), ::OpenAPI::toJsonValue(m_role_arns));
    }
    if (m_expiration_in_days_isSet) {
        obj.insert(QString("ExpirationInDays"), ::OpenAPI::toJsonValue(m_expiration_in_days));
    }
    if (m_token_properties.isSet()) {
        obj.insert(QString("TokenProperties"), ::OpenAPI::toJsonValue(m_token_properties));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICreateTokenRequest::getLicenseArn() const {
    return m_license_arn;
}
void OAICreateTokenRequest::setLicenseArn(const QString &license_arn) {
    m_license_arn = license_arn;
    m_license_arn_isSet = true;
}

bool OAICreateTokenRequest::is_license_arn_Set() const{
    return m_license_arn_isSet;
}

bool OAICreateTokenRequest::is_license_arn_Valid() const{
    return m_license_arn_isValid;
}

QList OAICreateTokenRequest::getRoleArns() const {
    return m_role_arns;
}
void OAICreateTokenRequest::setRoleArns(const QList &role_arns) {
    m_role_arns = role_arns;
    m_role_arns_isSet = true;
}

bool OAICreateTokenRequest::is_role_arns_Set() const{
    return m_role_arns_isSet;
}

bool OAICreateTokenRequest::is_role_arns_Valid() const{
    return m_role_arns_isValid;
}

qint32 OAICreateTokenRequest::getExpirationInDays() const {
    return m_expiration_in_days;
}
void OAICreateTokenRequest::setExpirationInDays(const qint32 &expiration_in_days) {
    m_expiration_in_days = expiration_in_days;
    m_expiration_in_days_isSet = true;
}

bool OAICreateTokenRequest::is_expiration_in_days_Set() const{
    return m_expiration_in_days_isSet;
}

bool OAICreateTokenRequest::is_expiration_in_days_Valid() const{
    return m_expiration_in_days_isValid;
}

QList OAICreateTokenRequest::getTokenProperties() const {
    return m_token_properties;
}
void OAICreateTokenRequest::setTokenProperties(const QList &token_properties) {
    m_token_properties = token_properties;
    m_token_properties_isSet = true;
}

bool OAICreateTokenRequest::is_token_properties_Set() const{
    return m_token_properties_isSet;
}

bool OAICreateTokenRequest::is_token_properties_Valid() const{
    return m_token_properties_isValid;
}

QString OAICreateTokenRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateTokenRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateTokenRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateTokenRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreateTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_license_arn_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
