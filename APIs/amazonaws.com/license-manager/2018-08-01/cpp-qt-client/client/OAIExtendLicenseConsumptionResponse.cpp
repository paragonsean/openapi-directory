/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtendLicenseConsumptionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtendLicenseConsumptionResponse::OAIExtendLicenseConsumptionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtendLicenseConsumptionResponse::OAIExtendLicenseConsumptionResponse() {
    this->initializeModel();
}

OAIExtendLicenseConsumptionResponse::~OAIExtendLicenseConsumptionResponse() {}

void OAIExtendLicenseConsumptionResponse::initializeModel() {

    m_license_consumption_token_isSet = false;
    m_license_consumption_token_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;
}

void OAIExtendLicenseConsumptionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtendLicenseConsumptionResponse::fromJsonObject(QJsonObject json) {

    m_license_consumption_token_isValid = ::OpenAPI::fromJsonValue(m_license_consumption_token, json[QString("LicenseConsumptionToken")]);
    m_license_consumption_token_isSet = !json[QString("LicenseConsumptionToken")].isNull() && m_license_consumption_token_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("Expiration")]);
    m_expiration_isSet = !json[QString("Expiration")].isNull() && m_expiration_isValid;
}

QString OAIExtendLicenseConsumptionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtendLicenseConsumptionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_license_consumption_token_isSet) {
        obj.insert(QString("LicenseConsumptionToken"), ::OpenAPI::toJsonValue(m_license_consumption_token));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("Expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    return obj;
}

QString OAIExtendLicenseConsumptionResponse::getLicenseConsumptionToken() const {
    return m_license_consumption_token;
}
void OAIExtendLicenseConsumptionResponse::setLicenseConsumptionToken(const QString &license_consumption_token) {
    m_license_consumption_token = license_consumption_token;
    m_license_consumption_token_isSet = true;
}

bool OAIExtendLicenseConsumptionResponse::is_license_consumption_token_Set() const{
    return m_license_consumption_token_isSet;
}

bool OAIExtendLicenseConsumptionResponse::is_license_consumption_token_Valid() const{
    return m_license_consumption_token_isValid;
}

QString OAIExtendLicenseConsumptionResponse::getExpiration() const {
    return m_expiration;
}
void OAIExtendLicenseConsumptionResponse::setExpiration(const QString &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIExtendLicenseConsumptionResponse::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIExtendLicenseConsumptionResponse::is_expiration_Valid() const{
    return m_expiration_isValid;
}

bool OAIExtendLicenseConsumptionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_consumption_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtendLicenseConsumptionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
