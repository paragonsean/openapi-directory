/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLicenseManagerReportGeneratorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLicenseManagerReportGeneratorRequest::OAIUpdateLicenseManagerReportGeneratorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLicenseManagerReportGeneratorRequest::OAIUpdateLicenseManagerReportGeneratorRequest() {
    this->initializeModel();
}

OAIUpdateLicenseManagerReportGeneratorRequest::~OAIUpdateLicenseManagerReportGeneratorRequest() {}

void OAIUpdateLicenseManagerReportGeneratorRequest::initializeModel() {

    m_license_manager_report_generator_arn_isSet = false;
    m_license_manager_report_generator_arn_isValid = false;

    m_report_generator_name_isSet = false;
    m_report_generator_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_report_context_isSet = false;
    m_report_context_isValid = false;

    m_report_frequency_isSet = false;
    m_report_frequency_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIUpdateLicenseManagerReportGeneratorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLicenseManagerReportGeneratorRequest::fromJsonObject(QJsonObject json) {

    m_license_manager_report_generator_arn_isValid = ::OpenAPI::fromJsonValue(m_license_manager_report_generator_arn, json[QString("LicenseManagerReportGeneratorArn")]);
    m_license_manager_report_generator_arn_isSet = !json[QString("LicenseManagerReportGeneratorArn")].isNull() && m_license_manager_report_generator_arn_isValid;

    m_report_generator_name_isValid = ::OpenAPI::fromJsonValue(m_report_generator_name, json[QString("ReportGeneratorName")]);
    m_report_generator_name_isSet = !json[QString("ReportGeneratorName")].isNull() && m_report_generator_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_report_context_isValid = ::OpenAPI::fromJsonValue(m_report_context, json[QString("ReportContext")]);
    m_report_context_isSet = !json[QString("ReportContext")].isNull() && m_report_context_isValid;

    m_report_frequency_isValid = ::OpenAPI::fromJsonValue(m_report_frequency, json[QString("ReportFrequency")]);
    m_report_frequency_isSet = !json[QString("ReportFrequency")].isNull() && m_report_frequency_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIUpdateLicenseManagerReportGeneratorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLicenseManagerReportGeneratorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_license_manager_report_generator_arn_isSet) {
        obj.insert(QString("LicenseManagerReportGeneratorArn"), ::OpenAPI::toJsonValue(m_license_manager_report_generator_arn));
    }
    if (m_report_generator_name_isSet) {
        obj.insert(QString("ReportGeneratorName"), ::OpenAPI::toJsonValue(m_report_generator_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_report_context.isSet()) {
        obj.insert(QString("ReportContext"), ::OpenAPI::toJsonValue(m_report_context));
    }
    if (m_report_frequency.isSet()) {
        obj.insert(QString("ReportFrequency"), ::OpenAPI::toJsonValue(m_report_frequency));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIUpdateLicenseManagerReportGeneratorRequest::getLicenseManagerReportGeneratorArn() const {
    return m_license_manager_report_generator_arn;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setLicenseManagerReportGeneratorArn(const QString &license_manager_report_generator_arn) {
    m_license_manager_report_generator_arn = license_manager_report_generator_arn;
    m_license_manager_report_generator_arn_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_license_manager_report_generator_arn_Set() const{
    return m_license_manager_report_generator_arn_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_license_manager_report_generator_arn_Valid() const{
    return m_license_manager_report_generator_arn_isValid;
}

QString OAIUpdateLicenseManagerReportGeneratorRequest::getReportGeneratorName() const {
    return m_report_generator_name;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setReportGeneratorName(const QString &report_generator_name) {
    m_report_generator_name = report_generator_name;
    m_report_generator_name_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_report_generator_name_Set() const{
    return m_report_generator_name_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_report_generator_name_Valid() const{
    return m_report_generator_name_isValid;
}

QList OAIUpdateLicenseManagerReportGeneratorRequest::getType() const {
    return m_type;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setType(const QList &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIUpdateLicenseManagerReportGeneratorRequest_ReportContext OAIUpdateLicenseManagerReportGeneratorRequest::getReportContext() const {
    return m_report_context;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setReportContext(const OAIUpdateLicenseManagerReportGeneratorRequest_ReportContext &report_context) {
    m_report_context = report_context;
    m_report_context_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_report_context_Set() const{
    return m_report_context_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_report_context_Valid() const{
    return m_report_context_isValid;
}

OAIUpdateLicenseManagerReportGeneratorRequest_ReportFrequency OAIUpdateLicenseManagerReportGeneratorRequest::getReportFrequency() const {
    return m_report_frequency;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setReportFrequency(const OAIUpdateLicenseManagerReportGeneratorRequest_ReportFrequency &report_frequency) {
    m_report_frequency = report_frequency;
    m_report_frequency_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_report_frequency_Set() const{
    return m_report_frequency_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_report_frequency_Valid() const{
    return m_report_frequency_isValid;
}

QString OAIUpdateLicenseManagerReportGeneratorRequest::getClientToken() const {
    return m_client_token;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateLicenseManagerReportGeneratorRequest::getDescription() const {
    return m_description;
}
void OAIUpdateLicenseManagerReportGeneratorRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_manager_report_generator_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_generator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLicenseManagerReportGeneratorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_license_manager_report_generator_arn_isValid && m_report_generator_name_isValid && m_type_isValid && m_report_context_isValid && m_report_frequency_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
