/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutBorrowLicenseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutBorrowLicenseRequest::OAICheckoutBorrowLicenseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutBorrowLicenseRequest::OAICheckoutBorrowLicenseRequest() {
    this->initializeModel();
}

OAICheckoutBorrowLicenseRequest::~OAICheckoutBorrowLicenseRequest() {}

void OAICheckoutBorrowLicenseRequest::initializeModel() {

    m_license_arn_isSet = false;
    m_license_arn_isValid = false;

    m_entitlements_isSet = false;
    m_entitlements_isValid = false;

    m_digital_signature_method_isSet = false;
    m_digital_signature_method_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_checkout_metadata_isSet = false;
    m_checkout_metadata_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICheckoutBorrowLicenseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckoutBorrowLicenseRequest::fromJsonObject(QJsonObject json) {

    m_license_arn_isValid = ::OpenAPI::fromJsonValue(m_license_arn, json[QString("LicenseArn")]);
    m_license_arn_isSet = !json[QString("LicenseArn")].isNull() && m_license_arn_isValid;

    m_entitlements_isValid = ::OpenAPI::fromJsonValue(m_entitlements, json[QString("Entitlements")]);
    m_entitlements_isSet = !json[QString("Entitlements")].isNull() && m_entitlements_isValid;

    m_digital_signature_method_isValid = ::OpenAPI::fromJsonValue(m_digital_signature_method, json[QString("DigitalSignatureMethod")]);
    m_digital_signature_method_isSet = !json[QString("DigitalSignatureMethod")].isNull() && m_digital_signature_method_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;

    m_checkout_metadata_isValid = ::OpenAPI::fromJsonValue(m_checkout_metadata, json[QString("CheckoutMetadata")]);
    m_checkout_metadata_isSet = !json[QString("CheckoutMetadata")].isNull() && m_checkout_metadata_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;
}

QString OAICheckoutBorrowLicenseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckoutBorrowLicenseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_license_arn_isSet) {
        obj.insert(QString("LicenseArn"), ::OpenAPI::toJsonValue(m_license_arn));
    }
    if (m_entitlements.isSet()) {
        obj.insert(QString("Entitlements"), ::OpenAPI::toJsonValue(m_entitlements));
    }
    if (m_digital_signature_method.isSet()) {
        obj.insert(QString("DigitalSignatureMethod"), ::OpenAPI::toJsonValue(m_digital_signature_method));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_checkout_metadata.isSet()) {
        obj.insert(QString("CheckoutMetadata"), ::OpenAPI::toJsonValue(m_checkout_metadata));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAICheckoutBorrowLicenseRequest::getLicenseArn() const {
    return m_license_arn;
}
void OAICheckoutBorrowLicenseRequest::setLicenseArn(const QString &license_arn) {
    m_license_arn = license_arn;
    m_license_arn_isSet = true;
}

bool OAICheckoutBorrowLicenseRequest::is_license_arn_Set() const{
    return m_license_arn_isSet;
}

bool OAICheckoutBorrowLicenseRequest::is_license_arn_Valid() const{
    return m_license_arn_isValid;
}

QList OAICheckoutBorrowLicenseRequest::getEntitlements() const {
    return m_entitlements;
}
void OAICheckoutBorrowLicenseRequest::setEntitlements(const QList &entitlements) {
    m_entitlements = entitlements;
    m_entitlements_isSet = true;
}

bool OAICheckoutBorrowLicenseRequest::is_entitlements_Set() const{
    return m_entitlements_isSet;
}

bool OAICheckoutBorrowLicenseRequest::is_entitlements_Valid() const{
    return m_entitlements_isValid;
}

OAIDigitalSignatureMethod OAICheckoutBorrowLicenseRequest::getDigitalSignatureMethod() const {
    return m_digital_signature_method;
}
void OAICheckoutBorrowLicenseRequest::setDigitalSignatureMethod(const OAIDigitalSignatureMethod &digital_signature_method) {
    m_digital_signature_method = digital_signature_method;
    m_digital_signature_method_isSet = true;
}

bool OAICheckoutBorrowLicenseRequest::is_digital_signature_method_Set() const{
    return m_digital_signature_method_isSet;
}

bool OAICheckoutBorrowLicenseRequest::is_digital_signature_method_Valid() const{
    return m_digital_signature_method_isValid;
}

QString OAICheckoutBorrowLicenseRequest::getNodeId() const {
    return m_node_id;
}
void OAICheckoutBorrowLicenseRequest::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAICheckoutBorrowLicenseRequest::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAICheckoutBorrowLicenseRequest::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList OAICheckoutBorrowLicenseRequest::getCheckoutMetadata() const {
    return m_checkout_metadata;
}
void OAICheckoutBorrowLicenseRequest::setCheckoutMetadata(const QList &checkout_metadata) {
    m_checkout_metadata = checkout_metadata;
    m_checkout_metadata_isSet = true;
}

bool OAICheckoutBorrowLicenseRequest::is_checkout_metadata_Set() const{
    return m_checkout_metadata_isSet;
}

bool OAICheckoutBorrowLicenseRequest::is_checkout_metadata_Valid() const{
    return m_checkout_metadata_isValid;
}

QString OAICheckoutBorrowLicenseRequest::getClientToken() const {
    return m_client_token;
}
void OAICheckoutBorrowLicenseRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICheckoutBorrowLicenseRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICheckoutBorrowLicenseRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICheckoutBorrowLicenseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_digital_signature_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckoutBorrowLicenseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_license_arn_isValid && m_entitlements_isValid && m_digital_signature_method_isValid && m_client_token_isValid && true;
}

} // namespace OpenAPI
