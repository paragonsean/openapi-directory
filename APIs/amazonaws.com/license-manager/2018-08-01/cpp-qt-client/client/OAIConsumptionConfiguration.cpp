/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumptionConfiguration::OAIConsumptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumptionConfiguration::OAIConsumptionConfiguration() {
    this->initializeModel();
}

OAIConsumptionConfiguration::~OAIConsumptionConfiguration() {}

void OAIConsumptionConfiguration::initializeModel() {

    m_renew_type_isSet = false;
    m_renew_type_isValid = false;

    m_provisional_configuration_isSet = false;
    m_provisional_configuration_isValid = false;

    m_borrow_configuration_isSet = false;
    m_borrow_configuration_isValid = false;
}

void OAIConsumptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumptionConfiguration::fromJsonObject(QJsonObject json) {

    m_renew_type_isValid = ::OpenAPI::fromJsonValue(m_renew_type, json[QString("RenewType")]);
    m_renew_type_isSet = !json[QString("RenewType")].isNull() && m_renew_type_isValid;

    m_provisional_configuration_isValid = ::OpenAPI::fromJsonValue(m_provisional_configuration, json[QString("ProvisionalConfiguration")]);
    m_provisional_configuration_isSet = !json[QString("ProvisionalConfiguration")].isNull() && m_provisional_configuration_isValid;

    m_borrow_configuration_isValid = ::OpenAPI::fromJsonValue(m_borrow_configuration, json[QString("BorrowConfiguration")]);
    m_borrow_configuration_isSet = !json[QString("BorrowConfiguration")].isNull() && m_borrow_configuration_isValid;
}

QString OAIConsumptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_renew_type.isSet()) {
        obj.insert(QString("RenewType"), ::OpenAPI::toJsonValue(m_renew_type));
    }
    if (m_provisional_configuration.isSet()) {
        obj.insert(QString("ProvisionalConfiguration"), ::OpenAPI::toJsonValue(m_provisional_configuration));
    }
    if (m_borrow_configuration.isSet()) {
        obj.insert(QString("BorrowConfiguration"), ::OpenAPI::toJsonValue(m_borrow_configuration));
    }
    return obj;
}

OAIRenewType OAIConsumptionConfiguration::getRenewType() const {
    return m_renew_type;
}
void OAIConsumptionConfiguration::setRenewType(const OAIRenewType &renew_type) {
    m_renew_type = renew_type;
    m_renew_type_isSet = true;
}

bool OAIConsumptionConfiguration::is_renew_type_Set() const{
    return m_renew_type_isSet;
}

bool OAIConsumptionConfiguration::is_renew_type_Valid() const{
    return m_renew_type_isValid;
}

OAIConsumptionConfiguration_ProvisionalConfiguration OAIConsumptionConfiguration::getProvisionalConfiguration() const {
    return m_provisional_configuration;
}
void OAIConsumptionConfiguration::setProvisionalConfiguration(const OAIConsumptionConfiguration_ProvisionalConfiguration &provisional_configuration) {
    m_provisional_configuration = provisional_configuration;
    m_provisional_configuration_isSet = true;
}

bool OAIConsumptionConfiguration::is_provisional_configuration_Set() const{
    return m_provisional_configuration_isSet;
}

bool OAIConsumptionConfiguration::is_provisional_configuration_Valid() const{
    return m_provisional_configuration_isValid;
}

OAIConsumptionConfiguration_BorrowConfiguration OAIConsumptionConfiguration::getBorrowConfiguration() const {
    return m_borrow_configuration;
}
void OAIConsumptionConfiguration::setBorrowConfiguration(const OAIConsumptionConfiguration_BorrowConfiguration &borrow_configuration) {
    m_borrow_configuration = borrow_configuration;
    m_borrow_configuration_isSet = true;
}

bool OAIConsumptionConfiguration::is_borrow_configuration_Set() const{
    return m_borrow_configuration_isSet;
}

bool OAIConsumptionConfiguration::is_borrow_configuration_Valid() const{
    return m_borrow_configuration_isValid;
}

bool OAIConsumptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_renew_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisional_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_borrow_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
