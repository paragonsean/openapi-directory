/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedResourceSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedResourceSummary::OAIManagedResourceSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedResourceSummary::OAIManagedResourceSummary() {
    this->initializeModel();
}

OAIManagedResourceSummary::~OAIManagedResourceSummary() {}

void OAIManagedResourceSummary::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_association_count_isSet = false;
    m_association_count_isValid = false;
}

void OAIManagedResourceSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedResourceSummary::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_association_count_isValid = ::OpenAPI::fromJsonValue(m_association_count, json[QString("AssociationCount")]);
    m_association_count_isSet = !json[QString("AssociationCount")].isNull() && m_association_count_isValid;
}

QString OAIManagedResourceSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedResourceSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_association_count_isSet) {
        obj.insert(QString("AssociationCount"), ::OpenAPI::toJsonValue(m_association_count));
    }
    return obj;
}

OAIResourceType OAIManagedResourceSummary::getResourceType() const {
    return m_resource_type;
}
void OAIManagedResourceSummary::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIManagedResourceSummary::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIManagedResourceSummary::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

qint32 OAIManagedResourceSummary::getAssociationCount() const {
    return m_association_count;
}
void OAIManagedResourceSummary::setAssociationCount(const qint32 &association_count) {
    m_association_count = association_count;
    m_association_count_isSet = true;
}

bool OAIManagedResourceSummary::is_association_count_Set() const{
    return m_association_count_isSet;
}

bool OAIManagedResourceSummary::is_association_count_Valid() const{
    return m_association_count_isValid;
}

bool OAIManagedResourceSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedResourceSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
