/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportGenerator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportGenerator::OAIReportGenerator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportGenerator::OAIReportGenerator() {
    this->initializeModel();
}

OAIReportGenerator::~OAIReportGenerator() {}

void OAIReportGenerator::initializeModel() {

    m_report_generator_name_isSet = false;
    m_report_generator_name_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;

    m_report_context_isSet = false;
    m_report_context_isValid = false;

    m_report_frequency_isSet = false;
    m_report_frequency_isValid = false;

    m_license_manager_report_generator_arn_isSet = false;
    m_license_manager_report_generator_arn_isValid = false;

    m_last_run_status_isSet = false;
    m_last_run_status_isValid = false;

    m_last_run_failure_reason_isSet = false;
    m_last_run_failure_reason_isValid = false;

    m_last_report_generation_time_isSet = false;
    m_last_report_generation_time_isValid = false;

    m_report_creator_account_isSet = false;
    m_report_creator_account_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_s3_location_isSet = false;
    m_s3_location_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIReportGenerator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportGenerator::fromJsonObject(QJsonObject json) {

    m_report_generator_name_isValid = ::OpenAPI::fromJsonValue(m_report_generator_name, json[QString("ReportGeneratorName")]);
    m_report_generator_name_isSet = !json[QString("ReportGeneratorName")].isNull() && m_report_generator_name_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("ReportType")]);
    m_report_type_isSet = !json[QString("ReportType")].isNull() && m_report_type_isValid;

    m_report_context_isValid = ::OpenAPI::fromJsonValue(m_report_context, json[QString("ReportContext")]);
    m_report_context_isSet = !json[QString("ReportContext")].isNull() && m_report_context_isValid;

    m_report_frequency_isValid = ::OpenAPI::fromJsonValue(m_report_frequency, json[QString("ReportFrequency")]);
    m_report_frequency_isSet = !json[QString("ReportFrequency")].isNull() && m_report_frequency_isValid;

    m_license_manager_report_generator_arn_isValid = ::OpenAPI::fromJsonValue(m_license_manager_report_generator_arn, json[QString("LicenseManagerReportGeneratorArn")]);
    m_license_manager_report_generator_arn_isSet = !json[QString("LicenseManagerReportGeneratorArn")].isNull() && m_license_manager_report_generator_arn_isValid;

    m_last_run_status_isValid = ::OpenAPI::fromJsonValue(m_last_run_status, json[QString("LastRunStatus")]);
    m_last_run_status_isSet = !json[QString("LastRunStatus")].isNull() && m_last_run_status_isValid;

    m_last_run_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_last_run_failure_reason, json[QString("LastRunFailureReason")]);
    m_last_run_failure_reason_isSet = !json[QString("LastRunFailureReason")].isNull() && m_last_run_failure_reason_isValid;

    m_last_report_generation_time_isValid = ::OpenAPI::fromJsonValue(m_last_report_generation_time, json[QString("LastReportGenerationTime")]);
    m_last_report_generation_time_isSet = !json[QString("LastReportGenerationTime")].isNull() && m_last_report_generation_time_isValid;

    m_report_creator_account_isValid = ::OpenAPI::fromJsonValue(m_report_creator_account, json[QString("ReportCreatorAccount")]);
    m_report_creator_account_isSet = !json[QString("ReportCreatorAccount")].isNull() && m_report_creator_account_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_s3_location_isValid = ::OpenAPI::fromJsonValue(m_s3_location, json[QString("S3Location")]);
    m_s3_location_isSet = !json[QString("S3Location")].isNull() && m_s3_location_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("CreateTime")]);
    m_create_time_isSet = !json[QString("CreateTime")].isNull() && m_create_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIReportGenerator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportGenerator::asJsonObject() const {
    QJsonObject obj;
    if (m_report_generator_name_isSet) {
        obj.insert(QString("ReportGeneratorName"), ::OpenAPI::toJsonValue(m_report_generator_name));
    }
    if (m_report_type.isSet()) {
        obj.insert(QString("ReportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    if (m_report_context.isSet()) {
        obj.insert(QString("ReportContext"), ::OpenAPI::toJsonValue(m_report_context));
    }
    if (m_report_frequency.isSet()) {
        obj.insert(QString("ReportFrequency"), ::OpenAPI::toJsonValue(m_report_frequency));
    }
    if (m_license_manager_report_generator_arn_isSet) {
        obj.insert(QString("LicenseManagerReportGeneratorArn"), ::OpenAPI::toJsonValue(m_license_manager_report_generator_arn));
    }
    if (m_last_run_status_isSet) {
        obj.insert(QString("LastRunStatus"), ::OpenAPI::toJsonValue(m_last_run_status));
    }
    if (m_last_run_failure_reason_isSet) {
        obj.insert(QString("LastRunFailureReason"), ::OpenAPI::toJsonValue(m_last_run_failure_reason));
    }
    if (m_last_report_generation_time_isSet) {
        obj.insert(QString("LastReportGenerationTime"), ::OpenAPI::toJsonValue(m_last_report_generation_time));
    }
    if (m_report_creator_account_isSet) {
        obj.insert(QString("ReportCreatorAccount"), ::OpenAPI::toJsonValue(m_report_creator_account));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_s3_location.isSet()) {
        obj.insert(QString("S3Location"), ::OpenAPI::toJsonValue(m_s3_location));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("CreateTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIReportGenerator::getReportGeneratorName() const {
    return m_report_generator_name;
}
void OAIReportGenerator::setReportGeneratorName(const QString &report_generator_name) {
    m_report_generator_name = report_generator_name;
    m_report_generator_name_isSet = true;
}

bool OAIReportGenerator::is_report_generator_name_Set() const{
    return m_report_generator_name_isSet;
}

bool OAIReportGenerator::is_report_generator_name_Valid() const{
    return m_report_generator_name_isValid;
}

QList OAIReportGenerator::getReportType() const {
    return m_report_type;
}
void OAIReportGenerator::setReportType(const QList &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIReportGenerator::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIReportGenerator::is_report_type_Valid() const{
    return m_report_type_isValid;
}

OAIReportGenerator_ReportContext OAIReportGenerator::getReportContext() const {
    return m_report_context;
}
void OAIReportGenerator::setReportContext(const OAIReportGenerator_ReportContext &report_context) {
    m_report_context = report_context;
    m_report_context_isSet = true;
}

bool OAIReportGenerator::is_report_context_Set() const{
    return m_report_context_isSet;
}

bool OAIReportGenerator::is_report_context_Valid() const{
    return m_report_context_isValid;
}

OAIReportGenerator_ReportFrequency OAIReportGenerator::getReportFrequency() const {
    return m_report_frequency;
}
void OAIReportGenerator::setReportFrequency(const OAIReportGenerator_ReportFrequency &report_frequency) {
    m_report_frequency = report_frequency;
    m_report_frequency_isSet = true;
}

bool OAIReportGenerator::is_report_frequency_Set() const{
    return m_report_frequency_isSet;
}

bool OAIReportGenerator::is_report_frequency_Valid() const{
    return m_report_frequency_isValid;
}

QString OAIReportGenerator::getLicenseManagerReportGeneratorArn() const {
    return m_license_manager_report_generator_arn;
}
void OAIReportGenerator::setLicenseManagerReportGeneratorArn(const QString &license_manager_report_generator_arn) {
    m_license_manager_report_generator_arn = license_manager_report_generator_arn;
    m_license_manager_report_generator_arn_isSet = true;
}

bool OAIReportGenerator::is_license_manager_report_generator_arn_Set() const{
    return m_license_manager_report_generator_arn_isSet;
}

bool OAIReportGenerator::is_license_manager_report_generator_arn_Valid() const{
    return m_license_manager_report_generator_arn_isValid;
}

QString OAIReportGenerator::getLastRunStatus() const {
    return m_last_run_status;
}
void OAIReportGenerator::setLastRunStatus(const QString &last_run_status) {
    m_last_run_status = last_run_status;
    m_last_run_status_isSet = true;
}

bool OAIReportGenerator::is_last_run_status_Set() const{
    return m_last_run_status_isSet;
}

bool OAIReportGenerator::is_last_run_status_Valid() const{
    return m_last_run_status_isValid;
}

QString OAIReportGenerator::getLastRunFailureReason() const {
    return m_last_run_failure_reason;
}
void OAIReportGenerator::setLastRunFailureReason(const QString &last_run_failure_reason) {
    m_last_run_failure_reason = last_run_failure_reason;
    m_last_run_failure_reason_isSet = true;
}

bool OAIReportGenerator::is_last_run_failure_reason_Set() const{
    return m_last_run_failure_reason_isSet;
}

bool OAIReportGenerator::is_last_run_failure_reason_Valid() const{
    return m_last_run_failure_reason_isValid;
}

QString OAIReportGenerator::getLastReportGenerationTime() const {
    return m_last_report_generation_time;
}
void OAIReportGenerator::setLastReportGenerationTime(const QString &last_report_generation_time) {
    m_last_report_generation_time = last_report_generation_time;
    m_last_report_generation_time_isSet = true;
}

bool OAIReportGenerator::is_last_report_generation_time_Set() const{
    return m_last_report_generation_time_isSet;
}

bool OAIReportGenerator::is_last_report_generation_time_Valid() const{
    return m_last_report_generation_time_isValid;
}

QString OAIReportGenerator::getReportCreatorAccount() const {
    return m_report_creator_account;
}
void OAIReportGenerator::setReportCreatorAccount(const QString &report_creator_account) {
    m_report_creator_account = report_creator_account;
    m_report_creator_account_isSet = true;
}

bool OAIReportGenerator::is_report_creator_account_Set() const{
    return m_report_creator_account_isSet;
}

bool OAIReportGenerator::is_report_creator_account_Valid() const{
    return m_report_creator_account_isValid;
}

QString OAIReportGenerator::getDescription() const {
    return m_description;
}
void OAIReportGenerator::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReportGenerator::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReportGenerator::is_description_Valid() const{
    return m_description_isValid;
}

OAIReportGenerator_S3Location OAIReportGenerator::getS3Location() const {
    return m_s3_location;
}
void OAIReportGenerator::setS3Location(const OAIReportGenerator_S3Location &s3_location) {
    m_s3_location = s3_location;
    m_s3_location_isSet = true;
}

bool OAIReportGenerator::is_s3_location_Set() const{
    return m_s3_location_isSet;
}

bool OAIReportGenerator::is_s3_location_Valid() const{
    return m_s3_location_isValid;
}

QString OAIReportGenerator::getCreateTime() const {
    return m_create_time;
}
void OAIReportGenerator::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIReportGenerator::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIReportGenerator::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QList OAIReportGenerator::getTags() const {
    return m_tags;
}
void OAIReportGenerator::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIReportGenerator::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIReportGenerator::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIReportGenerator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_generator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_manager_report_generator_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_report_generation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_creator_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportGenerator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
