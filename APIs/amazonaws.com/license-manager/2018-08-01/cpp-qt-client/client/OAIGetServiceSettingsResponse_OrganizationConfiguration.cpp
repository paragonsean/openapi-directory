/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetServiceSettingsResponse_OrganizationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetServiceSettingsResponse_OrganizationConfiguration::OAIGetServiceSettingsResponse_OrganizationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetServiceSettingsResponse_OrganizationConfiguration::OAIGetServiceSettingsResponse_OrganizationConfiguration() {
    this->initializeModel();
}

OAIGetServiceSettingsResponse_OrganizationConfiguration::~OAIGetServiceSettingsResponse_OrganizationConfiguration() {}

void OAIGetServiceSettingsResponse_OrganizationConfiguration::initializeModel() {

    m_enable_integration_isSet = false;
    m_enable_integration_isValid = false;
}

void OAIGetServiceSettingsResponse_OrganizationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetServiceSettingsResponse_OrganizationConfiguration::fromJsonObject(QJsonObject json) {

    m_enable_integration_isValid = ::OpenAPI::fromJsonValue(m_enable_integration, json[QString("EnableIntegration")]);
    m_enable_integration_isSet = !json[QString("EnableIntegration")].isNull() && m_enable_integration_isValid;
}

QString OAIGetServiceSettingsResponse_OrganizationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetServiceSettingsResponse_OrganizationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_integration_isSet) {
        obj.insert(QString("EnableIntegration"), ::OpenAPI::toJsonValue(m_enable_integration));
    }
    return obj;
}

bool OAIGetServiceSettingsResponse_OrganizationConfiguration::getEnableIntegration() const {
    return m_enable_integration;
}
void OAIGetServiceSettingsResponse_OrganizationConfiguration::setEnableIntegration(const bool &enable_integration) {
    m_enable_integration = enable_integration;
    m_enable_integration_isSet = true;
}

bool OAIGetServiceSettingsResponse_OrganizationConfiguration::is_enable_integration_Set() const{
    return m_enable_integration_isSet;
}

bool OAIGetServiceSettingsResponse_OrganizationConfiguration::is_enable_integration_Valid() const{
    return m_enable_integration_isValid;
}

bool OAIGetServiceSettingsResponse_OrganizationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_integration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetServiceSettingsResponse_OrganizationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_integration_isValid && true;
}

} // namespace OpenAPI
