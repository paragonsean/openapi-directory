/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitlementDataUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitlementDataUnit::OAIEntitlementDataUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitlementDataUnit::OAIEntitlementDataUnit() {
    this->initializeModel();
}

OAIEntitlementDataUnit::~OAIEntitlementDataUnit() {}

void OAIEntitlementDataUnit::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEntitlementDataUnit::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEntitlementDataUnit::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Seconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Microseconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::MICROSECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Milliseconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::MILLISECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::BYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::KILOBYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::MEGABYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::GIGABYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::TERABYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::BITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::KILOBITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::MEGABITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::GIGABITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabits", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::TERABITS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Percent", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::PERCENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::BYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::KILOBYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::MEGABYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::GIGABYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabytes/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::TERABYTES_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::BITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilobits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::KILOBITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Megabits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::MEGABITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gigabits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::GIGABITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Terabits/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::TERABITS_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Count/Second", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEntitlementDataUnit::COUNT_SECOND;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEntitlementDataUnit::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEntitlementDataUnit::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEntitlementDataUnit::COUNT:
            val = "Count";
            break;
        case eOAIEntitlementDataUnit::NONE:
            val = "None";
            break;
        case eOAIEntitlementDataUnit::SECONDS:
            val = "Seconds";
            break;
        case eOAIEntitlementDataUnit::MICROSECONDS:
            val = "Microseconds";
            break;
        case eOAIEntitlementDataUnit::MILLISECONDS:
            val = "Milliseconds";
            break;
        case eOAIEntitlementDataUnit::BYTES:
            val = "Bytes";
            break;
        case eOAIEntitlementDataUnit::KILOBYTES:
            val = "Kilobytes";
            break;
        case eOAIEntitlementDataUnit::MEGABYTES:
            val = "Megabytes";
            break;
        case eOAIEntitlementDataUnit::GIGABYTES:
            val = "Gigabytes";
            break;
        case eOAIEntitlementDataUnit::TERABYTES:
            val = "Terabytes";
            break;
        case eOAIEntitlementDataUnit::BITS:
            val = "Bits";
            break;
        case eOAIEntitlementDataUnit::KILOBITS:
            val = "Kilobits";
            break;
        case eOAIEntitlementDataUnit::MEGABITS:
            val = "Megabits";
            break;
        case eOAIEntitlementDataUnit::GIGABITS:
            val = "Gigabits";
            break;
        case eOAIEntitlementDataUnit::TERABITS:
            val = "Terabits";
            break;
        case eOAIEntitlementDataUnit::PERCENT:
            val = "Percent";
            break;
        case eOAIEntitlementDataUnit::BYTES_SECOND:
            val = "Bytes/Second";
            break;
        case eOAIEntitlementDataUnit::KILOBYTES_SECOND:
            val = "Kilobytes/Second";
            break;
        case eOAIEntitlementDataUnit::MEGABYTES_SECOND:
            val = "Megabytes/Second";
            break;
        case eOAIEntitlementDataUnit::GIGABYTES_SECOND:
            val = "Gigabytes/Second";
            break;
        case eOAIEntitlementDataUnit::TERABYTES_SECOND:
            val = "Terabytes/Second";
            break;
        case eOAIEntitlementDataUnit::BITS_SECOND:
            val = "Bits/Second";
            break;
        case eOAIEntitlementDataUnit::KILOBITS_SECOND:
            val = "Kilobits/Second";
            break;
        case eOAIEntitlementDataUnit::MEGABITS_SECOND:
            val = "Megabits/Second";
            break;
        case eOAIEntitlementDataUnit::GIGABITS_SECOND:
            val = "Gigabits/Second";
            break;
        case eOAIEntitlementDataUnit::TERABITS_SECOND:
            val = "Terabits/Second";
            break;
        case eOAIEntitlementDataUnit::COUNT_SECOND:
            val = "Count/Second";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEntitlementDataUnit::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEntitlementDataUnit::eOAIEntitlementDataUnit OAIEntitlementDataUnit::getValue() const {
    return m_value;
}

void OAIEntitlementDataUnit::setValue(const OAIEntitlementDataUnit::eOAIEntitlementDataUnit& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEntitlementDataUnit::isSet() const {
    
    return m_value_isSet;
}

bool OAIEntitlementDataUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
