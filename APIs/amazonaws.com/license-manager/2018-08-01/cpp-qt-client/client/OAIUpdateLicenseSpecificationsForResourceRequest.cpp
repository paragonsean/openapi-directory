/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLicenseSpecificationsForResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLicenseSpecificationsForResourceRequest::OAIUpdateLicenseSpecificationsForResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLicenseSpecificationsForResourceRequest::OAIUpdateLicenseSpecificationsForResourceRequest() {
    this->initializeModel();
}

OAIUpdateLicenseSpecificationsForResourceRequest::~OAIUpdateLicenseSpecificationsForResourceRequest() {}

void OAIUpdateLicenseSpecificationsForResourceRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_add_license_specifications_isSet = false;
    m_add_license_specifications_isValid = false;

    m_remove_license_specifications_isSet = false;
    m_remove_license_specifications_isValid = false;
}

void OAIUpdateLicenseSpecificationsForResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLicenseSpecificationsForResourceRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_add_license_specifications_isValid = ::OpenAPI::fromJsonValue(m_add_license_specifications, json[QString("AddLicenseSpecifications")]);
    m_add_license_specifications_isSet = !json[QString("AddLicenseSpecifications")].isNull() && m_add_license_specifications_isValid;

    m_remove_license_specifications_isValid = ::OpenAPI::fromJsonValue(m_remove_license_specifications, json[QString("RemoveLicenseSpecifications")]);
    m_remove_license_specifications_isSet = !json[QString("RemoveLicenseSpecifications")].isNull() && m_remove_license_specifications_isValid;
}

QString OAIUpdateLicenseSpecificationsForResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLicenseSpecificationsForResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_add_license_specifications.isSet()) {
        obj.insert(QString("AddLicenseSpecifications"), ::OpenAPI::toJsonValue(m_add_license_specifications));
    }
    if (m_remove_license_specifications.isSet()) {
        obj.insert(QString("RemoveLicenseSpecifications"), ::OpenAPI::toJsonValue(m_remove_license_specifications));
    }
    return obj;
}

QString OAIUpdateLicenseSpecificationsForResourceRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIUpdateLicenseSpecificationsForResourceRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAIUpdateLicenseSpecificationsForResourceRequest::getAddLicenseSpecifications() const {
    return m_add_license_specifications;
}
void OAIUpdateLicenseSpecificationsForResourceRequest::setAddLicenseSpecifications(const QList &add_license_specifications) {
    m_add_license_specifications = add_license_specifications;
    m_add_license_specifications_isSet = true;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::is_add_license_specifications_Set() const{
    return m_add_license_specifications_isSet;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::is_add_license_specifications_Valid() const{
    return m_add_license_specifications_isValid;
}

QList OAIUpdateLicenseSpecificationsForResourceRequest::getRemoveLicenseSpecifications() const {
    return m_remove_license_specifications;
}
void OAIUpdateLicenseSpecificationsForResourceRequest::setRemoveLicenseSpecifications(const QList &remove_license_specifications) {
    m_remove_license_specifications = remove_license_specifications;
    m_remove_license_specifications_isSet = true;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::is_remove_license_specifications_Set() const{
    return m_remove_license_specifications_isSet;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::is_remove_license_specifications_Valid() const{
    return m_remove_license_specifications_isValid;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_license_specifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_license_specifications.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLicenseSpecificationsForResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
