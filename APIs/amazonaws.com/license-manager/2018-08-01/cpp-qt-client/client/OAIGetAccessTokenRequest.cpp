/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAccessTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAccessTokenRequest::OAIGetAccessTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAccessTokenRequest::OAIGetAccessTokenRequest() {
    this->initializeModel();
}

OAIGetAccessTokenRequest::~OAIGetAccessTokenRequest() {}

void OAIGetAccessTokenRequest::initializeModel() {

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_properties_isSet = false;
    m_token_properties_isValid = false;
}

void OAIGetAccessTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAccessTokenRequest::fromJsonObject(QJsonObject json) {

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("Token")]);
    m_token_isSet = !json[QString("Token")].isNull() && m_token_isValid;

    m_token_properties_isValid = ::OpenAPI::fromJsonValue(m_token_properties, json[QString("TokenProperties")]);
    m_token_properties_isSet = !json[QString("TokenProperties")].isNull() && m_token_properties_isValid;
}

QString OAIGetAccessTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAccessTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_token_isSet) {
        obj.insert(QString("Token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_properties.isSet()) {
        obj.insert(QString("TokenProperties"), ::OpenAPI::toJsonValue(m_token_properties));
    }
    return obj;
}

QString OAIGetAccessTokenRequest::getToken() const {
    return m_token;
}
void OAIGetAccessTokenRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIGetAccessTokenRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAIGetAccessTokenRequest::is_token_Valid() const{
    return m_token_isValid;
}

QList OAIGetAccessTokenRequest::getTokenProperties() const {
    return m_token_properties;
}
void OAIGetAccessTokenRequest::setTokenProperties(const QList &token_properties) {
    m_token_properties = token_properties;
    m_token_properties_isSet = true;
}

bool OAIGetAccessTokenRequest::is_token_properties_Set() const{
    return m_token_properties_isSet;
}

bool OAIGetAccessTokenRequest::is_token_properties_Valid() const{
    return m_token_properties_isValid;
}

bool OAIGetAccessTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAccessTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && true;
}

} // namespace OpenAPI
