/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseConfigurationAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseConfigurationAssociation::OAILicenseConfigurationAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseConfigurationAssociation::OAILicenseConfigurationAssociation() {
    this->initializeModel();
}

OAILicenseConfigurationAssociation::~OAILicenseConfigurationAssociation() {}

void OAILicenseConfigurationAssociation::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_owner_id_isSet = false;
    m_resource_owner_id_isValid = false;

    m_association_time_isSet = false;
    m_association_time_isValid = false;

    m_ami_association_scope_isSet = false;
    m_ami_association_scope_isValid = false;
}

void OAILicenseConfigurationAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseConfigurationAssociation::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_resource_owner_id_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_id, json[QString("ResourceOwnerId")]);
    m_resource_owner_id_isSet = !json[QString("ResourceOwnerId")].isNull() && m_resource_owner_id_isValid;

    m_association_time_isValid = ::OpenAPI::fromJsonValue(m_association_time, json[QString("AssociationTime")]);
    m_association_time_isSet = !json[QString("AssociationTime")].isNull() && m_association_time_isValid;

    m_ami_association_scope_isValid = ::OpenAPI::fromJsonValue(m_ami_association_scope, json[QString("AmiAssociationScope")]);
    m_ami_association_scope_isSet = !json[QString("AmiAssociationScope")].isNull() && m_ami_association_scope_isValid;
}

QString OAILicenseConfigurationAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseConfigurationAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_owner_id_isSet) {
        obj.insert(QString("ResourceOwnerId"), ::OpenAPI::toJsonValue(m_resource_owner_id));
    }
    if (m_association_time_isSet) {
        obj.insert(QString("AssociationTime"), ::OpenAPI::toJsonValue(m_association_time));
    }
    if (m_ami_association_scope_isSet) {
        obj.insert(QString("AmiAssociationScope"), ::OpenAPI::toJsonValue(m_ami_association_scope));
    }
    return obj;
}

QString OAILicenseConfigurationAssociation::getResourceArn() const {
    return m_resource_arn;
}
void OAILicenseConfigurationAssociation::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAILicenseConfigurationAssociation::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAILicenseConfigurationAssociation::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIResourceType OAILicenseConfigurationAssociation::getResourceType() const {
    return m_resource_type;
}
void OAILicenseConfigurationAssociation::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAILicenseConfigurationAssociation::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAILicenseConfigurationAssociation::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAILicenseConfigurationAssociation::getResourceOwnerId() const {
    return m_resource_owner_id;
}
void OAILicenseConfigurationAssociation::setResourceOwnerId(const QString &resource_owner_id) {
    m_resource_owner_id = resource_owner_id;
    m_resource_owner_id_isSet = true;
}

bool OAILicenseConfigurationAssociation::is_resource_owner_id_Set() const{
    return m_resource_owner_id_isSet;
}

bool OAILicenseConfigurationAssociation::is_resource_owner_id_Valid() const{
    return m_resource_owner_id_isValid;
}

QDateTime OAILicenseConfigurationAssociation::getAssociationTime() const {
    return m_association_time;
}
void OAILicenseConfigurationAssociation::setAssociationTime(const QDateTime &association_time) {
    m_association_time = association_time;
    m_association_time_isSet = true;
}

bool OAILicenseConfigurationAssociation::is_association_time_Set() const{
    return m_association_time_isSet;
}

bool OAILicenseConfigurationAssociation::is_association_time_Valid() const{
    return m_association_time_isValid;
}

QString OAILicenseConfigurationAssociation::getAmiAssociationScope() const {
    return m_ami_association_scope;
}
void OAILicenseConfigurationAssociation::setAmiAssociationScope(const QString &ami_association_scope) {
    m_ami_association_scope = ami_association_scope;
    m_ami_association_scope_isSet = true;
}

bool OAILicenseConfigurationAssociation::is_ami_association_scope_Set() const{
    return m_ami_association_scope_isSet;
}

bool OAILicenseConfigurationAssociation::is_ami_association_scope_Valid() const{
    return m_ami_association_scope_isValid;
}

bool OAILicenseConfigurationAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_association_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseConfigurationAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
