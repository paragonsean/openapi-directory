/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseOperationFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseOperationFailure::OAILicenseOperationFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseOperationFailure::OAILicenseOperationFailure() {
    this->initializeModel();
}

OAILicenseOperationFailure::~OAILicenseOperationFailure() {}

void OAILicenseOperationFailure::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_failure_time_isSet = false;
    m_failure_time_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_resource_owner_id_isSet = false;
    m_resource_owner_id_isValid = false;

    m_operation_requested_by_isSet = false;
    m_operation_requested_by_isValid = false;

    m_metadata_list_isSet = false;
    m_metadata_list_isValid = false;
}

void OAILicenseOperationFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseOperationFailure::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_failure_time_isValid = ::OpenAPI::fromJsonValue(m_failure_time, json[QString("FailureTime")]);
    m_failure_time_isSet = !json[QString("FailureTime")].isNull() && m_failure_time_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("OperationName")]);
    m_operation_name_isSet = !json[QString("OperationName")].isNull() && m_operation_name_isValid;

    m_resource_owner_id_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_id, json[QString("ResourceOwnerId")]);
    m_resource_owner_id_isSet = !json[QString("ResourceOwnerId")].isNull() && m_resource_owner_id_isValid;

    m_operation_requested_by_isValid = ::OpenAPI::fromJsonValue(m_operation_requested_by, json[QString("OperationRequestedBy")]);
    m_operation_requested_by_isSet = !json[QString("OperationRequestedBy")].isNull() && m_operation_requested_by_isValid;

    m_metadata_list_isValid = ::OpenAPI::fromJsonValue(m_metadata_list, json[QString("MetadataList")]);
    m_metadata_list_isSet = !json[QString("MetadataList")].isNull() && m_metadata_list_isValid;
}

QString OAILicenseOperationFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseOperationFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_failure_time_isSet) {
        obj.insert(QString("FailureTime"), ::OpenAPI::toJsonValue(m_failure_time));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("OperationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_resource_owner_id_isSet) {
        obj.insert(QString("ResourceOwnerId"), ::OpenAPI::toJsonValue(m_resource_owner_id));
    }
    if (m_operation_requested_by_isSet) {
        obj.insert(QString("OperationRequestedBy"), ::OpenAPI::toJsonValue(m_operation_requested_by));
    }
    if (m_metadata_list.isSet()) {
        obj.insert(QString("MetadataList"), ::OpenAPI::toJsonValue(m_metadata_list));
    }
    return obj;
}

QString OAILicenseOperationFailure::getResourceArn() const {
    return m_resource_arn;
}
void OAILicenseOperationFailure::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAILicenseOperationFailure::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAILicenseOperationFailure::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIResourceType OAILicenseOperationFailure::getResourceType() const {
    return m_resource_type;
}
void OAILicenseOperationFailure::setResourceType(const OAIResourceType &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAILicenseOperationFailure::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAILicenseOperationFailure::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAILicenseOperationFailure::getErrorMessage() const {
    return m_error_message;
}
void OAILicenseOperationFailure::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAILicenseOperationFailure::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAILicenseOperationFailure::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QDateTime OAILicenseOperationFailure::getFailureTime() const {
    return m_failure_time;
}
void OAILicenseOperationFailure::setFailureTime(const QDateTime &failure_time) {
    m_failure_time = failure_time;
    m_failure_time_isSet = true;
}

bool OAILicenseOperationFailure::is_failure_time_Set() const{
    return m_failure_time_isSet;
}

bool OAILicenseOperationFailure::is_failure_time_Valid() const{
    return m_failure_time_isValid;
}

QString OAILicenseOperationFailure::getOperationName() const {
    return m_operation_name;
}
void OAILicenseOperationFailure::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAILicenseOperationFailure::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAILicenseOperationFailure::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QString OAILicenseOperationFailure::getResourceOwnerId() const {
    return m_resource_owner_id;
}
void OAILicenseOperationFailure::setResourceOwnerId(const QString &resource_owner_id) {
    m_resource_owner_id = resource_owner_id;
    m_resource_owner_id_isSet = true;
}

bool OAILicenseOperationFailure::is_resource_owner_id_Set() const{
    return m_resource_owner_id_isSet;
}

bool OAILicenseOperationFailure::is_resource_owner_id_Valid() const{
    return m_resource_owner_id_isValid;
}

QString OAILicenseOperationFailure::getOperationRequestedBy() const {
    return m_operation_requested_by;
}
void OAILicenseOperationFailure::setOperationRequestedBy(const QString &operation_requested_by) {
    m_operation_requested_by = operation_requested_by;
    m_operation_requested_by_isSet = true;
}

bool OAILicenseOperationFailure::is_operation_requested_by_Set() const{
    return m_operation_requested_by_isSet;
}

bool OAILicenseOperationFailure::is_operation_requested_by_Valid() const{
    return m_operation_requested_by_isValid;
}

QList OAILicenseOperationFailure::getMetadataList() const {
    return m_metadata_list;
}
void OAILicenseOperationFailure::setMetadataList(const QList &metadata_list) {
    m_metadata_list = metadata_list;
    m_metadata_list_isSet = true;
}

bool OAILicenseOperationFailure::is_metadata_list_Set() const{
    return m_metadata_list_isSet;
}

bool OAILicenseOperationFailure::is_metadata_list_Valid() const{
    return m_metadata_list_isValid;
}

bool OAILicenseOperationFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_requested_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseOperationFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
