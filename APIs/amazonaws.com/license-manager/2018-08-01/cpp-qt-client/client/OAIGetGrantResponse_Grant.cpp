/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetGrantResponse_Grant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetGrantResponse_Grant::OAIGetGrantResponse_Grant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetGrantResponse_Grant::OAIGetGrantResponse_Grant() {
    this->initializeModel();
}

OAIGetGrantResponse_Grant::~OAIGetGrantResponse_Grant() {}

void OAIGetGrantResponse_Grant::initializeModel() {

    m_grant_arn_isSet = false;
    m_grant_arn_isValid = false;

    m_grant_name_isSet = false;
    m_grant_name_isValid = false;

    m_parent_arn_isSet = false;
    m_parent_arn_isValid = false;

    m_license_arn_isSet = false;
    m_license_arn_isValid = false;

    m_grantee_principal_arn_isSet = false;
    m_grantee_principal_arn_isValid = false;

    m_home_region_isSet = false;
    m_home_region_isValid = false;

    m_grant_status_isSet = false;
    m_grant_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_granted_operations_isSet = false;
    m_granted_operations_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIGetGrantResponse_Grant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetGrantResponse_Grant::fromJsonObject(QJsonObject json) {

    m_grant_arn_isValid = ::OpenAPI::fromJsonValue(m_grant_arn, json[QString("GrantArn")]);
    m_grant_arn_isSet = !json[QString("GrantArn")].isNull() && m_grant_arn_isValid;

    m_grant_name_isValid = ::OpenAPI::fromJsonValue(m_grant_name, json[QString("GrantName")]);
    m_grant_name_isSet = !json[QString("GrantName")].isNull() && m_grant_name_isValid;

    m_parent_arn_isValid = ::OpenAPI::fromJsonValue(m_parent_arn, json[QString("ParentArn")]);
    m_parent_arn_isSet = !json[QString("ParentArn")].isNull() && m_parent_arn_isValid;

    m_license_arn_isValid = ::OpenAPI::fromJsonValue(m_license_arn, json[QString("LicenseArn")]);
    m_license_arn_isSet = !json[QString("LicenseArn")].isNull() && m_license_arn_isValid;

    m_grantee_principal_arn_isValid = ::OpenAPI::fromJsonValue(m_grantee_principal_arn, json[QString("GranteePrincipalArn")]);
    m_grantee_principal_arn_isSet = !json[QString("GranteePrincipalArn")].isNull() && m_grantee_principal_arn_isValid;

    m_home_region_isValid = ::OpenAPI::fromJsonValue(m_home_region, json[QString("HomeRegion")]);
    m_home_region_isSet = !json[QString("HomeRegion")].isNull() && m_home_region_isValid;

    m_grant_status_isValid = ::OpenAPI::fromJsonValue(m_grant_status, json[QString("GrantStatus")]);
    m_grant_status_isSet = !json[QString("GrantStatus")].isNull() && m_grant_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_granted_operations_isValid = ::OpenAPI::fromJsonValue(m_granted_operations, json[QString("GrantedOperations")]);
    m_granted_operations_isSet = !json[QString("GrantedOperations")].isNull() && m_granted_operations_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;
}

QString OAIGetGrantResponse_Grant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetGrantResponse_Grant::asJsonObject() const {
    QJsonObject obj;
    if (m_grant_arn_isSet) {
        obj.insert(QString("GrantArn"), ::OpenAPI::toJsonValue(m_grant_arn));
    }
    if (m_grant_name_isSet) {
        obj.insert(QString("GrantName"), ::OpenAPI::toJsonValue(m_grant_name));
    }
    if (m_parent_arn_isSet) {
        obj.insert(QString("ParentArn"), ::OpenAPI::toJsonValue(m_parent_arn));
    }
    if (m_license_arn_isSet) {
        obj.insert(QString("LicenseArn"), ::OpenAPI::toJsonValue(m_license_arn));
    }
    if (m_grantee_principal_arn_isSet) {
        obj.insert(QString("GranteePrincipalArn"), ::OpenAPI::toJsonValue(m_grantee_principal_arn));
    }
    if (m_home_region_isSet) {
        obj.insert(QString("HomeRegion"), ::OpenAPI::toJsonValue(m_home_region));
    }
    if (m_grant_status.isSet()) {
        obj.insert(QString("GrantStatus"), ::OpenAPI::toJsonValue(m_grant_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_granted_operations.isSet()) {
        obj.insert(QString("GrantedOperations"), ::OpenAPI::toJsonValue(m_granted_operations));
    }
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIGetGrantResponse_Grant::getGrantArn() const {
    return m_grant_arn;
}
void OAIGetGrantResponse_Grant::setGrantArn(const QString &grant_arn) {
    m_grant_arn = grant_arn;
    m_grant_arn_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_grant_arn_Set() const{
    return m_grant_arn_isSet;
}

bool OAIGetGrantResponse_Grant::is_grant_arn_Valid() const{
    return m_grant_arn_isValid;
}

QString OAIGetGrantResponse_Grant::getGrantName() const {
    return m_grant_name;
}
void OAIGetGrantResponse_Grant::setGrantName(const QString &grant_name) {
    m_grant_name = grant_name;
    m_grant_name_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_grant_name_Set() const{
    return m_grant_name_isSet;
}

bool OAIGetGrantResponse_Grant::is_grant_name_Valid() const{
    return m_grant_name_isValid;
}

QString OAIGetGrantResponse_Grant::getParentArn() const {
    return m_parent_arn;
}
void OAIGetGrantResponse_Grant::setParentArn(const QString &parent_arn) {
    m_parent_arn = parent_arn;
    m_parent_arn_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_parent_arn_Set() const{
    return m_parent_arn_isSet;
}

bool OAIGetGrantResponse_Grant::is_parent_arn_Valid() const{
    return m_parent_arn_isValid;
}

QString OAIGetGrantResponse_Grant::getLicenseArn() const {
    return m_license_arn;
}
void OAIGetGrantResponse_Grant::setLicenseArn(const QString &license_arn) {
    m_license_arn = license_arn;
    m_license_arn_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_license_arn_Set() const{
    return m_license_arn_isSet;
}

bool OAIGetGrantResponse_Grant::is_license_arn_Valid() const{
    return m_license_arn_isValid;
}

QString OAIGetGrantResponse_Grant::getGranteePrincipalArn() const {
    return m_grantee_principal_arn;
}
void OAIGetGrantResponse_Grant::setGranteePrincipalArn(const QString &grantee_principal_arn) {
    m_grantee_principal_arn = grantee_principal_arn;
    m_grantee_principal_arn_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_grantee_principal_arn_Set() const{
    return m_grantee_principal_arn_isSet;
}

bool OAIGetGrantResponse_Grant::is_grantee_principal_arn_Valid() const{
    return m_grantee_principal_arn_isValid;
}

QString OAIGetGrantResponse_Grant::getHomeRegion() const {
    return m_home_region;
}
void OAIGetGrantResponse_Grant::setHomeRegion(const QString &home_region) {
    m_home_region = home_region;
    m_home_region_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_home_region_Set() const{
    return m_home_region_isSet;
}

bool OAIGetGrantResponse_Grant::is_home_region_Valid() const{
    return m_home_region_isValid;
}

OAIGrantStatus OAIGetGrantResponse_Grant::getGrantStatus() const {
    return m_grant_status;
}
void OAIGetGrantResponse_Grant::setGrantStatus(const OAIGrantStatus &grant_status) {
    m_grant_status = grant_status;
    m_grant_status_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_grant_status_Set() const{
    return m_grant_status_isSet;
}

bool OAIGetGrantResponse_Grant::is_grant_status_Valid() const{
    return m_grant_status_isValid;
}

QString OAIGetGrantResponse_Grant::getStatusReason() const {
    return m_status_reason;
}
void OAIGetGrantResponse_Grant::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIGetGrantResponse_Grant::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QString OAIGetGrantResponse_Grant::getVersion() const {
    return m_version;
}
void OAIGetGrantResponse_Grant::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_version_Set() const{
    return m_version_isSet;
}

bool OAIGetGrantResponse_Grant::is_version_Valid() const{
    return m_version_isValid;
}

QList OAIGetGrantResponse_Grant::getGrantedOperations() const {
    return m_granted_operations;
}
void OAIGetGrantResponse_Grant::setGrantedOperations(const QList &granted_operations) {
    m_granted_operations = granted_operations;
    m_granted_operations_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_granted_operations_Set() const{
    return m_granted_operations_isSet;
}

bool OAIGetGrantResponse_Grant::is_granted_operations_Valid() const{
    return m_granted_operations_isValid;
}

OAICreateGrantVersionRequest_Options OAIGetGrantResponse_Grant::getOptions() const {
    return m_options;
}
void OAIGetGrantResponse_Grant::setOptions(const OAICreateGrantVersionRequest_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIGetGrantResponse_Grant::is_options_Set() const{
    return m_options_isSet;
}

bool OAIGetGrantResponse_Grant::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIGetGrantResponse_Grant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grant_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grantee_principal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granted_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetGrantResponse_Grant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grant_arn_isValid && m_grant_name_isValid && m_parent_arn_isValid && m_license_arn_isValid && m_grantee_principal_arn_isValid && m_home_region_isValid && m_grant_status_isValid && m_version_isValid && m_granted_operations_isValid && true;
}

} // namespace OpenAPI
