/**
 * AWS License Manager
 * License Manager makes it easier to manage licenses from software vendors across multiple Amazon Web Services accounts and on-premises servers.
 *
 * The version of the OpenAPI document: 2018-08-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductInformation::OAIProductInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductInformation::OAIProductInformation() {
    this->initializeModel();
}

OAIProductInformation::~OAIProductInformation() {}

void OAIProductInformation::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_product_information_filter_list_isSet = false;
    m_product_information_filter_list_isValid = false;
}

void OAIProductInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductInformation::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_product_information_filter_list_isValid = ::OpenAPI::fromJsonValue(m_product_information_filter_list, json[QString("ProductInformationFilterList")]);
    m_product_information_filter_list_isSet = !json[QString("ProductInformationFilterList")].isNull() && m_product_information_filter_list_isValid;
}

QString OAIProductInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_product_information_filter_list.isSet()) {
        obj.insert(QString("ProductInformationFilterList"), ::OpenAPI::toJsonValue(m_product_information_filter_list));
    }
    return obj;
}

QString OAIProductInformation::getResourceType() const {
    return m_resource_type;
}
void OAIProductInformation::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIProductInformation::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIProductInformation::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList OAIProductInformation::getProductInformationFilterList() const {
    return m_product_information_filter_list;
}
void OAIProductInformation::setProductInformationFilterList(const QList &product_information_filter_list) {
    m_product_information_filter_list = product_information_filter_list;
    m_product_information_filter_list_isSet = true;
}

bool OAIProductInformation::is_product_information_filter_list_Set() const{
    return m_product_information_filter_list_isSet;
}

bool OAIProductInformation::is_product_information_filter_list_Valid() const{
    return m_product_information_filter_list_isValid;
}

bool OAIProductInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_information_filter_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_type_isValid && m_product_information_filter_list_isValid && true;
}

} // namespace OpenAPI
