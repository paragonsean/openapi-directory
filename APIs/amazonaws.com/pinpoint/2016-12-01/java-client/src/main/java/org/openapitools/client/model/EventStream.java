/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies settings for publishing event data to an Amazon Kinesis data stream or an Amazon Kinesis Data Firehose delivery stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventStream {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_DESTINATION_STREAM_ARN = "DestinationStreamArn";
  @SerializedName(SERIALIZED_NAME_DESTINATION_STREAM_ARN)
  private String destinationStreamArn;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "ExternalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED_BY = "LastUpdatedBy";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_BY)
  private String lastUpdatedBy;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public EventStream() {
  }

  public EventStream applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public EventStream destinationStreamArn(String destinationStreamArn) {
    this.destinationStreamArn = destinationStreamArn;
    return this;
  }

  /**
   * Get destinationStreamArn
   * @return destinationStreamArn
   */
  @javax.annotation.Nonnull
  public String getDestinationStreamArn() {
    return destinationStreamArn;
  }

  public void setDestinationStreamArn(String destinationStreamArn) {
    this.destinationStreamArn = destinationStreamArn;
  }


  public EventStream externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public EventStream lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public EventStream lastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
    return this;
  }

  /**
   * Get lastUpdatedBy
   * @return lastUpdatedBy
   */
  @javax.annotation.Nullable
  public String getLastUpdatedBy() {
    return lastUpdatedBy;
  }

  public void setLastUpdatedBy(String lastUpdatedBy) {
    this.lastUpdatedBy = lastUpdatedBy;
  }


  public EventStream roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStream eventStream = (EventStream) o;
    return Objects.equals(this.applicationId, eventStream.applicationId) &&
        Objects.equals(this.destinationStreamArn, eventStream.destinationStreamArn) &&
        Objects.equals(this.externalId, eventStream.externalId) &&
        Objects.equals(this.lastModifiedDate, eventStream.lastModifiedDate) &&
        Objects.equals(this.lastUpdatedBy, eventStream.lastUpdatedBy) &&
        Objects.equals(this.roleArn, eventStream.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, destinationStreamArn, externalId, lastModifiedDate, lastUpdatedBy, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStream {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    destinationStreamArn: ").append(toIndentedString(destinationStreamArn)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    lastUpdatedBy: ").append(toIndentedString(lastUpdatedBy)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("DestinationStreamArn");
    openapiFields.add("ExternalId");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("LastUpdatedBy");
    openapiFields.add("RoleArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("DestinationStreamArn");
    openapiRequiredFields.add("RoleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStream is not found in the empty JSON string", EventStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventStream.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationId`
      String.validateJsonElement(jsonObj.get("ApplicationId"));
      // validate the required field `DestinationStreamArn`
      String.validateJsonElement(jsonObj.get("DestinationStreamArn"));
      // validate the optional field `ExternalId`
      if (jsonObj.get("ExternalId") != null && !jsonObj.get("ExternalId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExternalId"));
      }
      // validate the optional field `LastModifiedDate`
      if (jsonObj.get("LastModifiedDate") != null && !jsonObj.get("LastModifiedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastModifiedDate"));
      }
      // validate the optional field `LastUpdatedBy`
      if (jsonObj.get("LastUpdatedBy") != null && !jsonObj.get("LastUpdatedBy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastUpdatedBy"));
      }
      // validate the required field `RoleArn`
      String.validateJsonElement(jsonObj.get("RoleArn"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStream.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStream>() {
           @Override
           public void write(JsonWriter out, EventStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventStream
   * @throws IOException if the JSON string is invalid with respect to EventStream
   */
  public static EventStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStream.class);
  }

  /**
   * Convert an instance of EventStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

