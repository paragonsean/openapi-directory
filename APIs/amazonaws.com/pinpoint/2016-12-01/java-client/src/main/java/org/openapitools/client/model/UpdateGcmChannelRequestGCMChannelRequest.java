/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the status and settings of the GCM channel for an application. This channel enables Amazon Pinpoint to send push notifications through the Firebase Cloud Messaging (FCM), formerly Google Cloud Messaging (GCM), service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateGcmChannelRequestGCMChannelRequest {
  public static final String SERIALIZED_NAME_API_KEY = "ApiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_DEFAULT_AUTHENTICATION_METHOD = "DefaultAuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AUTHENTICATION_METHOD)
  private String defaultAuthenticationMethod;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SERVICE_JSON = "ServiceJson";
  @SerializedName(SERIALIZED_NAME_SERVICE_JSON)
  private String serviceJson;

  public UpdateGcmChannelRequestGCMChannelRequest() {
  }

  public UpdateGcmChannelRequestGCMChannelRequest apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Get apiKey
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public UpdateGcmChannelRequestGCMChannelRequest defaultAuthenticationMethod(String defaultAuthenticationMethod) {
    this.defaultAuthenticationMethod = defaultAuthenticationMethod;
    return this;
  }

  /**
   * Get defaultAuthenticationMethod
   * @return defaultAuthenticationMethod
   */
  @javax.annotation.Nullable
  public String getDefaultAuthenticationMethod() {
    return defaultAuthenticationMethod;
  }

  public void setDefaultAuthenticationMethod(String defaultAuthenticationMethod) {
    this.defaultAuthenticationMethod = defaultAuthenticationMethod;
  }


  public UpdateGcmChannelRequestGCMChannelRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateGcmChannelRequestGCMChannelRequest serviceJson(String serviceJson) {
    this.serviceJson = serviceJson;
    return this;
  }

  /**
   * Get serviceJson
   * @return serviceJson
   */
  @javax.annotation.Nullable
  public String getServiceJson() {
    return serviceJson;
  }

  public void setServiceJson(String serviceJson) {
    this.serviceJson = serviceJson;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateGcmChannelRequestGCMChannelRequest updateGcmChannelRequestGCMChannelRequest = (UpdateGcmChannelRequestGCMChannelRequest) o;
    return Objects.equals(this.apiKey, updateGcmChannelRequestGCMChannelRequest.apiKey) &&
        Objects.equals(this.defaultAuthenticationMethod, updateGcmChannelRequestGCMChannelRequest.defaultAuthenticationMethod) &&
        Objects.equals(this.enabled, updateGcmChannelRequestGCMChannelRequest.enabled) &&
        Objects.equals(this.serviceJson, updateGcmChannelRequestGCMChannelRequest.serviceJson);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKey, defaultAuthenticationMethod, enabled, serviceJson);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateGcmChannelRequestGCMChannelRequest {\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    defaultAuthenticationMethod: ").append(toIndentedString(defaultAuthenticationMethod)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    serviceJson: ").append(toIndentedString(serviceJson)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiKey");
    openapiFields.add("DefaultAuthenticationMethod");
    openapiFields.add("Enabled");
    openapiFields.add("ServiceJson");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateGcmChannelRequestGCMChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateGcmChannelRequestGCMChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateGcmChannelRequestGCMChannelRequest is not found in the empty JSON string", UpdateGcmChannelRequestGCMChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateGcmChannelRequestGCMChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateGcmChannelRequestGCMChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiKey`
      if (jsonObj.get("ApiKey") != null && !jsonObj.get("ApiKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiKey"));
      }
      // validate the optional field `DefaultAuthenticationMethod`
      if (jsonObj.get("DefaultAuthenticationMethod") != null && !jsonObj.get("DefaultAuthenticationMethod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultAuthenticationMethod"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `ServiceJson`
      if (jsonObj.get("ServiceJson") != null && !jsonObj.get("ServiceJson").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceJson"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateGcmChannelRequestGCMChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateGcmChannelRequestGCMChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateGcmChannelRequestGCMChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateGcmChannelRequestGCMChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateGcmChannelRequestGCMChannelRequest>() {
           @Override
           public void write(JsonWriter out, UpdateGcmChannelRequestGCMChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateGcmChannelRequestGCMChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateGcmChannelRequestGCMChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateGcmChannelRequestGCMChannelRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateGcmChannelRequestGCMChannelRequest
   */
  public static UpdateGcmChannelRequestGCMChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateGcmChannelRequestGCMChannelRequest.class);
  }

  /**
   * Convert an instance of UpdateGcmChannelRequestGCMChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

