/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateEndpointRequestEndpointRequestLocation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateEndpointRequestEndpointRequestLocation {
  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_LATITUDE = "Latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "Longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "PostalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public UpdateEndpointRequestEndpointRequestLocation() {
  }

  public UpdateEndpointRequestEndpointRequestLocation city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public UpdateEndpointRequestEndpointRequestLocation country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public UpdateEndpointRequestEndpointRequestLocation latitude(Double latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * Get latitude
   * @return latitude
   */
  @javax.annotation.Nullable
  public Double getLatitude() {
    return latitude;
  }

  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public UpdateEndpointRequestEndpointRequestLocation longitude(Double longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * Get longitude
   * @return longitude
   */
  @javax.annotation.Nullable
  public Double getLongitude() {
    return longitude;
  }

  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public UpdateEndpointRequestEndpointRequestLocation postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public UpdateEndpointRequestEndpointRequestLocation region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEndpointRequestEndpointRequestLocation updateEndpointRequestEndpointRequestLocation = (UpdateEndpointRequestEndpointRequestLocation) o;
    return Objects.equals(this.city, updateEndpointRequestEndpointRequestLocation.city) &&
        Objects.equals(this.country, updateEndpointRequestEndpointRequestLocation.country) &&
        Objects.equals(this.latitude, updateEndpointRequestEndpointRequestLocation.latitude) &&
        Objects.equals(this.longitude, updateEndpointRequestEndpointRequestLocation.longitude) &&
        Objects.equals(this.postalCode, updateEndpointRequestEndpointRequestLocation.postalCode) &&
        Objects.equals(this.region, updateEndpointRequestEndpointRequestLocation.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, latitude, longitude, postalCode, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEndpointRequestEndpointRequestLocation {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("City");
    openapiFields.add("Country");
    openapiFields.add("Latitude");
    openapiFields.add("Longitude");
    openapiFields.add("PostalCode");
    openapiFields.add("Region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEndpointRequestEndpointRequestLocation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEndpointRequestEndpointRequestLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEndpointRequestEndpointRequestLocation is not found in the empty JSON string", UpdateEndpointRequestEndpointRequestLocation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEndpointRequestEndpointRequestLocation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEndpointRequestEndpointRequestLocation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `City`
      if (jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("City"));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the optional field `Latitude`
      if (jsonObj.get("Latitude") != null && !jsonObj.get("Latitude").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Latitude"));
      }
      // validate the optional field `Longitude`
      if (jsonObj.get("Longitude") != null && !jsonObj.get("Longitude").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Longitude"));
      }
      // validate the optional field `PostalCode`
      if (jsonObj.get("PostalCode") != null && !jsonObj.get("PostalCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PostalCode"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEndpointRequestEndpointRequestLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEndpointRequestEndpointRequestLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEndpointRequestEndpointRequestLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEndpointRequestEndpointRequestLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEndpointRequestEndpointRequestLocation>() {
           @Override
           public void write(JsonWriter out, UpdateEndpointRequestEndpointRequestLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEndpointRequestEndpointRequestLocation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEndpointRequestEndpointRequestLocation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEndpointRequestEndpointRequestLocation
   * @throws IOException if the JSON string is invalid with respect to UpdateEndpointRequestEndpointRequestLocation
   */
  public static UpdateEndpointRequestEndpointRequestLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEndpointRequestEndpointRequestLocation.class);
  }

  /**
   * Convert an instance of UpdateEndpointRequestEndpointRequestLocation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

