/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SendMessagesRequestMessageRequestMessageConfiguration;
import org.openapitools.client.model.SendMessagesRequestMessageRequestTemplateConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the configuration and other settings for a message to send to all the endpoints that are associated with a list of users.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendUsersMessageRequest {
  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Map context;

  public static final String SERIALIZED_NAME_MESSAGE_CONFIGURATION = "MessageConfiguration";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CONFIGURATION)
  private SendMessagesRequestMessageRequestMessageConfiguration messageConfiguration;

  public static final String SERIALIZED_NAME_TEMPLATE_CONFIGURATION = "TemplateConfiguration";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_CONFIGURATION)
  private SendMessagesRequestMessageRequestTemplateConfiguration templateConfiguration;

  public static final String SERIALIZED_NAME_TRACE_ID = "TraceId";
  @SerializedName(SERIALIZED_NAME_TRACE_ID)
  private String traceId;

  public static final String SERIALIZED_NAME_USERS = "Users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private Map users;

  public SendUsersMessageRequest() {
  }

  public SendUsersMessageRequest context(Map context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Map getContext() {
    return context;
  }

  public void setContext(Map context) {
    this.context = context;
  }


  public SendUsersMessageRequest messageConfiguration(SendMessagesRequestMessageRequestMessageConfiguration messageConfiguration) {
    this.messageConfiguration = messageConfiguration;
    return this;
  }

  /**
   * Get messageConfiguration
   * @return messageConfiguration
   */
  @javax.annotation.Nonnull
  public SendMessagesRequestMessageRequestMessageConfiguration getMessageConfiguration() {
    return messageConfiguration;
  }

  public void setMessageConfiguration(SendMessagesRequestMessageRequestMessageConfiguration messageConfiguration) {
    this.messageConfiguration = messageConfiguration;
  }


  public SendUsersMessageRequest templateConfiguration(SendMessagesRequestMessageRequestTemplateConfiguration templateConfiguration) {
    this.templateConfiguration = templateConfiguration;
    return this;
  }

  /**
   * Get templateConfiguration
   * @return templateConfiguration
   */
  @javax.annotation.Nullable
  public SendMessagesRequestMessageRequestTemplateConfiguration getTemplateConfiguration() {
    return templateConfiguration;
  }

  public void setTemplateConfiguration(SendMessagesRequestMessageRequestTemplateConfiguration templateConfiguration) {
    this.templateConfiguration = templateConfiguration;
  }


  public SendUsersMessageRequest traceId(String traceId) {
    this.traceId = traceId;
    return this;
  }

  /**
   * Get traceId
   * @return traceId
   */
  @javax.annotation.Nullable
  public String getTraceId() {
    return traceId;
  }

  public void setTraceId(String traceId) {
    this.traceId = traceId;
  }


  public SendUsersMessageRequest users(Map users) {
    this.users = users;
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nonnull
  public Map getUsers() {
    return users;
  }

  public void setUsers(Map users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendUsersMessageRequest sendUsersMessageRequest = (SendUsersMessageRequest) o;
    return Objects.equals(this.context, sendUsersMessageRequest.context) &&
        Objects.equals(this.messageConfiguration, sendUsersMessageRequest.messageConfiguration) &&
        Objects.equals(this.templateConfiguration, sendUsersMessageRequest.templateConfiguration) &&
        Objects.equals(this.traceId, sendUsersMessageRequest.traceId) &&
        Objects.equals(this.users, sendUsersMessageRequest.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, messageConfiguration, templateConfiguration, traceId, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendUsersMessageRequest {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    messageConfiguration: ").append(toIndentedString(messageConfiguration)).append("\n");
    sb.append("    templateConfiguration: ").append(toIndentedString(templateConfiguration)).append("\n");
    sb.append("    traceId: ").append(toIndentedString(traceId)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Context");
    openapiFields.add("MessageConfiguration");
    openapiFields.add("TemplateConfiguration");
    openapiFields.add("TraceId");
    openapiFields.add("Users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MessageConfiguration");
    openapiRequiredFields.add("Users");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendUsersMessageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendUsersMessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendUsersMessageRequest is not found in the empty JSON string", SendUsersMessageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendUsersMessageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendUsersMessageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendUsersMessageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Context`
      if (jsonObj.get("Context") != null && !jsonObj.get("Context").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Context"));
      }
      // validate the required field `MessageConfiguration`
      SendMessagesRequestMessageRequestMessageConfiguration.validateJsonElement(jsonObj.get("MessageConfiguration"));
      // validate the optional field `TemplateConfiguration`
      if (jsonObj.get("TemplateConfiguration") != null && !jsonObj.get("TemplateConfiguration").isJsonNull()) {
        SendMessagesRequestMessageRequestTemplateConfiguration.validateJsonElement(jsonObj.get("TemplateConfiguration"));
      }
      // validate the optional field `TraceId`
      if (jsonObj.get("TraceId") != null && !jsonObj.get("TraceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TraceId"));
      }
      // validate the required field `Users`
      Map.validateJsonElement(jsonObj.get("Users"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendUsersMessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendUsersMessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendUsersMessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendUsersMessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendUsersMessageRequest>() {
           @Override
           public void write(JsonWriter out, SendUsersMessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendUsersMessageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendUsersMessageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendUsersMessageRequest
   * @throws IOException if the JSON string is invalid with respect to SendUsersMessageRequest
   */
  public static SendUsersMessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendUsersMessageRequest.class);
  }

  /**
   * Convert an instance of SendUsersMessageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

