/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportJobResponseDefinition;
import org.openapitools.client.model.JobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the status and settings of a job that exports endpoint definitions to a file. The file can be added directly to an Amazon Simple Storage Service (Amazon S3) bucket by using the Amazon Pinpoint API or downloaded directly to a computer by using the Amazon Pinpoint console.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportJobResponse {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_COMPLETED_PIECES = "CompletedPieces";
  @SerializedName(SERIALIZED_NAME_COMPLETED_PIECES)
  private Integer completedPieces;

  public static final String SERIALIZED_NAME_COMPLETION_DATE = "CompletionDate";
  @SerializedName(SERIALIZED_NAME_COMPLETION_DATE)
  private String completionDate;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DEFINITION = "Definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private ExportJobResponseDefinition definition;

  public static final String SERIALIZED_NAME_FAILED_PIECES = "FailedPieces";
  @SerializedName(SERIALIZED_NAME_FAILED_PIECES)
  private Integer failedPieces;

  public static final String SERIALIZED_NAME_FAILURES = "Failures";
  @SerializedName(SERIALIZED_NAME_FAILURES)
  private List failures;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatus jobStatus;

  public static final String SERIALIZED_NAME_TOTAL_FAILURES = "TotalFailures";
  @SerializedName(SERIALIZED_NAME_TOTAL_FAILURES)
  private Integer totalFailures;

  public static final String SERIALIZED_NAME_TOTAL_PIECES = "TotalPieces";
  @SerializedName(SERIALIZED_NAME_TOTAL_PIECES)
  private Integer totalPieces;

  public static final String SERIALIZED_NAME_TOTAL_PROCESSED = "TotalProcessed";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROCESSED)
  private Integer totalProcessed;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ExportJobResponse() {
  }

  public ExportJobResponse applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public ExportJobResponse completedPieces(Integer completedPieces) {
    this.completedPieces = completedPieces;
    return this;
  }

  /**
   * Get completedPieces
   * @return completedPieces
   */
  @javax.annotation.Nullable
  public Integer getCompletedPieces() {
    return completedPieces;
  }

  public void setCompletedPieces(Integer completedPieces) {
    this.completedPieces = completedPieces;
  }


  public ExportJobResponse completionDate(String completionDate) {
    this.completionDate = completionDate;
    return this;
  }

  /**
   * Get completionDate
   * @return completionDate
   */
  @javax.annotation.Nullable
  public String getCompletionDate() {
    return completionDate;
  }

  public void setCompletionDate(String completionDate) {
    this.completionDate = completionDate;
  }


  public ExportJobResponse creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public ExportJobResponse definition(ExportJobResponseDefinition definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nonnull
  public ExportJobResponseDefinition getDefinition() {
    return definition;
  }

  public void setDefinition(ExportJobResponseDefinition definition) {
    this.definition = definition;
  }


  public ExportJobResponse failedPieces(Integer failedPieces) {
    this.failedPieces = failedPieces;
    return this;
  }

  /**
   * Get failedPieces
   * @return failedPieces
   */
  @javax.annotation.Nullable
  public Integer getFailedPieces() {
    return failedPieces;
  }

  public void setFailedPieces(Integer failedPieces) {
    this.failedPieces = failedPieces;
  }


  public ExportJobResponse failures(List failures) {
    this.failures = failures;
    return this;
  }

  /**
   * Get failures
   * @return failures
   */
  @javax.annotation.Nullable
  public List getFailures() {
    return failures;
  }

  public void setFailures(List failures) {
    this.failures = failures;
  }


  public ExportJobResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExportJobResponse jobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * Get jobStatus
   * @return jobStatus
   */
  @javax.annotation.Nonnull
  public JobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }


  public ExportJobResponse totalFailures(Integer totalFailures) {
    this.totalFailures = totalFailures;
    return this;
  }

  /**
   * Get totalFailures
   * @return totalFailures
   */
  @javax.annotation.Nullable
  public Integer getTotalFailures() {
    return totalFailures;
  }

  public void setTotalFailures(Integer totalFailures) {
    this.totalFailures = totalFailures;
  }


  public ExportJobResponse totalPieces(Integer totalPieces) {
    this.totalPieces = totalPieces;
    return this;
  }

  /**
   * Get totalPieces
   * @return totalPieces
   */
  @javax.annotation.Nullable
  public Integer getTotalPieces() {
    return totalPieces;
  }

  public void setTotalPieces(Integer totalPieces) {
    this.totalPieces = totalPieces;
  }


  public ExportJobResponse totalProcessed(Integer totalProcessed) {
    this.totalProcessed = totalProcessed;
    return this;
  }

  /**
   * Get totalProcessed
   * @return totalProcessed
   */
  @javax.annotation.Nullable
  public Integer getTotalProcessed() {
    return totalProcessed;
  }

  public void setTotalProcessed(Integer totalProcessed) {
    this.totalProcessed = totalProcessed;
  }


  public ExportJobResponse type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportJobResponse exportJobResponse = (ExportJobResponse) o;
    return Objects.equals(this.applicationId, exportJobResponse.applicationId) &&
        Objects.equals(this.completedPieces, exportJobResponse.completedPieces) &&
        Objects.equals(this.completionDate, exportJobResponse.completionDate) &&
        Objects.equals(this.creationDate, exportJobResponse.creationDate) &&
        Objects.equals(this.definition, exportJobResponse.definition) &&
        Objects.equals(this.failedPieces, exportJobResponse.failedPieces) &&
        Objects.equals(this.failures, exportJobResponse.failures) &&
        Objects.equals(this.id, exportJobResponse.id) &&
        Objects.equals(this.jobStatus, exportJobResponse.jobStatus) &&
        Objects.equals(this.totalFailures, exportJobResponse.totalFailures) &&
        Objects.equals(this.totalPieces, exportJobResponse.totalPieces) &&
        Objects.equals(this.totalProcessed, exportJobResponse.totalProcessed) &&
        Objects.equals(this.type, exportJobResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, completedPieces, completionDate, creationDate, definition, failedPieces, failures, id, jobStatus, totalFailures, totalPieces, totalProcessed, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportJobResponse {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    completedPieces: ").append(toIndentedString(completedPieces)).append("\n");
    sb.append("    completionDate: ").append(toIndentedString(completionDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    failedPieces: ").append(toIndentedString(failedPieces)).append("\n");
    sb.append("    failures: ").append(toIndentedString(failures)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    totalFailures: ").append(toIndentedString(totalFailures)).append("\n");
    sb.append("    totalPieces: ").append(toIndentedString(totalPieces)).append("\n");
    sb.append("    totalProcessed: ").append(toIndentedString(totalProcessed)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("CompletedPieces");
    openapiFields.add("CompletionDate");
    openapiFields.add("CreationDate");
    openapiFields.add("Definition");
    openapiFields.add("FailedPieces");
    openapiFields.add("Failures");
    openapiFields.add("Id");
    openapiFields.add("JobStatus");
    openapiFields.add("TotalFailures");
    openapiFields.add("TotalPieces");
    openapiFields.add("TotalProcessed");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("CreationDate");
    openapiRequiredFields.add("Definition");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("JobStatus");
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportJobResponse is not found in the empty JSON string", ExportJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportJobResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationId`
      String.validateJsonElement(jsonObj.get("ApplicationId"));
      // validate the optional field `CompletedPieces`
      if (jsonObj.get("CompletedPieces") != null && !jsonObj.get("CompletedPieces").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CompletedPieces"));
      }
      // validate the optional field `CompletionDate`
      if (jsonObj.get("CompletionDate") != null && !jsonObj.get("CompletionDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompletionDate"));
      }
      // validate the required field `CreationDate`
      String.validateJsonElement(jsonObj.get("CreationDate"));
      // validate the required field `Definition`
      ExportJobResponseDefinition.validateJsonElement(jsonObj.get("Definition"));
      // validate the optional field `FailedPieces`
      if (jsonObj.get("FailedPieces") != null && !jsonObj.get("FailedPieces").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FailedPieces"));
      }
      // validate the optional field `Failures`
      if (jsonObj.get("Failures") != null && !jsonObj.get("Failures").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Failures"));
      }
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `JobStatus`
      JobStatus.validateJsonElement(jsonObj.get("JobStatus"));
      // validate the optional field `TotalFailures`
      if (jsonObj.get("TotalFailures") != null && !jsonObj.get("TotalFailures").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalFailures"));
      }
      // validate the optional field `TotalPieces`
      if (jsonObj.get("TotalPieces") != null && !jsonObj.get("TotalPieces").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalPieces"));
      }
      // validate the optional field `TotalProcessed`
      if (jsonObj.get("TotalProcessed") != null && !jsonObj.get("TotalProcessed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalProcessed"));
      }
      // validate the required field `Type`
      String.validateJsonElement(jsonObj.get("Type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportJobResponse>() {
           @Override
           public void write(JsonWriter out, ExportJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportJobResponse
   * @throws IOException if the JSON string is invalid with respect to ExportJobResponse
   */
  public static ExportJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportJobResponse.class);
  }

  /**
   * Convert an instance of ExportJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

