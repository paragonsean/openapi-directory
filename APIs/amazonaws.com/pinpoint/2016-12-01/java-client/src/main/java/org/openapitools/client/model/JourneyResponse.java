/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings;
import org.openapitools.client.model.CreateJourneyRequestWriteJourneyRequestLimits;
import org.openapitools.client.model.CreateJourneyRequestWriteJourneyRequestQuietTime;
import org.openapitools.client.model.CreateJourneyRequestWriteJourneyRequestSchedule;
import org.openapitools.client.model.CreateJourneyRequestWriteJourneyRequestStartCondition;
import org.openapitools.client.model.JourneyResponseClosedDays;
import org.openapitools.client.model.JourneyResponseOpenHours;
import org.openapitools.client.model.State;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the status, configuration, and other settings for a journey.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JourneyResponse {
  public static final String SERIALIZED_NAME_ACTIVITIES = "Activities";
  @SerializedName(SERIALIZED_NAME_ACTIVITIES)
  private Map activities;

  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_LIMITS = "Limits";
  @SerializedName(SERIALIZED_NAME_LIMITS)
  private CreateJourneyRequestWriteJourneyRequestLimits limits;

  public static final String SERIALIZED_NAME_LOCAL_TIME = "LocalTime";
  @SerializedName(SERIALIZED_NAME_LOCAL_TIME)
  private Boolean _localTime;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_QUIET_TIME = "QuietTime";
  @SerializedName(SERIALIZED_NAME_QUIET_TIME)
  private CreateJourneyRequestWriteJourneyRequestQuietTime quietTime;

  public static final String SERIALIZED_NAME_REFRESH_FREQUENCY = "RefreshFrequency";
  @SerializedName(SERIALIZED_NAME_REFRESH_FREQUENCY)
  private String refreshFrequency;

  public static final String SERIALIZED_NAME_SCHEDULE = "Schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private CreateJourneyRequestWriteJourneyRequestSchedule schedule;

  public static final String SERIALIZED_NAME_START_ACTIVITY = "StartActivity";
  @SerializedName(SERIALIZED_NAME_START_ACTIVITY)
  private String startActivity;

  public static final String SERIALIZED_NAME_START_CONDITION = "StartCondition";
  @SerializedName(SERIALIZED_NAME_START_CONDITION)
  private CreateJourneyRequestWriteJourneyRequestStartCondition startCondition;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private State state;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_WAIT_FOR_QUIET_TIME = "WaitForQuietTime";
  @SerializedName(SERIALIZED_NAME_WAIT_FOR_QUIET_TIME)
  private Boolean waitForQuietTime;

  public static final String SERIALIZED_NAME_REFRESH_ON_SEGMENT_UPDATE = "RefreshOnSegmentUpdate";
  @SerializedName(SERIALIZED_NAME_REFRESH_ON_SEGMENT_UPDATE)
  private Boolean refreshOnSegmentUpdate;

  public static final String SERIALIZED_NAME_JOURNEY_CHANNEL_SETTINGS = "JourneyChannelSettings";
  @SerializedName(SERIALIZED_NAME_JOURNEY_CHANNEL_SETTINGS)
  private CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings journeyChannelSettings;

  public static final String SERIALIZED_NAME_SENDING_SCHEDULE = "SendingSchedule";
  @SerializedName(SERIALIZED_NAME_SENDING_SCHEDULE)
  private Boolean sendingSchedule;

  public static final String SERIALIZED_NAME_OPEN_HOURS = "OpenHours";
  @SerializedName(SERIALIZED_NAME_OPEN_HOURS)
  private JourneyResponseOpenHours openHours;

  public static final String SERIALIZED_NAME_CLOSED_DAYS = "ClosedDays";
  @SerializedName(SERIALIZED_NAME_CLOSED_DAYS)
  private JourneyResponseClosedDays closedDays;

  public static final String SERIALIZED_NAME_TIMEZONE_ESTIMATION_METHODS = "TimezoneEstimationMethods";
  @SerializedName(SERIALIZED_NAME_TIMEZONE_ESTIMATION_METHODS)
  private List timezoneEstimationMethods;

  public JourneyResponse() {
  }

  public JourneyResponse activities(Map activities) {
    this.activities = activities;
    return this;
  }

  /**
   * Get activities
   * @return activities
   */
  @javax.annotation.Nullable
  public Map getActivities() {
    return activities;
  }

  public void setActivities(Map activities) {
    this.activities = activities;
  }


  public JourneyResponse applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public JourneyResponse creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public JourneyResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JourneyResponse lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public JourneyResponse limits(CreateJourneyRequestWriteJourneyRequestLimits limits) {
    this.limits = limits;
    return this;
  }

  /**
   * Get limits
   * @return limits
   */
  @javax.annotation.Nullable
  public CreateJourneyRequestWriteJourneyRequestLimits getLimits() {
    return limits;
  }

  public void setLimits(CreateJourneyRequestWriteJourneyRequestLimits limits) {
    this.limits = limits;
  }


  public JourneyResponse _localTime(Boolean _localTime) {
    this._localTime = _localTime;
    return this;
  }

  /**
   * Get _localTime
   * @return _localTime
   */
  @javax.annotation.Nullable
  public Boolean getLocalTime() {
    return _localTime;
  }

  public void setLocalTime(Boolean _localTime) {
    this._localTime = _localTime;
  }


  public JourneyResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public JourneyResponse quietTime(CreateJourneyRequestWriteJourneyRequestQuietTime quietTime) {
    this.quietTime = quietTime;
    return this;
  }

  /**
   * Get quietTime
   * @return quietTime
   */
  @javax.annotation.Nullable
  public CreateJourneyRequestWriteJourneyRequestQuietTime getQuietTime() {
    return quietTime;
  }

  public void setQuietTime(CreateJourneyRequestWriteJourneyRequestQuietTime quietTime) {
    this.quietTime = quietTime;
  }


  public JourneyResponse refreshFrequency(String refreshFrequency) {
    this.refreshFrequency = refreshFrequency;
    return this;
  }

  /**
   * Get refreshFrequency
   * @return refreshFrequency
   */
  @javax.annotation.Nullable
  public String getRefreshFrequency() {
    return refreshFrequency;
  }

  public void setRefreshFrequency(String refreshFrequency) {
    this.refreshFrequency = refreshFrequency;
  }


  public JourneyResponse schedule(CreateJourneyRequestWriteJourneyRequestSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public CreateJourneyRequestWriteJourneyRequestSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(CreateJourneyRequestWriteJourneyRequestSchedule schedule) {
    this.schedule = schedule;
  }


  public JourneyResponse startActivity(String startActivity) {
    this.startActivity = startActivity;
    return this;
  }

  /**
   * Get startActivity
   * @return startActivity
   */
  @javax.annotation.Nullable
  public String getStartActivity() {
    return startActivity;
  }

  public void setStartActivity(String startActivity) {
    this.startActivity = startActivity;
  }


  public JourneyResponse startCondition(CreateJourneyRequestWriteJourneyRequestStartCondition startCondition) {
    this.startCondition = startCondition;
    return this;
  }

  /**
   * Get startCondition
   * @return startCondition
   */
  @javax.annotation.Nullable
  public CreateJourneyRequestWriteJourneyRequestStartCondition getStartCondition() {
    return startCondition;
  }

  public void setStartCondition(CreateJourneyRequestWriteJourneyRequestStartCondition startCondition) {
    this.startCondition = startCondition;
  }


  public JourneyResponse state(State state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public State getState() {
    return state;
  }

  public void setState(State state) {
    this.state = state;
  }


  public JourneyResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public JourneyResponse waitForQuietTime(Boolean waitForQuietTime) {
    this.waitForQuietTime = waitForQuietTime;
    return this;
  }

  /**
   * Get waitForQuietTime
   * @return waitForQuietTime
   */
  @javax.annotation.Nullable
  public Boolean getWaitForQuietTime() {
    return waitForQuietTime;
  }

  public void setWaitForQuietTime(Boolean waitForQuietTime) {
    this.waitForQuietTime = waitForQuietTime;
  }


  public JourneyResponse refreshOnSegmentUpdate(Boolean refreshOnSegmentUpdate) {
    this.refreshOnSegmentUpdate = refreshOnSegmentUpdate;
    return this;
  }

  /**
   * Get refreshOnSegmentUpdate
   * @return refreshOnSegmentUpdate
   */
  @javax.annotation.Nullable
  public Boolean getRefreshOnSegmentUpdate() {
    return refreshOnSegmentUpdate;
  }

  public void setRefreshOnSegmentUpdate(Boolean refreshOnSegmentUpdate) {
    this.refreshOnSegmentUpdate = refreshOnSegmentUpdate;
  }


  public JourneyResponse journeyChannelSettings(CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings journeyChannelSettings) {
    this.journeyChannelSettings = journeyChannelSettings;
    return this;
  }

  /**
   * Get journeyChannelSettings
   * @return journeyChannelSettings
   */
  @javax.annotation.Nullable
  public CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings getJourneyChannelSettings() {
    return journeyChannelSettings;
  }

  public void setJourneyChannelSettings(CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings journeyChannelSettings) {
    this.journeyChannelSettings = journeyChannelSettings;
  }


  public JourneyResponse sendingSchedule(Boolean sendingSchedule) {
    this.sendingSchedule = sendingSchedule;
    return this;
  }

  /**
   * Get sendingSchedule
   * @return sendingSchedule
   */
  @javax.annotation.Nullable
  public Boolean getSendingSchedule() {
    return sendingSchedule;
  }

  public void setSendingSchedule(Boolean sendingSchedule) {
    this.sendingSchedule = sendingSchedule;
  }


  public JourneyResponse openHours(JourneyResponseOpenHours openHours) {
    this.openHours = openHours;
    return this;
  }

  /**
   * Get openHours
   * @return openHours
   */
  @javax.annotation.Nullable
  public JourneyResponseOpenHours getOpenHours() {
    return openHours;
  }

  public void setOpenHours(JourneyResponseOpenHours openHours) {
    this.openHours = openHours;
  }


  public JourneyResponse closedDays(JourneyResponseClosedDays closedDays) {
    this.closedDays = closedDays;
    return this;
  }

  /**
   * Get closedDays
   * @return closedDays
   */
  @javax.annotation.Nullable
  public JourneyResponseClosedDays getClosedDays() {
    return closedDays;
  }

  public void setClosedDays(JourneyResponseClosedDays closedDays) {
    this.closedDays = closedDays;
  }


  public JourneyResponse timezoneEstimationMethods(List timezoneEstimationMethods) {
    this.timezoneEstimationMethods = timezoneEstimationMethods;
    return this;
  }

  /**
   * Get timezoneEstimationMethods
   * @return timezoneEstimationMethods
   */
  @javax.annotation.Nullable
  public List getTimezoneEstimationMethods() {
    return timezoneEstimationMethods;
  }

  public void setTimezoneEstimationMethods(List timezoneEstimationMethods) {
    this.timezoneEstimationMethods = timezoneEstimationMethods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JourneyResponse journeyResponse = (JourneyResponse) o;
    return Objects.equals(this.activities, journeyResponse.activities) &&
        Objects.equals(this.applicationId, journeyResponse.applicationId) &&
        Objects.equals(this.creationDate, journeyResponse.creationDate) &&
        Objects.equals(this.id, journeyResponse.id) &&
        Objects.equals(this.lastModifiedDate, journeyResponse.lastModifiedDate) &&
        Objects.equals(this.limits, journeyResponse.limits) &&
        Objects.equals(this._localTime, journeyResponse._localTime) &&
        Objects.equals(this.name, journeyResponse.name) &&
        Objects.equals(this.quietTime, journeyResponse.quietTime) &&
        Objects.equals(this.refreshFrequency, journeyResponse.refreshFrequency) &&
        Objects.equals(this.schedule, journeyResponse.schedule) &&
        Objects.equals(this.startActivity, journeyResponse.startActivity) &&
        Objects.equals(this.startCondition, journeyResponse.startCondition) &&
        Objects.equals(this.state, journeyResponse.state) &&
        Objects.equals(this.tags, journeyResponse.tags) &&
        Objects.equals(this.waitForQuietTime, journeyResponse.waitForQuietTime) &&
        Objects.equals(this.refreshOnSegmentUpdate, journeyResponse.refreshOnSegmentUpdate) &&
        Objects.equals(this.journeyChannelSettings, journeyResponse.journeyChannelSettings) &&
        Objects.equals(this.sendingSchedule, journeyResponse.sendingSchedule) &&
        Objects.equals(this.openHours, journeyResponse.openHours) &&
        Objects.equals(this.closedDays, journeyResponse.closedDays) &&
        Objects.equals(this.timezoneEstimationMethods, journeyResponse.timezoneEstimationMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activities, applicationId, creationDate, id, lastModifiedDate, limits, _localTime, name, quietTime, refreshFrequency, schedule, startActivity, startCondition, state, tags, waitForQuietTime, refreshOnSegmentUpdate, journeyChannelSettings, sendingSchedule, openHours, closedDays, timezoneEstimationMethods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JourneyResponse {\n");
    sb.append("    activities: ").append(toIndentedString(activities)).append("\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    limits: ").append(toIndentedString(limits)).append("\n");
    sb.append("    _localTime: ").append(toIndentedString(_localTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    quietTime: ").append(toIndentedString(quietTime)).append("\n");
    sb.append("    refreshFrequency: ").append(toIndentedString(refreshFrequency)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    startActivity: ").append(toIndentedString(startActivity)).append("\n");
    sb.append("    startCondition: ").append(toIndentedString(startCondition)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    waitForQuietTime: ").append(toIndentedString(waitForQuietTime)).append("\n");
    sb.append("    refreshOnSegmentUpdate: ").append(toIndentedString(refreshOnSegmentUpdate)).append("\n");
    sb.append("    journeyChannelSettings: ").append(toIndentedString(journeyChannelSettings)).append("\n");
    sb.append("    sendingSchedule: ").append(toIndentedString(sendingSchedule)).append("\n");
    sb.append("    openHours: ").append(toIndentedString(openHours)).append("\n");
    sb.append("    closedDays: ").append(toIndentedString(closedDays)).append("\n");
    sb.append("    timezoneEstimationMethods: ").append(toIndentedString(timezoneEstimationMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Activities");
    openapiFields.add("ApplicationId");
    openapiFields.add("CreationDate");
    openapiFields.add("Id");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("Limits");
    openapiFields.add("LocalTime");
    openapiFields.add("Name");
    openapiFields.add("QuietTime");
    openapiFields.add("RefreshFrequency");
    openapiFields.add("Schedule");
    openapiFields.add("StartActivity");
    openapiFields.add("StartCondition");
    openapiFields.add("State");
    openapiFields.add("tags");
    openapiFields.add("WaitForQuietTime");
    openapiFields.add("RefreshOnSegmentUpdate");
    openapiFields.add("JourneyChannelSettings");
    openapiFields.add("SendingSchedule");
    openapiFields.add("OpenHours");
    openapiFields.add("ClosedDays");
    openapiFields.add("TimezoneEstimationMethods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JourneyResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JourneyResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JourneyResponse is not found in the empty JSON string", JourneyResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JourneyResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JourneyResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JourneyResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Activities`
      if (jsonObj.get("Activities") != null && !jsonObj.get("Activities").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Activities"));
      }
      // validate the required field `ApplicationId`
      String.validateJsonElement(jsonObj.get("ApplicationId"));
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `LastModifiedDate`
      if (jsonObj.get("LastModifiedDate") != null && !jsonObj.get("LastModifiedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastModifiedDate"));
      }
      // validate the optional field `Limits`
      if (jsonObj.get("Limits") != null && !jsonObj.get("Limits").isJsonNull()) {
        CreateJourneyRequestWriteJourneyRequestLimits.validateJsonElement(jsonObj.get("Limits"));
      }
      // validate the optional field `LocalTime`
      if (jsonObj.get("LocalTime") != null && !jsonObj.get("LocalTime").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("LocalTime"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `QuietTime`
      if (jsonObj.get("QuietTime") != null && !jsonObj.get("QuietTime").isJsonNull()) {
        CreateJourneyRequestWriteJourneyRequestQuietTime.validateJsonElement(jsonObj.get("QuietTime"));
      }
      // validate the optional field `RefreshFrequency`
      if (jsonObj.get("RefreshFrequency") != null && !jsonObj.get("RefreshFrequency").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RefreshFrequency"));
      }
      // validate the optional field `Schedule`
      if (jsonObj.get("Schedule") != null && !jsonObj.get("Schedule").isJsonNull()) {
        CreateJourneyRequestWriteJourneyRequestSchedule.validateJsonElement(jsonObj.get("Schedule"));
      }
      // validate the optional field `StartActivity`
      if (jsonObj.get("StartActivity") != null && !jsonObj.get("StartActivity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartActivity"));
      }
      // validate the optional field `StartCondition`
      if (jsonObj.get("StartCondition") != null && !jsonObj.get("StartCondition").isJsonNull()) {
        CreateJourneyRequestWriteJourneyRequestStartCondition.validateJsonElement(jsonObj.get("StartCondition"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        State.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `WaitForQuietTime`
      if (jsonObj.get("WaitForQuietTime") != null && !jsonObj.get("WaitForQuietTime").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WaitForQuietTime"));
      }
      // validate the optional field `RefreshOnSegmentUpdate`
      if (jsonObj.get("RefreshOnSegmentUpdate") != null && !jsonObj.get("RefreshOnSegmentUpdate").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RefreshOnSegmentUpdate"));
      }
      // validate the optional field `JourneyChannelSettings`
      if (jsonObj.get("JourneyChannelSettings") != null && !jsonObj.get("JourneyChannelSettings").isJsonNull()) {
        CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings.validateJsonElement(jsonObj.get("JourneyChannelSettings"));
      }
      // validate the optional field `SendingSchedule`
      if (jsonObj.get("SendingSchedule") != null && !jsonObj.get("SendingSchedule").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SendingSchedule"));
      }
      // validate the optional field `OpenHours`
      if (jsonObj.get("OpenHours") != null && !jsonObj.get("OpenHours").isJsonNull()) {
        JourneyResponseOpenHours.validateJsonElement(jsonObj.get("OpenHours"));
      }
      // validate the optional field `ClosedDays`
      if (jsonObj.get("ClosedDays") != null && !jsonObj.get("ClosedDays").isJsonNull()) {
        JourneyResponseClosedDays.validateJsonElement(jsonObj.get("ClosedDays"));
      }
      // validate the optional field `TimezoneEstimationMethods`
      if (jsonObj.get("TimezoneEstimationMethods") != null && !jsonObj.get("TimezoneEstimationMethods").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TimezoneEstimationMethods"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JourneyResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JourneyResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JourneyResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JourneyResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<JourneyResponse>() {
           @Override
           public void write(JsonWriter out, JourneyResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JourneyResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JourneyResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JourneyResponse
   * @throws IOException if the JSON string is invalid with respect to JourneyResponse
   */
  public static JourneyResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JourneyResponse.class);
  }

  /**
   * Convert an instance of JourneyResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

