/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InAppMessageContentBodyConfig;
import org.openapitools.client.model.InAppMessageContentHeaderConfig;
import org.openapitools.client.model.InAppMessageContentPrimaryBtn;
import org.openapitools.client.model.InAppMessageContentSecondaryBtn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the message content.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InAppMessageContent {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "BackgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BODY_CONFIG = "BodyConfig";
  @SerializedName(SERIALIZED_NAME_BODY_CONFIG)
  private InAppMessageContentBodyConfig bodyConfig;

  public static final String SERIALIZED_NAME_HEADER_CONFIG = "HeaderConfig";
  @SerializedName(SERIALIZED_NAME_HEADER_CONFIG)
  private InAppMessageContentHeaderConfig headerConfig;

  public static final String SERIALIZED_NAME_IMAGE_URL = "ImageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_PRIMARY_BTN = "PrimaryBtn";
  @SerializedName(SERIALIZED_NAME_PRIMARY_BTN)
  private InAppMessageContentPrimaryBtn primaryBtn;

  public static final String SERIALIZED_NAME_SECONDARY_BTN = "SecondaryBtn";
  @SerializedName(SERIALIZED_NAME_SECONDARY_BTN)
  private InAppMessageContentSecondaryBtn secondaryBtn;

  public InAppMessageContent() {
  }

  public InAppMessageContent backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public InAppMessageContent bodyConfig(InAppMessageContentBodyConfig bodyConfig) {
    this.bodyConfig = bodyConfig;
    return this;
  }

  /**
   * Get bodyConfig
   * @return bodyConfig
   */
  @javax.annotation.Nullable
  public InAppMessageContentBodyConfig getBodyConfig() {
    return bodyConfig;
  }

  public void setBodyConfig(InAppMessageContentBodyConfig bodyConfig) {
    this.bodyConfig = bodyConfig;
  }


  public InAppMessageContent headerConfig(InAppMessageContentHeaderConfig headerConfig) {
    this.headerConfig = headerConfig;
    return this;
  }

  /**
   * Get headerConfig
   * @return headerConfig
   */
  @javax.annotation.Nullable
  public InAppMessageContentHeaderConfig getHeaderConfig() {
    return headerConfig;
  }

  public void setHeaderConfig(InAppMessageContentHeaderConfig headerConfig) {
    this.headerConfig = headerConfig;
  }


  public InAppMessageContent imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public InAppMessageContent primaryBtn(InAppMessageContentPrimaryBtn primaryBtn) {
    this.primaryBtn = primaryBtn;
    return this;
  }

  /**
   * Get primaryBtn
   * @return primaryBtn
   */
  @javax.annotation.Nullable
  public InAppMessageContentPrimaryBtn getPrimaryBtn() {
    return primaryBtn;
  }

  public void setPrimaryBtn(InAppMessageContentPrimaryBtn primaryBtn) {
    this.primaryBtn = primaryBtn;
  }


  public InAppMessageContent secondaryBtn(InAppMessageContentSecondaryBtn secondaryBtn) {
    this.secondaryBtn = secondaryBtn;
    return this;
  }

  /**
   * Get secondaryBtn
   * @return secondaryBtn
   */
  @javax.annotation.Nullable
  public InAppMessageContentSecondaryBtn getSecondaryBtn() {
    return secondaryBtn;
  }

  public void setSecondaryBtn(InAppMessageContentSecondaryBtn secondaryBtn) {
    this.secondaryBtn = secondaryBtn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InAppMessageContent inAppMessageContent = (InAppMessageContent) o;
    return Objects.equals(this.backgroundColor, inAppMessageContent.backgroundColor) &&
        Objects.equals(this.bodyConfig, inAppMessageContent.bodyConfig) &&
        Objects.equals(this.headerConfig, inAppMessageContent.headerConfig) &&
        Objects.equals(this.imageUrl, inAppMessageContent.imageUrl) &&
        Objects.equals(this.primaryBtn, inAppMessageContent.primaryBtn) &&
        Objects.equals(this.secondaryBtn, inAppMessageContent.secondaryBtn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, bodyConfig, headerConfig, imageUrl, primaryBtn, secondaryBtn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InAppMessageContent {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    bodyConfig: ").append(toIndentedString(bodyConfig)).append("\n");
    sb.append("    headerConfig: ").append(toIndentedString(headerConfig)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    primaryBtn: ").append(toIndentedString(primaryBtn)).append("\n");
    sb.append("    secondaryBtn: ").append(toIndentedString(secondaryBtn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackgroundColor");
    openapiFields.add("BodyConfig");
    openapiFields.add("HeaderConfig");
    openapiFields.add("ImageUrl");
    openapiFields.add("PrimaryBtn");
    openapiFields.add("SecondaryBtn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InAppMessageContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InAppMessageContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InAppMessageContent is not found in the empty JSON string", InAppMessageContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InAppMessageContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InAppMessageContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BackgroundColor`
      if (jsonObj.get("BackgroundColor") != null && !jsonObj.get("BackgroundColor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackgroundColor"));
      }
      // validate the optional field `BodyConfig`
      if (jsonObj.get("BodyConfig") != null && !jsonObj.get("BodyConfig").isJsonNull()) {
        InAppMessageContentBodyConfig.validateJsonElement(jsonObj.get("BodyConfig"));
      }
      // validate the optional field `HeaderConfig`
      if (jsonObj.get("HeaderConfig") != null && !jsonObj.get("HeaderConfig").isJsonNull()) {
        InAppMessageContentHeaderConfig.validateJsonElement(jsonObj.get("HeaderConfig"));
      }
      // validate the optional field `ImageUrl`
      if (jsonObj.get("ImageUrl") != null && !jsonObj.get("ImageUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ImageUrl"));
      }
      // validate the optional field `PrimaryBtn`
      if (jsonObj.get("PrimaryBtn") != null && !jsonObj.get("PrimaryBtn").isJsonNull()) {
        InAppMessageContentPrimaryBtn.validateJsonElement(jsonObj.get("PrimaryBtn"));
      }
      // validate the optional field `SecondaryBtn`
      if (jsonObj.get("SecondaryBtn") != null && !jsonObj.get("SecondaryBtn").isJsonNull()) {
        InAppMessageContentSecondaryBtn.validateJsonElement(jsonObj.get("SecondaryBtn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InAppMessageContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InAppMessageContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InAppMessageContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InAppMessageContent.class));

       return (TypeAdapter<T>) new TypeAdapter<InAppMessageContent>() {
           @Override
           public void write(JsonWriter out, InAppMessageContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InAppMessageContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InAppMessageContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InAppMessageContent
   * @throws IOException if the JSON string is invalid with respect to InAppMessageContent
   */
  public static InAppMessageContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InAppMessageContent.class);
  }

  /**
   * Convert an instance of InAppMessageContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

