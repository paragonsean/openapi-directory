/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Action;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the default settings and content for a push notification that&#39;s sent directly to an endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefaultPushNotificationMessage {
  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private Action action;

  public static final String SERIALIZED_NAME_BODY = "Body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_DATA = "Data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map data;

  public static final String SERIALIZED_NAME_SILENT_PUSH = "SilentPush";
  @SerializedName(SERIALIZED_NAME_SILENT_PUSH)
  private Boolean silentPush;

  public static final String SERIALIZED_NAME_SUBSTITUTIONS = "Substitutions";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTIONS)
  private Map substitutions;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "Url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public DefaultPushNotificationMessage() {
  }

  public DefaultPushNotificationMessage action(Action action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public Action getAction() {
    return action;
  }

  public void setAction(Action action) {
    this.action = action;
  }


  public DefaultPushNotificationMessage body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public DefaultPushNotificationMessage data(Map data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public Map getData() {
    return data;
  }

  public void setData(Map data) {
    this.data = data;
  }


  public DefaultPushNotificationMessage silentPush(Boolean silentPush) {
    this.silentPush = silentPush;
    return this;
  }

  /**
   * Get silentPush
   * @return silentPush
   */
  @javax.annotation.Nullable
  public Boolean getSilentPush() {
    return silentPush;
  }

  public void setSilentPush(Boolean silentPush) {
    this.silentPush = silentPush;
  }


  public DefaultPushNotificationMessage substitutions(Map substitutions) {
    this.substitutions = substitutions;
    return this;
  }

  /**
   * Get substitutions
   * @return substitutions
   */
  @javax.annotation.Nullable
  public Map getSubstitutions() {
    return substitutions;
  }

  public void setSubstitutions(Map substitutions) {
    this.substitutions = substitutions;
  }


  public DefaultPushNotificationMessage title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DefaultPushNotificationMessage url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultPushNotificationMessage defaultPushNotificationMessage = (DefaultPushNotificationMessage) o;
    return Objects.equals(this.action, defaultPushNotificationMessage.action) &&
        Objects.equals(this.body, defaultPushNotificationMessage.body) &&
        Objects.equals(this.data, defaultPushNotificationMessage.data) &&
        Objects.equals(this.silentPush, defaultPushNotificationMessage.silentPush) &&
        Objects.equals(this.substitutions, defaultPushNotificationMessage.substitutions) &&
        Objects.equals(this.title, defaultPushNotificationMessage.title) &&
        Objects.equals(this.url, defaultPushNotificationMessage.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, body, data, silentPush, substitutions, title, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultPushNotificationMessage {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    silentPush: ").append(toIndentedString(silentPush)).append("\n");
    sb.append("    substitutions: ").append(toIndentedString(substitutions)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Action");
    openapiFields.add("Body");
    openapiFields.add("Data");
    openapiFields.add("SilentPush");
    openapiFields.add("Substitutions");
    openapiFields.add("Title");
    openapiFields.add("Url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultPushNotificationMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultPushNotificationMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultPushNotificationMessage is not found in the empty JSON string", DefaultPushNotificationMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultPushNotificationMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultPushNotificationMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Action`
      if (jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) {
        Action.validateJsonElement(jsonObj.get("Action"));
      }
      // validate the optional field `Body`
      if (jsonObj.get("Body") != null && !jsonObj.get("Body").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Body"));
      }
      // validate the optional field `Data`
      if (jsonObj.get("Data") != null && !jsonObj.get("Data").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Data"));
      }
      // validate the optional field `SilentPush`
      if (jsonObj.get("SilentPush") != null && !jsonObj.get("SilentPush").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("SilentPush"));
      }
      // validate the optional field `Substitutions`
      if (jsonObj.get("Substitutions") != null && !jsonObj.get("Substitutions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Substitutions"));
      }
      // validate the optional field `Title`
      if (jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Title"));
      }
      // validate the optional field `Url`
      if (jsonObj.get("Url") != null && !jsonObj.get("Url").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Url"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultPushNotificationMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultPushNotificationMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultPushNotificationMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultPushNotificationMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultPushNotificationMessage>() {
           @Override
           public void write(JsonWriter out, DefaultPushNotificationMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultPushNotificationMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultPushNotificationMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultPushNotificationMessage
   * @throws IOException if the JSON string is invalid with respect to DefaultPushNotificationMessage
   */
  public static DefaultPushNotificationMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultPushNotificationMessage.class);
  }

  /**
   * Convert an instance of DefaultPushNotificationMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

