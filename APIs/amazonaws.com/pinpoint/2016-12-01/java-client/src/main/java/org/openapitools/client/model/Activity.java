/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActivityCUSTOM;
import org.openapitools.client.model.ActivityConditionalSplit;
import org.openapitools.client.model.ActivityContactCenter;
import org.openapitools.client.model.ActivityEMAIL;
import org.openapitools.client.model.ActivityHoldout;
import org.openapitools.client.model.ActivityMultiCondition;
import org.openapitools.client.model.ActivityPUSH;
import org.openapitools.client.model.ActivityRandomSplit;
import org.openapitools.client.model.ActivitySMS;
import org.openapitools.client.model.ActivityWait;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the configuration and other settings for an activity in a journey.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Activity {
  public static final String SERIALIZED_NAME_C_U_S_T_O_M = "CUSTOM";
  @SerializedName(SERIALIZED_NAME_C_U_S_T_O_M)
  private ActivityCUSTOM CUSTOM;

  public static final String SERIALIZED_NAME_CONDITIONAL_SPLIT = "ConditionalSplit";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_SPLIT)
  private ActivityConditionalSplit conditionalSplit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_E_M_A_I_L = "EMAIL";
  @SerializedName(SERIALIZED_NAME_E_M_A_I_L)
  private ActivityEMAIL EMAIL;

  public static final String SERIALIZED_NAME_HOLDOUT = "Holdout";
  @SerializedName(SERIALIZED_NAME_HOLDOUT)
  private ActivityHoldout holdout;

  public static final String SERIALIZED_NAME_MULTI_CONDITION = "MultiCondition";
  @SerializedName(SERIALIZED_NAME_MULTI_CONDITION)
  private ActivityMultiCondition multiCondition;

  public static final String SERIALIZED_NAME_P_U_S_H = "PUSH";
  @SerializedName(SERIALIZED_NAME_P_U_S_H)
  private ActivityPUSH PUSH;

  public static final String SERIALIZED_NAME_RANDOM_SPLIT = "RandomSplit";
  @SerializedName(SERIALIZED_NAME_RANDOM_SPLIT)
  private ActivityRandomSplit randomSplit;

  public static final String SERIALIZED_NAME_S_M_S = "SMS";
  @SerializedName(SERIALIZED_NAME_S_M_S)
  private ActivitySMS SMS;

  public static final String SERIALIZED_NAME_WAIT = "Wait";
  @SerializedName(SERIALIZED_NAME_WAIT)
  private ActivityWait wait;

  public static final String SERIALIZED_NAME_CONTACT_CENTER = "ContactCenter";
  @SerializedName(SERIALIZED_NAME_CONTACT_CENTER)
  private ActivityContactCenter contactCenter;

  public Activity() {
  }

  public Activity CUSTOM(ActivityCUSTOM CUSTOM) {
    this.CUSTOM = CUSTOM;
    return this;
  }

  /**
   * Get CUSTOM
   * @return CUSTOM
   */
  @javax.annotation.Nullable
  public ActivityCUSTOM getCUSTOM() {
    return CUSTOM;
  }

  public void setCUSTOM(ActivityCUSTOM CUSTOM) {
    this.CUSTOM = CUSTOM;
  }


  public Activity conditionalSplit(ActivityConditionalSplit conditionalSplit) {
    this.conditionalSplit = conditionalSplit;
    return this;
  }

  /**
   * Get conditionalSplit
   * @return conditionalSplit
   */
  @javax.annotation.Nullable
  public ActivityConditionalSplit getConditionalSplit() {
    return conditionalSplit;
  }

  public void setConditionalSplit(ActivityConditionalSplit conditionalSplit) {
    this.conditionalSplit = conditionalSplit;
  }


  public Activity description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Activity EMAIL(ActivityEMAIL EMAIL) {
    this.EMAIL = EMAIL;
    return this;
  }

  /**
   * Get EMAIL
   * @return EMAIL
   */
  @javax.annotation.Nullable
  public ActivityEMAIL getEMAIL() {
    return EMAIL;
  }

  public void setEMAIL(ActivityEMAIL EMAIL) {
    this.EMAIL = EMAIL;
  }


  public Activity holdout(ActivityHoldout holdout) {
    this.holdout = holdout;
    return this;
  }

  /**
   * Get holdout
   * @return holdout
   */
  @javax.annotation.Nullable
  public ActivityHoldout getHoldout() {
    return holdout;
  }

  public void setHoldout(ActivityHoldout holdout) {
    this.holdout = holdout;
  }


  public Activity multiCondition(ActivityMultiCondition multiCondition) {
    this.multiCondition = multiCondition;
    return this;
  }

  /**
   * Get multiCondition
   * @return multiCondition
   */
  @javax.annotation.Nullable
  public ActivityMultiCondition getMultiCondition() {
    return multiCondition;
  }

  public void setMultiCondition(ActivityMultiCondition multiCondition) {
    this.multiCondition = multiCondition;
  }


  public Activity PUSH(ActivityPUSH PUSH) {
    this.PUSH = PUSH;
    return this;
  }

  /**
   * Get PUSH
   * @return PUSH
   */
  @javax.annotation.Nullable
  public ActivityPUSH getPUSH() {
    return PUSH;
  }

  public void setPUSH(ActivityPUSH PUSH) {
    this.PUSH = PUSH;
  }


  public Activity randomSplit(ActivityRandomSplit randomSplit) {
    this.randomSplit = randomSplit;
    return this;
  }

  /**
   * Get randomSplit
   * @return randomSplit
   */
  @javax.annotation.Nullable
  public ActivityRandomSplit getRandomSplit() {
    return randomSplit;
  }

  public void setRandomSplit(ActivityRandomSplit randomSplit) {
    this.randomSplit = randomSplit;
  }


  public Activity SMS(ActivitySMS SMS) {
    this.SMS = SMS;
    return this;
  }

  /**
   * Get SMS
   * @return SMS
   */
  @javax.annotation.Nullable
  public ActivitySMS getSMS() {
    return SMS;
  }

  public void setSMS(ActivitySMS SMS) {
    this.SMS = SMS;
  }


  public Activity wait(ActivityWait wait) {
    this.wait = wait;
    return this;
  }

  /**
   * Get wait
   * @return wait
   */
  @javax.annotation.Nullable
  public ActivityWait getWait() {
    return wait;
  }

  public void setWait(ActivityWait wait) {
    this.wait = wait;
  }


  public Activity contactCenter(ActivityContactCenter contactCenter) {
    this.contactCenter = contactCenter;
    return this;
  }

  /**
   * Get contactCenter
   * @return contactCenter
   */
  @javax.annotation.Nullable
  public ActivityContactCenter getContactCenter() {
    return contactCenter;
  }

  public void setContactCenter(ActivityContactCenter contactCenter) {
    this.contactCenter = contactCenter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Activity activity = (Activity) o;
    return Objects.equals(this.CUSTOM, activity.CUSTOM) &&
        Objects.equals(this.conditionalSplit, activity.conditionalSplit) &&
        Objects.equals(this.description, activity.description) &&
        Objects.equals(this.EMAIL, activity.EMAIL) &&
        Objects.equals(this.holdout, activity.holdout) &&
        Objects.equals(this.multiCondition, activity.multiCondition) &&
        Objects.equals(this.PUSH, activity.PUSH) &&
        Objects.equals(this.randomSplit, activity.randomSplit) &&
        Objects.equals(this.SMS, activity.SMS) &&
        Objects.equals(this.wait, activity.wait) &&
        Objects.equals(this.contactCenter, activity.contactCenter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(CUSTOM, conditionalSplit, description, EMAIL, holdout, multiCondition, PUSH, randomSplit, SMS, wait, contactCenter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Activity {\n");
    sb.append("    CUSTOM: ").append(toIndentedString(CUSTOM)).append("\n");
    sb.append("    conditionalSplit: ").append(toIndentedString(conditionalSplit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    EMAIL: ").append(toIndentedString(EMAIL)).append("\n");
    sb.append("    holdout: ").append(toIndentedString(holdout)).append("\n");
    sb.append("    multiCondition: ").append(toIndentedString(multiCondition)).append("\n");
    sb.append("    PUSH: ").append(toIndentedString(PUSH)).append("\n");
    sb.append("    randomSplit: ").append(toIndentedString(randomSplit)).append("\n");
    sb.append("    SMS: ").append(toIndentedString(SMS)).append("\n");
    sb.append("    wait: ").append(toIndentedString(wait)).append("\n");
    sb.append("    contactCenter: ").append(toIndentedString(contactCenter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CUSTOM");
    openapiFields.add("ConditionalSplit");
    openapiFields.add("Description");
    openapiFields.add("EMAIL");
    openapiFields.add("Holdout");
    openapiFields.add("MultiCondition");
    openapiFields.add("PUSH");
    openapiFields.add("RandomSplit");
    openapiFields.add("SMS");
    openapiFields.add("Wait");
    openapiFields.add("ContactCenter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Activity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Activity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Activity is not found in the empty JSON string", Activity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Activity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Activity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CUSTOM`
      if (jsonObj.get("CUSTOM") != null && !jsonObj.get("CUSTOM").isJsonNull()) {
        ActivityCUSTOM.validateJsonElement(jsonObj.get("CUSTOM"));
      }
      // validate the optional field `ConditionalSplit`
      if (jsonObj.get("ConditionalSplit") != null && !jsonObj.get("ConditionalSplit").isJsonNull()) {
        ActivityConditionalSplit.validateJsonElement(jsonObj.get("ConditionalSplit"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `EMAIL`
      if (jsonObj.get("EMAIL") != null && !jsonObj.get("EMAIL").isJsonNull()) {
        ActivityEMAIL.validateJsonElement(jsonObj.get("EMAIL"));
      }
      // validate the optional field `Holdout`
      if (jsonObj.get("Holdout") != null && !jsonObj.get("Holdout").isJsonNull()) {
        ActivityHoldout.validateJsonElement(jsonObj.get("Holdout"));
      }
      // validate the optional field `MultiCondition`
      if (jsonObj.get("MultiCondition") != null && !jsonObj.get("MultiCondition").isJsonNull()) {
        ActivityMultiCondition.validateJsonElement(jsonObj.get("MultiCondition"));
      }
      // validate the optional field `PUSH`
      if (jsonObj.get("PUSH") != null && !jsonObj.get("PUSH").isJsonNull()) {
        ActivityPUSH.validateJsonElement(jsonObj.get("PUSH"));
      }
      // validate the optional field `RandomSplit`
      if (jsonObj.get("RandomSplit") != null && !jsonObj.get("RandomSplit").isJsonNull()) {
        ActivityRandomSplit.validateJsonElement(jsonObj.get("RandomSplit"));
      }
      // validate the optional field `SMS`
      if (jsonObj.get("SMS") != null && !jsonObj.get("SMS").isJsonNull()) {
        ActivitySMS.validateJsonElement(jsonObj.get("SMS"));
      }
      // validate the optional field `Wait`
      if (jsonObj.get("Wait") != null && !jsonObj.get("Wait").isJsonNull()) {
        ActivityWait.validateJsonElement(jsonObj.get("Wait"));
      }
      // validate the optional field `ContactCenter`
      if (jsonObj.get("ContactCenter") != null && !jsonObj.get("ContactCenter").isJsonNull()) {
        ActivityContactCenter.validateJsonElement(jsonObj.get("ContactCenter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Activity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Activity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Activity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Activity.class));

       return (TypeAdapter<T>) new TypeAdapter<Activity>() {
           @Override
           public void write(JsonWriter out, Activity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Activity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Activity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Activity
   * @throws IOException if the JSON string is invalid with respect to Activity
   */
  public static Activity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Activity.class);
  }

  /**
   * Convert an instance of Activity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

