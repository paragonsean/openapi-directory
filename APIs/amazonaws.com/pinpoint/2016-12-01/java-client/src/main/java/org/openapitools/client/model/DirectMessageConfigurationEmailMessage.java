/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EmailMessageRawEmail;
import org.openapitools.client.model.EmailMessageSimpleEmail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DirectMessageConfigurationEmailMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectMessageConfigurationEmailMessage {
  public static final String SERIALIZED_NAME_BODY = "Body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_FEEDBACK_FORWARDING_ADDRESS = "FeedbackForwardingAddress";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_FORWARDING_ADDRESS)
  private String feedbackForwardingAddress;

  public static final String SERIALIZED_NAME_FROM_ADDRESS = "FromAddress";
  @SerializedName(SERIALIZED_NAME_FROM_ADDRESS)
  private String fromAddress;

  public static final String SERIALIZED_NAME_RAW_EMAIL = "RawEmail";
  @SerializedName(SERIALIZED_NAME_RAW_EMAIL)
  private EmailMessageRawEmail rawEmail;

  public static final String SERIALIZED_NAME_REPLY_TO_ADDRESSES = "ReplyToAddresses";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_ADDRESSES)
  private List replyToAddresses;

  public static final String SERIALIZED_NAME_SIMPLE_EMAIL = "SimpleEmail";
  @SerializedName(SERIALIZED_NAME_SIMPLE_EMAIL)
  private EmailMessageSimpleEmail simpleEmail;

  public static final String SERIALIZED_NAME_SUBSTITUTIONS = "Substitutions";
  @SerializedName(SERIALIZED_NAME_SUBSTITUTIONS)
  private Map substitutions;

  public DirectMessageConfigurationEmailMessage() {
  }

  public DirectMessageConfigurationEmailMessage body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public DirectMessageConfigurationEmailMessage feedbackForwardingAddress(String feedbackForwardingAddress) {
    this.feedbackForwardingAddress = feedbackForwardingAddress;
    return this;
  }

  /**
   * Get feedbackForwardingAddress
   * @return feedbackForwardingAddress
   */
  @javax.annotation.Nullable
  public String getFeedbackForwardingAddress() {
    return feedbackForwardingAddress;
  }

  public void setFeedbackForwardingAddress(String feedbackForwardingAddress) {
    this.feedbackForwardingAddress = feedbackForwardingAddress;
  }


  public DirectMessageConfigurationEmailMessage fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

  /**
   * Get fromAddress
   * @return fromAddress
   */
  @javax.annotation.Nullable
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public DirectMessageConfigurationEmailMessage rawEmail(EmailMessageRawEmail rawEmail) {
    this.rawEmail = rawEmail;
    return this;
  }

  /**
   * Get rawEmail
   * @return rawEmail
   */
  @javax.annotation.Nullable
  public EmailMessageRawEmail getRawEmail() {
    return rawEmail;
  }

  public void setRawEmail(EmailMessageRawEmail rawEmail) {
    this.rawEmail = rawEmail;
  }


  public DirectMessageConfigurationEmailMessage replyToAddresses(List replyToAddresses) {
    this.replyToAddresses = replyToAddresses;
    return this;
  }

  /**
   * Get replyToAddresses
   * @return replyToAddresses
   */
  @javax.annotation.Nullable
  public List getReplyToAddresses() {
    return replyToAddresses;
  }

  public void setReplyToAddresses(List replyToAddresses) {
    this.replyToAddresses = replyToAddresses;
  }


  public DirectMessageConfigurationEmailMessage simpleEmail(EmailMessageSimpleEmail simpleEmail) {
    this.simpleEmail = simpleEmail;
    return this;
  }

  /**
   * Get simpleEmail
   * @return simpleEmail
   */
  @javax.annotation.Nullable
  public EmailMessageSimpleEmail getSimpleEmail() {
    return simpleEmail;
  }

  public void setSimpleEmail(EmailMessageSimpleEmail simpleEmail) {
    this.simpleEmail = simpleEmail;
  }


  public DirectMessageConfigurationEmailMessage substitutions(Map substitutions) {
    this.substitutions = substitutions;
    return this;
  }

  /**
   * Get substitutions
   * @return substitutions
   */
  @javax.annotation.Nullable
  public Map getSubstitutions() {
    return substitutions;
  }

  public void setSubstitutions(Map substitutions) {
    this.substitutions = substitutions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectMessageConfigurationEmailMessage directMessageConfigurationEmailMessage = (DirectMessageConfigurationEmailMessage) o;
    return Objects.equals(this.body, directMessageConfigurationEmailMessage.body) &&
        Objects.equals(this.feedbackForwardingAddress, directMessageConfigurationEmailMessage.feedbackForwardingAddress) &&
        Objects.equals(this.fromAddress, directMessageConfigurationEmailMessage.fromAddress) &&
        Objects.equals(this.rawEmail, directMessageConfigurationEmailMessage.rawEmail) &&
        Objects.equals(this.replyToAddresses, directMessageConfigurationEmailMessage.replyToAddresses) &&
        Objects.equals(this.simpleEmail, directMessageConfigurationEmailMessage.simpleEmail) &&
        Objects.equals(this.substitutions, directMessageConfigurationEmailMessage.substitutions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, feedbackForwardingAddress, fromAddress, rawEmail, replyToAddresses, simpleEmail, substitutions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectMessageConfigurationEmailMessage {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    feedbackForwardingAddress: ").append(toIndentedString(feedbackForwardingAddress)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    rawEmail: ").append(toIndentedString(rawEmail)).append("\n");
    sb.append("    replyToAddresses: ").append(toIndentedString(replyToAddresses)).append("\n");
    sb.append("    simpleEmail: ").append(toIndentedString(simpleEmail)).append("\n");
    sb.append("    substitutions: ").append(toIndentedString(substitutions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Body");
    openapiFields.add("FeedbackForwardingAddress");
    openapiFields.add("FromAddress");
    openapiFields.add("RawEmail");
    openapiFields.add("ReplyToAddresses");
    openapiFields.add("SimpleEmail");
    openapiFields.add("Substitutions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectMessageConfigurationEmailMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectMessageConfigurationEmailMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectMessageConfigurationEmailMessage is not found in the empty JSON string", DirectMessageConfigurationEmailMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectMessageConfigurationEmailMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectMessageConfigurationEmailMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Body`
      if (jsonObj.get("Body") != null && !jsonObj.get("Body").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Body"));
      }
      // validate the optional field `FeedbackForwardingAddress`
      if (jsonObj.get("FeedbackForwardingAddress") != null && !jsonObj.get("FeedbackForwardingAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FeedbackForwardingAddress"));
      }
      // validate the optional field `FromAddress`
      if (jsonObj.get("FromAddress") != null && !jsonObj.get("FromAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FromAddress"));
      }
      // validate the optional field `RawEmail`
      if (jsonObj.get("RawEmail") != null && !jsonObj.get("RawEmail").isJsonNull()) {
        EmailMessageRawEmail.validateJsonElement(jsonObj.get("RawEmail"));
      }
      // validate the optional field `ReplyToAddresses`
      if (jsonObj.get("ReplyToAddresses") != null && !jsonObj.get("ReplyToAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReplyToAddresses"));
      }
      // validate the optional field `SimpleEmail`
      if (jsonObj.get("SimpleEmail") != null && !jsonObj.get("SimpleEmail").isJsonNull()) {
        EmailMessageSimpleEmail.validateJsonElement(jsonObj.get("SimpleEmail"));
      }
      // validate the optional field `Substitutions`
      if (jsonObj.get("Substitutions") != null && !jsonObj.get("Substitutions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Substitutions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectMessageConfigurationEmailMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectMessageConfigurationEmailMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectMessageConfigurationEmailMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectMessageConfigurationEmailMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectMessageConfigurationEmailMessage>() {
           @Override
           public void write(JsonWriter out, DirectMessageConfigurationEmailMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectMessageConfigurationEmailMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectMessageConfigurationEmailMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectMessageConfigurationEmailMessage
   * @throws IOException if the JSON string is invalid with respect to DirectMessageConfigurationEmailMessage
   */
  public static DirectMessageConfigurationEmailMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectMessageConfigurationEmailMessage.class);
  }

  /**
   * Convert an instance of DirectMessageConfigurationEmailMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

