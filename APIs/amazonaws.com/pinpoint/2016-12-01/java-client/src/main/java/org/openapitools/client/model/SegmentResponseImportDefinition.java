/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Format;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SegmentResponseImportDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SegmentResponseImportDefinition {
  public static final String SERIALIZED_NAME_CHANNEL_COUNTS = "ChannelCounts";
  @SerializedName(SERIALIZED_NAME_CHANNEL_COUNTS)
  private Map channelCounts;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "ExternalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Format format;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_S3_URL = "S3Url";
  @SerializedName(SERIALIZED_NAME_S3_URL)
  private String s3Url;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public SegmentResponseImportDefinition() {
  }

  public SegmentResponseImportDefinition channelCounts(Map channelCounts) {
    this.channelCounts = channelCounts;
    return this;
  }

  /**
   * Get channelCounts
   * @return channelCounts
   */
  @javax.annotation.Nullable
  public Map getChannelCounts() {
    return channelCounts;
  }

  public void setChannelCounts(Map channelCounts) {
    this.channelCounts = channelCounts;
  }


  public SegmentResponseImportDefinition externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nonnull
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public SegmentResponseImportDefinition format(Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public Format getFormat() {
    return format;
  }

  public void setFormat(Format format) {
    this.format = format;
  }


  public SegmentResponseImportDefinition roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public SegmentResponseImportDefinition s3Url(String s3Url) {
    this.s3Url = s3Url;
    return this;
  }

  /**
   * Get s3Url
   * @return s3Url
   */
  @javax.annotation.Nonnull
  public String getS3Url() {
    return s3Url;
  }

  public void setS3Url(String s3Url) {
    this.s3Url = s3Url;
  }


  public SegmentResponseImportDefinition size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentResponseImportDefinition segmentResponseImportDefinition = (SegmentResponseImportDefinition) o;
    return Objects.equals(this.channelCounts, segmentResponseImportDefinition.channelCounts) &&
        Objects.equals(this.externalId, segmentResponseImportDefinition.externalId) &&
        Objects.equals(this.format, segmentResponseImportDefinition.format) &&
        Objects.equals(this.roleArn, segmentResponseImportDefinition.roleArn) &&
        Objects.equals(this.s3Url, segmentResponseImportDefinition.s3Url) &&
        Objects.equals(this.size, segmentResponseImportDefinition.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelCounts, externalId, format, roleArn, s3Url, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentResponseImportDefinition {\n");
    sb.append("    channelCounts: ").append(toIndentedString(channelCounts)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    s3Url: ").append(toIndentedString(s3Url)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChannelCounts");
    openapiFields.add("ExternalId");
    openapiFields.add("Format");
    openapiFields.add("RoleArn");
    openapiFields.add("S3Url");
    openapiFields.add("Size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ExternalId");
    openapiRequiredFields.add("Format");
    openapiRequiredFields.add("RoleArn");
    openapiRequiredFields.add("S3Url");
    openapiRequiredFields.add("Size");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentResponseImportDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentResponseImportDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentResponseImportDefinition is not found in the empty JSON string", SegmentResponseImportDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentResponseImportDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentResponseImportDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SegmentResponseImportDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChannelCounts`
      if (jsonObj.get("ChannelCounts") != null && !jsonObj.get("ChannelCounts").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ChannelCounts"));
      }
      // validate the required field `ExternalId`
      String.validateJsonElement(jsonObj.get("ExternalId"));
      // validate the required field `Format`
      Format.validateJsonElement(jsonObj.get("Format"));
      // validate the required field `RoleArn`
      String.validateJsonElement(jsonObj.get("RoleArn"));
      // validate the required field `S3Url`
      String.validateJsonElement(jsonObj.get("S3Url"));
      // validate the required field `Size`
      Integer.validateJsonElement(jsonObj.get("Size"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentResponseImportDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentResponseImportDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentResponseImportDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentResponseImportDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentResponseImportDefinition>() {
           @Override
           public void write(JsonWriter out, SegmentResponseImportDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentResponseImportDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentResponseImportDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentResponseImportDefinition
   * @throws IOException if the JSON string is invalid with respect to SegmentResponseImportDefinition
   */
  public static SegmentResponseImportDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentResponseImportDefinition.class);
  }

  /**
   * Convert an instance of SegmentResponseImportDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

