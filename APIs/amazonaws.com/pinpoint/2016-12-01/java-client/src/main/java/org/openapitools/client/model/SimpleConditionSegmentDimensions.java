/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SegmentDimensionsBehavior;
import org.openapitools.client.model.SegmentDimensionsDemographic;
import org.openapitools.client.model.SegmentDimensionsLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimpleConditionSegmentDimensions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SimpleConditionSegmentDimensions {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map attributes;

  public static final String SERIALIZED_NAME_BEHAVIOR = "Behavior";
  @SerializedName(SERIALIZED_NAME_BEHAVIOR)
  private SegmentDimensionsBehavior behavior;

  public static final String SERIALIZED_NAME_DEMOGRAPHIC = "Demographic";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHIC)
  private SegmentDimensionsDemographic demographic;

  public static final String SERIALIZED_NAME_LOCATION = "Location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private SegmentDimensionsLocation location;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Map metrics;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTES = "UserAttributes";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTES)
  private Map userAttributes;

  public SimpleConditionSegmentDimensions() {
  }

  public SimpleConditionSegmentDimensions attributes(Map attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map getAttributes() {
    return attributes;
  }

  public void setAttributes(Map attributes) {
    this.attributes = attributes;
  }


  public SimpleConditionSegmentDimensions behavior(SegmentDimensionsBehavior behavior) {
    this.behavior = behavior;
    return this;
  }

  /**
   * Get behavior
   * @return behavior
   */
  @javax.annotation.Nullable
  public SegmentDimensionsBehavior getBehavior() {
    return behavior;
  }

  public void setBehavior(SegmentDimensionsBehavior behavior) {
    this.behavior = behavior;
  }


  public SimpleConditionSegmentDimensions demographic(SegmentDimensionsDemographic demographic) {
    this.demographic = demographic;
    return this;
  }

  /**
   * Get demographic
   * @return demographic
   */
  @javax.annotation.Nullable
  public SegmentDimensionsDemographic getDemographic() {
    return demographic;
  }

  public void setDemographic(SegmentDimensionsDemographic demographic) {
    this.demographic = demographic;
  }


  public SimpleConditionSegmentDimensions location(SegmentDimensionsLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public SegmentDimensionsLocation getLocation() {
    return location;
  }

  public void setLocation(SegmentDimensionsLocation location) {
    this.location = location;
  }


  public SimpleConditionSegmentDimensions metrics(Map metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public Map getMetrics() {
    return metrics;
  }

  public void setMetrics(Map metrics) {
    this.metrics = metrics;
  }


  public SimpleConditionSegmentDimensions userAttributes(Map userAttributes) {
    this.userAttributes = userAttributes;
    return this;
  }

  /**
   * Get userAttributes
   * @return userAttributes
   */
  @javax.annotation.Nullable
  public Map getUserAttributes() {
    return userAttributes;
  }

  public void setUserAttributes(Map userAttributes) {
    this.userAttributes = userAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleConditionSegmentDimensions simpleConditionSegmentDimensions = (SimpleConditionSegmentDimensions) o;
    return Objects.equals(this.attributes, simpleConditionSegmentDimensions.attributes) &&
        Objects.equals(this.behavior, simpleConditionSegmentDimensions.behavior) &&
        Objects.equals(this.demographic, simpleConditionSegmentDimensions.demographic) &&
        Objects.equals(this.location, simpleConditionSegmentDimensions.location) &&
        Objects.equals(this.metrics, simpleConditionSegmentDimensions.metrics) &&
        Objects.equals(this.userAttributes, simpleConditionSegmentDimensions.userAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, behavior, demographic, location, metrics, userAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleConditionSegmentDimensions {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    behavior: ").append(toIndentedString(behavior)).append("\n");
    sb.append("    demographic: ").append(toIndentedString(demographic)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    userAttributes: ").append(toIndentedString(userAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("Behavior");
    openapiFields.add("Demographic");
    openapiFields.add("Location");
    openapiFields.add("Metrics");
    openapiFields.add("UserAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SimpleConditionSegmentDimensions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SimpleConditionSegmentDimensions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleConditionSegmentDimensions is not found in the empty JSON string", SimpleConditionSegmentDimensions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SimpleConditionSegmentDimensions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimpleConditionSegmentDimensions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Attributes"));
      }
      // validate the optional field `Behavior`
      if (jsonObj.get("Behavior") != null && !jsonObj.get("Behavior").isJsonNull()) {
        SegmentDimensionsBehavior.validateJsonElement(jsonObj.get("Behavior"));
      }
      // validate the optional field `Demographic`
      if (jsonObj.get("Demographic") != null && !jsonObj.get("Demographic").isJsonNull()) {
        SegmentDimensionsDemographic.validateJsonElement(jsonObj.get("Demographic"));
      }
      // validate the optional field `Location`
      if (jsonObj.get("Location") != null && !jsonObj.get("Location").isJsonNull()) {
        SegmentDimensionsLocation.validateJsonElement(jsonObj.get("Location"));
      }
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Metrics"));
      }
      // validate the optional field `UserAttributes`
      if (jsonObj.get("UserAttributes") != null && !jsonObj.get("UserAttributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("UserAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleConditionSegmentDimensions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleConditionSegmentDimensions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleConditionSegmentDimensions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleConditionSegmentDimensions.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleConditionSegmentDimensions>() {
           @Override
           public void write(JsonWriter out, SimpleConditionSegmentDimensions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleConditionSegmentDimensions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SimpleConditionSegmentDimensions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SimpleConditionSegmentDimensions
   * @throws IOException if the JSON string is invalid with respect to SimpleConditionSegmentDimensions
   */
  public static SimpleConditionSegmentDimensions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleConditionSegmentDimensions.class);
  }

  /**
   * Convert an instance of SimpleConditionSegmentDimensions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

