/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Frequency;
import org.openapitools.client.model.ScheduleEventFilter;
import org.openapitools.client.model.ScheduleQuietTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the schedule settings for a campaign.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schedule {
  public static final String SERIALIZED_NAME_END_TIME = "EndTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_EVENT_FILTER = "EventFilter";
  @SerializedName(SERIALIZED_NAME_EVENT_FILTER)
  private ScheduleEventFilter eventFilter;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Frequency frequency;

  public static final String SERIALIZED_NAME_IS_LOCAL_TIME = "IsLocalTime";
  @SerializedName(SERIALIZED_NAME_IS_LOCAL_TIME)
  private Boolean isLocalTime;

  public static final String SERIALIZED_NAME_QUIET_TIME = "QuietTime";
  @SerializedName(SERIALIZED_NAME_QUIET_TIME)
  private ScheduleQuietTime quietTime;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public Schedule() {
  }

  public Schedule endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Get endTime
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public Schedule eventFilter(ScheduleEventFilter eventFilter) {
    this.eventFilter = eventFilter;
    return this;
  }

  /**
   * Get eventFilter
   * @return eventFilter
   */
  @javax.annotation.Nullable
  public ScheduleEventFilter getEventFilter() {
    return eventFilter;
  }

  public void setEventFilter(ScheduleEventFilter eventFilter) {
    this.eventFilter = eventFilter;
  }


  public Schedule frequency(Frequency frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public Frequency getFrequency() {
    return frequency;
  }

  public void setFrequency(Frequency frequency) {
    this.frequency = frequency;
  }


  public Schedule isLocalTime(Boolean isLocalTime) {
    this.isLocalTime = isLocalTime;
    return this;
  }

  /**
   * Get isLocalTime
   * @return isLocalTime
   */
  @javax.annotation.Nullable
  public Boolean getIsLocalTime() {
    return isLocalTime;
  }

  public void setIsLocalTime(Boolean isLocalTime) {
    this.isLocalTime = isLocalTime;
  }


  public Schedule quietTime(ScheduleQuietTime quietTime) {
    this.quietTime = quietTime;
    return this;
  }

  /**
   * Get quietTime
   * @return quietTime
   */
  @javax.annotation.Nullable
  public ScheduleQuietTime getQuietTime() {
    return quietTime;
  }

  public void setQuietTime(ScheduleQuietTime quietTime) {
    this.quietTime = quietTime;
  }


  public Schedule startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nonnull
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public Schedule timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule schedule = (Schedule) o;
    return Objects.equals(this.endTime, schedule.endTime) &&
        Objects.equals(this.eventFilter, schedule.eventFilter) &&
        Objects.equals(this.frequency, schedule.frequency) &&
        Objects.equals(this.isLocalTime, schedule.isLocalTime) &&
        Objects.equals(this.quietTime, schedule.quietTime) &&
        Objects.equals(this.startTime, schedule.startTime) &&
        Objects.equals(this.timezone, schedule.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, eventFilter, frequency, isLocalTime, quietTime, startTime, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    eventFilter: ").append(toIndentedString(eventFilter)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    isLocalTime: ").append(toIndentedString(isLocalTime)).append("\n");
    sb.append("    quietTime: ").append(toIndentedString(quietTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndTime");
    openapiFields.add("EventFilter");
    openapiFields.add("Frequency");
    openapiFields.add("IsLocalTime");
    openapiFields.add("QuietTime");
    openapiFields.add("StartTime");
    openapiFields.add("Timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StartTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedule is not found in the empty JSON string", Schedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Schedule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EndTime`
      if (jsonObj.get("EndTime") != null && !jsonObj.get("EndTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndTime"));
      }
      // validate the optional field `EventFilter`
      if (jsonObj.get("EventFilter") != null && !jsonObj.get("EventFilter").isJsonNull()) {
        ScheduleEventFilter.validateJsonElement(jsonObj.get("EventFilter"));
      }
      // validate the optional field `Frequency`
      if (jsonObj.get("Frequency") != null && !jsonObj.get("Frequency").isJsonNull()) {
        Frequency.validateJsonElement(jsonObj.get("Frequency"));
      }
      // validate the optional field `IsLocalTime`
      if (jsonObj.get("IsLocalTime") != null && !jsonObj.get("IsLocalTime").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsLocalTime"));
      }
      // validate the optional field `QuietTime`
      if (jsonObj.get("QuietTime") != null && !jsonObj.get("QuietTime").isJsonNull()) {
        ScheduleQuietTime.validateJsonElement(jsonObj.get("QuietTime"));
      }
      // validate the required field `StartTime`
      String.validateJsonElement(jsonObj.get("StartTime"));
      // validate the optional field `Timezone`
      if (jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timezone"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedule.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedule>() {
           @Override
           public void write(JsonWriter out, Schedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schedule
   * @throws IOException if the JSON string is invalid with respect to Schedule
   */
  public static Schedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedule.class);
  }

  /**
   * Convert an instance of Schedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

