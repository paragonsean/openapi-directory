/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies Amazon Pinpoint configuration settings for retrieving and processing recommendation data from a recommender model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateRecommenderConfiguration {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map attributes;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RECOMMENDATION_PROVIDER_ID_TYPE = "RecommendationProviderIdType";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_PROVIDER_ID_TYPE)
  private String recommendationProviderIdType;

  public static final String SERIALIZED_NAME_RECOMMENDATION_PROVIDER_ROLE_ARN = "RecommendationProviderRoleArn";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_PROVIDER_ROLE_ARN)
  private String recommendationProviderRoleArn;

  public static final String SERIALIZED_NAME_RECOMMENDATION_PROVIDER_URI = "RecommendationProviderUri";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_PROVIDER_URI)
  private String recommendationProviderUri;

  public static final String SERIALIZED_NAME_RECOMMENDATION_TRANSFORMER_URI = "RecommendationTransformerUri";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_TRANSFORMER_URI)
  private String recommendationTransformerUri;

  public static final String SERIALIZED_NAME_RECOMMENDATIONS_DISPLAY_NAME = "RecommendationsDisplayName";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS_DISPLAY_NAME)
  private String recommendationsDisplayName;

  public static final String SERIALIZED_NAME_RECOMMENDATIONS_PER_MESSAGE = "RecommendationsPerMessage";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATIONS_PER_MESSAGE)
  private Integer recommendationsPerMessage;

  public UpdateRecommenderConfiguration() {
  }

  public UpdateRecommenderConfiguration attributes(Map attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map getAttributes() {
    return attributes;
  }

  public void setAttributes(Map attributes) {
    this.attributes = attributes;
  }


  public UpdateRecommenderConfiguration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateRecommenderConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateRecommenderConfiguration recommendationProviderIdType(String recommendationProviderIdType) {
    this.recommendationProviderIdType = recommendationProviderIdType;
    return this;
  }

  /**
   * Get recommendationProviderIdType
   * @return recommendationProviderIdType
   */
  @javax.annotation.Nullable
  public String getRecommendationProviderIdType() {
    return recommendationProviderIdType;
  }

  public void setRecommendationProviderIdType(String recommendationProviderIdType) {
    this.recommendationProviderIdType = recommendationProviderIdType;
  }


  public UpdateRecommenderConfiguration recommendationProviderRoleArn(String recommendationProviderRoleArn) {
    this.recommendationProviderRoleArn = recommendationProviderRoleArn;
    return this;
  }

  /**
   * Get recommendationProviderRoleArn
   * @return recommendationProviderRoleArn
   */
  @javax.annotation.Nonnull
  public String getRecommendationProviderRoleArn() {
    return recommendationProviderRoleArn;
  }

  public void setRecommendationProviderRoleArn(String recommendationProviderRoleArn) {
    this.recommendationProviderRoleArn = recommendationProviderRoleArn;
  }


  public UpdateRecommenderConfiguration recommendationProviderUri(String recommendationProviderUri) {
    this.recommendationProviderUri = recommendationProviderUri;
    return this;
  }

  /**
   * Get recommendationProviderUri
   * @return recommendationProviderUri
   */
  @javax.annotation.Nonnull
  public String getRecommendationProviderUri() {
    return recommendationProviderUri;
  }

  public void setRecommendationProviderUri(String recommendationProviderUri) {
    this.recommendationProviderUri = recommendationProviderUri;
  }


  public UpdateRecommenderConfiguration recommendationTransformerUri(String recommendationTransformerUri) {
    this.recommendationTransformerUri = recommendationTransformerUri;
    return this;
  }

  /**
   * Get recommendationTransformerUri
   * @return recommendationTransformerUri
   */
  @javax.annotation.Nullable
  public String getRecommendationTransformerUri() {
    return recommendationTransformerUri;
  }

  public void setRecommendationTransformerUri(String recommendationTransformerUri) {
    this.recommendationTransformerUri = recommendationTransformerUri;
  }


  public UpdateRecommenderConfiguration recommendationsDisplayName(String recommendationsDisplayName) {
    this.recommendationsDisplayName = recommendationsDisplayName;
    return this;
  }

  /**
   * Get recommendationsDisplayName
   * @return recommendationsDisplayName
   */
  @javax.annotation.Nullable
  public String getRecommendationsDisplayName() {
    return recommendationsDisplayName;
  }

  public void setRecommendationsDisplayName(String recommendationsDisplayName) {
    this.recommendationsDisplayName = recommendationsDisplayName;
  }


  public UpdateRecommenderConfiguration recommendationsPerMessage(Integer recommendationsPerMessage) {
    this.recommendationsPerMessage = recommendationsPerMessage;
    return this;
  }

  /**
   * Get recommendationsPerMessage
   * @return recommendationsPerMessage
   */
  @javax.annotation.Nullable
  public Integer getRecommendationsPerMessage() {
    return recommendationsPerMessage;
  }

  public void setRecommendationsPerMessage(Integer recommendationsPerMessage) {
    this.recommendationsPerMessage = recommendationsPerMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRecommenderConfiguration updateRecommenderConfiguration = (UpdateRecommenderConfiguration) o;
    return Objects.equals(this.attributes, updateRecommenderConfiguration.attributes) &&
        Objects.equals(this.description, updateRecommenderConfiguration.description) &&
        Objects.equals(this.name, updateRecommenderConfiguration.name) &&
        Objects.equals(this.recommendationProviderIdType, updateRecommenderConfiguration.recommendationProviderIdType) &&
        Objects.equals(this.recommendationProviderRoleArn, updateRecommenderConfiguration.recommendationProviderRoleArn) &&
        Objects.equals(this.recommendationProviderUri, updateRecommenderConfiguration.recommendationProviderUri) &&
        Objects.equals(this.recommendationTransformerUri, updateRecommenderConfiguration.recommendationTransformerUri) &&
        Objects.equals(this.recommendationsDisplayName, updateRecommenderConfiguration.recommendationsDisplayName) &&
        Objects.equals(this.recommendationsPerMessage, updateRecommenderConfiguration.recommendationsPerMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, description, name, recommendationProviderIdType, recommendationProviderRoleArn, recommendationProviderUri, recommendationTransformerUri, recommendationsDisplayName, recommendationsPerMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRecommenderConfiguration {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    recommendationProviderIdType: ").append(toIndentedString(recommendationProviderIdType)).append("\n");
    sb.append("    recommendationProviderRoleArn: ").append(toIndentedString(recommendationProviderRoleArn)).append("\n");
    sb.append("    recommendationProviderUri: ").append(toIndentedString(recommendationProviderUri)).append("\n");
    sb.append("    recommendationTransformerUri: ").append(toIndentedString(recommendationTransformerUri)).append("\n");
    sb.append("    recommendationsDisplayName: ").append(toIndentedString(recommendationsDisplayName)).append("\n");
    sb.append("    recommendationsPerMessage: ").append(toIndentedString(recommendationsPerMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attributes");
    openapiFields.add("Description");
    openapiFields.add("Name");
    openapiFields.add("RecommendationProviderIdType");
    openapiFields.add("RecommendationProviderRoleArn");
    openapiFields.add("RecommendationProviderUri");
    openapiFields.add("RecommendationTransformerUri");
    openapiFields.add("RecommendationsDisplayName");
    openapiFields.add("RecommendationsPerMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RecommendationProviderRoleArn");
    openapiRequiredFields.add("RecommendationProviderUri");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRecommenderConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRecommenderConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRecommenderConfiguration is not found in the empty JSON string", UpdateRecommenderConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRecommenderConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRecommenderConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateRecommenderConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Attributes"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `RecommendationProviderIdType`
      if (jsonObj.get("RecommendationProviderIdType") != null && !jsonObj.get("RecommendationProviderIdType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationProviderIdType"));
      }
      // validate the required field `RecommendationProviderRoleArn`
      String.validateJsonElement(jsonObj.get("RecommendationProviderRoleArn"));
      // validate the required field `RecommendationProviderUri`
      String.validateJsonElement(jsonObj.get("RecommendationProviderUri"));
      // validate the optional field `RecommendationTransformerUri`
      if (jsonObj.get("RecommendationTransformerUri") != null && !jsonObj.get("RecommendationTransformerUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationTransformerUri"));
      }
      // validate the optional field `RecommendationsDisplayName`
      if (jsonObj.get("RecommendationsDisplayName") != null && !jsonObj.get("RecommendationsDisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecommendationsDisplayName"));
      }
      // validate the optional field `RecommendationsPerMessage`
      if (jsonObj.get("RecommendationsPerMessage") != null && !jsonObj.get("RecommendationsPerMessage").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RecommendationsPerMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRecommenderConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRecommenderConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRecommenderConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRecommenderConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRecommenderConfiguration>() {
           @Override
           public void write(JsonWriter out, UpdateRecommenderConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRecommenderConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRecommenderConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRecommenderConfiguration
   * @throws IOException if the JSON string is invalid with respect to UpdateRecommenderConfiguration
   */
  public static UpdateRecommenderConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRecommenderConfiguration.class);
  }

  /**
   * Convert an instance of UpdateRecommenderConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

