/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ButtonAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Default button configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefaultButtonConfiguration {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "BackgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_BORDER_RADIUS = "BorderRadius";
  @SerializedName(SERIALIZED_NAME_BORDER_RADIUS)
  private Integer borderRadius;

  public static final String SERIALIZED_NAME_BUTTON_ACTION = "ButtonAction";
  @SerializedName(SERIALIZED_NAME_BUTTON_ACTION)
  private ButtonAction buttonAction;

  public static final String SERIALIZED_NAME_LINK = "Link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "TextColor";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor;

  public DefaultButtonConfiguration() {
  }

  public DefaultButtonConfiguration backgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public String getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public DefaultButtonConfiguration borderRadius(Integer borderRadius) {
    this.borderRadius = borderRadius;
    return this;
  }

  /**
   * Get borderRadius
   * @return borderRadius
   */
  @javax.annotation.Nullable
  public Integer getBorderRadius() {
    return borderRadius;
  }

  public void setBorderRadius(Integer borderRadius) {
    this.borderRadius = borderRadius;
  }


  public DefaultButtonConfiguration buttonAction(ButtonAction buttonAction) {
    this.buttonAction = buttonAction;
    return this;
  }

  /**
   * Get buttonAction
   * @return buttonAction
   */
  @javax.annotation.Nonnull
  public ButtonAction getButtonAction() {
    return buttonAction;
  }

  public void setButtonAction(ButtonAction buttonAction) {
    this.buttonAction = buttonAction;
  }


  public DefaultButtonConfiguration link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public DefaultButtonConfiguration text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nonnull
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public DefaultButtonConfiguration textColor(String textColor) {
    this.textColor = textColor;
    return this;
  }

  /**
   * Get textColor
   * @return textColor
   */
  @javax.annotation.Nullable
  public String getTextColor() {
    return textColor;
  }

  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultButtonConfiguration defaultButtonConfiguration = (DefaultButtonConfiguration) o;
    return Objects.equals(this.backgroundColor, defaultButtonConfiguration.backgroundColor) &&
        Objects.equals(this.borderRadius, defaultButtonConfiguration.borderRadius) &&
        Objects.equals(this.buttonAction, defaultButtonConfiguration.buttonAction) &&
        Objects.equals(this.link, defaultButtonConfiguration.link) &&
        Objects.equals(this.text, defaultButtonConfiguration.text) &&
        Objects.equals(this.textColor, defaultButtonConfiguration.textColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, borderRadius, buttonAction, link, text, textColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultButtonConfiguration {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    borderRadius: ").append(toIndentedString(borderRadius)).append("\n");
    sb.append("    buttonAction: ").append(toIndentedString(buttonAction)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BackgroundColor");
    openapiFields.add("BorderRadius");
    openapiFields.add("ButtonAction");
    openapiFields.add("Link");
    openapiFields.add("Text");
    openapiFields.add("TextColor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ButtonAction");
    openapiRequiredFields.add("Text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultButtonConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultButtonConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultButtonConfiguration is not found in the empty JSON string", DefaultButtonConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultButtonConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultButtonConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DefaultButtonConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BackgroundColor`
      if (jsonObj.get("BackgroundColor") != null && !jsonObj.get("BackgroundColor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BackgroundColor"));
      }
      // validate the optional field `BorderRadius`
      if (jsonObj.get("BorderRadius") != null && !jsonObj.get("BorderRadius").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BorderRadius"));
      }
      // validate the required field `ButtonAction`
      ButtonAction.validateJsonElement(jsonObj.get("ButtonAction"));
      // validate the optional field `Link`
      if (jsonObj.get("Link") != null && !jsonObj.get("Link").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Link"));
      }
      // validate the required field `Text`
      String.validateJsonElement(jsonObj.get("Text"));
      // validate the optional field `TextColor`
      if (jsonObj.get("TextColor") != null && !jsonObj.get("TextColor").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TextColor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultButtonConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultButtonConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultButtonConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultButtonConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultButtonConfiguration>() {
           @Override
           public void write(JsonWriter out, DefaultButtonConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultButtonConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultButtonConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultButtonConfiguration
   * @throws IOException if the JSON string is invalid with respect to DefaultButtonConfiguration
   */
  public static DefaultButtonConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultButtonConfiguration.class);
  }

  /**
   * Convert an instance of DefaultButtonConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

