/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about a phone number.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NumberValidateResponse {
  public static final String SERIALIZED_NAME_CARRIER = "Carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private String carrier;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_CLEANSED_PHONE_NUMBER_E164 = "CleansedPhoneNumberE164";
  @SerializedName(SERIALIZED_NAME_CLEANSED_PHONE_NUMBER_E164)
  private String cleansedPhoneNumberE164;

  public static final String SERIALIZED_NAME_CLEANSED_PHONE_NUMBER_NATIONAL = "CleansedPhoneNumberNational";
  @SerializedName(SERIALIZED_NAME_CLEANSED_PHONE_NUMBER_NATIONAL)
  private String cleansedPhoneNumberNational;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_ISO2 = "CountryCodeIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_ISO2)
  private String countryCodeIso2;

  public static final String SERIALIZED_NAME_COUNTRY_CODE_NUMERIC = "CountryCodeNumeric";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE_NUMERIC)
  private String countryCodeNumeric;

  public static final String SERIALIZED_NAME_COUNTY = "County";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_ORIGINAL_COUNTRY_CODE_ISO2 = "OriginalCountryCodeIso2";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_COUNTRY_CODE_ISO2)
  private String originalCountryCodeIso2;

  public static final String SERIALIZED_NAME_ORIGINAL_PHONE_NUMBER = "OriginalPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PHONE_NUMBER)
  private String originalPhoneNumber;

  public static final String SERIALIZED_NAME_PHONE_TYPE = "PhoneType";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE)
  private String phoneType;

  public static final String SERIALIZED_NAME_PHONE_TYPE_CODE = "PhoneTypeCode";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE_CODE)
  private Integer phoneTypeCode;

  public static final String SERIALIZED_NAME_TIMEZONE = "Timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_ZIP_CODE = "ZipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public NumberValidateResponse() {
  }

  public NumberValidateResponse carrier(String carrier) {
    this.carrier = carrier;
    return this;
  }

  /**
   * Get carrier
   * @return carrier
   */
  @javax.annotation.Nullable
  public String getCarrier() {
    return carrier;
  }

  public void setCarrier(String carrier) {
    this.carrier = carrier;
  }


  public NumberValidateResponse city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public NumberValidateResponse cleansedPhoneNumberE164(String cleansedPhoneNumberE164) {
    this.cleansedPhoneNumberE164 = cleansedPhoneNumberE164;
    return this;
  }

  /**
   * Get cleansedPhoneNumberE164
   * @return cleansedPhoneNumberE164
   */
  @javax.annotation.Nullable
  public String getCleansedPhoneNumberE164() {
    return cleansedPhoneNumberE164;
  }

  public void setCleansedPhoneNumberE164(String cleansedPhoneNumberE164) {
    this.cleansedPhoneNumberE164 = cleansedPhoneNumberE164;
  }


  public NumberValidateResponse cleansedPhoneNumberNational(String cleansedPhoneNumberNational) {
    this.cleansedPhoneNumberNational = cleansedPhoneNumberNational;
    return this;
  }

  /**
   * Get cleansedPhoneNumberNational
   * @return cleansedPhoneNumberNational
   */
  @javax.annotation.Nullable
  public String getCleansedPhoneNumberNational() {
    return cleansedPhoneNumberNational;
  }

  public void setCleansedPhoneNumberNational(String cleansedPhoneNumberNational) {
    this.cleansedPhoneNumberNational = cleansedPhoneNumberNational;
  }


  public NumberValidateResponse country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public NumberValidateResponse countryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
    return this;
  }

  /**
   * Get countryCodeIso2
   * @return countryCodeIso2
   */
  @javax.annotation.Nullable
  public String getCountryCodeIso2() {
    return countryCodeIso2;
  }

  public void setCountryCodeIso2(String countryCodeIso2) {
    this.countryCodeIso2 = countryCodeIso2;
  }


  public NumberValidateResponse countryCodeNumeric(String countryCodeNumeric) {
    this.countryCodeNumeric = countryCodeNumeric;
    return this;
  }

  /**
   * Get countryCodeNumeric
   * @return countryCodeNumeric
   */
  @javax.annotation.Nullable
  public String getCountryCodeNumeric() {
    return countryCodeNumeric;
  }

  public void setCountryCodeNumeric(String countryCodeNumeric) {
    this.countryCodeNumeric = countryCodeNumeric;
  }


  public NumberValidateResponse county(String county) {
    this.county = county;
    return this;
  }

  /**
   * Get county
   * @return county
   */
  @javax.annotation.Nullable
  public String getCounty() {
    return county;
  }

  public void setCounty(String county) {
    this.county = county;
  }


  public NumberValidateResponse originalCountryCodeIso2(String originalCountryCodeIso2) {
    this.originalCountryCodeIso2 = originalCountryCodeIso2;
    return this;
  }

  /**
   * Get originalCountryCodeIso2
   * @return originalCountryCodeIso2
   */
  @javax.annotation.Nullable
  public String getOriginalCountryCodeIso2() {
    return originalCountryCodeIso2;
  }

  public void setOriginalCountryCodeIso2(String originalCountryCodeIso2) {
    this.originalCountryCodeIso2 = originalCountryCodeIso2;
  }


  public NumberValidateResponse originalPhoneNumber(String originalPhoneNumber) {
    this.originalPhoneNumber = originalPhoneNumber;
    return this;
  }

  /**
   * Get originalPhoneNumber
   * @return originalPhoneNumber
   */
  @javax.annotation.Nullable
  public String getOriginalPhoneNumber() {
    return originalPhoneNumber;
  }

  public void setOriginalPhoneNumber(String originalPhoneNumber) {
    this.originalPhoneNumber = originalPhoneNumber;
  }


  public NumberValidateResponse phoneType(String phoneType) {
    this.phoneType = phoneType;
    return this;
  }

  /**
   * Get phoneType
   * @return phoneType
   */
  @javax.annotation.Nullable
  public String getPhoneType() {
    return phoneType;
  }

  public void setPhoneType(String phoneType) {
    this.phoneType = phoneType;
  }


  public NumberValidateResponse phoneTypeCode(Integer phoneTypeCode) {
    this.phoneTypeCode = phoneTypeCode;
    return this;
  }

  /**
   * Get phoneTypeCode
   * @return phoneTypeCode
   */
  @javax.annotation.Nullable
  public Integer getPhoneTypeCode() {
    return phoneTypeCode;
  }

  public void setPhoneTypeCode(Integer phoneTypeCode) {
    this.phoneTypeCode = phoneTypeCode;
  }


  public NumberValidateResponse timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public NumberValidateResponse zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Get zipCode
   * @return zipCode
   */
  @javax.annotation.Nullable
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NumberValidateResponse numberValidateResponse = (NumberValidateResponse) o;
    return Objects.equals(this.carrier, numberValidateResponse.carrier) &&
        Objects.equals(this.city, numberValidateResponse.city) &&
        Objects.equals(this.cleansedPhoneNumberE164, numberValidateResponse.cleansedPhoneNumberE164) &&
        Objects.equals(this.cleansedPhoneNumberNational, numberValidateResponse.cleansedPhoneNumberNational) &&
        Objects.equals(this.country, numberValidateResponse.country) &&
        Objects.equals(this.countryCodeIso2, numberValidateResponse.countryCodeIso2) &&
        Objects.equals(this.countryCodeNumeric, numberValidateResponse.countryCodeNumeric) &&
        Objects.equals(this.county, numberValidateResponse.county) &&
        Objects.equals(this.originalCountryCodeIso2, numberValidateResponse.originalCountryCodeIso2) &&
        Objects.equals(this.originalPhoneNumber, numberValidateResponse.originalPhoneNumber) &&
        Objects.equals(this.phoneType, numberValidateResponse.phoneType) &&
        Objects.equals(this.phoneTypeCode, numberValidateResponse.phoneTypeCode) &&
        Objects.equals(this.timezone, numberValidateResponse.timezone) &&
        Objects.equals(this.zipCode, numberValidateResponse.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrier, city, cleansedPhoneNumberE164, cleansedPhoneNumberNational, country, countryCodeIso2, countryCodeNumeric, county, originalCountryCodeIso2, originalPhoneNumber, phoneType, phoneTypeCode, timezone, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NumberValidateResponse {\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    cleansedPhoneNumberE164: ").append(toIndentedString(cleansedPhoneNumberE164)).append("\n");
    sb.append("    cleansedPhoneNumberNational: ").append(toIndentedString(cleansedPhoneNumberNational)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countryCodeIso2: ").append(toIndentedString(countryCodeIso2)).append("\n");
    sb.append("    countryCodeNumeric: ").append(toIndentedString(countryCodeNumeric)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    originalCountryCodeIso2: ").append(toIndentedString(originalCountryCodeIso2)).append("\n");
    sb.append("    originalPhoneNumber: ").append(toIndentedString(originalPhoneNumber)).append("\n");
    sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
    sb.append("    phoneTypeCode: ").append(toIndentedString(phoneTypeCode)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Carrier");
    openapiFields.add("City");
    openapiFields.add("CleansedPhoneNumberE164");
    openapiFields.add("CleansedPhoneNumberNational");
    openapiFields.add("Country");
    openapiFields.add("CountryCodeIso2");
    openapiFields.add("CountryCodeNumeric");
    openapiFields.add("County");
    openapiFields.add("OriginalCountryCodeIso2");
    openapiFields.add("OriginalPhoneNumber");
    openapiFields.add("PhoneType");
    openapiFields.add("PhoneTypeCode");
    openapiFields.add("Timezone");
    openapiFields.add("ZipCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NumberValidateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NumberValidateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NumberValidateResponse is not found in the empty JSON string", NumberValidateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NumberValidateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NumberValidateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Carrier`
      if (jsonObj.get("Carrier") != null && !jsonObj.get("Carrier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Carrier"));
      }
      // validate the optional field `City`
      if (jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("City"));
      }
      // validate the optional field `CleansedPhoneNumberE164`
      if (jsonObj.get("CleansedPhoneNumberE164") != null && !jsonObj.get("CleansedPhoneNumberE164").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CleansedPhoneNumberE164"));
      }
      // validate the optional field `CleansedPhoneNumberNational`
      if (jsonObj.get("CleansedPhoneNumberNational") != null && !jsonObj.get("CleansedPhoneNumberNational").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CleansedPhoneNumberNational"));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the optional field `CountryCodeIso2`
      if (jsonObj.get("CountryCodeIso2") != null && !jsonObj.get("CountryCodeIso2").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CountryCodeIso2"));
      }
      // validate the optional field `CountryCodeNumeric`
      if (jsonObj.get("CountryCodeNumeric") != null && !jsonObj.get("CountryCodeNumeric").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CountryCodeNumeric"));
      }
      // validate the optional field `County`
      if (jsonObj.get("County") != null && !jsonObj.get("County").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("County"));
      }
      // validate the optional field `OriginalCountryCodeIso2`
      if (jsonObj.get("OriginalCountryCodeIso2") != null && !jsonObj.get("OriginalCountryCodeIso2").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginalCountryCodeIso2"));
      }
      // validate the optional field `OriginalPhoneNumber`
      if (jsonObj.get("OriginalPhoneNumber") != null && !jsonObj.get("OriginalPhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OriginalPhoneNumber"));
      }
      // validate the optional field `PhoneType`
      if (jsonObj.get("PhoneType") != null && !jsonObj.get("PhoneType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneType"));
      }
      // validate the optional field `PhoneTypeCode`
      if (jsonObj.get("PhoneTypeCode") != null && !jsonObj.get("PhoneTypeCode").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PhoneTypeCode"));
      }
      // validate the optional field `Timezone`
      if (jsonObj.get("Timezone") != null && !jsonObj.get("Timezone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Timezone"));
      }
      // validate the optional field `ZipCode`
      if (jsonObj.get("ZipCode") != null && !jsonObj.get("ZipCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZipCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NumberValidateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NumberValidateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NumberValidateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NumberValidateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<NumberValidateResponse>() {
           @Override
           public void write(JsonWriter out, NumberValidateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NumberValidateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NumberValidateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NumberValidateResponse
   * @throws IOException if the JSON string is invalid with respect to NumberValidateResponse
   */
  public static NumberValidateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NumberValidateResponse.class);
  }

  /**
   * Convert an instance of NumberValidateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

