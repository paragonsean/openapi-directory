/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MultiConditionalSplitActivityEvaluationWaitTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Specifies the settings for a multivariate split activity in a journey. This type of activity sends participants down one of as many as five paths (including a default &lt;i&gt;Else&lt;/i&gt; path) in a journey, based on conditions that you specify.&lt;/p&gt; &lt;note&gt;&lt;p&gt;To create multivariate split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html\&quot;&gt;Integrating Amazon Pinpoint with your application&lt;/a&gt; in the &lt;i&gt;Amazon Pinpoint Developer Guide&lt;/i&gt;.&lt;/p&gt;&lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MultiConditionalSplitActivity {
  public static final String SERIALIZED_NAME_BRANCHES = "Branches";
  @SerializedName(SERIALIZED_NAME_BRANCHES)
  private List branches;

  public static final String SERIALIZED_NAME_DEFAULT_ACTIVITY = "DefaultActivity";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACTIVITY)
  private String defaultActivity;

  public static final String SERIALIZED_NAME_EVALUATION_WAIT_TIME = "EvaluationWaitTime";
  @SerializedName(SERIALIZED_NAME_EVALUATION_WAIT_TIME)
  private MultiConditionalSplitActivityEvaluationWaitTime evaluationWaitTime;

  public MultiConditionalSplitActivity() {
  }

  public MultiConditionalSplitActivity branches(List branches) {
    this.branches = branches;
    return this;
  }

  /**
   * Get branches
   * @return branches
   */
  @javax.annotation.Nullable
  public List getBranches() {
    return branches;
  }

  public void setBranches(List branches) {
    this.branches = branches;
  }


  public MultiConditionalSplitActivity defaultActivity(String defaultActivity) {
    this.defaultActivity = defaultActivity;
    return this;
  }

  /**
   * Get defaultActivity
   * @return defaultActivity
   */
  @javax.annotation.Nullable
  public String getDefaultActivity() {
    return defaultActivity;
  }

  public void setDefaultActivity(String defaultActivity) {
    this.defaultActivity = defaultActivity;
  }


  public MultiConditionalSplitActivity evaluationWaitTime(MultiConditionalSplitActivityEvaluationWaitTime evaluationWaitTime) {
    this.evaluationWaitTime = evaluationWaitTime;
    return this;
  }

  /**
   * Get evaluationWaitTime
   * @return evaluationWaitTime
   */
  @javax.annotation.Nullable
  public MultiConditionalSplitActivityEvaluationWaitTime getEvaluationWaitTime() {
    return evaluationWaitTime;
  }

  public void setEvaluationWaitTime(MultiConditionalSplitActivityEvaluationWaitTime evaluationWaitTime) {
    this.evaluationWaitTime = evaluationWaitTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiConditionalSplitActivity multiConditionalSplitActivity = (MultiConditionalSplitActivity) o;
    return Objects.equals(this.branches, multiConditionalSplitActivity.branches) &&
        Objects.equals(this.defaultActivity, multiConditionalSplitActivity.defaultActivity) &&
        Objects.equals(this.evaluationWaitTime, multiConditionalSplitActivity.evaluationWaitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branches, defaultActivity, evaluationWaitTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiConditionalSplitActivity {\n");
    sb.append("    branches: ").append(toIndentedString(branches)).append("\n");
    sb.append("    defaultActivity: ").append(toIndentedString(defaultActivity)).append("\n");
    sb.append("    evaluationWaitTime: ").append(toIndentedString(evaluationWaitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Branches");
    openapiFields.add("DefaultActivity");
    openapiFields.add("EvaluationWaitTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MultiConditionalSplitActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiConditionalSplitActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiConditionalSplitActivity is not found in the empty JSON string", MultiConditionalSplitActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiConditionalSplitActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiConditionalSplitActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Branches`
      if (jsonObj.get("Branches") != null && !jsonObj.get("Branches").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Branches"));
      }
      // validate the optional field `DefaultActivity`
      if (jsonObj.get("DefaultActivity") != null && !jsonObj.get("DefaultActivity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultActivity"));
      }
      // validate the optional field `EvaluationWaitTime`
      if (jsonObj.get("EvaluationWaitTime") != null && !jsonObj.get("EvaluationWaitTime").isJsonNull()) {
        MultiConditionalSplitActivityEvaluationWaitTime.validateJsonElement(jsonObj.get("EvaluationWaitTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiConditionalSplitActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiConditionalSplitActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiConditionalSplitActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiConditionalSplitActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiConditionalSplitActivity>() {
           @Override
           public void write(JsonWriter out, MultiConditionalSplitActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiConditionalSplitActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MultiConditionalSplitActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MultiConditionalSplitActivity
   * @throws IOException if the JSON string is invalid with respect to MultiConditionalSplitActivity
   */
  public static MultiConditionalSplitActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiConditionalSplitActivity.class);
  }

  /**
   * Convert an instance of MultiConditionalSplitActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

