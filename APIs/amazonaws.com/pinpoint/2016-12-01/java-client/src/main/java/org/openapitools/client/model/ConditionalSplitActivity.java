/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConditionalSplitActivityCondition;
import org.openapitools.client.model.ConditionalSplitActivityEvaluationWaitTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Specifies the settings for a yes/no split activity in a journey. This type of activity sends participants down one of two paths in a journey, based on conditions that you specify.&lt;/p&gt; &lt;note&gt;&lt;p&gt;To create yes/no split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html\&quot;&gt;Integrating Amazon Pinpoint with your application&lt;/a&gt; in the &lt;i&gt;Amazon Pinpoint Developer Guide&lt;/i&gt;.&lt;/p&gt;&lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConditionalSplitActivity {
  public static final String SERIALIZED_NAME_CONDITION = "Condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private ConditionalSplitActivityCondition condition;

  public static final String SERIALIZED_NAME_EVALUATION_WAIT_TIME = "EvaluationWaitTime";
  @SerializedName(SERIALIZED_NAME_EVALUATION_WAIT_TIME)
  private ConditionalSplitActivityEvaluationWaitTime evaluationWaitTime;

  public static final String SERIALIZED_NAME_FALSE_ACTIVITY = "FalseActivity";
  @SerializedName(SERIALIZED_NAME_FALSE_ACTIVITY)
  private String falseActivity;

  public static final String SERIALIZED_NAME_TRUE_ACTIVITY = "TrueActivity";
  @SerializedName(SERIALIZED_NAME_TRUE_ACTIVITY)
  private String trueActivity;

  public ConditionalSplitActivity() {
  }

  public ConditionalSplitActivity condition(ConditionalSplitActivityCondition condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public ConditionalSplitActivityCondition getCondition() {
    return condition;
  }

  public void setCondition(ConditionalSplitActivityCondition condition) {
    this.condition = condition;
  }


  public ConditionalSplitActivity evaluationWaitTime(ConditionalSplitActivityEvaluationWaitTime evaluationWaitTime) {
    this.evaluationWaitTime = evaluationWaitTime;
    return this;
  }

  /**
   * Get evaluationWaitTime
   * @return evaluationWaitTime
   */
  @javax.annotation.Nullable
  public ConditionalSplitActivityEvaluationWaitTime getEvaluationWaitTime() {
    return evaluationWaitTime;
  }

  public void setEvaluationWaitTime(ConditionalSplitActivityEvaluationWaitTime evaluationWaitTime) {
    this.evaluationWaitTime = evaluationWaitTime;
  }


  public ConditionalSplitActivity falseActivity(String falseActivity) {
    this.falseActivity = falseActivity;
    return this;
  }

  /**
   * Get falseActivity
   * @return falseActivity
   */
  @javax.annotation.Nullable
  public String getFalseActivity() {
    return falseActivity;
  }

  public void setFalseActivity(String falseActivity) {
    this.falseActivity = falseActivity;
  }


  public ConditionalSplitActivity trueActivity(String trueActivity) {
    this.trueActivity = trueActivity;
    return this;
  }

  /**
   * Get trueActivity
   * @return trueActivity
   */
  @javax.annotation.Nullable
  public String getTrueActivity() {
    return trueActivity;
  }

  public void setTrueActivity(String trueActivity) {
    this.trueActivity = trueActivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionalSplitActivity conditionalSplitActivity = (ConditionalSplitActivity) o;
    return Objects.equals(this.condition, conditionalSplitActivity.condition) &&
        Objects.equals(this.evaluationWaitTime, conditionalSplitActivity.evaluationWaitTime) &&
        Objects.equals(this.falseActivity, conditionalSplitActivity.falseActivity) &&
        Objects.equals(this.trueActivity, conditionalSplitActivity.trueActivity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(condition, evaluationWaitTime, falseActivity, trueActivity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionalSplitActivity {\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    evaluationWaitTime: ").append(toIndentedString(evaluationWaitTime)).append("\n");
    sb.append("    falseActivity: ").append(toIndentedString(falseActivity)).append("\n");
    sb.append("    trueActivity: ").append(toIndentedString(trueActivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Condition");
    openapiFields.add("EvaluationWaitTime");
    openapiFields.add("FalseActivity");
    openapiFields.add("TrueActivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConditionalSplitActivity
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConditionalSplitActivity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConditionalSplitActivity is not found in the empty JSON string", ConditionalSplitActivity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConditionalSplitActivity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConditionalSplitActivity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Condition`
      if (jsonObj.get("Condition") != null && !jsonObj.get("Condition").isJsonNull()) {
        ConditionalSplitActivityCondition.validateJsonElement(jsonObj.get("Condition"));
      }
      // validate the optional field `EvaluationWaitTime`
      if (jsonObj.get("EvaluationWaitTime") != null && !jsonObj.get("EvaluationWaitTime").isJsonNull()) {
        ConditionalSplitActivityEvaluationWaitTime.validateJsonElement(jsonObj.get("EvaluationWaitTime"));
      }
      // validate the optional field `FalseActivity`
      if (jsonObj.get("FalseActivity") != null && !jsonObj.get("FalseActivity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FalseActivity"));
      }
      // validate the optional field `TrueActivity`
      if (jsonObj.get("TrueActivity") != null && !jsonObj.get("TrueActivity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TrueActivity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConditionalSplitActivity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConditionalSplitActivity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConditionalSplitActivity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConditionalSplitActivity.class));

       return (TypeAdapter<T>) new TypeAdapter<ConditionalSplitActivity>() {
           @Override
           public void write(JsonWriter out, ConditionalSplitActivity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConditionalSplitActivity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConditionalSplitActivity given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConditionalSplitActivity
   * @throws IOException if the JSON string is invalid with respect to ConditionalSplitActivity
   */
  public static ConditionalSplitActivity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConditionalSplitActivity.class);
  }

  /**
   * Convert an instance of ConditionalSplitActivity to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

