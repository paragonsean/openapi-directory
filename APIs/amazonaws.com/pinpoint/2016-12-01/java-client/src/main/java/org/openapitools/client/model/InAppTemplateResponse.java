/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Layout;
import org.openapitools.client.model.TemplateType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In-App Template Response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InAppTemplateResponse {
  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private List content;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_CUSTOM_CONFIG = "CustomConfig";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONFIG)
  private Map customConfig;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_LAYOUT = "Layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private Layout layout;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TEMPLATE_DESCRIPTION = "TemplateDescription";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_DESCRIPTION)
  private String templateDescription;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "TemplateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_TEMPLATE_TYPE = "TemplateType";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_TYPE)
  private TemplateType templateType;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public InAppTemplateResponse() {
  }

  public InAppTemplateResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public InAppTemplateResponse content(List content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public List getContent() {
    return content;
  }

  public void setContent(List content) {
    this.content = content;
  }


  public InAppTemplateResponse creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public InAppTemplateResponse customConfig(Map customConfig) {
    this.customConfig = customConfig;
    return this;
  }

  /**
   * Get customConfig
   * @return customConfig
   */
  @javax.annotation.Nullable
  public Map getCustomConfig() {
    return customConfig;
  }

  public void setCustomConfig(Map customConfig) {
    this.customConfig = customConfig;
  }


  public InAppTemplateResponse lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nonnull
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public InAppTemplateResponse layout(Layout layout) {
    this.layout = layout;
    return this;
  }

  /**
   * Get layout
   * @return layout
   */
  @javax.annotation.Nullable
  public Layout getLayout() {
    return layout;
  }

  public void setLayout(Layout layout) {
    this.layout = layout;
  }


  public InAppTemplateResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public InAppTemplateResponse templateDescription(String templateDescription) {
    this.templateDescription = templateDescription;
    return this;
  }

  /**
   * Get templateDescription
   * @return templateDescription
   */
  @javax.annotation.Nullable
  public String getTemplateDescription() {
    return templateDescription;
  }

  public void setTemplateDescription(String templateDescription) {
    this.templateDescription = templateDescription;
  }


  public InAppTemplateResponse templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

  /**
   * Get templateName
   * @return templateName
   */
  @javax.annotation.Nonnull
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public InAppTemplateResponse templateType(TemplateType templateType) {
    this.templateType = templateType;
    return this;
  }

  /**
   * Get templateType
   * @return templateType
   */
  @javax.annotation.Nonnull
  public TemplateType getTemplateType() {
    return templateType;
  }

  public void setTemplateType(TemplateType templateType) {
    this.templateType = templateType;
  }


  public InAppTemplateResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InAppTemplateResponse inAppTemplateResponse = (InAppTemplateResponse) o;
    return Objects.equals(this.arn, inAppTemplateResponse.arn) &&
        Objects.equals(this.content, inAppTemplateResponse.content) &&
        Objects.equals(this.creationDate, inAppTemplateResponse.creationDate) &&
        Objects.equals(this.customConfig, inAppTemplateResponse.customConfig) &&
        Objects.equals(this.lastModifiedDate, inAppTemplateResponse.lastModifiedDate) &&
        Objects.equals(this.layout, inAppTemplateResponse.layout) &&
        Objects.equals(this.tags, inAppTemplateResponse.tags) &&
        Objects.equals(this.templateDescription, inAppTemplateResponse.templateDescription) &&
        Objects.equals(this.templateName, inAppTemplateResponse.templateName) &&
        Objects.equals(this.templateType, inAppTemplateResponse.templateType) &&
        Objects.equals(this.version, inAppTemplateResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, content, creationDate, customConfig, lastModifiedDate, layout, tags, templateDescription, templateName, templateType, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InAppTemplateResponse {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    customConfig: ").append(toIndentedString(customConfig)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    templateDescription: ").append(toIndentedString(templateDescription)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    templateType: ").append(toIndentedString(templateType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Arn");
    openapiFields.add("Content");
    openapiFields.add("CreationDate");
    openapiFields.add("CustomConfig");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("Layout");
    openapiFields.add("tags");
    openapiFields.add("TemplateDescription");
    openapiFields.add("TemplateName");
    openapiFields.add("TemplateType");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CreationDate");
    openapiRequiredFields.add("LastModifiedDate");
    openapiRequiredFields.add("TemplateName");
    openapiRequiredFields.add("TemplateType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InAppTemplateResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InAppTemplateResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InAppTemplateResponse is not found in the empty JSON string", InAppTemplateResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InAppTemplateResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InAppTemplateResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InAppTemplateResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Arn`
      if (jsonObj.get("Arn") != null && !jsonObj.get("Arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Arn"));
      }
      // validate the optional field `Content`
      if (jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Content"));
      }
      // validate the required field `CreationDate`
      String.validateJsonElement(jsonObj.get("CreationDate"));
      // validate the optional field `CustomConfig`
      if (jsonObj.get("CustomConfig") != null && !jsonObj.get("CustomConfig").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("CustomConfig"));
      }
      // validate the required field `LastModifiedDate`
      String.validateJsonElement(jsonObj.get("LastModifiedDate"));
      // validate the optional field `Layout`
      if (jsonObj.get("Layout") != null && !jsonObj.get("Layout").isJsonNull()) {
        Layout.validateJsonElement(jsonObj.get("Layout"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `TemplateDescription`
      if (jsonObj.get("TemplateDescription") != null && !jsonObj.get("TemplateDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateDescription"));
      }
      // validate the required field `TemplateName`
      String.validateJsonElement(jsonObj.get("TemplateName"));
      // validate the required field `TemplateType`
      TemplateType.validateJsonElement(jsonObj.get("TemplateType"));
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InAppTemplateResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InAppTemplateResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InAppTemplateResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InAppTemplateResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InAppTemplateResponse>() {
           @Override
           public void write(JsonWriter out, InAppTemplateResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InAppTemplateResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InAppTemplateResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InAppTemplateResponse
   * @throws IOException if the JSON string is invalid with respect to InAppTemplateResponse
   */
  public static InAppTemplateResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InAppTemplateResponse.class);
  }

  /**
   * Convert an instance of InAppTemplateResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

