/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.EventSession;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies information about an event that reports data to Amazon Pinpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Event {
  public static final String SERIALIZED_NAME_APP_PACKAGE_NAME = "AppPackageName";
  @SerializedName(SERIALIZED_NAME_APP_PACKAGE_NAME)
  private String appPackageName;

  public static final String SERIALIZED_NAME_APP_TITLE = "AppTitle";
  @SerializedName(SERIALIZED_NAME_APP_TITLE)
  private String appTitle;

  public static final String SERIALIZED_NAME_APP_VERSION_CODE = "AppVersionCode";
  @SerializedName(SERIALIZED_NAME_APP_VERSION_CODE)
  private String appVersionCode;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Map attributes;

  public static final String SERIALIZED_NAME_CLIENT_SDK_VERSION = "ClientSdkVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_SDK_VERSION)
  private String clientSdkVersion;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Map metrics;

  public static final String SERIALIZED_NAME_SDK_NAME = "SdkName";
  @SerializedName(SERIALIZED_NAME_SDK_NAME)
  private String sdkName;

  public static final String SERIALIZED_NAME_SESSION = "Session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private EventSession session;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public Event() {
  }

  public Event appPackageName(String appPackageName) {
    this.appPackageName = appPackageName;
    return this;
  }

  /**
   * Get appPackageName
   * @return appPackageName
   */
  @javax.annotation.Nullable
  public String getAppPackageName() {
    return appPackageName;
  }

  public void setAppPackageName(String appPackageName) {
    this.appPackageName = appPackageName;
  }


  public Event appTitle(String appTitle) {
    this.appTitle = appTitle;
    return this;
  }

  /**
   * Get appTitle
   * @return appTitle
   */
  @javax.annotation.Nullable
  public String getAppTitle() {
    return appTitle;
  }

  public void setAppTitle(String appTitle) {
    this.appTitle = appTitle;
  }


  public Event appVersionCode(String appVersionCode) {
    this.appVersionCode = appVersionCode;
    return this;
  }

  /**
   * Get appVersionCode
   * @return appVersionCode
   */
  @javax.annotation.Nullable
  public String getAppVersionCode() {
    return appVersionCode;
  }

  public void setAppVersionCode(String appVersionCode) {
    this.appVersionCode = appVersionCode;
  }


  public Event attributes(Map attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Map getAttributes() {
    return attributes;
  }

  public void setAttributes(Map attributes) {
    this.attributes = attributes;
  }


  public Event clientSdkVersion(String clientSdkVersion) {
    this.clientSdkVersion = clientSdkVersion;
    return this;
  }

  /**
   * Get clientSdkVersion
   * @return clientSdkVersion
   */
  @javax.annotation.Nullable
  public String getClientSdkVersion() {
    return clientSdkVersion;
  }

  public void setClientSdkVersion(String clientSdkVersion) {
    this.clientSdkVersion = clientSdkVersion;
  }


  public Event eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public Event metrics(Map metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public Map getMetrics() {
    return metrics;
  }

  public void setMetrics(Map metrics) {
    this.metrics = metrics;
  }


  public Event sdkName(String sdkName) {
    this.sdkName = sdkName;
    return this;
  }

  /**
   * Get sdkName
   * @return sdkName
   */
  @javax.annotation.Nullable
  public String getSdkName() {
    return sdkName;
  }

  public void setSdkName(String sdkName) {
    this.sdkName = sdkName;
  }


  public Event session(EventSession session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public EventSession getSession() {
    return session;
  }

  public void setSession(EventSession session) {
    this.session = session;
  }


  public Event timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.appPackageName, event.appPackageName) &&
        Objects.equals(this.appTitle, event.appTitle) &&
        Objects.equals(this.appVersionCode, event.appVersionCode) &&
        Objects.equals(this.attributes, event.attributes) &&
        Objects.equals(this.clientSdkVersion, event.clientSdkVersion) &&
        Objects.equals(this.eventType, event.eventType) &&
        Objects.equals(this.metrics, event.metrics) &&
        Objects.equals(this.sdkName, event.sdkName) &&
        Objects.equals(this.session, event.session) &&
        Objects.equals(this.timestamp, event.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPackageName, appTitle, appVersionCode, attributes, clientSdkVersion, eventType, metrics, sdkName, session, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    appPackageName: ").append(toIndentedString(appPackageName)).append("\n");
    sb.append("    appTitle: ").append(toIndentedString(appTitle)).append("\n");
    sb.append("    appVersionCode: ").append(toIndentedString(appVersionCode)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    clientSdkVersion: ").append(toIndentedString(clientSdkVersion)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    sdkName: ").append(toIndentedString(sdkName)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppPackageName");
    openapiFields.add("AppTitle");
    openapiFields.add("AppVersionCode");
    openapiFields.add("Attributes");
    openapiFields.add("ClientSdkVersion");
    openapiFields.add("EventType");
    openapiFields.add("Metrics");
    openapiFields.add("SdkName");
    openapiFields.add("Session");
    openapiFields.add("Timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EventType");
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Event
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Event.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Event` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AppPackageName`
      if (jsonObj.get("AppPackageName") != null && !jsonObj.get("AppPackageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppPackageName"));
      }
      // validate the optional field `AppTitle`
      if (jsonObj.get("AppTitle") != null && !jsonObj.get("AppTitle").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppTitle"));
      }
      // validate the optional field `AppVersionCode`
      if (jsonObj.get("AppVersionCode") != null && !jsonObj.get("AppVersionCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppVersionCode"));
      }
      // validate the optional field `Attributes`
      if (jsonObj.get("Attributes") != null && !jsonObj.get("Attributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Attributes"));
      }
      // validate the optional field `ClientSdkVersion`
      if (jsonObj.get("ClientSdkVersion") != null && !jsonObj.get("ClientSdkVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ClientSdkVersion"));
      }
      // validate the required field `EventType`
      String.validateJsonElement(jsonObj.get("EventType"));
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Metrics"));
      }
      // validate the optional field `SdkName`
      if (jsonObj.get("SdkName") != null && !jsonObj.get("SdkName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SdkName"));
      }
      // validate the optional field `Session`
      if (jsonObj.get("Session") != null && !jsonObj.get("Session").isJsonNull()) {
        EventSession.validateJsonElement(jsonObj.get("Session"));
      }
      // validate the required field `Timestamp`
      String.validateJsonElement(jsonObj.get("Timestamp"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Event given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Event
   * @throws IOException if the JSON string is invalid with respect to Event
   */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

  /**
   * Convert an instance of Event to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

