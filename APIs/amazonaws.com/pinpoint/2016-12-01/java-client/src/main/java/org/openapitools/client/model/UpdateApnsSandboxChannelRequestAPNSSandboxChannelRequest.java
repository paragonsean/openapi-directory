/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the status and settings of the APNs (Apple Push Notification service) sandbox channel for an application.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest {
  public static final String SERIALIZED_NAME_BUNDLE_ID = "BundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_CERTIFICATE = "Certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private String certificate;

  public static final String SERIALIZED_NAME_DEFAULT_AUTHENTICATION_METHOD = "DefaultAuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AUTHENTICATION_METHOD)
  private String defaultAuthenticationMethod;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_PRIVATE_KEY = "PrivateKey";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY)
  private String privateKey;

  public static final String SERIALIZED_NAME_TEAM_ID = "TeamId";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public static final String SERIALIZED_NAME_TOKEN_KEY = "TokenKey";
  @SerializedName(SERIALIZED_NAME_TOKEN_KEY)
  private String tokenKey;

  public static final String SERIALIZED_NAME_TOKEN_KEY_ID = "TokenKeyId";
  @SerializedName(SERIALIZED_NAME_TOKEN_KEY_ID)
  private String tokenKeyId;

  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest() {
  }

  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest certificate(String certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public String getCertificate() {
    return certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest defaultAuthenticationMethod(String defaultAuthenticationMethod) {
    this.defaultAuthenticationMethod = defaultAuthenticationMethod;
    return this;
  }

  /**
   * Get defaultAuthenticationMethod
   * @return defaultAuthenticationMethod
   */
  @javax.annotation.Nullable
  public String getDefaultAuthenticationMethod() {
    return defaultAuthenticationMethod;
  }

  public void setDefaultAuthenticationMethod(String defaultAuthenticationMethod) {
    this.defaultAuthenticationMethod = defaultAuthenticationMethod;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest privateKey(String privateKey) {
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nullable
  public String getPrivateKey() {
    return privateKey;
  }

  public void setPrivateKey(String privateKey) {
    this.privateKey = privateKey;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest tokenKey(String tokenKey) {
    this.tokenKey = tokenKey;
    return this;
  }

  /**
   * Get tokenKey
   * @return tokenKey
   */
  @javax.annotation.Nullable
  public String getTokenKey() {
    return tokenKey;
  }

  public void setTokenKey(String tokenKey) {
    this.tokenKey = tokenKey;
  }


  public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest tokenKeyId(String tokenKeyId) {
    this.tokenKeyId = tokenKeyId;
    return this;
  }

  /**
   * Get tokenKeyId
   * @return tokenKeyId
   */
  @javax.annotation.Nullable
  public String getTokenKeyId() {
    return tokenKeyId;
  }

  public void setTokenKeyId(String tokenKeyId) {
    this.tokenKeyId = tokenKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest updateApnsSandboxChannelRequestAPNSSandboxChannelRequest = (UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest) o;
    return Objects.equals(this.bundleId, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.bundleId) &&
        Objects.equals(this.certificate, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.certificate) &&
        Objects.equals(this.defaultAuthenticationMethod, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.defaultAuthenticationMethod) &&
        Objects.equals(this.enabled, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.enabled) &&
        Objects.equals(this.privateKey, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.privateKey) &&
        Objects.equals(this.teamId, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.teamId) &&
        Objects.equals(this.tokenKey, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.tokenKey) &&
        Objects.equals(this.tokenKeyId, updateApnsSandboxChannelRequestAPNSSandboxChannelRequest.tokenKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundleId, certificate, defaultAuthenticationMethod, enabled, privateKey, teamId, tokenKey, tokenKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest {\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    defaultAuthenticationMethod: ").append(toIndentedString(defaultAuthenticationMethod)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    tokenKey: ").append(toIndentedString(tokenKey)).append("\n");
    sb.append("    tokenKeyId: ").append(toIndentedString(tokenKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BundleId");
    openapiFields.add("Certificate");
    openapiFields.add("DefaultAuthenticationMethod");
    openapiFields.add("Enabled");
    openapiFields.add("PrivateKey");
    openapiFields.add("TeamId");
    openapiFields.add("TokenKey");
    openapiFields.add("TokenKeyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest is not found in the empty JSON string", UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BundleId`
      if (jsonObj.get("BundleId") != null && !jsonObj.get("BundleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BundleId"));
      }
      // validate the optional field `Certificate`
      if (jsonObj.get("Certificate") != null && !jsonObj.get("Certificate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Certificate"));
      }
      // validate the optional field `DefaultAuthenticationMethod`
      if (jsonObj.get("DefaultAuthenticationMethod") != null && !jsonObj.get("DefaultAuthenticationMethod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultAuthenticationMethod"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `PrivateKey`
      if (jsonObj.get("PrivateKey") != null && !jsonObj.get("PrivateKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PrivateKey"));
      }
      // validate the optional field `TeamId`
      if (jsonObj.get("TeamId") != null && !jsonObj.get("TeamId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TeamId"));
      }
      // validate the optional field `TokenKey`
      if (jsonObj.get("TokenKey") != null && !jsonObj.get("TokenKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TokenKey"));
      }
      // validate the optional field `TokenKeyId`
      if (jsonObj.get("TokenKeyId") != null && !jsonObj.get("TokenKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TokenKeyId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest>() {
           @Override
           public void write(JsonWriter out, UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest
   */
  public static UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest.class);
  }

  /**
   * Convert an instance of UpdateApnsSandboxChannelRequestAPNSSandboxChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

