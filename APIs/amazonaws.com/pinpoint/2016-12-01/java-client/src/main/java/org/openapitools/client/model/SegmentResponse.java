/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.SegmentResponseDimensions;
import org.openapitools.client.model.SegmentResponseImportDefinition;
import org.openapitools.client.model.SegmentResponseSegmentGroups;
import org.openapitools.client.model.SegmentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the configuration, dimension, and other settings for a segment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SegmentResponse {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "ApplicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private String applicationId;

  public static final String SERIALIZED_NAME_ARN = "Arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private SegmentResponseDimensions dimensions;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMPORT_DEFINITION = "ImportDefinition";
  @SerializedName(SERIALIZED_NAME_IMPORT_DEFINITION)
  private SegmentResponseImportDefinition importDefinition;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SEGMENT_GROUPS = "SegmentGroups";
  @SerializedName(SERIALIZED_NAME_SEGMENT_GROUPS)
  private SegmentResponseSegmentGroups segmentGroups;

  public static final String SERIALIZED_NAME_SEGMENT_TYPE = "SegmentType";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TYPE)
  private SegmentType segmentType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public SegmentResponse() {
  }

  public SegmentResponse applicationId(String applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * Get applicationId
   * @return applicationId
   */
  @javax.annotation.Nonnull
  public String getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(String applicationId) {
    this.applicationId = applicationId;
  }


  public SegmentResponse arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public SegmentResponse creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nonnull
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public SegmentResponse dimensions(SegmentResponseDimensions dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public SegmentResponseDimensions getDimensions() {
    return dimensions;
  }

  public void setDimensions(SegmentResponseDimensions dimensions) {
    this.dimensions = dimensions;
  }


  public SegmentResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SegmentResponse importDefinition(SegmentResponseImportDefinition importDefinition) {
    this.importDefinition = importDefinition;
    return this;
  }

  /**
   * Get importDefinition
   * @return importDefinition
   */
  @javax.annotation.Nullable
  public SegmentResponseImportDefinition getImportDefinition() {
    return importDefinition;
  }

  public void setImportDefinition(SegmentResponseImportDefinition importDefinition) {
    this.importDefinition = importDefinition;
  }


  public SegmentResponse lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public SegmentResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SegmentResponse segmentGroups(SegmentResponseSegmentGroups segmentGroups) {
    this.segmentGroups = segmentGroups;
    return this;
  }

  /**
   * Get segmentGroups
   * @return segmentGroups
   */
  @javax.annotation.Nullable
  public SegmentResponseSegmentGroups getSegmentGroups() {
    return segmentGroups;
  }

  public void setSegmentGroups(SegmentResponseSegmentGroups segmentGroups) {
    this.segmentGroups = segmentGroups;
  }


  public SegmentResponse segmentType(SegmentType segmentType) {
    this.segmentType = segmentType;
    return this;
  }

  /**
   * Get segmentType
   * @return segmentType
   */
  @javax.annotation.Nonnull
  public SegmentType getSegmentType() {
    return segmentType;
  }

  public void setSegmentType(SegmentType segmentType) {
    this.segmentType = segmentType;
  }


  public SegmentResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public SegmentResponse version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SegmentResponse segmentResponse = (SegmentResponse) o;
    return Objects.equals(this.applicationId, segmentResponse.applicationId) &&
        Objects.equals(this.arn, segmentResponse.arn) &&
        Objects.equals(this.creationDate, segmentResponse.creationDate) &&
        Objects.equals(this.dimensions, segmentResponse.dimensions) &&
        Objects.equals(this.id, segmentResponse.id) &&
        Objects.equals(this.importDefinition, segmentResponse.importDefinition) &&
        Objects.equals(this.lastModifiedDate, segmentResponse.lastModifiedDate) &&
        Objects.equals(this.name, segmentResponse.name) &&
        Objects.equals(this.segmentGroups, segmentResponse.segmentGroups) &&
        Objects.equals(this.segmentType, segmentResponse.segmentType) &&
        Objects.equals(this.tags, segmentResponse.tags) &&
        Objects.equals(this.version, segmentResponse.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, arn, creationDate, dimensions, id, importDefinition, lastModifiedDate, name, segmentGroups, segmentType, tags, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SegmentResponse {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    importDefinition: ").append(toIndentedString(importDefinition)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    segmentGroups: ").append(toIndentedString(segmentGroups)).append("\n");
    sb.append("    segmentType: ").append(toIndentedString(segmentType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationId");
    openapiFields.add("Arn");
    openapiFields.add("CreationDate");
    openapiFields.add("Dimensions");
    openapiFields.add("Id");
    openapiFields.add("ImportDefinition");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("Name");
    openapiFields.add("SegmentGroups");
    openapiFields.add("SegmentType");
    openapiFields.add("tags");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApplicationId");
    openapiRequiredFields.add("Arn");
    openapiRequiredFields.add("CreationDate");
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("SegmentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SegmentResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SegmentResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SegmentResponse is not found in the empty JSON string", SegmentResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SegmentResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SegmentResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SegmentResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ApplicationId`
      String.validateJsonElement(jsonObj.get("ApplicationId"));
      // validate the required field `Arn`
      String.validateJsonElement(jsonObj.get("Arn"));
      // validate the required field `CreationDate`
      String.validateJsonElement(jsonObj.get("CreationDate"));
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        SegmentResponseDimensions.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `ImportDefinition`
      if (jsonObj.get("ImportDefinition") != null && !jsonObj.get("ImportDefinition").isJsonNull()) {
        SegmentResponseImportDefinition.validateJsonElement(jsonObj.get("ImportDefinition"));
      }
      // validate the optional field `LastModifiedDate`
      if (jsonObj.get("LastModifiedDate") != null && !jsonObj.get("LastModifiedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastModifiedDate"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `SegmentGroups`
      if (jsonObj.get("SegmentGroups") != null && !jsonObj.get("SegmentGroups").isJsonNull()) {
        SegmentResponseSegmentGroups.validateJsonElement(jsonObj.get("SegmentGroups"));
      }
      // validate the required field `SegmentType`
      SegmentType.validateJsonElement(jsonObj.get("SegmentType"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SegmentResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SegmentResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SegmentResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SegmentResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SegmentResponse>() {
           @Override
           public void write(JsonWriter out, SegmentResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SegmentResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SegmentResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SegmentResponse
   * @throws IOException if the JSON string is invalid with respect to SegmentResponse
   */
  public static SegmentResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SegmentResponse.class);
  }

  /**
   * Convert an instance of SegmentResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

