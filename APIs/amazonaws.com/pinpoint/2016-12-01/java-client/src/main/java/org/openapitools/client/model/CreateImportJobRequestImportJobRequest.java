/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Format;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the settings for a job that imports endpoint definitions from an Amazon Simple Storage Service (Amazon S3) bucket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:25.655112-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateImportJobRequestImportJobRequest {
  public static final String SERIALIZED_NAME_DEFINE_SEGMENT = "DefineSegment";
  @SerializedName(SERIALIZED_NAME_DEFINE_SEGMENT)
  private Boolean defineSegment;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "ExternalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Format format;

  public static final String SERIALIZED_NAME_REGISTER_ENDPOINTS = "RegisterEndpoints";
  @SerializedName(SERIALIZED_NAME_REGISTER_ENDPOINTS)
  private Boolean registerEndpoints;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_S3_URL = "S3Url";
  @SerializedName(SERIALIZED_NAME_S3_URL)
  private String s3Url;

  public static final String SERIALIZED_NAME_SEGMENT_ID = "SegmentId";
  @SerializedName(SERIALIZED_NAME_SEGMENT_ID)
  private String segmentId;

  public static final String SERIALIZED_NAME_SEGMENT_NAME = "SegmentName";
  @SerializedName(SERIALIZED_NAME_SEGMENT_NAME)
  private String segmentName;

  public CreateImportJobRequestImportJobRequest() {
  }

  public CreateImportJobRequestImportJobRequest defineSegment(Boolean defineSegment) {
    this.defineSegment = defineSegment;
    return this;
  }

  /**
   * Get defineSegment
   * @return defineSegment
   */
  @javax.annotation.Nullable
  public Boolean getDefineSegment() {
    return defineSegment;
  }

  public void setDefineSegment(Boolean defineSegment) {
    this.defineSegment = defineSegment;
  }


  public CreateImportJobRequestImportJobRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public CreateImportJobRequestImportJobRequest format(Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public Format getFormat() {
    return format;
  }

  public void setFormat(Format format) {
    this.format = format;
  }


  public CreateImportJobRequestImportJobRequest registerEndpoints(Boolean registerEndpoints) {
    this.registerEndpoints = registerEndpoints;
    return this;
  }

  /**
   * Get registerEndpoints
   * @return registerEndpoints
   */
  @javax.annotation.Nullable
  public Boolean getRegisterEndpoints() {
    return registerEndpoints;
  }

  public void setRegisterEndpoints(Boolean registerEndpoints) {
    this.registerEndpoints = registerEndpoints;
  }


  public CreateImportJobRequestImportJobRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateImportJobRequestImportJobRequest s3Url(String s3Url) {
    this.s3Url = s3Url;
    return this;
  }

  /**
   * Get s3Url
   * @return s3Url
   */
  @javax.annotation.Nullable
  public String getS3Url() {
    return s3Url;
  }

  public void setS3Url(String s3Url) {
    this.s3Url = s3Url;
  }


  public CreateImportJobRequestImportJobRequest segmentId(String segmentId) {
    this.segmentId = segmentId;
    return this;
  }

  /**
   * Get segmentId
   * @return segmentId
   */
  @javax.annotation.Nullable
  public String getSegmentId() {
    return segmentId;
  }

  public void setSegmentId(String segmentId) {
    this.segmentId = segmentId;
  }


  public CreateImportJobRequestImportJobRequest segmentName(String segmentName) {
    this.segmentName = segmentName;
    return this;
  }

  /**
   * Get segmentName
   * @return segmentName
   */
  @javax.annotation.Nullable
  public String getSegmentName() {
    return segmentName;
  }

  public void setSegmentName(String segmentName) {
    this.segmentName = segmentName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateImportJobRequestImportJobRequest createImportJobRequestImportJobRequest = (CreateImportJobRequestImportJobRequest) o;
    return Objects.equals(this.defineSegment, createImportJobRequestImportJobRequest.defineSegment) &&
        Objects.equals(this.externalId, createImportJobRequestImportJobRequest.externalId) &&
        Objects.equals(this.format, createImportJobRequestImportJobRequest.format) &&
        Objects.equals(this.registerEndpoints, createImportJobRequestImportJobRequest.registerEndpoints) &&
        Objects.equals(this.roleArn, createImportJobRequestImportJobRequest.roleArn) &&
        Objects.equals(this.s3Url, createImportJobRequestImportJobRequest.s3Url) &&
        Objects.equals(this.segmentId, createImportJobRequestImportJobRequest.segmentId) &&
        Objects.equals(this.segmentName, createImportJobRequestImportJobRequest.segmentName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defineSegment, externalId, format, registerEndpoints, roleArn, s3Url, segmentId, segmentName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateImportJobRequestImportJobRequest {\n");
    sb.append("    defineSegment: ").append(toIndentedString(defineSegment)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    registerEndpoints: ").append(toIndentedString(registerEndpoints)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    s3Url: ").append(toIndentedString(s3Url)).append("\n");
    sb.append("    segmentId: ").append(toIndentedString(segmentId)).append("\n");
    sb.append("    segmentName: ").append(toIndentedString(segmentName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefineSegment");
    openapiFields.add("ExternalId");
    openapiFields.add("Format");
    openapiFields.add("RegisterEndpoints");
    openapiFields.add("RoleArn");
    openapiFields.add("S3Url");
    openapiFields.add("SegmentId");
    openapiFields.add("SegmentName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateImportJobRequestImportJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateImportJobRequestImportJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateImportJobRequestImportJobRequest is not found in the empty JSON string", CreateImportJobRequestImportJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateImportJobRequestImportJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateImportJobRequestImportJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DefineSegment`
      if (jsonObj.get("DefineSegment") != null && !jsonObj.get("DefineSegment").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DefineSegment"));
      }
      // validate the optional field `ExternalId`
      if (jsonObj.get("ExternalId") != null && !jsonObj.get("ExternalId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExternalId"));
      }
      // validate the optional field `Format`
      if (jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) {
        Format.validateJsonElement(jsonObj.get("Format"));
      }
      // validate the optional field `RegisterEndpoints`
      if (jsonObj.get("RegisterEndpoints") != null && !jsonObj.get("RegisterEndpoints").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RegisterEndpoints"));
      }
      // validate the optional field `RoleArn`
      if (jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleArn"));
      }
      // validate the optional field `S3Url`
      if (jsonObj.get("S3Url") != null && !jsonObj.get("S3Url").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3Url"));
      }
      // validate the optional field `SegmentId`
      if (jsonObj.get("SegmentId") != null && !jsonObj.get("SegmentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SegmentId"));
      }
      // validate the optional field `SegmentName`
      if (jsonObj.get("SegmentName") != null && !jsonObj.get("SegmentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SegmentName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateImportJobRequestImportJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateImportJobRequestImportJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateImportJobRequestImportJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateImportJobRequestImportJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateImportJobRequestImportJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateImportJobRequestImportJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateImportJobRequestImportJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateImportJobRequestImportJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateImportJobRequestImportJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateImportJobRequestImportJobRequest
   */
  public static CreateImportJobRequestImportJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateImportJobRequestImportJobRequest.class);
  }

  /**
   * Convert an instance of CreateImportJobRequestImportJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

