/*
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAppRequest;
import org.openapitools.client.model.CreateAppResponse;
import org.openapitools.client.model.CreateCampaignRequest;
import org.openapitools.client.model.CreateCampaignResponse;
import org.openapitools.client.model.CreateEmailTemplateResponse;
import org.openapitools.client.model.CreateExportJobRequest;
import org.openapitools.client.model.CreateExportJobResponse;
import org.openapitools.client.model.CreateImportJobRequest;
import org.openapitools.client.model.CreateImportJobResponse;
import org.openapitools.client.model.CreateInAppTemplateResponse;
import org.openapitools.client.model.CreateJourneyRequest;
import org.openapitools.client.model.CreateJourneyResponse;
import org.openapitools.client.model.CreatePushTemplateResponse;
import org.openapitools.client.model.CreateRecommenderConfigurationRequest;
import org.openapitools.client.model.CreateRecommenderConfigurationResponse;
import org.openapitools.client.model.CreateSegmentRequest;
import org.openapitools.client.model.CreateSegmentResponse;
import org.openapitools.client.model.CreateSmsTemplateResponse;
import org.openapitools.client.model.CreateVoiceTemplateResponse;
import org.openapitools.client.model.DeleteAdmChannelResponse;
import org.openapitools.client.model.DeleteApnsChannelResponse;
import org.openapitools.client.model.DeleteApnsSandboxChannelResponse;
import org.openapitools.client.model.DeleteApnsVoipChannelResponse;
import org.openapitools.client.model.DeleteApnsVoipSandboxChannelResponse;
import org.openapitools.client.model.DeleteAppResponse;
import org.openapitools.client.model.DeleteBaiduChannelResponse;
import org.openapitools.client.model.DeleteCampaignResponse;
import org.openapitools.client.model.DeleteEmailChannelResponse;
import org.openapitools.client.model.DeleteEmailTemplateResponse;
import org.openapitools.client.model.DeleteEndpointResponse;
import org.openapitools.client.model.DeleteEventStreamResponse;
import org.openapitools.client.model.DeleteGcmChannelResponse;
import org.openapitools.client.model.DeleteInAppTemplateResponse;
import org.openapitools.client.model.DeleteJourneyResponse;
import org.openapitools.client.model.DeletePushTemplateResponse;
import org.openapitools.client.model.DeleteRecommenderConfigurationResponse;
import org.openapitools.client.model.DeleteSegmentResponse;
import org.openapitools.client.model.DeleteSmsChannelResponse;
import org.openapitools.client.model.DeleteSmsTemplateResponse;
import org.openapitools.client.model.DeleteUserEndpointsResponse;
import org.openapitools.client.model.DeleteVoiceChannelResponse;
import org.openapitools.client.model.DeleteVoiceTemplateResponse;
import org.openapitools.client.model.GetAdmChannelResponse;
import org.openapitools.client.model.GetApnsChannelResponse;
import org.openapitools.client.model.GetApnsSandboxChannelResponse;
import org.openapitools.client.model.GetApnsVoipChannelResponse;
import org.openapitools.client.model.GetApnsVoipSandboxChannelResponse;
import org.openapitools.client.model.GetAppResponse;
import org.openapitools.client.model.GetApplicationDateRangeKpiResponse;
import org.openapitools.client.model.GetApplicationSettingsResponse;
import org.openapitools.client.model.GetAppsResponse;
import org.openapitools.client.model.GetBaiduChannelResponse;
import org.openapitools.client.model.GetCampaignActivitiesResponse;
import org.openapitools.client.model.GetCampaignDateRangeKpiResponse;
import org.openapitools.client.model.GetCampaignResponse;
import org.openapitools.client.model.GetCampaignVersionResponse;
import org.openapitools.client.model.GetCampaignVersionsResponse;
import org.openapitools.client.model.GetCampaignsResponse;
import org.openapitools.client.model.GetChannelsResponse;
import org.openapitools.client.model.GetEmailChannelResponse;
import org.openapitools.client.model.GetEmailTemplateResponse;
import org.openapitools.client.model.GetEndpointResponse;
import org.openapitools.client.model.GetEventStreamResponse;
import org.openapitools.client.model.GetExportJobResponse;
import org.openapitools.client.model.GetExportJobsResponse;
import org.openapitools.client.model.GetGcmChannelResponse;
import org.openapitools.client.model.GetImportJobResponse;
import org.openapitools.client.model.GetImportJobsResponse;
import org.openapitools.client.model.GetInAppMessagesResponse;
import org.openapitools.client.model.GetInAppTemplateResponse;
import org.openapitools.client.model.GetJourneyDateRangeKpiResponse;
import org.openapitools.client.model.GetJourneyExecutionActivityMetricsResponse;
import org.openapitools.client.model.GetJourneyExecutionMetricsResponse;
import org.openapitools.client.model.GetJourneyResponse;
import org.openapitools.client.model.GetJourneyRunExecutionActivityMetricsResponse;
import org.openapitools.client.model.GetJourneyRunExecutionMetricsResponse;
import org.openapitools.client.model.GetJourneyRunsResponse;
import org.openapitools.client.model.GetPushTemplateResponse;
import org.openapitools.client.model.GetRecommenderConfigurationResponse;
import org.openapitools.client.model.GetRecommenderConfigurationsResponse;
import org.openapitools.client.model.GetSegmentExportJobsResponse;
import org.openapitools.client.model.GetSegmentImportJobsResponse;
import org.openapitools.client.model.GetSegmentResponse;
import org.openapitools.client.model.GetSegmentVersionResponse;
import org.openapitools.client.model.GetSegmentVersionsResponse;
import org.openapitools.client.model.GetSegmentsResponse;
import org.openapitools.client.model.GetSmsChannelResponse;
import org.openapitools.client.model.GetSmsTemplateResponse;
import org.openapitools.client.model.GetUserEndpointsResponse;
import org.openapitools.client.model.GetVoiceChannelResponse;
import org.openapitools.client.model.GetVoiceTemplateResponse;
import org.openapitools.client.model.ListJourneysResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTemplateVersionsResponse;
import org.openapitools.client.model.ListTemplatesResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PhoneNumberValidateRequest;
import org.openapitools.client.model.PhoneNumberValidateResponse;
import org.openapitools.client.model.PutEventStreamRequest;
import org.openapitools.client.model.PutEventStreamResponse;
import org.openapitools.client.model.PutEventsRequest;
import org.openapitools.client.model.PutEventsResponse;
import org.openapitools.client.model.RemoveAttributesRequest;
import org.openapitools.client.model.RemoveAttributesResponse;
import org.openapitools.client.model.SendMessagesRequest;
import org.openapitools.client.model.SendMessagesResponse;
import org.openapitools.client.model.SendOTPMessageRequest;
import org.openapitools.client.model.SendOTPMessageResponse;
import org.openapitools.client.model.SendUsersMessagesRequest;
import org.openapitools.client.model.SendUsersMessagesResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAdmChannelRequest;
import org.openapitools.client.model.UpdateAdmChannelResponse;
import org.openapitools.client.model.UpdateApnsChannelRequest;
import org.openapitools.client.model.UpdateApnsChannelResponse;
import org.openapitools.client.model.UpdateApnsSandboxChannelRequest;
import org.openapitools.client.model.UpdateApnsSandboxChannelResponse;
import org.openapitools.client.model.UpdateApnsVoipChannelRequest;
import org.openapitools.client.model.UpdateApnsVoipChannelResponse;
import org.openapitools.client.model.UpdateApnsVoipSandboxChannelRequest;
import org.openapitools.client.model.UpdateApnsVoipSandboxChannelResponse;
import org.openapitools.client.model.UpdateApplicationSettingsRequest;
import org.openapitools.client.model.UpdateApplicationSettingsResponse;
import org.openapitools.client.model.UpdateBaiduChannelRequest;
import org.openapitools.client.model.UpdateBaiduChannelResponse;
import org.openapitools.client.model.UpdateCampaignResponse;
import org.openapitools.client.model.UpdateEmailChannelRequest;
import org.openapitools.client.model.UpdateEmailChannelResponse;
import org.openapitools.client.model.UpdateEmailTemplateRequest;
import org.openapitools.client.model.UpdateEmailTemplateResponse;
import org.openapitools.client.model.UpdateEndpointRequest;
import org.openapitools.client.model.UpdateEndpointResponse;
import org.openapitools.client.model.UpdateEndpointsBatchRequest;
import org.openapitools.client.model.UpdateEndpointsBatchResponse;
import org.openapitools.client.model.UpdateGcmChannelRequest;
import org.openapitools.client.model.UpdateGcmChannelResponse;
import org.openapitools.client.model.UpdateInAppTemplateRequest;
import org.openapitools.client.model.UpdateInAppTemplateResponse;
import org.openapitools.client.model.UpdateJourneyResponse;
import org.openapitools.client.model.UpdateJourneyStateRequest;
import org.openapitools.client.model.UpdateJourneyStateResponse;
import org.openapitools.client.model.UpdatePushTemplateRequest;
import org.openapitools.client.model.UpdatePushTemplateResponse;
import org.openapitools.client.model.UpdateRecommenderConfigurationRequest;
import org.openapitools.client.model.UpdateRecommenderConfigurationResponse;
import org.openapitools.client.model.UpdateSegmentResponse;
import org.openapitools.client.model.UpdateSmsChannelRequest;
import org.openapitools.client.model.UpdateSmsChannelResponse;
import org.openapitools.client.model.UpdateSmsTemplateRequest;
import org.openapitools.client.model.UpdateSmsTemplateResponse;
import org.openapitools.client.model.UpdateTemplateActiveVersionRequest;
import org.openapitools.client.model.UpdateTemplateActiveVersionResponse;
import org.openapitools.client.model.UpdateVoiceChannelRequest;
import org.openapitools.client.model.UpdateVoiceChannelResponse;
import org.openapitools.client.model.UpdateVoiceTemplateRequest;
import org.openapitools.client.model.UpdateVoiceTemplateResponse;
import org.openapitools.client.model.VerifyOTPMessageRequest;
import org.openapitools.client.model.VerifyOTPMessageResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     *  &lt;p&gt;Creates an application.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        CreateAppRequest createAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppResponse response = api.createApp(createAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new campaign for an application or updates the settings of an existing campaign for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCampaignTest() throws ApiException {
        String applicationId = null;
        CreateCampaignRequest createCampaignRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCampaignResponse response = api.createCampaign(applicationId, createCampaignRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a message template for messages that are sent through the email channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmailTemplateTest() throws ApiException {
        String templateName = null;
        UpdateEmailTemplateRequest updateEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEmailTemplateResponse response = api.createEmailTemplate(templateName, updateEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an export job for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExportJobTest() throws ApiException {
        String applicationId = null;
        CreateExportJobRequest createExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateExportJobResponse response = api.createExportJob(applicationId, createExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an import job for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImportJobTest() throws ApiException {
        String applicationId = null;
        CreateImportJobRequest createImportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImportJobResponse response = api.createImportJob(applicationId, createImportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new message template for messages using the in-app message channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInAppTemplateTest() throws ApiException {
        String templateName = null;
        UpdateInAppTemplateRequest updateInAppTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInAppTemplateResponse response = api.createInAppTemplate(templateName, updateInAppTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a journey for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJourneyTest() throws ApiException {
        String applicationId = null;
        CreateJourneyRequest createJourneyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateJourneyResponse response = api.createJourney(applicationId, createJourneyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a message template for messages that are sent through a push notification channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPushTemplateTest() throws ApiException {
        String templateName = null;
        UpdatePushTemplateRequest updatePushTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreatePushTemplateResponse response = api.createPushTemplate(templateName, updatePushTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Amazon Pinpoint configuration for a recommender model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRecommenderConfigurationTest() throws ApiException {
        CreateRecommenderConfigurationRequest createRecommenderConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRecommenderConfigurationResponse response = api.createRecommenderConfiguration(createRecommenderConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that&#39;s associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSegmentTest() throws ApiException {
        String applicationId = null;
        CreateSegmentRequest createSegmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSegmentResponse response = api.createSegment(applicationId, createSegmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a message template for messages that are sent through the SMS channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSmsTemplateTest() throws ApiException {
        String templateName = null;
        UpdateSmsTemplateRequest updateSmsTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSmsTemplateResponse response = api.createSmsTemplate(templateName, updateSmsTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a message template for messages that are sent through the voice channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVoiceTemplateTest() throws ApiException {
        String templateName = null;
        UpdateVoiceTemplateRequest updateVoiceTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVoiceTemplateResponse response = api.createVoiceTemplate(templateName, updateVoiceTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the ADM channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAdmChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAdmChannelResponse response = api.deleteAdmChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the APNs channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApnsChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApnsChannelResponse response = api.deleteApnsChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApnsSandboxChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApnsSandboxChannelResponse response = api.deleteApnsSandboxChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApnsVoipChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApnsVoipChannelResponse response = api.deleteApnsVoipChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApnsVoipSandboxChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteApnsVoipSandboxChannelResponse response = api.deleteApnsVoipSandboxChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteAppResponse response = api.deleteApp(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the Baidu channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBaiduChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteBaiduChannelResponse response = api.deleteBaiduChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a campaign from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCampaignTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCampaignResponse response = api.deleteCampaign(applicationId, campaignId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the email channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEmailChannelResponse response = api.deleteEmailChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a message template for messages that were sent through the email channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DeleteEmailTemplateResponse response = api.deleteEmailTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Deletes an endpoint from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEndpointTest() throws ApiException {
        String applicationId = null;
        String endpointId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEndpointResponse response = api.deleteEndpoint(applicationId, endpointId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the event stream for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventStreamTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventStreamResponse response = api.deleteEventStream(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the GCM channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGcmChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteGcmChannelResponse response = api.deleteGcmChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a message template for messages sent using the in-app message channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInAppTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DeleteInAppTemplateResponse response = api.deleteInAppTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Deletes a journey from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJourneyTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteJourneyResponse response = api.deleteJourney(applicationId, journeyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a message template for messages that were sent through a push notification channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePushTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DeletePushTemplateResponse response = api.deletePushTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Deletes an Amazon Pinpoint configuration for a recommender model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecommenderConfigurationTest() throws ApiException {
        String recommenderId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRecommenderConfigurationResponse response = api.deleteRecommenderConfiguration(recommenderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a segment from an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSegmentTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSegmentResponse response = api.deleteSegment(applicationId, segmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the SMS channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSmsChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSmsChannelResponse response = api.deleteSmsChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a message template for messages that were sent through the SMS channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSmsTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DeleteSmsTemplateResponse response = api.deleteSmsTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Deletes all the endpoints that are associated with a specific user ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserEndpointsTest() throws ApiException {
        String applicationId = null;
        String userId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteUserEndpointsResponse response = api.deleteUserEndpoints(applicationId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the voice channel for an application and deletes any existing settings for the channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVoiceChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteVoiceChannelResponse response = api.deleteVoiceChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a message template for messages that were sent through the voice channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVoiceTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DeleteVoiceTemplateResponse response = api.deleteVoiceTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the ADM channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdmChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAdmChannelResponse response = api.getAdmChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the APNs channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApnsChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApnsChannelResponse response = api.getApnsChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the APNs sandbox channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApnsSandboxChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApnsSandboxChannelResponse response = api.getApnsSandboxChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the APNs VoIP channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApnsVoipChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApnsVoipChannelResponse response = api.getApnsVoipChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApnsVoipSandboxChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApnsVoipSandboxChannelResponse response = api.getApnsVoipSandboxChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppResponse response = api.getApp(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationDateRangeKpiTest() throws ApiException {
        String applicationId = null;
        String kpiName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OffsetDateTime endTime = null;
        String nextToken = null;
        String pageSize = null;
        OffsetDateTime startTime = null;
        GetApplicationDateRangeKpiResponse response = api.getApplicationDateRangeKpi(applicationId, kpiName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endTime, nextToken, pageSize, startTime);
        // TODO: test validations
    }

    /**
     * Retrieves information about the settings for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationSettingsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApplicationSettingsResponse response = api.getApplicationSettings(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the applications that are associated with your Amazon Pinpoint account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetAppsResponse response = api.getApps(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the Baidu channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBaiduChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetBaiduChannelResponse response = api.getBaiduChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status, configuration, and other settings for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCampaignResponse response = api.getCampaign(applicationId, campaignId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the activities for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignActivitiesTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetCampaignActivitiesResponse response = api.getCampaignActivities(applicationId, campaignId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignDateRangeKpiTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        String kpiName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OffsetDateTime endTime = null;
        String nextToken = null;
        String pageSize = null;
        OffsetDateTime startTime = null;
        GetCampaignDateRangeKpiResponse response = api.getCampaignDateRangeKpi(applicationId, campaignId, kpiName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endTime, nextToken, pageSize, startTime);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status, configuration, and other settings for a specific version of a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignVersionTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCampaignVersionResponse response = api.getCampaignVersion(applicationId, campaignId, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status, configuration, and other settings for all versions of a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignVersionsTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetCampaignVersionsResponse response = api.getCampaignVersions(applicationId, campaignId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCampaignsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetCampaignsResponse response = api.getCampaigns(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the history and status of each channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetChannelsResponse response = api.getChannels(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the email channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEmailChannelResponse response = api.getEmailChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the content and settings of a message template for messages that are sent through the email channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        GetEmailTemplateResponse response = api.getEmailTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Retrieves information about the settings and attributes of a specific endpoint for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEndpointTest() throws ApiException {
        String applicationId = null;
        String endpointId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEndpointResponse response = api.getEndpoint(applicationId, endpointId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the event stream settings for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventStreamTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventStreamResponse response = api.getEventStream(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of a specific export job for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExportJobTest() throws ApiException {
        String applicationId = null;
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExportJobResponse response = api.getExportJob(applicationId, jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of all the export jobs for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExportJobsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetExportJobsResponse response = api.getExportJobs(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the GCM channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGcmChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetGcmChannelResponse response = api.getGcmChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of a specific import job for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImportJobTest() throws ApiException {
        String applicationId = null;
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetImportJobResponse response = api.getImportJob(applicationId, jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of all the import jobs for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImportJobsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetImportJobsResponse response = api.getImportJobs(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves the in-app messages targeted for the provided endpoint ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInAppMessagesTest() throws ApiException {
        String applicationId = null;
        String endpointId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInAppMessagesResponse response = api.getInAppMessages(applicationId, endpointId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the content and settings of a message template for messages sent through the in-app channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInAppTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        GetInAppTemplateResponse response = api.getInAppTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status, configuration, and other settings for a journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJourneyResponse response = api.getJourney(applicationId, journeyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyDateRangeKpiTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        String kpiName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        OffsetDateTime endTime = null;
        String nextToken = null;
        String pageSize = null;
        OffsetDateTime startTime = null;
        GetJourneyDateRangeKpiResponse response = api.getJourneyDateRangeKpi(applicationId, journeyId, kpiName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, endTime, nextToken, pageSize, startTime);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyExecutionActivityMetricsTest() throws ApiException {
        String applicationId = null;
        String journeyActivityId = null;
        String journeyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String pageSize = null;
        GetJourneyExecutionActivityMetricsResponse response = api.getJourneyExecutionActivityMetrics(applicationId, journeyActivityId, journeyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyExecutionMetricsTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String pageSize = null;
        GetJourneyExecutionMetricsResponse response = api.getJourneyExecutionMetrics(applicationId, journeyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard run execution metric that applies to a journey activity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyRunExecutionActivityMetricsTest() throws ApiException {
        String applicationId = null;
        String journeyActivityId = null;
        String journeyId = null;
        String runId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String pageSize = null;
        GetJourneyRunExecutionActivityMetricsResponse response = api.getJourneyRunExecutionActivityMetrics(applicationId, journeyActivityId, journeyId, runId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieves (queries) pre-aggregated data for a standard run execution metric that applies to a journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyRunExecutionMetricsTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        String runId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String pageSize = null;
        GetJourneyRunExecutionMetricsResponse response = api.getJourneyRunExecutionMetrics(applicationId, journeyId, runId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Provides information about the runs of a journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJourneyRunsTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetJourneyRunsResponse response = api.getJourneyRuns(applicationId, journeyId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves the content and settings of a message template for messages that are sent through a push notification channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPushTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        GetPushTemplateResponse response = api.getPushTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Retrieves information about an Amazon Pinpoint configuration for a recommender model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommenderConfigurationTest() throws ApiException {
        String recommenderId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRecommenderConfigurationResponse response = api.getRecommenderConfiguration(recommenderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecommenderConfigurationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetRecommenderConfigurationsResponse response = api.getRecommenderConfigurations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the configuration, dimension, and other settings for a specific segment that&#39;s associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSegmentResponse response = api.getSegment(applicationId, segmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the export jobs for a segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentExportJobsTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetSegmentExportJobsResponse response = api.getSegmentExportJobs(applicationId, segmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the import jobs for a segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentImportJobsTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetSegmentImportJobsResponse response = api.getSegmentImportJobs(applicationId, segmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that&#39;s associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentVersionTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        String version = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSegmentVersionResponse response = api.getSegmentVersion(applicationId, segmentId, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that&#39;s associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentVersionsTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetSegmentVersionsResponse response = api.getSegmentVersions(applicationId, segmentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentsTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        GetSegmentsResponse response = api.getSegments(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the SMS channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSmsChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSmsChannelResponse response = api.getSmsChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the content and settings of a message template for messages that are sent through the SMS channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSmsTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        GetSmsTemplateResponse response = api.getSmsTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the endpoints that are associated with a specific user ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserEndpointsTest() throws ApiException {
        String applicationId = null;
        String userId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetUserEndpointsResponse response = api.getUserEndpoints(applicationId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status and settings of the voice channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoiceChannelTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetVoiceChannelResponse response = api.getVoiceChannel(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the content and settings of a message template for messages that are sent through the voice channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVoiceTemplateTest() throws ApiException {
        String templateName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        GetVoiceTemplateResponse response = api.getVoiceTemplate(templateName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJourneysTest() throws ApiException {
        String applicationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String token = null;
        ListJourneysResponse response = api.listJourneys(applicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, token);
        // TODO: test validations
    }

    /**
     * Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the versions of a specific message template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTemplateVersionsTest() throws ApiException {
        String templateName = null;
        String templateType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String pageSize = null;
        ListTemplateVersionsResponse response = api.listTemplateVersions(templateName, templateType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize);
        // TODO: test validations
    }

    /**
     * Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTemplatesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        String pageSize = null;
        String prefix = null;
        String templateType = null;
        ListTemplatesResponse response = api.listTemplates(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, pageSize, prefix, templateType);
        // TODO: test validations
    }

    /**
     * Retrieves information about a phone number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void phoneNumberValidateTest() throws ApiException {
        PhoneNumberValidateRequest phoneNumberValidateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PhoneNumberValidateResponse response = api.phoneNumberValidate(phoneNumberValidateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new event stream for an application or updates the settings of an existing event stream for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEventStreamTest() throws ApiException {
        String applicationId = null;
        PutEventStreamRequest putEventStreamRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutEventStreamResponse response = api.putEventStream(applicationId, putEventStreamRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEventsTest() throws ApiException {
        String applicationId = null;
        PutEventsRequest putEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutEventsResponse response = api.putEvents(applicationId, putEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAttributesTest() throws ApiException {
        String applicationId = null;
        String attributeType = null;
        RemoveAttributesRequest removeAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveAttributesResponse response = api.removeAttributes(applicationId, attributeType, removeAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and sends a direct message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessagesTest() throws ApiException {
        String applicationId = null;
        SendMessagesRequest sendMessagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendMessagesResponse response = api.sendMessages(applicationId, sendMessagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Send an OTP message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendOTPMessageTest() throws ApiException {
        String applicationId = null;
        SendOTPMessageRequest sendOTPMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendOTPMessageResponse response = api.sendOTPMessage(applicationId, sendOTPMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates and sends a message to a list of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendUsersMessagesTest() throws ApiException {
        String applicationId = null;
        SendUsersMessagesRequest sendUsersMessagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendUsersMessagesResponse response = api.sendUsersMessages(applicationId, sendUsersMessagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags (keys and values) to an application, campaign, message template, or segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags (keys and values) from an application, campaign, message template, or segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdmChannelTest() throws ApiException {
        String applicationId = null;
        UpdateAdmChannelRequest updateAdmChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAdmChannelResponse response = api.updateAdmChannel(applicationId, updateAdmChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApnsChannelTest() throws ApiException {
        String applicationId = null;
        UpdateApnsChannelRequest updateApnsChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApnsChannelResponse response = api.updateApnsChannel(applicationId, updateApnsChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApnsSandboxChannelTest() throws ApiException {
        String applicationId = null;
        UpdateApnsSandboxChannelRequest updateApnsSandboxChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApnsSandboxChannelResponse response = api.updateApnsSandboxChannel(applicationId, updateApnsSandboxChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApnsVoipChannelTest() throws ApiException {
        String applicationId = null;
        UpdateApnsVoipChannelRequest updateApnsVoipChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApnsVoipChannelResponse response = api.updateApnsVoipChannel(applicationId, updateApnsVoipChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApnsVoipSandboxChannelTest() throws ApiException {
        String applicationId = null;
        UpdateApnsVoipSandboxChannelRequest updateApnsVoipSandboxChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApnsVoipSandboxChannelResponse response = api.updateApnsVoipSandboxChannel(applicationId, updateApnsVoipSandboxChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the settings for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationSettingsTest() throws ApiException {
        String applicationId = null;
        UpdateApplicationSettingsRequest updateApplicationSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApplicationSettingsResponse response = api.updateApplicationSettings(applicationId, updateApplicationSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBaiduChannelTest() throws ApiException {
        String applicationId = null;
        UpdateBaiduChannelRequest updateBaiduChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateBaiduChannelResponse response = api.updateBaiduChannel(applicationId, updateBaiduChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration and other settings for a campaign.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCampaignTest() throws ApiException {
        String applicationId = null;
        String campaignId = null;
        CreateCampaignRequest createCampaignRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCampaignResponse response = api.updateCampaign(applicationId, campaignId, createCampaignRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the email channel for an application or updates the status and settings of the email channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailChannelTest() throws ApiException {
        String applicationId = null;
        UpdateEmailChannelRequest updateEmailChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEmailChannelResponse response = api.updateEmailChannel(applicationId, updateEmailChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing message template for messages that are sent through the email channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailTemplateTest() throws ApiException {
        String templateName = null;
        UpdateEmailTemplateRequest updateEmailTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean createNewVersion = null;
        String version = null;
        UpdateEmailTemplateResponse response = api.updateEmailTemplate(templateName, updateEmailTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createNewVersion, version);
        // TODO: test validations
    }

    /**
     * Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndpointTest() throws ApiException {
        String applicationId = null;
        String endpointId = null;
        UpdateEndpointRequest updateEndpointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEndpointResponse response = api.updateEndpoint(applicationId, endpointId, updateEndpointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndpointsBatchTest() throws ApiException {
        String applicationId = null;
        UpdateEndpointsBatchRequest updateEndpointsBatchRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEndpointsBatchResponse response = api.updateEndpointsBatch(applicationId, updateEndpointsBatchRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGcmChannelTest() throws ApiException {
        String applicationId = null;
        UpdateGcmChannelRequest updateGcmChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateGcmChannelResponse response = api.updateGcmChannel(applicationId, updateGcmChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing message template for messages sent through the in-app message channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInAppTemplateTest() throws ApiException {
        String templateName = null;
        UpdateInAppTemplateRequest updateInAppTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean createNewVersion = null;
        String version = null;
        UpdateInAppTemplateResponse response = api.updateInAppTemplate(templateName, updateInAppTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createNewVersion, version);
        // TODO: test validations
    }

    /**
     * Updates the configuration and other settings for a journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJourneyTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        CreateJourneyRequest createJourneyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateJourneyResponse response = api.updateJourney(applicationId, journeyId, createJourneyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels (stops) an active journey.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJourneyStateTest() throws ApiException {
        String applicationId = null;
        String journeyId = null;
        UpdateJourneyStateRequest updateJourneyStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateJourneyStateResponse response = api.updateJourneyState(applicationId, journeyId, updateJourneyStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing message template for messages that are sent through a push notification channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePushTemplateTest() throws ApiException {
        String templateName = null;
        UpdatePushTemplateRequest updatePushTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean createNewVersion = null;
        String version = null;
        UpdatePushTemplateResponse response = api.updatePushTemplate(templateName, updatePushTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createNewVersion, version);
        // TODO: test validations
    }

    /**
     * Updates an Amazon Pinpoint configuration for a recommender model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecommenderConfigurationTest() throws ApiException {
        String recommenderId = null;
        UpdateRecommenderConfigurationRequest updateRecommenderConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRecommenderConfigurationResponse response = api.updateRecommenderConfiguration(recommenderId, updateRecommenderConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that&#39;s associated with an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSegmentTest() throws ApiException {
        String applicationId = null;
        String segmentId = null;
        CreateSegmentRequest createSegmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSegmentResponse response = api.updateSegment(applicationId, segmentId, createSegmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSmsChannelTest() throws ApiException {
        String applicationId = null;
        UpdateSmsChannelRequest updateSmsChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSmsChannelResponse response = api.updateSmsChannel(applicationId, updateSmsChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing message template for messages that are sent through the SMS channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSmsTemplateTest() throws ApiException {
        String templateName = null;
        UpdateSmsTemplateRequest updateSmsTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean createNewVersion = null;
        String version = null;
        UpdateSmsTemplateResponse response = api.updateSmsTemplate(templateName, updateSmsTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createNewVersion, version);
        // TODO: test validations
    }

    /**
     * Changes the status of a specific version of a message template to &lt;i&gt;active&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTemplateActiveVersionTest() throws ApiException {
        String templateName = null;
        String templateType = null;
        UpdateTemplateActiveVersionRequest updateTemplateActiveVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTemplateActiveVersionResponse response = api.updateTemplateActiveVersion(templateName, templateType, updateTemplateActiveVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the voice channel for an application or updates the status and settings of the voice channel for an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVoiceChannelTest() throws ApiException {
        String applicationId = null;
        UpdateVoiceChannelRequest updateVoiceChannelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVoiceChannelResponse response = api.updateVoiceChannel(applicationId, updateVoiceChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing message template for messages that are sent through the voice channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVoiceTemplateTest() throws ApiException {
        String templateName = null;
        UpdateVoiceTemplateRequest updateVoiceTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean createNewVersion = null;
        String version = null;
        UpdateVoiceTemplateResponse response = api.updateVoiceTemplate(templateName, updateVoiceTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createNewVersion, version);
        // TODO: test validations
    }

    /**
     * Verify an OTP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyOTPMessageTest() throws ApiException {
        String applicationId = null;
        VerifyOTPMessageRequest verifyOTPMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        VerifyOTPMessageResponse response = api.verifyOTPMessage(applicationId, verifyOTPMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
