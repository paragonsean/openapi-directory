/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits() {
    this->initializeModel();
}

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::~OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits() {}

void OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::initializeModel() {

    m_daily_cap_isSet = false;
    m_daily_cap_isValid = false;

    m_timeframe_cap_isSet = false;
    m_timeframe_cap_isValid = false;

    m_total_cap_isSet = false;
    m_total_cap_isValid = false;
}

void OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::fromJsonObject(QJsonObject json) {

    m_daily_cap_isValid = ::OpenAPI::fromJsonValue(m_daily_cap, json[QString("DailyCap")]);
    m_daily_cap_isSet = !json[QString("DailyCap")].isNull() && m_daily_cap_isValid;

    m_timeframe_cap_isValid = ::OpenAPI::fromJsonValue(m_timeframe_cap, json[QString("TimeframeCap")]);
    m_timeframe_cap_isSet = !json[QString("TimeframeCap")].isNull() && m_timeframe_cap_isValid;

    m_total_cap_isValid = ::OpenAPI::fromJsonValue(m_total_cap, json[QString("TotalCap")]);
    m_total_cap_isSet = !json[QString("TotalCap")].isNull() && m_total_cap_isValid;
}

QString OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_cap_isSet) {
        obj.insert(QString("DailyCap"), ::OpenAPI::toJsonValue(m_daily_cap));
    }
    if (m_timeframe_cap.isSet()) {
        obj.insert(QString("TimeframeCap"), ::OpenAPI::toJsonValue(m_timeframe_cap));
    }
    if (m_total_cap_isSet) {
        obj.insert(QString("TotalCap"), ::OpenAPI::toJsonValue(m_total_cap));
    }
    return obj;
}

qint32 OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::getDailyCap() const {
    return m_daily_cap;
}
void OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::setDailyCap(const qint32 &daily_cap) {
    m_daily_cap = daily_cap;
    m_daily_cap_isSet = true;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::is_daily_cap_Set() const{
    return m_daily_cap_isSet;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::is_daily_cap_Valid() const{
    return m_daily_cap_isValid;
}

OAIApplicationSettingsJourneyLimits_TimeframeCap OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::getTimeframeCap() const {
    return m_timeframe_cap;
}
void OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::setTimeframeCap(const OAIApplicationSettingsJourneyLimits_TimeframeCap &timeframe_cap) {
    m_timeframe_cap = timeframe_cap;
    m_timeframe_cap_isSet = true;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::is_timeframe_cap_Set() const{
    return m_timeframe_cap_isSet;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::is_timeframe_cap_Valid() const{
    return m_timeframe_cap_isValid;
}

qint32 OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::getTotalCap() const {
    return m_total_cap;
}
void OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::setTotalCap(const qint32 &total_cap) {
    m_total_cap = total_cap;
    m_total_cap_isSet = true;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::is_total_cap_Set() const{
    return m_total_cap_isSet;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::is_total_cap_Valid() const{
    return m_total_cap_isValid;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe_cap.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cap_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
