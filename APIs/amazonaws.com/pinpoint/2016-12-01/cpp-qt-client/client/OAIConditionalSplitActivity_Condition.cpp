/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalSplitActivity_Condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalSplitActivity_Condition::OAIConditionalSplitActivity_Condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalSplitActivity_Condition::OAIConditionalSplitActivity_Condition() {
    this->initializeModel();
}

OAIConditionalSplitActivity_Condition::~OAIConditionalSplitActivity_Condition() {}

void OAIConditionalSplitActivity_Condition::initializeModel() {

    m_conditions_isSet = false;
    m_conditions_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;
}

void OAIConditionalSplitActivity_Condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalSplitActivity_Condition::fromJsonObject(QJsonObject json) {

    m_conditions_isValid = ::OpenAPI::fromJsonValue(m_conditions, json[QString("Conditions")]);
    m_conditions_isSet = !json[QString("Conditions")].isNull() && m_conditions_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("Operator")]);
    m_r_operator_isSet = !json[QString("Operator")].isNull() && m_r_operator_isValid;
}

QString OAIConditionalSplitActivity_Condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalSplitActivity_Condition::asJsonObject() const {
    QJsonObject obj;
    if (m_conditions.isSet()) {
        obj.insert(QString("Conditions"), ::OpenAPI::toJsonValue(m_conditions));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("Operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    return obj;
}

QList OAIConditionalSplitActivity_Condition::getConditions() const {
    return m_conditions;
}
void OAIConditionalSplitActivity_Condition::setConditions(const QList &conditions) {
    m_conditions = conditions;
    m_conditions_isSet = true;
}

bool OAIConditionalSplitActivity_Condition::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIConditionalSplitActivity_Condition::is_conditions_Valid() const{
    return m_conditions_isValid;
}

OAIOperator OAIConditionalSplitActivity_Condition::getROperator() const {
    return m_r_operator;
}
void OAIConditionalSplitActivity_Condition::setROperator(const OAIOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIConditionalSplitActivity_Condition::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIConditionalSplitActivity_Condition::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

bool OAIConditionalSplitActivity_Condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalSplitActivity_Condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
