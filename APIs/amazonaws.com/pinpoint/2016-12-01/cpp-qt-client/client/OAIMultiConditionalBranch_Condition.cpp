/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiConditionalBranch_Condition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiConditionalBranch_Condition::OAIMultiConditionalBranch_Condition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiConditionalBranch_Condition::OAIMultiConditionalBranch_Condition() {
    this->initializeModel();
}

OAIMultiConditionalBranch_Condition::~OAIMultiConditionalBranch_Condition() {}

void OAIMultiConditionalBranch_Condition::initializeModel() {

    m_event_condition_isSet = false;
    m_event_condition_isValid = false;

    m_segment_condition_isSet = false;
    m_segment_condition_isValid = false;

    m_segment_dimensions_isSet = false;
    m_segment_dimensions_isValid = false;
}

void OAIMultiConditionalBranch_Condition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiConditionalBranch_Condition::fromJsonObject(QJsonObject json) {

    m_event_condition_isValid = ::OpenAPI::fromJsonValue(m_event_condition, json[QString("EventCondition")]);
    m_event_condition_isSet = !json[QString("EventCondition")].isNull() && m_event_condition_isValid;

    m_segment_condition_isValid = ::OpenAPI::fromJsonValue(m_segment_condition, json[QString("SegmentCondition")]);
    m_segment_condition_isSet = !json[QString("SegmentCondition")].isNull() && m_segment_condition_isValid;

    m_segment_dimensions_isValid = ::OpenAPI::fromJsonValue(m_segment_dimensions, json[QString("SegmentDimensions")]);
    m_segment_dimensions_isSet = !json[QString("SegmentDimensions")].isNull() && m_segment_dimensions_isValid;
}

QString OAIMultiConditionalBranch_Condition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiConditionalBranch_Condition::asJsonObject() const {
    QJsonObject obj;
    if (m_event_condition.isSet()) {
        obj.insert(QString("EventCondition"), ::OpenAPI::toJsonValue(m_event_condition));
    }
    if (m_segment_condition.isSet()) {
        obj.insert(QString("SegmentCondition"), ::OpenAPI::toJsonValue(m_segment_condition));
    }
    if (m_segment_dimensions.isSet()) {
        obj.insert(QString("SegmentDimensions"), ::OpenAPI::toJsonValue(m_segment_dimensions));
    }
    return obj;
}

OAISimpleCondition_EventCondition OAIMultiConditionalBranch_Condition::getEventCondition() const {
    return m_event_condition;
}
void OAIMultiConditionalBranch_Condition::setEventCondition(const OAISimpleCondition_EventCondition &event_condition) {
    m_event_condition = event_condition;
    m_event_condition_isSet = true;
}

bool OAIMultiConditionalBranch_Condition::is_event_condition_Set() const{
    return m_event_condition_isSet;
}

bool OAIMultiConditionalBranch_Condition::is_event_condition_Valid() const{
    return m_event_condition_isValid;
}

OAISimpleCondition_SegmentCondition OAIMultiConditionalBranch_Condition::getSegmentCondition() const {
    return m_segment_condition;
}
void OAIMultiConditionalBranch_Condition::setSegmentCondition(const OAISimpleCondition_SegmentCondition &segment_condition) {
    m_segment_condition = segment_condition;
    m_segment_condition_isSet = true;
}

bool OAIMultiConditionalBranch_Condition::is_segment_condition_Set() const{
    return m_segment_condition_isSet;
}

bool OAIMultiConditionalBranch_Condition::is_segment_condition_Valid() const{
    return m_segment_condition_isValid;
}

OAISimpleCondition_SegmentDimensions OAIMultiConditionalBranch_Condition::getSegmentDimensions() const {
    return m_segment_dimensions;
}
void OAIMultiConditionalBranch_Condition::setSegmentDimensions(const OAISimpleCondition_SegmentDimensions &segment_dimensions) {
    m_segment_dimensions = segment_dimensions;
    m_segment_dimensions_isSet = true;
}

bool OAIMultiConditionalBranch_Condition::is_segment_dimensions_Set() const{
    return m_segment_dimensions_isSet;
}

bool OAIMultiConditionalBranch_Condition::is_segment_dimensions_Valid() const{
    return m_segment_dimensions_isValid;
}

bool OAIMultiConditionalBranch_Condition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiConditionalBranch_Condition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
