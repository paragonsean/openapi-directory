/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsBatch::OAIEventsBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsBatch::OAIEventsBatch() {
    this->initializeModel();
}

OAIEventsBatch::~OAIEventsBatch() {}

void OAIEventsBatch::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIEventsBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsBatch::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;
}

QString OAIEventsBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint.isSet()) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_events.isSet()) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

OAIEventsBatch_Endpoint OAIEventsBatch::getEndpoint() const {
    return m_endpoint;
}
void OAIEventsBatch::setEndpoint(const OAIEventsBatch_Endpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIEventsBatch::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIEventsBatch::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QMap OAIEventsBatch::getEvents() const {
    return m_events;
}
void OAIEventsBatch::setEvents(const QMap &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIEventsBatch::is_events_Set() const{
    return m_events_isSet;
}

bool OAIEventsBatch::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIEventsBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_isValid && m_events_isValid && true;
}

} // namespace OpenAPI
