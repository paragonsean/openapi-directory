/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportJobResponse_Definition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportJobResponse_Definition::OAIImportJobResponse_Definition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportJobResponse_Definition::OAIImportJobResponse_Definition() {
    this->initializeModel();
}

OAIImportJobResponse_Definition::~OAIImportJobResponse_Definition() {}

void OAIImportJobResponse_Definition::initializeModel() {

    m_define_segment_isSet = false;
    m_define_segment_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_register_endpoints_isSet = false;
    m_register_endpoints_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_s3_url_isSet = false;
    m_s3_url_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_segment_name_isSet = false;
    m_segment_name_isValid = false;
}

void OAIImportJobResponse_Definition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportJobResponse_Definition::fromJsonObject(QJsonObject json) {

    m_define_segment_isValid = ::OpenAPI::fromJsonValue(m_define_segment, json[QString("DefineSegment")]);
    m_define_segment_isSet = !json[QString("DefineSegment")].isNull() && m_define_segment_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_register_endpoints_isValid = ::OpenAPI::fromJsonValue(m_register_endpoints, json[QString("RegisterEndpoints")]);
    m_register_endpoints_isSet = !json[QString("RegisterEndpoints")].isNull() && m_register_endpoints_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_s3_url_isValid = ::OpenAPI::fromJsonValue(m_s3_url, json[QString("S3Url")]);
    m_s3_url_isSet = !json[QString("S3Url")].isNull() && m_s3_url_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("SegmentId")]);
    m_segment_id_isSet = !json[QString("SegmentId")].isNull() && m_segment_id_isValid;

    m_segment_name_isValid = ::OpenAPI::fromJsonValue(m_segment_name, json[QString("SegmentName")]);
    m_segment_name_isSet = !json[QString("SegmentName")].isNull() && m_segment_name_isValid;
}

QString OAIImportJobResponse_Definition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportJobResponse_Definition::asJsonObject() const {
    QJsonObject obj;
    if (m_define_segment_isSet) {
        obj.insert(QString("DefineSegment"), ::OpenAPI::toJsonValue(m_define_segment));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_register_endpoints_isSet) {
        obj.insert(QString("RegisterEndpoints"), ::OpenAPI::toJsonValue(m_register_endpoints));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_s3_url_isSet) {
        obj.insert(QString("S3Url"), ::OpenAPI::toJsonValue(m_s3_url));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("SegmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_segment_name_isSet) {
        obj.insert(QString("SegmentName"), ::OpenAPI::toJsonValue(m_segment_name));
    }
    return obj;
}

bool OAIImportJobResponse_Definition::getDefineSegment() const {
    return m_define_segment;
}
void OAIImportJobResponse_Definition::setDefineSegment(const bool &define_segment) {
    m_define_segment = define_segment;
    m_define_segment_isSet = true;
}

bool OAIImportJobResponse_Definition::is_define_segment_Set() const{
    return m_define_segment_isSet;
}

bool OAIImportJobResponse_Definition::is_define_segment_Valid() const{
    return m_define_segment_isValid;
}

QString OAIImportJobResponse_Definition::getExternalId() const {
    return m_external_id;
}
void OAIImportJobResponse_Definition::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIImportJobResponse_Definition::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIImportJobResponse_Definition::is_external_id_Valid() const{
    return m_external_id_isValid;
}

OAIFormat OAIImportJobResponse_Definition::getFormat() const {
    return m_format;
}
void OAIImportJobResponse_Definition::setFormat(const OAIFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImportJobResponse_Definition::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImportJobResponse_Definition::is_format_Valid() const{
    return m_format_isValid;
}

bool OAIImportJobResponse_Definition::getRegisterEndpoints() const {
    return m_register_endpoints;
}
void OAIImportJobResponse_Definition::setRegisterEndpoints(const bool &register_endpoints) {
    m_register_endpoints = register_endpoints;
    m_register_endpoints_isSet = true;
}

bool OAIImportJobResponse_Definition::is_register_endpoints_Set() const{
    return m_register_endpoints_isSet;
}

bool OAIImportJobResponse_Definition::is_register_endpoints_Valid() const{
    return m_register_endpoints_isValid;
}

QString OAIImportJobResponse_Definition::getRoleArn() const {
    return m_role_arn;
}
void OAIImportJobResponse_Definition::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIImportJobResponse_Definition::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIImportJobResponse_Definition::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIImportJobResponse_Definition::getS3Url() const {
    return m_s3_url;
}
void OAIImportJobResponse_Definition::setS3Url(const QString &s3_url) {
    m_s3_url = s3_url;
    m_s3_url_isSet = true;
}

bool OAIImportJobResponse_Definition::is_s3_url_Set() const{
    return m_s3_url_isSet;
}

bool OAIImportJobResponse_Definition::is_s3_url_Valid() const{
    return m_s3_url_isValid;
}

QString OAIImportJobResponse_Definition::getSegmentId() const {
    return m_segment_id;
}
void OAIImportJobResponse_Definition::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIImportJobResponse_Definition::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIImportJobResponse_Definition::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QString OAIImportJobResponse_Definition::getSegmentName() const {
    return m_segment_name;
}
void OAIImportJobResponse_Definition::setSegmentName(const QString &segment_name) {
    m_segment_name = segment_name;
    m_segment_name_isSet = true;
}

bool OAIImportJobResponse_Definition::is_segment_name_Set() const{
    return m_segment_name_isSet;
}

bool OAIImportJobResponse_Definition::is_segment_name_Valid() const{
    return m_segment_name_isValid;
}

bool OAIImportJobResponse_Definition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_define_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_register_endpoints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportJobResponse_Definition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && m_role_arn_isValid && m_s3_url_isValid && true;
}

} // namespace OpenAPI
