/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointResponse::OAIEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointResponse::OAIEndpointResponse() {
    this->initializeModel();
}

OAIEndpointResponse::~OAIEndpointResponse() {}

void OAIEndpointResponse::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_cohort_id_isSet = false;
    m_cohort_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_demographic_isSet = false;
    m_demographic_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_endpoint_status_isSet = false;
    m_endpoint_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_opt_out_isSet = false;
    m_opt_out_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointResponse::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("ChannelType")]);
    m_channel_type_isSet = !json[QString("ChannelType")].isNull() && m_channel_type_isValid;

    m_cohort_id_isValid = ::OpenAPI::fromJsonValue(m_cohort_id, json[QString("CohortId")]);
    m_cohort_id_isSet = !json[QString("CohortId")].isNull() && m_cohort_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_demographic_isValid = ::OpenAPI::fromJsonValue(m_demographic, json[QString("Demographic")]);
    m_demographic_isSet = !json[QString("Demographic")].isNull() && m_demographic_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_endpoint_status_isValid = ::OpenAPI::fromJsonValue(m_endpoint_status, json[QString("EndpointStatus")]);
    m_endpoint_status_isSet = !json[QString("EndpointStatus")].isNull() && m_endpoint_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_opt_out_isValid = ::OpenAPI::fromJsonValue(m_opt_out, json[QString("OptOut")]);
    m_opt_out_isSet = !json[QString("OptOut")].isNull() && m_opt_out_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("User")]);
    m_user_isSet = !json[QString("User")].isNull() && m_user_isValid;
}

QString OAIEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_channel_type.isSet()) {
        obj.insert(QString("ChannelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_cohort_id_isSet) {
        obj.insert(QString("CohortId"), ::OpenAPI::toJsonValue(m_cohort_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_demographic.isSet()) {
        obj.insert(QString("Demographic"), ::OpenAPI::toJsonValue(m_demographic));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_endpoint_status_isSet) {
        obj.insert(QString("EndpointStatus"), ::OpenAPI::toJsonValue(m_endpoint_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_opt_out_isSet) {
        obj.insert(QString("OptOut"), ::OpenAPI::toJsonValue(m_opt_out));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("User"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIEndpointResponse::getAddress() const {
    return m_address;
}
void OAIEndpointResponse::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEndpointResponse::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEndpointResponse::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIEndpointResponse::getApplicationId() const {
    return m_application_id;
}
void OAIEndpointResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIEndpointResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIEndpointResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QMap OAIEndpointResponse::getAttributes() const {
    return m_attributes;
}
void OAIEndpointResponse::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEndpointResponse::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEndpointResponse::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIChannelType OAIEndpointResponse::getChannelType() const {
    return m_channel_type;
}
void OAIEndpointResponse::setChannelType(const OAIChannelType &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIEndpointResponse::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIEndpointResponse::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAIEndpointResponse::getCohortId() const {
    return m_cohort_id;
}
void OAIEndpointResponse::setCohortId(const QString &cohort_id) {
    m_cohort_id = cohort_id;
    m_cohort_id_isSet = true;
}

bool OAIEndpointResponse::is_cohort_id_Set() const{
    return m_cohort_id_isSet;
}

bool OAIEndpointResponse::is_cohort_id_Valid() const{
    return m_cohort_id_isValid;
}

QString OAIEndpointResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIEndpointResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIEndpointResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIEndpointResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIUpdateEndpoint_request_EndpointRequest_Demographic OAIEndpointResponse::getDemographic() const {
    return m_demographic;
}
void OAIEndpointResponse::setDemographic(const OAIUpdateEndpoint_request_EndpointRequest_Demographic &demographic) {
    m_demographic = demographic;
    m_demographic_isSet = true;
}

bool OAIEndpointResponse::is_demographic_Set() const{
    return m_demographic_isSet;
}

bool OAIEndpointResponse::is_demographic_Valid() const{
    return m_demographic_isValid;
}

QString OAIEndpointResponse::getEffectiveDate() const {
    return m_effective_date;
}
void OAIEndpointResponse::setEffectiveDate(const QString &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIEndpointResponse::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIEndpointResponse::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

QString OAIEndpointResponse::getEndpointStatus() const {
    return m_endpoint_status;
}
void OAIEndpointResponse::setEndpointStatus(const QString &endpoint_status) {
    m_endpoint_status = endpoint_status;
    m_endpoint_status_isSet = true;
}

bool OAIEndpointResponse::is_endpoint_status_Set() const{
    return m_endpoint_status_isSet;
}

bool OAIEndpointResponse::is_endpoint_status_Valid() const{
    return m_endpoint_status_isValid;
}

QString OAIEndpointResponse::getId() const {
    return m_id;
}
void OAIEndpointResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEndpointResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEndpointResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIUpdateEndpoint_request_EndpointRequest_Location OAIEndpointResponse::getLocation() const {
    return m_location;
}
void OAIEndpointResponse::setLocation(const OAIUpdateEndpoint_request_EndpointRequest_Location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEndpointResponse::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEndpointResponse::is_location_Valid() const{
    return m_location_isValid;
}

QMap OAIEndpointResponse::getMetrics() const {
    return m_metrics;
}
void OAIEndpointResponse::setMetrics(const QMap &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIEndpointResponse::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIEndpointResponse::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIEndpointResponse::getOptOut() const {
    return m_opt_out;
}
void OAIEndpointResponse::setOptOut(const QString &opt_out) {
    m_opt_out = opt_out;
    m_opt_out_isSet = true;
}

bool OAIEndpointResponse::is_opt_out_Set() const{
    return m_opt_out_isSet;
}

bool OAIEndpointResponse::is_opt_out_Valid() const{
    return m_opt_out_isValid;
}

QString OAIEndpointResponse::getRequestId() const {
    return m_request_id;
}
void OAIEndpointResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIEndpointResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIEndpointResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIEndpointResponse_User OAIEndpointResponse::getUser() const {
    return m_user;
}
void OAIEndpointResponse::setUser(const OAIEndpointResponse_User &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEndpointResponse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEndpointResponse::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cohort_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_demographic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opt_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
