/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentDimensions_Location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentDimensions_Location::OAISegmentDimensions_Location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentDimensions_Location::OAISegmentDimensions_Location() {
    this->initializeModel();
}

OAISegmentDimensions_Location::~OAISegmentDimensions_Location() {}

void OAISegmentDimensions_Location::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_gps_point_isSet = false;
    m_gps_point_isValid = false;
}

void OAISegmentDimensions_Location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentDimensions_Location::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_gps_point_isValid = ::OpenAPI::fromJsonValue(m_gps_point, json[QString("GPSPoint")]);
    m_gps_point_isSet = !json[QString("GPSPoint")].isNull() && m_gps_point_isValid;
}

QString OAISegmentDimensions_Location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentDimensions_Location::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_gps_point.isSet()) {
        obj.insert(QString("GPSPoint"), ::OpenAPI::toJsonValue(m_gps_point));
    }
    return obj;
}

OAISegmentLocation_Country OAISegmentDimensions_Location::getCountry() const {
    return m_country;
}
void OAISegmentDimensions_Location::setCountry(const OAISegmentLocation_Country &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISegmentDimensions_Location::is_country_Set() const{
    return m_country_isSet;
}

bool OAISegmentDimensions_Location::is_country_Valid() const{
    return m_country_isValid;
}

OAISegmentLocation_GPSPoint OAISegmentDimensions_Location::getGpsPoint() const {
    return m_gps_point;
}
void OAISegmentDimensions_Location::setGpsPoint(const OAISegmentLocation_GPSPoint &gps_point) {
    m_gps_point = gps_point;
    m_gps_point_isSet = true;
}

bool OAISegmentDimensions_Location::is_gps_point_Set() const{
    return m_gps_point_isSet;
}

bool OAISegmentDimensions_Location::is_gps_point_Valid() const{
    return m_gps_point_isValid;
}

bool OAISegmentDimensions_Location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gps_point.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentDimensions_Location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
