/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendUsersMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendUsersMessageRequest::OAISendUsersMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendUsersMessageRequest::OAISendUsersMessageRequest() {
    this->initializeModel();
}

OAISendUsersMessageRequest::~OAISendUsersMessageRequest() {}

void OAISendUsersMessageRequest::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_message_configuration_isSet = false;
    m_message_configuration_isValid = false;

    m_template_configuration_isSet = false;
    m_template_configuration_isValid = false;

    m_trace_id_isSet = false;
    m_trace_id_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAISendUsersMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendUsersMessageRequest::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_message_configuration_isValid = ::OpenAPI::fromJsonValue(m_message_configuration, json[QString("MessageConfiguration")]);
    m_message_configuration_isSet = !json[QString("MessageConfiguration")].isNull() && m_message_configuration_isValid;

    m_template_configuration_isValid = ::OpenAPI::fromJsonValue(m_template_configuration, json[QString("TemplateConfiguration")]);
    m_template_configuration_isSet = !json[QString("TemplateConfiguration")].isNull() && m_template_configuration_isValid;

    m_trace_id_isValid = ::OpenAPI::fromJsonValue(m_trace_id, json[QString("TraceId")]);
    m_trace_id_isSet = !json[QString("TraceId")].isNull() && m_trace_id_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("Users")]);
    m_users_isSet = !json[QString("Users")].isNull() && m_users_isValid;
}

QString OAISendUsersMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendUsersMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_message_configuration.isSet()) {
        obj.insert(QString("MessageConfiguration"), ::OpenAPI::toJsonValue(m_message_configuration));
    }
    if (m_template_configuration.isSet()) {
        obj.insert(QString("TemplateConfiguration"), ::OpenAPI::toJsonValue(m_template_configuration));
    }
    if (m_trace_id_isSet) {
        obj.insert(QString("TraceId"), ::OpenAPI::toJsonValue(m_trace_id));
    }
    if (m_users.isSet()) {
        obj.insert(QString("Users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QMap OAISendUsersMessageRequest::getContext() const {
    return m_context;
}
void OAISendUsersMessageRequest::setContext(const QMap &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISendUsersMessageRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAISendUsersMessageRequest::is_context_Valid() const{
    return m_context_isValid;
}

OAISendMessages_request_MessageRequest_MessageConfiguration OAISendUsersMessageRequest::getMessageConfiguration() const {
    return m_message_configuration;
}
void OAISendUsersMessageRequest::setMessageConfiguration(const OAISendMessages_request_MessageRequest_MessageConfiguration &message_configuration) {
    m_message_configuration = message_configuration;
    m_message_configuration_isSet = true;
}

bool OAISendUsersMessageRequest::is_message_configuration_Set() const{
    return m_message_configuration_isSet;
}

bool OAISendUsersMessageRequest::is_message_configuration_Valid() const{
    return m_message_configuration_isValid;
}

OAISendMessages_request_MessageRequest_TemplateConfiguration OAISendUsersMessageRequest::getTemplateConfiguration() const {
    return m_template_configuration;
}
void OAISendUsersMessageRequest::setTemplateConfiguration(const OAISendMessages_request_MessageRequest_TemplateConfiguration &template_configuration) {
    m_template_configuration = template_configuration;
    m_template_configuration_isSet = true;
}

bool OAISendUsersMessageRequest::is_template_configuration_Set() const{
    return m_template_configuration_isSet;
}

bool OAISendUsersMessageRequest::is_template_configuration_Valid() const{
    return m_template_configuration_isValid;
}

QString OAISendUsersMessageRequest::getTraceId() const {
    return m_trace_id;
}
void OAISendUsersMessageRequest::setTraceId(const QString &trace_id) {
    m_trace_id = trace_id;
    m_trace_id_isSet = true;
}

bool OAISendUsersMessageRequest::is_trace_id_Set() const{
    return m_trace_id_isSet;
}

bool OAISendUsersMessageRequest::is_trace_id_Valid() const{
    return m_trace_id_isValid;
}

QMap OAISendUsersMessageRequest::getUsers() const {
    return m_users;
}
void OAISendUsersMessageRequest::setUsers(const QMap &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAISendUsersMessageRequest::is_users_Set() const{
    return m_users_isSet;
}

bool OAISendUsersMessageRequest::is_users_Valid() const{
    return m_users_isValid;
}

bool OAISendUsersMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendUsersMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_configuration_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
