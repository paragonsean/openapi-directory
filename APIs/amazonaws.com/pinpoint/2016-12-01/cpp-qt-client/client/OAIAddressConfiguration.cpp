/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressConfiguration::OAIAddressConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressConfiguration::OAIAddressConfiguration() {
    this->initializeModel();
}

OAIAddressConfiguration::~OAIAddressConfiguration() {}

void OAIAddressConfiguration::initializeModel() {

    m_body_override_isSet = false;
    m_body_override_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_raw_content_isSet = false;
    m_raw_content_isValid = false;

    m_substitutions_isSet = false;
    m_substitutions_isValid = false;

    m_title_override_isSet = false;
    m_title_override_isValid = false;
}

void OAIAddressConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressConfiguration::fromJsonObject(QJsonObject json) {

    m_body_override_isValid = ::OpenAPI::fromJsonValue(m_body_override, json[QString("BodyOverride")]);
    m_body_override_isSet = !json[QString("BodyOverride")].isNull() && m_body_override_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("ChannelType")]);
    m_channel_type_isSet = !json[QString("ChannelType")].isNull() && m_channel_type_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_raw_content_isValid = ::OpenAPI::fromJsonValue(m_raw_content, json[QString("RawContent")]);
    m_raw_content_isSet = !json[QString("RawContent")].isNull() && m_raw_content_isValid;

    m_substitutions_isValid = ::OpenAPI::fromJsonValue(m_substitutions, json[QString("Substitutions")]);
    m_substitutions_isSet = !json[QString("Substitutions")].isNull() && m_substitutions_isValid;

    m_title_override_isValid = ::OpenAPI::fromJsonValue(m_title_override, json[QString("TitleOverride")]);
    m_title_override_isSet = !json[QString("TitleOverride")].isNull() && m_title_override_isValid;
}

QString OAIAddressConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_body_override_isSet) {
        obj.insert(QString("BodyOverride"), ::OpenAPI::toJsonValue(m_body_override));
    }
    if (m_channel_type.isSet()) {
        obj.insert(QString("ChannelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_raw_content_isSet) {
        obj.insert(QString("RawContent"), ::OpenAPI::toJsonValue(m_raw_content));
    }
    if (m_substitutions.isSet()) {
        obj.insert(QString("Substitutions"), ::OpenAPI::toJsonValue(m_substitutions));
    }
    if (m_title_override_isSet) {
        obj.insert(QString("TitleOverride"), ::OpenAPI::toJsonValue(m_title_override));
    }
    return obj;
}

QString OAIAddressConfiguration::getBodyOverride() const {
    return m_body_override;
}
void OAIAddressConfiguration::setBodyOverride(const QString &body_override) {
    m_body_override = body_override;
    m_body_override_isSet = true;
}

bool OAIAddressConfiguration::is_body_override_Set() const{
    return m_body_override_isSet;
}

bool OAIAddressConfiguration::is_body_override_Valid() const{
    return m_body_override_isValid;
}

OAIChannelType OAIAddressConfiguration::getChannelType() const {
    return m_channel_type;
}
void OAIAddressConfiguration::setChannelType(const OAIChannelType &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIAddressConfiguration::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIAddressConfiguration::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QMap OAIAddressConfiguration::getContext() const {
    return m_context;
}
void OAIAddressConfiguration::setContext(const QMap &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIAddressConfiguration::is_context_Set() const{
    return m_context_isSet;
}

bool OAIAddressConfiguration::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIAddressConfiguration::getRawContent() const {
    return m_raw_content;
}
void OAIAddressConfiguration::setRawContent(const QString &raw_content) {
    m_raw_content = raw_content;
    m_raw_content_isSet = true;
}

bool OAIAddressConfiguration::is_raw_content_Set() const{
    return m_raw_content_isSet;
}

bool OAIAddressConfiguration::is_raw_content_Valid() const{
    return m_raw_content_isValid;
}

QMap OAIAddressConfiguration::getSubstitutions() const {
    return m_substitutions;
}
void OAIAddressConfiguration::setSubstitutions(const QMap &substitutions) {
    m_substitutions = substitutions;
    m_substitutions_isSet = true;
}

bool OAIAddressConfiguration::is_substitutions_Set() const{
    return m_substitutions_isSet;
}

bool OAIAddressConfiguration::is_substitutions_Valid() const{
    return m_substitutions_isValid;
}

QString OAIAddressConfiguration::getTitleOverride() const {
    return m_title_override;
}
void OAIAddressConfiguration::setTitleOverride(const QString &title_override) {
    m_title_override = title_override;
    m_title_override_isSet = true;
}

bool OAIAddressConfiguration::is_title_override_Set() const{
    return m_title_override_isSet;
}

bool OAIAddressConfiguration::is_title_override_Valid() const{
    return m_title_override_isValid;
}

bool OAIAddressConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitutions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
