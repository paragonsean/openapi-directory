/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultButtonConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultButtonConfiguration::OAIDefaultButtonConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultButtonConfiguration::OAIDefaultButtonConfiguration() {
    this->initializeModel();
}

OAIDefaultButtonConfiguration::~OAIDefaultButtonConfiguration() {}

void OAIDefaultButtonConfiguration::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_border_radius_isSet = false;
    m_border_radius_isValid = false;

    m_button_action_isSet = false;
    m_button_action_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_text_color_isSet = false;
    m_text_color_isValid = false;
}

void OAIDefaultButtonConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultButtonConfiguration::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_border_radius_isValid = ::OpenAPI::fromJsonValue(m_border_radius, json[QString("BorderRadius")]);
    m_border_radius_isSet = !json[QString("BorderRadius")].isNull() && m_border_radius_isValid;

    m_button_action_isValid = ::OpenAPI::fromJsonValue(m_button_action, json[QString("ButtonAction")]);
    m_button_action_isSet = !json[QString("ButtonAction")].isNull() && m_button_action_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("Link")]);
    m_link_isSet = !json[QString("Link")].isNull() && m_link_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_text_color_isValid = ::OpenAPI::fromJsonValue(m_text_color, json[QString("TextColor")]);
    m_text_color_isSet = !json[QString("TextColor")].isNull() && m_text_color_isValid;
}

QString OAIDefaultButtonConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultButtonConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_border_radius_isSet) {
        obj.insert(QString("BorderRadius"), ::OpenAPI::toJsonValue(m_border_radius));
    }
    if (m_button_action.isSet()) {
        obj.insert(QString("ButtonAction"), ::OpenAPI::toJsonValue(m_button_action));
    }
    if (m_link_isSet) {
        obj.insert(QString("Link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_text_color_isSet) {
        obj.insert(QString("TextColor"), ::OpenAPI::toJsonValue(m_text_color));
    }
    return obj;
}

QString OAIDefaultButtonConfiguration::getBackgroundColor() const {
    return m_background_color;
}
void OAIDefaultButtonConfiguration::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIDefaultButtonConfiguration::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIDefaultButtonConfiguration::is_background_color_Valid() const{
    return m_background_color_isValid;
}

qint32 OAIDefaultButtonConfiguration::getBorderRadius() const {
    return m_border_radius;
}
void OAIDefaultButtonConfiguration::setBorderRadius(const qint32 &border_radius) {
    m_border_radius = border_radius;
    m_border_radius_isSet = true;
}

bool OAIDefaultButtonConfiguration::is_border_radius_Set() const{
    return m_border_radius_isSet;
}

bool OAIDefaultButtonConfiguration::is_border_radius_Valid() const{
    return m_border_radius_isValid;
}

OAIButtonAction OAIDefaultButtonConfiguration::getButtonAction() const {
    return m_button_action;
}
void OAIDefaultButtonConfiguration::setButtonAction(const OAIButtonAction &button_action) {
    m_button_action = button_action;
    m_button_action_isSet = true;
}

bool OAIDefaultButtonConfiguration::is_button_action_Set() const{
    return m_button_action_isSet;
}

bool OAIDefaultButtonConfiguration::is_button_action_Valid() const{
    return m_button_action_isValid;
}

QString OAIDefaultButtonConfiguration::getLink() const {
    return m_link;
}
void OAIDefaultButtonConfiguration::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIDefaultButtonConfiguration::is_link_Set() const{
    return m_link_isSet;
}

bool OAIDefaultButtonConfiguration::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIDefaultButtonConfiguration::getText() const {
    return m_text;
}
void OAIDefaultButtonConfiguration::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDefaultButtonConfiguration::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDefaultButtonConfiguration::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIDefaultButtonConfiguration::getTextColor() const {
    return m_text_color;
}
void OAIDefaultButtonConfiguration::setTextColor(const QString &text_color) {
    m_text_color = text_color;
    m_text_color_isSet = true;
}

bool OAIDefaultButtonConfiguration::is_text_color_Set() const{
    return m_text_color_isSet;
}

bool OAIDefaultButtonConfiguration::is_text_color_Valid() const{
    return m_text_color_isValid;
}

bool OAIDefaultButtonConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_border_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_button_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultButtonConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_button_action_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
