/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInAppMessageCampaign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInAppMessageCampaign::OAIInAppMessageCampaign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInAppMessageCampaign::OAIInAppMessageCampaign() {
    this->initializeModel();
}

OAIInAppMessageCampaign::~OAIInAppMessageCampaign() {}

void OAIInAppMessageCampaign::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_daily_cap_isSet = false;
    m_daily_cap_isValid = false;

    m_in_app_message_isSet = false;
    m_in_app_message_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_session_cap_isSet = false;
    m_session_cap_isValid = false;

    m_total_cap_isSet = false;
    m_total_cap_isValid = false;

    m_treatment_id_isSet = false;
    m_treatment_id_isValid = false;
}

void OAIInAppMessageCampaign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInAppMessageCampaign::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("CampaignId")]);
    m_campaign_id_isSet = !json[QString("CampaignId")].isNull() && m_campaign_id_isValid;

    m_daily_cap_isValid = ::OpenAPI::fromJsonValue(m_daily_cap, json[QString("DailyCap")]);
    m_daily_cap_isSet = !json[QString("DailyCap")].isNull() && m_daily_cap_isValid;

    m_in_app_message_isValid = ::OpenAPI::fromJsonValue(m_in_app_message, json[QString("InAppMessage")]);
    m_in_app_message_isSet = !json[QString("InAppMessage")].isNull() && m_in_app_message_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_session_cap_isValid = ::OpenAPI::fromJsonValue(m_session_cap, json[QString("SessionCap")]);
    m_session_cap_isSet = !json[QString("SessionCap")].isNull() && m_session_cap_isValid;

    m_total_cap_isValid = ::OpenAPI::fromJsonValue(m_total_cap, json[QString("TotalCap")]);
    m_total_cap_isSet = !json[QString("TotalCap")].isNull() && m_total_cap_isValid;

    m_treatment_id_isValid = ::OpenAPI::fromJsonValue(m_treatment_id, json[QString("TreatmentId")]);
    m_treatment_id_isSet = !json[QString("TreatmentId")].isNull() && m_treatment_id_isValid;
}

QString OAIInAppMessageCampaign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInAppMessageCampaign::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("CampaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_daily_cap_isSet) {
        obj.insert(QString("DailyCap"), ::OpenAPI::toJsonValue(m_daily_cap));
    }
    if (m_in_app_message.isSet()) {
        obj.insert(QString("InAppMessage"), ::OpenAPI::toJsonValue(m_in_app_message));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_session_cap_isSet) {
        obj.insert(QString("SessionCap"), ::OpenAPI::toJsonValue(m_session_cap));
    }
    if (m_total_cap_isSet) {
        obj.insert(QString("TotalCap"), ::OpenAPI::toJsonValue(m_total_cap));
    }
    if (m_treatment_id_isSet) {
        obj.insert(QString("TreatmentId"), ::OpenAPI::toJsonValue(m_treatment_id));
    }
    return obj;
}

QString OAIInAppMessageCampaign::getCampaignId() const {
    return m_campaign_id;
}
void OAIInAppMessageCampaign::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIInAppMessageCampaign::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIInAppMessageCampaign::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

qint32 OAIInAppMessageCampaign::getDailyCap() const {
    return m_daily_cap;
}
void OAIInAppMessageCampaign::setDailyCap(const qint32 &daily_cap) {
    m_daily_cap = daily_cap;
    m_daily_cap_isSet = true;
}

bool OAIInAppMessageCampaign::is_daily_cap_Set() const{
    return m_daily_cap_isSet;
}

bool OAIInAppMessageCampaign::is_daily_cap_Valid() const{
    return m_daily_cap_isValid;
}

OAIInAppMessageCampaign_InAppMessage OAIInAppMessageCampaign::getInAppMessage() const {
    return m_in_app_message;
}
void OAIInAppMessageCampaign::setInAppMessage(const OAIInAppMessageCampaign_InAppMessage &in_app_message) {
    m_in_app_message = in_app_message;
    m_in_app_message_isSet = true;
}

bool OAIInAppMessageCampaign::is_in_app_message_Set() const{
    return m_in_app_message_isSet;
}

bool OAIInAppMessageCampaign::is_in_app_message_Valid() const{
    return m_in_app_message_isValid;
}

qint32 OAIInAppMessageCampaign::getPriority() const {
    return m_priority;
}
void OAIInAppMessageCampaign::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIInAppMessageCampaign::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIInAppMessageCampaign::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIInAppMessageCampaign_Schedule OAIInAppMessageCampaign::getSchedule() const {
    return m_schedule;
}
void OAIInAppMessageCampaign::setSchedule(const OAIInAppMessageCampaign_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIInAppMessageCampaign::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIInAppMessageCampaign::is_schedule_Valid() const{
    return m_schedule_isValid;
}

qint32 OAIInAppMessageCampaign::getSessionCap() const {
    return m_session_cap;
}
void OAIInAppMessageCampaign::setSessionCap(const qint32 &session_cap) {
    m_session_cap = session_cap;
    m_session_cap_isSet = true;
}

bool OAIInAppMessageCampaign::is_session_cap_Set() const{
    return m_session_cap_isSet;
}

bool OAIInAppMessageCampaign::is_session_cap_Valid() const{
    return m_session_cap_isValid;
}

qint32 OAIInAppMessageCampaign::getTotalCap() const {
    return m_total_cap;
}
void OAIInAppMessageCampaign::setTotalCap(const qint32 &total_cap) {
    m_total_cap = total_cap;
    m_total_cap_isSet = true;
}

bool OAIInAppMessageCampaign::is_total_cap_Set() const{
    return m_total_cap_isSet;
}

bool OAIInAppMessageCampaign::is_total_cap_Valid() const{
    return m_total_cap_isValid;
}

QString OAIInAppMessageCampaign::getTreatmentId() const {
    return m_treatment_id;
}
void OAIInAppMessageCampaign::setTreatmentId(const QString &treatment_id) {
    m_treatment_id = treatment_id;
    m_treatment_id_isSet = true;
}

bool OAIInAppMessageCampaign::is_treatment_id_Set() const{
    return m_treatment_id_isSet;
}

bool OAIInAppMessageCampaign::is_treatment_id_Valid() const{
    return m_treatment_id_isValid;
}

bool OAIInAppMessageCampaign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_daily_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_app_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInAppMessageCampaign::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
