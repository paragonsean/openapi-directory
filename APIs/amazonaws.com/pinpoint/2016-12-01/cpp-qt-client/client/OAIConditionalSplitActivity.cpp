/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionalSplitActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionalSplitActivity::OAIConditionalSplitActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionalSplitActivity::OAIConditionalSplitActivity() {
    this->initializeModel();
}

OAIConditionalSplitActivity::~OAIConditionalSplitActivity() {}

void OAIConditionalSplitActivity::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_evaluation_wait_time_isSet = false;
    m_evaluation_wait_time_isValid = false;

    m_false_activity_isSet = false;
    m_false_activity_isValid = false;

    m_true_activity_isSet = false;
    m_true_activity_isValid = false;
}

void OAIConditionalSplitActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionalSplitActivity::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("Condition")]);
    m_condition_isSet = !json[QString("Condition")].isNull() && m_condition_isValid;

    m_evaluation_wait_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_wait_time, json[QString("EvaluationWaitTime")]);
    m_evaluation_wait_time_isSet = !json[QString("EvaluationWaitTime")].isNull() && m_evaluation_wait_time_isValid;

    m_false_activity_isValid = ::OpenAPI::fromJsonValue(m_false_activity, json[QString("FalseActivity")]);
    m_false_activity_isSet = !json[QString("FalseActivity")].isNull() && m_false_activity_isValid;

    m_true_activity_isValid = ::OpenAPI::fromJsonValue(m_true_activity, json[QString("TrueActivity")]);
    m_true_activity_isSet = !json[QString("TrueActivity")].isNull() && m_true_activity_isValid;
}

QString OAIConditionalSplitActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionalSplitActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("Condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_evaluation_wait_time.isSet()) {
        obj.insert(QString("EvaluationWaitTime"), ::OpenAPI::toJsonValue(m_evaluation_wait_time));
    }
    if (m_false_activity_isSet) {
        obj.insert(QString("FalseActivity"), ::OpenAPI::toJsonValue(m_false_activity));
    }
    if (m_true_activity_isSet) {
        obj.insert(QString("TrueActivity"), ::OpenAPI::toJsonValue(m_true_activity));
    }
    return obj;
}

OAIConditionalSplitActivity_Condition OAIConditionalSplitActivity::getCondition() const {
    return m_condition;
}
void OAIConditionalSplitActivity::setCondition(const OAIConditionalSplitActivity_Condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIConditionalSplitActivity::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIConditionalSplitActivity::is_condition_Valid() const{
    return m_condition_isValid;
}

OAIConditionalSplitActivity_EvaluationWaitTime OAIConditionalSplitActivity::getEvaluationWaitTime() const {
    return m_evaluation_wait_time;
}
void OAIConditionalSplitActivity::setEvaluationWaitTime(const OAIConditionalSplitActivity_EvaluationWaitTime &evaluation_wait_time) {
    m_evaluation_wait_time = evaluation_wait_time;
    m_evaluation_wait_time_isSet = true;
}

bool OAIConditionalSplitActivity::is_evaluation_wait_time_Set() const{
    return m_evaluation_wait_time_isSet;
}

bool OAIConditionalSplitActivity::is_evaluation_wait_time_Valid() const{
    return m_evaluation_wait_time_isValid;
}

QString OAIConditionalSplitActivity::getFalseActivity() const {
    return m_false_activity;
}
void OAIConditionalSplitActivity::setFalseActivity(const QString &false_activity) {
    m_false_activity = false_activity;
    m_false_activity_isSet = true;
}

bool OAIConditionalSplitActivity::is_false_activity_Set() const{
    return m_false_activity_isSet;
}

bool OAIConditionalSplitActivity::is_false_activity_Valid() const{
    return m_false_activity_isValid;
}

QString OAIConditionalSplitActivity::getTrueActivity() const {
    return m_true_activity;
}
void OAIConditionalSplitActivity::setTrueActivity(const QString &true_activity) {
    m_true_activity = true_activity;
    m_true_activity_isSet = true;
}

bool OAIConditionalSplitActivity::is_true_activity_Set() const{
    return m_true_activity_isSet;
}

bool OAIConditionalSplitActivity::is_true_activity_Valid() const{
    return m_true_activity_isValid;
}

bool OAIConditionalSplitActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_wait_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_activity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionalSplitActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
