/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPNSChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPNSChannelResponse::OAIAPNSChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPNSChannelResponse::OAIAPNSChannelResponse() {
    this->initializeModel();
}

OAIAPNSChannelResponse::~OAIAPNSChannelResponse() {}

void OAIAPNSChannelResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_default_authentication_method_isSet = false;
    m_default_authentication_method_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_has_credential_isSet = false;
    m_has_credential_isValid = false;

    m_has_token_key_isSet = false;
    m_has_token_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAPNSChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPNSChannelResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_default_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_default_authentication_method, json[QString("DefaultAuthenticationMethod")]);
    m_default_authentication_method_isSet = !json[QString("DefaultAuthenticationMethod")].isNull() && m_default_authentication_method_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_has_credential_isValid = ::OpenAPI::fromJsonValue(m_has_credential, json[QString("HasCredential")]);
    m_has_credential_isSet = !json[QString("HasCredential")].isNull() && m_has_credential_isValid;

    m_has_token_key_isValid = ::OpenAPI::fromJsonValue(m_has_token_key, json[QString("HasTokenKey")]);
    m_has_token_key_isSet = !json[QString("HasTokenKey")].isNull() && m_has_token_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("IsArchived")]);
    m_is_archived_isSet = !json[QString("IsArchived")].isNull() && m_is_archived_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIAPNSChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPNSChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_default_authentication_method_isSet) {
        obj.insert(QString("DefaultAuthenticationMethod"), ::OpenAPI::toJsonValue(m_default_authentication_method));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_has_credential_isSet) {
        obj.insert(QString("HasCredential"), ::OpenAPI::toJsonValue(m_has_credential));
    }
    if (m_has_token_key_isSet) {
        obj.insert(QString("HasTokenKey"), ::OpenAPI::toJsonValue(m_has_token_key));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("IsArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_platform_isSet) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIAPNSChannelResponse::getApplicationId() const {
    return m_application_id;
}
void OAIAPNSChannelResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIAPNSChannelResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIAPNSChannelResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIAPNSChannelResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIAPNSChannelResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAPNSChannelResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAPNSChannelResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIAPNSChannelResponse::getDefaultAuthenticationMethod() const {
    return m_default_authentication_method;
}
void OAIAPNSChannelResponse::setDefaultAuthenticationMethod(const QString &default_authentication_method) {
    m_default_authentication_method = default_authentication_method;
    m_default_authentication_method_isSet = true;
}

bool OAIAPNSChannelResponse::is_default_authentication_method_Set() const{
    return m_default_authentication_method_isSet;
}

bool OAIAPNSChannelResponse::is_default_authentication_method_Valid() const{
    return m_default_authentication_method_isValid;
}

bool OAIAPNSChannelResponse::getEnabled() const {
    return m_enabled;
}
void OAIAPNSChannelResponse::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAPNSChannelResponse::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAPNSChannelResponse::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIAPNSChannelResponse::getHasCredential() const {
    return m_has_credential;
}
void OAIAPNSChannelResponse::setHasCredential(const bool &has_credential) {
    m_has_credential = has_credential;
    m_has_credential_isSet = true;
}

bool OAIAPNSChannelResponse::is_has_credential_Set() const{
    return m_has_credential_isSet;
}

bool OAIAPNSChannelResponse::is_has_credential_Valid() const{
    return m_has_credential_isValid;
}

bool OAIAPNSChannelResponse::getHasTokenKey() const {
    return m_has_token_key;
}
void OAIAPNSChannelResponse::setHasTokenKey(const bool &has_token_key) {
    m_has_token_key = has_token_key;
    m_has_token_key_isSet = true;
}

bool OAIAPNSChannelResponse::is_has_token_key_Set() const{
    return m_has_token_key_isSet;
}

bool OAIAPNSChannelResponse::is_has_token_key_Valid() const{
    return m_has_token_key_isValid;
}

QString OAIAPNSChannelResponse::getId() const {
    return m_id;
}
void OAIAPNSChannelResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAPNSChannelResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAPNSChannelResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAPNSChannelResponse::getIsArchived() const {
    return m_is_archived;
}
void OAIAPNSChannelResponse::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIAPNSChannelResponse::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIAPNSChannelResponse::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

QString OAIAPNSChannelResponse::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIAPNSChannelResponse::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIAPNSChannelResponse::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIAPNSChannelResponse::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QString OAIAPNSChannelResponse::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIAPNSChannelResponse::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIAPNSChannelResponse::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIAPNSChannelResponse::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIAPNSChannelResponse::getPlatform() const {
    return m_platform;
}
void OAIAPNSChannelResponse::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAPNSChannelResponse::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAPNSChannelResponse::is_platform_Valid() const{
    return m_platform_isValid;
}

qint32 OAIAPNSChannelResponse::getVersion() const {
    return m_version;
}
void OAIAPNSChannelResponse::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAPNSChannelResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAPNSChannelResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAPNSChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_token_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPNSChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_platform_isValid && true;
}

} // namespace OpenAPI
