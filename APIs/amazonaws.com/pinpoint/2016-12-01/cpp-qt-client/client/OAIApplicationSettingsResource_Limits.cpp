/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationSettingsResource_Limits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationSettingsResource_Limits::OAIApplicationSettingsResource_Limits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationSettingsResource_Limits::OAIApplicationSettingsResource_Limits() {
    this->initializeModel();
}

OAIApplicationSettingsResource_Limits::~OAIApplicationSettingsResource_Limits() {}

void OAIApplicationSettingsResource_Limits::initializeModel() {

    m_daily_isSet = false;
    m_daily_isValid = false;

    m_maximum_duration_isSet = false;
    m_maximum_duration_isValid = false;

    m_messages_per_second_isSet = false;
    m_messages_per_second_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;
}

void OAIApplicationSettingsResource_Limits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationSettingsResource_Limits::fromJsonObject(QJsonObject json) {

    m_daily_isValid = ::OpenAPI::fromJsonValue(m_daily, json[QString("Daily")]);
    m_daily_isSet = !json[QString("Daily")].isNull() && m_daily_isValid;

    m_maximum_duration_isValid = ::OpenAPI::fromJsonValue(m_maximum_duration, json[QString("MaximumDuration")]);
    m_maximum_duration_isSet = !json[QString("MaximumDuration")].isNull() && m_maximum_duration_isValid;

    m_messages_per_second_isValid = ::OpenAPI::fromJsonValue(m_messages_per_second, json[QString("MessagesPerSecond")]);
    m_messages_per_second_isSet = !json[QString("MessagesPerSecond")].isNull() && m_messages_per_second_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("Session")]);
    m_session_isSet = !json[QString("Session")].isNull() && m_session_isValid;
}

QString OAIApplicationSettingsResource_Limits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationSettingsResource_Limits::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_isSet) {
        obj.insert(QString("Daily"), ::OpenAPI::toJsonValue(m_daily));
    }
    if (m_maximum_duration_isSet) {
        obj.insert(QString("MaximumDuration"), ::OpenAPI::toJsonValue(m_maximum_duration));
    }
    if (m_messages_per_second_isSet) {
        obj.insert(QString("MessagesPerSecond"), ::OpenAPI::toJsonValue(m_messages_per_second));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_session_isSet) {
        obj.insert(QString("Session"), ::OpenAPI::toJsonValue(m_session));
    }
    return obj;
}

qint32 OAIApplicationSettingsResource_Limits::getDaily() const {
    return m_daily;
}
void OAIApplicationSettingsResource_Limits::setDaily(const qint32 &daily) {
    m_daily = daily;
    m_daily_isSet = true;
}

bool OAIApplicationSettingsResource_Limits::is_daily_Set() const{
    return m_daily_isSet;
}

bool OAIApplicationSettingsResource_Limits::is_daily_Valid() const{
    return m_daily_isValid;
}

qint32 OAIApplicationSettingsResource_Limits::getMaximumDuration() const {
    return m_maximum_duration;
}
void OAIApplicationSettingsResource_Limits::setMaximumDuration(const qint32 &maximum_duration) {
    m_maximum_duration = maximum_duration;
    m_maximum_duration_isSet = true;
}

bool OAIApplicationSettingsResource_Limits::is_maximum_duration_Set() const{
    return m_maximum_duration_isSet;
}

bool OAIApplicationSettingsResource_Limits::is_maximum_duration_Valid() const{
    return m_maximum_duration_isValid;
}

qint32 OAIApplicationSettingsResource_Limits::getMessagesPerSecond() const {
    return m_messages_per_second;
}
void OAIApplicationSettingsResource_Limits::setMessagesPerSecond(const qint32 &messages_per_second) {
    m_messages_per_second = messages_per_second;
    m_messages_per_second_isSet = true;
}

bool OAIApplicationSettingsResource_Limits::is_messages_per_second_Set() const{
    return m_messages_per_second_isSet;
}

bool OAIApplicationSettingsResource_Limits::is_messages_per_second_Valid() const{
    return m_messages_per_second_isValid;
}

qint32 OAIApplicationSettingsResource_Limits::getTotal() const {
    return m_total;
}
void OAIApplicationSettingsResource_Limits::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIApplicationSettingsResource_Limits::is_total_Set() const{
    return m_total_isSet;
}

bool OAIApplicationSettingsResource_Limits::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIApplicationSettingsResource_Limits::getSession() const {
    return m_session;
}
void OAIApplicationSettingsResource_Limits::setSession(const qint32 &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIApplicationSettingsResource_Limits::is_session_Set() const{
    return m_session_isSet;
}

bool OAIApplicationSettingsResource_Limits::is_session_Valid() const{
    return m_session_isValid;
}

bool OAIApplicationSettingsResource_Limits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationSettingsResource_Limits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
