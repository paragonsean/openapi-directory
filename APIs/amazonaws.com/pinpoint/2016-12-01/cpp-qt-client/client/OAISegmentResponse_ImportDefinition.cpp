/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentResponse_ImportDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentResponse_ImportDefinition::OAISegmentResponse_ImportDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentResponse_ImportDefinition::OAISegmentResponse_ImportDefinition() {
    this->initializeModel();
}

OAISegmentResponse_ImportDefinition::~OAISegmentResponse_ImportDefinition() {}

void OAISegmentResponse_ImportDefinition::initializeModel() {

    m_channel_counts_isSet = false;
    m_channel_counts_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_s3_url_isSet = false;
    m_s3_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAISegmentResponse_ImportDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentResponse_ImportDefinition::fromJsonObject(QJsonObject json) {

    m_channel_counts_isValid = ::OpenAPI::fromJsonValue(m_channel_counts, json[QString("ChannelCounts")]);
    m_channel_counts_isSet = !json[QString("ChannelCounts")].isNull() && m_channel_counts_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_s3_url_isValid = ::OpenAPI::fromJsonValue(m_s3_url, json[QString("S3Url")]);
    m_s3_url_isSet = !json[QString("S3Url")].isNull() && m_s3_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("Size")]);
    m_size_isSet = !json[QString("Size")].isNull() && m_size_isValid;
}

QString OAISegmentResponse_ImportDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentResponse_ImportDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_counts.isSet()) {
        obj.insert(QString("ChannelCounts"), ::OpenAPI::toJsonValue(m_channel_counts));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_s3_url_isSet) {
        obj.insert(QString("S3Url"), ::OpenAPI::toJsonValue(m_s3_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("Size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QMap OAISegmentResponse_ImportDefinition::getChannelCounts() const {
    return m_channel_counts;
}
void OAISegmentResponse_ImportDefinition::setChannelCounts(const QMap &channel_counts) {
    m_channel_counts = channel_counts;
    m_channel_counts_isSet = true;
}

bool OAISegmentResponse_ImportDefinition::is_channel_counts_Set() const{
    return m_channel_counts_isSet;
}

bool OAISegmentResponse_ImportDefinition::is_channel_counts_Valid() const{
    return m_channel_counts_isValid;
}

QString OAISegmentResponse_ImportDefinition::getExternalId() const {
    return m_external_id;
}
void OAISegmentResponse_ImportDefinition::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAISegmentResponse_ImportDefinition::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAISegmentResponse_ImportDefinition::is_external_id_Valid() const{
    return m_external_id_isValid;
}

OAIFormat OAISegmentResponse_ImportDefinition::getFormat() const {
    return m_format;
}
void OAISegmentResponse_ImportDefinition::setFormat(const OAIFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAISegmentResponse_ImportDefinition::is_format_Set() const{
    return m_format_isSet;
}

bool OAISegmentResponse_ImportDefinition::is_format_Valid() const{
    return m_format_isValid;
}

QString OAISegmentResponse_ImportDefinition::getRoleArn() const {
    return m_role_arn;
}
void OAISegmentResponse_ImportDefinition::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAISegmentResponse_ImportDefinition::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAISegmentResponse_ImportDefinition::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAISegmentResponse_ImportDefinition::getS3Url() const {
    return m_s3_url;
}
void OAISegmentResponse_ImportDefinition::setS3Url(const QString &s3_url) {
    m_s3_url = s3_url;
    m_s3_url_isSet = true;
}

bool OAISegmentResponse_ImportDefinition::is_s3_url_Set() const{
    return m_s3_url_isSet;
}

bool OAISegmentResponse_ImportDefinition::is_s3_url_Valid() const{
    return m_s3_url_isValid;
}

qint32 OAISegmentResponse_ImportDefinition::getSize() const {
    return m_size;
}
void OAISegmentResponse_ImportDefinition::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISegmentResponse_ImportDefinition::is_size_Set() const{
    return m_size_isSet;
}

bool OAISegmentResponse_ImportDefinition::is_size_Valid() const{
    return m_size_isValid;
}

bool OAISegmentResponse_ImportDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentResponse_ImportDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_external_id_isValid && m_format_isValid && m_role_arn_isValid && m_s3_url_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
