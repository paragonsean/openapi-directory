/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInAppCampaignSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInAppCampaignSchedule::OAIInAppCampaignSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInAppCampaignSchedule::OAIInAppCampaignSchedule() {
    this->initializeModel();
}

OAIInAppCampaignSchedule::~OAIInAppCampaignSchedule() {}

void OAIInAppCampaignSchedule::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_event_filter_isSet = false;
    m_event_filter_isValid = false;

    m_quiet_time_isSet = false;
    m_quiet_time_isValid = false;
}

void OAIInAppCampaignSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInAppCampaignSchedule::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_event_filter_isValid = ::OpenAPI::fromJsonValue(m_event_filter, json[QString("EventFilter")]);
    m_event_filter_isSet = !json[QString("EventFilter")].isNull() && m_event_filter_isValid;

    m_quiet_time_isValid = ::OpenAPI::fromJsonValue(m_quiet_time, json[QString("QuietTime")]);
    m_quiet_time_isSet = !json[QString("QuietTime")].isNull() && m_quiet_time_isValid;
}

QString OAIInAppCampaignSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInAppCampaignSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_event_filter.isSet()) {
        obj.insert(QString("EventFilter"), ::OpenAPI::toJsonValue(m_event_filter));
    }
    if (m_quiet_time.isSet()) {
        obj.insert(QString("QuietTime"), ::OpenAPI::toJsonValue(m_quiet_time));
    }
    return obj;
}

QString OAIInAppCampaignSchedule::getEndDate() const {
    return m_end_date;
}
void OAIInAppCampaignSchedule::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIInAppCampaignSchedule::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIInAppCampaignSchedule::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIInAppCampaignSchedule_EventFilter OAIInAppCampaignSchedule::getEventFilter() const {
    return m_event_filter;
}
void OAIInAppCampaignSchedule::setEventFilter(const OAIInAppCampaignSchedule_EventFilter &event_filter) {
    m_event_filter = event_filter;
    m_event_filter_isSet = true;
}

bool OAIInAppCampaignSchedule::is_event_filter_Set() const{
    return m_event_filter_isSet;
}

bool OAIInAppCampaignSchedule::is_event_filter_Valid() const{
    return m_event_filter_isValid;
}

OAIInAppCampaignSchedule_QuietTime OAIInAppCampaignSchedule::getQuietTime() const {
    return m_quiet_time;
}
void OAIInAppCampaignSchedule::setQuietTime(const OAIInAppCampaignSchedule_QuietTime &quiet_time) {
    m_quiet_time = quiet_time;
    m_quiet_time_isSet = true;
}

bool OAIInAppCampaignSchedule::is_quiet_time_Set() const{
    return m_quiet_time_isSet;
}

bool OAIInAppCampaignSchedule::is_quiet_time_Valid() const{
    return m_quiet_time_isValid;
}

bool OAIInAppCampaignSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiet_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInAppCampaignSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
