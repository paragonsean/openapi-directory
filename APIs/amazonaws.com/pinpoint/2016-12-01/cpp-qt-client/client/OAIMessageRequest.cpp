/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageRequest::OAIMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageRequest::OAIMessageRequest() {
    this->initializeModel();
}

OAIMessageRequest::~OAIMessageRequest() {}

void OAIMessageRequest::initializeModel() {

    m_addresses_isSet = false;
    m_addresses_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_message_configuration_isSet = false;
    m_message_configuration_isValid = false;

    m_template_configuration_isSet = false;
    m_template_configuration_isValid = false;

    m_trace_id_isSet = false;
    m_trace_id_isValid = false;
}

void OAIMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageRequest::fromJsonObject(QJsonObject json) {

    m_addresses_isValid = ::OpenAPI::fromJsonValue(m_addresses, json[QString("Addresses")]);
    m_addresses_isSet = !json[QString("Addresses")].isNull() && m_addresses_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("Context")]);
    m_context_isSet = !json[QString("Context")].isNull() && m_context_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("Endpoints")]);
    m_endpoints_isSet = !json[QString("Endpoints")].isNull() && m_endpoints_isValid;

    m_message_configuration_isValid = ::OpenAPI::fromJsonValue(m_message_configuration, json[QString("MessageConfiguration")]);
    m_message_configuration_isSet = !json[QString("MessageConfiguration")].isNull() && m_message_configuration_isValid;

    m_template_configuration_isValid = ::OpenAPI::fromJsonValue(m_template_configuration, json[QString("TemplateConfiguration")]);
    m_template_configuration_isSet = !json[QString("TemplateConfiguration")].isNull() && m_template_configuration_isValid;

    m_trace_id_isValid = ::OpenAPI::fromJsonValue(m_trace_id, json[QString("TraceId")]);
    m_trace_id_isSet = !json[QString("TraceId")].isNull() && m_trace_id_isValid;
}

QString OAIMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_addresses.isSet()) {
        obj.insert(QString("Addresses"), ::OpenAPI::toJsonValue(m_addresses));
    }
    if (m_context.isSet()) {
        obj.insert(QString("Context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_endpoints.isSet()) {
        obj.insert(QString("Endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_message_configuration.isSet()) {
        obj.insert(QString("MessageConfiguration"), ::OpenAPI::toJsonValue(m_message_configuration));
    }
    if (m_template_configuration.isSet()) {
        obj.insert(QString("TemplateConfiguration"), ::OpenAPI::toJsonValue(m_template_configuration));
    }
    if (m_trace_id_isSet) {
        obj.insert(QString("TraceId"), ::OpenAPI::toJsonValue(m_trace_id));
    }
    return obj;
}

QMap OAIMessageRequest::getAddresses() const {
    return m_addresses;
}
void OAIMessageRequest::setAddresses(const QMap &addresses) {
    m_addresses = addresses;
    m_addresses_isSet = true;
}

bool OAIMessageRequest::is_addresses_Set() const{
    return m_addresses_isSet;
}

bool OAIMessageRequest::is_addresses_Valid() const{
    return m_addresses_isValid;
}

QMap OAIMessageRequest::getContext() const {
    return m_context;
}
void OAIMessageRequest::setContext(const QMap &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIMessageRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIMessageRequest::is_context_Valid() const{
    return m_context_isValid;
}

QMap OAIMessageRequest::getEndpoints() const {
    return m_endpoints;
}
void OAIMessageRequest::setEndpoints(const QMap &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIMessageRequest::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIMessageRequest::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

OAISendMessages_request_MessageRequest_MessageConfiguration OAIMessageRequest::getMessageConfiguration() const {
    return m_message_configuration;
}
void OAIMessageRequest::setMessageConfiguration(const OAISendMessages_request_MessageRequest_MessageConfiguration &message_configuration) {
    m_message_configuration = message_configuration;
    m_message_configuration_isSet = true;
}

bool OAIMessageRequest::is_message_configuration_Set() const{
    return m_message_configuration_isSet;
}

bool OAIMessageRequest::is_message_configuration_Valid() const{
    return m_message_configuration_isValid;
}

OAISendMessages_request_MessageRequest_TemplateConfiguration OAIMessageRequest::getTemplateConfiguration() const {
    return m_template_configuration;
}
void OAIMessageRequest::setTemplateConfiguration(const OAISendMessages_request_MessageRequest_TemplateConfiguration &template_configuration) {
    m_template_configuration = template_configuration;
    m_template_configuration_isSet = true;
}

bool OAIMessageRequest::is_template_configuration_Set() const{
    return m_template_configuration_isSet;
}

bool OAIMessageRequest::is_template_configuration_Valid() const{
    return m_template_configuration_isValid;
}

QString OAIMessageRequest::getTraceId() const {
    return m_trace_id;
}
void OAIMessageRequest::setTraceId(const QString &trace_id) {
    m_trace_id = trace_id;
    m_trace_id_isSet = true;
}

bool OAIMessageRequest::is_trace_id_Set() const{
    return m_trace_id_isSet;
}

bool OAIMessageRequest::is_trace_id_Valid() const{
    return m_trace_id_isValid;
}

bool OAIMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_addresses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_configuration_isValid && true;
}

} // namespace OpenAPI
