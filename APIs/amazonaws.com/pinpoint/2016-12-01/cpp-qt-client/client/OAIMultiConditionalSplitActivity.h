/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMultiConditionalSplitActivity.h
 *
 * &lt;p&gt;Specifies the settings for a multivariate split activity in a journey. This type of activity sends participants down one of as many as five paths (including a default &lt;i&gt;Else&lt;/i&gt; path) in a journey, based on conditions that you specify.&lt;/p&gt; &lt;note&gt;&lt;p&gt;To create multivariate split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html\&quot;&gt;Integrating Amazon Pinpoint with your application&lt;/a&gt; in the &lt;i&gt;Amazon Pinpoint Developer Guide&lt;/i&gt;.&lt;/p&gt;&lt;/note&gt;
 */

#ifndef OAIMultiConditionalSplitActivity_H
#define OAIMultiConditionalSplitActivity_H

#include <QJsonObject>

#include "OAIMultiConditionalSplitActivity_EvaluationWaitTime.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMultiConditionalSplitActivity_EvaluationWaitTime;

class OAIMultiConditionalSplitActivity : public OAIObject {
public:
    OAIMultiConditionalSplitActivity();
    OAIMultiConditionalSplitActivity(QString json);
    ~OAIMultiConditionalSplitActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getBranches() const;
    void setBranches(const QList &branches);
    bool is_branches_Set() const;
    bool is_branches_Valid() const;

    QString getDefaultActivity() const;
    void setDefaultActivity(const QString &default_activity);
    bool is_default_activity_Set() const;
    bool is_default_activity_Valid() const;

    OAIMultiConditionalSplitActivity_EvaluationWaitTime getEvaluationWaitTime() const;
    void setEvaluationWaitTime(const OAIMultiConditionalSplitActivity_EvaluationWaitTime &evaluation_wait_time);
    bool is_evaluation_wait_time_Set() const;
    bool is_evaluation_wait_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_branches;
    bool m_branches_isSet;
    bool m_branches_isValid;

    QString m_default_activity;
    bool m_default_activity_isSet;
    bool m_default_activity_isValid;

    OAIMultiConditionalSplitActivity_EvaluationWaitTime m_evaluation_wait_time;
    bool m_evaluation_wait_time_isSet;
    bool m_evaluation_wait_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMultiConditionalSplitActivity)

#endif // OAIMultiConditionalSplitActivity_H
