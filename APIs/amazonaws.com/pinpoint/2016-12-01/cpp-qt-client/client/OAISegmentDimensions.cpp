/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentDimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentDimensions::OAISegmentDimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentDimensions::OAISegmentDimensions() {
    this->initializeModel();
}

OAISegmentDimensions::~OAISegmentDimensions() {}

void OAISegmentDimensions::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_behavior_isSet = false;
    m_behavior_isValid = false;

    m_demographic_isSet = false;
    m_demographic_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_user_attributes_isSet = false;
    m_user_attributes_isValid = false;
}

void OAISegmentDimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentDimensions::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_behavior_isValid = ::OpenAPI::fromJsonValue(m_behavior, json[QString("Behavior")]);
    m_behavior_isSet = !json[QString("Behavior")].isNull() && m_behavior_isValid;

    m_demographic_isValid = ::OpenAPI::fromJsonValue(m_demographic, json[QString("Demographic")]);
    m_demographic_isSet = !json[QString("Demographic")].isNull() && m_demographic_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("Location")]);
    m_location_isSet = !json[QString("Location")].isNull() && m_location_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_user_attributes_isValid = ::OpenAPI::fromJsonValue(m_user_attributes, json[QString("UserAttributes")]);
    m_user_attributes_isSet = !json[QString("UserAttributes")].isNull() && m_user_attributes_isValid;
}

QString OAISegmentDimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentDimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_behavior.isSet()) {
        obj.insert(QString("Behavior"), ::OpenAPI::toJsonValue(m_behavior));
    }
    if (m_demographic.isSet()) {
        obj.insert(QString("Demographic"), ::OpenAPI::toJsonValue(m_demographic));
    }
    if (m_location.isSet()) {
        obj.insert(QString("Location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_user_attributes.isSet()) {
        obj.insert(QString("UserAttributes"), ::OpenAPI::toJsonValue(m_user_attributes));
    }
    return obj;
}

QMap OAISegmentDimensions::getAttributes() const {
    return m_attributes;
}
void OAISegmentDimensions::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAISegmentDimensions::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAISegmentDimensions::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAISegmentDimensions_Behavior OAISegmentDimensions::getBehavior() const {
    return m_behavior;
}
void OAISegmentDimensions::setBehavior(const OAISegmentDimensions_Behavior &behavior) {
    m_behavior = behavior;
    m_behavior_isSet = true;
}

bool OAISegmentDimensions::is_behavior_Set() const{
    return m_behavior_isSet;
}

bool OAISegmentDimensions::is_behavior_Valid() const{
    return m_behavior_isValid;
}

OAISegmentDimensions_Demographic OAISegmentDimensions::getDemographic() const {
    return m_demographic;
}
void OAISegmentDimensions::setDemographic(const OAISegmentDimensions_Demographic &demographic) {
    m_demographic = demographic;
    m_demographic_isSet = true;
}

bool OAISegmentDimensions::is_demographic_Set() const{
    return m_demographic_isSet;
}

bool OAISegmentDimensions::is_demographic_Valid() const{
    return m_demographic_isValid;
}

OAISegmentDimensions_Location OAISegmentDimensions::getLocation() const {
    return m_location;
}
void OAISegmentDimensions::setLocation(const OAISegmentDimensions_Location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISegmentDimensions::is_location_Set() const{
    return m_location_isSet;
}

bool OAISegmentDimensions::is_location_Valid() const{
    return m_location_isValid;
}

QMap OAISegmentDimensions::getMetrics() const {
    return m_metrics;
}
void OAISegmentDimensions::setMetrics(const QMap &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAISegmentDimensions::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAISegmentDimensions::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QMap OAISegmentDimensions::getUserAttributes() const {
    return m_user_attributes;
}
void OAISegmentDimensions::setUserAttributes(const QMap &user_attributes) {
    m_user_attributes = user_attributes;
    m_user_attributes_isSet = true;
}

bool OAISegmentDimensions::is_user_attributes_Set() const{
    return m_user_attributes_isSet;
}

bool OAISegmentDimensions::is_user_attributes_Valid() const{
    return m_user_attributes_isValid;
}

bool OAISegmentDimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_demographic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentDimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
