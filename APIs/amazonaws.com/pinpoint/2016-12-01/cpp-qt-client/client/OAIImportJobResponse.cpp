/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportJobResponse::OAIImportJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportJobResponse::OAIImportJobResponse() {
    this->initializeModel();
}

OAIImportJobResponse::~OAIImportJobResponse() {}

void OAIImportJobResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_completed_pieces_isSet = false;
    m_completed_pieces_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_failed_pieces_isSet = false;
    m_failed_pieces_isValid = false;

    m_failures_isSet = false;
    m_failures_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_total_failures_isSet = false;
    m_total_failures_isValid = false;

    m_total_pieces_isSet = false;
    m_total_pieces_isValid = false;

    m_total_processed_isSet = false;
    m_total_processed_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIImportJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportJobResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_completed_pieces_isValid = ::OpenAPI::fromJsonValue(m_completed_pieces, json[QString("CompletedPieces")]);
    m_completed_pieces_isSet = !json[QString("CompletedPieces")].isNull() && m_completed_pieces_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("CompletionDate")]);
    m_completion_date_isSet = !json[QString("CompletionDate")].isNull() && m_completion_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("Definition")]);
    m_definition_isSet = !json[QString("Definition")].isNull() && m_definition_isValid;

    m_failed_pieces_isValid = ::OpenAPI::fromJsonValue(m_failed_pieces, json[QString("FailedPieces")]);
    m_failed_pieces_isSet = !json[QString("FailedPieces")].isNull() && m_failed_pieces_isValid;

    m_failures_isValid = ::OpenAPI::fromJsonValue(m_failures, json[QString("Failures")]);
    m_failures_isSet = !json[QString("Failures")].isNull() && m_failures_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_total_failures_isValid = ::OpenAPI::fromJsonValue(m_total_failures, json[QString("TotalFailures")]);
    m_total_failures_isSet = !json[QString("TotalFailures")].isNull() && m_total_failures_isValid;

    m_total_pieces_isValid = ::OpenAPI::fromJsonValue(m_total_pieces, json[QString("TotalPieces")]);
    m_total_pieces_isSet = !json[QString("TotalPieces")].isNull() && m_total_pieces_isValid;

    m_total_processed_isValid = ::OpenAPI::fromJsonValue(m_total_processed, json[QString("TotalProcessed")]);
    m_total_processed_isSet = !json[QString("TotalProcessed")].isNull() && m_total_processed_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIImportJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_completed_pieces_isSet) {
        obj.insert(QString("CompletedPieces"), ::OpenAPI::toJsonValue(m_completed_pieces));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("CompletionDate"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_definition.isSet()) {
        obj.insert(QString("Definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_failed_pieces_isSet) {
        obj.insert(QString("FailedPieces"), ::OpenAPI::toJsonValue(m_failed_pieces));
    }
    if (m_failures.isSet()) {
        obj.insert(QString("Failures"), ::OpenAPI::toJsonValue(m_failures));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_status.isSet()) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_total_failures_isSet) {
        obj.insert(QString("TotalFailures"), ::OpenAPI::toJsonValue(m_total_failures));
    }
    if (m_total_pieces_isSet) {
        obj.insert(QString("TotalPieces"), ::OpenAPI::toJsonValue(m_total_pieces));
    }
    if (m_total_processed_isSet) {
        obj.insert(QString("TotalProcessed"), ::OpenAPI::toJsonValue(m_total_processed));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIImportJobResponse::getApplicationId() const {
    return m_application_id;
}
void OAIImportJobResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIImportJobResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIImportJobResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

qint32 OAIImportJobResponse::getCompletedPieces() const {
    return m_completed_pieces;
}
void OAIImportJobResponse::setCompletedPieces(const qint32 &completed_pieces) {
    m_completed_pieces = completed_pieces;
    m_completed_pieces_isSet = true;
}

bool OAIImportJobResponse::is_completed_pieces_Set() const{
    return m_completed_pieces_isSet;
}

bool OAIImportJobResponse::is_completed_pieces_Valid() const{
    return m_completed_pieces_isValid;
}

QString OAIImportJobResponse::getCompletionDate() const {
    return m_completion_date;
}
void OAIImportJobResponse::setCompletionDate(const QString &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIImportJobResponse::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIImportJobResponse::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

QString OAIImportJobResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIImportJobResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIImportJobResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIImportJobResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIImportJobResponse_Definition OAIImportJobResponse::getDefinition() const {
    return m_definition;
}
void OAIImportJobResponse::setDefinition(const OAIImportJobResponse_Definition &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIImportJobResponse::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIImportJobResponse::is_definition_Valid() const{
    return m_definition_isValid;
}

qint32 OAIImportJobResponse::getFailedPieces() const {
    return m_failed_pieces;
}
void OAIImportJobResponse::setFailedPieces(const qint32 &failed_pieces) {
    m_failed_pieces = failed_pieces;
    m_failed_pieces_isSet = true;
}

bool OAIImportJobResponse::is_failed_pieces_Set() const{
    return m_failed_pieces_isSet;
}

bool OAIImportJobResponse::is_failed_pieces_Valid() const{
    return m_failed_pieces_isValid;
}

QList OAIImportJobResponse::getFailures() const {
    return m_failures;
}
void OAIImportJobResponse::setFailures(const QList &failures) {
    m_failures = failures;
    m_failures_isSet = true;
}

bool OAIImportJobResponse::is_failures_Set() const{
    return m_failures_isSet;
}

bool OAIImportJobResponse::is_failures_Valid() const{
    return m_failures_isValid;
}

QString OAIImportJobResponse::getId() const {
    return m_id;
}
void OAIImportJobResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportJobResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportJobResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAIJobStatus OAIImportJobResponse::getJobStatus() const {
    return m_job_status;
}
void OAIImportJobResponse::setJobStatus(const OAIJobStatus &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIImportJobResponse::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIImportJobResponse::is_job_status_Valid() const{
    return m_job_status_isValid;
}

qint32 OAIImportJobResponse::getTotalFailures() const {
    return m_total_failures;
}
void OAIImportJobResponse::setTotalFailures(const qint32 &total_failures) {
    m_total_failures = total_failures;
    m_total_failures_isSet = true;
}

bool OAIImportJobResponse::is_total_failures_Set() const{
    return m_total_failures_isSet;
}

bool OAIImportJobResponse::is_total_failures_Valid() const{
    return m_total_failures_isValid;
}

qint32 OAIImportJobResponse::getTotalPieces() const {
    return m_total_pieces;
}
void OAIImportJobResponse::setTotalPieces(const qint32 &total_pieces) {
    m_total_pieces = total_pieces;
    m_total_pieces_isSet = true;
}

bool OAIImportJobResponse::is_total_pieces_Set() const{
    return m_total_pieces_isSet;
}

bool OAIImportJobResponse::is_total_pieces_Valid() const{
    return m_total_pieces_isValid;
}

qint32 OAIImportJobResponse::getTotalProcessed() const {
    return m_total_processed;
}
void OAIImportJobResponse::setTotalProcessed(const qint32 &total_processed) {
    m_total_processed = total_processed;
    m_total_processed_isSet = true;
}

bool OAIImportJobResponse::is_total_processed_Set() const{
    return m_total_processed_isSet;
}

bool OAIImportJobResponse::is_total_processed_Valid() const{
    return m_total_processed_isValid;
}

QString OAIImportJobResponse::getType() const {
    return m_type;
}
void OAIImportJobResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIImportJobResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIImportJobResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIImportJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_pieces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_pieces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_failures_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pieces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_creation_date_isValid && m_definition_isValid && m_id_isValid && m_job_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
