/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentResponse::OAISegmentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentResponse::OAISegmentResponse() {
    this->initializeModel();
}

OAISegmentResponse::~OAISegmentResponse() {}

void OAISegmentResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_definition_isSet = false;
    m_import_definition_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_segment_groups_isSet = false;
    m_segment_groups_isValid = false;

    m_segment_type_isSet = false;
    m_segment_type_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAISegmentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_import_definition_isValid = ::OpenAPI::fromJsonValue(m_import_definition, json[QString("ImportDefinition")]);
    m_import_definition_isSet = !json[QString("ImportDefinition")].isNull() && m_import_definition_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_segment_groups_isValid = ::OpenAPI::fromJsonValue(m_segment_groups, json[QString("SegmentGroups")]);
    m_segment_groups_isSet = !json[QString("SegmentGroups")].isNull() && m_segment_groups_isValid;

    m_segment_type_isValid = ::OpenAPI::fromJsonValue(m_segment_type, json[QString("SegmentType")]);
    m_segment_type_isSet = !json[QString("SegmentType")].isNull() && m_segment_type_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAISegmentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_definition.isSet()) {
        obj.insert(QString("ImportDefinition"), ::OpenAPI::toJsonValue(m_import_definition));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_segment_groups.isSet()) {
        obj.insert(QString("SegmentGroups"), ::OpenAPI::toJsonValue(m_segment_groups));
    }
    if (m_segment_type.isSet()) {
        obj.insert(QString("SegmentType"), ::OpenAPI::toJsonValue(m_segment_type));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAISegmentResponse::getApplicationId() const {
    return m_application_id;
}
void OAISegmentResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAISegmentResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAISegmentResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAISegmentResponse::getArn() const {
    return m_arn;
}
void OAISegmentResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAISegmentResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAISegmentResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAISegmentResponse::getCreationDate() const {
    return m_creation_date;
}
void OAISegmentResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAISegmentResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAISegmentResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAISegmentResponse_Dimensions OAISegmentResponse::getDimensions() const {
    return m_dimensions;
}
void OAISegmentResponse::setDimensions(const OAISegmentResponse_Dimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAISegmentResponse::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAISegmentResponse::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAISegmentResponse::getId() const {
    return m_id;
}
void OAISegmentResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISegmentResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAISegmentResponse::is_id_Valid() const{
    return m_id_isValid;
}

OAISegmentResponse_ImportDefinition OAISegmentResponse::getImportDefinition() const {
    return m_import_definition;
}
void OAISegmentResponse::setImportDefinition(const OAISegmentResponse_ImportDefinition &import_definition) {
    m_import_definition = import_definition;
    m_import_definition_isSet = true;
}

bool OAISegmentResponse::is_import_definition_Set() const{
    return m_import_definition_isSet;
}

bool OAISegmentResponse::is_import_definition_Valid() const{
    return m_import_definition_isValid;
}

QString OAISegmentResponse::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAISegmentResponse::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAISegmentResponse::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAISegmentResponse::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAISegmentResponse::getName() const {
    return m_name;
}
void OAISegmentResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISegmentResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAISegmentResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAISegmentResponse_SegmentGroups OAISegmentResponse::getSegmentGroups() const {
    return m_segment_groups;
}
void OAISegmentResponse::setSegmentGroups(const OAISegmentResponse_SegmentGroups &segment_groups) {
    m_segment_groups = segment_groups;
    m_segment_groups_isSet = true;
}

bool OAISegmentResponse::is_segment_groups_Set() const{
    return m_segment_groups_isSet;
}

bool OAISegmentResponse::is_segment_groups_Valid() const{
    return m_segment_groups_isValid;
}

OAISegmentType OAISegmentResponse::getSegmentType() const {
    return m_segment_type;
}
void OAISegmentResponse::setSegmentType(const OAISegmentType &segment_type) {
    m_segment_type = segment_type;
    m_segment_type_isSet = true;
}

bool OAISegmentResponse::is_segment_type_Set() const{
    return m_segment_type_isSet;
}

bool OAISegmentResponse::is_segment_type_Valid() const{
    return m_segment_type_isValid;
}

QMap OAISegmentResponse::getTags() const {
    return m_tags;
}
void OAISegmentResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISegmentResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISegmentResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAISegmentResponse::getVersion() const {
    return m_version;
}
void OAISegmentResponse::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAISegmentResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAISegmentResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAISegmentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_arn_isValid && m_creation_date_isValid && m_id_isValid && m_segment_type_isValid && true;
}

} // namespace OpenAPI
