/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignResponse::OAICampaignResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignResponse::OAICampaignResponse() {
    this->initializeModel();
}

OAICampaignResponse::~OAICampaignResponse() {}

void OAICampaignResponse::initializeModel() {

    m_additional_treatments_isSet = false;
    m_additional_treatments_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_custom_delivery_configuration_isSet = false;
    m_custom_delivery_configuration_isValid = false;

    m_default_state_isSet = false;
    m_default_state_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_holdout_percent_isSet = false;
    m_holdout_percent_isValid = false;

    m_hook_isSet = false;
    m_hook_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_paused_isSet = false;
    m_is_paused_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_message_configuration_isSet = false;
    m_message_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_segment_version_isSet = false;
    m_segment_version_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_template_configuration_isSet = false;
    m_template_configuration_isValid = false;

    m_treatment_description_isSet = false;
    m_treatment_description_isValid = false;

    m_treatment_name_isSet = false;
    m_treatment_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;
}

void OAICampaignResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignResponse::fromJsonObject(QJsonObject json) {

    m_additional_treatments_isValid = ::OpenAPI::fromJsonValue(m_additional_treatments, json[QString("AdditionalTreatments")]);
    m_additional_treatments_isSet = !json[QString("AdditionalTreatments")].isNull() && m_additional_treatments_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_custom_delivery_configuration_isValid = ::OpenAPI::fromJsonValue(m_custom_delivery_configuration, json[QString("CustomDeliveryConfiguration")]);
    m_custom_delivery_configuration_isSet = !json[QString("CustomDeliveryConfiguration")].isNull() && m_custom_delivery_configuration_isValid;

    m_default_state_isValid = ::OpenAPI::fromJsonValue(m_default_state, json[QString("DefaultState")]);
    m_default_state_isSet = !json[QString("DefaultState")].isNull() && m_default_state_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_holdout_percent_isValid = ::OpenAPI::fromJsonValue(m_holdout_percent, json[QString("HoldoutPercent")]);
    m_holdout_percent_isSet = !json[QString("HoldoutPercent")].isNull() && m_holdout_percent_isValid;

    m_hook_isValid = ::OpenAPI::fromJsonValue(m_hook, json[QString("Hook")]);
    m_hook_isSet = !json[QString("Hook")].isNull() && m_hook_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_paused_isValid = ::OpenAPI::fromJsonValue(m_is_paused, json[QString("IsPaused")]);
    m_is_paused_isSet = !json[QString("IsPaused")].isNull() && m_is_paused_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("Limits")]);
    m_limits_isSet = !json[QString("Limits")].isNull() && m_limits_isValid;

    m_message_configuration_isValid = ::OpenAPI::fromJsonValue(m_message_configuration, json[QString("MessageConfiguration")]);
    m_message_configuration_isSet = !json[QString("MessageConfiguration")].isNull() && m_message_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("SegmentId")]);
    m_segment_id_isSet = !json[QString("SegmentId")].isNull() && m_segment_id_isValid;

    m_segment_version_isValid = ::OpenAPI::fromJsonValue(m_segment_version, json[QString("SegmentVersion")]);
    m_segment_version_isSet = !json[QString("SegmentVersion")].isNull() && m_segment_version_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_template_configuration_isValid = ::OpenAPI::fromJsonValue(m_template_configuration, json[QString("TemplateConfiguration")]);
    m_template_configuration_isSet = !json[QString("TemplateConfiguration")].isNull() && m_template_configuration_isValid;

    m_treatment_description_isValid = ::OpenAPI::fromJsonValue(m_treatment_description, json[QString("TreatmentDescription")]);
    m_treatment_description_isSet = !json[QString("TreatmentDescription")].isNull() && m_treatment_description_isValid;

    m_treatment_name_isValid = ::OpenAPI::fromJsonValue(m_treatment_name, json[QString("TreatmentName")]);
    m_treatment_name_isSet = !json[QString("TreatmentName")].isNull() && m_treatment_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;
}

QString OAICampaignResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_treatments.isSet()) {
        obj.insert(QString("AdditionalTreatments"), ::OpenAPI::toJsonValue(m_additional_treatments));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_custom_delivery_configuration.isSet()) {
        obj.insert(QString("CustomDeliveryConfiguration"), ::OpenAPI::toJsonValue(m_custom_delivery_configuration));
    }
    if (m_default_state.isSet()) {
        obj.insert(QString("DefaultState"), ::OpenAPI::toJsonValue(m_default_state));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_holdout_percent_isSet) {
        obj.insert(QString("HoldoutPercent"), ::OpenAPI::toJsonValue(m_holdout_percent));
    }
    if (m_hook.isSet()) {
        obj.insert(QString("Hook"), ::OpenAPI::toJsonValue(m_hook));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_paused_isSet) {
        obj.insert(QString("IsPaused"), ::OpenAPI::toJsonValue(m_is_paused));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("Limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_message_configuration.isSet()) {
        obj.insert(QString("MessageConfiguration"), ::OpenAPI::toJsonValue(m_message_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("SegmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_segment_version_isSet) {
        obj.insert(QString("SegmentVersion"), ::OpenAPI::toJsonValue(m_segment_version));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_template_configuration.isSet()) {
        obj.insert(QString("TemplateConfiguration"), ::OpenAPI::toJsonValue(m_template_configuration));
    }
    if (m_treatment_description_isSet) {
        obj.insert(QString("TreatmentDescription"), ::OpenAPI::toJsonValue(m_treatment_description));
    }
    if (m_treatment_name_isSet) {
        obj.insert(QString("TreatmentName"), ::OpenAPI::toJsonValue(m_treatment_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    return obj;
}

QList OAICampaignResponse::getAdditionalTreatments() const {
    return m_additional_treatments;
}
void OAICampaignResponse::setAdditionalTreatments(const QList &additional_treatments) {
    m_additional_treatments = additional_treatments;
    m_additional_treatments_isSet = true;
}

bool OAICampaignResponse::is_additional_treatments_Set() const{
    return m_additional_treatments_isSet;
}

bool OAICampaignResponse::is_additional_treatments_Valid() const{
    return m_additional_treatments_isValid;
}

QString OAICampaignResponse::getApplicationId() const {
    return m_application_id;
}
void OAICampaignResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICampaignResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICampaignResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICampaignResponse::getArn() const {
    return m_arn;
}
void OAICampaignResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICampaignResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICampaignResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICampaignResponse::getCreationDate() const {
    return m_creation_date;
}
void OAICampaignResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAICampaignResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAICampaignResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAICampaignResponse_CustomDeliveryConfiguration OAICampaignResponse::getCustomDeliveryConfiguration() const {
    return m_custom_delivery_configuration;
}
void OAICampaignResponse::setCustomDeliveryConfiguration(const OAICampaignResponse_CustomDeliveryConfiguration &custom_delivery_configuration) {
    m_custom_delivery_configuration = custom_delivery_configuration;
    m_custom_delivery_configuration_isSet = true;
}

bool OAICampaignResponse::is_custom_delivery_configuration_Set() const{
    return m_custom_delivery_configuration_isSet;
}

bool OAICampaignResponse::is_custom_delivery_configuration_Valid() const{
    return m_custom_delivery_configuration_isValid;
}

OAICampaignResponse_DefaultState OAICampaignResponse::getDefaultState() const {
    return m_default_state;
}
void OAICampaignResponse::setDefaultState(const OAICampaignResponse_DefaultState &default_state) {
    m_default_state = default_state;
    m_default_state_isSet = true;
}

bool OAICampaignResponse::is_default_state_Set() const{
    return m_default_state_isSet;
}

bool OAICampaignResponse::is_default_state_Valid() const{
    return m_default_state_isValid;
}

QString OAICampaignResponse::getDescription() const {
    return m_description;
}
void OAICampaignResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICampaignResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICampaignResponse::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICampaignResponse::getHoldoutPercent() const {
    return m_holdout_percent;
}
void OAICampaignResponse::setHoldoutPercent(const qint32 &holdout_percent) {
    m_holdout_percent = holdout_percent;
    m_holdout_percent_isSet = true;
}

bool OAICampaignResponse::is_holdout_percent_Set() const{
    return m_holdout_percent_isSet;
}

bool OAICampaignResponse::is_holdout_percent_Valid() const{
    return m_holdout_percent_isValid;
}

OAICampaignResponse_Hook OAICampaignResponse::getHook() const {
    return m_hook;
}
void OAICampaignResponse::setHook(const OAICampaignResponse_Hook &hook) {
    m_hook = hook;
    m_hook_isSet = true;
}

bool OAICampaignResponse::is_hook_Set() const{
    return m_hook_isSet;
}

bool OAICampaignResponse::is_hook_Valid() const{
    return m_hook_isValid;
}

QString OAICampaignResponse::getId() const {
    return m_id;
}
void OAICampaignResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICampaignResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICampaignResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICampaignResponse::getIsPaused() const {
    return m_is_paused;
}
void OAICampaignResponse::setIsPaused(const bool &is_paused) {
    m_is_paused = is_paused;
    m_is_paused_isSet = true;
}

bool OAICampaignResponse::is_is_paused_Set() const{
    return m_is_paused_isSet;
}

bool OAICampaignResponse::is_is_paused_Valid() const{
    return m_is_paused_isValid;
}

QString OAICampaignResponse::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAICampaignResponse::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAICampaignResponse::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAICampaignResponse::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

OAICreateCampaign_request_WriteCampaignRequest_Limits OAICampaignResponse::getLimits() const {
    return m_limits;
}
void OAICampaignResponse::setLimits(const OAICreateCampaign_request_WriteCampaignRequest_Limits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAICampaignResponse::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAICampaignResponse::is_limits_Valid() const{
    return m_limits_isValid;
}

OAICreateCampaign_request_WriteCampaignRequest_MessageConfiguration OAICampaignResponse::getMessageConfiguration() const {
    return m_message_configuration;
}
void OAICampaignResponse::setMessageConfiguration(const OAICreateCampaign_request_WriteCampaignRequest_MessageConfiguration &message_configuration) {
    m_message_configuration = message_configuration;
    m_message_configuration_isSet = true;
}

bool OAICampaignResponse::is_message_configuration_Set() const{
    return m_message_configuration_isSet;
}

bool OAICampaignResponse::is_message_configuration_Valid() const{
    return m_message_configuration_isValid;
}

QString OAICampaignResponse::getName() const {
    return m_name;
}
void OAICampaignResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICampaignResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICampaignResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateCampaign_request_WriteCampaignRequest_Schedule OAICampaignResponse::getSchedule() const {
    return m_schedule;
}
void OAICampaignResponse::setSchedule(const OAICreateCampaign_request_WriteCampaignRequest_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAICampaignResponse::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAICampaignResponse::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAICampaignResponse::getSegmentId() const {
    return m_segment_id;
}
void OAICampaignResponse::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAICampaignResponse::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAICampaignResponse::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

qint32 OAICampaignResponse::getSegmentVersion() const {
    return m_segment_version;
}
void OAICampaignResponse::setSegmentVersion(const qint32 &segment_version) {
    m_segment_version = segment_version;
    m_segment_version_isSet = true;
}

bool OAICampaignResponse::is_segment_version_Set() const{
    return m_segment_version_isSet;
}

bool OAICampaignResponse::is_segment_version_Valid() const{
    return m_segment_version_isValid;
}

OAICampaignResponse_State OAICampaignResponse::getState() const {
    return m_state;
}
void OAICampaignResponse::setState(const OAICampaignResponse_State &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICampaignResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAICampaignResponse::is_state_Valid() const{
    return m_state_isValid;
}

QMap OAICampaignResponse::getTags() const {
    return m_tags;
}
void OAICampaignResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICampaignResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICampaignResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICampaignResponse_TemplateConfiguration OAICampaignResponse::getTemplateConfiguration() const {
    return m_template_configuration;
}
void OAICampaignResponse::setTemplateConfiguration(const OAICampaignResponse_TemplateConfiguration &template_configuration) {
    m_template_configuration = template_configuration;
    m_template_configuration_isSet = true;
}

bool OAICampaignResponse::is_template_configuration_Set() const{
    return m_template_configuration_isSet;
}

bool OAICampaignResponse::is_template_configuration_Valid() const{
    return m_template_configuration_isValid;
}

QString OAICampaignResponse::getTreatmentDescription() const {
    return m_treatment_description;
}
void OAICampaignResponse::setTreatmentDescription(const QString &treatment_description) {
    m_treatment_description = treatment_description;
    m_treatment_description_isSet = true;
}

bool OAICampaignResponse::is_treatment_description_Set() const{
    return m_treatment_description_isSet;
}

bool OAICampaignResponse::is_treatment_description_Valid() const{
    return m_treatment_description_isValid;
}

QString OAICampaignResponse::getTreatmentName() const {
    return m_treatment_name;
}
void OAICampaignResponse::setTreatmentName(const QString &treatment_name) {
    m_treatment_name = treatment_name;
    m_treatment_name_isSet = true;
}

bool OAICampaignResponse::is_treatment_name_Set() const{
    return m_treatment_name_isSet;
}

bool OAICampaignResponse::is_treatment_name_Valid() const{
    return m_treatment_name_isValid;
}

qint32 OAICampaignResponse::getVersion() const {
    return m_version;
}
void OAICampaignResponse::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICampaignResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAICampaignResponse::is_version_Valid() const{
    return m_version_isValid;
}

qint32 OAICampaignResponse::getPriority() const {
    return m_priority;
}
void OAICampaignResponse::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAICampaignResponse::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAICampaignResponse::is_priority_Valid() const{
    return m_priority_isValid;
}

bool OAICampaignResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_treatments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_delivery_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdout_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_arn_isValid && m_creation_date_isValid && m_id_isValid && m_last_modified_date_isValid && m_segment_id_isValid && m_segment_version_isValid && true;
}

} // namespace OpenAPI
