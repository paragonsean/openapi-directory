/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivityResponse::OAIActivityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivityResponse::OAIActivityResponse() {
    this->initializeModel();
}

OAIActivityResponse::~OAIActivityResponse() {}

void OAIActivityResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_scheduled_start_isSet = false;
    m_scheduled_start_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_successful_endpoint_count_isSet = false;
    m_successful_endpoint_count_isValid = false;

    m_timezones_completed_count_isSet = false;
    m_timezones_completed_count_isValid = false;

    m_timezones_total_count_isSet = false;
    m_timezones_total_count_isValid = false;

    m_total_endpoint_count_isSet = false;
    m_total_endpoint_count_isValid = false;

    m_treatment_id_isSet = false;
    m_treatment_id_isValid = false;

    m_execution_metrics_isSet = false;
    m_execution_metrics_isValid = false;
}

void OAIActivityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivityResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("CampaignId")]);
    m_campaign_id_isSet = !json[QString("CampaignId")].isNull() && m_campaign_id_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("End")]);
    m_end_isSet = !json[QString("End")].isNull() && m_end_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_scheduled_start_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start, json[QString("ScheduledStart")]);
    m_scheduled_start_isSet = !json[QString("ScheduledStart")].isNull() && m_scheduled_start_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_successful_endpoint_count_isValid = ::OpenAPI::fromJsonValue(m_successful_endpoint_count, json[QString("SuccessfulEndpointCount")]);
    m_successful_endpoint_count_isSet = !json[QString("SuccessfulEndpointCount")].isNull() && m_successful_endpoint_count_isValid;

    m_timezones_completed_count_isValid = ::OpenAPI::fromJsonValue(m_timezones_completed_count, json[QString("TimezonesCompletedCount")]);
    m_timezones_completed_count_isSet = !json[QString("TimezonesCompletedCount")].isNull() && m_timezones_completed_count_isValid;

    m_timezones_total_count_isValid = ::OpenAPI::fromJsonValue(m_timezones_total_count, json[QString("TimezonesTotalCount")]);
    m_timezones_total_count_isSet = !json[QString("TimezonesTotalCount")].isNull() && m_timezones_total_count_isValid;

    m_total_endpoint_count_isValid = ::OpenAPI::fromJsonValue(m_total_endpoint_count, json[QString("TotalEndpointCount")]);
    m_total_endpoint_count_isSet = !json[QString("TotalEndpointCount")].isNull() && m_total_endpoint_count_isValid;

    m_treatment_id_isValid = ::OpenAPI::fromJsonValue(m_treatment_id, json[QString("TreatmentId")]);
    m_treatment_id_isSet = !json[QString("TreatmentId")].isNull() && m_treatment_id_isValid;

    m_execution_metrics_isValid = ::OpenAPI::fromJsonValue(m_execution_metrics, json[QString("ExecutionMetrics")]);
    m_execution_metrics_isSet = !json[QString("ExecutionMetrics")].isNull() && m_execution_metrics_isValid;
}

QString OAIActivityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_campaign_id_isSet) {
        obj.insert(QString("CampaignId"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_end_isSet) {
        obj.insert(QString("End"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_result_isSet) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_scheduled_start_isSet) {
        obj.insert(QString("ScheduledStart"), ::OpenAPI::toJsonValue(m_scheduled_start));
    }
    if (m_start_isSet) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_successful_endpoint_count_isSet) {
        obj.insert(QString("SuccessfulEndpointCount"), ::OpenAPI::toJsonValue(m_successful_endpoint_count));
    }
    if (m_timezones_completed_count_isSet) {
        obj.insert(QString("TimezonesCompletedCount"), ::OpenAPI::toJsonValue(m_timezones_completed_count));
    }
    if (m_timezones_total_count_isSet) {
        obj.insert(QString("TimezonesTotalCount"), ::OpenAPI::toJsonValue(m_timezones_total_count));
    }
    if (m_total_endpoint_count_isSet) {
        obj.insert(QString("TotalEndpointCount"), ::OpenAPI::toJsonValue(m_total_endpoint_count));
    }
    if (m_treatment_id_isSet) {
        obj.insert(QString("TreatmentId"), ::OpenAPI::toJsonValue(m_treatment_id));
    }
    if (m_execution_metrics.isSet()) {
        obj.insert(QString("ExecutionMetrics"), ::OpenAPI::toJsonValue(m_execution_metrics));
    }
    return obj;
}

QString OAIActivityResponse::getApplicationId() const {
    return m_application_id;
}
void OAIActivityResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIActivityResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIActivityResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIActivityResponse::getCampaignId() const {
    return m_campaign_id;
}
void OAIActivityResponse::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIActivityResponse::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIActivityResponse::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIActivityResponse::getEnd() const {
    return m_end;
}
void OAIActivityResponse::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIActivityResponse::is_end_Set() const{
    return m_end_isSet;
}

bool OAIActivityResponse::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIActivityResponse::getId() const {
    return m_id;
}
void OAIActivityResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActivityResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActivityResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActivityResponse::getResult() const {
    return m_result;
}
void OAIActivityResponse::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIActivityResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIActivityResponse::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIActivityResponse::getScheduledStart() const {
    return m_scheduled_start;
}
void OAIActivityResponse::setScheduledStart(const QString &scheduled_start) {
    m_scheduled_start = scheduled_start;
    m_scheduled_start_isSet = true;
}

bool OAIActivityResponse::is_scheduled_start_Set() const{
    return m_scheduled_start_isSet;
}

bool OAIActivityResponse::is_scheduled_start_Valid() const{
    return m_scheduled_start_isValid;
}

QString OAIActivityResponse::getStart() const {
    return m_start;
}
void OAIActivityResponse::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIActivityResponse::is_start_Set() const{
    return m_start_isSet;
}

bool OAIActivityResponse::is_start_Valid() const{
    return m_start_isValid;
}

QString OAIActivityResponse::getState() const {
    return m_state;
}
void OAIActivityResponse::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIActivityResponse::is_state_Set() const{
    return m_state_isSet;
}

bool OAIActivityResponse::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIActivityResponse::getSuccessfulEndpointCount() const {
    return m_successful_endpoint_count;
}
void OAIActivityResponse::setSuccessfulEndpointCount(const qint32 &successful_endpoint_count) {
    m_successful_endpoint_count = successful_endpoint_count;
    m_successful_endpoint_count_isSet = true;
}

bool OAIActivityResponse::is_successful_endpoint_count_Set() const{
    return m_successful_endpoint_count_isSet;
}

bool OAIActivityResponse::is_successful_endpoint_count_Valid() const{
    return m_successful_endpoint_count_isValid;
}

qint32 OAIActivityResponse::getTimezonesCompletedCount() const {
    return m_timezones_completed_count;
}
void OAIActivityResponse::setTimezonesCompletedCount(const qint32 &timezones_completed_count) {
    m_timezones_completed_count = timezones_completed_count;
    m_timezones_completed_count_isSet = true;
}

bool OAIActivityResponse::is_timezones_completed_count_Set() const{
    return m_timezones_completed_count_isSet;
}

bool OAIActivityResponse::is_timezones_completed_count_Valid() const{
    return m_timezones_completed_count_isValid;
}

qint32 OAIActivityResponse::getTimezonesTotalCount() const {
    return m_timezones_total_count;
}
void OAIActivityResponse::setTimezonesTotalCount(const qint32 &timezones_total_count) {
    m_timezones_total_count = timezones_total_count;
    m_timezones_total_count_isSet = true;
}

bool OAIActivityResponse::is_timezones_total_count_Set() const{
    return m_timezones_total_count_isSet;
}

bool OAIActivityResponse::is_timezones_total_count_Valid() const{
    return m_timezones_total_count_isValid;
}

qint32 OAIActivityResponse::getTotalEndpointCount() const {
    return m_total_endpoint_count;
}
void OAIActivityResponse::setTotalEndpointCount(const qint32 &total_endpoint_count) {
    m_total_endpoint_count = total_endpoint_count;
    m_total_endpoint_count_isSet = true;
}

bool OAIActivityResponse::is_total_endpoint_count_Set() const{
    return m_total_endpoint_count_isSet;
}

bool OAIActivityResponse::is_total_endpoint_count_Valid() const{
    return m_total_endpoint_count_isValid;
}

QString OAIActivityResponse::getTreatmentId() const {
    return m_treatment_id;
}
void OAIActivityResponse::setTreatmentId(const QString &treatment_id) {
    m_treatment_id = treatment_id;
    m_treatment_id_isSet = true;
}

bool OAIActivityResponse::is_treatment_id_Set() const{
    return m_treatment_id_isSet;
}

bool OAIActivityResponse::is_treatment_id_Valid() const{
    return m_treatment_id_isValid;
}

QMap OAIActivityResponse::getExecutionMetrics() const {
    return m_execution_metrics;
}
void OAIActivityResponse::setExecutionMetrics(const QMap &execution_metrics) {
    m_execution_metrics = execution_metrics;
    m_execution_metrics_isSet = true;
}

bool OAIActivityResponse::is_execution_metrics_Set() const{
    return m_execution_metrics_isSet;
}

bool OAIActivityResponse::is_execution_metrics_Valid() const{
    return m_execution_metrics_isValid;
}

bool OAIActivityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_successful_endpoint_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezones_completed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezones_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_endpoint_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_campaign_id_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
