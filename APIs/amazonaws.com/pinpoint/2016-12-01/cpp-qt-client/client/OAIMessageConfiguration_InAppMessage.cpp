/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageConfiguration_InAppMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageConfiguration_InAppMessage::OAIMessageConfiguration_InAppMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageConfiguration_InAppMessage::OAIMessageConfiguration_InAppMessage() {
    this->initializeModel();
}

OAIMessageConfiguration_InAppMessage::~OAIMessageConfiguration_InAppMessage() {}

void OAIMessageConfiguration_InAppMessage::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_custom_config_isSet = false;
    m_custom_config_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;
}

void OAIMessageConfiguration_InAppMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageConfiguration_InAppMessage::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_custom_config_isValid = ::OpenAPI::fromJsonValue(m_custom_config, json[QString("CustomConfig")]);
    m_custom_config_isSet = !json[QString("CustomConfig")].isNull() && m_custom_config_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("Layout")]);
    m_layout_isSet = !json[QString("Layout")].isNull() && m_layout_isValid;
}

QString OAIMessageConfiguration_InAppMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageConfiguration_InAppMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_content.isSet()) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_custom_config.isSet()) {
        obj.insert(QString("CustomConfig"), ::OpenAPI::toJsonValue(m_custom_config));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("Layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    return obj;
}

QString OAIMessageConfiguration_InAppMessage::getBody() const {
    return m_body;
}
void OAIMessageConfiguration_InAppMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIMessageConfiguration_InAppMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAIMessageConfiguration_InAppMessage::is_body_Valid() const{
    return m_body_isValid;
}

QList OAIMessageConfiguration_InAppMessage::getContent() const {
    return m_content;
}
void OAIMessageConfiguration_InAppMessage::setContent(const QList &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIMessageConfiguration_InAppMessage::is_content_Set() const{
    return m_content_isSet;
}

bool OAIMessageConfiguration_InAppMessage::is_content_Valid() const{
    return m_content_isValid;
}

QMap OAIMessageConfiguration_InAppMessage::getCustomConfig() const {
    return m_custom_config;
}
void OAIMessageConfiguration_InAppMessage::setCustomConfig(const QMap &custom_config) {
    m_custom_config = custom_config;
    m_custom_config_isSet = true;
}

bool OAIMessageConfiguration_InAppMessage::is_custom_config_Set() const{
    return m_custom_config_isSet;
}

bool OAIMessageConfiguration_InAppMessage::is_custom_config_Valid() const{
    return m_custom_config_isValid;
}

OAILayout OAIMessageConfiguration_InAppMessage::getLayout() const {
    return m_layout;
}
void OAIMessageConfiguration_InAppMessage::setLayout(const OAILayout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIMessageConfiguration_InAppMessage::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIMessageConfiguration_InAppMessage::is_layout_Valid() const{
    return m_layout_isValid;
}

bool OAIMessageConfiguration_InAppMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageConfiguration_InAppMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
