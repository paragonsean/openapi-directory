/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity_MultiCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity_MultiCondition::OAIActivity_MultiCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity_MultiCondition::OAIActivity_MultiCondition() {
    this->initializeModel();
}

OAIActivity_MultiCondition::~OAIActivity_MultiCondition() {}

void OAIActivity_MultiCondition::initializeModel() {

    m_branches_isSet = false;
    m_branches_isValid = false;

    m_default_activity_isSet = false;
    m_default_activity_isValid = false;

    m_evaluation_wait_time_isSet = false;
    m_evaluation_wait_time_isValid = false;
}

void OAIActivity_MultiCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity_MultiCondition::fromJsonObject(QJsonObject json) {

    m_branches_isValid = ::OpenAPI::fromJsonValue(m_branches, json[QString("Branches")]);
    m_branches_isSet = !json[QString("Branches")].isNull() && m_branches_isValid;

    m_default_activity_isValid = ::OpenAPI::fromJsonValue(m_default_activity, json[QString("DefaultActivity")]);
    m_default_activity_isSet = !json[QString("DefaultActivity")].isNull() && m_default_activity_isValid;

    m_evaluation_wait_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_wait_time, json[QString("EvaluationWaitTime")]);
    m_evaluation_wait_time_isSet = !json[QString("EvaluationWaitTime")].isNull() && m_evaluation_wait_time_isValid;
}

QString OAIActivity_MultiCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity_MultiCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_branches.isSet()) {
        obj.insert(QString("Branches"), ::OpenAPI::toJsonValue(m_branches));
    }
    if (m_default_activity_isSet) {
        obj.insert(QString("DefaultActivity"), ::OpenAPI::toJsonValue(m_default_activity));
    }
    if (m_evaluation_wait_time.isSet()) {
        obj.insert(QString("EvaluationWaitTime"), ::OpenAPI::toJsonValue(m_evaluation_wait_time));
    }
    return obj;
}

QList OAIActivity_MultiCondition::getBranches() const {
    return m_branches;
}
void OAIActivity_MultiCondition::setBranches(const QList &branches) {
    m_branches = branches;
    m_branches_isSet = true;
}

bool OAIActivity_MultiCondition::is_branches_Set() const{
    return m_branches_isSet;
}

bool OAIActivity_MultiCondition::is_branches_Valid() const{
    return m_branches_isValid;
}

QString OAIActivity_MultiCondition::getDefaultActivity() const {
    return m_default_activity;
}
void OAIActivity_MultiCondition::setDefaultActivity(const QString &default_activity) {
    m_default_activity = default_activity;
    m_default_activity_isSet = true;
}

bool OAIActivity_MultiCondition::is_default_activity_Set() const{
    return m_default_activity_isSet;
}

bool OAIActivity_MultiCondition::is_default_activity_Valid() const{
    return m_default_activity_isValid;
}

OAIMultiConditionalSplitActivity_EvaluationWaitTime OAIActivity_MultiCondition::getEvaluationWaitTime() const {
    return m_evaluation_wait_time;
}
void OAIActivity_MultiCondition::setEvaluationWaitTime(const OAIMultiConditionalSplitActivity_EvaluationWaitTime &evaluation_wait_time) {
    m_evaluation_wait_time = evaluation_wait_time;
    m_evaluation_wait_time_isSet = true;
}

bool OAIActivity_MultiCondition::is_evaluation_wait_time_Set() const{
    return m_evaluation_wait_time_isSet;
}

bool OAIActivity_MultiCondition::is_evaluation_wait_time_Valid() const{
    return m_evaluation_wait_time_isValid;
}

bool OAIActivity_MultiCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branches.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_wait_time.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity_MultiCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
