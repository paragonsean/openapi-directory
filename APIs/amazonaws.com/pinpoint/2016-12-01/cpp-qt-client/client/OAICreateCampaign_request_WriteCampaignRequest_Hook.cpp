/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCampaign_request_WriteCampaignRequest_Hook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCampaign_request_WriteCampaignRequest_Hook::OAICreateCampaign_request_WriteCampaignRequest_Hook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCampaign_request_WriteCampaignRequest_Hook::OAICreateCampaign_request_WriteCampaignRequest_Hook() {
    this->initializeModel();
}

OAICreateCampaign_request_WriteCampaignRequest_Hook::~OAICreateCampaign_request_WriteCampaignRequest_Hook() {}

void OAICreateCampaign_request_WriteCampaignRequest_Hook::initializeModel() {

    m_lambda_function_name_isSet = false;
    m_lambda_function_name_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_web_url_isSet = false;
    m_web_url_isValid = false;
}

void OAICreateCampaign_request_WriteCampaignRequest_Hook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCampaign_request_WriteCampaignRequest_Hook::fromJsonObject(QJsonObject json) {

    m_lambda_function_name_isValid = ::OpenAPI::fromJsonValue(m_lambda_function_name, json[QString("LambdaFunctionName")]);
    m_lambda_function_name_isSet = !json[QString("LambdaFunctionName")].isNull() && m_lambda_function_name_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("Mode")]);
    m_mode_isSet = !json[QString("Mode")].isNull() && m_mode_isValid;

    m_web_url_isValid = ::OpenAPI::fromJsonValue(m_web_url, json[QString("WebUrl")]);
    m_web_url_isSet = !json[QString("WebUrl")].isNull() && m_web_url_isValid;
}

QString OAICreateCampaign_request_WriteCampaignRequest_Hook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCampaign_request_WriteCampaignRequest_Hook::asJsonObject() const {
    QJsonObject obj;
    if (m_lambda_function_name_isSet) {
        obj.insert(QString("LambdaFunctionName"), ::OpenAPI::toJsonValue(m_lambda_function_name));
    }
    if (m_mode.isSet()) {
        obj.insert(QString("Mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_web_url_isSet) {
        obj.insert(QString("WebUrl"), ::OpenAPI::toJsonValue(m_web_url));
    }
    return obj;
}

QString OAICreateCampaign_request_WriteCampaignRequest_Hook::getLambdaFunctionName() const {
    return m_lambda_function_name;
}
void OAICreateCampaign_request_WriteCampaignRequest_Hook::setLambdaFunctionName(const QString &lambda_function_name) {
    m_lambda_function_name = lambda_function_name;
    m_lambda_function_name_isSet = true;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::is_lambda_function_name_Set() const{
    return m_lambda_function_name_isSet;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::is_lambda_function_name_Valid() const{
    return m_lambda_function_name_isValid;
}

OAIMode OAICreateCampaign_request_WriteCampaignRequest_Hook::getMode() const {
    return m_mode;
}
void OAICreateCampaign_request_WriteCampaignRequest_Hook::setMode(const OAIMode &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAICreateCampaign_request_WriteCampaignRequest_Hook::getWebUrl() const {
    return m_web_url;
}
void OAICreateCampaign_request_WriteCampaignRequest_Hook::setWebUrl(const QString &web_url) {
    m_web_url = web_url;
    m_web_url_isSet = true;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::is_web_url_Set() const{
    return m_web_url_isSet;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::is_web_url_Valid() const{
    return m_web_url_isValid;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lambda_function_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCampaign_request_WriteCampaignRequest_Hook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
