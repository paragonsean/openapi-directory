/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventCondition_Dimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventCondition_Dimensions::OAIEventCondition_Dimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventCondition_Dimensions::OAIEventCondition_Dimensions() {
    this->initializeModel();
}

OAIEventCondition_Dimensions::~OAIEventCondition_Dimensions() {}

void OAIEventCondition_Dimensions::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIEventCondition_Dimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventCondition_Dimensions::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;
}

QString OAIEventCondition_Dimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventCondition_Dimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_event_type.isSet()) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QMap OAIEventCondition_Dimensions::getAttributes() const {
    return m_attributes;
}
void OAIEventCondition_Dimensions::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEventCondition_Dimensions::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEventCondition_Dimensions::is_attributes_Valid() const{
    return m_attributes_isValid;
}

OAIEventDimensions_EventType OAIEventCondition_Dimensions::getEventType() const {
    return m_event_type;
}
void OAIEventCondition_Dimensions::setEventType(const OAIEventDimensions_EventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventCondition_Dimensions::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventCondition_Dimensions::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QMap OAIEventCondition_Dimensions::getMetrics() const {
    return m_metrics;
}
void OAIEventCondition_Dimensions::setMetrics(const QMap &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIEventCondition_Dimensions::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIEventCondition_Dimensions::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIEventCondition_Dimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventCondition_Dimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
