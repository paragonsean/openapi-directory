/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWriteApplicationSettingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWriteApplicationSettingsRequest::OAIWriteApplicationSettingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWriteApplicationSettingsRequest::OAIWriteApplicationSettingsRequest() {
    this->initializeModel();
}

OAIWriteApplicationSettingsRequest::~OAIWriteApplicationSettingsRequest() {}

void OAIWriteApplicationSettingsRequest::initializeModel() {

    m_campaign_hook_isSet = false;
    m_campaign_hook_isValid = false;

    m_cloud_watch_metrics_enabled_isSet = false;
    m_cloud_watch_metrics_enabled_isValid = false;

    m_event_tagging_enabled_isSet = false;
    m_event_tagging_enabled_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_quiet_time_isSet = false;
    m_quiet_time_isValid = false;

    m_journey_limits_isSet = false;
    m_journey_limits_isValid = false;
}

void OAIWriteApplicationSettingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWriteApplicationSettingsRequest::fromJsonObject(QJsonObject json) {

    m_campaign_hook_isValid = ::OpenAPI::fromJsonValue(m_campaign_hook, json[QString("CampaignHook")]);
    m_campaign_hook_isSet = !json[QString("CampaignHook")].isNull() && m_campaign_hook_isValid;

    m_cloud_watch_metrics_enabled_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_metrics_enabled, json[QString("CloudWatchMetricsEnabled")]);
    m_cloud_watch_metrics_enabled_isSet = !json[QString("CloudWatchMetricsEnabled")].isNull() && m_cloud_watch_metrics_enabled_isValid;

    m_event_tagging_enabled_isValid = ::OpenAPI::fromJsonValue(m_event_tagging_enabled, json[QString("EventTaggingEnabled")]);
    m_event_tagging_enabled_isSet = !json[QString("EventTaggingEnabled")].isNull() && m_event_tagging_enabled_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("Limits")]);
    m_limits_isSet = !json[QString("Limits")].isNull() && m_limits_isValid;

    m_quiet_time_isValid = ::OpenAPI::fromJsonValue(m_quiet_time, json[QString("QuietTime")]);
    m_quiet_time_isSet = !json[QString("QuietTime")].isNull() && m_quiet_time_isValid;

    m_journey_limits_isValid = ::OpenAPI::fromJsonValue(m_journey_limits, json[QString("JourneyLimits")]);
    m_journey_limits_isSet = !json[QString("JourneyLimits")].isNull() && m_journey_limits_isValid;
}

QString OAIWriteApplicationSettingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWriteApplicationSettingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_hook.isSet()) {
        obj.insert(QString("CampaignHook"), ::OpenAPI::toJsonValue(m_campaign_hook));
    }
    if (m_cloud_watch_metrics_enabled_isSet) {
        obj.insert(QString("CloudWatchMetricsEnabled"), ::OpenAPI::toJsonValue(m_cloud_watch_metrics_enabled));
    }
    if (m_event_tagging_enabled_isSet) {
        obj.insert(QString("EventTaggingEnabled"), ::OpenAPI::toJsonValue(m_event_tagging_enabled));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("Limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_quiet_time.isSet()) {
        obj.insert(QString("QuietTime"), ::OpenAPI::toJsonValue(m_quiet_time));
    }
    if (m_journey_limits.isSet()) {
        obj.insert(QString("JourneyLimits"), ::OpenAPI::toJsonValue(m_journey_limits));
    }
    return obj;
}

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_CampaignHook OAIWriteApplicationSettingsRequest::getCampaignHook() const {
    return m_campaign_hook;
}
void OAIWriteApplicationSettingsRequest::setCampaignHook(const OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_CampaignHook &campaign_hook) {
    m_campaign_hook = campaign_hook;
    m_campaign_hook_isSet = true;
}

bool OAIWriteApplicationSettingsRequest::is_campaign_hook_Set() const{
    return m_campaign_hook_isSet;
}

bool OAIWriteApplicationSettingsRequest::is_campaign_hook_Valid() const{
    return m_campaign_hook_isValid;
}

bool OAIWriteApplicationSettingsRequest::getCloudWatchMetricsEnabled() const {
    return m_cloud_watch_metrics_enabled;
}
void OAIWriteApplicationSettingsRequest::setCloudWatchMetricsEnabled(const bool &cloud_watch_metrics_enabled) {
    m_cloud_watch_metrics_enabled = cloud_watch_metrics_enabled;
    m_cloud_watch_metrics_enabled_isSet = true;
}

bool OAIWriteApplicationSettingsRequest::is_cloud_watch_metrics_enabled_Set() const{
    return m_cloud_watch_metrics_enabled_isSet;
}

bool OAIWriteApplicationSettingsRequest::is_cloud_watch_metrics_enabled_Valid() const{
    return m_cloud_watch_metrics_enabled_isValid;
}

bool OAIWriteApplicationSettingsRequest::isEventTaggingEnabled() const {
    return m_event_tagging_enabled;
}
void OAIWriteApplicationSettingsRequest::setEventTaggingEnabled(const bool &event_tagging_enabled) {
    m_event_tagging_enabled = event_tagging_enabled;
    m_event_tagging_enabled_isSet = true;
}

bool OAIWriteApplicationSettingsRequest::is_event_tagging_enabled_Set() const{
    return m_event_tagging_enabled_isSet;
}

bool OAIWriteApplicationSettingsRequest::is_event_tagging_enabled_Valid() const{
    return m_event_tagging_enabled_isValid;
}

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_Limits OAIWriteApplicationSettingsRequest::getLimits() const {
    return m_limits;
}
void OAIWriteApplicationSettingsRequest::setLimits(const OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_Limits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIWriteApplicationSettingsRequest::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIWriteApplicationSettingsRequest::is_limits_Valid() const{
    return m_limits_isValid;
}

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_QuietTime OAIWriteApplicationSettingsRequest::getQuietTime() const {
    return m_quiet_time;
}
void OAIWriteApplicationSettingsRequest::setQuietTime(const OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_QuietTime &quiet_time) {
    m_quiet_time = quiet_time;
    m_quiet_time_isSet = true;
}

bool OAIWriteApplicationSettingsRequest::is_quiet_time_Set() const{
    return m_quiet_time_isSet;
}

bool OAIWriteApplicationSettingsRequest::is_quiet_time_Valid() const{
    return m_quiet_time_isValid;
}

OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits OAIWriteApplicationSettingsRequest::getJourneyLimits() const {
    return m_journey_limits;
}
void OAIWriteApplicationSettingsRequest::setJourneyLimits(const OAIUpdateApplicationSettings_request_WriteApplicationSettingsRequest_JourneyLimits &journey_limits) {
    m_journey_limits = journey_limits;
    m_journey_limits_isSet = true;
}

bool OAIWriteApplicationSettingsRequest::is_journey_limits_Set() const{
    return m_journey_limits_isSet;
}

bool OAIWriteApplicationSettingsRequest::is_journey_limits_Valid() const{
    return m_journey_limits_isValid;
}

bool OAIWriteApplicationSettingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_hook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_metrics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_tagging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiet_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_journey_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWriteApplicationSettingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
