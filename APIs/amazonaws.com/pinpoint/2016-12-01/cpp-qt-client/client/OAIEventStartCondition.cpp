/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventStartCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventStartCondition::OAIEventStartCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventStartCondition::OAIEventStartCondition() {
    this->initializeModel();
}

OAIEventStartCondition::~OAIEventStartCondition() {}

void OAIEventStartCondition::initializeModel() {

    m_event_filter_isSet = false;
    m_event_filter_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;
}

void OAIEventStartCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventStartCondition::fromJsonObject(QJsonObject json) {

    m_event_filter_isValid = ::OpenAPI::fromJsonValue(m_event_filter, json[QString("EventFilter")]);
    m_event_filter_isSet = !json[QString("EventFilter")].isNull() && m_event_filter_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("SegmentId")]);
    m_segment_id_isSet = !json[QString("SegmentId")].isNull() && m_segment_id_isValid;
}

QString OAIEventStartCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventStartCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_event_filter.isSet()) {
        obj.insert(QString("EventFilter"), ::OpenAPI::toJsonValue(m_event_filter));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("SegmentId"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    return obj;
}

OAIEventFilter OAIEventStartCondition::getEventFilter() const {
    return m_event_filter;
}
void OAIEventStartCondition::setEventFilter(const OAIEventFilter &event_filter) {
    m_event_filter = event_filter;
    m_event_filter_isSet = true;
}

bool OAIEventStartCondition::is_event_filter_Set() const{
    return m_event_filter_isSet;
}

bool OAIEventStartCondition::is_event_filter_Valid() const{
    return m_event_filter_isValid;
}

QString OAIEventStartCondition::getSegmentId() const {
    return m_segment_id;
}
void OAIEventStartCondition::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAIEventStartCondition::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAIEventStartCondition::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

bool OAIEventStartCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventStartCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
