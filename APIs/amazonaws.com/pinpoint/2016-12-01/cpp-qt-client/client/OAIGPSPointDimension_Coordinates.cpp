/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGPSPointDimension_Coordinates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGPSPointDimension_Coordinates::OAIGPSPointDimension_Coordinates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGPSPointDimension_Coordinates::OAIGPSPointDimension_Coordinates() {
    this->initializeModel();
}

OAIGPSPointDimension_Coordinates::~OAIGPSPointDimension_Coordinates() {}

void OAIGPSPointDimension_Coordinates::initializeModel() {

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAIGPSPointDimension_Coordinates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGPSPointDimension_Coordinates::fromJsonObject(QJsonObject json) {

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("Latitude")]);
    m_latitude_isSet = !json[QString("Latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;
}

QString OAIGPSPointDimension_Coordinates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGPSPointDimension_Coordinates::asJsonObject() const {
    QJsonObject obj;
    if (m_latitude_isSet) {
        obj.insert(QString("Latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

double OAIGPSPointDimension_Coordinates::getLatitude() const {
    return m_latitude;
}
void OAIGPSPointDimension_Coordinates::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIGPSPointDimension_Coordinates::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIGPSPointDimension_Coordinates::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIGPSPointDimension_Coordinates::getLongitude() const {
    return m_longitude;
}
void OAIGPSPointDimension_Coordinates::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIGPSPointDimension_Coordinates::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIGPSPointDimension_Coordinates::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIGPSPointDimension_Coordinates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGPSPointDimension_Coordinates::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_latitude_isValid && m_longitude_isValid && true;
}

} // namespace OpenAPI
