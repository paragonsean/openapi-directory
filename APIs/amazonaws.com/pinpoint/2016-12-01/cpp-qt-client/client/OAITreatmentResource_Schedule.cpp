/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITreatmentResource_Schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITreatmentResource_Schedule::OAITreatmentResource_Schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITreatmentResource_Schedule::OAITreatmentResource_Schedule() {
    this->initializeModel();
}

OAITreatmentResource_Schedule::~OAITreatmentResource_Schedule() {}

void OAITreatmentResource_Schedule::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_event_filter_isSet = false;
    m_event_filter_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_is_local_time_isSet = false;
    m_is_local_time_isValid = false;

    m_quiet_time_isSet = false;
    m_quiet_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAITreatmentResource_Schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITreatmentResource_Schedule::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_event_filter_isValid = ::OpenAPI::fromJsonValue(m_event_filter, json[QString("EventFilter")]);
    m_event_filter_isSet = !json[QString("EventFilter")].isNull() && m_event_filter_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("Frequency")]);
    m_frequency_isSet = !json[QString("Frequency")].isNull() && m_frequency_isValid;

    m_is_local_time_isValid = ::OpenAPI::fromJsonValue(m_is_local_time, json[QString("IsLocalTime")]);
    m_is_local_time_isSet = !json[QString("IsLocalTime")].isNull() && m_is_local_time_isValid;

    m_quiet_time_isValid = ::OpenAPI::fromJsonValue(m_quiet_time, json[QString("QuietTime")]);
    m_quiet_time_isSet = !json[QString("QuietTime")].isNull() && m_quiet_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;
}

QString OAITreatmentResource_Schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITreatmentResource_Schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_event_filter.isSet()) {
        obj.insert(QString("EventFilter"), ::OpenAPI::toJsonValue(m_event_filter));
    }
    if (m_frequency.isSet()) {
        obj.insert(QString("Frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_is_local_time_isSet) {
        obj.insert(QString("IsLocalTime"), ::OpenAPI::toJsonValue(m_is_local_time));
    }
    if (m_quiet_time.isSet()) {
        obj.insert(QString("QuietTime"), ::OpenAPI::toJsonValue(m_quiet_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAITreatmentResource_Schedule::getEndTime() const {
    return m_end_time;
}
void OAITreatmentResource_Schedule::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITreatmentResource_Schedule::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITreatmentResource_Schedule::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAISchedule_EventFilter OAITreatmentResource_Schedule::getEventFilter() const {
    return m_event_filter;
}
void OAITreatmentResource_Schedule::setEventFilter(const OAISchedule_EventFilter &event_filter) {
    m_event_filter = event_filter;
    m_event_filter_isSet = true;
}

bool OAITreatmentResource_Schedule::is_event_filter_Set() const{
    return m_event_filter_isSet;
}

bool OAITreatmentResource_Schedule::is_event_filter_Valid() const{
    return m_event_filter_isValid;
}

OAIFrequency OAITreatmentResource_Schedule::getFrequency() const {
    return m_frequency;
}
void OAITreatmentResource_Schedule::setFrequency(const OAIFrequency &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAITreatmentResource_Schedule::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAITreatmentResource_Schedule::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAITreatmentResource_Schedule::getIsLocalTime() const {
    return m_is_local_time;
}
void OAITreatmentResource_Schedule::setIsLocalTime(const bool &is_local_time) {
    m_is_local_time = is_local_time;
    m_is_local_time_isSet = true;
}

bool OAITreatmentResource_Schedule::is_is_local_time_Set() const{
    return m_is_local_time_isSet;
}

bool OAITreatmentResource_Schedule::is_is_local_time_Valid() const{
    return m_is_local_time_isValid;
}

OAISchedule_QuietTime OAITreatmentResource_Schedule::getQuietTime() const {
    return m_quiet_time;
}
void OAITreatmentResource_Schedule::setQuietTime(const OAISchedule_QuietTime &quiet_time) {
    m_quiet_time = quiet_time;
    m_quiet_time_isSet = true;
}

bool OAITreatmentResource_Schedule::is_quiet_time_Set() const{
    return m_quiet_time_isSet;
}

bool OAITreatmentResource_Schedule::is_quiet_time_Valid() const{
    return m_quiet_time_isValid;
}

QString OAITreatmentResource_Schedule::getStartTime() const {
    return m_start_time;
}
void OAITreatmentResource_Schedule::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITreatmentResource_Schedule::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITreatmentResource_Schedule::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITreatmentResource_Schedule::getTimezone() const {
    return m_timezone;
}
void OAITreatmentResource_Schedule::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAITreatmentResource_Schedule::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAITreatmentResource_Schedule::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAITreatmentResource_Schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_local_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiet_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITreatmentResource_Schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_start_time_isValid && true;
}

} // namespace OpenAPI
