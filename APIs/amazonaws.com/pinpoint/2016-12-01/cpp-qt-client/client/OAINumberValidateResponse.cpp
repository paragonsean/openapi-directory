/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberValidateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberValidateResponse::OAINumberValidateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberValidateResponse::OAINumberValidateResponse() {
    this->initializeModel();
}

OAINumberValidateResponse::~OAINumberValidateResponse() {}

void OAINumberValidateResponse::initializeModel() {

    m_carrier_isSet = false;
    m_carrier_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_cleansed_phone_number_e164_isSet = false;
    m_cleansed_phone_number_e164_isValid = false;

    m_cleansed_phone_number_national_isSet = false;
    m_cleansed_phone_number_national_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_iso2_isSet = false;
    m_country_code_iso2_isValid = false;

    m_country_code_numeric_isSet = false;
    m_country_code_numeric_isValid = false;

    m_county_isSet = false;
    m_county_isValid = false;

    m_original_country_code_iso2_isSet = false;
    m_original_country_code_iso2_isValid = false;

    m_original_phone_number_isSet = false;
    m_original_phone_number_isValid = false;

    m_phone_type_isSet = false;
    m_phone_type_isValid = false;

    m_phone_type_code_isSet = false;
    m_phone_type_code_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_zip_code_isSet = false;
    m_zip_code_isValid = false;
}

void OAINumberValidateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberValidateResponse::fromJsonObject(QJsonObject json) {

    m_carrier_isValid = ::OpenAPI::fromJsonValue(m_carrier, json[QString("Carrier")]);
    m_carrier_isSet = !json[QString("Carrier")].isNull() && m_carrier_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_cleansed_phone_number_e164_isValid = ::OpenAPI::fromJsonValue(m_cleansed_phone_number_e164, json[QString("CleansedPhoneNumberE164")]);
    m_cleansed_phone_number_e164_isSet = !json[QString("CleansedPhoneNumberE164")].isNull() && m_cleansed_phone_number_e164_isValid;

    m_cleansed_phone_number_national_isValid = ::OpenAPI::fromJsonValue(m_cleansed_phone_number_national, json[QString("CleansedPhoneNumberNational")]);
    m_cleansed_phone_number_national_isSet = !json[QString("CleansedPhoneNumberNational")].isNull() && m_cleansed_phone_number_national_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_country_code_iso2_isValid = ::OpenAPI::fromJsonValue(m_country_code_iso2, json[QString("CountryCodeIso2")]);
    m_country_code_iso2_isSet = !json[QString("CountryCodeIso2")].isNull() && m_country_code_iso2_isValid;

    m_country_code_numeric_isValid = ::OpenAPI::fromJsonValue(m_country_code_numeric, json[QString("CountryCodeNumeric")]);
    m_country_code_numeric_isSet = !json[QString("CountryCodeNumeric")].isNull() && m_country_code_numeric_isValid;

    m_county_isValid = ::OpenAPI::fromJsonValue(m_county, json[QString("County")]);
    m_county_isSet = !json[QString("County")].isNull() && m_county_isValid;

    m_original_country_code_iso2_isValid = ::OpenAPI::fromJsonValue(m_original_country_code_iso2, json[QString("OriginalCountryCodeIso2")]);
    m_original_country_code_iso2_isSet = !json[QString("OriginalCountryCodeIso2")].isNull() && m_original_country_code_iso2_isValid;

    m_original_phone_number_isValid = ::OpenAPI::fromJsonValue(m_original_phone_number, json[QString("OriginalPhoneNumber")]);
    m_original_phone_number_isSet = !json[QString("OriginalPhoneNumber")].isNull() && m_original_phone_number_isValid;

    m_phone_type_isValid = ::OpenAPI::fromJsonValue(m_phone_type, json[QString("PhoneType")]);
    m_phone_type_isSet = !json[QString("PhoneType")].isNull() && m_phone_type_isValid;

    m_phone_type_code_isValid = ::OpenAPI::fromJsonValue(m_phone_type_code, json[QString("PhoneTypeCode")]);
    m_phone_type_code_isSet = !json[QString("PhoneTypeCode")].isNull() && m_phone_type_code_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("Timezone")]);
    m_timezone_isSet = !json[QString("Timezone")].isNull() && m_timezone_isValid;

    m_zip_code_isValid = ::OpenAPI::fromJsonValue(m_zip_code, json[QString("ZipCode")]);
    m_zip_code_isSet = !json[QString("ZipCode")].isNull() && m_zip_code_isValid;
}

QString OAINumberValidateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberValidateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_carrier_isSet) {
        obj.insert(QString("Carrier"), ::OpenAPI::toJsonValue(m_carrier));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_cleansed_phone_number_e164_isSet) {
        obj.insert(QString("CleansedPhoneNumberE164"), ::OpenAPI::toJsonValue(m_cleansed_phone_number_e164));
    }
    if (m_cleansed_phone_number_national_isSet) {
        obj.insert(QString("CleansedPhoneNumberNational"), ::OpenAPI::toJsonValue(m_cleansed_phone_number_national));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_iso2_isSet) {
        obj.insert(QString("CountryCodeIso2"), ::OpenAPI::toJsonValue(m_country_code_iso2));
    }
    if (m_country_code_numeric_isSet) {
        obj.insert(QString("CountryCodeNumeric"), ::OpenAPI::toJsonValue(m_country_code_numeric));
    }
    if (m_county_isSet) {
        obj.insert(QString("County"), ::OpenAPI::toJsonValue(m_county));
    }
    if (m_original_country_code_iso2_isSet) {
        obj.insert(QString("OriginalCountryCodeIso2"), ::OpenAPI::toJsonValue(m_original_country_code_iso2));
    }
    if (m_original_phone_number_isSet) {
        obj.insert(QString("OriginalPhoneNumber"), ::OpenAPI::toJsonValue(m_original_phone_number));
    }
    if (m_phone_type_isSet) {
        obj.insert(QString("PhoneType"), ::OpenAPI::toJsonValue(m_phone_type));
    }
    if (m_phone_type_code_isSet) {
        obj.insert(QString("PhoneTypeCode"), ::OpenAPI::toJsonValue(m_phone_type_code));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("Timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_zip_code_isSet) {
        obj.insert(QString("ZipCode"), ::OpenAPI::toJsonValue(m_zip_code));
    }
    return obj;
}

QString OAINumberValidateResponse::getCarrier() const {
    return m_carrier;
}
void OAINumberValidateResponse::setCarrier(const QString &carrier) {
    m_carrier = carrier;
    m_carrier_isSet = true;
}

bool OAINumberValidateResponse::is_carrier_Set() const{
    return m_carrier_isSet;
}

bool OAINumberValidateResponse::is_carrier_Valid() const{
    return m_carrier_isValid;
}

QString OAINumberValidateResponse::getCity() const {
    return m_city;
}
void OAINumberValidateResponse::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAINumberValidateResponse::is_city_Set() const{
    return m_city_isSet;
}

bool OAINumberValidateResponse::is_city_Valid() const{
    return m_city_isValid;
}

QString OAINumberValidateResponse::getCleansedPhoneNumberE164() const {
    return m_cleansed_phone_number_e164;
}
void OAINumberValidateResponse::setCleansedPhoneNumberE164(const QString &cleansed_phone_number_e164) {
    m_cleansed_phone_number_e164 = cleansed_phone_number_e164;
    m_cleansed_phone_number_e164_isSet = true;
}

bool OAINumberValidateResponse::is_cleansed_phone_number_e164_Set() const{
    return m_cleansed_phone_number_e164_isSet;
}

bool OAINumberValidateResponse::is_cleansed_phone_number_e164_Valid() const{
    return m_cleansed_phone_number_e164_isValid;
}

QString OAINumberValidateResponse::getCleansedPhoneNumberNational() const {
    return m_cleansed_phone_number_national;
}
void OAINumberValidateResponse::setCleansedPhoneNumberNational(const QString &cleansed_phone_number_national) {
    m_cleansed_phone_number_national = cleansed_phone_number_national;
    m_cleansed_phone_number_national_isSet = true;
}

bool OAINumberValidateResponse::is_cleansed_phone_number_national_Set() const{
    return m_cleansed_phone_number_national_isSet;
}

bool OAINumberValidateResponse::is_cleansed_phone_number_national_Valid() const{
    return m_cleansed_phone_number_national_isValid;
}

QString OAINumberValidateResponse::getCountry() const {
    return m_country;
}
void OAINumberValidateResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAINumberValidateResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAINumberValidateResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAINumberValidateResponse::getCountryCodeIso2() const {
    return m_country_code_iso2;
}
void OAINumberValidateResponse::setCountryCodeIso2(const QString &country_code_iso2) {
    m_country_code_iso2 = country_code_iso2;
    m_country_code_iso2_isSet = true;
}

bool OAINumberValidateResponse::is_country_code_iso2_Set() const{
    return m_country_code_iso2_isSet;
}

bool OAINumberValidateResponse::is_country_code_iso2_Valid() const{
    return m_country_code_iso2_isValid;
}

QString OAINumberValidateResponse::getCountryCodeNumeric() const {
    return m_country_code_numeric;
}
void OAINumberValidateResponse::setCountryCodeNumeric(const QString &country_code_numeric) {
    m_country_code_numeric = country_code_numeric;
    m_country_code_numeric_isSet = true;
}

bool OAINumberValidateResponse::is_country_code_numeric_Set() const{
    return m_country_code_numeric_isSet;
}

bool OAINumberValidateResponse::is_country_code_numeric_Valid() const{
    return m_country_code_numeric_isValid;
}

QString OAINumberValidateResponse::getCounty() const {
    return m_county;
}
void OAINumberValidateResponse::setCounty(const QString &county) {
    m_county = county;
    m_county_isSet = true;
}

bool OAINumberValidateResponse::is_county_Set() const{
    return m_county_isSet;
}

bool OAINumberValidateResponse::is_county_Valid() const{
    return m_county_isValid;
}

QString OAINumberValidateResponse::getOriginalCountryCodeIso2() const {
    return m_original_country_code_iso2;
}
void OAINumberValidateResponse::setOriginalCountryCodeIso2(const QString &original_country_code_iso2) {
    m_original_country_code_iso2 = original_country_code_iso2;
    m_original_country_code_iso2_isSet = true;
}

bool OAINumberValidateResponse::is_original_country_code_iso2_Set() const{
    return m_original_country_code_iso2_isSet;
}

bool OAINumberValidateResponse::is_original_country_code_iso2_Valid() const{
    return m_original_country_code_iso2_isValid;
}

QString OAINumberValidateResponse::getOriginalPhoneNumber() const {
    return m_original_phone_number;
}
void OAINumberValidateResponse::setOriginalPhoneNumber(const QString &original_phone_number) {
    m_original_phone_number = original_phone_number;
    m_original_phone_number_isSet = true;
}

bool OAINumberValidateResponse::is_original_phone_number_Set() const{
    return m_original_phone_number_isSet;
}

bool OAINumberValidateResponse::is_original_phone_number_Valid() const{
    return m_original_phone_number_isValid;
}

QString OAINumberValidateResponse::getPhoneType() const {
    return m_phone_type;
}
void OAINumberValidateResponse::setPhoneType(const QString &phone_type) {
    m_phone_type = phone_type;
    m_phone_type_isSet = true;
}

bool OAINumberValidateResponse::is_phone_type_Set() const{
    return m_phone_type_isSet;
}

bool OAINumberValidateResponse::is_phone_type_Valid() const{
    return m_phone_type_isValid;
}

qint32 OAINumberValidateResponse::getPhoneTypeCode() const {
    return m_phone_type_code;
}
void OAINumberValidateResponse::setPhoneTypeCode(const qint32 &phone_type_code) {
    m_phone_type_code = phone_type_code;
    m_phone_type_code_isSet = true;
}

bool OAINumberValidateResponse::is_phone_type_code_Set() const{
    return m_phone_type_code_isSet;
}

bool OAINumberValidateResponse::is_phone_type_code_Valid() const{
    return m_phone_type_code_isValid;
}

QString OAINumberValidateResponse::getTimezone() const {
    return m_timezone;
}
void OAINumberValidateResponse::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAINumberValidateResponse::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAINumberValidateResponse::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAINumberValidateResponse::getZipCode() const {
    return m_zip_code;
}
void OAINumberValidateResponse::setZipCode(const QString &zip_code) {
    m_zip_code = zip_code;
    m_zip_code_isSet = true;
}

bool OAINumberValidateResponse::is_zip_code_Set() const{
    return m_zip_code_isSet;
}

bool OAINumberValidateResponse::is_zip_code_Valid() const{
    return m_zip_code_isValid;
}

bool OAINumberValidateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleansed_phone_number_e164_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cleansed_phone_number_national_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_numeric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_county_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_country_code_iso2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberValidateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
