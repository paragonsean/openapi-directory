/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivity::OAIActivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivity::OAIActivity() {
    this->initializeModel();
}

OAIActivity::~OAIActivity() {}

void OAIActivity::initializeModel() {

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_conditional_split_isSet = false;
    m_conditional_split_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_holdout_isSet = false;
    m_holdout_isValid = false;

    m_multi_condition_isSet = false;
    m_multi_condition_isValid = false;

    m_push_isSet = false;
    m_push_isValid = false;

    m_random_split_isSet = false;
    m_random_split_isValid = false;

    m_sms_isSet = false;
    m_sms_isValid = false;

    m_wait_isSet = false;
    m_wait_isValid = false;

    m_contact_center_isSet = false;
    m_contact_center_isValid = false;
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("CUSTOM")]);
    m_custom_isSet = !json[QString("CUSTOM")].isNull() && m_custom_isValid;

    m_conditional_split_isValid = ::OpenAPI::fromJsonValue(m_conditional_split, json[QString("ConditionalSplit")]);
    m_conditional_split_isSet = !json[QString("ConditionalSplit")].isNull() && m_conditional_split_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("EMAIL")]);
    m_email_isSet = !json[QString("EMAIL")].isNull() && m_email_isValid;

    m_holdout_isValid = ::OpenAPI::fromJsonValue(m_holdout, json[QString("Holdout")]);
    m_holdout_isSet = !json[QString("Holdout")].isNull() && m_holdout_isValid;

    m_multi_condition_isValid = ::OpenAPI::fromJsonValue(m_multi_condition, json[QString("MultiCondition")]);
    m_multi_condition_isSet = !json[QString("MultiCondition")].isNull() && m_multi_condition_isValid;

    m_push_isValid = ::OpenAPI::fromJsonValue(m_push, json[QString("PUSH")]);
    m_push_isSet = !json[QString("PUSH")].isNull() && m_push_isValid;

    m_random_split_isValid = ::OpenAPI::fromJsonValue(m_random_split, json[QString("RandomSplit")]);
    m_random_split_isSet = !json[QString("RandomSplit")].isNull() && m_random_split_isValid;

    m_sms_isValid = ::OpenAPI::fromJsonValue(m_sms, json[QString("SMS")]);
    m_sms_isSet = !json[QString("SMS")].isNull() && m_sms_isValid;

    m_wait_isValid = ::OpenAPI::fromJsonValue(m_wait, json[QString("Wait")]);
    m_wait_isSet = !json[QString("Wait")].isNull() && m_wait_isValid;

    m_contact_center_isValid = ::OpenAPI::fromJsonValue(m_contact_center, json[QString("ContactCenter")]);
    m_contact_center_isSet = !json[QString("ContactCenter")].isNull() && m_contact_center_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    QJsonObject obj;
    if (m_custom.isSet()) {
        obj.insert(QString("CUSTOM"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_conditional_split.isSet()) {
        obj.insert(QString("ConditionalSplit"), ::OpenAPI::toJsonValue(m_conditional_split));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_email.isSet()) {
        obj.insert(QString("EMAIL"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_holdout.isSet()) {
        obj.insert(QString("Holdout"), ::OpenAPI::toJsonValue(m_holdout));
    }
    if (m_multi_condition.isSet()) {
        obj.insert(QString("MultiCondition"), ::OpenAPI::toJsonValue(m_multi_condition));
    }
    if (m_push.isSet()) {
        obj.insert(QString("PUSH"), ::OpenAPI::toJsonValue(m_push));
    }
    if (m_random_split.isSet()) {
        obj.insert(QString("RandomSplit"), ::OpenAPI::toJsonValue(m_random_split));
    }
    if (m_sms.isSet()) {
        obj.insert(QString("SMS"), ::OpenAPI::toJsonValue(m_sms));
    }
    if (m_wait.isSet()) {
        obj.insert(QString("Wait"), ::OpenAPI::toJsonValue(m_wait));
    }
    if (m_contact_center.isSet()) {
        obj.insert(QString("ContactCenter"), ::OpenAPI::toJsonValue(m_contact_center));
    }
    return obj;
}

OAIActivity_CUSTOM OAIActivity::getCustom() const {
    return m_custom;
}
void OAIActivity::setCustom(const OAIActivity_CUSTOM &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIActivity::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIActivity::is_custom_Valid() const{
    return m_custom_isValid;
}

OAIActivity_ConditionalSplit OAIActivity::getConditionalSplit() const {
    return m_conditional_split;
}
void OAIActivity::setConditionalSplit(const OAIActivity_ConditionalSplit &conditional_split) {
    m_conditional_split = conditional_split;
    m_conditional_split_isSet = true;
}

bool OAIActivity::is_conditional_split_Set() const{
    return m_conditional_split_isSet;
}

bool OAIActivity::is_conditional_split_Valid() const{
    return m_conditional_split_isValid;
}

QString OAIActivity::getDescription() const {
    return m_description;
}
void OAIActivity::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivity::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivity::is_description_Valid() const{
    return m_description_isValid;
}

OAIActivity_EMAIL OAIActivity::getEmail() const {
    return m_email;
}
void OAIActivity::setEmail(const OAIActivity_EMAIL &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIActivity::is_email_Set() const{
    return m_email_isSet;
}

bool OAIActivity::is_email_Valid() const{
    return m_email_isValid;
}

OAIActivity_Holdout OAIActivity::getHoldout() const {
    return m_holdout;
}
void OAIActivity::setHoldout(const OAIActivity_Holdout &holdout) {
    m_holdout = holdout;
    m_holdout_isSet = true;
}

bool OAIActivity::is_holdout_Set() const{
    return m_holdout_isSet;
}

bool OAIActivity::is_holdout_Valid() const{
    return m_holdout_isValid;
}

OAIActivity_MultiCondition OAIActivity::getMultiCondition() const {
    return m_multi_condition;
}
void OAIActivity::setMultiCondition(const OAIActivity_MultiCondition &multi_condition) {
    m_multi_condition = multi_condition;
    m_multi_condition_isSet = true;
}

bool OAIActivity::is_multi_condition_Set() const{
    return m_multi_condition_isSet;
}

bool OAIActivity::is_multi_condition_Valid() const{
    return m_multi_condition_isValid;
}

OAIActivity_PUSH OAIActivity::getPush() const {
    return m_push;
}
void OAIActivity::setPush(const OAIActivity_PUSH &push) {
    m_push = push;
    m_push_isSet = true;
}

bool OAIActivity::is_push_Set() const{
    return m_push_isSet;
}

bool OAIActivity::is_push_Valid() const{
    return m_push_isValid;
}

OAIActivity_RandomSplit OAIActivity::getRandomSplit() const {
    return m_random_split;
}
void OAIActivity::setRandomSplit(const OAIActivity_RandomSplit &random_split) {
    m_random_split = random_split;
    m_random_split_isSet = true;
}

bool OAIActivity::is_random_split_Set() const{
    return m_random_split_isSet;
}

bool OAIActivity::is_random_split_Valid() const{
    return m_random_split_isValid;
}

OAIActivity_SMS OAIActivity::getSms() const {
    return m_sms;
}
void OAIActivity::setSms(const OAIActivity_SMS &sms) {
    m_sms = sms;
    m_sms_isSet = true;
}

bool OAIActivity::is_sms_Set() const{
    return m_sms_isSet;
}

bool OAIActivity::is_sms_Valid() const{
    return m_sms_isValid;
}

OAIActivity_Wait OAIActivity::getWait() const {
    return m_wait;
}
void OAIActivity::setWait(const OAIActivity_Wait &wait) {
    m_wait = wait;
    m_wait_isSet = true;
}

bool OAIActivity::is_wait_Set() const{
    return m_wait_isSet;
}

bool OAIActivity::is_wait_Valid() const{
    return m_wait_isValid;
}

OAIActivity_ContactCenter OAIActivity::getContactCenter() const {
    return m_contact_center;
}
void OAIActivity::setContactCenter(const OAIActivity_ContactCenter &contact_center) {
    m_contact_center = contact_center;
    m_contact_center_isSet = true;
}

bool OAIActivity::is_contact_center_Set() const{
    return m_contact_center_isSet;
}

bool OAIActivity::is_contact_center_Valid() const{
    return m_contact_center_isValid;
}

bool OAIActivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_holdout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_push.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_random_split.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_center.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
