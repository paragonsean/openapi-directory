/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendUsersMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendUsersMessageResponse::OAISendUsersMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendUsersMessageResponse::OAISendUsersMessageResponse() {
    this->initializeModel();
}

OAISendUsersMessageResponse::~OAISendUsersMessageResponse() {}

void OAISendUsersMessageResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAISendUsersMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendUsersMessageResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestId")]);
    m_request_id_isSet = !json[QString("RequestId")].isNull() && m_request_id_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;
}

QString OAISendUsersMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendUsersMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_result.isSet()) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAISendUsersMessageResponse::getApplicationId() const {
    return m_application_id;
}
void OAISendUsersMessageResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAISendUsersMessageResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAISendUsersMessageResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAISendUsersMessageResponse::getRequestId() const {
    return m_request_id;
}
void OAISendUsersMessageResponse::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISendUsersMessageResponse::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISendUsersMessageResponse::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QMap OAISendUsersMessageResponse::getResult() const {
    return m_result;
}
void OAISendUsersMessageResponse::setResult(const QMap &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAISendUsersMessageResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAISendUsersMessageResponse::is_result_Valid() const{
    return m_result_isValid;
}

bool OAISendUsersMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendUsersMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && true;
}

} // namespace OpenAPI
