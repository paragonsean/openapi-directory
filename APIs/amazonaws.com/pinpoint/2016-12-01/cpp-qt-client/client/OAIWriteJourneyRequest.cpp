/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWriteJourneyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWriteJourneyRequest::OAIWriteJourneyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWriteJourneyRequest::OAIWriteJourneyRequest() {
    this->initializeModel();
}

OAIWriteJourneyRequest::~OAIWriteJourneyRequest() {}

void OAIWriteJourneyRequest::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_local_time_isSet = false;
    m_local_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_quiet_time_isSet = false;
    m_quiet_time_isValid = false;

    m_refresh_frequency_isSet = false;
    m_refresh_frequency_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_start_activity_isSet = false;
    m_start_activity_isValid = false;

    m_start_condition_isSet = false;
    m_start_condition_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_wait_for_quiet_time_isSet = false;
    m_wait_for_quiet_time_isValid = false;

    m_refresh_on_segment_update_isSet = false;
    m_refresh_on_segment_update_isValid = false;

    m_journey_channel_settings_isSet = false;
    m_journey_channel_settings_isValid = false;

    m_sending_schedule_isSet = false;
    m_sending_schedule_isValid = false;

    m_open_hours_isSet = false;
    m_open_hours_isValid = false;

    m_closed_days_isSet = false;
    m_closed_days_isValid = false;

    m_timezone_estimation_methods_isSet = false;
    m_timezone_estimation_methods_isValid = false;
}

void OAIWriteJourneyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWriteJourneyRequest::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("Activities")]);
    m_activities_isSet = !json[QString("Activities")].isNull() && m_activities_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("Limits")]);
    m_limits_isSet = !json[QString("Limits")].isNull() && m_limits_isValid;

    m_local_time_isValid = ::OpenAPI::fromJsonValue(m_local_time, json[QString("LocalTime")]);
    m_local_time_isSet = !json[QString("LocalTime")].isNull() && m_local_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_quiet_time_isValid = ::OpenAPI::fromJsonValue(m_quiet_time, json[QString("QuietTime")]);
    m_quiet_time_isSet = !json[QString("QuietTime")].isNull() && m_quiet_time_isValid;

    m_refresh_frequency_isValid = ::OpenAPI::fromJsonValue(m_refresh_frequency, json[QString("RefreshFrequency")]);
    m_refresh_frequency_isSet = !json[QString("RefreshFrequency")].isNull() && m_refresh_frequency_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_start_activity_isValid = ::OpenAPI::fromJsonValue(m_start_activity, json[QString("StartActivity")]);
    m_start_activity_isSet = !json[QString("StartActivity")].isNull() && m_start_activity_isValid;

    m_start_condition_isValid = ::OpenAPI::fromJsonValue(m_start_condition, json[QString("StartCondition")]);
    m_start_condition_isSet = !json[QString("StartCondition")].isNull() && m_start_condition_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_wait_for_quiet_time_isValid = ::OpenAPI::fromJsonValue(m_wait_for_quiet_time, json[QString("WaitForQuietTime")]);
    m_wait_for_quiet_time_isSet = !json[QString("WaitForQuietTime")].isNull() && m_wait_for_quiet_time_isValid;

    m_refresh_on_segment_update_isValid = ::OpenAPI::fromJsonValue(m_refresh_on_segment_update, json[QString("RefreshOnSegmentUpdate")]);
    m_refresh_on_segment_update_isSet = !json[QString("RefreshOnSegmentUpdate")].isNull() && m_refresh_on_segment_update_isValid;

    m_journey_channel_settings_isValid = ::OpenAPI::fromJsonValue(m_journey_channel_settings, json[QString("JourneyChannelSettings")]);
    m_journey_channel_settings_isSet = !json[QString("JourneyChannelSettings")].isNull() && m_journey_channel_settings_isValid;

    m_sending_schedule_isValid = ::OpenAPI::fromJsonValue(m_sending_schedule, json[QString("SendingSchedule")]);
    m_sending_schedule_isSet = !json[QString("SendingSchedule")].isNull() && m_sending_schedule_isValid;

    m_open_hours_isValid = ::OpenAPI::fromJsonValue(m_open_hours, json[QString("OpenHours")]);
    m_open_hours_isSet = !json[QString("OpenHours")].isNull() && m_open_hours_isValid;

    m_closed_days_isValid = ::OpenAPI::fromJsonValue(m_closed_days, json[QString("ClosedDays")]);
    m_closed_days_isSet = !json[QString("ClosedDays")].isNull() && m_closed_days_isValid;

    m_timezone_estimation_methods_isValid = ::OpenAPI::fromJsonValue(m_timezone_estimation_methods, json[QString("TimezoneEstimationMethods")]);
    m_timezone_estimation_methods_isSet = !json[QString("TimezoneEstimationMethods")].isNull() && m_timezone_estimation_methods_isValid;
}

QString OAIWriteJourneyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWriteJourneyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_activities.isSet()) {
        obj.insert(QString("Activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_limits.isSet()) {
        obj.insert(QString("Limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_local_time_isSet) {
        obj.insert(QString("LocalTime"), ::OpenAPI::toJsonValue(m_local_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_quiet_time.isSet()) {
        obj.insert(QString("QuietTime"), ::OpenAPI::toJsonValue(m_quiet_time));
    }
    if (m_refresh_frequency_isSet) {
        obj.insert(QString("RefreshFrequency"), ::OpenAPI::toJsonValue(m_refresh_frequency));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_start_activity_isSet) {
        obj.insert(QString("StartActivity"), ::OpenAPI::toJsonValue(m_start_activity));
    }
    if (m_start_condition.isSet()) {
        obj.insert(QString("StartCondition"), ::OpenAPI::toJsonValue(m_start_condition));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_wait_for_quiet_time_isSet) {
        obj.insert(QString("WaitForQuietTime"), ::OpenAPI::toJsonValue(m_wait_for_quiet_time));
    }
    if (m_refresh_on_segment_update_isSet) {
        obj.insert(QString("RefreshOnSegmentUpdate"), ::OpenAPI::toJsonValue(m_refresh_on_segment_update));
    }
    if (m_journey_channel_settings.isSet()) {
        obj.insert(QString("JourneyChannelSettings"), ::OpenAPI::toJsonValue(m_journey_channel_settings));
    }
    if (m_sending_schedule_isSet) {
        obj.insert(QString("SendingSchedule"), ::OpenAPI::toJsonValue(m_sending_schedule));
    }
    if (m_open_hours.isSet()) {
        obj.insert(QString("OpenHours"), ::OpenAPI::toJsonValue(m_open_hours));
    }
    if (m_closed_days.isSet()) {
        obj.insert(QString("ClosedDays"), ::OpenAPI::toJsonValue(m_closed_days));
    }
    if (m_timezone_estimation_methods.isSet()) {
        obj.insert(QString("TimezoneEstimationMethods"), ::OpenAPI::toJsonValue(m_timezone_estimation_methods));
    }
    return obj;
}

QMap OAIWriteJourneyRequest::getActivities() const {
    return m_activities;
}
void OAIWriteJourneyRequest::setActivities(const QMap &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIWriteJourneyRequest::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIWriteJourneyRequest::is_activities_Valid() const{
    return m_activities_isValid;
}

QString OAIWriteJourneyRequest::getCreationDate() const {
    return m_creation_date;
}
void OAIWriteJourneyRequest::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIWriteJourneyRequest::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIWriteJourneyRequest::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIWriteJourneyRequest::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIWriteJourneyRequest::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIWriteJourneyRequest::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIWriteJourneyRequest::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_Limits OAIWriteJourneyRequest::getLimits() const {
    return m_limits;
}
void OAIWriteJourneyRequest::setLimits(const OAICreateJourney_request_WriteJourneyRequest_Limits &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIWriteJourneyRequest::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIWriteJourneyRequest::is_limits_Valid() const{
    return m_limits_isValid;
}

bool OAIWriteJourneyRequest::getLocalTime() const {
    return m_local_time;
}
void OAIWriteJourneyRequest::setLocalTime(const bool &local_time) {
    m_local_time = local_time;
    m_local_time_isSet = true;
}

bool OAIWriteJourneyRequest::is_local_time_Set() const{
    return m_local_time_isSet;
}

bool OAIWriteJourneyRequest::is_local_time_Valid() const{
    return m_local_time_isValid;
}

QString OAIWriteJourneyRequest::getName() const {
    return m_name;
}
void OAIWriteJourneyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWriteJourneyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWriteJourneyRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_QuietTime OAIWriteJourneyRequest::getQuietTime() const {
    return m_quiet_time;
}
void OAIWriteJourneyRequest::setQuietTime(const OAICreateJourney_request_WriteJourneyRequest_QuietTime &quiet_time) {
    m_quiet_time = quiet_time;
    m_quiet_time_isSet = true;
}

bool OAIWriteJourneyRequest::is_quiet_time_Set() const{
    return m_quiet_time_isSet;
}

bool OAIWriteJourneyRequest::is_quiet_time_Valid() const{
    return m_quiet_time_isValid;
}

QString OAIWriteJourneyRequest::getRefreshFrequency() const {
    return m_refresh_frequency;
}
void OAIWriteJourneyRequest::setRefreshFrequency(const QString &refresh_frequency) {
    m_refresh_frequency = refresh_frequency;
    m_refresh_frequency_isSet = true;
}

bool OAIWriteJourneyRequest::is_refresh_frequency_Set() const{
    return m_refresh_frequency_isSet;
}

bool OAIWriteJourneyRequest::is_refresh_frequency_Valid() const{
    return m_refresh_frequency_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_Schedule OAIWriteJourneyRequest::getSchedule() const {
    return m_schedule;
}
void OAIWriteJourneyRequest::setSchedule(const OAICreateJourney_request_WriteJourneyRequest_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIWriteJourneyRequest::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIWriteJourneyRequest::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIWriteJourneyRequest::getStartActivity() const {
    return m_start_activity;
}
void OAIWriteJourneyRequest::setStartActivity(const QString &start_activity) {
    m_start_activity = start_activity;
    m_start_activity_isSet = true;
}

bool OAIWriteJourneyRequest::is_start_activity_Set() const{
    return m_start_activity_isSet;
}

bool OAIWriteJourneyRequest::is_start_activity_Valid() const{
    return m_start_activity_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_StartCondition OAIWriteJourneyRequest::getStartCondition() const {
    return m_start_condition;
}
void OAIWriteJourneyRequest::setStartCondition(const OAICreateJourney_request_WriteJourneyRequest_StartCondition &start_condition) {
    m_start_condition = start_condition;
    m_start_condition_isSet = true;
}

bool OAIWriteJourneyRequest::is_start_condition_Set() const{
    return m_start_condition_isSet;
}

bool OAIWriteJourneyRequest::is_start_condition_Valid() const{
    return m_start_condition_isValid;
}

OAIState OAIWriteJourneyRequest::getState() const {
    return m_state;
}
void OAIWriteJourneyRequest::setState(const OAIState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWriteJourneyRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWriteJourneyRequest::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIWriteJourneyRequest::getWaitForQuietTime() const {
    return m_wait_for_quiet_time;
}
void OAIWriteJourneyRequest::setWaitForQuietTime(const bool &wait_for_quiet_time) {
    m_wait_for_quiet_time = wait_for_quiet_time;
    m_wait_for_quiet_time_isSet = true;
}

bool OAIWriteJourneyRequest::is_wait_for_quiet_time_Set() const{
    return m_wait_for_quiet_time_isSet;
}

bool OAIWriteJourneyRequest::is_wait_for_quiet_time_Valid() const{
    return m_wait_for_quiet_time_isValid;
}

bool OAIWriteJourneyRequest::getRefreshOnSegmentUpdate() const {
    return m_refresh_on_segment_update;
}
void OAIWriteJourneyRequest::setRefreshOnSegmentUpdate(const bool &refresh_on_segment_update) {
    m_refresh_on_segment_update = refresh_on_segment_update;
    m_refresh_on_segment_update_isSet = true;
}

bool OAIWriteJourneyRequest::is_refresh_on_segment_update_Set() const{
    return m_refresh_on_segment_update_isSet;
}

bool OAIWriteJourneyRequest::is_refresh_on_segment_update_Valid() const{
    return m_refresh_on_segment_update_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_JourneyChannelSettings OAIWriteJourneyRequest::getJourneyChannelSettings() const {
    return m_journey_channel_settings;
}
void OAIWriteJourneyRequest::setJourneyChannelSettings(const OAICreateJourney_request_WriteJourneyRequest_JourneyChannelSettings &journey_channel_settings) {
    m_journey_channel_settings = journey_channel_settings;
    m_journey_channel_settings_isSet = true;
}

bool OAIWriteJourneyRequest::is_journey_channel_settings_Set() const{
    return m_journey_channel_settings_isSet;
}

bool OAIWriteJourneyRequest::is_journey_channel_settings_Valid() const{
    return m_journey_channel_settings_isValid;
}

bool OAIWriteJourneyRequest::getSendingSchedule() const {
    return m_sending_schedule;
}
void OAIWriteJourneyRequest::setSendingSchedule(const bool &sending_schedule) {
    m_sending_schedule = sending_schedule;
    m_sending_schedule_isSet = true;
}

bool OAIWriteJourneyRequest::is_sending_schedule_Set() const{
    return m_sending_schedule_isSet;
}

bool OAIWriteJourneyRequest::is_sending_schedule_Valid() const{
    return m_sending_schedule_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_OpenHours OAIWriteJourneyRequest::getOpenHours() const {
    return m_open_hours;
}
void OAIWriteJourneyRequest::setOpenHours(const OAICreateJourney_request_WriteJourneyRequest_OpenHours &open_hours) {
    m_open_hours = open_hours;
    m_open_hours_isSet = true;
}

bool OAIWriteJourneyRequest::is_open_hours_Set() const{
    return m_open_hours_isSet;
}

bool OAIWriteJourneyRequest::is_open_hours_Valid() const{
    return m_open_hours_isValid;
}

OAICreateJourney_request_WriteJourneyRequest_ClosedDays OAIWriteJourneyRequest::getClosedDays() const {
    return m_closed_days;
}
void OAIWriteJourneyRequest::setClosedDays(const OAICreateJourney_request_WriteJourneyRequest_ClosedDays &closed_days) {
    m_closed_days = closed_days;
    m_closed_days_isSet = true;
}

bool OAIWriteJourneyRequest::is_closed_days_Set() const{
    return m_closed_days_isSet;
}

bool OAIWriteJourneyRequest::is_closed_days_Valid() const{
    return m_closed_days_isValid;
}

QList OAIWriteJourneyRequest::getTimezoneEstimationMethods() const {
    return m_timezone_estimation_methods;
}
void OAIWriteJourneyRequest::setTimezoneEstimationMethods(const QList &timezone_estimation_methods) {
    m_timezone_estimation_methods = timezone_estimation_methods;
    m_timezone_estimation_methods_isSet = true;
}

bool OAIWriteJourneyRequest::is_timezone_estimation_methods_Set() const{
    return m_timezone_estimation_methods_isSet;
}

bool OAIWriteJourneyRequest::is_timezone_estimation_methods_Valid() const{
    return m_timezone_estimation_methods_isValid;
}

bool OAIWriteJourneyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quiet_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_quiet_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_on_segment_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_journey_channel_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sending_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_hours.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_days.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_estimation_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWriteJourneyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
