/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPNSMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPNSMessage::OAIAPNSMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPNSMessage::OAIAPNSMessage() {
    this->initializeModel();
}

OAIAPNSMessage::~OAIAPNSMessage() {}

void OAIAPNSMessage::initializeModel() {

    m_apns_push_type_isSet = false;
    m_apns_push_type_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_badge_isSet = false;
    m_badge_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_collapse_id_isSet = false;
    m_collapse_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_media_url_isSet = false;
    m_media_url_isValid = false;

    m_preferred_authentication_method_isSet = false;
    m_preferred_authentication_method_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_raw_content_isSet = false;
    m_raw_content_isValid = false;

    m_silent_push_isSet = false;
    m_silent_push_isValid = false;

    m_sound_isSet = false;
    m_sound_isValid = false;

    m_substitutions_isSet = false;
    m_substitutions_isValid = false;

    m_thread_id_isSet = false;
    m_thread_id_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAPNSMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPNSMessage::fromJsonObject(QJsonObject json) {

    m_apns_push_type_isValid = ::OpenAPI::fromJsonValue(m_apns_push_type, json[QString("APNSPushType")]);
    m_apns_push_type_isSet = !json[QString("APNSPushType")].isNull() && m_apns_push_type_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_badge_isValid = ::OpenAPI::fromJsonValue(m_badge, json[QString("Badge")]);
    m_badge_isSet = !json[QString("Badge")].isNull() && m_badge_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("Category")]);
    m_category_isSet = !json[QString("Category")].isNull() && m_category_isValid;

    m_collapse_id_isValid = ::OpenAPI::fromJsonValue(m_collapse_id, json[QString("CollapseId")]);
    m_collapse_id_isSet = !json[QString("CollapseId")].isNull() && m_collapse_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_media_url_isValid = ::OpenAPI::fromJsonValue(m_media_url, json[QString("MediaUrl")]);
    m_media_url_isSet = !json[QString("MediaUrl")].isNull() && m_media_url_isValid;

    m_preferred_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_preferred_authentication_method, json[QString("PreferredAuthenticationMethod")]);
    m_preferred_authentication_method_isSet = !json[QString("PreferredAuthenticationMethod")].isNull() && m_preferred_authentication_method_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_raw_content_isValid = ::OpenAPI::fromJsonValue(m_raw_content, json[QString("RawContent")]);
    m_raw_content_isSet = !json[QString("RawContent")].isNull() && m_raw_content_isValid;

    m_silent_push_isValid = ::OpenAPI::fromJsonValue(m_silent_push, json[QString("SilentPush")]);
    m_silent_push_isSet = !json[QString("SilentPush")].isNull() && m_silent_push_isValid;

    m_sound_isValid = ::OpenAPI::fromJsonValue(m_sound, json[QString("Sound")]);
    m_sound_isSet = !json[QString("Sound")].isNull() && m_sound_isValid;

    m_substitutions_isValid = ::OpenAPI::fromJsonValue(m_substitutions, json[QString("Substitutions")]);
    m_substitutions_isSet = !json[QString("Substitutions")].isNull() && m_substitutions_isValid;

    m_thread_id_isValid = ::OpenAPI::fromJsonValue(m_thread_id, json[QString("ThreadId")]);
    m_thread_id_isSet = !json[QString("ThreadId")].isNull() && m_thread_id_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("TimeToLive")]);
    m_time_to_live_isSet = !json[QString("TimeToLive")].isNull() && m_time_to_live_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAIAPNSMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPNSMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_apns_push_type_isSet) {
        obj.insert(QString("APNSPushType"), ::OpenAPI::toJsonValue(m_apns_push_type));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_badge_isSet) {
        obj.insert(QString("Badge"), ::OpenAPI::toJsonValue(m_badge));
    }
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_category_isSet) {
        obj.insert(QString("Category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_collapse_id_isSet) {
        obj.insert(QString("CollapseId"), ::OpenAPI::toJsonValue(m_collapse_id));
    }
    if (m_data.isSet()) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_media_url_isSet) {
        obj.insert(QString("MediaUrl"), ::OpenAPI::toJsonValue(m_media_url));
    }
    if (m_preferred_authentication_method_isSet) {
        obj.insert(QString("PreferredAuthenticationMethod"), ::OpenAPI::toJsonValue(m_preferred_authentication_method));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_raw_content_isSet) {
        obj.insert(QString("RawContent"), ::OpenAPI::toJsonValue(m_raw_content));
    }
    if (m_silent_push_isSet) {
        obj.insert(QString("SilentPush"), ::OpenAPI::toJsonValue(m_silent_push));
    }
    if (m_sound_isSet) {
        obj.insert(QString("Sound"), ::OpenAPI::toJsonValue(m_sound));
    }
    if (m_substitutions.isSet()) {
        obj.insert(QString("Substitutions"), ::OpenAPI::toJsonValue(m_substitutions));
    }
    if (m_thread_id_isSet) {
        obj.insert(QString("ThreadId"), ::OpenAPI::toJsonValue(m_thread_id));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("TimeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAPNSMessage::getApnsPushType() const {
    return m_apns_push_type;
}
void OAIAPNSMessage::setApnsPushType(const QString &apns_push_type) {
    m_apns_push_type = apns_push_type;
    m_apns_push_type_isSet = true;
}

bool OAIAPNSMessage::is_apns_push_type_Set() const{
    return m_apns_push_type_isSet;
}

bool OAIAPNSMessage::is_apns_push_type_Valid() const{
    return m_apns_push_type_isValid;
}

OAIAction OAIAPNSMessage::getAction() const {
    return m_action;
}
void OAIAPNSMessage::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAPNSMessage::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAPNSMessage::is_action_Valid() const{
    return m_action_isValid;
}

qint32 OAIAPNSMessage::getBadge() const {
    return m_badge;
}
void OAIAPNSMessage::setBadge(const qint32 &badge) {
    m_badge = badge;
    m_badge_isSet = true;
}

bool OAIAPNSMessage::is_badge_Set() const{
    return m_badge_isSet;
}

bool OAIAPNSMessage::is_badge_Valid() const{
    return m_badge_isValid;
}

QString OAIAPNSMessage::getBody() const {
    return m_body;
}
void OAIAPNSMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIAPNSMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAIAPNSMessage::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIAPNSMessage::getCategory() const {
    return m_category;
}
void OAIAPNSMessage::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAPNSMessage::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAPNSMessage::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIAPNSMessage::getCollapseId() const {
    return m_collapse_id;
}
void OAIAPNSMessage::setCollapseId(const QString &collapse_id) {
    m_collapse_id = collapse_id;
    m_collapse_id_isSet = true;
}

bool OAIAPNSMessage::is_collapse_id_Set() const{
    return m_collapse_id_isSet;
}

bool OAIAPNSMessage::is_collapse_id_Valid() const{
    return m_collapse_id_isValid;
}

QMap OAIAPNSMessage::getData() const {
    return m_data;
}
void OAIAPNSMessage::setData(const QMap &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIAPNSMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIAPNSMessage::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIAPNSMessage::getMediaUrl() const {
    return m_media_url;
}
void OAIAPNSMessage::setMediaUrl(const QString &media_url) {
    m_media_url = media_url;
    m_media_url_isSet = true;
}

bool OAIAPNSMessage::is_media_url_Set() const{
    return m_media_url_isSet;
}

bool OAIAPNSMessage::is_media_url_Valid() const{
    return m_media_url_isValid;
}

QString OAIAPNSMessage::getPreferredAuthenticationMethod() const {
    return m_preferred_authentication_method;
}
void OAIAPNSMessage::setPreferredAuthenticationMethod(const QString &preferred_authentication_method) {
    m_preferred_authentication_method = preferred_authentication_method;
    m_preferred_authentication_method_isSet = true;
}

bool OAIAPNSMessage::is_preferred_authentication_method_Set() const{
    return m_preferred_authentication_method_isSet;
}

bool OAIAPNSMessage::is_preferred_authentication_method_Valid() const{
    return m_preferred_authentication_method_isValid;
}

QString OAIAPNSMessage::getPriority() const {
    return m_priority;
}
void OAIAPNSMessage::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIAPNSMessage::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIAPNSMessage::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIAPNSMessage::getRawContent() const {
    return m_raw_content;
}
void OAIAPNSMessage::setRawContent(const QString &raw_content) {
    m_raw_content = raw_content;
    m_raw_content_isSet = true;
}

bool OAIAPNSMessage::is_raw_content_Set() const{
    return m_raw_content_isSet;
}

bool OAIAPNSMessage::is_raw_content_Valid() const{
    return m_raw_content_isValid;
}

bool OAIAPNSMessage::getSilentPush() const {
    return m_silent_push;
}
void OAIAPNSMessage::setSilentPush(const bool &silent_push) {
    m_silent_push = silent_push;
    m_silent_push_isSet = true;
}

bool OAIAPNSMessage::is_silent_push_Set() const{
    return m_silent_push_isSet;
}

bool OAIAPNSMessage::is_silent_push_Valid() const{
    return m_silent_push_isValid;
}

QString OAIAPNSMessage::getSound() const {
    return m_sound;
}
void OAIAPNSMessage::setSound(const QString &sound) {
    m_sound = sound;
    m_sound_isSet = true;
}

bool OAIAPNSMessage::is_sound_Set() const{
    return m_sound_isSet;
}

bool OAIAPNSMessage::is_sound_Valid() const{
    return m_sound_isValid;
}

QMap OAIAPNSMessage::getSubstitutions() const {
    return m_substitutions;
}
void OAIAPNSMessage::setSubstitutions(const QMap &substitutions) {
    m_substitutions = substitutions;
    m_substitutions_isSet = true;
}

bool OAIAPNSMessage::is_substitutions_Set() const{
    return m_substitutions_isSet;
}

bool OAIAPNSMessage::is_substitutions_Valid() const{
    return m_substitutions_isValid;
}

QString OAIAPNSMessage::getThreadId() const {
    return m_thread_id;
}
void OAIAPNSMessage::setThreadId(const QString &thread_id) {
    m_thread_id = thread_id;
    m_thread_id_isSet = true;
}

bool OAIAPNSMessage::is_thread_id_Set() const{
    return m_thread_id_isSet;
}

bool OAIAPNSMessage::is_thread_id_Valid() const{
    return m_thread_id_isValid;
}

qint32 OAIAPNSMessage::getTimeToLive() const {
    return m_time_to_live;
}
void OAIAPNSMessage::setTimeToLive(const qint32 &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAIAPNSMessage::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAIAPNSMessage::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

QString OAIAPNSMessage::getTitle() const {
    return m_title;
}
void OAIAPNSMessage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAPNSMessage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAPNSMessage::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAPNSMessage::getUrl() const {
    return m_url;
}
void OAIAPNSMessage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAPNSMessage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAPNSMessage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAPNSMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apns_push_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapse_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silent_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitutions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPNSMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
