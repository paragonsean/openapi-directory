/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartCondition::OAIStartCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartCondition::OAIStartCondition() {
    this->initializeModel();
}

OAIStartCondition::~OAIStartCondition() {}

void OAIStartCondition::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_start_condition_isSet = false;
    m_event_start_condition_isValid = false;

    m_segment_start_condition_isSet = false;
    m_segment_start_condition_isValid = false;
}

void OAIStartCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartCondition::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_event_start_condition_isValid = ::OpenAPI::fromJsonValue(m_event_start_condition, json[QString("EventStartCondition")]);
    m_event_start_condition_isSet = !json[QString("EventStartCondition")].isNull() && m_event_start_condition_isValid;

    m_segment_start_condition_isValid = ::OpenAPI::fromJsonValue(m_segment_start_condition, json[QString("SegmentStartCondition")]);
    m_segment_start_condition_isSet = !json[QString("SegmentStartCondition")].isNull() && m_segment_start_condition_isValid;
}

QString OAIStartCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_start_condition.isSet()) {
        obj.insert(QString("EventStartCondition"), ::OpenAPI::toJsonValue(m_event_start_condition));
    }
    if (m_segment_start_condition.isSet()) {
        obj.insert(QString("SegmentStartCondition"), ::OpenAPI::toJsonValue(m_segment_start_condition));
    }
    return obj;
}

QString OAIStartCondition::getDescription() const {
    return m_description;
}
void OAIStartCondition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStartCondition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStartCondition::is_description_Valid() const{
    return m_description_isValid;
}

OAIEventStartCondition OAIStartCondition::getEventStartCondition() const {
    return m_event_start_condition;
}
void OAIStartCondition::setEventStartCondition(const OAIEventStartCondition &event_start_condition) {
    m_event_start_condition = event_start_condition;
    m_event_start_condition_isSet = true;
}

bool OAIStartCondition::is_event_start_condition_Set() const{
    return m_event_start_condition_isSet;
}

bool OAIStartCondition::is_event_start_condition_Valid() const{
    return m_event_start_condition_isValid;
}

OAIStartCondition_SegmentStartCondition OAIStartCondition::getSegmentStartCondition() const {
    return m_segment_start_condition;
}
void OAIStartCondition::setSegmentStartCondition(const OAIStartCondition_SegmentStartCondition &segment_start_condition) {
    m_segment_start_condition = segment_start_condition;
    m_segment_start_condition_isSet = true;
}

bool OAIStartCondition::is_segment_start_condition_Set() const{
    return m_segment_start_condition_isSet;
}

bool OAIStartCondition::is_segment_start_condition_Valid() const{
    return m_segment_start_condition_isValid;
}

bool OAIStartCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_start_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_start_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
