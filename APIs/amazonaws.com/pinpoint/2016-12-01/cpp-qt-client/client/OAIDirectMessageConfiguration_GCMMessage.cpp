/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectMessageConfiguration_GCMMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectMessageConfiguration_GCMMessage::OAIDirectMessageConfiguration_GCMMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectMessageConfiguration_GCMMessage::OAIDirectMessageConfiguration_GCMMessage() {
    this->initializeModel();
}

OAIDirectMessageConfiguration_GCMMessage::~OAIDirectMessageConfiguration_GCMMessage() {}

void OAIDirectMessageConfiguration_GCMMessage::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_collapse_key_isSet = false;
    m_collapse_key_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_icon_reference_isSet = false;
    m_icon_reference_isValid = false;

    m_image_icon_url_isSet = false;
    m_image_icon_url_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_preferred_authentication_method_isSet = false;
    m_preferred_authentication_method_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_raw_content_isSet = false;
    m_raw_content_isValid = false;

    m_restricted_package_name_isSet = false;
    m_restricted_package_name_isValid = false;

    m_silent_push_isSet = false;
    m_silent_push_isValid = false;

    m_small_image_icon_url_isSet = false;
    m_small_image_icon_url_isValid = false;

    m_sound_isSet = false;
    m_sound_isValid = false;

    m_substitutions_isSet = false;
    m_substitutions_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDirectMessageConfiguration_GCMMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectMessageConfiguration_GCMMessage::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("Body")]);
    m_body_isSet = !json[QString("Body")].isNull() && m_body_isValid;

    m_collapse_key_isValid = ::OpenAPI::fromJsonValue(m_collapse_key, json[QString("CollapseKey")]);
    m_collapse_key_isSet = !json[QString("CollapseKey")].isNull() && m_collapse_key_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_icon_reference_isValid = ::OpenAPI::fromJsonValue(m_icon_reference, json[QString("IconReference")]);
    m_icon_reference_isSet = !json[QString("IconReference")].isNull() && m_icon_reference_isValid;

    m_image_icon_url_isValid = ::OpenAPI::fromJsonValue(m_image_icon_url, json[QString("ImageIconUrl")]);
    m_image_icon_url_isSet = !json[QString("ImageIconUrl")].isNull() && m_image_icon_url_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("ImageUrl")]);
    m_image_url_isSet = !json[QString("ImageUrl")].isNull() && m_image_url_isValid;

    m_preferred_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_preferred_authentication_method, json[QString("PreferredAuthenticationMethod")]);
    m_preferred_authentication_method_isSet = !json[QString("PreferredAuthenticationMethod")].isNull() && m_preferred_authentication_method_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("Priority")]);
    m_priority_isSet = !json[QString("Priority")].isNull() && m_priority_isValid;

    m_raw_content_isValid = ::OpenAPI::fromJsonValue(m_raw_content, json[QString("RawContent")]);
    m_raw_content_isSet = !json[QString("RawContent")].isNull() && m_raw_content_isValid;

    m_restricted_package_name_isValid = ::OpenAPI::fromJsonValue(m_restricted_package_name, json[QString("RestrictedPackageName")]);
    m_restricted_package_name_isSet = !json[QString("RestrictedPackageName")].isNull() && m_restricted_package_name_isValid;

    m_silent_push_isValid = ::OpenAPI::fromJsonValue(m_silent_push, json[QString("SilentPush")]);
    m_silent_push_isSet = !json[QString("SilentPush")].isNull() && m_silent_push_isValid;

    m_small_image_icon_url_isValid = ::OpenAPI::fromJsonValue(m_small_image_icon_url, json[QString("SmallImageIconUrl")]);
    m_small_image_icon_url_isSet = !json[QString("SmallImageIconUrl")].isNull() && m_small_image_icon_url_isValid;

    m_sound_isValid = ::OpenAPI::fromJsonValue(m_sound, json[QString("Sound")]);
    m_sound_isSet = !json[QString("Sound")].isNull() && m_sound_isValid;

    m_substitutions_isValid = ::OpenAPI::fromJsonValue(m_substitutions, json[QString("Substitutions")]);
    m_substitutions_isSet = !json[QString("Substitutions")].isNull() && m_substitutions_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("TimeToLive")]);
    m_time_to_live_isSet = !json[QString("TimeToLive")].isNull() && m_time_to_live_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("Title")]);
    m_title_isSet = !json[QString("Title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectMessageConfiguration_GCMMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_body_isSet) {
        obj.insert(QString("Body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_collapse_key_isSet) {
        obj.insert(QString("CollapseKey"), ::OpenAPI::toJsonValue(m_collapse_key));
    }
    if (m_data.isSet()) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_icon_reference_isSet) {
        obj.insert(QString("IconReference"), ::OpenAPI::toJsonValue(m_icon_reference));
    }
    if (m_image_icon_url_isSet) {
        obj.insert(QString("ImageIconUrl"), ::OpenAPI::toJsonValue(m_image_icon_url));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("ImageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_preferred_authentication_method_isSet) {
        obj.insert(QString("PreferredAuthenticationMethod"), ::OpenAPI::toJsonValue(m_preferred_authentication_method));
    }
    if (m_priority_isSet) {
        obj.insert(QString("Priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_raw_content_isSet) {
        obj.insert(QString("RawContent"), ::OpenAPI::toJsonValue(m_raw_content));
    }
    if (m_restricted_package_name_isSet) {
        obj.insert(QString("RestrictedPackageName"), ::OpenAPI::toJsonValue(m_restricted_package_name));
    }
    if (m_silent_push_isSet) {
        obj.insert(QString("SilentPush"), ::OpenAPI::toJsonValue(m_silent_push));
    }
    if (m_small_image_icon_url_isSet) {
        obj.insert(QString("SmallImageIconUrl"), ::OpenAPI::toJsonValue(m_small_image_icon_url));
    }
    if (m_sound_isSet) {
        obj.insert(QString("Sound"), ::OpenAPI::toJsonValue(m_sound));
    }
    if (m_substitutions.isSet()) {
        obj.insert(QString("Substitutions"), ::OpenAPI::toJsonValue(m_substitutions));
    }
    if (m_time_to_live_isSet) {
        obj.insert(QString("TimeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_title_isSet) {
        obj.insert(QString("Title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAction OAIDirectMessageConfiguration_GCMMessage::getAction() const {
    return m_action;
}
void OAIDirectMessageConfiguration_GCMMessage::setAction(const OAIAction &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getBody() const {
    return m_body;
}
void OAIDirectMessageConfiguration_GCMMessage::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_body_Set() const{
    return m_body_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getCollapseKey() const {
    return m_collapse_key;
}
void OAIDirectMessageConfiguration_GCMMessage::setCollapseKey(const QString &collapse_key) {
    m_collapse_key = collapse_key;
    m_collapse_key_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_collapse_key_Set() const{
    return m_collapse_key_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_collapse_key_Valid() const{
    return m_collapse_key_isValid;
}

QMap OAIDirectMessageConfiguration_GCMMessage::getData() const {
    return m_data;
}
void OAIDirectMessageConfiguration_GCMMessage::setData(const QMap &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getIconReference() const {
    return m_icon_reference;
}
void OAIDirectMessageConfiguration_GCMMessage::setIconReference(const QString &icon_reference) {
    m_icon_reference = icon_reference;
    m_icon_reference_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_icon_reference_Set() const{
    return m_icon_reference_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_icon_reference_Valid() const{
    return m_icon_reference_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getImageIconUrl() const {
    return m_image_icon_url;
}
void OAIDirectMessageConfiguration_GCMMessage::setImageIconUrl(const QString &image_icon_url) {
    m_image_icon_url = image_icon_url;
    m_image_icon_url_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_image_icon_url_Set() const{
    return m_image_icon_url_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_image_icon_url_Valid() const{
    return m_image_icon_url_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getImageUrl() const {
    return m_image_url;
}
void OAIDirectMessageConfiguration_GCMMessage::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getPreferredAuthenticationMethod() const {
    return m_preferred_authentication_method;
}
void OAIDirectMessageConfiguration_GCMMessage::setPreferredAuthenticationMethod(const QString &preferred_authentication_method) {
    m_preferred_authentication_method = preferred_authentication_method;
    m_preferred_authentication_method_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_preferred_authentication_method_Set() const{
    return m_preferred_authentication_method_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_preferred_authentication_method_Valid() const{
    return m_preferred_authentication_method_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getPriority() const {
    return m_priority;
}
void OAIDirectMessageConfiguration_GCMMessage::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getRawContent() const {
    return m_raw_content;
}
void OAIDirectMessageConfiguration_GCMMessage::setRawContent(const QString &raw_content) {
    m_raw_content = raw_content;
    m_raw_content_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_raw_content_Set() const{
    return m_raw_content_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_raw_content_Valid() const{
    return m_raw_content_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getRestrictedPackageName() const {
    return m_restricted_package_name;
}
void OAIDirectMessageConfiguration_GCMMessage::setRestrictedPackageName(const QString &restricted_package_name) {
    m_restricted_package_name = restricted_package_name;
    m_restricted_package_name_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_restricted_package_name_Set() const{
    return m_restricted_package_name_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_restricted_package_name_Valid() const{
    return m_restricted_package_name_isValid;
}

bool OAIDirectMessageConfiguration_GCMMessage::getSilentPush() const {
    return m_silent_push;
}
void OAIDirectMessageConfiguration_GCMMessage::setSilentPush(const bool &silent_push) {
    m_silent_push = silent_push;
    m_silent_push_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_silent_push_Set() const{
    return m_silent_push_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_silent_push_Valid() const{
    return m_silent_push_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getSmallImageIconUrl() const {
    return m_small_image_icon_url;
}
void OAIDirectMessageConfiguration_GCMMessage::setSmallImageIconUrl(const QString &small_image_icon_url) {
    m_small_image_icon_url = small_image_icon_url;
    m_small_image_icon_url_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_small_image_icon_url_Set() const{
    return m_small_image_icon_url_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_small_image_icon_url_Valid() const{
    return m_small_image_icon_url_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getSound() const {
    return m_sound;
}
void OAIDirectMessageConfiguration_GCMMessage::setSound(const QString &sound) {
    m_sound = sound;
    m_sound_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_sound_Set() const{
    return m_sound_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_sound_Valid() const{
    return m_sound_isValid;
}

QMap OAIDirectMessageConfiguration_GCMMessage::getSubstitutions() const {
    return m_substitutions;
}
void OAIDirectMessageConfiguration_GCMMessage::setSubstitutions(const QMap &substitutions) {
    m_substitutions = substitutions;
    m_substitutions_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_substitutions_Set() const{
    return m_substitutions_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_substitutions_Valid() const{
    return m_substitutions_isValid;
}

qint32 OAIDirectMessageConfiguration_GCMMessage::getTimeToLive() const {
    return m_time_to_live;
}
void OAIDirectMessageConfiguration_GCMMessage::setTimeToLive(const qint32 &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getTitle() const {
    return m_title;
}
void OAIDirectMessageConfiguration_GCMMessage::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDirectMessageConfiguration_GCMMessage::getUrl() const {
    return m_url;
}
void OAIDirectMessageConfiguration_GCMMessage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDirectMessageConfiguration_GCMMessage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDirectMessageConfiguration_GCMMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collapse_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silent_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_image_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_substitutions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectMessageConfiguration_GCMMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
