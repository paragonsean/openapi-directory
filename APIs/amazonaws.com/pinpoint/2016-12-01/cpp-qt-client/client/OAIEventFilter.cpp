/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventFilter::OAIEventFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventFilter::OAIEventFilter() {
    this->initializeModel();
}

OAIEventFilter::~OAIEventFilter() {}

void OAIEventFilter::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;
}

void OAIEventFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventFilter::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("FilterType")]);
    m_filter_type_isSet = !json[QString("FilterType")].isNull() && m_filter_type_isValid;
}

QString OAIEventFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_filter_type.isSet()) {
        obj.insert(QString("FilterType"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    return obj;
}

OAIEventFilter_Dimensions OAIEventFilter::getDimensions() const {
    return m_dimensions;
}
void OAIEventFilter::setDimensions(const OAIEventFilter_Dimensions &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIEventFilter::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIEventFilter::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAIFilterType OAIEventFilter::getFilterType() const {
    return m_filter_type;
}
void OAIEventFilter::setFilterType(const OAIFilterType &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAIEventFilter::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAIEventFilter::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

bool OAIEventFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dimensions_isValid && m_filter_type_isValid && true;
}

} // namespace OpenAPI
