/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent_Session.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent_Session::OAIEvent_Session(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent_Session::OAIEvent_Session() {
    this->initializeModel();
}

OAIEvent_Session::~OAIEvent_Session() {}

void OAIEvent_Session::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;

    m_stop_timestamp_isSet = false;
    m_stop_timestamp_isValid = false;
}

void OAIEvent_Session::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent_Session::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("StartTimestamp")]);
    m_start_timestamp_isSet = !json[QString("StartTimestamp")].isNull() && m_start_timestamp_isValid;

    m_stop_timestamp_isValid = ::OpenAPI::fromJsonValue(m_stop_timestamp, json[QString("StopTimestamp")]);
    m_stop_timestamp_isSet = !json[QString("StopTimestamp")].isNull() && m_stop_timestamp_isValid;
}

QString OAIEvent_Session::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent_Session::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("StartTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    if (m_stop_timestamp_isSet) {
        obj.insert(QString("StopTimestamp"), ::OpenAPI::toJsonValue(m_stop_timestamp));
    }
    return obj;
}

qint32 OAIEvent_Session::getDuration() const {
    return m_duration;
}
void OAIEvent_Session::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIEvent_Session::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIEvent_Session::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIEvent_Session::getId() const {
    return m_id;
}
void OAIEvent_Session::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEvent_Session::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEvent_Session::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEvent_Session::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIEvent_Session::setStartTimestamp(const QString &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIEvent_Session::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIEvent_Session::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

QString OAIEvent_Session::getStopTimestamp() const {
    return m_stop_timestamp;
}
void OAIEvent_Session::setStopTimestamp(const QString &stop_timestamp) {
    m_stop_timestamp = stop_timestamp;
    m_stop_timestamp_isSet = true;
}

bool OAIEvent_Session::is_stop_timestamp_Set() const{
    return m_stop_timestamp_isSet;
}

bool OAIEvent_Session::is_stop_timestamp_Valid() const{
    return m_stop_timestamp_isValid;
}

bool OAIEvent_Session::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent_Session::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_start_timestamp_isValid && true;
}

} // namespace OpenAPI
