/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGPSPointDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGPSPointDimension::OAIGPSPointDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGPSPointDimension::OAIGPSPointDimension() {
    this->initializeModel();
}

OAIGPSPointDimension::~OAIGPSPointDimension() {}

void OAIGPSPointDimension::initializeModel() {

    m_coordinates_isSet = false;
    m_coordinates_isValid = false;

    m_range_in_kilometers_isSet = false;
    m_range_in_kilometers_isValid = false;
}

void OAIGPSPointDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGPSPointDimension::fromJsonObject(QJsonObject json) {

    m_coordinates_isValid = ::OpenAPI::fromJsonValue(m_coordinates, json[QString("Coordinates")]);
    m_coordinates_isSet = !json[QString("Coordinates")].isNull() && m_coordinates_isValid;

    m_range_in_kilometers_isValid = ::OpenAPI::fromJsonValue(m_range_in_kilometers, json[QString("RangeInKilometers")]);
    m_range_in_kilometers_isSet = !json[QString("RangeInKilometers")].isNull() && m_range_in_kilometers_isValid;
}

QString OAIGPSPointDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGPSPointDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinates.isSet()) {
        obj.insert(QString("Coordinates"), ::OpenAPI::toJsonValue(m_coordinates));
    }
    if (m_range_in_kilometers_isSet) {
        obj.insert(QString("RangeInKilometers"), ::OpenAPI::toJsonValue(m_range_in_kilometers));
    }
    return obj;
}

OAIGPSPointDimension_Coordinates OAIGPSPointDimension::getCoordinates() const {
    return m_coordinates;
}
void OAIGPSPointDimension::setCoordinates(const OAIGPSPointDimension_Coordinates &coordinates) {
    m_coordinates = coordinates;
    m_coordinates_isSet = true;
}

bool OAIGPSPointDimension::is_coordinates_Set() const{
    return m_coordinates_isSet;
}

bool OAIGPSPointDimension::is_coordinates_Valid() const{
    return m_coordinates_isValid;
}

double OAIGPSPointDimension::getRangeInKilometers() const {
    return m_range_in_kilometers;
}
void OAIGPSPointDimension::setRangeInKilometers(const double &range_in_kilometers) {
    m_range_in_kilometers = range_in_kilometers;
    m_range_in_kilometers_isSet = true;
}

bool OAIGPSPointDimension::is_range_in_kilometers_Set() const{
    return m_range_in_kilometers_isSet;
}

bool OAIGPSPointDimension::is_range_in_kilometers_Valid() const{
    return m_range_in_kilometers_isValid;
}

bool OAIGPSPointDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_in_kilometers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGPSPointDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_coordinates_isValid && true;
}

} // namespace OpenAPI
