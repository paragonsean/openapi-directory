/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiConditionalBranch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiConditionalBranch::OAIMultiConditionalBranch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiConditionalBranch::OAIMultiConditionalBranch() {
    this->initializeModel();
}

OAIMultiConditionalBranch::~OAIMultiConditionalBranch() {}

void OAIMultiConditionalBranch::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_next_activity_isSet = false;
    m_next_activity_isValid = false;
}

void OAIMultiConditionalBranch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiConditionalBranch::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("Condition")]);
    m_condition_isSet = !json[QString("Condition")].isNull() && m_condition_isValid;

    m_next_activity_isValid = ::OpenAPI::fromJsonValue(m_next_activity, json[QString("NextActivity")]);
    m_next_activity_isSet = !json[QString("NextActivity")].isNull() && m_next_activity_isValid;
}

QString OAIMultiConditionalBranch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiConditionalBranch::asJsonObject() const {
    QJsonObject obj;
    if (m_condition.isSet()) {
        obj.insert(QString("Condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_next_activity_isSet) {
        obj.insert(QString("NextActivity"), ::OpenAPI::toJsonValue(m_next_activity));
    }
    return obj;
}

OAIMultiConditionalBranch_Condition OAIMultiConditionalBranch::getCondition() const {
    return m_condition;
}
void OAIMultiConditionalBranch::setCondition(const OAIMultiConditionalBranch_Condition &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIMultiConditionalBranch::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIMultiConditionalBranch::is_condition_Valid() const{
    return m_condition_isValid;
}

QString OAIMultiConditionalBranch::getNextActivity() const {
    return m_next_activity;
}
void OAIMultiConditionalBranch::setNextActivity(const QString &next_activity) {
    m_next_activity = next_activity;
    m_next_activity_isSet = true;
}

bool OAIMultiConditionalBranch::is_next_activity_Set() const{
    return m_next_activity_isSet;
}

bool OAIMultiConditionalBranch::is_next_activity_Valid() const{
    return m_next_activity_isValid;
}

bool OAIMultiConditionalBranch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_activity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiConditionalBranch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
