/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailChannelRequest::OAIEmailChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailChannelRequest::OAIEmailChannelRequest() {
    this->initializeModel();
}

OAIEmailChannelRequest::~OAIEmailChannelRequest() {}

void OAIEmailChannelRequest::initializeModel() {

    m_configuration_set_isSet = false;
    m_configuration_set_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_from_address_isSet = false;
    m_from_address_isValid = false;

    m_identity_isSet = false;
    m_identity_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIEmailChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailChannelRequest::fromJsonObject(QJsonObject json) {

    m_configuration_set_isValid = ::OpenAPI::fromJsonValue(m_configuration_set, json[QString("ConfigurationSet")]);
    m_configuration_set_isSet = !json[QString("ConfigurationSet")].isNull() && m_configuration_set_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_from_address_isValid = ::OpenAPI::fromJsonValue(m_from_address, json[QString("FromAddress")]);
    m_from_address_isSet = !json[QString("FromAddress")].isNull() && m_from_address_isValid;

    m_identity_isValid = ::OpenAPI::fromJsonValue(m_identity, json[QString("Identity")]);
    m_identity_isSet = !json[QString("Identity")].isNull() && m_identity_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIEmailChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration_set_isSet) {
        obj.insert(QString("ConfigurationSet"), ::OpenAPI::toJsonValue(m_configuration_set));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_from_address_isSet) {
        obj.insert(QString("FromAddress"), ::OpenAPI::toJsonValue(m_from_address));
    }
    if (m_identity_isSet) {
        obj.insert(QString("Identity"), ::OpenAPI::toJsonValue(m_identity));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIEmailChannelRequest::getConfigurationSet() const {
    return m_configuration_set;
}
void OAIEmailChannelRequest::setConfigurationSet(const QString &configuration_set) {
    m_configuration_set = configuration_set;
    m_configuration_set_isSet = true;
}

bool OAIEmailChannelRequest::is_configuration_set_Set() const{
    return m_configuration_set_isSet;
}

bool OAIEmailChannelRequest::is_configuration_set_Valid() const{
    return m_configuration_set_isValid;
}

bool OAIEmailChannelRequest::getEnabled() const {
    return m_enabled;
}
void OAIEmailChannelRequest::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIEmailChannelRequest::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIEmailChannelRequest::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIEmailChannelRequest::getFromAddress() const {
    return m_from_address;
}
void OAIEmailChannelRequest::setFromAddress(const QString &from_address) {
    m_from_address = from_address;
    m_from_address_isSet = true;
}

bool OAIEmailChannelRequest::is_from_address_Set() const{
    return m_from_address_isSet;
}

bool OAIEmailChannelRequest::is_from_address_Valid() const{
    return m_from_address_isValid;
}

QString OAIEmailChannelRequest::getIdentity() const {
    return m_identity;
}
void OAIEmailChannelRequest::setIdentity(const QString &identity) {
    m_identity = identity;
    m_identity_isSet = true;
}

bool OAIEmailChannelRequest::is_identity_Set() const{
    return m_identity_isSet;
}

bool OAIEmailChannelRequest::is_identity_Valid() const{
    return m_identity_isValid;
}

QString OAIEmailChannelRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIEmailChannelRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIEmailChannelRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIEmailChannelRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIEmailChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_address_isValid && m_identity_isValid && true;
}

} // namespace OpenAPI
