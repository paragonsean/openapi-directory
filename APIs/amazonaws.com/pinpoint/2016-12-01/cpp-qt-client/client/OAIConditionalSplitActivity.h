/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConditionalSplitActivity.h
 *
 * &lt;p&gt;Specifies the settings for a yes/no split activity in a journey. This type of activity sends participants down one of two paths in a journey, based on conditions that you specify.&lt;/p&gt; &lt;note&gt;&lt;p&gt;To create yes/no split activities that send participants down different paths based on push notification events (such as Open or Received events), your mobile app has to specify the User ID and Endpoint ID values. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/pinpoint/latest/developerguide/integrate.html\&quot;&gt;Integrating Amazon Pinpoint with your application&lt;/a&gt; in the &lt;i&gt;Amazon Pinpoint Developer Guide&lt;/i&gt;.&lt;/p&gt;&lt;/note&gt;
 */

#ifndef OAIConditionalSplitActivity_H
#define OAIConditionalSplitActivity_H

#include <QJsonObject>

#include "OAIConditionalSplitActivity_Condition.h"
#include "OAIConditionalSplitActivity_EvaluationWaitTime.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConditionalSplitActivity_Condition;
class OAIConditionalSplitActivity_EvaluationWaitTime;

class OAIConditionalSplitActivity : public OAIObject {
public:
    OAIConditionalSplitActivity();
    OAIConditionalSplitActivity(QString json);
    ~OAIConditionalSplitActivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIConditionalSplitActivity_Condition getCondition() const;
    void setCondition(const OAIConditionalSplitActivity_Condition &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    OAIConditionalSplitActivity_EvaluationWaitTime getEvaluationWaitTime() const;
    void setEvaluationWaitTime(const OAIConditionalSplitActivity_EvaluationWaitTime &evaluation_wait_time);
    bool is_evaluation_wait_time_Set() const;
    bool is_evaluation_wait_time_Valid() const;

    QString getFalseActivity() const;
    void setFalseActivity(const QString &false_activity);
    bool is_false_activity_Set() const;
    bool is_false_activity_Valid() const;

    QString getTrueActivity() const;
    void setTrueActivity(const QString &true_activity);
    bool is_true_activity_Set() const;
    bool is_true_activity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIConditionalSplitActivity_Condition m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;

    OAIConditionalSplitActivity_EvaluationWaitTime m_evaluation_wait_time;
    bool m_evaluation_wait_time_isSet;
    bool m_evaluation_wait_time_isValid;

    QString m_false_activity;
    bool m_false_activity_isSet;
    bool m_false_activity_isValid;

    QString m_true_activity;
    bool m_true_activity_isSet;
    bool m_true_activity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConditionalSplitActivity)

#endif // OAIConditionalSplitActivity_H
