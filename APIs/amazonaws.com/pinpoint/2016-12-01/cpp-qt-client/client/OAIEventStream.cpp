/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventStream::OAIEventStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventStream::OAIEventStream() {
    this->initializeModel();
}

OAIEventStream::~OAIEventStream() {}

void OAIEventStream::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_destination_stream_arn_isSet = false;
    m_destination_stream_arn_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_last_updated_by_isSet = false;
    m_last_updated_by_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIEventStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventStream::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_destination_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_destination_stream_arn, json[QString("DestinationStreamArn")]);
    m_destination_stream_arn_isSet = !json[QString("DestinationStreamArn")].isNull() && m_destination_stream_arn_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("ExternalId")]);
    m_external_id_isSet = !json[QString("ExternalId")].isNull() && m_external_id_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_last_updated_by_isValid = ::OpenAPI::fromJsonValue(m_last_updated_by, json[QString("LastUpdatedBy")]);
    m_last_updated_by_isSet = !json[QString("LastUpdatedBy")].isNull() && m_last_updated_by_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAIEventStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventStream::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_destination_stream_arn_isSet) {
        obj.insert(QString("DestinationStreamArn"), ::OpenAPI::toJsonValue(m_destination_stream_arn));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("ExternalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_last_updated_by_isSet) {
        obj.insert(QString("LastUpdatedBy"), ::OpenAPI::toJsonValue(m_last_updated_by));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

QString OAIEventStream::getApplicationId() const {
    return m_application_id;
}
void OAIEventStream::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIEventStream::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIEventStream::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIEventStream::getDestinationStreamArn() const {
    return m_destination_stream_arn;
}
void OAIEventStream::setDestinationStreamArn(const QString &destination_stream_arn) {
    m_destination_stream_arn = destination_stream_arn;
    m_destination_stream_arn_isSet = true;
}

bool OAIEventStream::is_destination_stream_arn_Set() const{
    return m_destination_stream_arn_isSet;
}

bool OAIEventStream::is_destination_stream_arn_Valid() const{
    return m_destination_stream_arn_isValid;
}

QString OAIEventStream::getExternalId() const {
    return m_external_id;
}
void OAIEventStream::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIEventStream::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIEventStream::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIEventStream::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIEventStream::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIEventStream::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIEventStream::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIEventStream::getLastUpdatedBy() const {
    return m_last_updated_by;
}
void OAIEventStream::setLastUpdatedBy(const QString &last_updated_by) {
    m_last_updated_by = last_updated_by;
    m_last_updated_by_isSet = true;
}

bool OAIEventStream::is_last_updated_by_Set() const{
    return m_last_updated_by_isSet;
}

bool OAIEventStream::is_last_updated_by_Valid() const{
    return m_last_updated_by_isValid;
}

QString OAIEventStream::getRoleArn() const {
    return m_role_arn;
}
void OAIEventStream::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIEventStream::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIEventStream::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIEventStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_destination_stream_arn_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
