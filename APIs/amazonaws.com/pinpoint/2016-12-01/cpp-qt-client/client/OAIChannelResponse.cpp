/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelResponse::OAIChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelResponse::OAIChannelResponse() {
    this->initializeModel();
}

OAIChannelResponse::~OAIChannelResponse() {}

void OAIChannelResponse::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_has_credential_isSet = false;
    m_has_credential_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelResponse::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("ApplicationId")]);
    m_application_id_isSet = !json[QString("ApplicationId")].isNull() && m_application_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_has_credential_isValid = ::OpenAPI::fromJsonValue(m_has_credential, json[QString("HasCredential")]);
    m_has_credential_isSet = !json[QString("HasCredential")].isNull() && m_has_credential_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("IsArchived")]);
    m_is_archived_isSet = !json[QString("IsArchived")].isNull() && m_is_archived_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("LastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("LastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("ApplicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_has_credential_isSet) {
        obj.insert(QString("HasCredential"), ::OpenAPI::toJsonValue(m_has_credential));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("IsArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("LastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIChannelResponse::getApplicationId() const {
    return m_application_id;
}
void OAIChannelResponse::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIChannelResponse::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIChannelResponse::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIChannelResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIChannelResponse::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIChannelResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIChannelResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIChannelResponse::getEnabled() const {
    return m_enabled;
}
void OAIChannelResponse::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIChannelResponse::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIChannelResponse::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIChannelResponse::getHasCredential() const {
    return m_has_credential;
}
void OAIChannelResponse::setHasCredential(const bool &has_credential) {
    m_has_credential = has_credential;
    m_has_credential_isSet = true;
}

bool OAIChannelResponse::is_has_credential_Set() const{
    return m_has_credential_isSet;
}

bool OAIChannelResponse::is_has_credential_Valid() const{
    return m_has_credential_isValid;
}

QString OAIChannelResponse::getId() const {
    return m_id;
}
void OAIChannelResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannelResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannelResponse::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIChannelResponse::getIsArchived() const {
    return m_is_archived;
}
void OAIChannelResponse::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIChannelResponse::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIChannelResponse::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

QString OAIChannelResponse::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIChannelResponse::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIChannelResponse::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIChannelResponse::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

QString OAIChannelResponse::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIChannelResponse::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIChannelResponse::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIChannelResponse::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

qint32 OAIChannelResponse::getVersion() const {
    return m_version;
}
void OAIChannelResponse::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIChannelResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIChannelResponse::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
