/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverrideButtonConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverrideButtonConfiguration::OAIOverrideButtonConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverrideButtonConfiguration::OAIOverrideButtonConfiguration() {
    this->initializeModel();
}

OAIOverrideButtonConfiguration::~OAIOverrideButtonConfiguration() {}

void OAIOverrideButtonConfiguration::initializeModel() {

    m_button_action_isSet = false;
    m_button_action_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;
}

void OAIOverrideButtonConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverrideButtonConfiguration::fromJsonObject(QJsonObject json) {

    m_button_action_isValid = ::OpenAPI::fromJsonValue(m_button_action, json[QString("ButtonAction")]);
    m_button_action_isSet = !json[QString("ButtonAction")].isNull() && m_button_action_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("Link")]);
    m_link_isSet = !json[QString("Link")].isNull() && m_link_isValid;
}

QString OAIOverrideButtonConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverrideButtonConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_button_action.isSet()) {
        obj.insert(QString("ButtonAction"), ::OpenAPI::toJsonValue(m_button_action));
    }
    if (m_link_isSet) {
        obj.insert(QString("Link"), ::OpenAPI::toJsonValue(m_link));
    }
    return obj;
}

OAIButtonAction OAIOverrideButtonConfiguration::getButtonAction() const {
    return m_button_action;
}
void OAIOverrideButtonConfiguration::setButtonAction(const OAIButtonAction &button_action) {
    m_button_action = button_action;
    m_button_action_isSet = true;
}

bool OAIOverrideButtonConfiguration::is_button_action_Set() const{
    return m_button_action_isSet;
}

bool OAIOverrideButtonConfiguration::is_button_action_Valid() const{
    return m_button_action_isValid;
}

QString OAIOverrideButtonConfiguration::getLink() const {
    return m_link;
}
void OAIOverrideButtonConfiguration::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIOverrideButtonConfiguration::is_link_Set() const{
    return m_link_isSet;
}

bool OAIOverrideButtonConfiguration::is_link_Valid() const{
    return m_link_isValid;
}

bool OAIOverrideButtonConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_button_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverrideButtonConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_button_action_isValid && true;
}

} // namespace OpenAPI
