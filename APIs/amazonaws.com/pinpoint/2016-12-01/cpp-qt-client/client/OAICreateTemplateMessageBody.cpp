/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTemplateMessageBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTemplateMessageBody::OAICreateTemplateMessageBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTemplateMessageBody::OAICreateTemplateMessageBody() {
    this->initializeModel();
}

OAICreateTemplateMessageBody::~OAICreateTemplateMessageBody() {}

void OAICreateTemplateMessageBody::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;
}

void OAICreateTemplateMessageBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTemplateMessageBody::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("RequestID")]);
    m_request_id_isSet = !json[QString("RequestID")].isNull() && m_request_id_isValid;
}

QString OAICreateTemplateMessageBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTemplateMessageBody::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("RequestID"), ::OpenAPI::toJsonValue(m_request_id));
    }
    return obj;
}

QString OAICreateTemplateMessageBody::getArn() const {
    return m_arn;
}
void OAICreateTemplateMessageBody::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateTemplateMessageBody::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateTemplateMessageBody::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateTemplateMessageBody::getMessage() const {
    return m_message;
}
void OAICreateTemplateMessageBody::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICreateTemplateMessageBody::is_message_Set() const{
    return m_message_isSet;
}

bool OAICreateTemplateMessageBody::is_message_Valid() const{
    return m_message_isValid;
}

QString OAICreateTemplateMessageBody::getRequestId() const {
    return m_request_id;
}
void OAICreateTemplateMessageBody::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAICreateTemplateMessageBody::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAICreateTemplateMessageBody::is_request_id_Valid() const{
    return m_request_id_isValid;
}

bool OAICreateTemplateMessageBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTemplateMessageBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
