/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendOTPMessageRequestParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendOTPMessageRequestParameters::OAISendOTPMessageRequestParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendOTPMessageRequestParameters::OAISendOTPMessageRequestParameters() {
    this->initializeModel();
}

OAISendOTPMessageRequestParameters::~OAISendOTPMessageRequestParameters() {}

void OAISendOTPMessageRequestParameters::initializeModel() {

    m_allowed_attempts_isSet = false;
    m_allowed_attempts_isValid = false;

    m_brand_name_isSet = false;
    m_brand_name_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_code_length_isSet = false;
    m_code_length_isValid = false;

    m_destination_identity_isSet = false;
    m_destination_identity_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_origination_identity_isSet = false;
    m_origination_identity_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_validity_period_isSet = false;
    m_validity_period_isValid = false;
}

void OAISendOTPMessageRequestParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendOTPMessageRequestParameters::fromJsonObject(QJsonObject json) {

    m_allowed_attempts_isValid = ::OpenAPI::fromJsonValue(m_allowed_attempts, json[QString("AllowedAttempts")]);
    m_allowed_attempts_isSet = !json[QString("AllowedAttempts")].isNull() && m_allowed_attempts_isValid;

    m_brand_name_isValid = ::OpenAPI::fromJsonValue(m_brand_name, json[QString("BrandName")]);
    m_brand_name_isSet = !json[QString("BrandName")].isNull() && m_brand_name_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_code_length_isValid = ::OpenAPI::fromJsonValue(m_code_length, json[QString("CodeLength")]);
    m_code_length_isSet = !json[QString("CodeLength")].isNull() && m_code_length_isValid;

    m_destination_identity_isValid = ::OpenAPI::fromJsonValue(m_destination_identity, json[QString("DestinationIdentity")]);
    m_destination_identity_isSet = !json[QString("DestinationIdentity")].isNull() && m_destination_identity_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("EntityId")]);
    m_entity_id_isSet = !json[QString("EntityId")].isNull() && m_entity_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_origination_identity_isValid = ::OpenAPI::fromJsonValue(m_origination_identity, json[QString("OriginationIdentity")]);
    m_origination_identity_isSet = !json[QString("OriginationIdentity")].isNull() && m_origination_identity_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("TemplateId")]);
    m_template_id_isSet = !json[QString("TemplateId")].isNull() && m_template_id_isValid;

    m_validity_period_isValid = ::OpenAPI::fromJsonValue(m_validity_period, json[QString("ValidityPeriod")]);
    m_validity_period_isSet = !json[QString("ValidityPeriod")].isNull() && m_validity_period_isValid;
}

QString OAISendOTPMessageRequestParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendOTPMessageRequestParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_attempts_isSet) {
        obj.insert(QString("AllowedAttempts"), ::OpenAPI::toJsonValue(m_allowed_attempts));
    }
    if (m_brand_name_isSet) {
        obj.insert(QString("BrandName"), ::OpenAPI::toJsonValue(m_brand_name));
    }
    if (m_channel_isSet) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_code_length_isSet) {
        obj.insert(QString("CodeLength"), ::OpenAPI::toJsonValue(m_code_length));
    }
    if (m_destination_identity_isSet) {
        obj.insert(QString("DestinationIdentity"), ::OpenAPI::toJsonValue(m_destination_identity));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("EntityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_origination_identity_isSet) {
        obj.insert(QString("OriginationIdentity"), ::OpenAPI::toJsonValue(m_origination_identity));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("TemplateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_validity_period_isSet) {
        obj.insert(QString("ValidityPeriod"), ::OpenAPI::toJsonValue(m_validity_period));
    }
    return obj;
}

qint32 OAISendOTPMessageRequestParameters::getAllowedAttempts() const {
    return m_allowed_attempts;
}
void OAISendOTPMessageRequestParameters::setAllowedAttempts(const qint32 &allowed_attempts) {
    m_allowed_attempts = allowed_attempts;
    m_allowed_attempts_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_allowed_attempts_Set() const{
    return m_allowed_attempts_isSet;
}

bool OAISendOTPMessageRequestParameters::is_allowed_attempts_Valid() const{
    return m_allowed_attempts_isValid;
}

QString OAISendOTPMessageRequestParameters::getBrandName() const {
    return m_brand_name;
}
void OAISendOTPMessageRequestParameters::setBrandName(const QString &brand_name) {
    m_brand_name = brand_name;
    m_brand_name_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_brand_name_Set() const{
    return m_brand_name_isSet;
}

bool OAISendOTPMessageRequestParameters::is_brand_name_Valid() const{
    return m_brand_name_isValid;
}

QString OAISendOTPMessageRequestParameters::getChannel() const {
    return m_channel;
}
void OAISendOTPMessageRequestParameters::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAISendOTPMessageRequestParameters::is_channel_Valid() const{
    return m_channel_isValid;
}

qint32 OAISendOTPMessageRequestParameters::getCodeLength() const {
    return m_code_length;
}
void OAISendOTPMessageRequestParameters::setCodeLength(const qint32 &code_length) {
    m_code_length = code_length;
    m_code_length_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_code_length_Set() const{
    return m_code_length_isSet;
}

bool OAISendOTPMessageRequestParameters::is_code_length_Valid() const{
    return m_code_length_isValid;
}

QString OAISendOTPMessageRequestParameters::getDestinationIdentity() const {
    return m_destination_identity;
}
void OAISendOTPMessageRequestParameters::setDestinationIdentity(const QString &destination_identity) {
    m_destination_identity = destination_identity;
    m_destination_identity_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_destination_identity_Set() const{
    return m_destination_identity_isSet;
}

bool OAISendOTPMessageRequestParameters::is_destination_identity_Valid() const{
    return m_destination_identity_isValid;
}

QString OAISendOTPMessageRequestParameters::getEntityId() const {
    return m_entity_id;
}
void OAISendOTPMessageRequestParameters::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAISendOTPMessageRequestParameters::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAISendOTPMessageRequestParameters::getLanguage() const {
    return m_language;
}
void OAISendOTPMessageRequestParameters::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_language_Set() const{
    return m_language_isSet;
}

bool OAISendOTPMessageRequestParameters::is_language_Valid() const{
    return m_language_isValid;
}

QString OAISendOTPMessageRequestParameters::getOriginationIdentity() const {
    return m_origination_identity;
}
void OAISendOTPMessageRequestParameters::setOriginationIdentity(const QString &origination_identity) {
    m_origination_identity = origination_identity;
    m_origination_identity_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_origination_identity_Set() const{
    return m_origination_identity_isSet;
}

bool OAISendOTPMessageRequestParameters::is_origination_identity_Valid() const{
    return m_origination_identity_isValid;
}

QString OAISendOTPMessageRequestParameters::getReferenceId() const {
    return m_reference_id;
}
void OAISendOTPMessageRequestParameters::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAISendOTPMessageRequestParameters::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QString OAISendOTPMessageRequestParameters::getTemplateId() const {
    return m_template_id;
}
void OAISendOTPMessageRequestParameters::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAISendOTPMessageRequestParameters::is_template_id_Valid() const{
    return m_template_id_isValid;
}

qint32 OAISendOTPMessageRequestParameters::getValidityPeriod() const {
    return m_validity_period;
}
void OAISendOTPMessageRequestParameters::setValidityPeriod(const qint32 &validity_period) {
    m_validity_period = validity_period;
    m_validity_period_isSet = true;
}

bool OAISendOTPMessageRequestParameters::is_validity_period_Set() const{
    return m_validity_period_isSet;
}

bool OAISendOTPMessageRequestParameters::is_validity_period_Valid() const{
    return m_validity_period_isValid;
}

bool OAISendOTPMessageRequestParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origination_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendOTPMessageRequestParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_name_isValid && m_channel_isValid && m_destination_identity_isValid && m_origination_identity_isValid && m_reference_id_isValid && true;
}

} // namespace OpenAPI
