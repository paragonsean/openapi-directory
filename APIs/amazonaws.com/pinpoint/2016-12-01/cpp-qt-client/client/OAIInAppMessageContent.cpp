/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInAppMessageContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInAppMessageContent::OAIInAppMessageContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInAppMessageContent::OAIInAppMessageContent() {
    this->initializeModel();
}

OAIInAppMessageContent::~OAIInAppMessageContent() {}

void OAIInAppMessageContent::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_body_config_isSet = false;
    m_body_config_isValid = false;

    m_header_config_isSet = false;
    m_header_config_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_primary_btn_isSet = false;
    m_primary_btn_isValid = false;

    m_secondary_btn_isSet = false;
    m_secondary_btn_isValid = false;
}

void OAIInAppMessageContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInAppMessageContent::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("BackgroundColor")]);
    m_background_color_isSet = !json[QString("BackgroundColor")].isNull() && m_background_color_isValid;

    m_body_config_isValid = ::OpenAPI::fromJsonValue(m_body_config, json[QString("BodyConfig")]);
    m_body_config_isSet = !json[QString("BodyConfig")].isNull() && m_body_config_isValid;

    m_header_config_isValid = ::OpenAPI::fromJsonValue(m_header_config, json[QString("HeaderConfig")]);
    m_header_config_isSet = !json[QString("HeaderConfig")].isNull() && m_header_config_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("ImageUrl")]);
    m_image_url_isSet = !json[QString("ImageUrl")].isNull() && m_image_url_isValid;

    m_primary_btn_isValid = ::OpenAPI::fromJsonValue(m_primary_btn, json[QString("PrimaryBtn")]);
    m_primary_btn_isSet = !json[QString("PrimaryBtn")].isNull() && m_primary_btn_isValid;

    m_secondary_btn_isValid = ::OpenAPI::fromJsonValue(m_secondary_btn, json[QString("SecondaryBtn")]);
    m_secondary_btn_isSet = !json[QString("SecondaryBtn")].isNull() && m_secondary_btn_isValid;
}

QString OAIInAppMessageContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInAppMessageContent::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color_isSet) {
        obj.insert(QString("BackgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_body_config.isSet()) {
        obj.insert(QString("BodyConfig"), ::OpenAPI::toJsonValue(m_body_config));
    }
    if (m_header_config.isSet()) {
        obj.insert(QString("HeaderConfig"), ::OpenAPI::toJsonValue(m_header_config));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("ImageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_primary_btn.isSet()) {
        obj.insert(QString("PrimaryBtn"), ::OpenAPI::toJsonValue(m_primary_btn));
    }
    if (m_secondary_btn.isSet()) {
        obj.insert(QString("SecondaryBtn"), ::OpenAPI::toJsonValue(m_secondary_btn));
    }
    return obj;
}

QString OAIInAppMessageContent::getBackgroundColor() const {
    return m_background_color;
}
void OAIInAppMessageContent::setBackgroundColor(const QString &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIInAppMessageContent::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIInAppMessageContent::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIInAppMessageContent_BodyConfig OAIInAppMessageContent::getBodyConfig() const {
    return m_body_config;
}
void OAIInAppMessageContent::setBodyConfig(const OAIInAppMessageContent_BodyConfig &body_config) {
    m_body_config = body_config;
    m_body_config_isSet = true;
}

bool OAIInAppMessageContent::is_body_config_Set() const{
    return m_body_config_isSet;
}

bool OAIInAppMessageContent::is_body_config_Valid() const{
    return m_body_config_isValid;
}

OAIInAppMessageContent_HeaderConfig OAIInAppMessageContent::getHeaderConfig() const {
    return m_header_config;
}
void OAIInAppMessageContent::setHeaderConfig(const OAIInAppMessageContent_HeaderConfig &header_config) {
    m_header_config = header_config;
    m_header_config_isSet = true;
}

bool OAIInAppMessageContent::is_header_config_Set() const{
    return m_header_config_isSet;
}

bool OAIInAppMessageContent::is_header_config_Valid() const{
    return m_header_config_isValid;
}

QString OAIInAppMessageContent::getImageUrl() const {
    return m_image_url;
}
void OAIInAppMessageContent::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIInAppMessageContent::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIInAppMessageContent::is_image_url_Valid() const{
    return m_image_url_isValid;
}

OAIInAppMessageContent_PrimaryBtn OAIInAppMessageContent::getPrimaryBtn() const {
    return m_primary_btn;
}
void OAIInAppMessageContent::setPrimaryBtn(const OAIInAppMessageContent_PrimaryBtn &primary_btn) {
    m_primary_btn = primary_btn;
    m_primary_btn_isSet = true;
}

bool OAIInAppMessageContent::is_primary_btn_Set() const{
    return m_primary_btn_isSet;
}

bool OAIInAppMessageContent::is_primary_btn_Valid() const{
    return m_primary_btn_isValid;
}

OAIInAppMessageContent_SecondaryBtn OAIInAppMessageContent::getSecondaryBtn() const {
    return m_secondary_btn;
}
void OAIInAppMessageContent::setSecondaryBtn(const OAIInAppMessageContent_SecondaryBtn &secondary_btn) {
    m_secondary_btn = secondary_btn;
    m_secondary_btn_isSet = true;
}

bool OAIInAppMessageContent::is_secondary_btn_Set() const{
    return m_secondary_btn_isSet;
}

bool OAIInAppMessageContent::is_secondary_btn_Valid() const{
    return m_secondary_btn_isValid;
}

bool OAIInAppMessageContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_btn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_btn.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInAppMessageContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
