/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_app_package_name_isSet = false;
    m_app_package_name_isValid = false;

    m_app_title_isSet = false;
    m_app_title_isValid = false;

    m_app_version_code_isSet = false;
    m_app_version_code_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_client_sdk_version_isSet = false;
    m_client_sdk_version_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_sdk_name_isSet = false;
    m_sdk_name_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_app_package_name_isValid = ::OpenAPI::fromJsonValue(m_app_package_name, json[QString("AppPackageName")]);
    m_app_package_name_isSet = !json[QString("AppPackageName")].isNull() && m_app_package_name_isValid;

    m_app_title_isValid = ::OpenAPI::fromJsonValue(m_app_title, json[QString("AppTitle")]);
    m_app_title_isSet = !json[QString("AppTitle")].isNull() && m_app_title_isValid;

    m_app_version_code_isValid = ::OpenAPI::fromJsonValue(m_app_version_code, json[QString("AppVersionCode")]);
    m_app_version_code_isSet = !json[QString("AppVersionCode")].isNull() && m_app_version_code_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_client_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_client_sdk_version, json[QString("ClientSdkVersion")]);
    m_client_sdk_version_isSet = !json[QString("ClientSdkVersion")].isNull() && m_client_sdk_version_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("EventType")]);
    m_event_type_isSet = !json[QString("EventType")].isNull() && m_event_type_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;

    m_sdk_name_isValid = ::OpenAPI::fromJsonValue(m_sdk_name, json[QString("SdkName")]);
    m_sdk_name_isSet = !json[QString("SdkName")].isNull() && m_sdk_name_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("Session")]);
    m_session_isSet = !json[QString("Session")].isNull() && m_session_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_app_package_name_isSet) {
        obj.insert(QString("AppPackageName"), ::OpenAPI::toJsonValue(m_app_package_name));
    }
    if (m_app_title_isSet) {
        obj.insert(QString("AppTitle"), ::OpenAPI::toJsonValue(m_app_title));
    }
    if (m_app_version_code_isSet) {
        obj.insert(QString("AppVersionCode"), ::OpenAPI::toJsonValue(m_app_version_code));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_client_sdk_version_isSet) {
        obj.insert(QString("ClientSdkVersion"), ::OpenAPI::toJsonValue(m_client_sdk_version));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("EventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_sdk_name_isSet) {
        obj.insert(QString("SdkName"), ::OpenAPI::toJsonValue(m_sdk_name));
    }
    if (m_session.isSet()) {
        obj.insert(QString("Session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIEvent::getAppPackageName() const {
    return m_app_package_name;
}
void OAIEvent::setAppPackageName(const QString &app_package_name) {
    m_app_package_name = app_package_name;
    m_app_package_name_isSet = true;
}

bool OAIEvent::is_app_package_name_Set() const{
    return m_app_package_name_isSet;
}

bool OAIEvent::is_app_package_name_Valid() const{
    return m_app_package_name_isValid;
}

QString OAIEvent::getAppTitle() const {
    return m_app_title;
}
void OAIEvent::setAppTitle(const QString &app_title) {
    m_app_title = app_title;
    m_app_title_isSet = true;
}

bool OAIEvent::is_app_title_Set() const{
    return m_app_title_isSet;
}

bool OAIEvent::is_app_title_Valid() const{
    return m_app_title_isValid;
}

QString OAIEvent::getAppVersionCode() const {
    return m_app_version_code;
}
void OAIEvent::setAppVersionCode(const QString &app_version_code) {
    m_app_version_code = app_version_code;
    m_app_version_code_isSet = true;
}

bool OAIEvent::is_app_version_code_Set() const{
    return m_app_version_code_isSet;
}

bool OAIEvent::is_app_version_code_Valid() const{
    return m_app_version_code_isValid;
}

QMap OAIEvent::getAttributes() const {
    return m_attributes;
}
void OAIEvent::setAttributes(const QMap &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIEvent::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIEvent::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAIEvent::getClientSdkVersion() const {
    return m_client_sdk_version;
}
void OAIEvent::setClientSdkVersion(const QString &client_sdk_version) {
    m_client_sdk_version = client_sdk_version;
    m_client_sdk_version_isSet = true;
}

bool OAIEvent::is_client_sdk_version_Set() const{
    return m_client_sdk_version_isSet;
}

bool OAIEvent::is_client_sdk_version_Valid() const{
    return m_client_sdk_version_isValid;
}

QString OAIEvent::getEventType() const {
    return m_event_type;
}
void OAIEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QMap OAIEvent::getMetrics() const {
    return m_metrics;
}
void OAIEvent::setMetrics(const QMap &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIEvent::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIEvent::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIEvent::getSdkName() const {
    return m_sdk_name;
}
void OAIEvent::setSdkName(const QString &sdk_name) {
    m_sdk_name = sdk_name;
    m_sdk_name_isSet = true;
}

bool OAIEvent::is_sdk_name_Set() const{
    return m_sdk_name_isSet;
}

bool OAIEvent::is_sdk_name_Valid() const{
    return m_sdk_name_isValid;
}

OAIEvent_Session OAIEvent::getSession() const {
    return m_session;
}
void OAIEvent::setSession(const OAIEvent_Session &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIEvent::is_session_Set() const{
    return m_session_isSet;
}

bool OAIEvent::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIEvent::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_isValid && m_timestamp_isValid && true;
}

} // namespace OpenAPI
