/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAppResponse.h"
#include "OAICreateApp_request.h"
#include "OAICreateCampaignResponse.h"
#include "OAICreateCampaign_request.h"
#include "OAICreateEmailTemplateResponse.h"
#include "OAICreateExportJobResponse.h"
#include "OAICreateExportJob_request.h"
#include "OAICreateImportJobResponse.h"
#include "OAICreateImportJob_request.h"
#include "OAICreateInAppTemplateResponse.h"
#include "OAICreateJourneyResponse.h"
#include "OAICreateJourney_request.h"
#include "OAICreatePushTemplateResponse.h"
#include "OAICreateRecommenderConfigurationResponse.h"
#include "OAICreateRecommenderConfiguration_request.h"
#include "OAICreateSegmentResponse.h"
#include "OAICreateSegment_request.h"
#include "OAICreateSmsTemplateResponse.h"
#include "OAICreateVoiceTemplateResponse.h"
#include "OAIDeleteAdmChannelResponse.h"
#include "OAIDeleteApnsChannelResponse.h"
#include "OAIDeleteApnsSandboxChannelResponse.h"
#include "OAIDeleteApnsVoipChannelResponse.h"
#include "OAIDeleteApnsVoipSandboxChannelResponse.h"
#include "OAIDeleteAppResponse.h"
#include "OAIDeleteBaiduChannelResponse.h"
#include "OAIDeleteCampaignResponse.h"
#include "OAIDeleteEmailChannelResponse.h"
#include "OAIDeleteEmailTemplateResponse.h"
#include "OAIDeleteEndpointResponse.h"
#include "OAIDeleteEventStreamResponse.h"
#include "OAIDeleteGcmChannelResponse.h"
#include "OAIDeleteInAppTemplateResponse.h"
#include "OAIDeleteJourneyResponse.h"
#include "OAIDeletePushTemplateResponse.h"
#include "OAIDeleteRecommenderConfigurationResponse.h"
#include "OAIDeleteSegmentResponse.h"
#include "OAIDeleteSmsChannelResponse.h"
#include "OAIDeleteSmsTemplateResponse.h"
#include "OAIDeleteUserEndpointsResponse.h"
#include "OAIDeleteVoiceChannelResponse.h"
#include "OAIDeleteVoiceTemplateResponse.h"
#include "OAIGetAdmChannelResponse.h"
#include "OAIGetApnsChannelResponse.h"
#include "OAIGetApnsSandboxChannelResponse.h"
#include "OAIGetApnsVoipChannelResponse.h"
#include "OAIGetApnsVoipSandboxChannelResponse.h"
#include "OAIGetAppResponse.h"
#include "OAIGetApplicationDateRangeKpiResponse.h"
#include "OAIGetApplicationSettingsResponse.h"
#include "OAIGetAppsResponse.h"
#include "OAIGetBaiduChannelResponse.h"
#include "OAIGetCampaignActivitiesResponse.h"
#include "OAIGetCampaignDateRangeKpiResponse.h"
#include "OAIGetCampaignResponse.h"
#include "OAIGetCampaignVersionResponse.h"
#include "OAIGetCampaignVersionsResponse.h"
#include "OAIGetCampaignsResponse.h"
#include "OAIGetChannelsResponse.h"
#include "OAIGetEmailChannelResponse.h"
#include "OAIGetEmailTemplateResponse.h"
#include "OAIGetEndpointResponse.h"
#include "OAIGetEventStreamResponse.h"
#include "OAIGetExportJobResponse.h"
#include "OAIGetExportJobsResponse.h"
#include "OAIGetGcmChannelResponse.h"
#include "OAIGetImportJobResponse.h"
#include "OAIGetImportJobsResponse.h"
#include "OAIGetInAppMessagesResponse.h"
#include "OAIGetInAppTemplateResponse.h"
#include "OAIGetJourneyDateRangeKpiResponse.h"
#include "OAIGetJourneyExecutionActivityMetricsResponse.h"
#include "OAIGetJourneyExecutionMetricsResponse.h"
#include "OAIGetJourneyResponse.h"
#include "OAIGetJourneyRunExecutionActivityMetricsResponse.h"
#include "OAIGetJourneyRunExecutionMetricsResponse.h"
#include "OAIGetJourneyRunsResponse.h"
#include "OAIGetPushTemplateResponse.h"
#include "OAIGetRecommenderConfigurationResponse.h"
#include "OAIGetRecommenderConfigurationsResponse.h"
#include "OAIGetSegmentExportJobsResponse.h"
#include "OAIGetSegmentImportJobsResponse.h"
#include "OAIGetSegmentResponse.h"
#include "OAIGetSegmentVersionResponse.h"
#include "OAIGetSegmentVersionsResponse.h"
#include "OAIGetSegmentsResponse.h"
#include "OAIGetSmsChannelResponse.h"
#include "OAIGetSmsTemplateResponse.h"
#include "OAIGetUserEndpointsResponse.h"
#include "OAIGetVoiceChannelResponse.h"
#include "OAIGetVoiceTemplateResponse.h"
#include "OAIListJourneysResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIListTemplateVersionsResponse.h"
#include "OAIListTemplatesResponse.h"
#include "OAIPhoneNumberValidateResponse.h"
#include "OAIPhoneNumberValidate_request.h"
#include "OAIPutEventStreamResponse.h"
#include "OAIPutEventStream_request.h"
#include "OAIPutEventsResponse.h"
#include "OAIPutEvents_request.h"
#include "OAIRemoveAttributesResponse.h"
#include "OAIRemoveAttributes_request.h"
#include "OAISendMessagesResponse.h"
#include "OAISendMessages_request.h"
#include "OAISendOTPMessageResponse.h"
#include "OAISendOTPMessage_request.h"
#include "OAISendUsersMessagesResponse.h"
#include "OAISendUsersMessages_request.h"
#include "OAITagResource_request.h"
#include "OAIUpdateAdmChannelResponse.h"
#include "OAIUpdateAdmChannel_request.h"
#include "OAIUpdateApnsChannelResponse.h"
#include "OAIUpdateApnsChannel_request.h"
#include "OAIUpdateApnsSandboxChannelResponse.h"
#include "OAIUpdateApnsSandboxChannel_request.h"
#include "OAIUpdateApnsVoipChannelResponse.h"
#include "OAIUpdateApnsVoipChannel_request.h"
#include "OAIUpdateApnsVoipSandboxChannelResponse.h"
#include "OAIUpdateApnsVoipSandboxChannel_request.h"
#include "OAIUpdateApplicationSettingsResponse.h"
#include "OAIUpdateApplicationSettings_request.h"
#include "OAIUpdateBaiduChannelResponse.h"
#include "OAIUpdateBaiduChannel_request.h"
#include "OAIUpdateCampaignResponse.h"
#include "OAIUpdateEmailChannelResponse.h"
#include "OAIUpdateEmailChannel_request.h"
#include "OAIUpdateEmailTemplateResponse.h"
#include "OAIUpdateEmailTemplate_request.h"
#include "OAIUpdateEndpointResponse.h"
#include "OAIUpdateEndpoint_request.h"
#include "OAIUpdateEndpointsBatchResponse.h"
#include "OAIUpdateEndpointsBatch_request.h"
#include "OAIUpdateGcmChannelResponse.h"
#include "OAIUpdateGcmChannel_request.h"
#include "OAIUpdateInAppTemplateResponse.h"
#include "OAIUpdateInAppTemplate_request.h"
#include "OAIUpdateJourneyResponse.h"
#include "OAIUpdateJourneyStateResponse.h"
#include "OAIUpdateJourneyState_request.h"
#include "OAIUpdatePushTemplateResponse.h"
#include "OAIUpdatePushTemplate_request.h"
#include "OAIUpdateRecommenderConfigurationResponse.h"
#include "OAIUpdateRecommenderConfiguration_request.h"
#include "OAIUpdateSegmentResponse.h"
#include "OAIUpdateSmsChannelResponse.h"
#include "OAIUpdateSmsChannel_request.h"
#include "OAIUpdateSmsTemplateResponse.h"
#include "OAIUpdateSmsTemplate_request.h"
#include "OAIUpdateTemplateActiveVersionResponse.h"
#include "OAIUpdateTemplateActiveVersion_request.h"
#include "OAIUpdateVoiceChannelResponse.h"
#include "OAIUpdateVoiceChannel_request.h"
#include "OAIUpdateVoiceTemplateResponse.h"
#include "OAIUpdateVoiceTemplate_request.h"
#include "OAIVerifyOTPMessageResponse.h"
#include "OAIVerifyOTPMessage_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_app_request OAICreateApp_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createApp(const OAICreateApp_request &oai_create_app_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_create_campaign_request OAICreateCampaign_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCampaign(const QString &application_id, const OAICreateCampaign_request &oai_create_campaign_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_email_template_request OAIUpdateEmailTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createEmailTemplate(const QString &template_name, const OAIUpdateEmailTemplate_request &oai_update_email_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_create_export_job_request OAICreateExportJob_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createExportJob(const QString &application_id, const OAICreateExportJob_request &oai_create_export_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_create_import_job_request OAICreateImportJob_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createImportJob(const QString &application_id, const OAICreateImportJob_request &oai_create_import_job_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_in_app_template_request OAIUpdateInAppTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createInAppTemplate(const QString &template_name, const OAIUpdateInAppTemplate_request &oai_update_in_app_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_create_journey_request OAICreateJourney_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createJourney(const QString &application_id, const OAICreateJourney_request &oai_create_journey_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_push_template_request OAIUpdatePushTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPushTemplate(const QString &template_name, const OAIUpdatePushTemplate_request &oai_update_push_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_recommender_configuration_request OAICreateRecommenderConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRecommenderConfiguration(const OAICreateRecommenderConfiguration_request &oai_create_recommender_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_create_segment_request OAICreateSegment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSegment(const QString &application_id, const OAICreateSegment_request &oai_create_segment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_sms_template_request OAIUpdateSmsTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSmsTemplate(const QString &template_name, const OAIUpdateSmsTemplate_request &oai_update_sms_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_voice_template_request OAIUpdateVoiceTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createVoiceTemplate(const QString &template_name, const OAIUpdateVoiceTemplate_request &oai_update_voice_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAdmChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteApnsChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteApnsSandboxChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteApnsVoipChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteApnsVoipSandboxChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteApp(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBaiduChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteCampaign(const QString &application_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteEmailChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void deleteEmailTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteEndpoint(const QString &application_id, const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteEventStream(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteGcmChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void deleteInAppTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteJourney(const QString &application_id, const QString &journey_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void deletePushTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  recommender_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRecommenderConfiguration(const QString &recommender_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteSegment(const QString &application_id, const QString &segment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteSmsChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void deleteSmsTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteUserEndpoints(const QString &application_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteVoiceChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void deleteVoiceTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAdmChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getApnsChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getApnsSandboxChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getApnsVoipChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getApnsVoipSandboxChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getApp(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  start_time QDateTime [optional]
    */
    virtual void getApplicationDateRangeKpi(const QString &application_id, const QString &kpi_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getApplicationSettings(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getApps(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBaiduChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCampaign(const QString &application_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCampaignActivities(const QString &application_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  start_time QDateTime [optional]
    */
    virtual void getCampaignDateRangeKpi(const QString &application_id, const QString &campaign_id, const QString &kpi_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getCampaignVersion(const QString &application_id, const QString &campaign_id, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCampaignVersions(const QString &application_id, const QString &campaign_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getCampaigns(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getChannels(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEmailChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void getEmailTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEndpoint(const QString &application_id, const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEventStream(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getExportJob(const QString &application_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getExportJobs(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getGcmChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getImportJob(const QString &application_id, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getImportJobs(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getInAppMessages(const QString &application_id, const QString &endpoint_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void getInAppTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getJourney(const QString &application_id, const QString &journey_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  kpi_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  start_time QDateTime [optional]
    */
    virtual void getJourneyDateRangeKpi(const QString &application_id, const QString &journey_id, const QString &kpi_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_activity_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    */
    virtual void getJourneyExecutionActivityMetrics(const QString &application_id, const QString &journey_activity_id, const QString &journey_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    */
    virtual void getJourneyExecutionMetrics(const QString &application_id, const QString &journey_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_activity_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    */
    virtual void getJourneyRunExecutionActivityMetrics(const QString &application_id, const QString &journey_activity_id, const QString &journey_id, const QString &run_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  run_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    */
    virtual void getJourneyRunExecutionMetrics(const QString &application_id, const QString &journey_id, const QString &run_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getJourneyRuns(const QString &application_id, const QString &journey_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void getPushTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  recommender_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRecommenderConfiguration(const QString &recommender_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getRecommenderConfigurations(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSegment(const QString &application_id, const QString &segment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getSegmentExportJobs(const QString &application_id, const QString &segment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getSegmentImportJobs(const QString &application_id, const QString &segment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSegmentVersion(const QString &application_id, const QString &segment_id, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getSegmentVersions(const QString &application_id, const QString &segment_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void getSegments(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getSmsChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void getSmsTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getUserEndpoints(const QString &application_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getVoiceChannel(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void getVoiceTemplate(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void listJourneys(const QString &application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForResource(const QString &resource_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  template_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    */
    virtual void listTemplateVersions(const QString &template_name, const QString &template_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  prefix QString [optional]
    * @param[in]  template_type QString [optional]
    */
    virtual void listTemplates(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_phone_number_validate_request OAIPhoneNumberValidate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void phoneNumberValidate(const OAIPhoneNumberValidate_request &oai_phone_number_validate_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_put_event_stream_request OAIPutEventStream_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putEventStream(const QString &application_id, const OAIPutEventStream_request &oai_put_event_stream_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_put_events_request OAIPutEvents_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putEvents(const QString &application_id, const OAIPutEvents_request &oai_put_events_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  attribute_type QString [required]
    * @param[in]  oai_remove_attributes_request OAIRemoveAttributes_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void removeAttributes(const QString &application_id, const QString &attribute_type, const OAIRemoveAttributes_request &oai_remove_attributes_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_send_messages_request OAISendMessages_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void sendMessages(const QString &application_id, const OAISendMessages_request &oai_send_messages_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_send_otp_message_request OAISendOTPMessage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void sendOTPMessage(const QString &application_id, const OAISendOTPMessage_request &oai_send_otp_message_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_send_users_messages_request OAISendUsersMessages_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void sendUsersMessages(const QString &application_id, const OAISendUsersMessages_request &oai_send_users_messages_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void tagResource(const QString &resource_arn, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_arn QString [required]
    * @param[in]  tag_keys QList<QString> [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void untagResource(const QString &resource_arn, const QList<QString> &tag_keys, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_adm_channel_request OAIUpdateAdmChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAdmChannel(const QString &application_id, const OAIUpdateAdmChannel_request &oai_update_adm_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_apns_channel_request OAIUpdateApnsChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateApnsChannel(const QString &application_id, const OAIUpdateApnsChannel_request &oai_update_apns_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_apns_sandbox_channel_request OAIUpdateApnsSandboxChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateApnsSandboxChannel(const QString &application_id, const OAIUpdateApnsSandboxChannel_request &oai_update_apns_sandbox_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_apns_voip_channel_request OAIUpdateApnsVoipChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateApnsVoipChannel(const QString &application_id, const OAIUpdateApnsVoipChannel_request &oai_update_apns_voip_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_apns_voip_sandbox_channel_request OAIUpdateApnsVoipSandboxChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateApnsVoipSandboxChannel(const QString &application_id, const OAIUpdateApnsVoipSandboxChannel_request &oai_update_apns_voip_sandbox_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_application_settings_request OAIUpdateApplicationSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateApplicationSettings(const QString &application_id, const OAIUpdateApplicationSettings_request &oai_update_application_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_baidu_channel_request OAIUpdateBaiduChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateBaiduChannel(const QString &application_id, const OAIUpdateBaiduChannel_request &oai_update_baidu_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  campaign_id QString [required]
    * @param[in]  oai_create_campaign_request OAICreateCampaign_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateCampaign(const QString &application_id, const QString &campaign_id, const OAICreateCampaign_request &oai_create_campaign_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_email_channel_request OAIUpdateEmailChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateEmailChannel(const QString &application_id, const OAIUpdateEmailChannel_request &oai_update_email_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_email_template_request OAIUpdateEmailTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  create_new_version bool [optional]
    * @param[in]  version QString [optional]
    */
    virtual void updateEmailTemplate(const QString &template_name, const OAIUpdateEmailTemplate_request &oai_update_email_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_new_version = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  endpoint_id QString [required]
    * @param[in]  oai_update_endpoint_request OAIUpdateEndpoint_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateEndpoint(const QString &application_id, const QString &endpoint_id, const OAIUpdateEndpoint_request &oai_update_endpoint_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_endpoints_batch_request OAIUpdateEndpointsBatch_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateEndpointsBatch(const QString &application_id, const OAIUpdateEndpointsBatch_request &oai_update_endpoints_batch_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_gcm_channel_request OAIUpdateGcmChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateGcmChannel(const QString &application_id, const OAIUpdateGcmChannel_request &oai_update_gcm_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_in_app_template_request OAIUpdateInAppTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  create_new_version bool [optional]
    * @param[in]  version QString [optional]
    */
    virtual void updateInAppTemplate(const QString &template_name, const OAIUpdateInAppTemplate_request &oai_update_in_app_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_new_version = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  oai_create_journey_request OAICreateJourney_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateJourney(const QString &application_id, const QString &journey_id, const OAICreateJourney_request &oai_create_journey_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  journey_id QString [required]
    * @param[in]  oai_update_journey_state_request OAIUpdateJourneyState_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateJourneyState(const QString &application_id, const QString &journey_id, const OAIUpdateJourneyState_request &oai_update_journey_state_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_push_template_request OAIUpdatePushTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  create_new_version bool [optional]
    * @param[in]  version QString [optional]
    */
    virtual void updatePushTemplate(const QString &template_name, const OAIUpdatePushTemplate_request &oai_update_push_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_new_version = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  recommender_id QString [required]
    * @param[in]  oai_update_recommender_configuration_request OAIUpdateRecommenderConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRecommenderConfiguration(const QString &recommender_id, const OAIUpdateRecommenderConfiguration_request &oai_update_recommender_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  segment_id QString [required]
    * @param[in]  oai_create_segment_request OAICreateSegment_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSegment(const QString &application_id, const QString &segment_id, const OAICreateSegment_request &oai_create_segment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_sms_channel_request OAIUpdateSmsChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSmsChannel(const QString &application_id, const OAIUpdateSmsChannel_request &oai_update_sms_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_sms_template_request OAIUpdateSmsTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  create_new_version bool [optional]
    * @param[in]  version QString [optional]
    */
    virtual void updateSmsTemplate(const QString &template_name, const OAIUpdateSmsTemplate_request &oai_update_sms_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_new_version = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  template_type QString [required]
    * @param[in]  oai_update_template_active_version_request OAIUpdateTemplateActiveVersion_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTemplateActiveVersion(const QString &template_name, const QString &template_type, const OAIUpdateTemplateActiveVersion_request &oai_update_template_active_version_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_update_voice_channel_request OAIUpdateVoiceChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateVoiceChannel(const QString &application_id, const OAIUpdateVoiceChannel_request &oai_update_voice_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  oai_update_voice_template_request OAIUpdateVoiceTemplate_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  create_new_version bool [optional]
    * @param[in]  version QString [optional]
    */
    virtual void updateVoiceTemplate(const QString &template_name, const OAIUpdateVoiceTemplate_request &oai_update_voice_template_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &create_new_version = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  application_id QString [required]
    * @param[in]  oai_verify_otp_message_request OAIVerifyOTPMessage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void verifyOTPMessage(const QString &application_id, const OAIVerifyOTPMessage_request &oai_verify_otp_message_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAppCallback(OAIHttpRequestWorker *worker);
    void createCampaignCallback(OAIHttpRequestWorker *worker);
    void createEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void createExportJobCallback(OAIHttpRequestWorker *worker);
    void createImportJobCallback(OAIHttpRequestWorker *worker);
    void createInAppTemplateCallback(OAIHttpRequestWorker *worker);
    void createJourneyCallback(OAIHttpRequestWorker *worker);
    void createPushTemplateCallback(OAIHttpRequestWorker *worker);
    void createRecommenderConfigurationCallback(OAIHttpRequestWorker *worker);
    void createSegmentCallback(OAIHttpRequestWorker *worker);
    void createSmsTemplateCallback(OAIHttpRequestWorker *worker);
    void createVoiceTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteAdmChannelCallback(OAIHttpRequestWorker *worker);
    void deleteApnsChannelCallback(OAIHttpRequestWorker *worker);
    void deleteApnsSandboxChannelCallback(OAIHttpRequestWorker *worker);
    void deleteApnsVoipChannelCallback(OAIHttpRequestWorker *worker);
    void deleteApnsVoipSandboxChannelCallback(OAIHttpRequestWorker *worker);
    void deleteAppCallback(OAIHttpRequestWorker *worker);
    void deleteBaiduChannelCallback(OAIHttpRequestWorker *worker);
    void deleteCampaignCallback(OAIHttpRequestWorker *worker);
    void deleteEmailChannelCallback(OAIHttpRequestWorker *worker);
    void deleteEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteEndpointCallback(OAIHttpRequestWorker *worker);
    void deleteEventStreamCallback(OAIHttpRequestWorker *worker);
    void deleteGcmChannelCallback(OAIHttpRequestWorker *worker);
    void deleteInAppTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteJourneyCallback(OAIHttpRequestWorker *worker);
    void deletePushTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteRecommenderConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteSegmentCallback(OAIHttpRequestWorker *worker);
    void deleteSmsChannelCallback(OAIHttpRequestWorker *worker);
    void deleteSmsTemplateCallback(OAIHttpRequestWorker *worker);
    void deleteUserEndpointsCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceChannelCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceTemplateCallback(OAIHttpRequestWorker *worker);
    void getAdmChannelCallback(OAIHttpRequestWorker *worker);
    void getApnsChannelCallback(OAIHttpRequestWorker *worker);
    void getApnsSandboxChannelCallback(OAIHttpRequestWorker *worker);
    void getApnsVoipChannelCallback(OAIHttpRequestWorker *worker);
    void getApnsVoipSandboxChannelCallback(OAIHttpRequestWorker *worker);
    void getAppCallback(OAIHttpRequestWorker *worker);
    void getApplicationDateRangeKpiCallback(OAIHttpRequestWorker *worker);
    void getApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void getAppsCallback(OAIHttpRequestWorker *worker);
    void getBaiduChannelCallback(OAIHttpRequestWorker *worker);
    void getCampaignCallback(OAIHttpRequestWorker *worker);
    void getCampaignActivitiesCallback(OAIHttpRequestWorker *worker);
    void getCampaignDateRangeKpiCallback(OAIHttpRequestWorker *worker);
    void getCampaignVersionCallback(OAIHttpRequestWorker *worker);
    void getCampaignVersionsCallback(OAIHttpRequestWorker *worker);
    void getCampaignsCallback(OAIHttpRequestWorker *worker);
    void getChannelsCallback(OAIHttpRequestWorker *worker);
    void getEmailChannelCallback(OAIHttpRequestWorker *worker);
    void getEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void getEndpointCallback(OAIHttpRequestWorker *worker);
    void getEventStreamCallback(OAIHttpRequestWorker *worker);
    void getExportJobCallback(OAIHttpRequestWorker *worker);
    void getExportJobsCallback(OAIHttpRequestWorker *worker);
    void getGcmChannelCallback(OAIHttpRequestWorker *worker);
    void getImportJobCallback(OAIHttpRequestWorker *worker);
    void getImportJobsCallback(OAIHttpRequestWorker *worker);
    void getInAppMessagesCallback(OAIHttpRequestWorker *worker);
    void getInAppTemplateCallback(OAIHttpRequestWorker *worker);
    void getJourneyCallback(OAIHttpRequestWorker *worker);
    void getJourneyDateRangeKpiCallback(OAIHttpRequestWorker *worker);
    void getJourneyExecutionActivityMetricsCallback(OAIHttpRequestWorker *worker);
    void getJourneyExecutionMetricsCallback(OAIHttpRequestWorker *worker);
    void getJourneyRunExecutionActivityMetricsCallback(OAIHttpRequestWorker *worker);
    void getJourneyRunExecutionMetricsCallback(OAIHttpRequestWorker *worker);
    void getJourneyRunsCallback(OAIHttpRequestWorker *worker);
    void getPushTemplateCallback(OAIHttpRequestWorker *worker);
    void getRecommenderConfigurationCallback(OAIHttpRequestWorker *worker);
    void getRecommenderConfigurationsCallback(OAIHttpRequestWorker *worker);
    void getSegmentCallback(OAIHttpRequestWorker *worker);
    void getSegmentExportJobsCallback(OAIHttpRequestWorker *worker);
    void getSegmentImportJobsCallback(OAIHttpRequestWorker *worker);
    void getSegmentVersionCallback(OAIHttpRequestWorker *worker);
    void getSegmentVersionsCallback(OAIHttpRequestWorker *worker);
    void getSegmentsCallback(OAIHttpRequestWorker *worker);
    void getSmsChannelCallback(OAIHttpRequestWorker *worker);
    void getSmsTemplateCallback(OAIHttpRequestWorker *worker);
    void getUserEndpointsCallback(OAIHttpRequestWorker *worker);
    void getVoiceChannelCallback(OAIHttpRequestWorker *worker);
    void getVoiceTemplateCallback(OAIHttpRequestWorker *worker);
    void listJourneysCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listTemplateVersionsCallback(OAIHttpRequestWorker *worker);
    void listTemplatesCallback(OAIHttpRequestWorker *worker);
    void phoneNumberValidateCallback(OAIHttpRequestWorker *worker);
    void putEventStreamCallback(OAIHttpRequestWorker *worker);
    void putEventsCallback(OAIHttpRequestWorker *worker);
    void removeAttributesCallback(OAIHttpRequestWorker *worker);
    void sendMessagesCallback(OAIHttpRequestWorker *worker);
    void sendOTPMessageCallback(OAIHttpRequestWorker *worker);
    void sendUsersMessagesCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateAdmChannelCallback(OAIHttpRequestWorker *worker);
    void updateApnsChannelCallback(OAIHttpRequestWorker *worker);
    void updateApnsSandboxChannelCallback(OAIHttpRequestWorker *worker);
    void updateApnsVoipChannelCallback(OAIHttpRequestWorker *worker);
    void updateApnsVoipSandboxChannelCallback(OAIHttpRequestWorker *worker);
    void updateApplicationSettingsCallback(OAIHttpRequestWorker *worker);
    void updateBaiduChannelCallback(OAIHttpRequestWorker *worker);
    void updateCampaignCallback(OAIHttpRequestWorker *worker);
    void updateEmailChannelCallback(OAIHttpRequestWorker *worker);
    void updateEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void updateEndpointCallback(OAIHttpRequestWorker *worker);
    void updateEndpointsBatchCallback(OAIHttpRequestWorker *worker);
    void updateGcmChannelCallback(OAIHttpRequestWorker *worker);
    void updateInAppTemplateCallback(OAIHttpRequestWorker *worker);
    void updateJourneyCallback(OAIHttpRequestWorker *worker);
    void updateJourneyStateCallback(OAIHttpRequestWorker *worker);
    void updatePushTemplateCallback(OAIHttpRequestWorker *worker);
    void updateRecommenderConfigurationCallback(OAIHttpRequestWorker *worker);
    void updateSegmentCallback(OAIHttpRequestWorker *worker);
    void updateSmsChannelCallback(OAIHttpRequestWorker *worker);
    void updateSmsTemplateCallback(OAIHttpRequestWorker *worker);
    void updateTemplateActiveVersionCallback(OAIHttpRequestWorker *worker);
    void updateVoiceChannelCallback(OAIHttpRequestWorker *worker);
    void updateVoiceTemplateCallback(OAIHttpRequestWorker *worker);
    void verifyOTPMessageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAppSignal(OAICreateAppResponse summary);
    void createCampaignSignal(OAICreateCampaignResponse summary);
    void createEmailTemplateSignal(OAICreateEmailTemplateResponse summary);
    void createExportJobSignal(OAICreateExportJobResponse summary);
    void createImportJobSignal(OAICreateImportJobResponse summary);
    void createInAppTemplateSignal(OAICreateInAppTemplateResponse summary);
    void createJourneySignal(OAICreateJourneyResponse summary);
    void createPushTemplateSignal(OAICreatePushTemplateResponse summary);
    void createRecommenderConfigurationSignal(OAICreateRecommenderConfigurationResponse summary);
    void createSegmentSignal(OAICreateSegmentResponse summary);
    void createSmsTemplateSignal(OAICreateSmsTemplateResponse summary);
    void createVoiceTemplateSignal(OAICreateVoiceTemplateResponse summary);
    void deleteAdmChannelSignal(OAIDeleteAdmChannelResponse summary);
    void deleteApnsChannelSignal(OAIDeleteApnsChannelResponse summary);
    void deleteApnsSandboxChannelSignal(OAIDeleteApnsSandboxChannelResponse summary);
    void deleteApnsVoipChannelSignal(OAIDeleteApnsVoipChannelResponse summary);
    void deleteApnsVoipSandboxChannelSignal(OAIDeleteApnsVoipSandboxChannelResponse summary);
    void deleteAppSignal(OAIDeleteAppResponse summary);
    void deleteBaiduChannelSignal(OAIDeleteBaiduChannelResponse summary);
    void deleteCampaignSignal(OAIDeleteCampaignResponse summary);
    void deleteEmailChannelSignal(OAIDeleteEmailChannelResponse summary);
    void deleteEmailTemplateSignal(OAIDeleteEmailTemplateResponse summary);
    void deleteEndpointSignal(OAIDeleteEndpointResponse summary);
    void deleteEventStreamSignal(OAIDeleteEventStreamResponse summary);
    void deleteGcmChannelSignal(OAIDeleteGcmChannelResponse summary);
    void deleteInAppTemplateSignal(OAIDeleteInAppTemplateResponse summary);
    void deleteJourneySignal(OAIDeleteJourneyResponse summary);
    void deletePushTemplateSignal(OAIDeletePushTemplateResponse summary);
    void deleteRecommenderConfigurationSignal(OAIDeleteRecommenderConfigurationResponse summary);
    void deleteSegmentSignal(OAIDeleteSegmentResponse summary);
    void deleteSmsChannelSignal(OAIDeleteSmsChannelResponse summary);
    void deleteSmsTemplateSignal(OAIDeleteSmsTemplateResponse summary);
    void deleteUserEndpointsSignal(OAIDeleteUserEndpointsResponse summary);
    void deleteVoiceChannelSignal(OAIDeleteVoiceChannelResponse summary);
    void deleteVoiceTemplateSignal(OAIDeleteVoiceTemplateResponse summary);
    void getAdmChannelSignal(OAIGetAdmChannelResponse summary);
    void getApnsChannelSignal(OAIGetApnsChannelResponse summary);
    void getApnsSandboxChannelSignal(OAIGetApnsSandboxChannelResponse summary);
    void getApnsVoipChannelSignal(OAIGetApnsVoipChannelResponse summary);
    void getApnsVoipSandboxChannelSignal(OAIGetApnsVoipSandboxChannelResponse summary);
    void getAppSignal(OAIGetAppResponse summary);
    void getApplicationDateRangeKpiSignal(OAIGetApplicationDateRangeKpiResponse summary);
    void getApplicationSettingsSignal(OAIGetApplicationSettingsResponse summary);
    void getAppsSignal(OAIGetAppsResponse summary);
    void getBaiduChannelSignal(OAIGetBaiduChannelResponse summary);
    void getCampaignSignal(OAIGetCampaignResponse summary);
    void getCampaignActivitiesSignal(OAIGetCampaignActivitiesResponse summary);
    void getCampaignDateRangeKpiSignal(OAIGetCampaignDateRangeKpiResponse summary);
    void getCampaignVersionSignal(OAIGetCampaignVersionResponse summary);
    void getCampaignVersionsSignal(OAIGetCampaignVersionsResponse summary);
    void getCampaignsSignal(OAIGetCampaignsResponse summary);
    void getChannelsSignal(OAIGetChannelsResponse summary);
    void getEmailChannelSignal(OAIGetEmailChannelResponse summary);
    void getEmailTemplateSignal(OAIGetEmailTemplateResponse summary);
    void getEndpointSignal(OAIGetEndpointResponse summary);
    void getEventStreamSignal(OAIGetEventStreamResponse summary);
    void getExportJobSignal(OAIGetExportJobResponse summary);
    void getExportJobsSignal(OAIGetExportJobsResponse summary);
    void getGcmChannelSignal(OAIGetGcmChannelResponse summary);
    void getImportJobSignal(OAIGetImportJobResponse summary);
    void getImportJobsSignal(OAIGetImportJobsResponse summary);
    void getInAppMessagesSignal(OAIGetInAppMessagesResponse summary);
    void getInAppTemplateSignal(OAIGetInAppTemplateResponse summary);
    void getJourneySignal(OAIGetJourneyResponse summary);
    void getJourneyDateRangeKpiSignal(OAIGetJourneyDateRangeKpiResponse summary);
    void getJourneyExecutionActivityMetricsSignal(OAIGetJourneyExecutionActivityMetricsResponse summary);
    void getJourneyExecutionMetricsSignal(OAIGetJourneyExecutionMetricsResponse summary);
    void getJourneyRunExecutionActivityMetricsSignal(OAIGetJourneyRunExecutionActivityMetricsResponse summary);
    void getJourneyRunExecutionMetricsSignal(OAIGetJourneyRunExecutionMetricsResponse summary);
    void getJourneyRunsSignal(OAIGetJourneyRunsResponse summary);
    void getPushTemplateSignal(OAIGetPushTemplateResponse summary);
    void getRecommenderConfigurationSignal(OAIGetRecommenderConfigurationResponse summary);
    void getRecommenderConfigurationsSignal(OAIGetRecommenderConfigurationsResponse summary);
    void getSegmentSignal(OAIGetSegmentResponse summary);
    void getSegmentExportJobsSignal(OAIGetSegmentExportJobsResponse summary);
    void getSegmentImportJobsSignal(OAIGetSegmentImportJobsResponse summary);
    void getSegmentVersionSignal(OAIGetSegmentVersionResponse summary);
    void getSegmentVersionsSignal(OAIGetSegmentVersionsResponse summary);
    void getSegmentsSignal(OAIGetSegmentsResponse summary);
    void getSmsChannelSignal(OAIGetSmsChannelResponse summary);
    void getSmsTemplateSignal(OAIGetSmsTemplateResponse summary);
    void getUserEndpointsSignal(OAIGetUserEndpointsResponse summary);
    void getVoiceChannelSignal(OAIGetVoiceChannelResponse summary);
    void getVoiceTemplateSignal(OAIGetVoiceTemplateResponse summary);
    void listJourneysSignal(OAIListJourneysResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void listTemplateVersionsSignal(OAIListTemplateVersionsResponse summary);
    void listTemplatesSignal(OAIListTemplatesResponse summary);
    void phoneNumberValidateSignal(OAIPhoneNumberValidateResponse summary);
    void putEventStreamSignal(OAIPutEventStreamResponse summary);
    void putEventsSignal(OAIPutEventsResponse summary);
    void removeAttributesSignal(OAIRemoveAttributesResponse summary);
    void sendMessagesSignal(OAISendMessagesResponse summary);
    void sendOTPMessageSignal(OAISendOTPMessageResponse summary);
    void sendUsersMessagesSignal(OAISendUsersMessagesResponse summary);
    void tagResourceSignal();
    void untagResourceSignal();
    void updateAdmChannelSignal(OAIUpdateAdmChannelResponse summary);
    void updateApnsChannelSignal(OAIUpdateApnsChannelResponse summary);
    void updateApnsSandboxChannelSignal(OAIUpdateApnsSandboxChannelResponse summary);
    void updateApnsVoipChannelSignal(OAIUpdateApnsVoipChannelResponse summary);
    void updateApnsVoipSandboxChannelSignal(OAIUpdateApnsVoipSandboxChannelResponse summary);
    void updateApplicationSettingsSignal(OAIUpdateApplicationSettingsResponse summary);
    void updateBaiduChannelSignal(OAIUpdateBaiduChannelResponse summary);
    void updateCampaignSignal(OAIUpdateCampaignResponse summary);
    void updateEmailChannelSignal(OAIUpdateEmailChannelResponse summary);
    void updateEmailTemplateSignal(OAIUpdateEmailTemplateResponse summary);
    void updateEndpointSignal(OAIUpdateEndpointResponse summary);
    void updateEndpointsBatchSignal(OAIUpdateEndpointsBatchResponse summary);
    void updateGcmChannelSignal(OAIUpdateGcmChannelResponse summary);
    void updateInAppTemplateSignal(OAIUpdateInAppTemplateResponse summary);
    void updateJourneySignal(OAIUpdateJourneyResponse summary);
    void updateJourneyStateSignal(OAIUpdateJourneyStateResponse summary);
    void updatePushTemplateSignal(OAIUpdatePushTemplateResponse summary);
    void updateRecommenderConfigurationSignal(OAIUpdateRecommenderConfigurationResponse summary);
    void updateSegmentSignal(OAIUpdateSegmentResponse summary);
    void updateSmsChannelSignal(OAIUpdateSmsChannelResponse summary);
    void updateSmsTemplateSignal(OAIUpdateSmsTemplateResponse summary);
    void updateTemplateActiveVersionSignal(OAIUpdateTemplateActiveVersionResponse summary);
    void updateVoiceChannelSignal(OAIUpdateVoiceChannelResponse summary);
    void updateVoiceTemplateSignal(OAIUpdateVoiceTemplateResponse summary);
    void verifyOTPMessageSignal(OAIVerifyOTPMessageResponse summary);


    void createAppSignalFull(OAIHttpRequestWorker *worker, OAICreateAppResponse summary);
    void createCampaignSignalFull(OAIHttpRequestWorker *worker, OAICreateCampaignResponse summary);
    void createEmailTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreateEmailTemplateResponse summary);
    void createExportJobSignalFull(OAIHttpRequestWorker *worker, OAICreateExportJobResponse summary);
    void createImportJobSignalFull(OAIHttpRequestWorker *worker, OAICreateImportJobResponse summary);
    void createInAppTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreateInAppTemplateResponse summary);
    void createJourneySignalFull(OAIHttpRequestWorker *worker, OAICreateJourneyResponse summary);
    void createPushTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreatePushTemplateResponse summary);
    void createRecommenderConfigurationSignalFull(OAIHttpRequestWorker *worker, OAICreateRecommenderConfigurationResponse summary);
    void createSegmentSignalFull(OAIHttpRequestWorker *worker, OAICreateSegmentResponse summary);
    void createSmsTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreateSmsTemplateResponse summary);
    void createVoiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAICreateVoiceTemplateResponse summary);
    void deleteAdmChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAdmChannelResponse summary);
    void deleteApnsChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteApnsChannelResponse summary);
    void deleteApnsSandboxChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteApnsSandboxChannelResponse summary);
    void deleteApnsVoipChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteApnsVoipChannelResponse summary);
    void deleteApnsVoipSandboxChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteApnsVoipSandboxChannelResponse summary);
    void deleteAppSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAppResponse summary);
    void deleteBaiduChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteBaiduChannelResponse summary);
    void deleteCampaignSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCampaignResponse summary);
    void deleteEmailChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteEmailChannelResponse summary);
    void deleteEmailTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleteEmailTemplateResponse summary);
    void deleteEndpointSignalFull(OAIHttpRequestWorker *worker, OAIDeleteEndpointResponse summary);
    void deleteEventStreamSignalFull(OAIHttpRequestWorker *worker, OAIDeleteEventStreamResponse summary);
    void deleteGcmChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteGcmChannelResponse summary);
    void deleteInAppTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleteInAppTemplateResponse summary);
    void deleteJourneySignalFull(OAIHttpRequestWorker *worker, OAIDeleteJourneyResponse summary);
    void deletePushTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeletePushTemplateResponse summary);
    void deleteRecommenderConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIDeleteRecommenderConfigurationResponse summary);
    void deleteSegmentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSegmentResponse summary);
    void deleteSmsChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSmsChannelResponse summary);
    void deleteSmsTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSmsTemplateResponse summary);
    void deleteUserEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUserEndpointsResponse summary);
    void deleteVoiceChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVoiceChannelResponse summary);
    void deleteVoiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVoiceTemplateResponse summary);
    void getAdmChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetAdmChannelResponse summary);
    void getApnsChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetApnsChannelResponse summary);
    void getApnsSandboxChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetApnsSandboxChannelResponse summary);
    void getApnsVoipChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetApnsVoipChannelResponse summary);
    void getApnsVoipSandboxChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetApnsVoipSandboxChannelResponse summary);
    void getAppSignalFull(OAIHttpRequestWorker *worker, OAIGetAppResponse summary);
    void getApplicationDateRangeKpiSignalFull(OAIHttpRequestWorker *worker, OAIGetApplicationDateRangeKpiResponse summary);
    void getApplicationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetApplicationSettingsResponse summary);
    void getAppsSignalFull(OAIHttpRequestWorker *worker, OAIGetAppsResponse summary);
    void getBaiduChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetBaiduChannelResponse summary);
    void getCampaignSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignResponse summary);
    void getCampaignActivitiesSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignActivitiesResponse summary);
    void getCampaignDateRangeKpiSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignDateRangeKpiResponse summary);
    void getCampaignVersionSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignVersionResponse summary);
    void getCampaignVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignVersionsResponse summary);
    void getCampaignsSignalFull(OAIHttpRequestWorker *worker, OAIGetCampaignsResponse summary);
    void getChannelsSignalFull(OAIHttpRequestWorker *worker, OAIGetChannelsResponse summary);
    void getEmailChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetEmailChannelResponse summary);
    void getEmailTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetEmailTemplateResponse summary);
    void getEndpointSignalFull(OAIHttpRequestWorker *worker, OAIGetEndpointResponse summary);
    void getEventStreamSignalFull(OAIHttpRequestWorker *worker, OAIGetEventStreamResponse summary);
    void getExportJobSignalFull(OAIHttpRequestWorker *worker, OAIGetExportJobResponse summary);
    void getExportJobsSignalFull(OAIHttpRequestWorker *worker, OAIGetExportJobsResponse summary);
    void getGcmChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetGcmChannelResponse summary);
    void getImportJobSignalFull(OAIHttpRequestWorker *worker, OAIGetImportJobResponse summary);
    void getImportJobsSignalFull(OAIHttpRequestWorker *worker, OAIGetImportJobsResponse summary);
    void getInAppMessagesSignalFull(OAIHttpRequestWorker *worker, OAIGetInAppMessagesResponse summary);
    void getInAppTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetInAppTemplateResponse summary);
    void getJourneySignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyResponse summary);
    void getJourneyDateRangeKpiSignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyDateRangeKpiResponse summary);
    void getJourneyExecutionActivityMetricsSignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyExecutionActivityMetricsResponse summary);
    void getJourneyExecutionMetricsSignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyExecutionMetricsResponse summary);
    void getJourneyRunExecutionActivityMetricsSignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyRunExecutionActivityMetricsResponse summary);
    void getJourneyRunExecutionMetricsSignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyRunExecutionMetricsResponse summary);
    void getJourneyRunsSignalFull(OAIHttpRequestWorker *worker, OAIGetJourneyRunsResponse summary);
    void getPushTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetPushTemplateResponse summary);
    void getRecommenderConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetRecommenderConfigurationResponse summary);
    void getRecommenderConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecommenderConfigurationsResponse summary);
    void getSegmentSignalFull(OAIHttpRequestWorker *worker, OAIGetSegmentResponse summary);
    void getSegmentExportJobsSignalFull(OAIHttpRequestWorker *worker, OAIGetSegmentExportJobsResponse summary);
    void getSegmentImportJobsSignalFull(OAIHttpRequestWorker *worker, OAIGetSegmentImportJobsResponse summary);
    void getSegmentVersionSignalFull(OAIHttpRequestWorker *worker, OAIGetSegmentVersionResponse summary);
    void getSegmentVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGetSegmentVersionsResponse summary);
    void getSegmentsSignalFull(OAIHttpRequestWorker *worker, OAIGetSegmentsResponse summary);
    void getSmsChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetSmsChannelResponse summary);
    void getSmsTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetSmsTemplateResponse summary);
    void getUserEndpointsSignalFull(OAIHttpRequestWorker *worker, OAIGetUserEndpointsResponse summary);
    void getVoiceChannelSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceChannelResponse summary);
    void getVoiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceTemplateResponse summary);
    void listJourneysSignalFull(OAIHttpRequestWorker *worker, OAIListJourneysResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void listTemplateVersionsSignalFull(OAIHttpRequestWorker *worker, OAIListTemplateVersionsResponse summary);
    void listTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListTemplatesResponse summary);
    void phoneNumberValidateSignalFull(OAIHttpRequestWorker *worker, OAIPhoneNumberValidateResponse summary);
    void putEventStreamSignalFull(OAIHttpRequestWorker *worker, OAIPutEventStreamResponse summary);
    void putEventsSignalFull(OAIHttpRequestWorker *worker, OAIPutEventsResponse summary);
    void removeAttributesSignalFull(OAIHttpRequestWorker *worker, OAIRemoveAttributesResponse summary);
    void sendMessagesSignalFull(OAIHttpRequestWorker *worker, OAISendMessagesResponse summary);
    void sendOTPMessageSignalFull(OAIHttpRequestWorker *worker, OAISendOTPMessageResponse summary);
    void sendUsersMessagesSignalFull(OAIHttpRequestWorker *worker, OAISendUsersMessagesResponse summary);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker);
    void updateAdmChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAdmChannelResponse summary);
    void updateApnsChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateApnsChannelResponse summary);
    void updateApnsSandboxChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateApnsSandboxChannelResponse summary);
    void updateApnsVoipChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateApnsVoipChannelResponse summary);
    void updateApnsVoipSandboxChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateApnsVoipSandboxChannelResponse summary);
    void updateApplicationSettingsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateApplicationSettingsResponse summary);
    void updateBaiduChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateBaiduChannelResponse summary);
    void updateCampaignSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCampaignResponse summary);
    void updateEmailChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateEmailChannelResponse summary);
    void updateEmailTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateEmailTemplateResponse summary);
    void updateEndpointSignalFull(OAIHttpRequestWorker *worker, OAIUpdateEndpointResponse summary);
    void updateEndpointsBatchSignalFull(OAIHttpRequestWorker *worker, OAIUpdateEndpointsBatchResponse summary);
    void updateGcmChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGcmChannelResponse summary);
    void updateInAppTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateInAppTemplateResponse summary);
    void updateJourneySignalFull(OAIHttpRequestWorker *worker, OAIUpdateJourneyResponse summary);
    void updateJourneyStateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateJourneyStateResponse summary);
    void updatePushTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePushTemplateResponse summary);
    void updateRecommenderConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRecommenderConfigurationResponse summary);
    void updateSegmentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSegmentResponse summary);
    void updateSmsChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSmsChannelResponse summary);
    void updateSmsTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSmsTemplateResponse summary);
    void updateTemplateActiveVersionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTemplateActiveVersionResponse summary);
    void updateVoiceChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVoiceChannelResponse summary);
    void updateVoiceTemplateSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVoiceTemplateResponse summary);
    void verifyOTPMessageSignalFull(OAIHttpRequestWorker *worker, OAIVerifyOTPMessageResponse summary);

    Q_DECL_DEPRECATED_X("Use createAppSignalError() instead")
    void createAppSignalE(OAICreateAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppSignalError(OAICreateAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCampaignSignalError() instead")
    void createCampaignSignalE(OAICreateCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignSignalError(OAICreateCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmailTemplateSignalError() instead")
    void createEmailTemplateSignalE(OAICreateEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmailTemplateSignalError(OAICreateEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createExportJobSignalError() instead")
    void createExportJobSignalE(OAICreateExportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createExportJobSignalError(OAICreateExportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImportJobSignalError() instead")
    void createImportJobSignalE(OAICreateImportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImportJobSignalError(OAICreateImportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInAppTemplateSignalError() instead")
    void createInAppTemplateSignalE(OAICreateInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createInAppTemplateSignalError(OAICreateInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createJourneySignalError() instead")
    void createJourneySignalE(OAICreateJourneyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createJourneySignalError(OAICreateJourneyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPushTemplateSignalError() instead")
    void createPushTemplateSignalE(OAICreatePushTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPushTemplateSignalError(OAICreatePushTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRecommenderConfigurationSignalError() instead")
    void createRecommenderConfigurationSignalE(OAICreateRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRecommenderConfigurationSignalError(OAICreateRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSegmentSignalError() instead")
    void createSegmentSignalE(OAICreateSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSegmentSignalError(OAICreateSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSmsTemplateSignalError() instead")
    void createSmsTemplateSignalE(OAICreateSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSmsTemplateSignalError(OAICreateSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVoiceTemplateSignalError() instead")
    void createVoiceTemplateSignalE(OAICreateVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVoiceTemplateSignalError(OAICreateVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdmChannelSignalError() instead")
    void deleteAdmChannelSignalE(OAIDeleteAdmChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdmChannelSignalError(OAIDeleteAdmChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsChannelSignalError() instead")
    void deleteApnsChannelSignalE(OAIDeleteApnsChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsChannelSignalError(OAIDeleteApnsChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsSandboxChannelSignalError() instead")
    void deleteApnsSandboxChannelSignalE(OAIDeleteApnsSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsSandboxChannelSignalError(OAIDeleteApnsSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsVoipChannelSignalError() instead")
    void deleteApnsVoipChannelSignalE(OAIDeleteApnsVoipChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsVoipChannelSignalError(OAIDeleteApnsVoipChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsVoipSandboxChannelSignalError() instead")
    void deleteApnsVoipSandboxChannelSignalE(OAIDeleteApnsVoipSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsVoipSandboxChannelSignalError(OAIDeleteApnsVoipSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppSignalError() instead")
    void deleteAppSignalE(OAIDeleteAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppSignalError(OAIDeleteAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBaiduChannelSignalError() instead")
    void deleteBaiduChannelSignalE(OAIDeleteBaiduChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBaiduChannelSignalError(OAIDeleteBaiduChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignSignalError() instead")
    void deleteCampaignSignalE(OAIDeleteCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSignalError(OAIDeleteCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmailChannelSignalError() instead")
    void deleteEmailChannelSignalE(OAIDeleteEmailChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmailChannelSignalError(OAIDeleteEmailChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmailTemplateSignalError() instead")
    void deleteEmailTemplateSignalE(OAIDeleteEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmailTemplateSignalError(OAIDeleteEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEndpointSignalError() instead")
    void deleteEndpointSignalE(OAIDeleteEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEndpointSignalError(OAIDeleteEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventStreamSignalError() instead")
    void deleteEventStreamSignalE(OAIDeleteEventStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventStreamSignalError(OAIDeleteEventStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGcmChannelSignalError() instead")
    void deleteGcmChannelSignalE(OAIDeleteGcmChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGcmChannelSignalError(OAIDeleteGcmChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInAppTemplateSignalError() instead")
    void deleteInAppTemplateSignalE(OAIDeleteInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInAppTemplateSignalError(OAIDeleteInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJourneySignalError() instead")
    void deleteJourneySignalE(OAIDeleteJourneyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJourneySignalError(OAIDeleteJourneyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePushTemplateSignalError() instead")
    void deletePushTemplateSignalE(OAIDeletePushTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePushTemplateSignalError(OAIDeletePushTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecommenderConfigurationSignalError() instead")
    void deleteRecommenderConfigurationSignalE(OAIDeleteRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecommenderConfigurationSignalError(OAIDeleteRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSegmentSignalError() instead")
    void deleteSegmentSignalE(OAIDeleteSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSegmentSignalError(OAIDeleteSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSmsChannelSignalError() instead")
    void deleteSmsChannelSignalE(OAIDeleteSmsChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSmsChannelSignalError(OAIDeleteSmsChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSmsTemplateSignalError() instead")
    void deleteSmsTemplateSignalE(OAIDeleteSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSmsTemplateSignalError(OAIDeleteSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserEndpointsSignalError() instead")
    void deleteUserEndpointsSignalE(OAIDeleteUserEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserEndpointsSignalError(OAIDeleteUserEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceChannelSignalError() instead")
    void deleteVoiceChannelSignalE(OAIDeleteVoiceChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceChannelSignalError(OAIDeleteVoiceChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceTemplateSignalError() instead")
    void deleteVoiceTemplateSignalE(OAIDeleteVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceTemplateSignalError(OAIDeleteVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdmChannelSignalError() instead")
    void getAdmChannelSignalE(OAIGetAdmChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdmChannelSignalError(OAIGetAdmChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsChannelSignalError() instead")
    void getApnsChannelSignalE(OAIGetApnsChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsChannelSignalError(OAIGetApnsChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsSandboxChannelSignalError() instead")
    void getApnsSandboxChannelSignalE(OAIGetApnsSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsSandboxChannelSignalError(OAIGetApnsSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsVoipChannelSignalError() instead")
    void getApnsVoipChannelSignalE(OAIGetApnsVoipChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsVoipChannelSignalError(OAIGetApnsVoipChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsVoipSandboxChannelSignalError() instead")
    void getApnsVoipSandboxChannelSignalE(OAIGetApnsVoipSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsVoipSandboxChannelSignalError(OAIGetApnsVoipSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppSignalError() instead")
    void getAppSignalE(OAIGetAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppSignalError(OAIGetAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationDateRangeKpiSignalError() instead")
    void getApplicationDateRangeKpiSignalE(OAIGetApplicationDateRangeKpiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationDateRangeKpiSignalError(OAIGetApplicationDateRangeKpiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationSettingsSignalError() instead")
    void getApplicationSettingsSignalE(OAIGetApplicationSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationSettingsSignalError(OAIGetApplicationSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppsSignalError() instead")
    void getAppsSignalE(OAIGetAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppsSignalError(OAIGetAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBaiduChannelSignalError() instead")
    void getBaiduChannelSignalE(OAIGetBaiduChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBaiduChannelSignalError(OAIGetBaiduChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSignalError() instead")
    void getCampaignSignalE(OAIGetCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalError(OAIGetCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignActivitiesSignalError() instead")
    void getCampaignActivitiesSignalE(OAIGetCampaignActivitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignActivitiesSignalError(OAIGetCampaignActivitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignDateRangeKpiSignalError() instead")
    void getCampaignDateRangeKpiSignalE(OAIGetCampaignDateRangeKpiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignDateRangeKpiSignalError(OAIGetCampaignDateRangeKpiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignVersionSignalError() instead")
    void getCampaignVersionSignalE(OAIGetCampaignVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignVersionSignalError(OAIGetCampaignVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignVersionsSignalError() instead")
    void getCampaignVersionsSignalE(OAIGetCampaignVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignVersionsSignalError(OAIGetCampaignVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalError() instead")
    void getCampaignsSignalE(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalError(OAIGetCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsSignalError() instead")
    void getChannelsSignalE(OAIGetChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsSignalError(OAIGetChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailChannelSignalError() instead")
    void getEmailChannelSignalE(OAIGetEmailChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailChannelSignalError(OAIGetEmailChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailTemplateSignalError() instead")
    void getEmailTemplateSignalE(OAIGetEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailTemplateSignalError(OAIGetEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointSignalError() instead")
    void getEndpointSignalE(OAIGetEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointSignalError(OAIGetEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventStreamSignalError() instead")
    void getEventStreamSignalE(OAIGetEventStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventStreamSignalError(OAIGetEventStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportJobSignalError() instead")
    void getExportJobSignalE(OAIGetExportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportJobSignalError(OAIGetExportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportJobsSignalError() instead")
    void getExportJobsSignalE(OAIGetExportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportJobsSignalError(OAIGetExportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGcmChannelSignalError() instead")
    void getGcmChannelSignalE(OAIGetGcmChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGcmChannelSignalError(OAIGetGcmChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobSignalError() instead")
    void getImportJobSignalE(OAIGetImportJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobSignalError(OAIGetImportJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobsSignalError() instead")
    void getImportJobsSignalE(OAIGetImportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobsSignalError(OAIGetImportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInAppMessagesSignalError() instead")
    void getInAppMessagesSignalE(OAIGetInAppMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInAppMessagesSignalError(OAIGetInAppMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInAppTemplateSignalError() instead")
    void getInAppTemplateSignalE(OAIGetInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInAppTemplateSignalError(OAIGetInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneySignalError() instead")
    void getJourneySignalE(OAIGetJourneyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneySignalError(OAIGetJourneyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyDateRangeKpiSignalError() instead")
    void getJourneyDateRangeKpiSignalE(OAIGetJourneyDateRangeKpiResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyDateRangeKpiSignalError(OAIGetJourneyDateRangeKpiResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyExecutionActivityMetricsSignalError() instead")
    void getJourneyExecutionActivityMetricsSignalE(OAIGetJourneyExecutionActivityMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyExecutionActivityMetricsSignalError(OAIGetJourneyExecutionActivityMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyExecutionMetricsSignalError() instead")
    void getJourneyExecutionMetricsSignalE(OAIGetJourneyExecutionMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyExecutionMetricsSignalError(OAIGetJourneyExecutionMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyRunExecutionActivityMetricsSignalError() instead")
    void getJourneyRunExecutionActivityMetricsSignalE(OAIGetJourneyRunExecutionActivityMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyRunExecutionActivityMetricsSignalError(OAIGetJourneyRunExecutionActivityMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyRunExecutionMetricsSignalError() instead")
    void getJourneyRunExecutionMetricsSignalE(OAIGetJourneyRunExecutionMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyRunExecutionMetricsSignalError(OAIGetJourneyRunExecutionMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyRunsSignalError() instead")
    void getJourneyRunsSignalE(OAIGetJourneyRunsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyRunsSignalError(OAIGetJourneyRunsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPushTemplateSignalError() instead")
    void getPushTemplateSignalE(OAIGetPushTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPushTemplateSignalError(OAIGetPushTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommenderConfigurationSignalError() instead")
    void getRecommenderConfigurationSignalE(OAIGetRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommenderConfigurationSignalError(OAIGetRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommenderConfigurationsSignalError() instead")
    void getRecommenderConfigurationsSignalE(OAIGetRecommenderConfigurationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommenderConfigurationsSignalError(OAIGetRecommenderConfigurationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentSignalError() instead")
    void getSegmentSignalE(OAIGetSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentSignalError(OAIGetSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentExportJobsSignalError() instead")
    void getSegmentExportJobsSignalE(OAIGetSegmentExportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentExportJobsSignalError(OAIGetSegmentExportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentImportJobsSignalError() instead")
    void getSegmentImportJobsSignalE(OAIGetSegmentImportJobsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentImportJobsSignalError(OAIGetSegmentImportJobsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentVersionSignalError() instead")
    void getSegmentVersionSignalE(OAIGetSegmentVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentVersionSignalError(OAIGetSegmentVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentVersionsSignalError() instead")
    void getSegmentVersionsSignalE(OAIGetSegmentVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentVersionsSignalError(OAIGetSegmentVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentsSignalError() instead")
    void getSegmentsSignalE(OAIGetSegmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentsSignalError(OAIGetSegmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSmsChannelSignalError() instead")
    void getSmsChannelSignalE(OAIGetSmsChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSmsChannelSignalError(OAIGetSmsChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSmsTemplateSignalError() instead")
    void getSmsTemplateSignalE(OAIGetSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSmsTemplateSignalError(OAIGetSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEndpointsSignalError() instead")
    void getUserEndpointsSignalE(OAIGetUserEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEndpointsSignalError(OAIGetUserEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceChannelSignalError() instead")
    void getVoiceChannelSignalE(OAIGetVoiceChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceChannelSignalError(OAIGetVoiceChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceTemplateSignalError() instead")
    void getVoiceTemplateSignalE(OAIGetVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceTemplateSignalError(OAIGetVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listJourneysSignalError() instead")
    void listJourneysSignalE(OAIListJourneysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listJourneysSignalError(OAIListJourneysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplateVersionsSignalError() instead")
    void listTemplateVersionsSignalE(OAIListTemplateVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplateVersionsSignalError(OAIListTemplateVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalError() instead")
    void listTemplatesSignalE(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalError(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneNumberValidateSignalError() instead")
    void phoneNumberValidateSignalE(OAIPhoneNumberValidateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneNumberValidateSignalError(OAIPhoneNumberValidateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEventStreamSignalError() instead")
    void putEventStreamSignalE(OAIPutEventStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEventStreamSignalError(OAIPutEventStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEventsSignalError() instead")
    void putEventsSignalE(OAIPutEventsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEventsSignalError(OAIPutEventsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAttributesSignalError() instead")
    void removeAttributesSignalE(OAIRemoveAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAttributesSignalError(OAIRemoveAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessagesSignalError() instead")
    void sendMessagesSignalE(OAISendMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessagesSignalError(OAISendMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendOTPMessageSignalError() instead")
    void sendOTPMessageSignalE(OAISendOTPMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendOTPMessageSignalError(OAISendOTPMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendUsersMessagesSignalError() instead")
    void sendUsersMessagesSignalE(OAISendUsersMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendUsersMessagesSignalError(OAISendUsersMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdmChannelSignalError() instead")
    void updateAdmChannelSignalE(OAIUpdateAdmChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdmChannelSignalError(OAIUpdateAdmChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsChannelSignalError() instead")
    void updateApnsChannelSignalE(OAIUpdateApnsChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsChannelSignalError(OAIUpdateApnsChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsSandboxChannelSignalError() instead")
    void updateApnsSandboxChannelSignalE(OAIUpdateApnsSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsSandboxChannelSignalError(OAIUpdateApnsSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsVoipChannelSignalError() instead")
    void updateApnsVoipChannelSignalE(OAIUpdateApnsVoipChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsVoipChannelSignalError(OAIUpdateApnsVoipChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsVoipSandboxChannelSignalError() instead")
    void updateApnsVoipSandboxChannelSignalE(OAIUpdateApnsVoipSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsVoipSandboxChannelSignalError(OAIUpdateApnsVoipSandboxChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSettingsSignalError() instead")
    void updateApplicationSettingsSignalE(OAIUpdateApplicationSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSettingsSignalError(OAIUpdateApplicationSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBaiduChannelSignalError() instead")
    void updateBaiduChannelSignalE(OAIUpdateBaiduChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBaiduChannelSignalError(OAIUpdateBaiduChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignSignalError() instead")
    void updateCampaignSignalE(OAIUpdateCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignSignalError(OAIUpdateCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailChannelSignalError() instead")
    void updateEmailChannelSignalE(OAIUpdateEmailChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailChannelSignalError(OAIUpdateEmailChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailTemplateSignalError() instead")
    void updateEmailTemplateSignalE(OAIUpdateEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailTemplateSignalError(OAIUpdateEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointSignalError() instead")
    void updateEndpointSignalE(OAIUpdateEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointSignalError(OAIUpdateEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointsBatchSignalError() instead")
    void updateEndpointsBatchSignalE(OAIUpdateEndpointsBatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointsBatchSignalError(OAIUpdateEndpointsBatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGcmChannelSignalError() instead")
    void updateGcmChannelSignalE(OAIUpdateGcmChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGcmChannelSignalError(OAIUpdateGcmChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInAppTemplateSignalError() instead")
    void updateInAppTemplateSignalE(OAIUpdateInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInAppTemplateSignalError(OAIUpdateInAppTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJourneySignalError() instead")
    void updateJourneySignalE(OAIUpdateJourneyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJourneySignalError(OAIUpdateJourneyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJourneyStateSignalError() instead")
    void updateJourneyStateSignalE(OAIUpdateJourneyStateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJourneyStateSignalError(OAIUpdateJourneyStateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePushTemplateSignalError() instead")
    void updatePushTemplateSignalE(OAIUpdatePushTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePushTemplateSignalError(OAIUpdatePushTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRecommenderConfigurationSignalError() instead")
    void updateRecommenderConfigurationSignalE(OAIUpdateRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRecommenderConfigurationSignalError(OAIUpdateRecommenderConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSegmentSignalError() instead")
    void updateSegmentSignalE(OAIUpdateSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSegmentSignalError(OAIUpdateSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSmsChannelSignalError() instead")
    void updateSmsChannelSignalE(OAIUpdateSmsChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSmsChannelSignalError(OAIUpdateSmsChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSmsTemplateSignalError() instead")
    void updateSmsTemplateSignalE(OAIUpdateSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSmsTemplateSignalError(OAIUpdateSmsTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateActiveVersionSignalError() instead")
    void updateTemplateActiveVersionSignalE(OAIUpdateTemplateActiveVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateActiveVersionSignalError(OAIUpdateTemplateActiveVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceChannelSignalError() instead")
    void updateVoiceChannelSignalE(OAIUpdateVoiceChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceChannelSignalError(OAIUpdateVoiceChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceTemplateSignalError() instead")
    void updateVoiceTemplateSignalE(OAIUpdateVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceTemplateSignalError(OAIUpdateVoiceTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyOTPMessageSignalError() instead")
    void verifyOTPMessageSignalE(OAIVerifyOTPMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyOTPMessageSignalError(OAIVerifyOTPMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAppSignalErrorFull() instead")
    void createAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCampaignSignalErrorFull() instead")
    void createCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createEmailTemplateSignalErrorFull() instead")
    void createEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createExportJobSignalErrorFull() instead")
    void createExportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createExportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImportJobSignalErrorFull() instead")
    void createImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createInAppTemplateSignalErrorFull() instead")
    void createInAppTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createInAppTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createJourneySignalErrorFull() instead")
    void createJourneySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createJourneySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPushTemplateSignalErrorFull() instead")
    void createPushTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPushTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRecommenderConfigurationSignalErrorFull() instead")
    void createRecommenderConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRecommenderConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSegmentSignalErrorFull() instead")
    void createSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSmsTemplateSignalErrorFull() instead")
    void createSmsTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSmsTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVoiceTemplateSignalErrorFull() instead")
    void createVoiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVoiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAdmChannelSignalErrorFull() instead")
    void deleteAdmChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAdmChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsChannelSignalErrorFull() instead")
    void deleteApnsChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsSandboxChannelSignalErrorFull() instead")
    void deleteApnsSandboxChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsSandboxChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsVoipChannelSignalErrorFull() instead")
    void deleteApnsVoipChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsVoipChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteApnsVoipSandboxChannelSignalErrorFull() instead")
    void deleteApnsVoipSandboxChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteApnsVoipSandboxChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppSignalErrorFull() instead")
    void deleteAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBaiduChannelSignalErrorFull() instead")
    void deleteBaiduChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBaiduChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignSignalErrorFull() instead")
    void deleteCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmailChannelSignalErrorFull() instead")
    void deleteEmailChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmailChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEmailTemplateSignalErrorFull() instead")
    void deleteEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEndpointSignalErrorFull() instead")
    void deleteEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventStreamSignalErrorFull() instead")
    void deleteEventStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGcmChannelSignalErrorFull() instead")
    void deleteGcmChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGcmChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInAppTemplateSignalErrorFull() instead")
    void deleteInAppTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInAppTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJourneySignalErrorFull() instead")
    void deleteJourneySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJourneySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePushTemplateSignalErrorFull() instead")
    void deletePushTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePushTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRecommenderConfigurationSignalErrorFull() instead")
    void deleteRecommenderConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRecommenderConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSegmentSignalErrorFull() instead")
    void deleteSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSmsChannelSignalErrorFull() instead")
    void deleteSmsChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSmsChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSmsTemplateSignalErrorFull() instead")
    void deleteSmsTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSmsTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserEndpointsSignalErrorFull() instead")
    void deleteUserEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceChannelSignalErrorFull() instead")
    void deleteVoiceChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceTemplateSignalErrorFull() instead")
    void deleteVoiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAdmChannelSignalErrorFull() instead")
    void getAdmChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAdmChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsChannelSignalErrorFull() instead")
    void getApnsChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsSandboxChannelSignalErrorFull() instead")
    void getApnsSandboxChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsSandboxChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsVoipChannelSignalErrorFull() instead")
    void getApnsVoipChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsVoipChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApnsVoipSandboxChannelSignalErrorFull() instead")
    void getApnsVoipSandboxChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApnsVoipSandboxChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppSignalErrorFull() instead")
    void getAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationDateRangeKpiSignalErrorFull() instead")
    void getApplicationDateRangeKpiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationDateRangeKpiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApplicationSettingsSignalErrorFull() instead")
    void getApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppsSignalErrorFull() instead")
    void getAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBaiduChannelSignalErrorFull() instead")
    void getBaiduChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBaiduChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignSignalErrorFull() instead")
    void getCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignActivitiesSignalErrorFull() instead")
    void getCampaignActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignDateRangeKpiSignalErrorFull() instead")
    void getCampaignDateRangeKpiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignDateRangeKpiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignVersionSignalErrorFull() instead")
    void getCampaignVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignVersionsSignalErrorFull() instead")
    void getCampaignVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCampaignsSignalErrorFull() instead")
    void getCampaignsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCampaignsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelsSignalErrorFull() instead")
    void getChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailChannelSignalErrorFull() instead")
    void getEmailChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmailTemplateSignalErrorFull() instead")
    void getEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEndpointSignalErrorFull() instead")
    void getEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventStreamSignalErrorFull() instead")
    void getEventStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportJobSignalErrorFull() instead")
    void getExportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportJobsSignalErrorFull() instead")
    void getExportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGcmChannelSignalErrorFull() instead")
    void getGcmChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGcmChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobSignalErrorFull() instead")
    void getImportJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImportJobsSignalErrorFull() instead")
    void getImportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInAppMessagesSignalErrorFull() instead")
    void getInAppMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInAppMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInAppTemplateSignalErrorFull() instead")
    void getInAppTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInAppTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneySignalErrorFull() instead")
    void getJourneySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyDateRangeKpiSignalErrorFull() instead")
    void getJourneyDateRangeKpiSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyDateRangeKpiSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyExecutionActivityMetricsSignalErrorFull() instead")
    void getJourneyExecutionActivityMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyExecutionActivityMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyExecutionMetricsSignalErrorFull() instead")
    void getJourneyExecutionMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyExecutionMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyRunExecutionActivityMetricsSignalErrorFull() instead")
    void getJourneyRunExecutionActivityMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyRunExecutionActivityMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyRunExecutionMetricsSignalErrorFull() instead")
    void getJourneyRunExecutionMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyRunExecutionMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJourneyRunsSignalErrorFull() instead")
    void getJourneyRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJourneyRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPushTemplateSignalErrorFull() instead")
    void getPushTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPushTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommenderConfigurationSignalErrorFull() instead")
    void getRecommenderConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommenderConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecommenderConfigurationsSignalErrorFull() instead")
    void getRecommenderConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecommenderConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentSignalErrorFull() instead")
    void getSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentExportJobsSignalErrorFull() instead")
    void getSegmentExportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentExportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentImportJobsSignalErrorFull() instead")
    void getSegmentImportJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentImportJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentVersionSignalErrorFull() instead")
    void getSegmentVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentVersionsSignalErrorFull() instead")
    void getSegmentVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSegmentsSignalErrorFull() instead")
    void getSegmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSegmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSmsChannelSignalErrorFull() instead")
    void getSmsChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSmsChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSmsTemplateSignalErrorFull() instead")
    void getSmsTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSmsTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserEndpointsSignalErrorFull() instead")
    void getUserEndpointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserEndpointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceChannelSignalErrorFull() instead")
    void getVoiceChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceTemplateSignalErrorFull() instead")
    void getVoiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listJourneysSignalErrorFull() instead")
    void listJourneysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listJourneysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplateVersionsSignalErrorFull() instead")
    void listTemplateVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplateVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTemplatesSignalErrorFull() instead")
    void listTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use phoneNumberValidateSignalErrorFull() instead")
    void phoneNumberValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void phoneNumberValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEventStreamSignalErrorFull() instead")
    void putEventStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEventStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEventsSignalErrorFull() instead")
    void putEventsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEventsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAttributesSignalErrorFull() instead")
    void removeAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessagesSignalErrorFull() instead")
    void sendMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendOTPMessageSignalErrorFull() instead")
    void sendOTPMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendOTPMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendUsersMessagesSignalErrorFull() instead")
    void sendUsersMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendUsersMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdmChannelSignalErrorFull() instead")
    void updateAdmChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdmChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsChannelSignalErrorFull() instead")
    void updateApnsChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsSandboxChannelSignalErrorFull() instead")
    void updateApnsSandboxChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsSandboxChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsVoipChannelSignalErrorFull() instead")
    void updateApnsVoipChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsVoipChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApnsVoipSandboxChannelSignalErrorFull() instead")
    void updateApnsVoipSandboxChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApnsVoipSandboxChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateApplicationSettingsSignalErrorFull() instead")
    void updateApplicationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateApplicationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBaiduChannelSignalErrorFull() instead")
    void updateBaiduChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBaiduChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignSignalErrorFull() instead")
    void updateCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailChannelSignalErrorFull() instead")
    void updateEmailChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEmailTemplateSignalErrorFull() instead")
    void updateEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointSignalErrorFull() instead")
    void updateEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEndpointsBatchSignalErrorFull() instead")
    void updateEndpointsBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEndpointsBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGcmChannelSignalErrorFull() instead")
    void updateGcmChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGcmChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateInAppTemplateSignalErrorFull() instead")
    void updateInAppTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateInAppTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJourneySignalErrorFull() instead")
    void updateJourneySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJourneySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateJourneyStateSignalErrorFull() instead")
    void updateJourneyStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateJourneyStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePushTemplateSignalErrorFull() instead")
    void updatePushTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePushTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRecommenderConfigurationSignalErrorFull() instead")
    void updateRecommenderConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRecommenderConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSegmentSignalErrorFull() instead")
    void updateSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSmsChannelSignalErrorFull() instead")
    void updateSmsChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSmsChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSmsTemplateSignalErrorFull() instead")
    void updateSmsTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSmsTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTemplateActiveVersionSignalErrorFull() instead")
    void updateTemplateActiveVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTemplateActiveVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceChannelSignalErrorFull() instead")
    void updateVoiceChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceTemplateSignalErrorFull() instead")
    void updateVoiceTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyOTPMessageSignalErrorFull() instead")
    void verifyOTPMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyOTPMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
