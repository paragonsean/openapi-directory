/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSegment_request_WriteSegmentRequest_SegmentGroups.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::OAICreateSegment_request_WriteSegmentRequest_SegmentGroups(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::OAICreateSegment_request_WriteSegmentRequest_SegmentGroups() {
    this->initializeModel();
}

OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::~OAICreateSegment_request_WriteSegmentRequest_SegmentGroups() {}

void OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::initializeModel() {

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_include_isSet = false;
    m_include_isValid = false;
}

void OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::fromJsonObject(QJsonObject json) {

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("Groups")]);
    m_groups_isSet = !json[QString("Groups")].isNull() && m_groups_isValid;

    m_include_isValid = ::OpenAPI::fromJsonValue(m_include, json[QString("Include")]);
    m_include_isSet = !json[QString("Include")].isNull() && m_include_isValid;
}

QString OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::asJsonObject() const {
    QJsonObject obj;
    if (m_groups.isSet()) {
        obj.insert(QString("Groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_include.isSet()) {
        obj.insert(QString("Include"), ::OpenAPI::toJsonValue(m_include));
    }
    return obj;
}

QList OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::getGroups() const {
    return m_groups;
}
void OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::is_groups_Valid() const{
    return m_groups_isValid;
}

OAIInclude OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::getInclude() const {
    return m_include;
}
void OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::setInclude(const OAIInclude &include) {
    m_include = include;
    m_include_isSet = true;
}

bool OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::is_include_Set() const{
    return m_include_isSet;
}

bool OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::is_include_Valid() const{
    return m_include_isValid;
}

bool OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_include.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSegment_request_WriteSegmentRequest_SegmentGroups::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
