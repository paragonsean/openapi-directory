/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentDimensions_Demographic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentDimensions_Demographic::OAISegmentDimensions_Demographic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentDimensions_Demographic::OAISegmentDimensions_Demographic() {
    this->initializeModel();
}

OAISegmentDimensions_Demographic::~OAISegmentDimensions_Demographic() {}

void OAISegmentDimensions_Demographic::initializeModel() {

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_make_isSet = false;
    m_make_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;
}

void OAISegmentDimensions_Demographic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentDimensions_Demographic::fromJsonObject(QJsonObject json) {

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("AppVersion")]);
    m_app_version_isSet = !json[QString("AppVersion")].isNull() && m_app_version_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("Channel")]);
    m_channel_isSet = !json[QString("Channel")].isNull() && m_channel_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("DeviceType")]);
    m_device_type_isSet = !json[QString("DeviceType")].isNull() && m_device_type_isValid;

    m_make_isValid = ::OpenAPI::fromJsonValue(m_make, json[QString("Make")]);
    m_make_isSet = !json[QString("Make")].isNull() && m_make_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("Model")]);
    m_model_isSet = !json[QString("Model")].isNull() && m_model_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("Platform")]);
    m_platform_isSet = !json[QString("Platform")].isNull() && m_platform_isValid;
}

QString OAISegmentDimensions_Demographic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentDimensions_Demographic::asJsonObject() const {
    QJsonObject obj;
    if (m_app_version.isSet()) {
        obj.insert(QString("AppVersion"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("Channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_device_type.isSet()) {
        obj.insert(QString("DeviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_make.isSet()) {
        obj.insert(QString("Make"), ::OpenAPI::toJsonValue(m_make));
    }
    if (m_model.isSet()) {
        obj.insert(QString("Model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_platform.isSet()) {
        obj.insert(QString("Platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    return obj;
}

OAISegmentDemographics_AppVersion OAISegmentDimensions_Demographic::getAppVersion() const {
    return m_app_version;
}
void OAISegmentDimensions_Demographic::setAppVersion(const OAISegmentDemographics_AppVersion &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAISegmentDimensions_Demographic::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAISegmentDimensions_Demographic::is_app_version_Valid() const{
    return m_app_version_isValid;
}

OAISegmentDemographics_Channel OAISegmentDimensions_Demographic::getChannel() const {
    return m_channel;
}
void OAISegmentDimensions_Demographic::setChannel(const OAISegmentDemographics_Channel &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAISegmentDimensions_Demographic::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAISegmentDimensions_Demographic::is_channel_Valid() const{
    return m_channel_isValid;
}

OAISegmentDemographics_DeviceType OAISegmentDimensions_Demographic::getDeviceType() const {
    return m_device_type;
}
void OAISegmentDimensions_Demographic::setDeviceType(const OAISegmentDemographics_DeviceType &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAISegmentDimensions_Demographic::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAISegmentDimensions_Demographic::is_device_type_Valid() const{
    return m_device_type_isValid;
}

OAISegmentDemographics_Make OAISegmentDimensions_Demographic::getMake() const {
    return m_make;
}
void OAISegmentDimensions_Demographic::setMake(const OAISegmentDemographics_Make &make) {
    m_make = make;
    m_make_isSet = true;
}

bool OAISegmentDimensions_Demographic::is_make_Set() const{
    return m_make_isSet;
}

bool OAISegmentDimensions_Demographic::is_make_Valid() const{
    return m_make_isValid;
}

OAISegmentDemographics_Model OAISegmentDimensions_Demographic::getModel() const {
    return m_model;
}
void OAISegmentDimensions_Demographic::setModel(const OAISegmentDemographics_Model &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAISegmentDimensions_Demographic::is_model_Set() const{
    return m_model_isSet;
}

bool OAISegmentDimensions_Demographic::is_model_Valid() const{
    return m_model_isValid;
}

OAISegmentDemographics_Platform OAISegmentDimensions_Demographic::getPlatform() const {
    return m_platform;
}
void OAISegmentDimensions_Demographic::setPlatform(const OAISegmentDemographics_Platform &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAISegmentDimensions_Demographic::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAISegmentDimensions_Demographic::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAISegmentDimensions_Demographic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_make.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentDimensions_Demographic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
