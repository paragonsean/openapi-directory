# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_start_condition import EventStartCondition
from openapi_server.models.start_condition_segment_start_condition import StartConditionSegmentStartCondition
from openapi_server import util


class StartCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, event_start_condition: EventStartCondition=None, segment_start_condition: StartConditionSegmentStartCondition=None):
        """StartCondition - a model defined in OpenAPI

        :param description: The description of this StartCondition.
        :param event_start_condition: The event_start_condition of this StartCondition.
        :param segment_start_condition: The segment_start_condition of this StartCondition.
        """
        self.openapi_types = {
            'description': str,
            'event_start_condition': EventStartCondition,
            'segment_start_condition': StartConditionSegmentStartCondition
        }

        self.attribute_map = {
            'description': 'Description',
            'event_start_condition': 'EventStartCondition',
            'segment_start_condition': 'SegmentStartCondition'
        }

        self._description = description
        self._event_start_condition = event_start_condition
        self._segment_start_condition = segment_start_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartCondition of this StartCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this StartCondition.


        :return: The description of this StartCondition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StartCondition.


        :param description: The description of this StartCondition.
        :type description: str
        """

        self._description = description

    @property
    def event_start_condition(self):
        """Gets the event_start_condition of this StartCondition.


        :return: The event_start_condition of this StartCondition.
        :rtype: EventStartCondition
        """
        return self._event_start_condition

    @event_start_condition.setter
    def event_start_condition(self, event_start_condition):
        """Sets the event_start_condition of this StartCondition.


        :param event_start_condition: The event_start_condition of this StartCondition.
        :type event_start_condition: EventStartCondition
        """

        self._event_start_condition = event_start_condition

    @property
    def segment_start_condition(self):
        """Gets the segment_start_condition of this StartCondition.


        :return: The segment_start_condition of this StartCondition.
        :rtype: StartConditionSegmentStartCondition
        """
        return self._segment_start_condition

    @segment_start_condition.setter
    def segment_start_condition(self, segment_start_condition):
        """Sets the segment_start_condition of this StartCondition.


        :param segment_start_condition: The segment_start_condition of this StartCondition.
        :type segment_start_condition: StartConditionSegmentStartCondition
        """

        self._segment_start_condition = segment_start_condition
