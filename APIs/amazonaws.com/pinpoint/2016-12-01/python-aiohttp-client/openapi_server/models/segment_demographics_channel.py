# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension_type import DimensionType
from openapi_server import util


class SegmentDemographicsChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_type: DimensionType=None, values: List=None):
        """SegmentDemographicsChannel - a model defined in OpenAPI

        :param dimension_type: The dimension_type of this SegmentDemographicsChannel.
        :param values: The values of this SegmentDemographicsChannel.
        """
        self.openapi_types = {
            'dimension_type': DimensionType,
            'values': List
        }

        self.attribute_map = {
            'dimension_type': 'DimensionType',
            'values': 'Values'
        }

        self._dimension_type = dimension_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentDemographicsChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentDemographics_Channel of this SegmentDemographicsChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_type(self):
        """Gets the dimension_type of this SegmentDemographicsChannel.


        :return: The dimension_type of this SegmentDemographicsChannel.
        :rtype: DimensionType
        """
        return self._dimension_type

    @dimension_type.setter
    def dimension_type(self, dimension_type):
        """Sets the dimension_type of this SegmentDemographicsChannel.


        :param dimension_type: The dimension_type of this SegmentDemographicsChannel.
        :type dimension_type: DimensionType
        """

        self._dimension_type = dimension_type

    @property
    def values(self):
        """Gets the values of this SegmentDemographicsChannel.


        :return: The values of this SegmentDemographicsChannel.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SegmentDemographicsChannel.


        :param values: The values of this SegmentDemographicsChannel.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
