# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_messages_request_message_request import SendMessagesRequestMessageRequest
from openapi_server import util


class SendMessagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_request: SendMessagesRequestMessageRequest=None):
        """SendMessagesRequest - a model defined in OpenAPI

        :param message_request: The message_request of this SendMessagesRequest.
        """
        self.openapi_types = {
            'message_request': SendMessagesRequestMessageRequest
        }

        self.attribute_map = {
            'message_request': 'MessageRequest'
        }

        self._message_request = message_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessages_request of this SendMessagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_request(self):
        """Gets the message_request of this SendMessagesRequest.


        :return: The message_request of this SendMessagesRequest.
        :rtype: SendMessagesRequestMessageRequest
        """
        return self._message_request

    @message_request.setter
    def message_request(self, message_request):
        """Sets the message_request of this SendMessagesRequest.


        :param message_request: The message_request of this SendMessagesRequest.
        :type message_request: SendMessagesRequestMessageRequest
        """
        if message_request is None:
            raise ValueError("Invalid value for `message_request`, must not be `None`")

        self._message_request = message_request
