# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_events_request_events_request import PutEventsRequestEventsRequest
from openapi_server import util


class PutEventsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events_request: PutEventsRequestEventsRequest=None):
        """PutEventsRequest - a model defined in OpenAPI

        :param events_request: The events_request of this PutEventsRequest.
        """
        self.openapi_types = {
            'events_request': PutEventsRequestEventsRequest
        }

        self.attribute_map = {
            'events_request': 'EventsRequest'
        }

        self._events_request = events_request

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutEventsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutEvents_request of this PutEventsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events_request(self):
        """Gets the events_request of this PutEventsRequest.


        :return: The events_request of this PutEventsRequest.
        :rtype: PutEventsRequestEventsRequest
        """
        return self._events_request

    @events_request.setter
    def events_request(self, events_request):
        """Sets the events_request of this PutEventsRequest.


        :param events_request: The events_request of this PutEventsRequest.
        :type events_request: PutEventsRequestEventsRequest
        """
        if events_request is None:
            raise ValueError("Invalid value for `events_request`, must not be `None`")

        self._events_request = events_request
