# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.journey_limits_timeframe_cap import JourneyLimitsTimeframeCap
from openapi_server import util


class JourneyLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily_cap: int=None, endpoint_reentry_cap: int=None, messages_per_second: int=None, endpoint_reentry_interval: str=None, timeframe_cap: JourneyLimitsTimeframeCap=None, total_cap: int=None):
        """JourneyLimits - a model defined in OpenAPI

        :param daily_cap: The daily_cap of this JourneyLimits.
        :param endpoint_reentry_cap: The endpoint_reentry_cap of this JourneyLimits.
        :param messages_per_second: The messages_per_second of this JourneyLimits.
        :param endpoint_reentry_interval: The endpoint_reentry_interval of this JourneyLimits.
        :param timeframe_cap: The timeframe_cap of this JourneyLimits.
        :param total_cap: The total_cap of this JourneyLimits.
        """
        self.openapi_types = {
            'daily_cap': int,
            'endpoint_reentry_cap': int,
            'messages_per_second': int,
            'endpoint_reentry_interval': str,
            'timeframe_cap': JourneyLimitsTimeframeCap,
            'total_cap': int
        }

        self.attribute_map = {
            'daily_cap': 'DailyCap',
            'endpoint_reentry_cap': 'EndpointReentryCap',
            'messages_per_second': 'MessagesPerSecond',
            'endpoint_reentry_interval': 'EndpointReentryInterval',
            'timeframe_cap': 'TimeframeCap',
            'total_cap': 'TotalCap'
        }

        self._daily_cap = daily_cap
        self._endpoint_reentry_cap = endpoint_reentry_cap
        self._messages_per_second = messages_per_second
        self._endpoint_reentry_interval = endpoint_reentry_interval
        self._timeframe_cap = timeframe_cap
        self._total_cap = total_cap

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JourneyLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JourneyLimits of this JourneyLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily_cap(self):
        """Gets the daily_cap of this JourneyLimits.


        :return: The daily_cap of this JourneyLimits.
        :rtype: int
        """
        return self._daily_cap

    @daily_cap.setter
    def daily_cap(self, daily_cap):
        """Sets the daily_cap of this JourneyLimits.


        :param daily_cap: The daily_cap of this JourneyLimits.
        :type daily_cap: int
        """

        self._daily_cap = daily_cap

    @property
    def endpoint_reentry_cap(self):
        """Gets the endpoint_reentry_cap of this JourneyLimits.


        :return: The endpoint_reentry_cap of this JourneyLimits.
        :rtype: int
        """
        return self._endpoint_reentry_cap

    @endpoint_reentry_cap.setter
    def endpoint_reentry_cap(self, endpoint_reentry_cap):
        """Sets the endpoint_reentry_cap of this JourneyLimits.


        :param endpoint_reentry_cap: The endpoint_reentry_cap of this JourneyLimits.
        :type endpoint_reentry_cap: int
        """

        self._endpoint_reentry_cap = endpoint_reentry_cap

    @property
    def messages_per_second(self):
        """Gets the messages_per_second of this JourneyLimits.


        :return: The messages_per_second of this JourneyLimits.
        :rtype: int
        """
        return self._messages_per_second

    @messages_per_second.setter
    def messages_per_second(self, messages_per_second):
        """Sets the messages_per_second of this JourneyLimits.


        :param messages_per_second: The messages_per_second of this JourneyLimits.
        :type messages_per_second: int
        """

        self._messages_per_second = messages_per_second

    @property
    def endpoint_reentry_interval(self):
        """Gets the endpoint_reentry_interval of this JourneyLimits.


        :return: The endpoint_reentry_interval of this JourneyLimits.
        :rtype: str
        """
        return self._endpoint_reentry_interval

    @endpoint_reentry_interval.setter
    def endpoint_reentry_interval(self, endpoint_reentry_interval):
        """Sets the endpoint_reentry_interval of this JourneyLimits.


        :param endpoint_reentry_interval: The endpoint_reentry_interval of this JourneyLimits.
        :type endpoint_reentry_interval: str
        """

        self._endpoint_reentry_interval = endpoint_reentry_interval

    @property
    def timeframe_cap(self):
        """Gets the timeframe_cap of this JourneyLimits.


        :return: The timeframe_cap of this JourneyLimits.
        :rtype: JourneyLimitsTimeframeCap
        """
        return self._timeframe_cap

    @timeframe_cap.setter
    def timeframe_cap(self, timeframe_cap):
        """Sets the timeframe_cap of this JourneyLimits.


        :param timeframe_cap: The timeframe_cap of this JourneyLimits.
        :type timeframe_cap: JourneyLimitsTimeframeCap
        """

        self._timeframe_cap = timeframe_cap

    @property
    def total_cap(self):
        """Gets the total_cap of this JourneyLimits.


        :return: The total_cap of this JourneyLimits.
        :rtype: int
        """
        return self._total_cap

    @total_cap.setter
    def total_cap(self, total_cap):
        """Sets the total_cap of this JourneyLimits.


        :param total_cap: The total_cap of this JourneyLimits.
        :type total_cap: int
        """

        self._total_cap = total_cap
