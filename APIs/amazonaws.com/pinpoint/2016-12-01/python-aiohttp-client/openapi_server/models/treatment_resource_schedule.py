# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.frequency import Frequency
from openapi_server.models.schedule_event_filter import ScheduleEventFilter
from openapi_server.models.schedule_quiet_time import ScheduleQuietTime
from openapi_server import util


class TreatmentResourceSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, event_filter: ScheduleEventFilter=None, frequency: Frequency=None, is_local_time: bool=None, quiet_time: ScheduleQuietTime=None, start_time: str=None, timezone: str=None):
        """TreatmentResourceSchedule - a model defined in OpenAPI

        :param end_time: The end_time of this TreatmentResourceSchedule.
        :param event_filter: The event_filter of this TreatmentResourceSchedule.
        :param frequency: The frequency of this TreatmentResourceSchedule.
        :param is_local_time: The is_local_time of this TreatmentResourceSchedule.
        :param quiet_time: The quiet_time of this TreatmentResourceSchedule.
        :param start_time: The start_time of this TreatmentResourceSchedule.
        :param timezone: The timezone of this TreatmentResourceSchedule.
        """
        self.openapi_types = {
            'end_time': str,
            'event_filter': ScheduleEventFilter,
            'frequency': Frequency,
            'is_local_time': bool,
            'quiet_time': ScheduleQuietTime,
            'start_time': str,
            'timezone': str
        }

        self.attribute_map = {
            'end_time': 'EndTime',
            'event_filter': 'EventFilter',
            'frequency': 'Frequency',
            'is_local_time': 'IsLocalTime',
            'quiet_time': 'QuietTime',
            'start_time': 'StartTime',
            'timezone': 'Timezone'
        }

        self._end_time = end_time
        self._event_filter = event_filter
        self._frequency = frequency
        self._is_local_time = is_local_time
        self._quiet_time = quiet_time
        self._start_time = start_time
        self._timezone = timezone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TreatmentResourceSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TreatmentResource_Schedule of this TreatmentResourceSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this TreatmentResourceSchedule.


        :return: The end_time of this TreatmentResourceSchedule.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TreatmentResourceSchedule.


        :param end_time: The end_time of this TreatmentResourceSchedule.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def event_filter(self):
        """Gets the event_filter of this TreatmentResourceSchedule.


        :return: The event_filter of this TreatmentResourceSchedule.
        :rtype: ScheduleEventFilter
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this TreatmentResourceSchedule.


        :param event_filter: The event_filter of this TreatmentResourceSchedule.
        :type event_filter: ScheduleEventFilter
        """

        self._event_filter = event_filter

    @property
    def frequency(self):
        """Gets the frequency of this TreatmentResourceSchedule.


        :return: The frequency of this TreatmentResourceSchedule.
        :rtype: Frequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this TreatmentResourceSchedule.


        :param frequency: The frequency of this TreatmentResourceSchedule.
        :type frequency: Frequency
        """

        self._frequency = frequency

    @property
    def is_local_time(self):
        """Gets the is_local_time of this TreatmentResourceSchedule.


        :return: The is_local_time of this TreatmentResourceSchedule.
        :rtype: bool
        """
        return self._is_local_time

    @is_local_time.setter
    def is_local_time(self, is_local_time):
        """Sets the is_local_time of this TreatmentResourceSchedule.


        :param is_local_time: The is_local_time of this TreatmentResourceSchedule.
        :type is_local_time: bool
        """

        self._is_local_time = is_local_time

    @property
    def quiet_time(self):
        """Gets the quiet_time of this TreatmentResourceSchedule.


        :return: The quiet_time of this TreatmentResourceSchedule.
        :rtype: ScheduleQuietTime
        """
        return self._quiet_time

    @quiet_time.setter
    def quiet_time(self, quiet_time):
        """Sets the quiet_time of this TreatmentResourceSchedule.


        :param quiet_time: The quiet_time of this TreatmentResourceSchedule.
        :type quiet_time: ScheduleQuietTime
        """

        self._quiet_time = quiet_time

    @property
    def start_time(self):
        """Gets the start_time of this TreatmentResourceSchedule.


        :return: The start_time of this TreatmentResourceSchedule.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TreatmentResourceSchedule.


        :param start_time: The start_time of this TreatmentResourceSchedule.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def timezone(self):
        """Gets the timezone of this TreatmentResourceSchedule.


        :return: The timezone of this TreatmentResourceSchedule.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this TreatmentResourceSchedule.


        :param timezone: The timezone of this TreatmentResourceSchedule.
        :type timezone: str
        """

        self._timezone = timezone
