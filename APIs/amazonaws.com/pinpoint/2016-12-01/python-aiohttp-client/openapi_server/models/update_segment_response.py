# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_response import SegmentResponse
from openapi_server import util


class UpdateSegmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segment_response: SegmentResponse=None):
        """UpdateSegmentResponse - a model defined in OpenAPI

        :param segment_response: The segment_response of this UpdateSegmentResponse.
        """
        self.openapi_types = {
            'segment_response': SegmentResponse
        }

        self.attribute_map = {
            'segment_response': 'SegmentResponse'
        }

        self._segment_response = segment_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSegmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSegmentResponse of this UpdateSegmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segment_response(self):
        """Gets the segment_response of this UpdateSegmentResponse.


        :return: The segment_response of this UpdateSegmentResponse.
        :rtype: SegmentResponse
        """
        return self._segment_response

    @segment_response.setter
    def segment_response(self, segment_response):
        """Sets the segment_response of this UpdateSegmentResponse.


        :param segment_response: The segment_response of this UpdateSegmentResponse.
        :type segment_response: SegmentResponse
        """
        if segment_response is None:
            raise ValueError("Invalid value for `segment_response`, must not be `None`")

        self._segment_response = segment_response
