# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_custom import ActivityCUSTOM
from openapi_server.models.activity_conditional_split import ActivityConditionalSplit
from openapi_server.models.activity_contact_center import ActivityContactCenter
from openapi_server.models.activity_email import ActivityEMAIL
from openapi_server.models.activity_holdout import ActivityHoldout
from openapi_server.models.activity_multi_condition import ActivityMultiCondition
from openapi_server.models.activity_push import ActivityPUSH
from openapi_server.models.activity_random_split import ActivityRandomSplit
from openapi_server.models.activity_sms import ActivitySMS
from openapi_server.models.activity_wait import ActivityWait
from openapi_server import util


class Activity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom: ActivityCUSTOM=None, conditional_split: ActivityConditionalSplit=None, description: str=None, email: ActivityEMAIL=None, holdout: ActivityHoldout=None, multi_condition: ActivityMultiCondition=None, push: ActivityPUSH=None, random_split: ActivityRandomSplit=None, sms: ActivitySMS=None, wait: ActivityWait=None, contact_center: ActivityContactCenter=None):
        """Activity - a model defined in OpenAPI

        :param custom: The custom of this Activity.
        :param conditional_split: The conditional_split of this Activity.
        :param description: The description of this Activity.
        :param email: The email of this Activity.
        :param holdout: The holdout of this Activity.
        :param multi_condition: The multi_condition of this Activity.
        :param push: The push of this Activity.
        :param random_split: The random_split of this Activity.
        :param sms: The sms of this Activity.
        :param wait: The wait of this Activity.
        :param contact_center: The contact_center of this Activity.
        """
        self.openapi_types = {
            'custom': ActivityCUSTOM,
            'conditional_split': ActivityConditionalSplit,
            'description': str,
            'email': ActivityEMAIL,
            'holdout': ActivityHoldout,
            'multi_condition': ActivityMultiCondition,
            'push': ActivityPUSH,
            'random_split': ActivityRandomSplit,
            'sms': ActivitySMS,
            'wait': ActivityWait,
            'contact_center': ActivityContactCenter
        }

        self.attribute_map = {
            'custom': 'CUSTOM',
            'conditional_split': 'ConditionalSplit',
            'description': 'Description',
            'email': 'EMAIL',
            'holdout': 'Holdout',
            'multi_condition': 'MultiCondition',
            'push': 'PUSH',
            'random_split': 'RandomSplit',
            'sms': 'SMS',
            'wait': 'Wait',
            'contact_center': 'ContactCenter'
        }

        self._custom = custom
        self._conditional_split = conditional_split
        self._description = description
        self._email = email
        self._holdout = holdout
        self._multi_condition = multi_condition
        self._push = push
        self._random_split = random_split
        self._sms = sms
        self._wait = wait
        self._contact_center = contact_center

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Activity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity of this Activity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom(self):
        """Gets the custom of this Activity.


        :return: The custom of this Activity.
        :rtype: ActivityCUSTOM
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Activity.


        :param custom: The custom of this Activity.
        :type custom: ActivityCUSTOM
        """

        self._custom = custom

    @property
    def conditional_split(self):
        """Gets the conditional_split of this Activity.


        :return: The conditional_split of this Activity.
        :rtype: ActivityConditionalSplit
        """
        return self._conditional_split

    @conditional_split.setter
    def conditional_split(self, conditional_split):
        """Sets the conditional_split of this Activity.


        :param conditional_split: The conditional_split of this Activity.
        :type conditional_split: ActivityConditionalSplit
        """

        self._conditional_split = conditional_split

    @property
    def description(self):
        """Gets the description of this Activity.


        :return: The description of this Activity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Activity.


        :param description: The description of this Activity.
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this Activity.


        :return: The email of this Activity.
        :rtype: ActivityEMAIL
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Activity.


        :param email: The email of this Activity.
        :type email: ActivityEMAIL
        """

        self._email = email

    @property
    def holdout(self):
        """Gets the holdout of this Activity.


        :return: The holdout of this Activity.
        :rtype: ActivityHoldout
        """
        return self._holdout

    @holdout.setter
    def holdout(self, holdout):
        """Sets the holdout of this Activity.


        :param holdout: The holdout of this Activity.
        :type holdout: ActivityHoldout
        """

        self._holdout = holdout

    @property
    def multi_condition(self):
        """Gets the multi_condition of this Activity.


        :return: The multi_condition of this Activity.
        :rtype: ActivityMultiCondition
        """
        return self._multi_condition

    @multi_condition.setter
    def multi_condition(self, multi_condition):
        """Sets the multi_condition of this Activity.


        :param multi_condition: The multi_condition of this Activity.
        :type multi_condition: ActivityMultiCondition
        """

        self._multi_condition = multi_condition

    @property
    def push(self):
        """Gets the push of this Activity.


        :return: The push of this Activity.
        :rtype: ActivityPUSH
        """
        return self._push

    @push.setter
    def push(self, push):
        """Sets the push of this Activity.


        :param push: The push of this Activity.
        :type push: ActivityPUSH
        """

        self._push = push

    @property
    def random_split(self):
        """Gets the random_split of this Activity.


        :return: The random_split of this Activity.
        :rtype: ActivityRandomSplit
        """
        return self._random_split

    @random_split.setter
    def random_split(self, random_split):
        """Sets the random_split of this Activity.


        :param random_split: The random_split of this Activity.
        :type random_split: ActivityRandomSplit
        """

        self._random_split = random_split

    @property
    def sms(self):
        """Gets the sms of this Activity.


        :return: The sms of this Activity.
        :rtype: ActivitySMS
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this Activity.


        :param sms: The sms of this Activity.
        :type sms: ActivitySMS
        """

        self._sms = sms

    @property
    def wait(self):
        """Gets the wait of this Activity.


        :return: The wait of this Activity.
        :rtype: ActivityWait
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this Activity.


        :param wait: The wait of this Activity.
        :type wait: ActivityWait
        """

        self._wait = wait

    @property
    def contact_center(self):
        """Gets the contact_center of this Activity.


        :return: The contact_center of this Activity.
        :rtype: ActivityContactCenter
        """
        return self._contact_center

    @contact_center.setter
    def contact_center(self, contact_center):
        """Sets the contact_center of this Activity.


        :param contact_center: The contact_center of this Activity.
        :type contact_center: ActivityContactCenter
        """

        self._contact_center = contact_center
