# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_date_range_kpi_response_kpi_result import ApplicationDateRangeKpiResponseKpiResult
from openapi_server import util


class JourneyDateRangeKpiResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, end_time: datetime=None, journey_id: str=None, kpi_name: str=None, kpi_result: ApplicationDateRangeKpiResponseKpiResult=None, next_token: str=None, start_time: datetime=None):
        """JourneyDateRangeKpiResponse - a model defined in OpenAPI

        :param application_id: The application_id of this JourneyDateRangeKpiResponse.
        :param end_time: The end_time of this JourneyDateRangeKpiResponse.
        :param journey_id: The journey_id of this JourneyDateRangeKpiResponse.
        :param kpi_name: The kpi_name of this JourneyDateRangeKpiResponse.
        :param kpi_result: The kpi_result of this JourneyDateRangeKpiResponse.
        :param next_token: The next_token of this JourneyDateRangeKpiResponse.
        :param start_time: The start_time of this JourneyDateRangeKpiResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'end_time': datetime,
            'journey_id': str,
            'kpi_name': str,
            'kpi_result': ApplicationDateRangeKpiResponseKpiResult,
            'next_token': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'end_time': 'EndTime',
            'journey_id': 'JourneyId',
            'kpi_name': 'KpiName',
            'kpi_result': 'KpiResult',
            'next_token': 'NextToken',
            'start_time': 'StartTime'
        }

        self._application_id = application_id
        self._end_time = end_time
        self._journey_id = journey_id
        self._kpi_name = kpi_name
        self._kpi_result = kpi_result
        self._next_token = next_token
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JourneyDateRangeKpiResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JourneyDateRangeKpiResponse of this JourneyDateRangeKpiResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this JourneyDateRangeKpiResponse.


        :return: The application_id of this JourneyDateRangeKpiResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this JourneyDateRangeKpiResponse.


        :param application_id: The application_id of this JourneyDateRangeKpiResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def end_time(self):
        """Gets the end_time of this JourneyDateRangeKpiResponse.


        :return: The end_time of this JourneyDateRangeKpiResponse.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JourneyDateRangeKpiResponse.


        :param end_time: The end_time of this JourneyDateRangeKpiResponse.
        :type end_time: datetime
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")

        self._end_time = end_time

    @property
    def journey_id(self):
        """Gets the journey_id of this JourneyDateRangeKpiResponse.


        :return: The journey_id of this JourneyDateRangeKpiResponse.
        :rtype: str
        """
        return self._journey_id

    @journey_id.setter
    def journey_id(self, journey_id):
        """Sets the journey_id of this JourneyDateRangeKpiResponse.


        :param journey_id: The journey_id of this JourneyDateRangeKpiResponse.
        :type journey_id: str
        """
        if journey_id is None:
            raise ValueError("Invalid value for `journey_id`, must not be `None`")

        self._journey_id = journey_id

    @property
    def kpi_name(self):
        """Gets the kpi_name of this JourneyDateRangeKpiResponse.


        :return: The kpi_name of this JourneyDateRangeKpiResponse.
        :rtype: str
        """
        return self._kpi_name

    @kpi_name.setter
    def kpi_name(self, kpi_name):
        """Sets the kpi_name of this JourneyDateRangeKpiResponse.


        :param kpi_name: The kpi_name of this JourneyDateRangeKpiResponse.
        :type kpi_name: str
        """
        if kpi_name is None:
            raise ValueError("Invalid value for `kpi_name`, must not be `None`")

        self._kpi_name = kpi_name

    @property
    def kpi_result(self):
        """Gets the kpi_result of this JourneyDateRangeKpiResponse.


        :return: The kpi_result of this JourneyDateRangeKpiResponse.
        :rtype: ApplicationDateRangeKpiResponseKpiResult
        """
        return self._kpi_result

    @kpi_result.setter
    def kpi_result(self, kpi_result):
        """Sets the kpi_result of this JourneyDateRangeKpiResponse.


        :param kpi_result: The kpi_result of this JourneyDateRangeKpiResponse.
        :type kpi_result: ApplicationDateRangeKpiResponseKpiResult
        """
        if kpi_result is None:
            raise ValueError("Invalid value for `kpi_result`, must not be `None`")

        self._kpi_result = kpi_result

    @property
    def next_token(self):
        """Gets the next_token of this JourneyDateRangeKpiResponse.


        :return: The next_token of this JourneyDateRangeKpiResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this JourneyDateRangeKpiResponse.


        :param next_token: The next_token of this JourneyDateRangeKpiResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def start_time(self):
        """Gets the start_time of this JourneyDateRangeKpiResponse.


        :return: The start_time of this JourneyDateRangeKpiResponse.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JourneyDateRangeKpiResponse.


        :param start_time: The start_time of this JourneyDateRangeKpiResponse.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time
