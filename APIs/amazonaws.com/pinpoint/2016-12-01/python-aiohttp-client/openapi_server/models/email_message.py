# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_message_raw_email import EmailMessageRawEmail
from openapi_server.models.email_message_simple_email import EmailMessageSimpleEmail
from openapi_server import util


class EmailMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, feedback_forwarding_address: str=None, from_address: str=None, raw_email: EmailMessageRawEmail=None, reply_to_addresses: List=None, simple_email: EmailMessageSimpleEmail=None, substitutions: Dict=None):
        """EmailMessage - a model defined in OpenAPI

        :param body: The body of this EmailMessage.
        :param feedback_forwarding_address: The feedback_forwarding_address of this EmailMessage.
        :param from_address: The from_address of this EmailMessage.
        :param raw_email: The raw_email of this EmailMessage.
        :param reply_to_addresses: The reply_to_addresses of this EmailMessage.
        :param simple_email: The simple_email of this EmailMessage.
        :param substitutions: The substitutions of this EmailMessage.
        """
        self.openapi_types = {
            'body': str,
            'feedback_forwarding_address': str,
            'from_address': str,
            'raw_email': EmailMessageRawEmail,
            'reply_to_addresses': List,
            'simple_email': EmailMessageSimpleEmail,
            'substitutions': Dict
        }

        self.attribute_map = {
            'body': 'Body',
            'feedback_forwarding_address': 'FeedbackForwardingAddress',
            'from_address': 'FromAddress',
            'raw_email': 'RawEmail',
            'reply_to_addresses': 'ReplyToAddresses',
            'simple_email': 'SimpleEmail',
            'substitutions': 'Substitutions'
        }

        self._body = body
        self._feedback_forwarding_address = feedback_forwarding_address
        self._from_address = from_address
        self._raw_email = raw_email
        self._reply_to_addresses = reply_to_addresses
        self._simple_email = simple_email
        self._substitutions = substitutions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailMessage of this EmailMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this EmailMessage.


        :return: The body of this EmailMessage.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailMessage.


        :param body: The body of this EmailMessage.
        :type body: str
        """

        self._body = body

    @property
    def feedback_forwarding_address(self):
        """Gets the feedback_forwarding_address of this EmailMessage.


        :return: The feedback_forwarding_address of this EmailMessage.
        :rtype: str
        """
        return self._feedback_forwarding_address

    @feedback_forwarding_address.setter
    def feedback_forwarding_address(self, feedback_forwarding_address):
        """Sets the feedback_forwarding_address of this EmailMessage.


        :param feedback_forwarding_address: The feedback_forwarding_address of this EmailMessage.
        :type feedback_forwarding_address: str
        """

        self._feedback_forwarding_address = feedback_forwarding_address

    @property
    def from_address(self):
        """Gets the from_address of this EmailMessage.


        :return: The from_address of this EmailMessage.
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this EmailMessage.


        :param from_address: The from_address of this EmailMessage.
        :type from_address: str
        """

        self._from_address = from_address

    @property
    def raw_email(self):
        """Gets the raw_email of this EmailMessage.


        :return: The raw_email of this EmailMessage.
        :rtype: EmailMessageRawEmail
        """
        return self._raw_email

    @raw_email.setter
    def raw_email(self, raw_email):
        """Sets the raw_email of this EmailMessage.


        :param raw_email: The raw_email of this EmailMessage.
        :type raw_email: EmailMessageRawEmail
        """

        self._raw_email = raw_email

    @property
    def reply_to_addresses(self):
        """Gets the reply_to_addresses of this EmailMessage.


        :return: The reply_to_addresses of this EmailMessage.
        :rtype: List
        """
        return self._reply_to_addresses

    @reply_to_addresses.setter
    def reply_to_addresses(self, reply_to_addresses):
        """Sets the reply_to_addresses of this EmailMessage.


        :param reply_to_addresses: The reply_to_addresses of this EmailMessage.
        :type reply_to_addresses: List
        """

        self._reply_to_addresses = reply_to_addresses

    @property
    def simple_email(self):
        """Gets the simple_email of this EmailMessage.


        :return: The simple_email of this EmailMessage.
        :rtype: EmailMessageSimpleEmail
        """
        return self._simple_email

    @simple_email.setter
    def simple_email(self, simple_email):
        """Sets the simple_email of this EmailMessage.


        :param simple_email: The simple_email of this EmailMessage.
        :type simple_email: EmailMessageSimpleEmail
        """

        self._simple_email = simple_email

    @property
    def substitutions(self):
        """Gets the substitutions of this EmailMessage.


        :return: The substitutions of this EmailMessage.
        :rtype: Dict
        """
        return self._substitutions

    @substitutions.setter
    def substitutions(self, substitutions):
        """Sets the substitutions of this EmailMessage.


        :param substitutions: The substitutions of this EmailMessage.
        :type substitutions: Dict
        """

        self._substitutions = substitutions
