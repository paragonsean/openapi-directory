# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_dimensions_behavior import SegmentDimensionsBehavior
from openapi_server.models.segment_dimensions_demographic import SegmentDimensionsDemographic
from openapi_server.models.segment_dimensions_location import SegmentDimensionsLocation
from openapi_server import util


class SimpleConditionSegmentDimensions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict=None, behavior: SegmentDimensionsBehavior=None, demographic: SegmentDimensionsDemographic=None, location: SegmentDimensionsLocation=None, metrics: Dict=None, user_attributes: Dict=None):
        """SimpleConditionSegmentDimensions - a model defined in OpenAPI

        :param attributes: The attributes of this SimpleConditionSegmentDimensions.
        :param behavior: The behavior of this SimpleConditionSegmentDimensions.
        :param demographic: The demographic of this SimpleConditionSegmentDimensions.
        :param location: The location of this SimpleConditionSegmentDimensions.
        :param metrics: The metrics of this SimpleConditionSegmentDimensions.
        :param user_attributes: The user_attributes of this SimpleConditionSegmentDimensions.
        """
        self.openapi_types = {
            'attributes': Dict,
            'behavior': SegmentDimensionsBehavior,
            'demographic': SegmentDimensionsDemographic,
            'location': SegmentDimensionsLocation,
            'metrics': Dict,
            'user_attributes': Dict
        }

        self.attribute_map = {
            'attributes': 'Attributes',
            'behavior': 'Behavior',
            'demographic': 'Demographic',
            'location': 'Location',
            'metrics': 'Metrics',
            'user_attributes': 'UserAttributes'
        }

        self._attributes = attributes
        self._behavior = behavior
        self._demographic = demographic
        self._location = location
        self._metrics = metrics
        self._user_attributes = user_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimpleConditionSegmentDimensions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimpleCondition_SegmentDimensions of this SimpleConditionSegmentDimensions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this SimpleConditionSegmentDimensions.


        :return: The attributes of this SimpleConditionSegmentDimensions.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SimpleConditionSegmentDimensions.


        :param attributes: The attributes of this SimpleConditionSegmentDimensions.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def behavior(self):
        """Gets the behavior of this SimpleConditionSegmentDimensions.


        :return: The behavior of this SimpleConditionSegmentDimensions.
        :rtype: SegmentDimensionsBehavior
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this SimpleConditionSegmentDimensions.


        :param behavior: The behavior of this SimpleConditionSegmentDimensions.
        :type behavior: SegmentDimensionsBehavior
        """

        self._behavior = behavior

    @property
    def demographic(self):
        """Gets the demographic of this SimpleConditionSegmentDimensions.


        :return: The demographic of this SimpleConditionSegmentDimensions.
        :rtype: SegmentDimensionsDemographic
        """
        return self._demographic

    @demographic.setter
    def demographic(self, demographic):
        """Sets the demographic of this SimpleConditionSegmentDimensions.


        :param demographic: The demographic of this SimpleConditionSegmentDimensions.
        :type demographic: SegmentDimensionsDemographic
        """

        self._demographic = demographic

    @property
    def location(self):
        """Gets the location of this SimpleConditionSegmentDimensions.


        :return: The location of this SimpleConditionSegmentDimensions.
        :rtype: SegmentDimensionsLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SimpleConditionSegmentDimensions.


        :param location: The location of this SimpleConditionSegmentDimensions.
        :type location: SegmentDimensionsLocation
        """

        self._location = location

    @property
    def metrics(self):
        """Gets the metrics of this SimpleConditionSegmentDimensions.


        :return: The metrics of this SimpleConditionSegmentDimensions.
        :rtype: Dict
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this SimpleConditionSegmentDimensions.


        :param metrics: The metrics of this SimpleConditionSegmentDimensions.
        :type metrics: Dict
        """

        self._metrics = metrics

    @property
    def user_attributes(self):
        """Gets the user_attributes of this SimpleConditionSegmentDimensions.


        :return: The user_attributes of this SimpleConditionSegmentDimensions.
        :rtype: Dict
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this SimpleConditionSegmentDimensions.


        :param user_attributes: The user_attributes of this SimpleConditionSegmentDimensions.
        :type user_attributes: Dict
        """

        self._user_attributes = user_attributes
