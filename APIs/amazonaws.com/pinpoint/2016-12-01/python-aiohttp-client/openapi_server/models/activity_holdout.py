# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityHoldout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_activity: str=None, percentage: int=None):
        """ActivityHoldout - a model defined in OpenAPI

        :param next_activity: The next_activity of this ActivityHoldout.
        :param percentage: The percentage of this ActivityHoldout.
        """
        self.openapi_types = {
            'next_activity': str,
            'percentage': int
        }

        self.attribute_map = {
            'next_activity': 'NextActivity',
            'percentage': 'Percentage'
        }

        self._next_activity = next_activity
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityHoldout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Activity_Holdout of this ActivityHoldout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_activity(self):
        """Gets the next_activity of this ActivityHoldout.


        :return: The next_activity of this ActivityHoldout.
        :rtype: str
        """
        return self._next_activity

    @next_activity.setter
    def next_activity(self, next_activity):
        """Sets the next_activity of this ActivityHoldout.


        :param next_activity: The next_activity of this ActivityHoldout.
        :type next_activity: str
        """

        self._next_activity = next_activity

    @property
    def percentage(self):
        """Gets the percentage of this ActivityHoldout.


        :return: The percentage of this ActivityHoldout.
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ActivityHoldout.


        :param percentage: The percentage of this ActivityHoldout.
        :type percentage: int
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")

        self._percentage = percentage
