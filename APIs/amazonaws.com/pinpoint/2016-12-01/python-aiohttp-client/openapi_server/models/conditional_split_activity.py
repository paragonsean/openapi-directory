# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conditional_split_activity_condition import ConditionalSplitActivityCondition
from openapi_server.models.conditional_split_activity_evaluation_wait_time import ConditionalSplitActivityEvaluationWaitTime
from openapi_server import util


class ConditionalSplitActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: ConditionalSplitActivityCondition=None, evaluation_wait_time: ConditionalSplitActivityEvaluationWaitTime=None, false_activity: str=None, true_activity: str=None):
        """ConditionalSplitActivity - a model defined in OpenAPI

        :param condition: The condition of this ConditionalSplitActivity.
        :param evaluation_wait_time: The evaluation_wait_time of this ConditionalSplitActivity.
        :param false_activity: The false_activity of this ConditionalSplitActivity.
        :param true_activity: The true_activity of this ConditionalSplitActivity.
        """
        self.openapi_types = {
            'condition': ConditionalSplitActivityCondition,
            'evaluation_wait_time': ConditionalSplitActivityEvaluationWaitTime,
            'false_activity': str,
            'true_activity': str
        }

        self.attribute_map = {
            'condition': 'Condition',
            'evaluation_wait_time': 'EvaluationWaitTime',
            'false_activity': 'FalseActivity',
            'true_activity': 'TrueActivity'
        }

        self._condition = condition
        self._evaluation_wait_time = evaluation_wait_time
        self._false_activity = false_activity
        self._true_activity = true_activity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConditionalSplitActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConditionalSplitActivity of this ConditionalSplitActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this ConditionalSplitActivity.


        :return: The condition of this ConditionalSplitActivity.
        :rtype: ConditionalSplitActivityCondition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ConditionalSplitActivity.


        :param condition: The condition of this ConditionalSplitActivity.
        :type condition: ConditionalSplitActivityCondition
        """

        self._condition = condition

    @property
    def evaluation_wait_time(self):
        """Gets the evaluation_wait_time of this ConditionalSplitActivity.


        :return: The evaluation_wait_time of this ConditionalSplitActivity.
        :rtype: ConditionalSplitActivityEvaluationWaitTime
        """
        return self._evaluation_wait_time

    @evaluation_wait_time.setter
    def evaluation_wait_time(self, evaluation_wait_time):
        """Sets the evaluation_wait_time of this ConditionalSplitActivity.


        :param evaluation_wait_time: The evaluation_wait_time of this ConditionalSplitActivity.
        :type evaluation_wait_time: ConditionalSplitActivityEvaluationWaitTime
        """

        self._evaluation_wait_time = evaluation_wait_time

    @property
    def false_activity(self):
        """Gets the false_activity of this ConditionalSplitActivity.


        :return: The false_activity of this ConditionalSplitActivity.
        :rtype: str
        """
        return self._false_activity

    @false_activity.setter
    def false_activity(self, false_activity):
        """Sets the false_activity of this ConditionalSplitActivity.


        :param false_activity: The false_activity of this ConditionalSplitActivity.
        :type false_activity: str
        """

        self._false_activity = false_activity

    @property
    def true_activity(self):
        """Gets the true_activity of this ConditionalSplitActivity.


        :return: The true_activity of this ConditionalSplitActivity.
        :rtype: str
        """
        return self._true_activity

    @true_activity.setter
    def true_activity(self, true_activity):
        """Sets the true_activity of this ConditionalSplitActivity.


        :param true_activity: The true_activity of this ConditionalSplitActivity.
        :type true_activity: str
        """

        self._true_activity = true_activity
