# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivityResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, campaign_id: str=None, end: str=None, id: str=None, result: str=None, scheduled_start: str=None, start: str=None, state: str=None, successful_endpoint_count: int=None, timezones_completed_count: int=None, timezones_total_count: int=None, total_endpoint_count: int=None, treatment_id: str=None, execution_metrics: Dict=None):
        """ActivityResponse - a model defined in OpenAPI

        :param application_id: The application_id of this ActivityResponse.
        :param campaign_id: The campaign_id of this ActivityResponse.
        :param end: The end of this ActivityResponse.
        :param id: The id of this ActivityResponse.
        :param result: The result of this ActivityResponse.
        :param scheduled_start: The scheduled_start of this ActivityResponse.
        :param start: The start of this ActivityResponse.
        :param state: The state of this ActivityResponse.
        :param successful_endpoint_count: The successful_endpoint_count of this ActivityResponse.
        :param timezones_completed_count: The timezones_completed_count of this ActivityResponse.
        :param timezones_total_count: The timezones_total_count of this ActivityResponse.
        :param total_endpoint_count: The total_endpoint_count of this ActivityResponse.
        :param treatment_id: The treatment_id of this ActivityResponse.
        :param execution_metrics: The execution_metrics of this ActivityResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'campaign_id': str,
            'end': str,
            'id': str,
            'result': str,
            'scheduled_start': str,
            'start': str,
            'state': str,
            'successful_endpoint_count': int,
            'timezones_completed_count': int,
            'timezones_total_count': int,
            'total_endpoint_count': int,
            'treatment_id': str,
            'execution_metrics': Dict
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'campaign_id': 'CampaignId',
            'end': 'End',
            'id': 'Id',
            'result': 'Result',
            'scheduled_start': 'ScheduledStart',
            'start': 'Start',
            'state': 'State',
            'successful_endpoint_count': 'SuccessfulEndpointCount',
            'timezones_completed_count': 'TimezonesCompletedCount',
            'timezones_total_count': 'TimezonesTotalCount',
            'total_endpoint_count': 'TotalEndpointCount',
            'treatment_id': 'TreatmentId',
            'execution_metrics': 'ExecutionMetrics'
        }

        self._application_id = application_id
        self._campaign_id = campaign_id
        self._end = end
        self._id = id
        self._result = result
        self._scheduled_start = scheduled_start
        self._start = start
        self._state = state
        self._successful_endpoint_count = successful_endpoint_count
        self._timezones_completed_count = timezones_completed_count
        self._timezones_total_count = timezones_total_count
        self._total_endpoint_count = total_endpoint_count
        self._treatment_id = treatment_id
        self._execution_metrics = execution_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityResponse of this ActivityResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this ActivityResponse.


        :return: The application_id of this ActivityResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ActivityResponse.


        :param application_id: The application_id of this ActivityResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this ActivityResponse.


        :return: The campaign_id of this ActivityResponse.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this ActivityResponse.


        :param campaign_id: The campaign_id of this ActivityResponse.
        :type campaign_id: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def end(self):
        """Gets the end of this ActivityResponse.


        :return: The end of this ActivityResponse.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this ActivityResponse.


        :param end: The end of this ActivityResponse.
        :type end: str
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this ActivityResponse.


        :return: The id of this ActivityResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityResponse.


        :param id: The id of this ActivityResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def result(self):
        """Gets the result of this ActivityResponse.


        :return: The result of this ActivityResponse.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ActivityResponse.


        :param result: The result of this ActivityResponse.
        :type result: str
        """

        self._result = result

    @property
    def scheduled_start(self):
        """Gets the scheduled_start of this ActivityResponse.


        :return: The scheduled_start of this ActivityResponse.
        :rtype: str
        """
        return self._scheduled_start

    @scheduled_start.setter
    def scheduled_start(self, scheduled_start):
        """Sets the scheduled_start of this ActivityResponse.


        :param scheduled_start: The scheduled_start of this ActivityResponse.
        :type scheduled_start: str
        """

        self._scheduled_start = scheduled_start

    @property
    def start(self):
        """Gets the start of this ActivityResponse.


        :return: The start of this ActivityResponse.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ActivityResponse.


        :param start: The start of this ActivityResponse.
        :type start: str
        """

        self._start = start

    @property
    def state(self):
        """Gets the state of this ActivityResponse.


        :return: The state of this ActivityResponse.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ActivityResponse.


        :param state: The state of this ActivityResponse.
        :type state: str
        """

        self._state = state

    @property
    def successful_endpoint_count(self):
        """Gets the successful_endpoint_count of this ActivityResponse.


        :return: The successful_endpoint_count of this ActivityResponse.
        :rtype: int
        """
        return self._successful_endpoint_count

    @successful_endpoint_count.setter
    def successful_endpoint_count(self, successful_endpoint_count):
        """Sets the successful_endpoint_count of this ActivityResponse.


        :param successful_endpoint_count: The successful_endpoint_count of this ActivityResponse.
        :type successful_endpoint_count: int
        """

        self._successful_endpoint_count = successful_endpoint_count

    @property
    def timezones_completed_count(self):
        """Gets the timezones_completed_count of this ActivityResponse.


        :return: The timezones_completed_count of this ActivityResponse.
        :rtype: int
        """
        return self._timezones_completed_count

    @timezones_completed_count.setter
    def timezones_completed_count(self, timezones_completed_count):
        """Sets the timezones_completed_count of this ActivityResponse.


        :param timezones_completed_count: The timezones_completed_count of this ActivityResponse.
        :type timezones_completed_count: int
        """

        self._timezones_completed_count = timezones_completed_count

    @property
    def timezones_total_count(self):
        """Gets the timezones_total_count of this ActivityResponse.


        :return: The timezones_total_count of this ActivityResponse.
        :rtype: int
        """
        return self._timezones_total_count

    @timezones_total_count.setter
    def timezones_total_count(self, timezones_total_count):
        """Sets the timezones_total_count of this ActivityResponse.


        :param timezones_total_count: The timezones_total_count of this ActivityResponse.
        :type timezones_total_count: int
        """

        self._timezones_total_count = timezones_total_count

    @property
    def total_endpoint_count(self):
        """Gets the total_endpoint_count of this ActivityResponse.


        :return: The total_endpoint_count of this ActivityResponse.
        :rtype: int
        """
        return self._total_endpoint_count

    @total_endpoint_count.setter
    def total_endpoint_count(self, total_endpoint_count):
        """Sets the total_endpoint_count of this ActivityResponse.


        :param total_endpoint_count: The total_endpoint_count of this ActivityResponse.
        :type total_endpoint_count: int
        """

        self._total_endpoint_count = total_endpoint_count

    @property
    def treatment_id(self):
        """Gets the treatment_id of this ActivityResponse.


        :return: The treatment_id of this ActivityResponse.
        :rtype: str
        """
        return self._treatment_id

    @treatment_id.setter
    def treatment_id(self, treatment_id):
        """Sets the treatment_id of this ActivityResponse.


        :param treatment_id: The treatment_id of this ActivityResponse.
        :type treatment_id: str
        """

        self._treatment_id = treatment_id

    @property
    def execution_metrics(self):
        """Gets the execution_metrics of this ActivityResponse.


        :return: The execution_metrics of this ActivityResponse.
        :rtype: Dict
        """
        return self._execution_metrics

    @execution_metrics.setter
    def execution_metrics(self, execution_metrics):
        """Sets the execution_metrics of this ActivityResponse.


        :param execution_metrics: The execution_metrics of this ActivityResponse.
        :type execution_metrics: Dict
        """

        self._execution_metrics = execution_metrics
