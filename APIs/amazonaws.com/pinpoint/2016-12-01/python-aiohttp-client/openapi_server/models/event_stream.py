# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, destination_stream_arn: str=None, external_id: str=None, last_modified_date: str=None, last_updated_by: str=None, role_arn: str=None):
        """EventStream - a model defined in OpenAPI

        :param application_id: The application_id of this EventStream.
        :param destination_stream_arn: The destination_stream_arn of this EventStream.
        :param external_id: The external_id of this EventStream.
        :param last_modified_date: The last_modified_date of this EventStream.
        :param last_updated_by: The last_updated_by of this EventStream.
        :param role_arn: The role_arn of this EventStream.
        """
        self.openapi_types = {
            'application_id': str,
            'destination_stream_arn': str,
            'external_id': str,
            'last_modified_date': str,
            'last_updated_by': str,
            'role_arn': str
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'destination_stream_arn': 'DestinationStreamArn',
            'external_id': 'ExternalId',
            'last_modified_date': 'LastModifiedDate',
            'last_updated_by': 'LastUpdatedBy',
            'role_arn': 'RoleArn'
        }

        self._application_id = application_id
        self._destination_stream_arn = destination_stream_arn
        self._external_id = external_id
        self._last_modified_date = last_modified_date
        self._last_updated_by = last_updated_by
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventStream of this EventStream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this EventStream.


        :return: The application_id of this EventStream.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this EventStream.


        :param application_id: The application_id of this EventStream.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def destination_stream_arn(self):
        """Gets the destination_stream_arn of this EventStream.


        :return: The destination_stream_arn of this EventStream.
        :rtype: str
        """
        return self._destination_stream_arn

    @destination_stream_arn.setter
    def destination_stream_arn(self, destination_stream_arn):
        """Sets the destination_stream_arn of this EventStream.


        :param destination_stream_arn: The destination_stream_arn of this EventStream.
        :type destination_stream_arn: str
        """
        if destination_stream_arn is None:
            raise ValueError("Invalid value for `destination_stream_arn`, must not be `None`")

        self._destination_stream_arn = destination_stream_arn

    @property
    def external_id(self):
        """Gets the external_id of this EventStream.


        :return: The external_id of this EventStream.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this EventStream.


        :param external_id: The external_id of this EventStream.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this EventStream.


        :return: The last_modified_date of this EventStream.
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this EventStream.


        :param last_modified_date: The last_modified_date of this EventStream.
        :type last_modified_date: str
        """

        self._last_modified_date = last_modified_date

    @property
    def last_updated_by(self):
        """Gets the last_updated_by of this EventStream.


        :return: The last_updated_by of this EventStream.
        :rtype: str
        """
        return self._last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):
        """Sets the last_updated_by of this EventStream.


        :param last_updated_by: The last_updated_by of this EventStream.
        :type last_updated_by: str
        """

        self._last_updated_by = last_updated_by

    @property
    def role_arn(self):
        """Gets the role_arn of this EventStream.


        :return: The role_arn of this EventStream.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this EventStream.


        :param role_arn: The role_arn of this EventStream.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn
