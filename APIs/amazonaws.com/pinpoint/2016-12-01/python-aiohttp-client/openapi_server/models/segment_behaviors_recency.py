# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.duration import Duration
from openapi_server.models.recency_type import RecencyType
from openapi_server import util


class SegmentBehaviorsRecency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: Duration=None, recency_type: RecencyType=None):
        """SegmentBehaviorsRecency - a model defined in OpenAPI

        :param duration: The duration of this SegmentBehaviorsRecency.
        :param recency_type: The recency_type of this SegmentBehaviorsRecency.
        """
        self.openapi_types = {
            'duration': Duration,
            'recency_type': RecencyType
        }

        self.attribute_map = {
            'duration': 'Duration',
            'recency_type': 'RecencyType'
        }

        self._duration = duration
        self._recency_type = recency_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentBehaviorsRecency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentBehaviors_Recency of this SegmentBehaviorsRecency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this SegmentBehaviorsRecency.


        :return: The duration of this SegmentBehaviorsRecency.
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SegmentBehaviorsRecency.


        :param duration: The duration of this SegmentBehaviorsRecency.
        :type duration: Duration
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def recency_type(self):
        """Gets the recency_type of this SegmentBehaviorsRecency.


        :return: The recency_type of this SegmentBehaviorsRecency.
        :rtype: RecencyType
        """
        return self._recency_type

    @recency_type.setter
    def recency_type(self, recency_type):
        """Sets the recency_type of this SegmentBehaviorsRecency.


        :param recency_type: The recency_type of this SegmentBehaviorsRecency.
        :type recency_type: RecencyType
        """
        if recency_type is None:
            raise ValueError("Invalid value for `recency_type`, must not be `None`")

        self._recency_type = recency_type
