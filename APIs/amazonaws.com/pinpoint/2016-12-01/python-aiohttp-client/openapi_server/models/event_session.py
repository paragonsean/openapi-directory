# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, id: str=None, start_timestamp: str=None, stop_timestamp: str=None):
        """EventSession - a model defined in OpenAPI

        :param duration: The duration of this EventSession.
        :param id: The id of this EventSession.
        :param start_timestamp: The start_timestamp of this EventSession.
        :param stop_timestamp: The stop_timestamp of this EventSession.
        """
        self.openapi_types = {
            'duration': int,
            'id': str,
            'start_timestamp': str,
            'stop_timestamp': str
        }

        self.attribute_map = {
            'duration': 'Duration',
            'id': 'Id',
            'start_timestamp': 'StartTimestamp',
            'stop_timestamp': 'StopTimestamp'
        }

        self._duration = duration
        self._id = id
        self._start_timestamp = start_timestamp
        self._stop_timestamp = stop_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event_Session of this EventSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this EventSession.


        :return: The duration of this EventSession.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventSession.


        :param duration: The duration of this EventSession.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this EventSession.


        :return: The id of this EventSession.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventSession.


        :param id: The id of this EventSession.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this EventSession.


        :return: The start_timestamp of this EventSession.
        :rtype: str
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this EventSession.


        :param start_timestamp: The start_timestamp of this EventSession.
        :type start_timestamp: str
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")

        self._start_timestamp = start_timestamp

    @property
    def stop_timestamp(self):
        """Gets the stop_timestamp of this EventSession.


        :return: The stop_timestamp of this EventSession.
        :rtype: str
        """
        return self._stop_timestamp

    @stop_timestamp.setter
    def stop_timestamp(self, stop_timestamp):
        """Sets the stop_timestamp of this EventSession.


        :param stop_timestamp: The stop_timestamp of this EventSession.
        :type stop_timestamp: str
        """

        self._stop_timestamp = stop_timestamp
