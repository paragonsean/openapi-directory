# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_job_response_definition import ImportJobResponseDefinition
from openapi_server.models.job_status import JobStatus
from openapi_server import util


class ImportJobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, completed_pieces: int=None, completion_date: str=None, creation_date: str=None, definition: ImportJobResponseDefinition=None, failed_pieces: int=None, failures: List=None, id: str=None, job_status: JobStatus=None, total_failures: int=None, total_pieces: int=None, total_processed: int=None, type: str=None):
        """ImportJobResponse - a model defined in OpenAPI

        :param application_id: The application_id of this ImportJobResponse.
        :param completed_pieces: The completed_pieces of this ImportJobResponse.
        :param completion_date: The completion_date of this ImportJobResponse.
        :param creation_date: The creation_date of this ImportJobResponse.
        :param definition: The definition of this ImportJobResponse.
        :param failed_pieces: The failed_pieces of this ImportJobResponse.
        :param failures: The failures of this ImportJobResponse.
        :param id: The id of this ImportJobResponse.
        :param job_status: The job_status of this ImportJobResponse.
        :param total_failures: The total_failures of this ImportJobResponse.
        :param total_pieces: The total_pieces of this ImportJobResponse.
        :param total_processed: The total_processed of this ImportJobResponse.
        :param type: The type of this ImportJobResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'completed_pieces': int,
            'completion_date': str,
            'creation_date': str,
            'definition': ImportJobResponseDefinition,
            'failed_pieces': int,
            'failures': List,
            'id': str,
            'job_status': JobStatus,
            'total_failures': int,
            'total_pieces': int,
            'total_processed': int,
            'type': str
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'completed_pieces': 'CompletedPieces',
            'completion_date': 'CompletionDate',
            'creation_date': 'CreationDate',
            'definition': 'Definition',
            'failed_pieces': 'FailedPieces',
            'failures': 'Failures',
            'id': 'Id',
            'job_status': 'JobStatus',
            'total_failures': 'TotalFailures',
            'total_pieces': 'TotalPieces',
            'total_processed': 'TotalProcessed',
            'type': 'Type'
        }

        self._application_id = application_id
        self._completed_pieces = completed_pieces
        self._completion_date = completion_date
        self._creation_date = creation_date
        self._definition = definition
        self._failed_pieces = failed_pieces
        self._failures = failures
        self._id = id
        self._job_status = job_status
        self._total_failures = total_failures
        self._total_pieces = total_pieces
        self._total_processed = total_processed
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportJobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportJobResponse of this ImportJobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this ImportJobResponse.


        :return: The application_id of this ImportJobResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ImportJobResponse.


        :param application_id: The application_id of this ImportJobResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def completed_pieces(self):
        """Gets the completed_pieces of this ImportJobResponse.


        :return: The completed_pieces of this ImportJobResponse.
        :rtype: int
        """
        return self._completed_pieces

    @completed_pieces.setter
    def completed_pieces(self, completed_pieces):
        """Sets the completed_pieces of this ImportJobResponse.


        :param completed_pieces: The completed_pieces of this ImportJobResponse.
        :type completed_pieces: int
        """

        self._completed_pieces = completed_pieces

    @property
    def completion_date(self):
        """Gets the completion_date of this ImportJobResponse.


        :return: The completion_date of this ImportJobResponse.
        :rtype: str
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ImportJobResponse.


        :param completion_date: The completion_date of this ImportJobResponse.
        :type completion_date: str
        """

        self._completion_date = completion_date

    @property
    def creation_date(self):
        """Gets the creation_date of this ImportJobResponse.


        :return: The creation_date of this ImportJobResponse.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ImportJobResponse.


        :param creation_date: The creation_date of this ImportJobResponse.
        :type creation_date: str
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def definition(self):
        """Gets the definition of this ImportJobResponse.


        :return: The definition of this ImportJobResponse.
        :rtype: ImportJobResponseDefinition
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this ImportJobResponse.


        :param definition: The definition of this ImportJobResponse.
        :type definition: ImportJobResponseDefinition
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")

        self._definition = definition

    @property
    def failed_pieces(self):
        """Gets the failed_pieces of this ImportJobResponse.


        :return: The failed_pieces of this ImportJobResponse.
        :rtype: int
        """
        return self._failed_pieces

    @failed_pieces.setter
    def failed_pieces(self, failed_pieces):
        """Sets the failed_pieces of this ImportJobResponse.


        :param failed_pieces: The failed_pieces of this ImportJobResponse.
        :type failed_pieces: int
        """

        self._failed_pieces = failed_pieces

    @property
    def failures(self):
        """Gets the failures of this ImportJobResponse.


        :return: The failures of this ImportJobResponse.
        :rtype: List
        """
        return self._failures

    @failures.setter
    def failures(self, failures):
        """Sets the failures of this ImportJobResponse.


        :param failures: The failures of this ImportJobResponse.
        :type failures: List
        """

        self._failures = failures

    @property
    def id(self):
        """Gets the id of this ImportJobResponse.


        :return: The id of this ImportJobResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportJobResponse.


        :param id: The id of this ImportJobResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def job_status(self):
        """Gets the job_status of this ImportJobResponse.


        :return: The job_status of this ImportJobResponse.
        :rtype: JobStatus
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this ImportJobResponse.


        :param job_status: The job_status of this ImportJobResponse.
        :type job_status: JobStatus
        """
        if job_status is None:
            raise ValueError("Invalid value for `job_status`, must not be `None`")

        self._job_status = job_status

    @property
    def total_failures(self):
        """Gets the total_failures of this ImportJobResponse.


        :return: The total_failures of this ImportJobResponse.
        :rtype: int
        """
        return self._total_failures

    @total_failures.setter
    def total_failures(self, total_failures):
        """Sets the total_failures of this ImportJobResponse.


        :param total_failures: The total_failures of this ImportJobResponse.
        :type total_failures: int
        """

        self._total_failures = total_failures

    @property
    def total_pieces(self):
        """Gets the total_pieces of this ImportJobResponse.


        :return: The total_pieces of this ImportJobResponse.
        :rtype: int
        """
        return self._total_pieces

    @total_pieces.setter
    def total_pieces(self, total_pieces):
        """Sets the total_pieces of this ImportJobResponse.


        :param total_pieces: The total_pieces of this ImportJobResponse.
        :type total_pieces: int
        """

        self._total_pieces = total_pieces

    @property
    def total_processed(self):
        """Gets the total_processed of this ImportJobResponse.


        :return: The total_processed of this ImportJobResponse.
        :rtype: int
        """
        return self._total_processed

    @total_processed.setter
    def total_processed(self, total_processed):
        """Sets the total_processed of this ImportJobResponse.


        :param total_processed: The total_processed of this ImportJobResponse.
        :type total_processed: int
        """

        self._total_processed = total_processed

    @property
    def type(self):
        """Gets the type of this ImportJobResponse.


        :return: The type of this ImportJobResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ImportJobResponse.


        :param type: The type of this ImportJobResponse.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
