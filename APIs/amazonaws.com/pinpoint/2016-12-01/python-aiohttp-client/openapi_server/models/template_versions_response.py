# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateVersionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item: List=None, message: str=None, next_token: str=None, request_id: str=None):
        """TemplateVersionsResponse - a model defined in OpenAPI

        :param item: The item of this TemplateVersionsResponse.
        :param message: The message of this TemplateVersionsResponse.
        :param next_token: The next_token of this TemplateVersionsResponse.
        :param request_id: The request_id of this TemplateVersionsResponse.
        """
        self.openapi_types = {
            'item': List,
            'message': str,
            'next_token': str,
            'request_id': str
        }

        self.attribute_map = {
            'item': 'Item',
            'message': 'Message',
            'next_token': 'NextToken',
            'request_id': 'RequestID'
        }

        self._item = item
        self._message = message
        self._next_token = next_token
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateVersionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateVersionsResponse of this TemplateVersionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self):
        """Gets the item of this TemplateVersionsResponse.


        :return: The item of this TemplateVersionsResponse.
        :rtype: List
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this TemplateVersionsResponse.


        :param item: The item of this TemplateVersionsResponse.
        :type item: List
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")

        self._item = item

    @property
    def message(self):
        """Gets the message of this TemplateVersionsResponse.


        :return: The message of this TemplateVersionsResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TemplateVersionsResponse.


        :param message: The message of this TemplateVersionsResponse.
        :type message: str
        """

        self._message = message

    @property
    def next_token(self):
        """Gets the next_token of this TemplateVersionsResponse.


        :return: The next_token of this TemplateVersionsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this TemplateVersionsResponse.


        :param next_token: The next_token of this TemplateVersionsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def request_id(self):
        """Gets the request_id of this TemplateVersionsResponse.


        :return: The request_id of this TemplateVersionsResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this TemplateVersionsResponse.


        :param request_id: The request_id of this TemplateVersionsResponse.
        :type request_id: str
        """

        self._request_id = request_id
