# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendUsersMessageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, request_id: str=None, result: Dict=None):
        """SendUsersMessageResponse - a model defined in OpenAPI

        :param application_id: The application_id of this SendUsersMessageResponse.
        :param request_id: The request_id of this SendUsersMessageResponse.
        :param result: The result of this SendUsersMessageResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'request_id': str,
            'result': Dict
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'request_id': 'RequestId',
            'result': 'Result'
        }

        self._application_id = application_id
        self._request_id = request_id
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendUsersMessageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendUsersMessageResponse of this SendUsersMessageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this SendUsersMessageResponse.


        :return: The application_id of this SendUsersMessageResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this SendUsersMessageResponse.


        :param application_id: The application_id of this SendUsersMessageResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def request_id(self):
        """Gets the request_id of this SendUsersMessageResponse.


        :return: The request_id of this SendUsersMessageResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this SendUsersMessageResponse.


        :param request_id: The request_id of this SendUsersMessageResponse.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def result(self):
        """Gets the result of this SendUsersMessageResponse.


        :return: The result of this SendUsersMessageResponse.
        :rtype: Dict
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this SendUsersMessageResponse.


        :param result: The result of this SendUsersMessageResponse.
        :type result: Dict
        """

        self._result = result
