# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_response_dimensions import SegmentResponseDimensions
from openapi_server.models.segment_response_import_definition import SegmentResponseImportDefinition
from openapi_server.models.segment_response_segment_groups import SegmentResponseSegmentGroups
from openapi_server.models.segment_type import SegmentType
from openapi_server import util


class SegmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, arn: str=None, creation_date: str=None, dimensions: SegmentResponseDimensions=None, id: str=None, import_definition: SegmentResponseImportDefinition=None, last_modified_date: str=None, name: str=None, segment_groups: SegmentResponseSegmentGroups=None, segment_type: SegmentType=None, tags: Dict=None, version: int=None):
        """SegmentResponse - a model defined in OpenAPI

        :param application_id: The application_id of this SegmentResponse.
        :param arn: The arn of this SegmentResponse.
        :param creation_date: The creation_date of this SegmentResponse.
        :param dimensions: The dimensions of this SegmentResponse.
        :param id: The id of this SegmentResponse.
        :param import_definition: The import_definition of this SegmentResponse.
        :param last_modified_date: The last_modified_date of this SegmentResponse.
        :param name: The name of this SegmentResponse.
        :param segment_groups: The segment_groups of this SegmentResponse.
        :param segment_type: The segment_type of this SegmentResponse.
        :param tags: The tags of this SegmentResponse.
        :param version: The version of this SegmentResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'arn': str,
            'creation_date': str,
            'dimensions': SegmentResponseDimensions,
            'id': str,
            'import_definition': SegmentResponseImportDefinition,
            'last_modified_date': str,
            'name': str,
            'segment_groups': SegmentResponseSegmentGroups,
            'segment_type': SegmentType,
            'tags': Dict,
            'version': int
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'arn': 'Arn',
            'creation_date': 'CreationDate',
            'dimensions': 'Dimensions',
            'id': 'Id',
            'import_definition': 'ImportDefinition',
            'last_modified_date': 'LastModifiedDate',
            'name': 'Name',
            'segment_groups': 'SegmentGroups',
            'segment_type': 'SegmentType',
            'tags': 'tags',
            'version': 'Version'
        }

        self._application_id = application_id
        self._arn = arn
        self._creation_date = creation_date
        self._dimensions = dimensions
        self._id = id
        self._import_definition = import_definition
        self._last_modified_date = last_modified_date
        self._name = name
        self._segment_groups = segment_groups
        self._segment_type = segment_type
        self._tags = tags
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentResponse of this SegmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this SegmentResponse.


        :return: The application_id of this SegmentResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this SegmentResponse.


        :param application_id: The application_id of this SegmentResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def arn(self):
        """Gets the arn of this SegmentResponse.


        :return: The arn of this SegmentResponse.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this SegmentResponse.


        :param arn: The arn of this SegmentResponse.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def creation_date(self):
        """Gets the creation_date of this SegmentResponse.


        :return: The creation_date of this SegmentResponse.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this SegmentResponse.


        :param creation_date: The creation_date of this SegmentResponse.
        :type creation_date: str
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def dimensions(self):
        """Gets the dimensions of this SegmentResponse.


        :return: The dimensions of this SegmentResponse.
        :rtype: SegmentResponseDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SegmentResponse.


        :param dimensions: The dimensions of this SegmentResponse.
        :type dimensions: SegmentResponseDimensions
        """

        self._dimensions = dimensions

    @property
    def id(self):
        """Gets the id of this SegmentResponse.


        :return: The id of this SegmentResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SegmentResponse.


        :param id: The id of this SegmentResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def import_definition(self):
        """Gets the import_definition of this SegmentResponse.


        :return: The import_definition of this SegmentResponse.
        :rtype: SegmentResponseImportDefinition
        """
        return self._import_definition

    @import_definition.setter
    def import_definition(self, import_definition):
        """Sets the import_definition of this SegmentResponse.


        :param import_definition: The import_definition of this SegmentResponse.
        :type import_definition: SegmentResponseImportDefinition
        """

        self._import_definition = import_definition

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this SegmentResponse.


        :return: The last_modified_date of this SegmentResponse.
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this SegmentResponse.


        :param last_modified_date: The last_modified_date of this SegmentResponse.
        :type last_modified_date: str
        """

        self._last_modified_date = last_modified_date

    @property
    def name(self):
        """Gets the name of this SegmentResponse.


        :return: The name of this SegmentResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SegmentResponse.


        :param name: The name of this SegmentResponse.
        :type name: str
        """

        self._name = name

    @property
    def segment_groups(self):
        """Gets the segment_groups of this SegmentResponse.


        :return: The segment_groups of this SegmentResponse.
        :rtype: SegmentResponseSegmentGroups
        """
        return self._segment_groups

    @segment_groups.setter
    def segment_groups(self, segment_groups):
        """Sets the segment_groups of this SegmentResponse.


        :param segment_groups: The segment_groups of this SegmentResponse.
        :type segment_groups: SegmentResponseSegmentGroups
        """

        self._segment_groups = segment_groups

    @property
    def segment_type(self):
        """Gets the segment_type of this SegmentResponse.


        :return: The segment_type of this SegmentResponse.
        :rtype: SegmentType
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this SegmentResponse.


        :param segment_type: The segment_type of this SegmentResponse.
        :type segment_type: SegmentType
        """
        if segment_type is None:
            raise ValueError("Invalid value for `segment_type`, must not be `None`")

        self._segment_type = segment_type

    @property
    def tags(self):
        """Gets the tags of this SegmentResponse.


        :return: The tags of this SegmentResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SegmentResponse.


        :param tags: The tags of this SegmentResponse.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this SegmentResponse.


        :return: The version of this SegmentResponse.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SegmentResponse.


        :param version: The version of this SegmentResponse.
        :type version: int
        """

        self._version = version
