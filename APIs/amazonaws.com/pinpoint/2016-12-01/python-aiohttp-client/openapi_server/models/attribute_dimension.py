# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attribute_type import AttributeType
from openapi_server import util


class AttributeDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_type: AttributeType=None, values: List=None):
        """AttributeDimension - a model defined in OpenAPI

        :param attribute_type: The attribute_type of this AttributeDimension.
        :param values: The values of this AttributeDimension.
        """
        self.openapi_types = {
            'attribute_type': AttributeType,
            'values': List
        }

        self.attribute_map = {
            'attribute_type': 'AttributeType',
            'values': 'Values'
        }

        self._attribute_type = attribute_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeDimension of this AttributeDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_type(self):
        """Gets the attribute_type of this AttributeDimension.


        :return: The attribute_type of this AttributeDimension.
        :rtype: AttributeType
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type):
        """Sets the attribute_type of this AttributeDimension.


        :param attribute_type: The attribute_type of this AttributeDimension.
        :type attribute_type: AttributeType
        """

        self._attribute_type = attribute_type

    @property
    def values(self):
        """Gets the values of this AttributeDimension.


        :return: The values of this AttributeDimension.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AttributeDimension.


        :param values: The values of this AttributeDimension.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
