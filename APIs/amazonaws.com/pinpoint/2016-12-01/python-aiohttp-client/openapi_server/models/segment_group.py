# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.source_type import SourceType
from openapi_server.models.type import Type
from openapi_server import util


class SegmentGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: List=None, source_segments: List=None, source_type: SourceType=None, type: Type=None):
        """SegmentGroup - a model defined in OpenAPI

        :param dimensions: The dimensions of this SegmentGroup.
        :param source_segments: The source_segments of this SegmentGroup.
        :param source_type: The source_type of this SegmentGroup.
        :param type: The type of this SegmentGroup.
        """
        self.openapi_types = {
            'dimensions': List,
            'source_segments': List,
            'source_type': SourceType,
            'type': Type
        }

        self.attribute_map = {
            'dimensions': 'Dimensions',
            'source_segments': 'SourceSegments',
            'source_type': 'SourceType',
            'type': 'Type'
        }

        self._dimensions = dimensions
        self._source_segments = source_segments
        self._source_type = source_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentGroup of this SegmentGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this SegmentGroup.


        :return: The dimensions of this SegmentGroup.
        :rtype: List
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this SegmentGroup.


        :param dimensions: The dimensions of this SegmentGroup.
        :type dimensions: List
        """

        self._dimensions = dimensions

    @property
    def source_segments(self):
        """Gets the source_segments of this SegmentGroup.


        :return: The source_segments of this SegmentGroup.
        :rtype: List
        """
        return self._source_segments

    @source_segments.setter
    def source_segments(self, source_segments):
        """Sets the source_segments of this SegmentGroup.


        :param source_segments: The source_segments of this SegmentGroup.
        :type source_segments: List
        """

        self._source_segments = source_segments

    @property
    def source_type(self):
        """Gets the source_type of this SegmentGroup.


        :return: The source_type of this SegmentGroup.
        :rtype: SourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this SegmentGroup.


        :param source_type: The source_type of this SegmentGroup.
        :type source_type: SourceType
        """

        self._source_type = source_type

    @property
    def type(self):
        """Gets the type of this SegmentGroup.


        :return: The type of this SegmentGroup.
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SegmentGroup.


        :param type: The type of this SegmentGroup.
        :type type: Type
        """

        self._type = type
