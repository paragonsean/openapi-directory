# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_status import DeliveryStatus
from openapi_server import util


class MessageResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_status: DeliveryStatus=None, message_id: str=None, status_code: int=None, status_message: str=None, updated_token: str=None):
        """MessageResult - a model defined in OpenAPI

        :param delivery_status: The delivery_status of this MessageResult.
        :param message_id: The message_id of this MessageResult.
        :param status_code: The status_code of this MessageResult.
        :param status_message: The status_message of this MessageResult.
        :param updated_token: The updated_token of this MessageResult.
        """
        self.openapi_types = {
            'delivery_status': DeliveryStatus,
            'message_id': str,
            'status_code': int,
            'status_message': str,
            'updated_token': str
        }

        self.attribute_map = {
            'delivery_status': 'DeliveryStatus',
            'message_id': 'MessageId',
            'status_code': 'StatusCode',
            'status_message': 'StatusMessage',
            'updated_token': 'UpdatedToken'
        }

        self._delivery_status = delivery_status
        self._message_id = message_id
        self._status_code = status_code
        self._status_message = status_message
        self._updated_token = updated_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageResult of this MessageResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_status(self):
        """Gets the delivery_status of this MessageResult.


        :return: The delivery_status of this MessageResult.
        :rtype: DeliveryStatus
        """
        return self._delivery_status

    @delivery_status.setter
    def delivery_status(self, delivery_status):
        """Sets the delivery_status of this MessageResult.


        :param delivery_status: The delivery_status of this MessageResult.
        :type delivery_status: DeliveryStatus
        """
        if delivery_status is None:
            raise ValueError("Invalid value for `delivery_status`, must not be `None`")

        self._delivery_status = delivery_status

    @property
    def message_id(self):
        """Gets the message_id of this MessageResult.


        :return: The message_id of this MessageResult.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MessageResult.


        :param message_id: The message_id of this MessageResult.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def status_code(self):
        """Gets the status_code of this MessageResult.


        :return: The status_code of this MessageResult.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this MessageResult.


        :param status_code: The status_code of this MessageResult.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def status_message(self):
        """Gets the status_message of this MessageResult.


        :return: The status_message of this MessageResult.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this MessageResult.


        :param status_message: The status_message of this MessageResult.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def updated_token(self):
        """Gets the updated_token of this MessageResult.


        :return: The updated_token of this MessageResult.
        :rtype: str
        """
        return self._updated_token

    @updated_token.setter
    def updated_token(self, updated_token):
        """Sets the updated_token of this MessageResult.


        :param updated_token: The updated_token of this MessageResult.
        :type updated_token: str
        """

        self._updated_token = updated_token
