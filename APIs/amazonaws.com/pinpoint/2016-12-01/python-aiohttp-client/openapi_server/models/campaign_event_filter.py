# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_event_filter_dimensions import CampaignEventFilterDimensions
from openapi_server.models.filter_type import FilterType
from openapi_server import util


class CampaignEventFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: CampaignEventFilterDimensions=None, filter_type: FilterType=None):
        """CampaignEventFilter - a model defined in OpenAPI

        :param dimensions: The dimensions of this CampaignEventFilter.
        :param filter_type: The filter_type of this CampaignEventFilter.
        """
        self.openapi_types = {
            'dimensions': CampaignEventFilterDimensions,
            'filter_type': FilterType
        }

        self.attribute_map = {
            'dimensions': 'Dimensions',
            'filter_type': 'FilterType'
        }

        self._dimensions = dimensions
        self._filter_type = filter_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignEventFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignEventFilter of this CampaignEventFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this CampaignEventFilter.


        :return: The dimensions of this CampaignEventFilter.
        :rtype: CampaignEventFilterDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CampaignEventFilter.


        :param dimensions: The dimensions of this CampaignEventFilter.
        :type dimensions: CampaignEventFilterDimensions
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")

        self._dimensions = dimensions

    @property
    def filter_type(self):
        """Gets the filter_type of this CampaignEventFilter.


        :return: The filter_type of this CampaignEventFilter.
        :rtype: FilterType
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this CampaignEventFilter.


        :param filter_type: The filter_type of this CampaignEventFilter.
        :type filter_type: FilterType
        """
        if filter_type is None:
            raise ValueError("Invalid value for `filter_type`, must not be `None`")

        self._filter_type = filter_type
