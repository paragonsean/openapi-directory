# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_batch_endpoint import EventsBatchEndpoint
from openapi_server import util


class EventsBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint: EventsBatchEndpoint=None, events: Dict=None):
        """EventsBatch - a model defined in OpenAPI

        :param endpoint: The endpoint of this EventsBatch.
        :param events: The events of this EventsBatch.
        """
        self.openapi_types = {
            'endpoint': EventsBatchEndpoint,
            'events': Dict
        }

        self.attribute_map = {
            'endpoint': 'Endpoint',
            'events': 'Events'
        }

        self._endpoint = endpoint
        self._events = events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventsBatch of this EventsBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this EventsBatch.


        :return: The endpoint of this EventsBatch.
        :rtype: EventsBatchEndpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this EventsBatch.


        :param endpoint: The endpoint of this EventsBatch.
        :type endpoint: EventsBatchEndpoint
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")

        self._endpoint = endpoint

    @property
    def events(self):
        """Gets the events of this EventsBatch.


        :return: The events of this EventsBatch.
        :rtype: Dict
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this EventsBatch.


        :param events: The events of this EventsBatch.
        :type events: Dict
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events
