# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JourneyExecutionMetricsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, journey_id: str=None, last_evaluated_time: str=None, metrics: Dict=None):
        """JourneyExecutionMetricsResponse - a model defined in OpenAPI

        :param application_id: The application_id of this JourneyExecutionMetricsResponse.
        :param journey_id: The journey_id of this JourneyExecutionMetricsResponse.
        :param last_evaluated_time: The last_evaluated_time of this JourneyExecutionMetricsResponse.
        :param metrics: The metrics of this JourneyExecutionMetricsResponse.
        """
        self.openapi_types = {
            'application_id': str,
            'journey_id': str,
            'last_evaluated_time': str,
            'metrics': Dict
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'journey_id': 'JourneyId',
            'last_evaluated_time': 'LastEvaluatedTime',
            'metrics': 'Metrics'
        }

        self._application_id = application_id
        self._journey_id = journey_id
        self._last_evaluated_time = last_evaluated_time
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JourneyExecutionMetricsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JourneyExecutionMetricsResponse of this JourneyExecutionMetricsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this JourneyExecutionMetricsResponse.


        :return: The application_id of this JourneyExecutionMetricsResponse.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this JourneyExecutionMetricsResponse.


        :param application_id: The application_id of this JourneyExecutionMetricsResponse.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def journey_id(self):
        """Gets the journey_id of this JourneyExecutionMetricsResponse.


        :return: The journey_id of this JourneyExecutionMetricsResponse.
        :rtype: str
        """
        return self._journey_id

    @journey_id.setter
    def journey_id(self, journey_id):
        """Sets the journey_id of this JourneyExecutionMetricsResponse.


        :param journey_id: The journey_id of this JourneyExecutionMetricsResponse.
        :type journey_id: str
        """
        if journey_id is None:
            raise ValueError("Invalid value for `journey_id`, must not be `None`")

        self._journey_id = journey_id

    @property
    def last_evaluated_time(self):
        """Gets the last_evaluated_time of this JourneyExecutionMetricsResponse.


        :return: The last_evaluated_time of this JourneyExecutionMetricsResponse.
        :rtype: str
        """
        return self._last_evaluated_time

    @last_evaluated_time.setter
    def last_evaluated_time(self, last_evaluated_time):
        """Sets the last_evaluated_time of this JourneyExecutionMetricsResponse.


        :param last_evaluated_time: The last_evaluated_time of this JourneyExecutionMetricsResponse.
        :type last_evaluated_time: str
        """
        if last_evaluated_time is None:
            raise ValueError("Invalid value for `last_evaluated_time`, must not be `None`")

        self._last_evaluated_time = last_evaluated_time

    @property
    def metrics(self):
        """Gets the metrics of this JourneyExecutionMetricsResponse.


        :return: The metrics of this JourneyExecutionMetricsResponse.
        :rtype: Dict
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this JourneyExecutionMetricsResponse.


        :param metrics: The metrics of this JourneyExecutionMetricsResponse.
        :type metrics: Dict
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")

        self._metrics = metrics
