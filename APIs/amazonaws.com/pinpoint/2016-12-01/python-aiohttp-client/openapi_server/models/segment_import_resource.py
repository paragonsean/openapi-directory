# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format import Format
from openapi_server import util


class SegmentImportResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_counts: Dict=None, external_id: str=None, format: Format=None, role_arn: str=None, s3_url: str=None, size: int=None):
        """SegmentImportResource - a model defined in OpenAPI

        :param channel_counts: The channel_counts of this SegmentImportResource.
        :param external_id: The external_id of this SegmentImportResource.
        :param format: The format of this SegmentImportResource.
        :param role_arn: The role_arn of this SegmentImportResource.
        :param s3_url: The s3_url of this SegmentImportResource.
        :param size: The size of this SegmentImportResource.
        """
        self.openapi_types = {
            'channel_counts': Dict,
            'external_id': str,
            'format': Format,
            'role_arn': str,
            's3_url': str,
            'size': int
        }

        self.attribute_map = {
            'channel_counts': 'ChannelCounts',
            'external_id': 'ExternalId',
            'format': 'Format',
            'role_arn': 'RoleArn',
            's3_url': 'S3Url',
            'size': 'Size'
        }

        self._channel_counts = channel_counts
        self._external_id = external_id
        self._format = format
        self._role_arn = role_arn
        self._s3_url = s3_url
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentImportResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentImportResource of this SegmentImportResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_counts(self):
        """Gets the channel_counts of this SegmentImportResource.


        :return: The channel_counts of this SegmentImportResource.
        :rtype: Dict
        """
        return self._channel_counts

    @channel_counts.setter
    def channel_counts(self, channel_counts):
        """Sets the channel_counts of this SegmentImportResource.


        :param channel_counts: The channel_counts of this SegmentImportResource.
        :type channel_counts: Dict
        """

        self._channel_counts = channel_counts

    @property
    def external_id(self):
        """Gets the external_id of this SegmentImportResource.


        :return: The external_id of this SegmentImportResource.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SegmentImportResource.


        :param external_id: The external_id of this SegmentImportResource.
        :type external_id: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")

        self._external_id = external_id

    @property
    def format(self):
        """Gets the format of this SegmentImportResource.


        :return: The format of this SegmentImportResource.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SegmentImportResource.


        :param format: The format of this SegmentImportResource.
        :type format: Format
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def role_arn(self):
        """Gets the role_arn of this SegmentImportResource.


        :return: The role_arn of this SegmentImportResource.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this SegmentImportResource.


        :param role_arn: The role_arn of this SegmentImportResource.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def s3_url(self):
        """Gets the s3_url of this SegmentImportResource.


        :return: The s3_url of this SegmentImportResource.
        :rtype: str
        """
        return self._s3_url

    @s3_url.setter
    def s3_url(self, s3_url):
        """Sets the s3_url of this SegmentImportResource.


        :param s3_url: The s3_url of this SegmentImportResource.
        :type s3_url: str
        """
        if s3_url is None:
            raise ValueError("Invalid value for `s3_url`, must not be `None`")

        self._s3_url = s3_url

    @property
    def size(self):
        """Gets the size of this SegmentImportResource.


        :return: The size of this SegmentImportResource.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this SegmentImportResource.


        :param size: The size of this SegmentImportResource.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
