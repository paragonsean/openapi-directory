# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gps_point_dimension_coordinates import GPSPointDimensionCoordinates
from openapi_server import util


class GPSPointDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates: GPSPointDimensionCoordinates=None, range_in_kilometers: float=None):
        """GPSPointDimension - a model defined in OpenAPI

        :param coordinates: The coordinates of this GPSPointDimension.
        :param range_in_kilometers: The range_in_kilometers of this GPSPointDimension.
        """
        self.openapi_types = {
            'coordinates': GPSPointDimensionCoordinates,
            'range_in_kilometers': float
        }

        self.attribute_map = {
            'coordinates': 'Coordinates',
            'range_in_kilometers': 'RangeInKilometers'
        }

        self._coordinates = coordinates
        self._range_in_kilometers = range_in_kilometers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GPSPointDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GPSPointDimension of this GPSPointDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates(self):
        """Gets the coordinates of this GPSPointDimension.


        :return: The coordinates of this GPSPointDimension.
        :rtype: GPSPointDimensionCoordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this GPSPointDimension.


        :param coordinates: The coordinates of this GPSPointDimension.
        :type coordinates: GPSPointDimensionCoordinates
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")

        self._coordinates = coordinates

    @property
    def range_in_kilometers(self):
        """Gets the range_in_kilometers of this GPSPointDimension.


        :return: The range_in_kilometers of this GPSPointDimension.
        :rtype: float
        """
        return self._range_in_kilometers

    @range_in_kilometers.setter
    def range_in_kilometers(self, range_in_kilometers):
        """Sets the range_in_kilometers of this GPSPointDimension.


        :param range_in_kilometers: The range_in_kilometers of this GPSPointDimension.
        :type range_in_kilometers: float
        """

        self._range_in_kilometers = range_in_kilometers
