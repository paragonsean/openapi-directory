# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResultRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, grouped_bys: List=None, values: List=None):
        """ResultRow - a model defined in OpenAPI

        :param grouped_bys: The grouped_bys of this ResultRow.
        :param values: The values of this ResultRow.
        """
        self.openapi_types = {
            'grouped_bys': List,
            'values': List
        }

        self.attribute_map = {
            'grouped_bys': 'GroupedBys',
            'values': 'Values'
        }

        self._grouped_bys = grouped_bys
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResultRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResultRow of this ResultRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def grouped_bys(self):
        """Gets the grouped_bys of this ResultRow.


        :return: The grouped_bys of this ResultRow.
        :rtype: List
        """
        return self._grouped_bys

    @grouped_bys.setter
    def grouped_bys(self, grouped_bys):
        """Sets the grouped_bys of this ResultRow.


        :param grouped_bys: The grouped_bys of this ResultRow.
        :type grouped_bys: List
        """
        if grouped_bys is None:
            raise ValueError("Invalid value for `grouped_bys`, must not be `None`")

        self._grouped_bys = grouped_bys

    @property
    def values(self):
        """Gets the values of this ResultRow.


        :return: The values of this ResultRow.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ResultRow.


        :param values: The values of this ResultRow.
        :type values: List
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")

        self._values = values
