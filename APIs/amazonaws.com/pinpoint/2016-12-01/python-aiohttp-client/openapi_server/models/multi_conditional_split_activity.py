# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.multi_conditional_split_activity_evaluation_wait_time import MultiConditionalSplitActivityEvaluationWaitTime
from openapi_server import util


class MultiConditionalSplitActivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branches: List=None, default_activity: str=None, evaluation_wait_time: MultiConditionalSplitActivityEvaluationWaitTime=None):
        """MultiConditionalSplitActivity - a model defined in OpenAPI

        :param branches: The branches of this MultiConditionalSplitActivity.
        :param default_activity: The default_activity of this MultiConditionalSplitActivity.
        :param evaluation_wait_time: The evaluation_wait_time of this MultiConditionalSplitActivity.
        """
        self.openapi_types = {
            'branches': List,
            'default_activity': str,
            'evaluation_wait_time': MultiConditionalSplitActivityEvaluationWaitTime
        }

        self.attribute_map = {
            'branches': 'Branches',
            'default_activity': 'DefaultActivity',
            'evaluation_wait_time': 'EvaluationWaitTime'
        }

        self._branches = branches
        self._default_activity = default_activity
        self._evaluation_wait_time = evaluation_wait_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiConditionalSplitActivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiConditionalSplitActivity of this MultiConditionalSplitActivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branches(self):
        """Gets the branches of this MultiConditionalSplitActivity.


        :return: The branches of this MultiConditionalSplitActivity.
        :rtype: List
        """
        return self._branches

    @branches.setter
    def branches(self, branches):
        """Sets the branches of this MultiConditionalSplitActivity.


        :param branches: The branches of this MultiConditionalSplitActivity.
        :type branches: List
        """

        self._branches = branches

    @property
    def default_activity(self):
        """Gets the default_activity of this MultiConditionalSplitActivity.


        :return: The default_activity of this MultiConditionalSplitActivity.
        :rtype: str
        """
        return self._default_activity

    @default_activity.setter
    def default_activity(self, default_activity):
        """Sets the default_activity of this MultiConditionalSplitActivity.


        :param default_activity: The default_activity of this MultiConditionalSplitActivity.
        :type default_activity: str
        """

        self._default_activity = default_activity

    @property
    def evaluation_wait_time(self):
        """Gets the evaluation_wait_time of this MultiConditionalSplitActivity.


        :return: The evaluation_wait_time of this MultiConditionalSplitActivity.
        :rtype: MultiConditionalSplitActivityEvaluationWaitTime
        """
        return self._evaluation_wait_time

    @evaluation_wait_time.setter
    def evaluation_wait_time(self, evaluation_wait_time):
        """Sets the evaluation_wait_time of this MultiConditionalSplitActivity.


        :param evaluation_wait_time: The evaluation_wait_time of this MultiConditionalSplitActivity.
        :type evaluation_wait_time: MultiConditionalSplitActivityEvaluationWaitTime
        """

        self._evaluation_wait_time = evaluation_wait_time
