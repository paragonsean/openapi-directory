# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TemplateVersionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: str=None, default_substitutions: str=None, last_modified_date: str=None, template_description: str=None, template_name: str=None, template_type: str=None, version: str=None):
        """TemplateVersionResponse - a model defined in OpenAPI

        :param creation_date: The creation_date of this TemplateVersionResponse.
        :param default_substitutions: The default_substitutions of this TemplateVersionResponse.
        :param last_modified_date: The last_modified_date of this TemplateVersionResponse.
        :param template_description: The template_description of this TemplateVersionResponse.
        :param template_name: The template_name of this TemplateVersionResponse.
        :param template_type: The template_type of this TemplateVersionResponse.
        :param version: The version of this TemplateVersionResponse.
        """
        self.openapi_types = {
            'creation_date': str,
            'default_substitutions': str,
            'last_modified_date': str,
            'template_description': str,
            'template_name': str,
            'template_type': str,
            'version': str
        }

        self.attribute_map = {
            'creation_date': 'CreationDate',
            'default_substitutions': 'DefaultSubstitutions',
            'last_modified_date': 'LastModifiedDate',
            'template_description': 'TemplateDescription',
            'template_name': 'TemplateName',
            'template_type': 'TemplateType',
            'version': 'Version'
        }

        self._creation_date = creation_date
        self._default_substitutions = default_substitutions
        self._last_modified_date = last_modified_date
        self._template_description = template_description
        self._template_name = template_name
        self._template_type = template_type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateVersionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateVersionResponse of this TemplateVersionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this TemplateVersionResponse.


        :return: The creation_date of this TemplateVersionResponse.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TemplateVersionResponse.


        :param creation_date: The creation_date of this TemplateVersionResponse.
        :type creation_date: str
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def default_substitutions(self):
        """Gets the default_substitutions of this TemplateVersionResponse.


        :return: The default_substitutions of this TemplateVersionResponse.
        :rtype: str
        """
        return self._default_substitutions

    @default_substitutions.setter
    def default_substitutions(self, default_substitutions):
        """Sets the default_substitutions of this TemplateVersionResponse.


        :param default_substitutions: The default_substitutions of this TemplateVersionResponse.
        :type default_substitutions: str
        """

        self._default_substitutions = default_substitutions

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TemplateVersionResponse.


        :return: The last_modified_date of this TemplateVersionResponse.
        :rtype: str
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TemplateVersionResponse.


        :param last_modified_date: The last_modified_date of this TemplateVersionResponse.
        :type last_modified_date: str
        """
        if last_modified_date is None:
            raise ValueError("Invalid value for `last_modified_date`, must not be `None`")

        self._last_modified_date = last_modified_date

    @property
    def template_description(self):
        """Gets the template_description of this TemplateVersionResponse.


        :return: The template_description of this TemplateVersionResponse.
        :rtype: str
        """
        return self._template_description

    @template_description.setter
    def template_description(self, template_description):
        """Sets the template_description of this TemplateVersionResponse.


        :param template_description: The template_description of this TemplateVersionResponse.
        :type template_description: str
        """

        self._template_description = template_description

    @property
    def template_name(self):
        """Gets the template_name of this TemplateVersionResponse.


        :return: The template_name of this TemplateVersionResponse.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this TemplateVersionResponse.


        :param template_name: The template_name of this TemplateVersionResponse.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def template_type(self):
        """Gets the template_type of this TemplateVersionResponse.


        :return: The template_type of this TemplateVersionResponse.
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this TemplateVersionResponse.


        :param template_type: The template_type of this TemplateVersionResponse.
        :type template_type: str
        """
        if template_type is None:
            raise ValueError("Invalid value for `template_type`, must not be `None`")

        self._template_type = template_type

    @property
    def version(self):
        """Gets the version of this TemplateVersionResponse.


        :return: The version of this TemplateVersionResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TemplateVersionResponse.


        :param version: The version of this TemplateVersionResponse.
        :type version: str
        """

        self._version = version
