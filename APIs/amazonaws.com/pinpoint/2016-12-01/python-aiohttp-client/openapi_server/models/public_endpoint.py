# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.endpoint_response_user import EndpointResponseUser
from openapi_server.models.update_endpoint_request_endpoint_request_demographic import UpdateEndpointRequestEndpointRequestDemographic
from openapi_server.models.update_endpoint_request_endpoint_request_location import UpdateEndpointRequestEndpointRequestLocation
from openapi_server import util


class PublicEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, attributes: Dict=None, channel_type: ChannelType=None, demographic: UpdateEndpointRequestEndpointRequestDemographic=None, effective_date: str=None, endpoint_status: str=None, location: UpdateEndpointRequestEndpointRequestLocation=None, metrics: Dict=None, opt_out: str=None, request_id: str=None, user: EndpointResponseUser=None):
        """PublicEndpoint - a model defined in OpenAPI

        :param address: The address of this PublicEndpoint.
        :param attributes: The attributes of this PublicEndpoint.
        :param channel_type: The channel_type of this PublicEndpoint.
        :param demographic: The demographic of this PublicEndpoint.
        :param effective_date: The effective_date of this PublicEndpoint.
        :param endpoint_status: The endpoint_status of this PublicEndpoint.
        :param location: The location of this PublicEndpoint.
        :param metrics: The metrics of this PublicEndpoint.
        :param opt_out: The opt_out of this PublicEndpoint.
        :param request_id: The request_id of this PublicEndpoint.
        :param user: The user of this PublicEndpoint.
        """
        self.openapi_types = {
            'address': str,
            'attributes': Dict,
            'channel_type': ChannelType,
            'demographic': UpdateEndpointRequestEndpointRequestDemographic,
            'effective_date': str,
            'endpoint_status': str,
            'location': UpdateEndpointRequestEndpointRequestLocation,
            'metrics': Dict,
            'opt_out': str,
            'request_id': str,
            'user': EndpointResponseUser
        }

        self.attribute_map = {
            'address': 'Address',
            'attributes': 'Attributes',
            'channel_type': 'ChannelType',
            'demographic': 'Demographic',
            'effective_date': 'EffectiveDate',
            'endpoint_status': 'EndpointStatus',
            'location': 'Location',
            'metrics': 'Metrics',
            'opt_out': 'OptOut',
            'request_id': 'RequestId',
            'user': 'User'
        }

        self._address = address
        self._attributes = attributes
        self._channel_type = channel_type
        self._demographic = demographic
        self._effective_date = effective_date
        self._endpoint_status = endpoint_status
        self._location = location
        self._metrics = metrics
        self._opt_out = opt_out
        self._request_id = request_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicEndpoint of this PublicEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PublicEndpoint.


        :return: The address of this PublicEndpoint.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PublicEndpoint.


        :param address: The address of this PublicEndpoint.
        :type address: str
        """

        self._address = address

    @property
    def attributes(self):
        """Gets the attributes of this PublicEndpoint.


        :return: The attributes of this PublicEndpoint.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this PublicEndpoint.


        :param attributes: The attributes of this PublicEndpoint.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def channel_type(self):
        """Gets the channel_type of this PublicEndpoint.


        :return: The channel_type of this PublicEndpoint.
        :rtype: ChannelType
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this PublicEndpoint.


        :param channel_type: The channel_type of this PublicEndpoint.
        :type channel_type: ChannelType
        """

        self._channel_type = channel_type

    @property
    def demographic(self):
        """Gets the demographic of this PublicEndpoint.


        :return: The demographic of this PublicEndpoint.
        :rtype: UpdateEndpointRequestEndpointRequestDemographic
        """
        return self._demographic

    @demographic.setter
    def demographic(self, demographic):
        """Sets the demographic of this PublicEndpoint.


        :param demographic: The demographic of this PublicEndpoint.
        :type demographic: UpdateEndpointRequestEndpointRequestDemographic
        """

        self._demographic = demographic

    @property
    def effective_date(self):
        """Gets the effective_date of this PublicEndpoint.


        :return: The effective_date of this PublicEndpoint.
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this PublicEndpoint.


        :param effective_date: The effective_date of this PublicEndpoint.
        :type effective_date: str
        """

        self._effective_date = effective_date

    @property
    def endpoint_status(self):
        """Gets the endpoint_status of this PublicEndpoint.


        :return: The endpoint_status of this PublicEndpoint.
        :rtype: str
        """
        return self._endpoint_status

    @endpoint_status.setter
    def endpoint_status(self, endpoint_status):
        """Sets the endpoint_status of this PublicEndpoint.


        :param endpoint_status: The endpoint_status of this PublicEndpoint.
        :type endpoint_status: str
        """

        self._endpoint_status = endpoint_status

    @property
    def location(self):
        """Gets the location of this PublicEndpoint.


        :return: The location of this PublicEndpoint.
        :rtype: UpdateEndpointRequestEndpointRequestLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PublicEndpoint.


        :param location: The location of this PublicEndpoint.
        :type location: UpdateEndpointRequestEndpointRequestLocation
        """

        self._location = location

    @property
    def metrics(self):
        """Gets the metrics of this PublicEndpoint.


        :return: The metrics of this PublicEndpoint.
        :rtype: Dict
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this PublicEndpoint.


        :param metrics: The metrics of this PublicEndpoint.
        :type metrics: Dict
        """

        self._metrics = metrics

    @property
    def opt_out(self):
        """Gets the opt_out of this PublicEndpoint.


        :return: The opt_out of this PublicEndpoint.
        :rtype: str
        """
        return self._opt_out

    @opt_out.setter
    def opt_out(self, opt_out):
        """Sets the opt_out of this PublicEndpoint.


        :param opt_out: The opt_out of this PublicEndpoint.
        :type opt_out: str
        """

        self._opt_out = opt_out

    @property
    def request_id(self):
        """Gets the request_id of this PublicEndpoint.


        :return: The request_id of this PublicEndpoint.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PublicEndpoint.


        :param request_id: The request_id of this PublicEndpoint.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def user(self):
        """Gets the user of this PublicEndpoint.


        :return: The user of this PublicEndpoint.
        :rtype: EndpointResponseUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PublicEndpoint.


        :param user: The user of this PublicEndpoint.
        :type user: EndpointResponseUser
        """

        self._user = user
