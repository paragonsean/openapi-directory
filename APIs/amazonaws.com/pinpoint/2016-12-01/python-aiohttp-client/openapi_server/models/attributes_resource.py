# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributesResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_id: str=None, attribute_type: str=None, attributes: List=None):
        """AttributesResource - a model defined in OpenAPI

        :param application_id: The application_id of this AttributesResource.
        :param attribute_type: The attribute_type of this AttributesResource.
        :param attributes: The attributes of this AttributesResource.
        """
        self.openapi_types = {
            'application_id': str,
            'attribute_type': str,
            'attributes': List
        }

        self.attribute_map = {
            'application_id': 'ApplicationId',
            'attribute_type': 'AttributeType',
            'attributes': 'Attributes'
        }

        self._application_id = application_id
        self._attribute_type = attribute_type
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributesResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributesResource of this AttributesResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_id(self):
        """Gets the application_id of this AttributesResource.


        :return: The application_id of this AttributesResource.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this AttributesResource.


        :param application_id: The application_id of this AttributesResource.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def attribute_type(self):
        """Gets the attribute_type of this AttributesResource.


        :return: The attribute_type of this AttributesResource.
        :rtype: str
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type):
        """Sets the attribute_type of this AttributesResource.


        :param attribute_type: The attribute_type of this AttributesResource.
        :type attribute_type: str
        """
        if attribute_type is None:
            raise ValueError("Invalid value for `attribute_type`, must not be `None`")

        self._attribute_type = attribute_type

    @property
    def attributes(self):
        """Gets the attributes of this AttributesResource.


        :return: The attributes of this AttributesResource.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AttributesResource.


        :param attributes: The attributes of this AttributesResource.
        :type attributes: List
        """

        self._attributes = attributes
