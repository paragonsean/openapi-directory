# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.send_messages_request_message_request_message_configuration import SendMessagesRequestMessageRequestMessageConfiguration
from openapi_server.models.send_messages_request_message_request_template_configuration import SendMessagesRequestMessageRequestTemplateConfiguration
from openapi_server import util


class MessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, addresses: Dict=None, context: Dict=None, endpoints: Dict=None, message_configuration: SendMessagesRequestMessageRequestMessageConfiguration=None, template_configuration: SendMessagesRequestMessageRequestTemplateConfiguration=None, trace_id: str=None):
        """MessageRequest - a model defined in OpenAPI

        :param addresses: The addresses of this MessageRequest.
        :param context: The context of this MessageRequest.
        :param endpoints: The endpoints of this MessageRequest.
        :param message_configuration: The message_configuration of this MessageRequest.
        :param template_configuration: The template_configuration of this MessageRequest.
        :param trace_id: The trace_id of this MessageRequest.
        """
        self.openapi_types = {
            'addresses': Dict,
            'context': Dict,
            'endpoints': Dict,
            'message_configuration': SendMessagesRequestMessageRequestMessageConfiguration,
            'template_configuration': SendMessagesRequestMessageRequestTemplateConfiguration,
            'trace_id': str
        }

        self.attribute_map = {
            'addresses': 'Addresses',
            'context': 'Context',
            'endpoints': 'Endpoints',
            'message_configuration': 'MessageConfiguration',
            'template_configuration': 'TemplateConfiguration',
            'trace_id': 'TraceId'
        }

        self._addresses = addresses
        self._context = context
        self._endpoints = endpoints
        self._message_configuration = message_configuration
        self._template_configuration = template_configuration
        self._trace_id = trace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageRequest of this MessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self):
        """Gets the addresses of this MessageRequest.


        :return: The addresses of this MessageRequest.
        :rtype: Dict
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this MessageRequest.


        :param addresses: The addresses of this MessageRequest.
        :type addresses: Dict
        """

        self._addresses = addresses

    @property
    def context(self):
        """Gets the context of this MessageRequest.


        :return: The context of this MessageRequest.
        :rtype: Dict
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MessageRequest.


        :param context: The context of this MessageRequest.
        :type context: Dict
        """

        self._context = context

    @property
    def endpoints(self):
        """Gets the endpoints of this MessageRequest.


        :return: The endpoints of this MessageRequest.
        :rtype: Dict
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this MessageRequest.


        :param endpoints: The endpoints of this MessageRequest.
        :type endpoints: Dict
        """

        self._endpoints = endpoints

    @property
    def message_configuration(self):
        """Gets the message_configuration of this MessageRequest.


        :return: The message_configuration of this MessageRequest.
        :rtype: SendMessagesRequestMessageRequestMessageConfiguration
        """
        return self._message_configuration

    @message_configuration.setter
    def message_configuration(self, message_configuration):
        """Sets the message_configuration of this MessageRequest.


        :param message_configuration: The message_configuration of this MessageRequest.
        :type message_configuration: SendMessagesRequestMessageRequestMessageConfiguration
        """
        if message_configuration is None:
            raise ValueError("Invalid value for `message_configuration`, must not be `None`")

        self._message_configuration = message_configuration

    @property
    def template_configuration(self):
        """Gets the template_configuration of this MessageRequest.


        :return: The template_configuration of this MessageRequest.
        :rtype: SendMessagesRequestMessageRequestTemplateConfiguration
        """
        return self._template_configuration

    @template_configuration.setter
    def template_configuration(self, template_configuration):
        """Sets the template_configuration of this MessageRequest.


        :param template_configuration: The template_configuration of this MessageRequest.
        :type template_configuration: SendMessagesRequestMessageRequestTemplateConfiguration
        """

        self._template_configuration = template_configuration

    @property
    def trace_id(self):
        """Gets the trace_id of this MessageRequest.


        :return: The trace_id of this MessageRequest.
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this MessageRequest.


        :param trace_id: The trace_id of this MessageRequest.
        :type trace_id: str
        """

        self._trace_id = trace_id
