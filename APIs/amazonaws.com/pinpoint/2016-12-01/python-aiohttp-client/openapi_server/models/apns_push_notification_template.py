# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server import util


class APNSPushNotificationTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: Action=None, body: str=None, media_url: str=None, raw_content: str=None, sound: str=None, title: str=None, url: str=None):
        """APNSPushNotificationTemplate - a model defined in OpenAPI

        :param action: The action of this APNSPushNotificationTemplate.
        :param body: The body of this APNSPushNotificationTemplate.
        :param media_url: The media_url of this APNSPushNotificationTemplate.
        :param raw_content: The raw_content of this APNSPushNotificationTemplate.
        :param sound: The sound of this APNSPushNotificationTemplate.
        :param title: The title of this APNSPushNotificationTemplate.
        :param url: The url of this APNSPushNotificationTemplate.
        """
        self.openapi_types = {
            'action': Action,
            'body': str,
            'media_url': str,
            'raw_content': str,
            'sound': str,
            'title': str,
            'url': str
        }

        self.attribute_map = {
            'action': 'Action',
            'body': 'Body',
            'media_url': 'MediaUrl',
            'raw_content': 'RawContent',
            'sound': 'Sound',
            'title': 'Title',
            'url': 'Url'
        }

        self._action = action
        self._body = body
        self._media_url = media_url
        self._raw_content = raw_content
        self._sound = sound
        self._title = title
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APNSPushNotificationTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APNSPushNotificationTemplate of this APNSPushNotificationTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this APNSPushNotificationTemplate.


        :return: The action of this APNSPushNotificationTemplate.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this APNSPushNotificationTemplate.


        :param action: The action of this APNSPushNotificationTemplate.
        :type action: Action
        """

        self._action = action

    @property
    def body(self):
        """Gets the body of this APNSPushNotificationTemplate.


        :return: The body of this APNSPushNotificationTemplate.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this APNSPushNotificationTemplate.


        :param body: The body of this APNSPushNotificationTemplate.
        :type body: str
        """

        self._body = body

    @property
    def media_url(self):
        """Gets the media_url of this APNSPushNotificationTemplate.


        :return: The media_url of this APNSPushNotificationTemplate.
        :rtype: str
        """
        return self._media_url

    @media_url.setter
    def media_url(self, media_url):
        """Sets the media_url of this APNSPushNotificationTemplate.


        :param media_url: The media_url of this APNSPushNotificationTemplate.
        :type media_url: str
        """

        self._media_url = media_url

    @property
    def raw_content(self):
        """Gets the raw_content of this APNSPushNotificationTemplate.


        :return: The raw_content of this APNSPushNotificationTemplate.
        :rtype: str
        """
        return self._raw_content

    @raw_content.setter
    def raw_content(self, raw_content):
        """Sets the raw_content of this APNSPushNotificationTemplate.


        :param raw_content: The raw_content of this APNSPushNotificationTemplate.
        :type raw_content: str
        """

        self._raw_content = raw_content

    @property
    def sound(self):
        """Gets the sound of this APNSPushNotificationTemplate.


        :return: The sound of this APNSPushNotificationTemplate.
        :rtype: str
        """
        return self._sound

    @sound.setter
    def sound(self, sound):
        """Sets the sound of this APNSPushNotificationTemplate.


        :param sound: The sound of this APNSPushNotificationTemplate.
        :type sound: str
        """

        self._sound = sound

    @property
    def title(self):
        """Gets the title of this APNSPushNotificationTemplate.


        :return: The title of this APNSPushNotificationTemplate.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this APNSPushNotificationTemplate.


        :param title: The title of this APNSPushNotificationTemplate.
        :type title: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this APNSPushNotificationTemplate.


        :return: The url of this APNSPushNotificationTemplate.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this APNSPushNotificationTemplate.


        :param url: The url of this APNSPushNotificationTemplate.
        :type url: str
        """

        self._url = url
