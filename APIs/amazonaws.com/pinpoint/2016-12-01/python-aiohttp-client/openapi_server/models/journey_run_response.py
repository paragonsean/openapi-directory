# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.journey_run_status import JourneyRunStatus
from openapi_server import util


class JourneyRunResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, last_update_time: str=None, run_id: str=None, status: JourneyRunStatus=None):
        """JourneyRunResponse - a model defined in OpenAPI

        :param creation_time: The creation_time of this JourneyRunResponse.
        :param last_update_time: The last_update_time of this JourneyRunResponse.
        :param run_id: The run_id of this JourneyRunResponse.
        :param status: The status of this JourneyRunResponse.
        """
        self.openapi_types = {
            'creation_time': str,
            'last_update_time': str,
            'run_id': str,
            'status': JourneyRunStatus
        }

        self.attribute_map = {
            'creation_time': 'CreationTime',
            'last_update_time': 'LastUpdateTime',
            'run_id': 'RunId',
            'status': 'Status'
        }

        self._creation_time = creation_time
        self._last_update_time = last_update_time
        self._run_id = run_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JourneyRunResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JourneyRunResponse of this JourneyRunResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this JourneyRunResponse.


        :return: The creation_time of this JourneyRunResponse.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this JourneyRunResponse.


        :param creation_time: The creation_time of this JourneyRunResponse.
        :type creation_time: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")

        self._creation_time = creation_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this JourneyRunResponse.


        :return: The last_update_time of this JourneyRunResponse.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this JourneyRunResponse.


        :param last_update_time: The last_update_time of this JourneyRunResponse.
        :type last_update_time: str
        """
        if last_update_time is None:
            raise ValueError("Invalid value for `last_update_time`, must not be `None`")

        self._last_update_time = last_update_time

    @property
    def run_id(self):
        """Gets the run_id of this JourneyRunResponse.


        :return: The run_id of this JourneyRunResponse.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this JourneyRunResponse.


        :param run_id: The run_id of this JourneyRunResponse.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")

        self._run_id = run_id

    @property
    def status(self):
        """Gets the status of this JourneyRunResponse.


        :return: The status of this JourneyRunResponse.
        :rtype: JourneyRunStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JourneyRunResponse.


        :param status: The status of this JourneyRunResponse.
        :type status: JourneyRunStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
