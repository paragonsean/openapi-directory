# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.button_action import ButtonAction
from openapi_server import util


class InAppMessageButtonDefaultConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_color: str=None, border_radius: int=None, button_action: ButtonAction=None, link: str=None, text: str=None, text_color: str=None):
        """InAppMessageButtonDefaultConfig - a model defined in OpenAPI

        :param background_color: The background_color of this InAppMessageButtonDefaultConfig.
        :param border_radius: The border_radius of this InAppMessageButtonDefaultConfig.
        :param button_action: The button_action of this InAppMessageButtonDefaultConfig.
        :param link: The link of this InAppMessageButtonDefaultConfig.
        :param text: The text of this InAppMessageButtonDefaultConfig.
        :param text_color: The text_color of this InAppMessageButtonDefaultConfig.
        """
        self.openapi_types = {
            'background_color': str,
            'border_radius': int,
            'button_action': ButtonAction,
            'link': str,
            'text': str,
            'text_color': str
        }

        self.attribute_map = {
            'background_color': 'BackgroundColor',
            'border_radius': 'BorderRadius',
            'button_action': 'ButtonAction',
            'link': 'Link',
            'text': 'Text',
            'text_color': 'TextColor'
        }

        self._background_color = background_color
        self._border_radius = border_radius
        self._button_action = button_action
        self._link = link
        self._text = text
        self._text_color = text_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InAppMessageButtonDefaultConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InAppMessageButton_DefaultConfig of this InAppMessageButtonDefaultConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_color(self):
        """Gets the background_color of this InAppMessageButtonDefaultConfig.


        :return: The background_color of this InAppMessageButtonDefaultConfig.
        :rtype: str
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this InAppMessageButtonDefaultConfig.


        :param background_color: The background_color of this InAppMessageButtonDefaultConfig.
        :type background_color: str
        """

        self._background_color = background_color

    @property
    def border_radius(self):
        """Gets the border_radius of this InAppMessageButtonDefaultConfig.


        :return: The border_radius of this InAppMessageButtonDefaultConfig.
        :rtype: int
        """
        return self._border_radius

    @border_radius.setter
    def border_radius(self, border_radius):
        """Sets the border_radius of this InAppMessageButtonDefaultConfig.


        :param border_radius: The border_radius of this InAppMessageButtonDefaultConfig.
        :type border_radius: int
        """

        self._border_radius = border_radius

    @property
    def button_action(self):
        """Gets the button_action of this InAppMessageButtonDefaultConfig.


        :return: The button_action of this InAppMessageButtonDefaultConfig.
        :rtype: ButtonAction
        """
        return self._button_action

    @button_action.setter
    def button_action(self, button_action):
        """Sets the button_action of this InAppMessageButtonDefaultConfig.


        :param button_action: The button_action of this InAppMessageButtonDefaultConfig.
        :type button_action: ButtonAction
        """
        if button_action is None:
            raise ValueError("Invalid value for `button_action`, must not be `None`")

        self._button_action = button_action

    @property
    def link(self):
        """Gets the link of this InAppMessageButtonDefaultConfig.


        :return: The link of this InAppMessageButtonDefaultConfig.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this InAppMessageButtonDefaultConfig.


        :param link: The link of this InAppMessageButtonDefaultConfig.
        :type link: str
        """

        self._link = link

    @property
    def text(self):
        """Gets the text of this InAppMessageButtonDefaultConfig.


        :return: The text of this InAppMessageButtonDefaultConfig.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InAppMessageButtonDefaultConfig.


        :param text: The text of this InAppMessageButtonDefaultConfig.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def text_color(self):
        """Gets the text_color of this InAppMessageButtonDefaultConfig.


        :return: The text_color of this InAppMessageButtonDefaultConfig.
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this InAppMessageButtonDefaultConfig.


        :param text_color: The text_color of this InAppMessageButtonDefaultConfig.
        :type text_color: str
        """

        self._text_color = text_color
