# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segments_response import SegmentsResponse
from openapi_server import util


class GetSegmentsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segments_response: SegmentsResponse=None):
        """GetSegmentsResponse - a model defined in OpenAPI

        :param segments_response: The segments_response of this GetSegmentsResponse.
        """
        self.openapi_types = {
            'segments_response': SegmentsResponse
        }

        self.attribute_map = {
            'segments_response': 'SegmentsResponse'
        }

        self._segments_response = segments_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSegmentsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSegmentsResponse of this GetSegmentsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segments_response(self):
        """Gets the segments_response of this GetSegmentsResponse.


        :return: The segments_response of this GetSegmentsResponse.
        :rtype: SegmentsResponse
        """
        return self._segments_response

    @segments_response.setter
    def segments_response(self, segments_response):
        """Sets the segments_response of this GetSegmentsResponse.


        :param segments_response: The segments_response of this GetSegmentsResponse.
        :type segments_response: SegmentsResponse
        """
        if segments_response is None:
            raise ValueError("Invalid value for `segments_response`, must not be `None`")

        self._segments_response = segments_response
