# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.simple_condition_event_condition import SimpleConditionEventCondition
from openapi_server.models.simple_condition_segment_condition import SimpleConditionSegmentCondition
from openapi_server.models.simple_condition_segment_dimensions import SimpleConditionSegmentDimensions
from openapi_server import util


class SimpleCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_condition: SimpleConditionEventCondition=None, segment_condition: SimpleConditionSegmentCondition=None, segment_dimensions: SimpleConditionSegmentDimensions=None):
        """SimpleCondition - a model defined in OpenAPI

        :param event_condition: The event_condition of this SimpleCondition.
        :param segment_condition: The segment_condition of this SimpleCondition.
        :param segment_dimensions: The segment_dimensions of this SimpleCondition.
        """
        self.openapi_types = {
            'event_condition': SimpleConditionEventCondition,
            'segment_condition': SimpleConditionSegmentCondition,
            'segment_dimensions': SimpleConditionSegmentDimensions
        }

        self.attribute_map = {
            'event_condition': 'EventCondition',
            'segment_condition': 'SegmentCondition',
            'segment_dimensions': 'SegmentDimensions'
        }

        self._event_condition = event_condition
        self._segment_condition = segment_condition
        self._segment_dimensions = segment_dimensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimpleCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimpleCondition of this SimpleCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_condition(self):
        """Gets the event_condition of this SimpleCondition.


        :return: The event_condition of this SimpleCondition.
        :rtype: SimpleConditionEventCondition
        """
        return self._event_condition

    @event_condition.setter
    def event_condition(self, event_condition):
        """Sets the event_condition of this SimpleCondition.


        :param event_condition: The event_condition of this SimpleCondition.
        :type event_condition: SimpleConditionEventCondition
        """

        self._event_condition = event_condition

    @property
    def segment_condition(self):
        """Gets the segment_condition of this SimpleCondition.


        :return: The segment_condition of this SimpleCondition.
        :rtype: SimpleConditionSegmentCondition
        """
        return self._segment_condition

    @segment_condition.setter
    def segment_condition(self, segment_condition):
        """Sets the segment_condition of this SimpleCondition.


        :param segment_condition: The segment_condition of this SimpleCondition.
        :type segment_condition: SimpleConditionSegmentCondition
        """

        self._segment_condition = segment_condition

    @property
    def segment_dimensions(self):
        """Gets the segment_dimensions of this SimpleCondition.


        :return: The segment_dimensions of this SimpleCondition.
        :rtype: SimpleConditionSegmentDimensions
        """
        return self._segment_dimensions

    @segment_dimensions.setter
    def segment_dimensions(self, segment_dimensions):
        """Sets the segment_dimensions of this SimpleCondition.


        :param segment_dimensions: The segment_dimensions of this SimpleCondition.
        :type segment_dimensions: SimpleConditionSegmentDimensions
        """

        self._segment_dimensions = segment_dimensions
