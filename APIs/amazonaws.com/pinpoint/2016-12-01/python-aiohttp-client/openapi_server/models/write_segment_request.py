# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_segment_request_write_segment_request_dimensions import CreateSegmentRequestWriteSegmentRequestDimensions
from openapi_server.models.create_segment_request_write_segment_request_segment_groups import CreateSegmentRequestWriteSegmentRequestSegmentGroups
from openapi_server import util


class WriteSegmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: CreateSegmentRequestWriteSegmentRequestDimensions=None, name: str=None, segment_groups: CreateSegmentRequestWriteSegmentRequestSegmentGroups=None, tags: Dict=None):
        """WriteSegmentRequest - a model defined in OpenAPI

        :param dimensions: The dimensions of this WriteSegmentRequest.
        :param name: The name of this WriteSegmentRequest.
        :param segment_groups: The segment_groups of this WriteSegmentRequest.
        :param tags: The tags of this WriteSegmentRequest.
        """
        self.openapi_types = {
            'dimensions': CreateSegmentRequestWriteSegmentRequestDimensions,
            'name': str,
            'segment_groups': CreateSegmentRequestWriteSegmentRequestSegmentGroups,
            'tags': Dict
        }

        self.attribute_map = {
            'dimensions': 'Dimensions',
            'name': 'Name',
            'segment_groups': 'SegmentGroups',
            'tags': 'tags'
        }

        self._dimensions = dimensions
        self._name = name
        self._segment_groups = segment_groups
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WriteSegmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WriteSegmentRequest of this WriteSegmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this WriteSegmentRequest.


        :return: The dimensions of this WriteSegmentRequest.
        :rtype: CreateSegmentRequestWriteSegmentRequestDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this WriteSegmentRequest.


        :param dimensions: The dimensions of this WriteSegmentRequest.
        :type dimensions: CreateSegmentRequestWriteSegmentRequestDimensions
        """

        self._dimensions = dimensions

    @property
    def name(self):
        """Gets the name of this WriteSegmentRequest.


        :return: The name of this WriteSegmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WriteSegmentRequest.


        :param name: The name of this WriteSegmentRequest.
        :type name: str
        """

        self._name = name

    @property
    def segment_groups(self):
        """Gets the segment_groups of this WriteSegmentRequest.


        :return: The segment_groups of this WriteSegmentRequest.
        :rtype: CreateSegmentRequestWriteSegmentRequestSegmentGroups
        """
        return self._segment_groups

    @segment_groups.setter
    def segment_groups(self, segment_groups):
        """Sets the segment_groups of this WriteSegmentRequest.


        :param segment_groups: The segment_groups of this WriteSegmentRequest.
        :type segment_groups: CreateSegmentRequestWriteSegmentRequestSegmentGroups
        """

        self._segment_groups = segment_groups

    @property
    def tags(self):
        """Gets the tags of this WriteSegmentRequest.


        :return: The tags of this WriteSegmentRequest.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WriteSegmentRequest.


        :param tags: The tags of this WriteSegmentRequest.
        :type tags: Dict
        """

        self._tags = tags
