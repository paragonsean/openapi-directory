# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_demographics_app_version import SegmentDemographicsAppVersion
from openapi_server.models.segment_demographics_channel import SegmentDemographicsChannel
from openapi_server.models.segment_demographics_device_type import SegmentDemographicsDeviceType
from openapi_server.models.segment_demographics_make import SegmentDemographicsMake
from openapi_server.models.segment_demographics_model import SegmentDemographicsModel
from openapi_server.models.segment_demographics_platform import SegmentDemographicsPlatform
from openapi_server import util


class SegmentDemographics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_version: SegmentDemographicsAppVersion=None, channel: SegmentDemographicsChannel=None, device_type: SegmentDemographicsDeviceType=None, make: SegmentDemographicsMake=None, model: SegmentDemographicsModel=None, platform: SegmentDemographicsPlatform=None):
        """SegmentDemographics - a model defined in OpenAPI

        :param app_version: The app_version of this SegmentDemographics.
        :param channel: The channel of this SegmentDemographics.
        :param device_type: The device_type of this SegmentDemographics.
        :param make: The make of this SegmentDemographics.
        :param model: The model of this SegmentDemographics.
        :param platform: The platform of this SegmentDemographics.
        """
        self.openapi_types = {
            'app_version': SegmentDemographicsAppVersion,
            'channel': SegmentDemographicsChannel,
            'device_type': SegmentDemographicsDeviceType,
            'make': SegmentDemographicsMake,
            'model': SegmentDemographicsModel,
            'platform': SegmentDemographicsPlatform
        }

        self.attribute_map = {
            'app_version': 'AppVersion',
            'channel': 'Channel',
            'device_type': 'DeviceType',
            'make': 'Make',
            'model': 'Model',
            'platform': 'Platform'
        }

        self._app_version = app_version
        self._channel = channel
        self._device_type = device_type
        self._make = make
        self._model = model
        self._platform = platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentDemographics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentDemographics of this SegmentDemographics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_version(self):
        """Gets the app_version of this SegmentDemographics.


        :return: The app_version of this SegmentDemographics.
        :rtype: SegmentDemographicsAppVersion
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this SegmentDemographics.


        :param app_version: The app_version of this SegmentDemographics.
        :type app_version: SegmentDemographicsAppVersion
        """

        self._app_version = app_version

    @property
    def channel(self):
        """Gets the channel of this SegmentDemographics.


        :return: The channel of this SegmentDemographics.
        :rtype: SegmentDemographicsChannel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this SegmentDemographics.


        :param channel: The channel of this SegmentDemographics.
        :type channel: SegmentDemographicsChannel
        """

        self._channel = channel

    @property
    def device_type(self):
        """Gets the device_type of this SegmentDemographics.


        :return: The device_type of this SegmentDemographics.
        :rtype: SegmentDemographicsDeviceType
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this SegmentDemographics.


        :param device_type: The device_type of this SegmentDemographics.
        :type device_type: SegmentDemographicsDeviceType
        """

        self._device_type = device_type

    @property
    def make(self):
        """Gets the make of this SegmentDemographics.


        :return: The make of this SegmentDemographics.
        :rtype: SegmentDemographicsMake
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this SegmentDemographics.


        :param make: The make of this SegmentDemographics.
        :type make: SegmentDemographicsMake
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this SegmentDemographics.


        :return: The model of this SegmentDemographics.
        :rtype: SegmentDemographicsModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SegmentDemographics.


        :param model: The model of this SegmentDemographics.
        :type model: SegmentDemographicsModel
        """

        self._model = model

    @property
    def platform(self):
        """Gets the platform of this SegmentDemographics.


        :return: The platform of this SegmentDemographics.
        :rtype: SegmentDemographicsPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this SegmentDemographics.


        :param platform: The platform of this SegmentDemographics.
        :type platform: SegmentDemographicsPlatform
        """

        self._platform = platform
