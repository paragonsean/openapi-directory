# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alignment import Alignment
from openapi_server import util


class InAppMessageHeaderConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: Alignment=None, header: str=None, text_color: str=None):
        """InAppMessageHeaderConfig - a model defined in OpenAPI

        :param alignment: The alignment of this InAppMessageHeaderConfig.
        :param header: The header of this InAppMessageHeaderConfig.
        :param text_color: The text_color of this InAppMessageHeaderConfig.
        """
        self.openapi_types = {
            'alignment': Alignment,
            'header': str,
            'text_color': str
        }

        self.attribute_map = {
            'alignment': 'Alignment',
            'header': 'Header',
            'text_color': 'TextColor'
        }

        self._alignment = alignment
        self._header = header
        self._text_color = text_color

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InAppMessageHeaderConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InAppMessageHeaderConfig of this InAppMessageHeaderConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this InAppMessageHeaderConfig.


        :return: The alignment of this InAppMessageHeaderConfig.
        :rtype: Alignment
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this InAppMessageHeaderConfig.


        :param alignment: The alignment of this InAppMessageHeaderConfig.
        :type alignment: Alignment
        """
        if alignment is None:
            raise ValueError("Invalid value for `alignment`, must not be `None`")

        self._alignment = alignment

    @property
    def header(self):
        """Gets the header of this InAppMessageHeaderConfig.


        :return: The header of this InAppMessageHeaderConfig.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this InAppMessageHeaderConfig.


        :param header: The header of this InAppMessageHeaderConfig.
        :type header: str
        """
        if header is None:
            raise ValueError("Invalid value for `header`, must not be `None`")

        self._header = header

    @property
    def text_color(self):
        """Gets the text_color of this InAppMessageHeaderConfig.


        :return: The text_color of this InAppMessageHeaderConfig.
        :rtype: str
        """
        return self._text_color

    @text_color.setter
    def text_color(self, text_color):
        """Sets the text_color of this InAppMessageHeaderConfig.


        :param text_color: The text_color of this InAppMessageHeaderConfig.
        :type text_color: str
        """
        if text_color is None:
            raise ValueError("Invalid value for `text_color`, must not be `None`")

        self._text_color = text_color
