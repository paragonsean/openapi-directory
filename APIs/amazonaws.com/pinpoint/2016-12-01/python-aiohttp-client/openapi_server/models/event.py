# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_session import EventSession
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_package_name: str=None, app_title: str=None, app_version_code: str=None, attributes: Dict=None, client_sdk_version: str=None, event_type: str=None, metrics: Dict=None, sdk_name: str=None, session: EventSession=None, timestamp: str=None):
        """Event - a model defined in OpenAPI

        :param app_package_name: The app_package_name of this Event.
        :param app_title: The app_title of this Event.
        :param app_version_code: The app_version_code of this Event.
        :param attributes: The attributes of this Event.
        :param client_sdk_version: The client_sdk_version of this Event.
        :param event_type: The event_type of this Event.
        :param metrics: The metrics of this Event.
        :param sdk_name: The sdk_name of this Event.
        :param session: The session of this Event.
        :param timestamp: The timestamp of this Event.
        """
        self.openapi_types = {
            'app_package_name': str,
            'app_title': str,
            'app_version_code': str,
            'attributes': Dict,
            'client_sdk_version': str,
            'event_type': str,
            'metrics': Dict,
            'sdk_name': str,
            'session': EventSession,
            'timestamp': str
        }

        self.attribute_map = {
            'app_package_name': 'AppPackageName',
            'app_title': 'AppTitle',
            'app_version_code': 'AppVersionCode',
            'attributes': 'Attributes',
            'client_sdk_version': 'ClientSdkVersion',
            'event_type': 'EventType',
            'metrics': 'Metrics',
            'sdk_name': 'SdkName',
            'session': 'Session',
            'timestamp': 'Timestamp'
        }

        self._app_package_name = app_package_name
        self._app_title = app_title
        self._app_version_code = app_version_code
        self._attributes = attributes
        self._client_sdk_version = client_sdk_version
        self._event_type = event_type
        self._metrics = metrics
        self._sdk_name = sdk_name
        self._session = session
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_package_name(self):
        """Gets the app_package_name of this Event.


        :return: The app_package_name of this Event.
        :rtype: str
        """
        return self._app_package_name

    @app_package_name.setter
    def app_package_name(self, app_package_name):
        """Sets the app_package_name of this Event.


        :param app_package_name: The app_package_name of this Event.
        :type app_package_name: str
        """

        self._app_package_name = app_package_name

    @property
    def app_title(self):
        """Gets the app_title of this Event.


        :return: The app_title of this Event.
        :rtype: str
        """
        return self._app_title

    @app_title.setter
    def app_title(self, app_title):
        """Sets the app_title of this Event.


        :param app_title: The app_title of this Event.
        :type app_title: str
        """

        self._app_title = app_title

    @property
    def app_version_code(self):
        """Gets the app_version_code of this Event.


        :return: The app_version_code of this Event.
        :rtype: str
        """
        return self._app_version_code

    @app_version_code.setter
    def app_version_code(self, app_version_code):
        """Sets the app_version_code of this Event.


        :param app_version_code: The app_version_code of this Event.
        :type app_version_code: str
        """

        self._app_version_code = app_version_code

    @property
    def attributes(self):
        """Gets the attributes of this Event.


        :return: The attributes of this Event.
        :rtype: Dict
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this Event.


        :param attributes: The attributes of this Event.
        :type attributes: Dict
        """

        self._attributes = attributes

    @property
    def client_sdk_version(self):
        """Gets the client_sdk_version of this Event.


        :return: The client_sdk_version of this Event.
        :rtype: str
        """
        return self._client_sdk_version

    @client_sdk_version.setter
    def client_sdk_version(self, client_sdk_version):
        """Sets the client_sdk_version of this Event.


        :param client_sdk_version: The client_sdk_version of this Event.
        :type client_sdk_version: str
        """

        self._client_sdk_version = client_sdk_version

    @property
    def event_type(self):
        """Gets the event_type of this Event.


        :return: The event_type of this Event.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.


        :param event_type: The event_type of this Event.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def metrics(self):
        """Gets the metrics of this Event.


        :return: The metrics of this Event.
        :rtype: Dict
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this Event.


        :param metrics: The metrics of this Event.
        :type metrics: Dict
        """

        self._metrics = metrics

    @property
    def sdk_name(self):
        """Gets the sdk_name of this Event.


        :return: The sdk_name of this Event.
        :rtype: str
        """
        return self._sdk_name

    @sdk_name.setter
    def sdk_name(self, sdk_name):
        """Sets the sdk_name of this Event.


        :param sdk_name: The sdk_name of this Event.
        :type sdk_name: str
        """

        self._sdk_name = sdk_name

    @property
    def session(self):
        """Gets the session of this Event.


        :return: The session of this Event.
        :rtype: EventSession
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this Event.


        :param session: The session of this Event.
        :type session: EventSession
        """

        self._session = session

    @property
    def timestamp(self):
        """Gets the timestamp of this Event.


        :return: The timestamp of this Event.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Event.


        :param timestamp: The timestamp of this Event.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
