# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_filter import EventFilter
from openapi_server import util


class EventStartCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_filter: EventFilter=None, segment_id: str=None):
        """EventStartCondition - a model defined in OpenAPI

        :param event_filter: The event_filter of this EventStartCondition.
        :param segment_id: The segment_id of this EventStartCondition.
        """
        self.openapi_types = {
            'event_filter': EventFilter,
            'segment_id': str
        }

        self.attribute_map = {
            'event_filter': 'EventFilter',
            'segment_id': 'SegmentId'
        }

        self._event_filter = event_filter
        self._segment_id = segment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventStartCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventStartCondition of this EventStartCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_filter(self):
        """Gets the event_filter of this EventStartCondition.


        :return: The event_filter of this EventStartCondition.
        :rtype: EventFilter
        """
        return self._event_filter

    @event_filter.setter
    def event_filter(self, event_filter):
        """Sets the event_filter of this EventStartCondition.


        :param event_filter: The event_filter of this EventStartCondition.
        :type event_filter: EventFilter
        """

        self._event_filter = event_filter

    @property
    def segment_id(self):
        """Gets the segment_id of this EventStartCondition.


        :return: The segment_id of this EventStartCondition.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this EventStartCondition.


        :param segment_id: The segment_id of this EventStartCondition.
        :type segment_id: str
        """

        self._segment_id = segment_id
