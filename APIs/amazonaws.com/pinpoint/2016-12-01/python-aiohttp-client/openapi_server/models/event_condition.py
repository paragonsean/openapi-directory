# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_condition_dimensions import EventConditionDimensions
from openapi_server import util


class EventCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimensions: EventConditionDimensions=None, message_activity: str=None):
        """EventCondition - a model defined in OpenAPI

        :param dimensions: The dimensions of this EventCondition.
        :param message_activity: The message_activity of this EventCondition.
        """
        self.openapi_types = {
            'dimensions': EventConditionDimensions,
            'message_activity': str
        }

        self.attribute_map = {
            'dimensions': 'Dimensions',
            'message_activity': 'MessageActivity'
        }

        self._dimensions = dimensions
        self._message_activity = message_activity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventCondition of this EventCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimensions(self):
        """Gets the dimensions of this EventCondition.


        :return: The dimensions of this EventCondition.
        :rtype: EventConditionDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this EventCondition.


        :param dimensions: The dimensions of this EventCondition.
        :type dimensions: EventConditionDimensions
        """

        self._dimensions = dimensions

    @property
    def message_activity(self):
        """Gets the message_activity of this EventCondition.


        :return: The message_activity of this EventCondition.
        :rtype: str
        """
        return self._message_activity

    @message_activity.setter
    def message_activity(self, message_activity):
        """Sets the message_activity of this EventCondition.


        :param message_activity: The message_activity of this EventCondition.
        :type message_activity: str
        """

        self._message_activity = message_activity
