# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, daily: int=None, maximum_duration: int=None, messages_per_second: int=None, total: int=None, session: int=None):
        """UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits - a model defined in OpenAPI

        :param daily: The daily of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :param maximum_duration: The maximum_duration of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :param messages_per_second: The messages_per_second of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :param total: The total of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :param session: The session of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        """
        self.openapi_types = {
            'daily': int,
            'maximum_duration': int,
            'messages_per_second': int,
            'total': int,
            'session': int
        }

        self.attribute_map = {
            'daily': 'Daily',
            'maximum_duration': 'MaximumDuration',
            'messages_per_second': 'MessagesPerSecond',
            'total': 'Total',
            'session': 'Session'
        }

        self._daily = daily
        self._maximum_duration = maximum_duration
        self._messages_per_second = messages_per_second
        self._total = total
        self._session = session

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateApplicationSettings_request_WriteApplicationSettingsRequest_Limits of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def daily(self):
        """Gets the daily of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :return: The daily of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :rtype: int
        """
        return self._daily

    @daily.setter
    def daily(self, daily):
        """Sets the daily of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :param daily: The daily of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :type daily: int
        """

        self._daily = daily

    @property
    def maximum_duration(self):
        """Gets the maximum_duration of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :return: The maximum_duration of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :rtype: int
        """
        return self._maximum_duration

    @maximum_duration.setter
    def maximum_duration(self, maximum_duration):
        """Sets the maximum_duration of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :param maximum_duration: The maximum_duration of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :type maximum_duration: int
        """

        self._maximum_duration = maximum_duration

    @property
    def messages_per_second(self):
        """Gets the messages_per_second of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :return: The messages_per_second of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :rtype: int
        """
        return self._messages_per_second

    @messages_per_second.setter
    def messages_per_second(self, messages_per_second):
        """Sets the messages_per_second of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :param messages_per_second: The messages_per_second of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :type messages_per_second: int
        """

        self._messages_per_second = messages_per_second

    @property
    def total(self):
        """Gets the total of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :return: The total of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :param total: The total of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :type total: int
        """

        self._total = total

    @property
    def session(self):
        """Gets the session of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :return: The session of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :rtype: int
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.


        :param session: The session of this UpdateApplicationSettingsRequestWriteApplicationSettingsRequestLimits.
        :type session: int
        """

        self._session = session
