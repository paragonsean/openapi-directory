# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_response import MessageResponse
from openapi_server import util


class SendMessagesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_response: MessageResponse=None):
        """SendMessagesResponse - a model defined in OpenAPI

        :param message_response: The message_response of this SendMessagesResponse.
        """
        self.openapi_types = {
            'message_response': MessageResponse
        }

        self.attribute_map = {
            'message_response': 'MessageResponse'
        }

        self._message_response = message_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessagesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessagesResponse of this SendMessagesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_response(self):
        """Gets the message_response of this SendMessagesResponse.


        :return: The message_response of this SendMessagesResponse.
        :rtype: MessageResponse
        """
        return self._message_response

    @message_response.setter
    def message_response(self, message_response):
        """Sets the message_response of this SendMessagesResponse.


        :param message_response: The message_response of this SendMessagesResponse.
        :type message_response: MessageResponse
        """
        if message_response is None:
            raise ValueError("Invalid value for `message_response`, must not be `None`")

        self._message_response = message_response
