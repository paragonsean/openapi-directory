/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionalSplitActivity from './ConditionalSplitActivity';
import ConditionalSplitActivityCondition from './ConditionalSplitActivityCondition';
import ConditionalSplitActivityEvaluationWaitTime from './ConditionalSplitActivityEvaluationWaitTime';

/**
 * The ActivityConditionalSplit model module.
 * @module model/ActivityConditionalSplit
 * @version 2016-12-01
 */
class ActivityConditionalSplit {
    /**
     * Constructs a new <code>ActivityConditionalSplit</code>.
     * @alias module:model/ActivityConditionalSplit
     * @implements module:model/ConditionalSplitActivity
     */
    constructor() { 
        ConditionalSplitActivity.initialize(this);
        ActivityConditionalSplit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActivityConditionalSplit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityConditionalSplit} obj Optional instance to populate.
     * @return {module:model/ActivityConditionalSplit} The populated <code>ActivityConditionalSplit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActivityConditionalSplit();
            ConditionalSplitActivity.constructFromObject(data, obj);

            if (data.hasOwnProperty('Condition')) {
                obj['Condition'] = ConditionalSplitActivityCondition.constructFromObject(data['Condition']);
            }
            if (data.hasOwnProperty('EvaluationWaitTime')) {
                obj['EvaluationWaitTime'] = ConditionalSplitActivityEvaluationWaitTime.constructFromObject(data['EvaluationWaitTime']);
            }
            if (data.hasOwnProperty('FalseActivity')) {
                obj['FalseActivity'] = ApiClient.convertToType(data['FalseActivity'], 'String');
            }
            if (data.hasOwnProperty('TrueActivity')) {
                obj['TrueActivity'] = ApiClient.convertToType(data['TrueActivity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActivityConditionalSplit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActivityConditionalSplit</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Condition`
        if (data['Condition']) { // data not null
          ConditionalSplitActivityCondition.validateJSON(data['Condition']);
        }
        // validate the optional field `EvaluationWaitTime`
        if (data['EvaluationWaitTime']) { // data not null
          ConditionalSplitActivityEvaluationWaitTime.validateJSON(data['EvaluationWaitTime']);
        }
        // validate the optional field `FalseActivity`
        if (data['FalseActivity']) { // data not null
          String.validateJSON(data['FalseActivity']);
        }
        // validate the optional field `TrueActivity`
        if (data['TrueActivity']) { // data not null
          String.validateJSON(data['TrueActivity']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConditionalSplitActivityCondition} Condition
 */
ActivityConditionalSplit.prototype['Condition'] = undefined;

/**
 * @member {module:model/ConditionalSplitActivityEvaluationWaitTime} EvaluationWaitTime
 */
ActivityConditionalSplit.prototype['EvaluationWaitTime'] = undefined;

/**
 * @member {String} FalseActivity
 */
ActivityConditionalSplit.prototype['FalseActivity'] = undefined;

/**
 * @member {String} TrueActivity
 */
ActivityConditionalSplit.prototype['TrueActivity'] = undefined;


// Implement ConditionalSplitActivity interface:
/**
 * @member {module:model/ConditionalSplitActivityCondition} Condition
 */
ConditionalSplitActivity.prototype['Condition'] = undefined;
/**
 * @member {module:model/ConditionalSplitActivityEvaluationWaitTime} EvaluationWaitTime
 */
ConditionalSplitActivity.prototype['EvaluationWaitTime'] = undefined;
/**
 * @member {String} FalseActivity
 */
ConditionalSplitActivity.prototype['FalseActivity'] = undefined;
/**
 * @member {String} TrueActivity
 */
ConditionalSplitActivity.prototype['TrueActivity'] = undefined;




export default ActivityConditionalSplit;

