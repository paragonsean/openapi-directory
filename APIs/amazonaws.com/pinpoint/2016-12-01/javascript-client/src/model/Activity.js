/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityCUSTOM from './ActivityCUSTOM';
import ActivityConditionalSplit from './ActivityConditionalSplit';
import ActivityContactCenter from './ActivityContactCenter';
import ActivityEMAIL from './ActivityEMAIL';
import ActivityHoldout from './ActivityHoldout';
import ActivityMultiCondition from './ActivityMultiCondition';
import ActivityPUSH from './ActivityPUSH';
import ActivityRandomSplit from './ActivityRandomSplit';
import ActivitySMS from './ActivitySMS';
import ActivityWait from './ActivityWait';

/**
 * The Activity model module.
 * @module model/Activity
 * @version 2016-12-01
 */
class Activity {
    /**
     * Constructs a new <code>Activity</code>.
     * Specifies the configuration and other settings for an activity in a journey.
     * @alias module:model/Activity
     */
    constructor() { 
        
        Activity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Activity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Activity} obj Optional instance to populate.
     * @return {module:model/Activity} The populated <code>Activity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Activity();

            if (data.hasOwnProperty('CUSTOM')) {
                obj['CUSTOM'] = ActivityCUSTOM.constructFromObject(data['CUSTOM']);
            }
            if (data.hasOwnProperty('ConditionalSplit')) {
                obj['ConditionalSplit'] = ActivityConditionalSplit.constructFromObject(data['ConditionalSplit']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('EMAIL')) {
                obj['EMAIL'] = ActivityEMAIL.constructFromObject(data['EMAIL']);
            }
            if (data.hasOwnProperty('Holdout')) {
                obj['Holdout'] = ActivityHoldout.constructFromObject(data['Holdout']);
            }
            if (data.hasOwnProperty('MultiCondition')) {
                obj['MultiCondition'] = ActivityMultiCondition.constructFromObject(data['MultiCondition']);
            }
            if (data.hasOwnProperty('PUSH')) {
                obj['PUSH'] = ActivityPUSH.constructFromObject(data['PUSH']);
            }
            if (data.hasOwnProperty('RandomSplit')) {
                obj['RandomSplit'] = ActivityRandomSplit.constructFromObject(data['RandomSplit']);
            }
            if (data.hasOwnProperty('SMS')) {
                obj['SMS'] = ActivitySMS.constructFromObject(data['SMS']);
            }
            if (data.hasOwnProperty('Wait')) {
                obj['Wait'] = ActivityWait.constructFromObject(data['Wait']);
            }
            if (data.hasOwnProperty('ContactCenter')) {
                obj['ContactCenter'] = ActivityContactCenter.constructFromObject(data['ContactCenter']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Activity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Activity</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CUSTOM`
        if (data['CUSTOM']) { // data not null
          ActivityCUSTOM.validateJSON(data['CUSTOM']);
        }
        // validate the optional field `ConditionalSplit`
        if (data['ConditionalSplit']) { // data not null
          ActivityConditionalSplit.validateJSON(data['ConditionalSplit']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `EMAIL`
        if (data['EMAIL']) { // data not null
          ActivityEMAIL.validateJSON(data['EMAIL']);
        }
        // validate the optional field `Holdout`
        if (data['Holdout']) { // data not null
          ActivityHoldout.validateJSON(data['Holdout']);
        }
        // validate the optional field `MultiCondition`
        if (data['MultiCondition']) { // data not null
          ActivityMultiCondition.validateJSON(data['MultiCondition']);
        }
        // validate the optional field `PUSH`
        if (data['PUSH']) { // data not null
          ActivityPUSH.validateJSON(data['PUSH']);
        }
        // validate the optional field `RandomSplit`
        if (data['RandomSplit']) { // data not null
          ActivityRandomSplit.validateJSON(data['RandomSplit']);
        }
        // validate the optional field `SMS`
        if (data['SMS']) { // data not null
          ActivitySMS.validateJSON(data['SMS']);
        }
        // validate the optional field `Wait`
        if (data['Wait']) { // data not null
          ActivityWait.validateJSON(data['Wait']);
        }
        // validate the optional field `ContactCenter`
        if (data['ContactCenter']) { // data not null
          ActivityContactCenter.validateJSON(data['ContactCenter']);
        }

        return true;
    }


}



/**
 * @member {module:model/ActivityCUSTOM} CUSTOM
 */
Activity.prototype['CUSTOM'] = undefined;

/**
 * @member {module:model/ActivityConditionalSplit} ConditionalSplit
 */
Activity.prototype['ConditionalSplit'] = undefined;

/**
 * @member {String} Description
 */
Activity.prototype['Description'] = undefined;

/**
 * @member {module:model/ActivityEMAIL} EMAIL
 */
Activity.prototype['EMAIL'] = undefined;

/**
 * @member {module:model/ActivityHoldout} Holdout
 */
Activity.prototype['Holdout'] = undefined;

/**
 * @member {module:model/ActivityMultiCondition} MultiCondition
 */
Activity.prototype['MultiCondition'] = undefined;

/**
 * @member {module:model/ActivityPUSH} PUSH
 */
Activity.prototype['PUSH'] = undefined;

/**
 * @member {module:model/ActivityRandomSplit} RandomSplit
 */
Activity.prototype['RandomSplit'] = undefined;

/**
 * @member {module:model/ActivitySMS} SMS
 */
Activity.prototype['SMS'] = undefined;

/**
 * @member {module:model/ActivityWait} Wait
 */
Activity.prototype['Wait'] = undefined;

/**
 * @member {module:model/ActivityContactCenter} ContactCenter
 */
Activity.prototype['ContactCenter'] = undefined;






export default Activity;

