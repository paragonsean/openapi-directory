/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Session from './Session';

/**
 * The EventSession model module.
 * @module model/EventSession
 * @version 2016-12-01
 */
class EventSession {
    /**
     * Constructs a new <code>EventSession</code>.
     * @alias module:model/EventSession
     * @implements module:model/Session
     * @param id {String} 
     * @param startTimestamp {String} 
     */
    constructor(id, startTimestamp) { 
        Session.initialize(this, id, startTimestamp);
        EventSession.initialize(this, id, startTimestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, startTimestamp) { 
        obj['Id'] = id;
        obj['StartTimestamp'] = startTimestamp;
    }

    /**
     * Constructs a <code>EventSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSession} obj Optional instance to populate.
     * @return {module:model/EventSession} The populated <code>EventSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSession();
            Session.constructFromObject(data, obj);

            if (data.hasOwnProperty('Duration')) {
                obj['Duration'] = ApiClient.convertToType(data['Duration'], 'Number');
            }
            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('StartTimestamp')) {
                obj['StartTimestamp'] = ApiClient.convertToType(data['StartTimestamp'], 'String');
            }
            if (data.hasOwnProperty('StopTimestamp')) {
                obj['StopTimestamp'] = ApiClient.convertToType(data['StopTimestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSession</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventSession.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Duration`
        if (data['Duration']) { // data not null
          Number.validateJSON(data['Duration']);
        }
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `StartTimestamp`
        if (data['StartTimestamp']) { // data not null
          String.validateJSON(data['StartTimestamp']);
        }
        // validate the optional field `StopTimestamp`
        if (data['StopTimestamp']) { // data not null
          String.validateJSON(data['StopTimestamp']);
        }

        return true;
    }


}

EventSession.RequiredProperties = ["Id", "StartTimestamp"];

/**
 * @member {Number} Duration
 */
EventSession.prototype['Duration'] = undefined;

/**
 * @member {String} Id
 */
EventSession.prototype['Id'] = undefined;

/**
 * @member {String} StartTimestamp
 */
EventSession.prototype['StartTimestamp'] = undefined;

/**
 * @member {String} StopTimestamp
 */
EventSession.prototype['StopTimestamp'] = undefined;


// Implement Session interface:
/**
 * @member {Number} Duration
 */
Session.prototype['Duration'] = undefined;
/**
 * @member {String} Id
 */
Session.prototype['Id'] = undefined;
/**
 * @member {String} StartTimestamp
 */
Session.prototype['StartTimestamp'] = undefined;
/**
 * @member {String} StopTimestamp
 */
Session.prototype['StopTimestamp'] = undefined;




export default EventSession;

