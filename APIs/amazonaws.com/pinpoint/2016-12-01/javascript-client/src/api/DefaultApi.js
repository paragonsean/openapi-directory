/**
 * Amazon Pinpoint
 * Doc Engage API - Amazon Pinpoint API
 *
 * The version of the OpenAPI document: 2016-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAppRequest from '../model/CreateAppRequest';
import CreateAppResponse from '../model/CreateAppResponse';
import CreateCampaignRequest from '../model/CreateCampaignRequest';
import CreateCampaignResponse from '../model/CreateCampaignResponse';
import CreateEmailTemplateResponse from '../model/CreateEmailTemplateResponse';
import CreateExportJobRequest from '../model/CreateExportJobRequest';
import CreateExportJobResponse from '../model/CreateExportJobResponse';
import CreateImportJobRequest from '../model/CreateImportJobRequest';
import CreateImportJobResponse from '../model/CreateImportJobResponse';
import CreateInAppTemplateResponse from '../model/CreateInAppTemplateResponse';
import CreateJourneyRequest from '../model/CreateJourneyRequest';
import CreateJourneyResponse from '../model/CreateJourneyResponse';
import CreatePushTemplateResponse from '../model/CreatePushTemplateResponse';
import CreateRecommenderConfigurationRequest from '../model/CreateRecommenderConfigurationRequest';
import CreateRecommenderConfigurationResponse from '../model/CreateRecommenderConfigurationResponse';
import CreateSegmentRequest from '../model/CreateSegmentRequest';
import CreateSegmentResponse from '../model/CreateSegmentResponse';
import CreateSmsTemplateResponse from '../model/CreateSmsTemplateResponse';
import CreateVoiceTemplateResponse from '../model/CreateVoiceTemplateResponse';
import DeleteAdmChannelResponse from '../model/DeleteAdmChannelResponse';
import DeleteApnsChannelResponse from '../model/DeleteApnsChannelResponse';
import DeleteApnsSandboxChannelResponse from '../model/DeleteApnsSandboxChannelResponse';
import DeleteApnsVoipChannelResponse from '../model/DeleteApnsVoipChannelResponse';
import DeleteApnsVoipSandboxChannelResponse from '../model/DeleteApnsVoipSandboxChannelResponse';
import DeleteAppResponse from '../model/DeleteAppResponse';
import DeleteBaiduChannelResponse from '../model/DeleteBaiduChannelResponse';
import DeleteCampaignResponse from '../model/DeleteCampaignResponse';
import DeleteEmailChannelResponse from '../model/DeleteEmailChannelResponse';
import DeleteEmailTemplateResponse from '../model/DeleteEmailTemplateResponse';
import DeleteEndpointResponse from '../model/DeleteEndpointResponse';
import DeleteEventStreamResponse from '../model/DeleteEventStreamResponse';
import DeleteGcmChannelResponse from '../model/DeleteGcmChannelResponse';
import DeleteInAppTemplateResponse from '../model/DeleteInAppTemplateResponse';
import DeleteJourneyResponse from '../model/DeleteJourneyResponse';
import DeletePushTemplateResponse from '../model/DeletePushTemplateResponse';
import DeleteRecommenderConfigurationResponse from '../model/DeleteRecommenderConfigurationResponse';
import DeleteSegmentResponse from '../model/DeleteSegmentResponse';
import DeleteSmsChannelResponse from '../model/DeleteSmsChannelResponse';
import DeleteSmsTemplateResponse from '../model/DeleteSmsTemplateResponse';
import DeleteUserEndpointsResponse from '../model/DeleteUserEndpointsResponse';
import DeleteVoiceChannelResponse from '../model/DeleteVoiceChannelResponse';
import DeleteVoiceTemplateResponse from '../model/DeleteVoiceTemplateResponse';
import GetAdmChannelResponse from '../model/GetAdmChannelResponse';
import GetApnsChannelResponse from '../model/GetApnsChannelResponse';
import GetApnsSandboxChannelResponse from '../model/GetApnsSandboxChannelResponse';
import GetApnsVoipChannelResponse from '../model/GetApnsVoipChannelResponse';
import GetApnsVoipSandboxChannelResponse from '../model/GetApnsVoipSandboxChannelResponse';
import GetAppResponse from '../model/GetAppResponse';
import GetApplicationDateRangeKpiResponse from '../model/GetApplicationDateRangeKpiResponse';
import GetApplicationSettingsResponse from '../model/GetApplicationSettingsResponse';
import GetAppsResponse from '../model/GetAppsResponse';
import GetBaiduChannelResponse from '../model/GetBaiduChannelResponse';
import GetCampaignActivitiesResponse from '../model/GetCampaignActivitiesResponse';
import GetCampaignDateRangeKpiResponse from '../model/GetCampaignDateRangeKpiResponse';
import GetCampaignResponse from '../model/GetCampaignResponse';
import GetCampaignVersionResponse from '../model/GetCampaignVersionResponse';
import GetCampaignVersionsResponse from '../model/GetCampaignVersionsResponse';
import GetCampaignsResponse from '../model/GetCampaignsResponse';
import GetChannelsResponse from '../model/GetChannelsResponse';
import GetEmailChannelResponse from '../model/GetEmailChannelResponse';
import GetEmailTemplateResponse from '../model/GetEmailTemplateResponse';
import GetEndpointResponse from '../model/GetEndpointResponse';
import GetEventStreamResponse from '../model/GetEventStreamResponse';
import GetExportJobResponse from '../model/GetExportJobResponse';
import GetExportJobsResponse from '../model/GetExportJobsResponse';
import GetGcmChannelResponse from '../model/GetGcmChannelResponse';
import GetImportJobResponse from '../model/GetImportJobResponse';
import GetImportJobsResponse from '../model/GetImportJobsResponse';
import GetInAppMessagesResponse from '../model/GetInAppMessagesResponse';
import GetInAppTemplateResponse from '../model/GetInAppTemplateResponse';
import GetJourneyDateRangeKpiResponse from '../model/GetJourneyDateRangeKpiResponse';
import GetJourneyExecutionActivityMetricsResponse from '../model/GetJourneyExecutionActivityMetricsResponse';
import GetJourneyExecutionMetricsResponse from '../model/GetJourneyExecutionMetricsResponse';
import GetJourneyResponse from '../model/GetJourneyResponse';
import GetJourneyRunExecutionActivityMetricsResponse from '../model/GetJourneyRunExecutionActivityMetricsResponse';
import GetJourneyRunExecutionMetricsResponse from '../model/GetJourneyRunExecutionMetricsResponse';
import GetJourneyRunsResponse from '../model/GetJourneyRunsResponse';
import GetPushTemplateResponse from '../model/GetPushTemplateResponse';
import GetRecommenderConfigurationResponse from '../model/GetRecommenderConfigurationResponse';
import GetRecommenderConfigurationsResponse from '../model/GetRecommenderConfigurationsResponse';
import GetSegmentExportJobsResponse from '../model/GetSegmentExportJobsResponse';
import GetSegmentImportJobsResponse from '../model/GetSegmentImportJobsResponse';
import GetSegmentResponse from '../model/GetSegmentResponse';
import GetSegmentVersionResponse from '../model/GetSegmentVersionResponse';
import GetSegmentVersionsResponse from '../model/GetSegmentVersionsResponse';
import GetSegmentsResponse from '../model/GetSegmentsResponse';
import GetSmsChannelResponse from '../model/GetSmsChannelResponse';
import GetSmsTemplateResponse from '../model/GetSmsTemplateResponse';
import GetUserEndpointsResponse from '../model/GetUserEndpointsResponse';
import GetVoiceChannelResponse from '../model/GetVoiceChannelResponse';
import GetVoiceTemplateResponse from '../model/GetVoiceTemplateResponse';
import ListJourneysResponse from '../model/ListJourneysResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTemplateVersionsResponse from '../model/ListTemplateVersionsResponse';
import ListTemplatesResponse from '../model/ListTemplatesResponse';
import PhoneNumberValidateRequest from '../model/PhoneNumberValidateRequest';
import PhoneNumberValidateResponse from '../model/PhoneNumberValidateResponse';
import PutEventStreamRequest from '../model/PutEventStreamRequest';
import PutEventStreamResponse from '../model/PutEventStreamResponse';
import PutEventsRequest from '../model/PutEventsRequest';
import PutEventsResponse from '../model/PutEventsResponse';
import RemoveAttributesRequest from '../model/RemoveAttributesRequest';
import RemoveAttributesResponse from '../model/RemoveAttributesResponse';
import SendMessagesRequest from '../model/SendMessagesRequest';
import SendMessagesResponse from '../model/SendMessagesResponse';
import SendOTPMessageRequest from '../model/SendOTPMessageRequest';
import SendOTPMessageResponse from '../model/SendOTPMessageResponse';
import SendUsersMessagesRequest from '../model/SendUsersMessagesRequest';
import SendUsersMessagesResponse from '../model/SendUsersMessagesResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAdmChannelRequest from '../model/UpdateAdmChannelRequest';
import UpdateAdmChannelResponse from '../model/UpdateAdmChannelResponse';
import UpdateApnsChannelRequest from '../model/UpdateApnsChannelRequest';
import UpdateApnsChannelResponse from '../model/UpdateApnsChannelResponse';
import UpdateApnsSandboxChannelRequest from '../model/UpdateApnsSandboxChannelRequest';
import UpdateApnsSandboxChannelResponse from '../model/UpdateApnsSandboxChannelResponse';
import UpdateApnsVoipChannelRequest from '../model/UpdateApnsVoipChannelRequest';
import UpdateApnsVoipChannelResponse from '../model/UpdateApnsVoipChannelResponse';
import UpdateApnsVoipSandboxChannelRequest from '../model/UpdateApnsVoipSandboxChannelRequest';
import UpdateApnsVoipSandboxChannelResponse from '../model/UpdateApnsVoipSandboxChannelResponse';
import UpdateApplicationSettingsRequest from '../model/UpdateApplicationSettingsRequest';
import UpdateApplicationSettingsResponse from '../model/UpdateApplicationSettingsResponse';
import UpdateBaiduChannelRequest from '../model/UpdateBaiduChannelRequest';
import UpdateBaiduChannelResponse from '../model/UpdateBaiduChannelResponse';
import UpdateCampaignResponse from '../model/UpdateCampaignResponse';
import UpdateEmailChannelRequest from '../model/UpdateEmailChannelRequest';
import UpdateEmailChannelResponse from '../model/UpdateEmailChannelResponse';
import UpdateEmailTemplateRequest from '../model/UpdateEmailTemplateRequest';
import UpdateEmailTemplateResponse from '../model/UpdateEmailTemplateResponse';
import UpdateEndpointRequest from '../model/UpdateEndpointRequest';
import UpdateEndpointResponse from '../model/UpdateEndpointResponse';
import UpdateEndpointsBatchRequest from '../model/UpdateEndpointsBatchRequest';
import UpdateEndpointsBatchResponse from '../model/UpdateEndpointsBatchResponse';
import UpdateGcmChannelRequest from '../model/UpdateGcmChannelRequest';
import UpdateGcmChannelResponse from '../model/UpdateGcmChannelResponse';
import UpdateInAppTemplateRequest from '../model/UpdateInAppTemplateRequest';
import UpdateInAppTemplateResponse from '../model/UpdateInAppTemplateResponse';
import UpdateJourneyResponse from '../model/UpdateJourneyResponse';
import UpdateJourneyStateRequest from '../model/UpdateJourneyStateRequest';
import UpdateJourneyStateResponse from '../model/UpdateJourneyStateResponse';
import UpdatePushTemplateRequest from '../model/UpdatePushTemplateRequest';
import UpdatePushTemplateResponse from '../model/UpdatePushTemplateResponse';
import UpdateRecommenderConfigurationRequest from '../model/UpdateRecommenderConfigurationRequest';
import UpdateRecommenderConfigurationResponse from '../model/UpdateRecommenderConfigurationResponse';
import UpdateSegmentResponse from '../model/UpdateSegmentResponse';
import UpdateSmsChannelRequest from '../model/UpdateSmsChannelRequest';
import UpdateSmsChannelResponse from '../model/UpdateSmsChannelResponse';
import UpdateSmsTemplateRequest from '../model/UpdateSmsTemplateRequest';
import UpdateSmsTemplateResponse from '../model/UpdateSmsTemplateResponse';
import UpdateTemplateActiveVersionRequest from '../model/UpdateTemplateActiveVersionRequest';
import UpdateTemplateActiveVersionResponse from '../model/UpdateTemplateActiveVersionResponse';
import UpdateVoiceChannelRequest from '../model/UpdateVoiceChannelRequest';
import UpdateVoiceChannelResponse from '../model/UpdateVoiceChannelResponse';
import UpdateVoiceTemplateRequest from '../model/UpdateVoiceTemplateRequest';
import UpdateVoiceTemplateResponse from '../model/UpdateVoiceTemplateResponse';
import VerifyOTPMessageRequest from '../model/VerifyOTPMessageRequest';
import VerifyOTPMessageResponse from '../model/VerifyOTPMessageResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-12-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/DefaultApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  <p>Creates an application.</p>
     * @param {module:model/CreateAppRequest} createAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppResponse}
     */
    createApp(createAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppRequest;
      // verify the required parameter 'createAppRequest' is set
      if (createAppRequest === undefined || createAppRequest === null) {
        throw new Error("Missing the required parameter 'createAppRequest' when calling createApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppResponse;
      return this.apiClient.callApi(
        '/v1/apps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCampaign operation.
     * @callback module:api/DefaultApi~createCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new campaign for an application or updates the settings of an existing campaign for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/CreateCampaignRequest} createCampaignRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCampaignResponse}
     */
    createCampaign(applicationId, createCampaignRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCampaignRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createCampaign");
      }
      // verify the required parameter 'createCampaignRequest' is set
      if (createCampaignRequest === undefined || createCampaignRequest === null) {
        throw new Error("Missing the required parameter 'createCampaignRequest' when calling createCampaign");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCampaignResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEmailTemplate operation.
     * @callback module:api/DefaultApi~createEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a message template for messages that are sent through the email channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateEmailTemplateRequest} updateEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEmailTemplateResponse}
     */
    createEmailTemplate(templateName, updateEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEmailTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling createEmailTemplate");
      }
      // verify the required parameter 'updateEmailTemplateRequest' is set
      if (updateEmailTemplateRequest === undefined || updateEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateEmailTemplateRequest' when calling createEmailTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExportJob operation.
     * @callback module:api/DefaultApi~createExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an export job for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/CreateExportJobRequest} createExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExportJobResponse}
     */
    createExportJob(applicationId, createExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExportJobRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createExportJob");
      }
      // verify the required parameter 'createExportJobRequest' is set
      if (createExportJobRequest === undefined || createExportJobRequest === null) {
        throw new Error("Missing the required parameter 'createExportJobRequest' when calling createExportJob");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExportJobResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/jobs/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImportJob operation.
     * @callback module:api/DefaultApi~createImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an import job for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/CreateImportJobRequest} createImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateImportJobResponse}
     */
    createImportJob(applicationId, createImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createImportJobRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createImportJob");
      }
      // verify the required parameter 'createImportJobRequest' is set
      if (createImportJobRequest === undefined || createImportJobRequest === null) {
        throw new Error("Missing the required parameter 'createImportJobRequest' when calling createImportJob");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateImportJobResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/jobs/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInAppTemplate operation.
     * @callback module:api/DefaultApi~createInAppTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInAppTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new message template for messages using the in-app message channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateInAppTemplateRequest} updateInAppTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInAppTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInAppTemplateResponse}
     */
    createInAppTemplate(templateName, updateInAppTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInAppTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling createInAppTemplate");
      }
      // verify the required parameter 'updateInAppTemplateRequest' is set
      if (updateInAppTemplateRequest === undefined || updateInAppTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateInAppTemplateRequest' when calling createInAppTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInAppTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/inapp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createJourney operation.
     * @callback module:api/DefaultApi~createJourneyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJourneyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a journey for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/CreateJourneyRequest} createJourneyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createJourneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJourneyResponse}
     */
    createJourney(applicationId, createJourneyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createJourneyRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createJourney");
      }
      // verify the required parameter 'createJourneyRequest' is set
      if (createJourneyRequest === undefined || createJourneyRequest === null) {
        throw new Error("Missing the required parameter 'createJourneyRequest' when calling createJourney");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateJourneyResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPushTemplate operation.
     * @callback module:api/DefaultApi~createPushTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePushTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a message template for messages that are sent through a push notification channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdatePushTemplateRequest} updatePushTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPushTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePushTemplateResponse}
     */
    createPushTemplate(templateName, updatePushTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePushTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling createPushTemplate");
      }
      // verify the required parameter 'updatePushTemplateRequest' is set
      if (updatePushTemplateRequest === undefined || updatePushTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updatePushTemplateRequest' when calling createPushTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePushTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/push', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRecommenderConfiguration operation.
     * @callback module:api/DefaultApi~createRecommenderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRecommenderConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon Pinpoint configuration for a recommender model.
     * @param {module:model/CreateRecommenderConfigurationRequest} createRecommenderConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRecommenderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRecommenderConfigurationResponse}
     */
    createRecommenderConfiguration(createRecommenderConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRecommenderConfigurationRequest;
      // verify the required parameter 'createRecommenderConfigurationRequest' is set
      if (createRecommenderConfigurationRequest === undefined || createRecommenderConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createRecommenderConfigurationRequest' when calling createRecommenderConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRecommenderConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/recommenders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSegment operation.
     * @callback module:api/DefaultApi~createSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/CreateSegmentRequest} createSegmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSegmentResponse}
     */
    createSegment(applicationId, createSegmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSegmentRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling createSegment");
      }
      // verify the required parameter 'createSegmentRequest' is set
      if (createSegmentRequest === undefined || createSegmentRequest === null) {
        throw new Error("Missing the required parameter 'createSegmentRequest' when calling createSegment");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSegmentResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSmsTemplate operation.
     * @callback module:api/DefaultApi~createSmsTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSmsTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a message template for messages that are sent through the SMS channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateSmsTemplateRequest} updateSmsTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSmsTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSmsTemplateResponse}
     */
    createSmsTemplate(templateName, updateSmsTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSmsTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling createSmsTemplate");
      }
      // verify the required parameter 'updateSmsTemplateRequest' is set
      if (updateSmsTemplateRequest === undefined || updateSmsTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateSmsTemplateRequest' when calling createSmsTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSmsTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVoiceTemplate operation.
     * @callback module:api/DefaultApi~createVoiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVoiceTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a message template for messages that are sent through the voice channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateVoiceTemplateRequest} updateVoiceTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVoiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVoiceTemplateResponse}
     */
    createVoiceTemplate(templateName, updateVoiceTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVoiceTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling createVoiceTemplate");
      }
      // verify the required parameter 'updateVoiceTemplateRequest' is set
      if (updateVoiceTemplateRequest === undefined || updateVoiceTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateVoiceTemplateRequest' when calling createVoiceTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVoiceTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/voice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAdmChannel operation.
     * @callback module:api/DefaultApi~deleteAdmChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAdmChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the ADM channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAdmChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAdmChannelResponse}
     */
    deleteAdmChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteAdmChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAdmChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/adm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApnsChannel operation.
     * @callback module:api/DefaultApi~deleteApnsChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApnsChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the APNs channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApnsChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApnsChannelResponse}
     */
    deleteApnsChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApnsChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteApnsChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApnsSandboxChannel operation.
     * @callback module:api/DefaultApi~deleteApnsSandboxChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApnsSandboxChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApnsSandboxChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApnsSandboxChannelResponse}
     */
    deleteApnsSandboxChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApnsSandboxChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteApnsSandboxChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_sandbox', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApnsVoipChannel operation.
     * @callback module:api/DefaultApi~deleteApnsVoipChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApnsVoipChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApnsVoipChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApnsVoipChannelResponse}
     */
    deleteApnsVoipChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApnsVoipChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteApnsVoipChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_voip', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApnsVoipSandboxChannel operation.
     * @callback module:api/DefaultApi~deleteApnsVoipSandboxChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteApnsVoipSandboxChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApnsVoipSandboxChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteApnsVoipSandboxChannelResponse}
     */
    deleteApnsVoipSandboxChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApnsVoipSandboxChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteApnsVoipSandboxChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_voip_sandbox', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/DefaultApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAppResponse}
     */
    deleteApp(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteApp");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteAppResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBaiduChannel operation.
     * @callback module:api/DefaultApi~deleteBaiduChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteBaiduChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the Baidu channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteBaiduChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteBaiduChannelResponse}
     */
    deleteBaiduChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteBaiduChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteBaiduChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/baidu', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaign operation.
     * @callback module:api/DefaultApi~deleteCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a campaign from an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCampaignResponse}
     */
    deleteCampaign(applicationId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling deleteCampaign");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCampaignResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailChannel operation.
     * @callback module:api/DefaultApi~deleteEmailChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEmailChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the email channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEmailChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEmailChannelResponse}
     */
    deleteEmailChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteEmailChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteEmailChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/email', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEmailTemplate operation.
     * @callback module:api/DefaultApi~deleteEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message template for messages that were sent through the email channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~deleteEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEmailTemplateResponse}
     */
    deleteEmailTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteEmailTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/email', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEndpoint operation.
     * @callback module:api/DefaultApi~deleteEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an endpoint from an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} endpointId The unique identifier for the endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEndpointResponse}
     */
    deleteEndpoint(applicationId, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteEndpoint");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling deleteEndpoint");
      }

      let pathParams = {
        'application-id': applicationId,
        'endpoint-id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteEndpointResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/endpoints/{endpoint-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventStream operation.
     * @callback module:api/DefaultApi~deleteEventStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteEventStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the event stream for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEventStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteEventStreamResponse}
     */
    deleteEventStream(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteEventStream");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteEventStreamResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/eventstream', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGcmChannel operation.
     * @callback module:api/DefaultApi~deleteGcmChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteGcmChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the GCM channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteGcmChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteGcmChannelResponse}
     */
    deleteGcmChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteGcmChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteGcmChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/gcm', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInAppTemplate operation.
     * @callback module:api/DefaultApi~deleteInAppTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteInAppTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message template for messages sent using the in-app message channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~deleteInAppTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteInAppTemplateResponse}
     */
    deleteInAppTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteInAppTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteInAppTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/inapp', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJourney operation.
     * @callback module:api/DefaultApi~deleteJourneyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteJourneyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a journey from an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteJourneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteJourneyResponse}
     */
    deleteJourney(applicationId, journeyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteJourney");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling deleteJourney");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteJourneyResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePushTemplate operation.
     * @callback module:api/DefaultApi~deletePushTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePushTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message template for messages that were sent through a push notification channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~deletePushTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePushTemplateResponse}
     */
    deletePushTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deletePushTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletePushTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/push', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecommenderConfiguration operation.
     * @callback module:api/DefaultApi~deleteRecommenderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRecommenderConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon Pinpoint configuration for a recommender model.
     * @param {String} recommenderId The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRecommenderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRecommenderConfigurationResponse}
     */
    deleteRecommenderConfiguration(recommenderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recommenderId' is set
      if (recommenderId === undefined || recommenderId === null) {
        throw new Error("Missing the required parameter 'recommenderId' when calling deleteRecommenderConfiguration");
      }

      let pathParams = {
        'recommender-id': recommenderId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteRecommenderConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/recommenders/{recommender-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSegment operation.
     * @callback module:api/DefaultApi~deleteSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a segment from an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSegmentResponse}
     */
    deleteSegment(applicationId, segmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteSegment");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSegment");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteSegmentResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSmsChannel operation.
     * @callback module:api/DefaultApi~deleteSmsChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSmsChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the SMS channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSmsChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSmsChannelResponse}
     */
    deleteSmsChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteSmsChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteSmsChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/sms', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSmsTemplate operation.
     * @callback module:api/DefaultApi~deleteSmsTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSmsTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message template for messages that were sent through the SMS channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~deleteSmsTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSmsTemplateResponse}
     */
    deleteSmsTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteSmsTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteSmsTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/sms', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserEndpoints operation.
     * @callback module:api/DefaultApi~deleteUserEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUserEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all the endpoints that are associated with a specific user ID.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} userId The unique identifier for the user.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteUserEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUserEndpointsResponse}
     */
    deleteUserEndpoints(applicationId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteUserEndpoints");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUserEndpoints");
      }

      let pathParams = {
        'application-id': applicationId,
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteUserEndpointsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/users/{user-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVoiceChannel operation.
     * @callback module:api/DefaultApi~deleteVoiceChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVoiceChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the voice channel for an application and deletes any existing settings for the channel.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVoiceChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVoiceChannelResponse}
     */
    deleteVoiceChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteVoiceChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVoiceChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/voice', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVoiceTemplate operation.
     * @callback module:api/DefaultApi~deleteVoiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVoiceTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message template for messages that were sent through the voice channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~deleteVoiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVoiceTemplateResponse}
     */
    deleteVoiceTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling deleteVoiceTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVoiceTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/voice', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdmChannel operation.
     * @callback module:api/DefaultApi~getAdmChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAdmChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the ADM channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAdmChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAdmChannelResponse}
     */
    getAdmChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getAdmChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAdmChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/adm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApnsChannel operation.
     * @callback module:api/DefaultApi~getApnsChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApnsChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the APNs channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApnsChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApnsChannelResponse}
     */
    getApnsChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApnsChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApnsChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApnsSandboxChannel operation.
     * @callback module:api/DefaultApi~getApnsSandboxChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApnsSandboxChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the APNs sandbox channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApnsSandboxChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApnsSandboxChannelResponse}
     */
    getApnsSandboxChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApnsSandboxChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApnsSandboxChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_sandbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApnsVoipChannel operation.
     * @callback module:api/DefaultApi~getApnsVoipChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApnsVoipChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the APNs VoIP channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApnsVoipChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApnsVoipChannelResponse}
     */
    getApnsVoipChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApnsVoipChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApnsVoipChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_voip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApnsVoipSandboxChannel operation.
     * @callback module:api/DefaultApi~getApnsVoipSandboxChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApnsVoipSandboxChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApnsVoipSandboxChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApnsVoipSandboxChannelResponse}
     */
    getApnsVoipSandboxChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApnsVoipSandboxChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApnsVoipSandboxChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_voip_sandbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/DefaultApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppResponse}
     */
    getApp(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApp");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationDateRangeKpi operation.
     * @callback module:api/DefaultApi~getApplicationDateRangeKpiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationDateRangeKpiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} kpiName The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Date} [endTime] The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
     * @param {String} [nextToken] The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {Date} [startTime] The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
     * @param {module:api/DefaultApi~getApplicationDateRangeKpiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationDateRangeKpiResponse}
     */
    getApplicationDateRangeKpi(applicationId, kpiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationDateRangeKpi");
      }
      // verify the required parameter 'kpiName' is set
      if (kpiName === undefined || kpiName === null) {
        throw new Error("Missing the required parameter 'kpiName' when calling getApplicationDateRangeKpi");
      }

      let pathParams = {
        'application-id': applicationId,
        'kpi-name': kpiName
      };
      let queryParams = {
        'end-time': opts['endTime'],
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize'],
        'start-time': opts['startTime']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationDateRangeKpiResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/kpis/daterange/{kpi-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApplicationSettings operation.
     * @callback module:api/DefaultApi~getApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the settings for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationSettingsResponse}
     */
    getApplicationSettings(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getApplicationSettings");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationSettingsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApps operation.
     * @callback module:api/DefaultApi~getAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all the applications that are associated with your Amazon Pinpoint account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppsResponse}
     */
    getApps(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppsResponse;
      return this.apiClient.callApi(
        '/v1/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBaiduChannel operation.
     * @callback module:api/DefaultApi~getBaiduChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBaiduChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the Baidu channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getBaiduChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBaiduChannelResponse}
     */
    getBaiduChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getBaiduChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBaiduChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/baidu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaign operation.
     * @callback module:api/DefaultApi~getCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status, configuration, and other settings for a campaign.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignResponse}
     */
    getCampaign(applicationId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaign");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCampaignResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignActivities operation.
     * @callback module:api/DefaultApi~getCampaignActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignActivitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all the activities for a campaign.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getCampaignActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignActivitiesResponse}
     */
    getCampaignActivities(applicationId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignActivities");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignActivities");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCampaignActivitiesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignDateRangeKpi operation.
     * @callback module:api/DefaultApi~getCampaignDateRangeKpiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignDateRangeKpiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {String} kpiName The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Date} [endTime] The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
     * @param {String} [nextToken] The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {Date} [startTime] The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
     * @param {module:api/DefaultApi~getCampaignDateRangeKpiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignDateRangeKpiResponse}
     */
    getCampaignDateRangeKpi(applicationId, campaignId, kpiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignDateRangeKpi");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignDateRangeKpi");
      }
      // verify the required parameter 'kpiName' is set
      if (kpiName === undefined || kpiName === null) {
        throw new Error("Missing the required parameter 'kpiName' when calling getCampaignDateRangeKpi");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId,
        'kpi-name': kpiName
      };
      let queryParams = {
        'end-time': opts['endTime'],
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize'],
        'start-time': opts['startTime']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCampaignDateRangeKpiResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}/kpis/daterange/{kpi-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignVersion operation.
     * @callback module:api/DefaultApi~getCampaignVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status, configuration, and other settings for a specific version of a campaign.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {String} version The unique version number (Version property) for the campaign version.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCampaignVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignVersionResponse}
     */
    getCampaignVersion(applicationId, campaignId, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignVersion");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getCampaignVersion");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCampaignVersionResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaignVersions operation.
     * @callback module:api/DefaultApi~getCampaignVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status, configuration, and other settings for all versions of a campaign.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getCampaignVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignVersionsResponse}
     */
    getCampaignVersions(applicationId, campaignId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaignVersions");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling getCampaignVersions");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCampaignVersionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCampaigns operation.
     * @callback module:api/DefaultApi~getCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCampaignsResponse}
     */
    getCampaigns(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getCampaigns");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCampaignsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannels operation.
     * @callback module:api/DefaultApi~getChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the history and status of each channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetChannelsResponse}
     */
    getChannels(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getChannels");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetChannelsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailChannel operation.
     * @callback module:api/DefaultApi~getEmailChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmailChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the email channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEmailChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmailChannelResponse}
     */
    getEmailChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getEmailChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmailChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmailTemplate operation.
     * @callback module:api/DefaultApi~getEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the content and settings of a message template for messages that are sent through the email channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~getEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEmailTemplateResponse}
     */
    getEmailTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getEmailTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEndpoint operation.
     * @callback module:api/DefaultApi~getEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the settings and attributes of a specific endpoint for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} endpointId The unique identifier for the endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEndpointResponse}
     */
    getEndpoint(applicationId, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getEndpoint");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getEndpoint");
      }

      let pathParams = {
        'application-id': applicationId,
        'endpoint-id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEndpointResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/endpoints/{endpoint-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventStream operation.
     * @callback module:api/DefaultApi~getEventStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the event stream settings for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEventStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEventStreamResponse}
     */
    getEventStream(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getEventStream");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventStreamResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/eventstream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExportJob operation.
     * @callback module:api/DefaultApi~getExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of a specific export job for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} jobId The unique identifier for the job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExportJobResponse}
     */
    getExportJob(applicationId, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getExportJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getExportJob");
      }

      let pathParams = {
        'application-id': applicationId,
        'job-id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExportJobResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/jobs/export/{job-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExportJobs operation.
     * @callback module:api/DefaultApi~getExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of all the export jobs for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExportJobsResponse}
     */
    getExportJobs(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getExportJobs");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExportJobsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/jobs/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGcmChannel operation.
     * @callback module:api/DefaultApi~getGcmChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetGcmChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the GCM channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getGcmChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetGcmChannelResponse}
     */
    getGcmChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getGcmChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetGcmChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/gcm', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJob operation.
     * @callback module:api/DefaultApi~getImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of a specific import job for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} jobId The unique identifier for the job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImportJobResponse}
     */
    getImportJob(applicationId, jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getImportJob");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getImportJob");
      }

      let pathParams = {
        'application-id': applicationId,
        'job-id': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetImportJobResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/jobs/import/{job-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImportJobs operation.
     * @callback module:api/DefaultApi~getImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of all the import jobs for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetImportJobsResponse}
     */
    getImportJobs(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getImportJobs");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetImportJobsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/jobs/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInAppMessages operation.
     * @callback module:api/DefaultApi~getInAppMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInAppMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the in-app messages targeted for the provided endpoint ID.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} endpointId The unique identifier for the endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInAppMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInAppMessagesResponse}
     */
    getInAppMessages(applicationId, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getInAppMessages");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling getInAppMessages");
      }

      let pathParams = {
        'application-id': applicationId,
        'endpoint-id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInAppMessagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/endpoints/{endpoint-id}/inappmessages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInAppTemplate operation.
     * @callback module:api/DefaultApi~getInAppTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInAppTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the content and settings of a message template for messages sent through the in-app channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~getInAppTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInAppTemplateResponse}
     */
    getInAppTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getInAppTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInAppTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/inapp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourney operation.
     * @callback module:api/DefaultApi~getJourneyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status, configuration, and other settings for a journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getJourneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyResponse}
     */
    getJourney(applicationId, journeyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourney");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourney");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourneyDateRangeKpi operation.
     * @callback module:api/DefaultApi~getJourneyDateRangeKpiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyDateRangeKpiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {String} kpiName The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Date} [endTime] The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
     * @param {String} [nextToken] The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {Date} [startTime] The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
     * @param {module:api/DefaultApi~getJourneyDateRangeKpiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyDateRangeKpiResponse}
     */
    getJourneyDateRangeKpi(applicationId, journeyId, kpiName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourneyDateRangeKpi");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourneyDateRangeKpi");
      }
      // verify the required parameter 'kpiName' is set
      if (kpiName === undefined || kpiName === null) {
        throw new Error("Missing the required parameter 'kpiName' when calling getJourneyDateRangeKpi");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId,
        'kpi-name': kpiName
      };
      let queryParams = {
        'end-time': opts['endTime'],
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize'],
        'start-time': opts['startTime']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyDateRangeKpiResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/kpis/daterange/{kpi-name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourneyExecutionActivityMetrics operation.
     * @callback module:api/DefaultApi~getJourneyExecutionActivityMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyExecutionActivityMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyActivityId The unique identifier for the journey activity.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The <code/> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {module:api/DefaultApi~getJourneyExecutionActivityMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyExecutionActivityMetricsResponse}
     */
    getJourneyExecutionActivityMetrics(applicationId, journeyActivityId, journeyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourneyExecutionActivityMetrics");
      }
      // verify the required parameter 'journeyActivityId' is set
      if (journeyActivityId === undefined || journeyActivityId === null) {
        throw new Error("Missing the required parameter 'journeyActivityId' when calling getJourneyExecutionActivityMetrics");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourneyExecutionActivityMetrics");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-activity-id': journeyActivityId,
        'journey-id': journeyId
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyExecutionActivityMetricsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/activities/{journey-activity-id}/execution-metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourneyExecutionMetrics operation.
     * @callback module:api/DefaultApi~getJourneyExecutionMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyExecutionMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The <code/> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {module:api/DefaultApi~getJourneyExecutionMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyExecutionMetricsResponse}
     */
    getJourneyExecutionMetrics(applicationId, journeyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourneyExecutionMetrics");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourneyExecutionMetrics");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyExecutionMetricsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/execution-metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourneyRunExecutionActivityMetrics operation.
     * @callback module:api/DefaultApi~getJourneyRunExecutionActivityMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyRunExecutionActivityMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard run execution metric that applies to a journey activity.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyActivityId The unique identifier for the journey activity.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {String} runId The unique identifier for the journey run.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The <code/> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {module:api/DefaultApi~getJourneyRunExecutionActivityMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyRunExecutionActivityMetricsResponse}
     */
    getJourneyRunExecutionActivityMetrics(applicationId, journeyActivityId, journeyId, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourneyRunExecutionActivityMetrics");
      }
      // verify the required parameter 'journeyActivityId' is set
      if (journeyActivityId === undefined || journeyActivityId === null) {
        throw new Error("Missing the required parameter 'journeyActivityId' when calling getJourneyRunExecutionActivityMetrics");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourneyRunExecutionActivityMetrics");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getJourneyRunExecutionActivityMetrics");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-activity-id': journeyActivityId,
        'journey-id': journeyId,
        'run-id': runId
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyRunExecutionActivityMetricsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/runs/{run-id}/activities/{journey-activity-id}/execution-metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourneyRunExecutionMetrics operation.
     * @callback module:api/DefaultApi~getJourneyRunExecutionMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyRunExecutionMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves (queries) pre-aggregated data for a standard run execution metric that applies to a journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {String} runId The unique identifier for the journey run.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The <code/> string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {module:api/DefaultApi~getJourneyRunExecutionMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyRunExecutionMetricsResponse}
     */
    getJourneyRunExecutionMetrics(applicationId, journeyId, runId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourneyRunExecutionMetrics");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourneyRunExecutionMetrics");
      }
      // verify the required parameter 'runId' is set
      if (runId === undefined || runId === null) {
        throw new Error("Missing the required parameter 'runId' when calling getJourneyRunExecutionMetrics");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId,
        'run-id': runId
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyRunExecutionMetricsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/runs/{run-id}/execution-metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJourneyRuns operation.
     * @callback module:api/DefaultApi~getJourneyRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJourneyRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information about the runs of a journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getJourneyRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJourneyRunsResponse}
     */
    getJourneyRuns(applicationId, journeyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getJourneyRuns");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling getJourneyRuns");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJourneyRunsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/runs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPushTemplate operation.
     * @callback module:api/DefaultApi~getPushTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPushTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the content and settings of a message template for messages that are sent through a push notification channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~getPushTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPushTemplateResponse}
     */
    getPushTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getPushTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPushTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/push', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommenderConfiguration operation.
     * @callback module:api/DefaultApi~getRecommenderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecommenderConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an Amazon Pinpoint configuration for a recommender model.
     * @param {String} recommenderId The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRecommenderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecommenderConfigurationResponse}
     */
    getRecommenderConfiguration(recommenderId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recommenderId' is set
      if (recommenderId === undefined || recommenderId === null) {
        throw new Error("Missing the required parameter 'recommenderId' when calling getRecommenderConfiguration");
      }

      let pathParams = {
        'recommender-id': recommenderId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecommenderConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/recommenders/{recommender-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommenderConfigurations operation.
     * @callback module:api/DefaultApi~getRecommenderConfigurationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecommenderConfigurationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getRecommenderConfigurationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecommenderConfigurationsResponse}
     */
    getRecommenderConfigurations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecommenderConfigurationsResponse;
      return this.apiClient.callApi(
        '/v1/recommenders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegment operation.
     * @callback module:api/DefaultApi~getSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentResponse}
     */
    getSegment(applicationId, segmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSegment");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegment");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentExportJobs operation.
     * @callback module:api/DefaultApi~getSegmentExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the export jobs for a segment.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getSegmentExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentExportJobsResponse}
     */
    getSegmentExportJobs(applicationId, segmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSegmentExportJobs");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegmentExportJobs");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentExportJobsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}/jobs/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentImportJobs operation.
     * @callback module:api/DefaultApi~getSegmentImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the import jobs for a segment.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getSegmentImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentImportJobsResponse}
     */
    getSegmentImportJobs(applicationId, segmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSegmentImportJobs");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegmentImportJobs");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentImportJobsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}/jobs/import', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentVersion operation.
     * @callback module:api/DefaultApi~getSegmentVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {String} version The unique version number (Version property) for the campaign version.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSegmentVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentVersionResponse}
     */
    getSegmentVersion(applicationId, segmentId, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSegmentVersion");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegmentVersion");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getSegmentVersion");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentVersionResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegmentVersions operation.
     * @callback module:api/DefaultApi~getSegmentVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that's associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getSegmentVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentVersionsResponse}
     */
    getSegmentVersions(applicationId, segmentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSegmentVersions");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling getSegmentVersions");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentVersionsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegments operation.
     * @callback module:api/DefaultApi~getSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~getSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentsResponse}
     */
    getSegments(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSegments");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmsChannel operation.
     * @callback module:api/DefaultApi~getSmsChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSmsChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the SMS channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSmsChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSmsChannelResponse}
     */
    getSmsChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getSmsChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSmsChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/sms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSmsTemplate operation.
     * @callback module:api/DefaultApi~getSmsTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSmsTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the content and settings of a message template for messages that are sent through the SMS channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~getSmsTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSmsTemplateResponse}
     */
    getSmsTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getSmsTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSmsTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/sms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserEndpoints operation.
     * @callback module:api/DefaultApi~getUserEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUserEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all the endpoints that are associated with a specific user ID.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} userId The unique identifier for the user.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUserEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUserEndpointsResponse}
     */
    getUserEndpoints(applicationId, userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getUserEndpoints");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserEndpoints");
      }

      let pathParams = {
        'application-id': applicationId,
        'user-id': userId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUserEndpointsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/users/{user-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoiceChannel operation.
     * @callback module:api/DefaultApi~getVoiceChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVoiceChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status and settings of the voice channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVoiceChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVoiceChannelResponse}
     */
    getVoiceChannel(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling getVoiceChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVoiceChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/voice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVoiceTemplate operation.
     * @callback module:api/DefaultApi~getVoiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVoiceTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the content and settings of a message template for messages that are sent through the voice channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~getVoiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVoiceTemplateResponse}
     */
    getVoiceTemplate(templateName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling getVoiceTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVoiceTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/voice', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJourneys operation.
     * @callback module:api/DefaultApi~listJourneysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJourneysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [token] The NextToken string that specifies which page of results to return in a paginated response.
     * @param {module:api/DefaultApi~listJourneysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJourneysResponse}
     */
    listJourneys(applicationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling listJourneys");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
        'page-size': opts['pageSize'],
        'token': opts['token']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListJourneysResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/v1/tags/{resource-arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplateVersions operation.
     * @callback module:api/DefaultApi~listTemplateVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTemplateVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all the versions of a specific message template.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {String} templateType The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {module:api/DefaultApi~listTemplateVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTemplateVersionsResponse}
     */
    listTemplateVersions(templateName, templateType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling listTemplateVersions");
      }
      // verify the required parameter 'templateType' is set
      if (templateType === undefined || templateType === null) {
        throw new Error("Missing the required parameter 'templateType' when calling listTemplateVersions");
      }

      let pathParams = {
        'template-name': templateName,
        'template-type': templateType
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTemplateVersionsResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/{template-type}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplates operation.
     * @callback module:api/DefaultApi~listTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [pageSize] The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
     * @param {String} [prefix] The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.
     * @param {String} [templateType] The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.
     * @param {module:api/DefaultApi~listTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTemplatesResponse}
     */
    listTemplates(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'next-token': opts['nextToken'],
        'page-size': opts['pageSize'],
        'prefix': opts['prefix'],
        'template-type': opts['templateType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTemplatesResponse;
      return this.apiClient.callApi(
        '/v1/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the phoneNumberValidate operation.
     * @callback module:api/DefaultApi~phoneNumberValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneNumberValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a phone number.
     * @param {module:model/PhoneNumberValidateRequest} phoneNumberValidateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~phoneNumberValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneNumberValidateResponse}
     */
    phoneNumberValidate(phoneNumberValidateRequest, opts, callback) {
      opts = opts || {};
      let postBody = phoneNumberValidateRequest;
      // verify the required parameter 'phoneNumberValidateRequest' is set
      if (phoneNumberValidateRequest === undefined || phoneNumberValidateRequest === null) {
        throw new Error("Missing the required parameter 'phoneNumberValidateRequest' when calling phoneNumberValidate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PhoneNumberValidateResponse;
      return this.apiClient.callApi(
        '/v1/phone/number/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEventStream operation.
     * @callback module:api/DefaultApi~putEventStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutEventStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new event stream for an application or updates the settings of an existing event stream for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/PutEventStreamRequest} putEventStreamRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEventStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutEventStreamResponse}
     */
    putEventStream(applicationId, putEventStreamRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEventStreamRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling putEventStream");
      }
      // verify the required parameter 'putEventStreamRequest' is set
      if (putEventStreamRequest === undefined || putEventStreamRequest === null) {
        throw new Error("Missing the required parameter 'putEventStreamRequest' when calling putEventStream");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutEventStreamResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/eventstream', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putEvents operation.
     * @callback module:api/DefaultApi~putEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/PutEventsRequest} putEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutEventsResponse}
     */
    putEvents(applicationId, putEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putEventsRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling putEvents");
      }
      // verify the required parameter 'putEventsRequest' is set
      if (putEventsRequest === undefined || putEventsRequest === null) {
        throw new Error("Missing the required parameter 'putEventsRequest' when calling putEvents");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutEventsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAttributes operation.
     * @callback module:api/DefaultApi~removeAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveAttributesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} attributeType  <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul>
     * @param {module:model/RemoveAttributesRequest} removeAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveAttributesResponse}
     */
    removeAttributes(applicationId, attributeType, removeAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeAttributesRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling removeAttributes");
      }
      // verify the required parameter 'attributeType' is set
      if (attributeType === undefined || attributeType === null) {
        throw new Error("Missing the required parameter 'attributeType' when calling removeAttributes");
      }
      // verify the required parameter 'removeAttributesRequest' is set
      if (removeAttributesRequest === undefined || removeAttributesRequest === null) {
        throw new Error("Missing the required parameter 'removeAttributesRequest' when calling removeAttributes");
      }

      let pathParams = {
        'application-id': applicationId,
        'attribute-type': attributeType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoveAttributesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/attributes/{attribute-type}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessages operation.
     * @callback module:api/DefaultApi~sendMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates and sends a direct message.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/SendMessagesRequest} sendMessagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendMessagesResponse}
     */
    sendMessages(applicationId, sendMessagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendMessagesRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling sendMessages");
      }
      // verify the required parameter 'sendMessagesRequest' is set
      if (sendMessagesRequest === undefined || sendMessagesRequest === null) {
        throw new Error("Missing the required parameter 'sendMessagesRequest' when calling sendMessages");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendOTPMessage operation.
     * @callback module:api/DefaultApi~sendOTPMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendOTPMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an OTP message
     * @param {String} applicationId The unique ID of your Amazon Pinpoint application.
     * @param {module:model/SendOTPMessageRequest} sendOTPMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendOTPMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendOTPMessageResponse}
     */
    sendOTPMessage(applicationId, sendOTPMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendOTPMessageRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling sendOTPMessage");
      }
      // verify the required parameter 'sendOTPMessageRequest' is set
      if (sendOTPMessageRequest === undefined || sendOTPMessageRequest === null) {
        throw new Error("Missing the required parameter 'sendOTPMessageRequest' when calling sendOTPMessage");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendOTPMessageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/otp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendUsersMessages operation.
     * @callback module:api/DefaultApi~sendUsersMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendUsersMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates and sends a message to a list of users.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/SendUsersMessagesRequest} sendUsersMessagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendUsersMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendUsersMessagesResponse}
     */
    sendUsersMessages(applicationId, sendUsersMessagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendUsersMessagesRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling sendUsersMessages");
      }
      // verify the required parameter 'sendUsersMessagesRequest' is set
      if (sendUsersMessagesRequest === undefined || sendUsersMessagesRequest === null) {
        throw new Error("Missing the required parameter 'sendUsersMessagesRequest' when calling sendUsersMessages");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendUsersMessagesResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/users-messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more tags (keys and values) to an application, campaign, message template, or segment.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{resource-arn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags (keys and values) from an application, campaign, message template, or segment.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/tags/{resource-arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAdmChannel operation.
     * @callback module:api/DefaultApi~updateAdmChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAdmChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateAdmChannelRequest} updateAdmChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAdmChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAdmChannelResponse}
     */
    updateAdmChannel(applicationId, updateAdmChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAdmChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateAdmChannel");
      }
      // verify the required parameter 'updateAdmChannelRequest' is set
      if (updateAdmChannelRequest === undefined || updateAdmChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateAdmChannelRequest' when calling updateAdmChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAdmChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/adm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApnsChannel operation.
     * @callback module:api/DefaultApi~updateApnsChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApnsChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateApnsChannelRequest} updateApnsChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApnsChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApnsChannelResponse}
     */
    updateApnsChannel(applicationId, updateApnsChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApnsChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApnsChannel");
      }
      // verify the required parameter 'updateApnsChannelRequest' is set
      if (updateApnsChannelRequest === undefined || updateApnsChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateApnsChannelRequest' when calling updateApnsChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApnsChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApnsSandboxChannel operation.
     * @callback module:api/DefaultApi~updateApnsSandboxChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApnsSandboxChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateApnsSandboxChannelRequest} updateApnsSandboxChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApnsSandboxChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApnsSandboxChannelResponse}
     */
    updateApnsSandboxChannel(applicationId, updateApnsSandboxChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApnsSandboxChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApnsSandboxChannel");
      }
      // verify the required parameter 'updateApnsSandboxChannelRequest' is set
      if (updateApnsSandboxChannelRequest === undefined || updateApnsSandboxChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateApnsSandboxChannelRequest' when calling updateApnsSandboxChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApnsSandboxChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_sandbox', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApnsVoipChannel operation.
     * @callback module:api/DefaultApi~updateApnsVoipChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApnsVoipChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateApnsVoipChannelRequest} updateApnsVoipChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApnsVoipChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApnsVoipChannelResponse}
     */
    updateApnsVoipChannel(applicationId, updateApnsVoipChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApnsVoipChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApnsVoipChannel");
      }
      // verify the required parameter 'updateApnsVoipChannelRequest' is set
      if (updateApnsVoipChannelRequest === undefined || updateApnsVoipChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateApnsVoipChannelRequest' when calling updateApnsVoipChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApnsVoipChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_voip', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApnsVoipSandboxChannel operation.
     * @callback module:api/DefaultApi~updateApnsVoipSandboxChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApnsVoipSandboxChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateApnsVoipSandboxChannelRequest} updateApnsVoipSandboxChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApnsVoipSandboxChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApnsVoipSandboxChannelResponse}
     */
    updateApnsVoipSandboxChannel(applicationId, updateApnsVoipSandboxChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApnsVoipSandboxChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApnsVoipSandboxChannel");
      }
      // verify the required parameter 'updateApnsVoipSandboxChannelRequest' is set
      if (updateApnsVoipSandboxChannelRequest === undefined || updateApnsVoipSandboxChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateApnsVoipSandboxChannelRequest' when calling updateApnsVoipSandboxChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApnsVoipSandboxChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/apns_voip_sandbox', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplicationSettings operation.
     * @callback module:api/DefaultApi~updateApplicationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApplicationSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the settings for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateApplicationSettingsRequest} updateApplicationSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApplicationSettingsResponse}
     */
    updateApplicationSettings(applicationId, updateApplicationSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationSettingsRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateApplicationSettings");
      }
      // verify the required parameter 'updateApplicationSettingsRequest' is set
      if (updateApplicationSettingsRequest === undefined || updateApplicationSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationSettingsRequest' when calling updateApplicationSettings");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApplicationSettingsResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBaiduChannel operation.
     * @callback module:api/DefaultApi~updateBaiduChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateBaiduChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateBaiduChannelRequest} updateBaiduChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateBaiduChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateBaiduChannelResponse}
     */
    updateBaiduChannel(applicationId, updateBaiduChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateBaiduChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateBaiduChannel");
      }
      // verify the required parameter 'updateBaiduChannelRequest' is set
      if (updateBaiduChannelRequest === undefined || updateBaiduChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateBaiduChannelRequest' when calling updateBaiduChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateBaiduChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/baidu', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaign operation.
     * @callback module:api/DefaultApi~updateCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration and other settings for a campaign.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} campaignId The unique identifier for the campaign.
     * @param {module:model/CreateCampaignRequest} createCampaignRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignResponse}
     */
    updateCampaign(applicationId, campaignId, createCampaignRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCampaignRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateCampaign");
      }
      // verify the required parameter 'campaignId' is set
      if (campaignId === undefined || campaignId === null) {
        throw new Error("Missing the required parameter 'campaignId' when calling updateCampaign");
      }
      // verify the required parameter 'createCampaignRequest' is set
      if (createCampaignRequest === undefined || createCampaignRequest === null) {
        throw new Error("Missing the required parameter 'createCampaignRequest' when calling updateCampaign");
      }

      let pathParams = {
        'application-id': applicationId,
        'campaign-id': campaignId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCampaignResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/campaigns/{campaign-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailChannel operation.
     * @callback module:api/DefaultApi~updateEmailChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEmailChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the email channel for an application or updates the status and settings of the email channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateEmailChannelRequest} updateEmailChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEmailChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEmailChannelResponse}
     */
    updateEmailChannel(applicationId, updateEmailChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEmailChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateEmailChannel");
      }
      // verify the required parameter 'updateEmailChannelRequest' is set
      if (updateEmailChannelRequest === undefined || updateEmailChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateEmailChannelRequest' when calling updateEmailChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEmailChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEmailTemplate operation.
     * @callback module:api/DefaultApi~updateEmailTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEmailTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing message template for messages that are sent through the email channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateEmailTemplateRequest} updateEmailTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [createNewVersion] <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~updateEmailTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEmailTemplateResponse}
     */
    updateEmailTemplate(templateName, updateEmailTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEmailTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateEmailTemplate");
      }
      // verify the required parameter 'updateEmailTemplateRequest' is set
      if (updateEmailTemplateRequest === undefined || updateEmailTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateEmailTemplateRequest' when calling updateEmailTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'create-new-version': opts['createNewVersion'],
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEmailTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpoint operation.
     * @callback module:api/DefaultApi~updateEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} endpointId The unique identifier for the endpoint.
     * @param {module:model/UpdateEndpointRequest} updateEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEndpointResponse}
     */
    updateEndpoint(applicationId, endpointId, updateEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEndpointRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateEndpoint");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling updateEndpoint");
      }
      // verify the required parameter 'updateEndpointRequest' is set
      if (updateEndpointRequest === undefined || updateEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateEndpointRequest' when calling updateEndpoint");
      }

      let pathParams = {
        'application-id': applicationId,
        'endpoint-id': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEndpointResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/endpoints/{endpoint-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEndpointsBatch operation.
     * @callback module:api/DefaultApi~updateEndpointsBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEndpointsBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateEndpointsBatchRequest} updateEndpointsBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEndpointsBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEndpointsBatchResponse}
     */
    updateEndpointsBatch(applicationId, updateEndpointsBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEndpointsBatchRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateEndpointsBatch");
      }
      // verify the required parameter 'updateEndpointsBatchRequest' is set
      if (updateEndpointsBatchRequest === undefined || updateEndpointsBatchRequest === null) {
        throw new Error("Missing the required parameter 'updateEndpointsBatchRequest' when calling updateEndpointsBatch");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEndpointsBatchResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/endpoints', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGcmChannel operation.
     * @callback module:api/DefaultApi~updateGcmChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateGcmChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateGcmChannelRequest} updateGcmChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGcmChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateGcmChannelResponse}
     */
    updateGcmChannel(applicationId, updateGcmChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGcmChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateGcmChannel");
      }
      // verify the required parameter 'updateGcmChannelRequest' is set
      if (updateGcmChannelRequest === undefined || updateGcmChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateGcmChannelRequest' when calling updateGcmChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateGcmChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/gcm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInAppTemplate operation.
     * @callback module:api/DefaultApi~updateInAppTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInAppTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing message template for messages sent through the in-app message channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateInAppTemplateRequest} updateInAppTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [createNewVersion] <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~updateInAppTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInAppTemplateResponse}
     */
    updateInAppTemplate(templateName, updateInAppTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInAppTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateInAppTemplate");
      }
      // verify the required parameter 'updateInAppTemplateRequest' is set
      if (updateInAppTemplateRequest === undefined || updateInAppTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateInAppTemplateRequest' when calling updateInAppTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'create-new-version': opts['createNewVersion'],
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInAppTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/inapp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJourney operation.
     * @callback module:api/DefaultApi~updateJourneyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateJourneyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration and other settings for a journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {module:model/CreateJourneyRequest} createJourneyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateJourneyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateJourneyResponse}
     */
    updateJourney(applicationId, journeyId, createJourneyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createJourneyRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateJourney");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling updateJourney");
      }
      // verify the required parameter 'createJourneyRequest' is set
      if (createJourneyRequest === undefined || createJourneyRequest === null) {
        throw new Error("Missing the required parameter 'createJourneyRequest' when calling updateJourney");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateJourneyResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJourneyState operation.
     * @callback module:api/DefaultApi~updateJourneyStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateJourneyStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels (stops) an active journey.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} journeyId The unique identifier for the journey.
     * @param {module:model/UpdateJourneyStateRequest} updateJourneyStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateJourneyStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateJourneyStateResponse}
     */
    updateJourneyState(applicationId, journeyId, updateJourneyStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateJourneyStateRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateJourneyState");
      }
      // verify the required parameter 'journeyId' is set
      if (journeyId === undefined || journeyId === null) {
        throw new Error("Missing the required parameter 'journeyId' when calling updateJourneyState");
      }
      // verify the required parameter 'updateJourneyStateRequest' is set
      if (updateJourneyStateRequest === undefined || updateJourneyStateRequest === null) {
        throw new Error("Missing the required parameter 'updateJourneyStateRequest' when calling updateJourneyState");
      }

      let pathParams = {
        'application-id': applicationId,
        'journey-id': journeyId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateJourneyStateResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/journeys/{journey-id}/state', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePushTemplate operation.
     * @callback module:api/DefaultApi~updatePushTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePushTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing message template for messages that are sent through a push notification channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdatePushTemplateRequest} updatePushTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [createNewVersion] <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~updatePushTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePushTemplateResponse}
     */
    updatePushTemplate(templateName, updatePushTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePushTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updatePushTemplate");
      }
      // verify the required parameter 'updatePushTemplateRequest' is set
      if (updatePushTemplateRequest === undefined || updatePushTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updatePushTemplateRequest' when calling updatePushTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'create-new-version': opts['createNewVersion'],
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePushTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/push', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecommenderConfiguration operation.
     * @callback module:api/DefaultApi~updateRecommenderConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRecommenderConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Amazon Pinpoint configuration for a recommender model.
     * @param {String} recommenderId The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateRecommenderConfigurationRequest} updateRecommenderConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRecommenderConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRecommenderConfigurationResponse}
     */
    updateRecommenderConfiguration(recommenderId, updateRecommenderConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRecommenderConfigurationRequest;
      // verify the required parameter 'recommenderId' is set
      if (recommenderId === undefined || recommenderId === null) {
        throw new Error("Missing the required parameter 'recommenderId' when calling updateRecommenderConfiguration");
      }
      // verify the required parameter 'updateRecommenderConfigurationRequest' is set
      if (updateRecommenderConfigurationRequest === undefined || updateRecommenderConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateRecommenderConfigurationRequest' when calling updateRecommenderConfiguration");
      }

      let pathParams = {
        'recommender-id': recommenderId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRecommenderConfigurationResponse;
      return this.apiClient.callApi(
        '/v1/recommenders/{recommender-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSegment operation.
     * @callback module:api/DefaultApi~updateSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {String} segmentId The unique identifier for the segment.
     * @param {module:model/CreateSegmentRequest} createSegmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSegmentResponse}
     */
    updateSegment(applicationId, segmentId, createSegmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSegmentRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateSegment");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling updateSegment");
      }
      // verify the required parameter 'createSegmentRequest' is set
      if (createSegmentRequest === undefined || createSegmentRequest === null) {
        throw new Error("Missing the required parameter 'createSegmentRequest' when calling updateSegment");
      }

      let pathParams = {
        'application-id': applicationId,
        'segment-id': segmentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSegmentResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/segments/{segment-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmsChannel operation.
     * @callback module:api/DefaultApi~updateSmsChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSmsChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateSmsChannelRequest} updateSmsChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSmsChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSmsChannelResponse}
     */
    updateSmsChannel(applicationId, updateSmsChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSmsChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateSmsChannel");
      }
      // verify the required parameter 'updateSmsChannelRequest' is set
      if (updateSmsChannelRequest === undefined || updateSmsChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateSmsChannelRequest' when calling updateSmsChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSmsChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/sms', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSmsTemplate operation.
     * @callback module:api/DefaultApi~updateSmsTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSmsTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing message template for messages that are sent through the SMS channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateSmsTemplateRequest} updateSmsTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [createNewVersion] <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~updateSmsTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSmsTemplateResponse}
     */
    updateSmsTemplate(templateName, updateSmsTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSmsTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateSmsTemplate");
      }
      // verify the required parameter 'updateSmsTemplateRequest' is set
      if (updateSmsTemplateRequest === undefined || updateSmsTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateSmsTemplateRequest' when calling updateSmsTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'create-new-version': opts['createNewVersion'],
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSmsTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/sms', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTemplateActiveVersion operation.
     * @callback module:api/DefaultApi~updateTemplateActiveVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTemplateActiveVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the status of a specific version of a message template to <i>active</i>.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {String} templateType The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.
     * @param {module:model/UpdateTemplateActiveVersionRequest} updateTemplateActiveVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTemplateActiveVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTemplateActiveVersionResponse}
     */
    updateTemplateActiveVersion(templateName, templateType, updateTemplateActiveVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTemplateActiveVersionRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateTemplateActiveVersion");
      }
      // verify the required parameter 'templateType' is set
      if (templateType === undefined || templateType === null) {
        throw new Error("Missing the required parameter 'templateType' when calling updateTemplateActiveVersion");
      }
      // verify the required parameter 'updateTemplateActiveVersionRequest' is set
      if (updateTemplateActiveVersionRequest === undefined || updateTemplateActiveVersionRequest === null) {
        throw new Error("Missing the required parameter 'updateTemplateActiveVersionRequest' when calling updateTemplateActiveVersion");
      }

      let pathParams = {
        'template-name': templateName,
        'template-type': templateType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTemplateActiveVersionResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/{template-type}/active-version', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoiceChannel operation.
     * @callback module:api/DefaultApi~updateVoiceChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVoiceChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables the voice channel for an application or updates the status and settings of the voice channel for an application.
     * @param {String} applicationId The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.
     * @param {module:model/UpdateVoiceChannelRequest} updateVoiceChannelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVoiceChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVoiceChannelResponse}
     */
    updateVoiceChannel(applicationId, updateVoiceChannelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVoiceChannelRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling updateVoiceChannel");
      }
      // verify the required parameter 'updateVoiceChannelRequest' is set
      if (updateVoiceChannelRequest === undefined || updateVoiceChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateVoiceChannelRequest' when calling updateVoiceChannel");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVoiceChannelResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/channels/voice', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVoiceTemplate operation.
     * @callback module:api/DefaultApi~updateVoiceTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVoiceTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing message template for messages that are sent through the voice channel.
     * @param {String} templateName The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.
     * @param {module:model/UpdateVoiceTemplateRequest} updateVoiceTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [createNewVersion] <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
     * @param {String} [version] <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
     * @param {module:api/DefaultApi~updateVoiceTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVoiceTemplateResponse}
     */
    updateVoiceTemplate(templateName, updateVoiceTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVoiceTemplateRequest;
      // verify the required parameter 'templateName' is set
      if (templateName === undefined || templateName === null) {
        throw new Error("Missing the required parameter 'templateName' when calling updateVoiceTemplate");
      }
      // verify the required parameter 'updateVoiceTemplateRequest' is set
      if (updateVoiceTemplateRequest === undefined || updateVoiceTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateVoiceTemplateRequest' when calling updateVoiceTemplate");
      }

      let pathParams = {
        'template-name': templateName
      };
      let queryParams = {
        'create-new-version': opts['createNewVersion'],
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVoiceTemplateResponse;
      return this.apiClient.callApi(
        '/v1/templates/{template-name}/voice', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyOTPMessage operation.
     * @callback module:api/DefaultApi~verifyOTPMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyOTPMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify an OTP
     * @param {String} applicationId The unique ID of your Amazon Pinpoint application.
     * @param {module:model/VerifyOTPMessageRequest} verifyOTPMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~verifyOTPMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyOTPMessageResponse}
     */
    verifyOTPMessage(applicationId, verifyOTPMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = verifyOTPMessageRequest;
      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling verifyOTPMessage");
      }
      // verify the required parameter 'verifyOTPMessageRequest' is set
      if (verifyOTPMessageRequest === undefined || verifyOTPMessageRequest === null) {
        throw new Error("Missing the required parameter 'verifyOTPMessageRequest' when calling verifyOTPMessage");
      }

      let pathParams = {
        'application-id': applicationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyOTPMessageResponse;
      return this.apiClient.callApi(
        '/v1/apps/{application-id}/verify-otp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
