/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCheckLayerAvailabilityRequest;
import org.openapitools.client.model.BatchCheckLayerAvailabilityResponse;
import org.openapitools.client.model.BatchDeleteImageRequest;
import org.openapitools.client.model.BatchDeleteImageResponse;
import org.openapitools.client.model.CompleteLayerUploadRequest;
import org.openapitools.client.model.CompleteLayerUploadResponse;
import org.openapitools.client.model.CreateRepositoryRequest;
import org.openapitools.client.model.CreateRepositoryResponse;
import org.openapitools.client.model.DeleteRepositoryPolicyRequest;
import org.openapitools.client.model.DeleteRepositoryPolicyResponse;
import org.openapitools.client.model.DeleteRepositoryRequest;
import org.openapitools.client.model.DeleteRepositoryResponse;
import org.openapitools.client.model.DescribeImageTagsRequest;
import org.openapitools.client.model.DescribeImageTagsResponse;
import org.openapitools.client.model.DescribeImagesRequest;
import org.openapitools.client.model.DescribeImagesResponse;
import org.openapitools.client.model.DescribeRegistriesRequest;
import org.openapitools.client.model.DescribeRegistriesResponse;
import org.openapitools.client.model.DescribeRepositoriesRequest;
import org.openapitools.client.model.DescribeRepositoriesResponse;
import org.openapitools.client.model.GetAuthorizationTokenResponse;
import org.openapitools.client.model.GetRegistryCatalogDataResponse;
import org.openapitools.client.model.GetRepositoryCatalogDataRequest;
import org.openapitools.client.model.GetRepositoryCatalogDataResponse;
import org.openapitools.client.model.GetRepositoryPolicyRequest;
import org.openapitools.client.model.GetRepositoryPolicyResponse;
import org.openapitools.client.model.InitiateLayerUploadRequest;
import org.openapitools.client.model.InitiateLayerUploadResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutImageRequest;
import org.openapitools.client.model.PutImageResponse;
import org.openapitools.client.model.PutRegistryCatalogDataRequest;
import org.openapitools.client.model.PutRegistryCatalogDataResponse;
import org.openapitools.client.model.PutRepositoryCatalogDataRequest;
import org.openapitools.client.model.PutRepositoryCatalogDataResponse;
import org.openapitools.client.model.SetRepositoryPolicyRequest;
import org.openapitools.client.model.SetRepositoryPolicyResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UploadLayerPartRequest;
import org.openapitools.client.model.UploadLayerPartResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Checks the availability of one or more image layers that are within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCheckLayerAvailabilityTest() throws ApiException {
        String xAmzTarget = null;
        BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchCheckLayerAvailabilityResponse response = api.batchCheckLayerAvailability(xAmzTarget, batchCheckLayerAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a list of specified images that are within a repository in a public registry. Images are specified with either an &lt;code&gt;imageTag&lt;/code&gt; or &lt;code&gt;imageDigest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can remove a tag from an image by specifying the image&#39;s tag in your request. When you remove the last tag from an image, the image is deleted from your repository.&lt;/p&gt; &lt;p&gt;You can completely delete an image (and all of its tags) by specifying the digest of the image in your request.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteImageTest() throws ApiException {
        String xAmzTarget = null;
        BatchDeleteImageRequest batchDeleteImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteImageResponse response = api.batchDeleteImage(xAmzTarget, batchDeleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Informs Amazon ECR that the image layer upload is complete for a specified public registry, repository name, and upload ID. You can optionally provide a &lt;code&gt;sha256&lt;/code&gt; digest of the image layer for data validation purposes.&lt;/p&gt; &lt;p&gt;When an image is pushed, the CompleteLayerUpload API is called once for each new image layer to verify that the upload is complete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeLayerUploadTest() throws ApiException {
        String xAmzTarget = null;
        CompleteLayerUploadRequest completeLayerUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CompleteLayerUploadResponse response = api.completeLayerUpload(xAmzTarget, completeLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a repository in a public registry. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\&quot;&gt;Amazon ECR repositories&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        CreateRepositoryRequest createRepositoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRepositoryResponse response = api.createRepository(xAmzTarget, createRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a repository in a public registry. If the repository contains images, you must either manually delete all images in the repository or use the &lt;code&gt;force&lt;/code&gt; option. This option deletes all images on your behalf before deleting the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRepositoryRequest deleteRepositoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRepositoryResponse response = api.deleteRepository(xAmzTarget, deleteRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the repository policy that&#39;s associated with the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteRepositoryPolicyResponse response = api.deleteRepositoryPolicy(xAmzTarget, deleteRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the image tag details for a repository in a public registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImageTagsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImageTagsRequest describeImageTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImageTagsResponse response = api.describeImageTags(xAmzTarget, describeImageTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns metadata that&#39;s related to the images in a repository in a public registry.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the uncompressed image size. Therefore, it might return a larger image size than the image sizes that are returned by &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeImagesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeImagesRequest describeImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeImagesResponse response = api.describeImages(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns details for a public registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRegistriesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRegistriesRequest describeRegistriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeRegistriesResponse response = api.describeRegistries(xAmzTarget, describeRegistriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Describes repositories that are in a public registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRepositoriesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRepositoriesRequest describeRepositoriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeRepositoriesResponse response = api.describeRepositories(xAmzTarget, describeRepositoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves an authorization token. An authorization token represents your IAM authentication credentials. You can use it to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the &lt;code&gt;ecr-public:GetAuthorizationToken&lt;/code&gt; and &lt;code&gt;sts:GetServiceBearerToken&lt;/code&gt; permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizationTokenTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAuthorizationTokenResponse response = api.getAuthorizationToken(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves catalog metadata for a public registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegistryCatalogDataTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRegistryCatalogDataResponse response = api.getRegistryCatalogData(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryCatalogDataTest() throws ApiException {
        String xAmzTarget = null;
        GetRepositoryCatalogDataRequest getRepositoryCatalogDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRepositoryCatalogDataResponse response = api.getRepositoryCatalogData(xAmzTarget, getRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the repository policy for the specified repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepositoryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetRepositoryPolicyRequest getRepositoryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRepositoryPolicyResponse response = api.getRepositoryPolicy(xAmzTarget, getRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Notifies Amazon ECR that you intend to upload an image layer.&lt;/p&gt; &lt;p&gt;When an image is pushed, the InitiateLayerUpload API is called once for each image layer that hasn&#39;t already been uploaded. Whether an image layer uploads is determined by the BatchCheckLayerAvailability API action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateLayerUploadTest() throws ApiException {
        String xAmzTarget = null;
        InitiateLayerUploadRequest initiateLayerUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InitiateLayerUploadResponse response = api.initiateLayerUpload(xAmzTarget, initiateLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List the tags for an Amazon ECR Public resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates or updates the image manifest and tags that are associated with an image.&lt;/p&gt; &lt;p&gt;When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags that are associated with the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putImageTest() throws ApiException {
        String xAmzTarget = null;
        PutImageRequest putImageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutImageResponse response = api.putImage(xAmzTarget, putImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create or update the catalog data for a public registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRegistryCatalogDataTest() throws ApiException {
        String xAmzTarget = null;
        PutRegistryCatalogDataRequest putRegistryCatalogDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutRegistryCatalogDataResponse response = api.putRegistryCatalogData(xAmzTarget, putRegistryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the catalog data for a repository in a public registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRepositoryCatalogDataTest() throws ApiException {
        String xAmzTarget = null;
        PutRepositoryCatalogDataRequest putRepositoryCatalogDataRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutRepositoryCatalogDataResponse response = api.putRepositoryCatalogData(xAmzTarget, putRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies a repository policy to the specified public repository to control access permissions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\&quot;&gt;Amazon ECR Repository Policies&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRepositoryPolicyTest() throws ApiException {
        String xAmzTarget = null;
        SetRepositoryPolicyRequest setRepositoryPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SetRepositoryPolicyResponse response = api.setRepositoryPolicy(xAmzTarget, setRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes specified tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Uploads an image layer part to Amazon ECR.&lt;/p&gt; &lt;p&gt;When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (about 20MB). The UploadLayerPart API is called once for each new image layer part.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadLayerPartTest() throws ApiException {
        String xAmzTarget = null;
        UploadLayerPartRequest uploadLayerPartRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UploadLayerPartResponse response = api.uploadLayerPart(xAmzTarget, uploadLayerPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
