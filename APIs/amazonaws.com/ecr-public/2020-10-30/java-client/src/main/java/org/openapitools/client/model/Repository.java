/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing a repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Repository {
  public static final String SERIALIZED_NAME_REPOSITORY_ARN = "repositoryArn";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ARN)
  private String repositoryArn;

  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_REPOSITORY_URI = "repositoryUri";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_URI)
  private String repositoryUri;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public Repository() {
  }

  public Repository repositoryArn(String repositoryArn) {
    this.repositoryArn = repositoryArn;
    return this;
  }

  /**
   * Get repositoryArn
   * @return repositoryArn
   */
  @javax.annotation.Nullable
  public String getRepositoryArn() {
    return repositoryArn;
  }

  public void setRepositoryArn(String repositoryArn) {
    this.repositoryArn = repositoryArn;
  }


  public Repository registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public Repository repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public Repository repositoryUri(String repositoryUri) {
    this.repositoryUri = repositoryUri;
    return this;
  }

  /**
   * Get repositoryUri
   * @return repositoryUri
   */
  @javax.annotation.Nullable
  public String getRepositoryUri() {
    return repositoryUri;
  }

  public void setRepositoryUri(String repositoryUri) {
    this.repositoryUri = repositoryUri;
  }


  public Repository createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.repositoryArn, repository.repositoryArn) &&
        Objects.equals(this.registryId, repository.registryId) &&
        Objects.equals(this.repositoryName, repository.repositoryName) &&
        Objects.equals(this.repositoryUri, repository.repositoryUri) &&
        Objects.equals(this.createdAt, repository.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositoryArn, registryId, repositoryName, repositoryUri, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    repositoryArn: ").append(toIndentedString(repositoryArn)).append("\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    repositoryUri: ").append(toIndentedString(repositoryUri)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("repositoryArn");
    openapiFields.add("registryId");
    openapiFields.add("repositoryName");
    openapiFields.add("repositoryUri");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Repository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Repository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Repository is not found in the empty JSON string", Repository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Repository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Repository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `repositoryArn`
      if (jsonObj.get("repositoryArn") != null && !jsonObj.get("repositoryArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryArn"));
      }
      // validate the optional field `registryId`
      if (jsonObj.get("registryId") != null && !jsonObj.get("registryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registryId"));
      }
      // validate the optional field `repositoryName`
      if (jsonObj.get("repositoryName") != null && !jsonObj.get("repositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryName"));
      }
      // validate the optional field `repositoryUri`
      if (jsonObj.get("repositoryUri") != null && !jsonObj.get("repositoryUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryUri"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Repository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Repository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Repository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Repository.class));

       return (TypeAdapter<T>) new TypeAdapter<Repository>() {
           @Override
           public void write(JsonWriter out, Repository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Repository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Repository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Repository
   * @throws IOException if the JSON string is invalid with respect to Repository
   */
  public static Repository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Repository.class);
  }

  /**
   * Convert an instance of Repository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

