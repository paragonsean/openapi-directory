/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UploadLayerPartRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadLayerPartRequest {
  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_UPLOAD_ID = "uploadId";
  @SerializedName(SERIALIZED_NAME_UPLOAD_ID)
  private String uploadId;

  public static final String SERIALIZED_NAME_PART_FIRST_BYTE = "partFirstByte";
  @SerializedName(SERIALIZED_NAME_PART_FIRST_BYTE)
  private Integer partFirstByte;

  public static final String SERIALIZED_NAME_PART_LAST_BYTE = "partLastByte";
  @SerializedName(SERIALIZED_NAME_PART_LAST_BYTE)
  private Integer partLastByte;

  public static final String SERIALIZED_NAME_LAYER_PART_BLOB = "layerPartBlob";
  @SerializedName(SERIALIZED_NAME_LAYER_PART_BLOB)
  private String layerPartBlob;

  public UploadLayerPartRequest() {
  }

  public UploadLayerPartRequest registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public UploadLayerPartRequest repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nonnull
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public UploadLayerPartRequest uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

  /**
   * Get uploadId
   * @return uploadId
   */
  @javax.annotation.Nonnull
  public String getUploadId() {
    return uploadId;
  }

  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }


  public UploadLayerPartRequest partFirstByte(Integer partFirstByte) {
    this.partFirstByte = partFirstByte;
    return this;
  }

  /**
   * Get partFirstByte
   * @return partFirstByte
   */
  @javax.annotation.Nonnull
  public Integer getPartFirstByte() {
    return partFirstByte;
  }

  public void setPartFirstByte(Integer partFirstByte) {
    this.partFirstByte = partFirstByte;
  }


  public UploadLayerPartRequest partLastByte(Integer partLastByte) {
    this.partLastByte = partLastByte;
    return this;
  }

  /**
   * Get partLastByte
   * @return partLastByte
   */
  @javax.annotation.Nonnull
  public Integer getPartLastByte() {
    return partLastByte;
  }

  public void setPartLastByte(Integer partLastByte) {
    this.partLastByte = partLastByte;
  }


  public UploadLayerPartRequest layerPartBlob(String layerPartBlob) {
    this.layerPartBlob = layerPartBlob;
    return this;
  }

  /**
   * Get layerPartBlob
   * @return layerPartBlob
   */
  @javax.annotation.Nonnull
  public String getLayerPartBlob() {
    return layerPartBlob;
  }

  public void setLayerPartBlob(String layerPartBlob) {
    this.layerPartBlob = layerPartBlob;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadLayerPartRequest uploadLayerPartRequest = (UploadLayerPartRequest) o;
    return Objects.equals(this.registryId, uploadLayerPartRequest.registryId) &&
        Objects.equals(this.repositoryName, uploadLayerPartRequest.repositoryName) &&
        Objects.equals(this.uploadId, uploadLayerPartRequest.uploadId) &&
        Objects.equals(this.partFirstByte, uploadLayerPartRequest.partFirstByte) &&
        Objects.equals(this.partLastByte, uploadLayerPartRequest.partLastByte) &&
        Objects.equals(this.layerPartBlob, uploadLayerPartRequest.layerPartBlob);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryId, repositoryName, uploadId, partFirstByte, partLastByte, layerPartBlob);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadLayerPartRequest {\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("    partFirstByte: ").append(toIndentedString(partFirstByte)).append("\n");
    sb.append("    partLastByte: ").append(toIndentedString(partLastByte)).append("\n");
    sb.append("    layerPartBlob: ").append(toIndentedString(layerPartBlob)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registryId");
    openapiFields.add("repositoryName");
    openapiFields.add("uploadId");
    openapiFields.add("partFirstByte");
    openapiFields.add("partLastByte");
    openapiFields.add("layerPartBlob");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("repositoryName");
    openapiRequiredFields.add("uploadId");
    openapiRequiredFields.add("partFirstByte");
    openapiRequiredFields.add("partLastByte");
    openapiRequiredFields.add("layerPartBlob");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadLayerPartRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadLayerPartRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadLayerPartRequest is not found in the empty JSON string", UploadLayerPartRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadLayerPartRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadLayerPartRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadLayerPartRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `registryId`
      if (jsonObj.get("registryId") != null && !jsonObj.get("registryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registryId"));
      }
      // validate the required field `repositoryName`
      String.validateJsonElement(jsonObj.get("repositoryName"));
      // validate the required field `uploadId`
      String.validateJsonElement(jsonObj.get("uploadId"));
      // validate the required field `partFirstByte`
      Integer.validateJsonElement(jsonObj.get("partFirstByte"));
      // validate the required field `partLastByte`
      Integer.validateJsonElement(jsonObj.get("partLastByte"));
      // validate the required field `layerPartBlob`
      String.validateJsonElement(jsonObj.get("layerPartBlob"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadLayerPartRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadLayerPartRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadLayerPartRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadLayerPartRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadLayerPartRequest>() {
           @Override
           public void write(JsonWriter out, UploadLayerPartRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadLayerPartRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadLayerPartRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadLayerPartRequest
   * @throws IOException if the JSON string is invalid with respect to UploadLayerPartRequest
   */
  public static UploadLayerPartRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadLayerPartRequest.class);
  }

  /**
   * Convert an instance of UploadLayerPartRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

