/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageImageId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutImageResponseImage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutImageResponseImage {
  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REPOSITORY_NAME = "repositoryName";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_NAME)
  private String repositoryName;

  public static final String SERIALIZED_NAME_IMAGE_ID = "imageId";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private ImageImageId imageId;

  public static final String SERIALIZED_NAME_IMAGE_MANIFEST = "imageManifest";
  @SerializedName(SERIALIZED_NAME_IMAGE_MANIFEST)
  private String imageManifest;

  public static final String SERIALIZED_NAME_IMAGE_MANIFEST_MEDIA_TYPE = "imageManifestMediaType";
  @SerializedName(SERIALIZED_NAME_IMAGE_MANIFEST_MEDIA_TYPE)
  private String imageManifestMediaType;

  public PutImageResponseImage() {
  }

  public PutImageResponseImage registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nullable
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public PutImageResponseImage repositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
    return this;
  }

  /**
   * Get repositoryName
   * @return repositoryName
   */
  @javax.annotation.Nullable
  public String getRepositoryName() {
    return repositoryName;
  }

  public void setRepositoryName(String repositoryName) {
    this.repositoryName = repositoryName;
  }


  public PutImageResponseImage imageId(ImageImageId imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Get imageId
   * @return imageId
   */
  @javax.annotation.Nullable
  public ImageImageId getImageId() {
    return imageId;
  }

  public void setImageId(ImageImageId imageId) {
    this.imageId = imageId;
  }


  public PutImageResponseImage imageManifest(String imageManifest) {
    this.imageManifest = imageManifest;
    return this;
  }

  /**
   * Get imageManifest
   * @return imageManifest
   */
  @javax.annotation.Nullable
  public String getImageManifest() {
    return imageManifest;
  }

  public void setImageManifest(String imageManifest) {
    this.imageManifest = imageManifest;
  }


  public PutImageResponseImage imageManifestMediaType(String imageManifestMediaType) {
    this.imageManifestMediaType = imageManifestMediaType;
    return this;
  }

  /**
   * Get imageManifestMediaType
   * @return imageManifestMediaType
   */
  @javax.annotation.Nullable
  public String getImageManifestMediaType() {
    return imageManifestMediaType;
  }

  public void setImageManifestMediaType(String imageManifestMediaType) {
    this.imageManifestMediaType = imageManifestMediaType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutImageResponseImage putImageResponseImage = (PutImageResponseImage) o;
    return Objects.equals(this.registryId, putImageResponseImage.registryId) &&
        Objects.equals(this.repositoryName, putImageResponseImage.repositoryName) &&
        Objects.equals(this.imageId, putImageResponseImage.imageId) &&
        Objects.equals(this.imageManifest, putImageResponseImage.imageManifest) &&
        Objects.equals(this.imageManifestMediaType, putImageResponseImage.imageManifestMediaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryId, repositoryName, imageId, imageManifest, imageManifestMediaType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutImageResponseImage {\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    repositoryName: ").append(toIndentedString(repositoryName)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    imageManifest: ").append(toIndentedString(imageManifest)).append("\n");
    sb.append("    imageManifestMediaType: ").append(toIndentedString(imageManifestMediaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registryId");
    openapiFields.add("repositoryName");
    openapiFields.add("imageId");
    openapiFields.add("imageManifest");
    openapiFields.add("imageManifestMediaType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutImageResponseImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutImageResponseImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutImageResponseImage is not found in the empty JSON string", PutImageResponseImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutImageResponseImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutImageResponseImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `registryId`
      if (jsonObj.get("registryId") != null && !jsonObj.get("registryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("registryId"));
      }
      // validate the optional field `repositoryName`
      if (jsonObj.get("repositoryName") != null && !jsonObj.get("repositoryName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("repositoryName"));
      }
      // validate the optional field `imageId`
      if (jsonObj.get("imageId") != null && !jsonObj.get("imageId").isJsonNull()) {
        ImageImageId.validateJsonElement(jsonObj.get("imageId"));
      }
      // validate the optional field `imageManifest`
      if (jsonObj.get("imageManifest") != null && !jsonObj.get("imageManifest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageManifest"));
      }
      // validate the optional field `imageManifestMediaType`
      if (jsonObj.get("imageManifestMediaType") != null && !jsonObj.get("imageManifestMediaType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageManifestMediaType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutImageResponseImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutImageResponseImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutImageResponseImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutImageResponseImage.class));

       return (TypeAdapter<T>) new TypeAdapter<PutImageResponseImage>() {
           @Override
           public void write(JsonWriter out, PutImageResponseImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutImageResponseImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutImageResponseImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutImageResponseImage
   * @throws IOException if the JSON string is invalid with respect to PutImageResponseImage
   */
  public static PutImageResponseImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutImageResponseImage.class);
  }

  /**
   * Convert an instance of PutImageResponseImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

