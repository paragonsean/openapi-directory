/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageTagDetailImageDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageTagDetailImageDetail {
  public static final String SERIALIZED_NAME_IMAGE_DIGEST = "imageDigest";
  @SerializedName(SERIALIZED_NAME_IMAGE_DIGEST)
  private String imageDigest;

  public static final String SERIALIZED_NAME_IMAGE_SIZE_IN_BYTES = "imageSizeInBytes";
  @SerializedName(SERIALIZED_NAME_IMAGE_SIZE_IN_BYTES)
  private Integer imageSizeInBytes;

  public static final String SERIALIZED_NAME_IMAGE_PUSHED_AT = "imagePushedAt";
  @SerializedName(SERIALIZED_NAME_IMAGE_PUSHED_AT)
  private OffsetDateTime imagePushedAt;

  public static final String SERIALIZED_NAME_IMAGE_MANIFEST_MEDIA_TYPE = "imageManifestMediaType";
  @SerializedName(SERIALIZED_NAME_IMAGE_MANIFEST_MEDIA_TYPE)
  private String imageManifestMediaType;

  public static final String SERIALIZED_NAME_ARTIFACT_MEDIA_TYPE = "artifactMediaType";
  @SerializedName(SERIALIZED_NAME_ARTIFACT_MEDIA_TYPE)
  private String artifactMediaType;

  public ImageTagDetailImageDetail() {
  }

  public ImageTagDetailImageDetail imageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
    return this;
  }

  /**
   * Get imageDigest
   * @return imageDigest
   */
  @javax.annotation.Nullable
  public String getImageDigest() {
    return imageDigest;
  }

  public void setImageDigest(String imageDigest) {
    this.imageDigest = imageDigest;
  }


  public ImageTagDetailImageDetail imageSizeInBytes(Integer imageSizeInBytes) {
    this.imageSizeInBytes = imageSizeInBytes;
    return this;
  }

  /**
   * Get imageSizeInBytes
   * @return imageSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getImageSizeInBytes() {
    return imageSizeInBytes;
  }

  public void setImageSizeInBytes(Integer imageSizeInBytes) {
    this.imageSizeInBytes = imageSizeInBytes;
  }


  public ImageTagDetailImageDetail imagePushedAt(OffsetDateTime imagePushedAt) {
    this.imagePushedAt = imagePushedAt;
    return this;
  }

  /**
   * Get imagePushedAt
   * @return imagePushedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getImagePushedAt() {
    return imagePushedAt;
  }

  public void setImagePushedAt(OffsetDateTime imagePushedAt) {
    this.imagePushedAt = imagePushedAt;
  }


  public ImageTagDetailImageDetail imageManifestMediaType(String imageManifestMediaType) {
    this.imageManifestMediaType = imageManifestMediaType;
    return this;
  }

  /**
   * Get imageManifestMediaType
   * @return imageManifestMediaType
   */
  @javax.annotation.Nullable
  public String getImageManifestMediaType() {
    return imageManifestMediaType;
  }

  public void setImageManifestMediaType(String imageManifestMediaType) {
    this.imageManifestMediaType = imageManifestMediaType;
  }


  public ImageTagDetailImageDetail artifactMediaType(String artifactMediaType) {
    this.artifactMediaType = artifactMediaType;
    return this;
  }

  /**
   * Get artifactMediaType
   * @return artifactMediaType
   */
  @javax.annotation.Nullable
  public String getArtifactMediaType() {
    return artifactMediaType;
  }

  public void setArtifactMediaType(String artifactMediaType) {
    this.artifactMediaType = artifactMediaType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageTagDetailImageDetail imageTagDetailImageDetail = (ImageTagDetailImageDetail) o;
    return Objects.equals(this.imageDigest, imageTagDetailImageDetail.imageDigest) &&
        Objects.equals(this.imageSizeInBytes, imageTagDetailImageDetail.imageSizeInBytes) &&
        Objects.equals(this.imagePushedAt, imageTagDetailImageDetail.imagePushedAt) &&
        Objects.equals(this.imageManifestMediaType, imageTagDetailImageDetail.imageManifestMediaType) &&
        Objects.equals(this.artifactMediaType, imageTagDetailImageDetail.artifactMediaType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageDigest, imageSizeInBytes, imagePushedAt, imageManifestMediaType, artifactMediaType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageTagDetailImageDetail {\n");
    sb.append("    imageDigest: ").append(toIndentedString(imageDigest)).append("\n");
    sb.append("    imageSizeInBytes: ").append(toIndentedString(imageSizeInBytes)).append("\n");
    sb.append("    imagePushedAt: ").append(toIndentedString(imagePushedAt)).append("\n");
    sb.append("    imageManifestMediaType: ").append(toIndentedString(imageManifestMediaType)).append("\n");
    sb.append("    artifactMediaType: ").append(toIndentedString(artifactMediaType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageDigest");
    openapiFields.add("imageSizeInBytes");
    openapiFields.add("imagePushedAt");
    openapiFields.add("imageManifestMediaType");
    openapiFields.add("artifactMediaType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageTagDetailImageDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageTagDetailImageDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageTagDetailImageDetail is not found in the empty JSON string", ImageTagDetailImageDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageTagDetailImageDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageTagDetailImageDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `imageDigest`
      if (jsonObj.get("imageDigest") != null && !jsonObj.get("imageDigest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageDigest"));
      }
      // validate the optional field `imageSizeInBytes`
      if (jsonObj.get("imageSizeInBytes") != null && !jsonObj.get("imageSizeInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("imageSizeInBytes"));
      }
      // validate the optional field `imagePushedAt`
      if (jsonObj.get("imagePushedAt") != null && !jsonObj.get("imagePushedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("imagePushedAt"));
      }
      // validate the optional field `imageManifestMediaType`
      if (jsonObj.get("imageManifestMediaType") != null && !jsonObj.get("imageManifestMediaType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageManifestMediaType"));
      }
      // validate the optional field `artifactMediaType`
      if (jsonObj.get("artifactMediaType") != null && !jsonObj.get("artifactMediaType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("artifactMediaType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageTagDetailImageDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageTagDetailImageDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageTagDetailImageDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageTagDetailImageDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageTagDetailImageDetail>() {
           @Override
           public void write(JsonWriter out, ImageTagDetailImageDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageTagDetailImageDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageTagDetailImageDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageTagDetailImageDetail
   * @throws IOException if the JSON string is invalid with respect to ImageTagDetailImageDetail
   */
  public static ImageTagDetailImageDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageTagDetailImageDetail.class);
  }

  /**
   * Convert an instance of ImageTagDetailImageDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

