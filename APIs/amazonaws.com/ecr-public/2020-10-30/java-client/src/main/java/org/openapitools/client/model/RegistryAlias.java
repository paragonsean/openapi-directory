/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegistryAliasStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object representing the aliases for a public registry. A public registry is given an alias when it&#39;s created. However, a custom alias can be set using the Amazon ECR console. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html\&quot;&gt;Registries&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistryAlias {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RegistryAliasStatus status;

  public static final String SERIALIZED_NAME_PRIMARY_REGISTRY_ALIAS = "primaryRegistryAlias";
  @SerializedName(SERIALIZED_NAME_PRIMARY_REGISTRY_ALIAS)
  private Boolean primaryRegistryAlias;

  public static final String SERIALIZED_NAME_DEFAULT_REGISTRY_ALIAS = "defaultRegistryAlias";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REGISTRY_ALIAS)
  private Boolean defaultRegistryAlias;

  public RegistryAlias() {
  }

  public RegistryAlias name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RegistryAlias status(RegistryAliasStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public RegistryAliasStatus getStatus() {
    return status;
  }

  public void setStatus(RegistryAliasStatus status) {
    this.status = status;
  }


  public RegistryAlias primaryRegistryAlias(Boolean primaryRegistryAlias) {
    this.primaryRegistryAlias = primaryRegistryAlias;
    return this;
  }

  /**
   * Get primaryRegistryAlias
   * @return primaryRegistryAlias
   */
  @javax.annotation.Nonnull
  public Boolean getPrimaryRegistryAlias() {
    return primaryRegistryAlias;
  }

  public void setPrimaryRegistryAlias(Boolean primaryRegistryAlias) {
    this.primaryRegistryAlias = primaryRegistryAlias;
  }


  public RegistryAlias defaultRegistryAlias(Boolean defaultRegistryAlias) {
    this.defaultRegistryAlias = defaultRegistryAlias;
    return this;
  }

  /**
   * Get defaultRegistryAlias
   * @return defaultRegistryAlias
   */
  @javax.annotation.Nonnull
  public Boolean getDefaultRegistryAlias() {
    return defaultRegistryAlias;
  }

  public void setDefaultRegistryAlias(Boolean defaultRegistryAlias) {
    this.defaultRegistryAlias = defaultRegistryAlias;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistryAlias registryAlias = (RegistryAlias) o;
    return Objects.equals(this.name, registryAlias.name) &&
        Objects.equals(this.status, registryAlias.status) &&
        Objects.equals(this.primaryRegistryAlias, registryAlias.primaryRegistryAlias) &&
        Objects.equals(this.defaultRegistryAlias, registryAlias.defaultRegistryAlias);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, status, primaryRegistryAlias, defaultRegistryAlias);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistryAlias {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    primaryRegistryAlias: ").append(toIndentedString(primaryRegistryAlias)).append("\n");
    sb.append("    defaultRegistryAlias: ").append(toIndentedString(defaultRegistryAlias)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("primaryRegistryAlias");
    openapiFields.add("defaultRegistryAlias");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("primaryRegistryAlias");
    openapiRequiredFields.add("defaultRegistryAlias");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistryAlias
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistryAlias.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistryAlias is not found in the empty JSON string", RegistryAlias.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistryAlias.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistryAlias` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistryAlias.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `status`
      RegistryAliasStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `primaryRegistryAlias`
      Boolean.validateJsonElement(jsonObj.get("primaryRegistryAlias"));
      // validate the required field `defaultRegistryAlias`
      Boolean.validateJsonElement(jsonObj.get("defaultRegistryAlias"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistryAlias.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistryAlias' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistryAlias> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistryAlias.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistryAlias>() {
           @Override
           public void write(JsonWriter out, RegistryAlias value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistryAlias read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistryAlias given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistryAlias
   * @throws IOException if the JSON string is invalid with respect to RegistryAlias
   */
  public static RegistryAlias fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistryAlias.class);
  }

  /**
   * Convert an instance of RegistryAlias to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

