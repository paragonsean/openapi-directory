/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The catalog data for a repository. This data is publicly visible in the Amazon ECR Public Gallery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepositoryCatalogData {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ARCHITECTURES = "architectures";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURES)
  private List architectures;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEMS = "operatingSystems";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEMS)
  private List operatingSystems;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  private String logoUrl;

  public static final String SERIALIZED_NAME_ABOUT_TEXT = "aboutText";
  @SerializedName(SERIALIZED_NAME_ABOUT_TEXT)
  private String aboutText;

  public static final String SERIALIZED_NAME_USAGE_TEXT = "usageText";
  @SerializedName(SERIALIZED_NAME_USAGE_TEXT)
  private String usageText;

  public static final String SERIALIZED_NAME_MARKETPLACE_CERTIFIED = "marketplaceCertified";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_CERTIFIED)
  private Boolean marketplaceCertified;

  public RepositoryCatalogData() {
  }

  public RepositoryCatalogData description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RepositoryCatalogData architectures(List architectures) {
    this.architectures = architectures;
    return this;
  }

  /**
   * Get architectures
   * @return architectures
   */
  @javax.annotation.Nullable
  public List getArchitectures() {
    return architectures;
  }

  public void setArchitectures(List architectures) {
    this.architectures = architectures;
  }


  public RepositoryCatalogData operatingSystems(List operatingSystems) {
    this.operatingSystems = operatingSystems;
    return this;
  }

  /**
   * Get operatingSystems
   * @return operatingSystems
   */
  @javax.annotation.Nullable
  public List getOperatingSystems() {
    return operatingSystems;
  }

  public void setOperatingSystems(List operatingSystems) {
    this.operatingSystems = operatingSystems;
  }


  public RepositoryCatalogData logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }


  public RepositoryCatalogData aboutText(String aboutText) {
    this.aboutText = aboutText;
    return this;
  }

  /**
   * Get aboutText
   * @return aboutText
   */
  @javax.annotation.Nullable
  public String getAboutText() {
    return aboutText;
  }

  public void setAboutText(String aboutText) {
    this.aboutText = aboutText;
  }


  public RepositoryCatalogData usageText(String usageText) {
    this.usageText = usageText;
    return this;
  }

  /**
   * Get usageText
   * @return usageText
   */
  @javax.annotation.Nullable
  public String getUsageText() {
    return usageText;
  }

  public void setUsageText(String usageText) {
    this.usageText = usageText;
  }


  public RepositoryCatalogData marketplaceCertified(Boolean marketplaceCertified) {
    this.marketplaceCertified = marketplaceCertified;
    return this;
  }

  /**
   * Get marketplaceCertified
   * @return marketplaceCertified
   */
  @javax.annotation.Nullable
  public Boolean getMarketplaceCertified() {
    return marketplaceCertified;
  }

  public void setMarketplaceCertified(Boolean marketplaceCertified) {
    this.marketplaceCertified = marketplaceCertified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryCatalogData repositoryCatalogData = (RepositoryCatalogData) o;
    return Objects.equals(this.description, repositoryCatalogData.description) &&
        Objects.equals(this.architectures, repositoryCatalogData.architectures) &&
        Objects.equals(this.operatingSystems, repositoryCatalogData.operatingSystems) &&
        Objects.equals(this.logoUrl, repositoryCatalogData.logoUrl) &&
        Objects.equals(this.aboutText, repositoryCatalogData.aboutText) &&
        Objects.equals(this.usageText, repositoryCatalogData.usageText) &&
        Objects.equals(this.marketplaceCertified, repositoryCatalogData.marketplaceCertified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, architectures, operatingSystems, logoUrl, aboutText, usageText, marketplaceCertified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryCatalogData {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    architectures: ").append(toIndentedString(architectures)).append("\n");
    sb.append("    operatingSystems: ").append(toIndentedString(operatingSystems)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("    aboutText: ").append(toIndentedString(aboutText)).append("\n");
    sb.append("    usageText: ").append(toIndentedString(usageText)).append("\n");
    sb.append("    marketplaceCertified: ").append(toIndentedString(marketplaceCertified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("architectures");
    openapiFields.add("operatingSystems");
    openapiFields.add("logoUrl");
    openapiFields.add("aboutText");
    openapiFields.add("usageText");
    openapiFields.add("marketplaceCertified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepositoryCatalogData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepositoryCatalogData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepositoryCatalogData is not found in the empty JSON string", RepositoryCatalogData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepositoryCatalogData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepositoryCatalogData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `architectures`
      if (jsonObj.get("architectures") != null && !jsonObj.get("architectures").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("architectures"));
      }
      // validate the optional field `operatingSystems`
      if (jsonObj.get("operatingSystems") != null && !jsonObj.get("operatingSystems").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("operatingSystems"));
      }
      // validate the optional field `logoUrl`
      if (jsonObj.get("logoUrl") != null && !jsonObj.get("logoUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logoUrl"));
      }
      // validate the optional field `aboutText`
      if (jsonObj.get("aboutText") != null && !jsonObj.get("aboutText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("aboutText"));
      }
      // validate the optional field `usageText`
      if (jsonObj.get("usageText") != null && !jsonObj.get("usageText").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("usageText"));
      }
      // validate the optional field `marketplaceCertified`
      if (jsonObj.get("marketplaceCertified") != null && !jsonObj.get("marketplaceCertified").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("marketplaceCertified"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepositoryCatalogData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepositoryCatalogData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepositoryCatalogData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepositoryCatalogData.class));

       return (TypeAdapter<T>) new TypeAdapter<RepositoryCatalogData>() {
           @Override
           public void write(JsonWriter out, RepositoryCatalogData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepositoryCatalogData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepositoryCatalogData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepositoryCatalogData
   * @throws IOException if the JSON string is invalid with respect to RepositoryCatalogData
   */
  public static RepositoryCatalogData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepositoryCatalogData.class);
  }

  /**
   * Convert an instance of RepositoryCatalogData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

