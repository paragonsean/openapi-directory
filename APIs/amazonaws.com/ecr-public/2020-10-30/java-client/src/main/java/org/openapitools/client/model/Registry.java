/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of a public registry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Registry {
  public static final String SERIALIZED_NAME_REGISTRY_ID = "registryId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ID)
  private String registryId;

  public static final String SERIALIZED_NAME_REGISTRY_ARN = "registryArn";
  @SerializedName(SERIALIZED_NAME_REGISTRY_ARN)
  private String registryArn;

  public static final String SERIALIZED_NAME_REGISTRY_URI = "registryUri";
  @SerializedName(SERIALIZED_NAME_REGISTRY_URI)
  private String registryUri;

  public static final String SERIALIZED_NAME_VERIFIED = "verified";
  @SerializedName(SERIALIZED_NAME_VERIFIED)
  private Boolean verified;

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private List aliases;

  public Registry() {
  }

  public Registry registryId(String registryId) {
    this.registryId = registryId;
    return this;
  }

  /**
   * Get registryId
   * @return registryId
   */
  @javax.annotation.Nonnull
  public String getRegistryId() {
    return registryId;
  }

  public void setRegistryId(String registryId) {
    this.registryId = registryId;
  }


  public Registry registryArn(String registryArn) {
    this.registryArn = registryArn;
    return this;
  }

  /**
   * Get registryArn
   * @return registryArn
   */
  @javax.annotation.Nonnull
  public String getRegistryArn() {
    return registryArn;
  }

  public void setRegistryArn(String registryArn) {
    this.registryArn = registryArn;
  }


  public Registry registryUri(String registryUri) {
    this.registryUri = registryUri;
    return this;
  }

  /**
   * Get registryUri
   * @return registryUri
   */
  @javax.annotation.Nonnull
  public String getRegistryUri() {
    return registryUri;
  }

  public void setRegistryUri(String registryUri) {
    this.registryUri = registryUri;
  }


  public Registry verified(Boolean verified) {
    this.verified = verified;
    return this;
  }

  /**
   * Get verified
   * @return verified
   */
  @javax.annotation.Nonnull
  public Boolean getVerified() {
    return verified;
  }

  public void setVerified(Boolean verified) {
    this.verified = verified;
  }


  public Registry aliases(List aliases) {
    this.aliases = aliases;
    return this;
  }

  /**
   * Get aliases
   * @return aliases
   */
  @javax.annotation.Nonnull
  public List getAliases() {
    return aliases;
  }

  public void setAliases(List aliases) {
    this.aliases = aliases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Registry registry = (Registry) o;
    return Objects.equals(this.registryId, registry.registryId) &&
        Objects.equals(this.registryArn, registry.registryArn) &&
        Objects.equals(this.registryUri, registry.registryUri) &&
        Objects.equals(this.verified, registry.verified) &&
        Objects.equals(this.aliases, registry.aliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryId, registryArn, registryUri, verified, aliases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Registry {\n");
    sb.append("    registryId: ").append(toIndentedString(registryId)).append("\n");
    sb.append("    registryArn: ").append(toIndentedString(registryArn)).append("\n");
    sb.append("    registryUri: ").append(toIndentedString(registryUri)).append("\n");
    sb.append("    verified: ").append(toIndentedString(verified)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("registryId");
    openapiFields.add("registryArn");
    openapiFields.add("registryUri");
    openapiFields.add("verified");
    openapiFields.add("aliases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("registryId");
    openapiRequiredFields.add("registryArn");
    openapiRequiredFields.add("registryUri");
    openapiRequiredFields.add("verified");
    openapiRequiredFields.add("aliases");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Registry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Registry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Registry is not found in the empty JSON string", Registry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Registry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Registry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Registry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `registryId`
      String.validateJsonElement(jsonObj.get("registryId"));
      // validate the required field `registryArn`
      String.validateJsonElement(jsonObj.get("registryArn"));
      // validate the required field `registryUri`
      String.validateJsonElement(jsonObj.get("registryUri"));
      // validate the required field `verified`
      Boolean.validateJsonElement(jsonObj.get("verified"));
      // validate the required field `aliases`
      List.validateJsonElement(jsonObj.get("aliases"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Registry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Registry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Registry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Registry.class));

       return (TypeAdapter<T>) new TypeAdapter<Registry>() {
           @Override
           public void write(JsonWriter out, Registry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Registry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Registry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Registry
   * @throws IOException if the JSON string is invalid with respect to Registry
   */
  public static Registry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Registry.class);
  }

  /**
   * Convert an instance of Registry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

