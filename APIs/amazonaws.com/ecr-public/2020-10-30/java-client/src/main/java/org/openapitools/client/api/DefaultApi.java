/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchCheckLayerAvailabilityRequest;
import org.openapitools.client.model.BatchCheckLayerAvailabilityResponse;
import org.openapitools.client.model.BatchDeleteImageRequest;
import org.openapitools.client.model.BatchDeleteImageResponse;
import org.openapitools.client.model.CompleteLayerUploadRequest;
import org.openapitools.client.model.CompleteLayerUploadResponse;
import org.openapitools.client.model.CreateRepositoryRequest;
import org.openapitools.client.model.CreateRepositoryResponse;
import org.openapitools.client.model.DeleteRepositoryPolicyRequest;
import org.openapitools.client.model.DeleteRepositoryPolicyResponse;
import org.openapitools.client.model.DeleteRepositoryRequest;
import org.openapitools.client.model.DeleteRepositoryResponse;
import org.openapitools.client.model.DescribeImageTagsRequest;
import org.openapitools.client.model.DescribeImageTagsResponse;
import org.openapitools.client.model.DescribeImagesRequest;
import org.openapitools.client.model.DescribeImagesResponse;
import org.openapitools.client.model.DescribeRegistriesRequest;
import org.openapitools.client.model.DescribeRegistriesResponse;
import org.openapitools.client.model.DescribeRepositoriesRequest;
import org.openapitools.client.model.DescribeRepositoriesResponse;
import org.openapitools.client.model.GetAuthorizationTokenResponse;
import org.openapitools.client.model.GetRegistryCatalogDataResponse;
import org.openapitools.client.model.GetRepositoryCatalogDataRequest;
import org.openapitools.client.model.GetRepositoryCatalogDataResponse;
import org.openapitools.client.model.GetRepositoryPolicyRequest;
import org.openapitools.client.model.GetRepositoryPolicyResponse;
import org.openapitools.client.model.InitiateLayerUploadRequest;
import org.openapitools.client.model.InitiateLayerUploadResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutImageRequest;
import org.openapitools.client.model.PutImageResponse;
import org.openapitools.client.model.PutRegistryCatalogDataRequest;
import org.openapitools.client.model.PutRegistryCatalogDataResponse;
import org.openapitools.client.model.PutRepositoryCatalogDataRequest;
import org.openapitools.client.model.PutRepositoryCatalogDataResponse;
import org.openapitools.client.model.SetRepositoryPolicyRequest;
import org.openapitools.client.model.SetRepositoryPolicyResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UploadLayerPartRequest;
import org.openapitools.client.model.UploadLayerPartResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchCheckLayerAvailability
     * @param xAmzTarget  (required)
     * @param batchCheckLayerAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCheckLayerAvailabilityCall(String xAmzTarget, BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCheckLayerAvailabilityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.BatchCheckLayerAvailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCheckLayerAvailabilityValidateBeforeCall(String xAmzTarget, BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchCheckLayerAvailability(Async)");
        }

        // verify the required parameter 'batchCheckLayerAvailabilityRequest' is set
        if (batchCheckLayerAvailabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'batchCheckLayerAvailabilityRequest' when calling batchCheckLayerAvailability(Async)");
        }

        return batchCheckLayerAvailabilityCall(xAmzTarget, batchCheckLayerAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Checks the availability of one or more image layers that are within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchCheckLayerAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchCheckLayerAvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public BatchCheckLayerAvailabilityResponse batchCheckLayerAvailability(String xAmzTarget, BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchCheckLayerAvailabilityResponse> localVarResp = batchCheckLayerAvailabilityWithHttpInfo(xAmzTarget, batchCheckLayerAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Checks the availability of one or more image layers that are within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchCheckLayerAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchCheckLayerAvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchCheckLayerAvailabilityResponse> batchCheckLayerAvailabilityWithHttpInfo(String xAmzTarget, BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchCheckLayerAvailabilityValidateBeforeCall(xAmzTarget, batchCheckLayerAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchCheckLayerAvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Checks the availability of one or more image layers that are within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param batchCheckLayerAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCheckLayerAvailabilityAsync(String xAmzTarget, BatchCheckLayerAvailabilityRequest batchCheckLayerAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchCheckLayerAvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCheckLayerAvailabilityValidateBeforeCall(xAmzTarget, batchCheckLayerAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchCheckLayerAvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchDeleteImage
     * @param xAmzTarget  (required)
     * @param batchDeleteImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDeleteImageCall(String xAmzTarget, BatchDeleteImageRequest batchDeleteImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDeleteImageRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.BatchDeleteImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchDeleteImageValidateBeforeCall(String xAmzTarget, BatchDeleteImageRequest batchDeleteImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling batchDeleteImage(Async)");
        }

        // verify the required parameter 'batchDeleteImageRequest' is set
        if (batchDeleteImageRequest == null) {
            throw new ApiException("Missing the required parameter 'batchDeleteImageRequest' when calling batchDeleteImage(Async)");
        }

        return batchDeleteImageCall(xAmzTarget, batchDeleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a list of specified images that are within a repository in a public registry. Images are specified with either an &lt;code&gt;imageTag&lt;/code&gt; or &lt;code&gt;imageDigest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can remove a tag from an image by specifying the image&#39;s tag in your request. When you remove the last tag from an image, the image is deleted from your repository.&lt;/p&gt; &lt;p&gt;You can completely delete an image (and all of its tags) by specifying the digest of the image in your request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchDeleteImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchDeleteImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public BatchDeleteImageResponse batchDeleteImage(String xAmzTarget, BatchDeleteImageRequest batchDeleteImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchDeleteImageResponse> localVarResp = batchDeleteImageWithHttpInfo(xAmzTarget, batchDeleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a list of specified images that are within a repository in a public registry. Images are specified with either an &lt;code&gt;imageTag&lt;/code&gt; or &lt;code&gt;imageDigest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can remove a tag from an image by specifying the image&#39;s tag in your request. When you remove the last tag from an image, the image is deleted from your repository.&lt;/p&gt; &lt;p&gt;You can completely delete an image (and all of its tags) by specifying the digest of the image in your request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchDeleteImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchDeleteImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDeleteImageResponse> batchDeleteImageWithHttpInfo(String xAmzTarget, BatchDeleteImageRequest batchDeleteImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchDeleteImageValidateBeforeCall(xAmzTarget, batchDeleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchDeleteImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a list of specified images that are within a repository in a public registry. Images are specified with either an &lt;code&gt;imageTag&lt;/code&gt; or &lt;code&gt;imageDigest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You can remove a tag from an image by specifying the image&#39;s tag in your request. When you remove the last tag from an image, the image is deleted from your repository.&lt;/p&gt; &lt;p&gt;You can completely delete an image (and all of its tags) by specifying the digest of the image in your request.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param batchDeleteImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDeleteImageAsync(String xAmzTarget, BatchDeleteImageRequest batchDeleteImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchDeleteImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchDeleteImageValidateBeforeCall(xAmzTarget, batchDeleteImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchDeleteImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for completeLayerUpload
     * @param xAmzTarget  (required)
     * @param completeLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLayerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LayerPartTooSmallException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LayerAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EmptyUploadException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeLayerUploadCall(String xAmzTarget, CompleteLayerUploadRequest completeLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completeLayerUploadRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.CompleteLayerUpload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeLayerUploadValidateBeforeCall(String xAmzTarget, CompleteLayerUploadRequest completeLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling completeLayerUpload(Async)");
        }

        // verify the required parameter 'completeLayerUploadRequest' is set
        if (completeLayerUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'completeLayerUploadRequest' when calling completeLayerUpload(Async)");
        }

        return completeLayerUploadCall(xAmzTarget, completeLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Informs Amazon ECR that the image layer upload is complete for a specified public registry, repository name, and upload ID. You can optionally provide a &lt;code&gt;sha256&lt;/code&gt; digest of the image layer for data validation purposes.&lt;/p&gt; &lt;p&gt;When an image is pushed, the CompleteLayerUpload API is called once for each new image layer to verify that the upload is complete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param completeLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CompleteLayerUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLayerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LayerPartTooSmallException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LayerAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EmptyUploadException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public CompleteLayerUploadResponse completeLayerUpload(String xAmzTarget, CompleteLayerUploadRequest completeLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CompleteLayerUploadResponse> localVarResp = completeLayerUploadWithHttpInfo(xAmzTarget, completeLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Informs Amazon ECR that the image layer upload is complete for a specified public registry, repository name, and upload ID. You can optionally provide a &lt;code&gt;sha256&lt;/code&gt; digest of the image layer for data validation purposes.&lt;/p&gt; &lt;p&gt;When an image is pushed, the CompleteLayerUpload API is called once for each new image layer to verify that the upload is complete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param completeLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CompleteLayerUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLayerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LayerPartTooSmallException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LayerAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EmptyUploadException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteLayerUploadResponse> completeLayerUploadWithHttpInfo(String xAmzTarget, CompleteLayerUploadRequest completeLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = completeLayerUploadValidateBeforeCall(xAmzTarget, completeLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CompleteLayerUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Informs Amazon ECR that the image layer upload is complete for a specified public registry, repository name, and upload ID. You can optionally provide a &lt;code&gt;sha256&lt;/code&gt; digest of the image layer for data validation purposes.&lt;/p&gt; &lt;p&gt;When an image is pushed, the CompleteLayerUpload API is called once for each new image layer to verify that the upload is complete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param completeLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidLayerException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LayerPartTooSmallException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LayerAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> EmptyUploadException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completeLayerUploadAsync(String xAmzTarget, CompleteLayerUploadRequest completeLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CompleteLayerUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeLayerUploadValidateBeforeCall(xAmzTarget, completeLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CompleteLayerUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRepository
     * @param xAmzTarget  (required)
     * @param createRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryCall(String xAmzTarget, CreateRepositoryRequest createRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRepositoryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.CreateRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRepositoryValidateBeforeCall(String xAmzTarget, CreateRepositoryRequest createRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling createRepository(Async)");
        }

        // verify the required parameter 'createRepositoryRequest' is set
        if (createRepositoryRequest == null) {
            throw new ApiException("Missing the required parameter 'createRepositoryRequest' when calling createRepository(Async)");
        }

        return createRepositoryCall(xAmzTarget, createRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a repository in a public registry. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\&quot;&gt;Amazon ECR repositories&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param createRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRepositoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRepositoryResponse createRepository(String xAmzTarget, CreateRepositoryRequest createRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRepositoryResponse> localVarResp = createRepositoryWithHttpInfo(xAmzTarget, createRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a repository in a public registry. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\&quot;&gt;Amazon ECR repositories&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param createRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRepositoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRepositoryResponse> createRepositoryWithHttpInfo(String xAmzTarget, CreateRepositoryRequest createRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRepositoryValidateBeforeCall(xAmzTarget, createRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRepositoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a repository in a public registry. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\&quot;&gt;Amazon ECR repositories&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param createRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> RepositoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRepositoryAsync(String xAmzTarget, CreateRepositoryRequest createRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRepositoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRepositoryValidateBeforeCall(xAmzTarget, createRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRepositoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepository
     * @param xAmzTarget  (required)
     * @param deleteRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryCall(String xAmzTarget, DeleteRepositoryRequest deleteRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRepositoryRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.DeleteRepository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryValidateBeforeCall(String xAmzTarget, DeleteRepositoryRequest deleteRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRepository(Async)");
        }

        // verify the required parameter 'deleteRepositoryRequest' is set
        if (deleteRepositoryRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRepositoryRequest' when calling deleteRepository(Async)");
        }

        return deleteRepositoryCall(xAmzTarget, deleteRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a repository in a public registry. If the repository contains images, you must either manually delete all images in the repository or use the &lt;code&gt;force&lt;/code&gt; option. This option deletes all images on your behalf before deleting the repository.
     * @param xAmzTarget  (required)
     * @param deleteRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRepositoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRepositoryResponse deleteRepository(String xAmzTarget, DeleteRepositoryRequest deleteRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRepositoryResponse> localVarResp = deleteRepositoryWithHttpInfo(xAmzTarget, deleteRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a repository in a public registry. If the repository contains images, you must either manually delete all images in the repository or use the &lt;code&gt;force&lt;/code&gt; option. This option deletes all images on your behalf before deleting the repository.
     * @param xAmzTarget  (required)
     * @param deleteRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRepositoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRepositoryResponse> deleteRepositoryWithHttpInfo(String xAmzTarget, DeleteRepositoryRequest deleteRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryValidateBeforeCall(xAmzTarget, deleteRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRepositoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a repository in a public registry. If the repository contains images, you must either manually delete all images in the repository or use the &lt;code&gt;force&lt;/code&gt; option. This option deletes all images on your behalf before deleting the repository.
     * @param xAmzTarget  (required)
     * @param deleteRepositoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotEmptyException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryAsync(String xAmzTarget, DeleteRepositoryRequest deleteRepositoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRepositoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryValidateBeforeCall(xAmzTarget, deleteRepositoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRepositoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRepositoryPolicy
     * @param xAmzTarget  (required)
     * @param deleteRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPolicyCall(String xAmzTarget, DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteRepositoryPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.DeleteRepositoryPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRepositoryPolicyValidateBeforeCall(String xAmzTarget, DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteRepositoryPolicy(Async)");
        }

        // verify the required parameter 'deleteRepositoryPolicyRequest' is set
        if (deleteRepositoryPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteRepositoryPolicyRequest' when calling deleteRepositoryPolicy(Async)");
        }

        return deleteRepositoryPolicyCall(xAmzTarget, deleteRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the repository policy that&#39;s associated with the specified repository.
     * @param xAmzTarget  (required)
     * @param deleteRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteRepositoryPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRepositoryPolicyResponse deleteRepositoryPolicy(String xAmzTarget, DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteRepositoryPolicyResponse> localVarResp = deleteRepositoryPolicyWithHttpInfo(xAmzTarget, deleteRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes the repository policy that&#39;s associated with the specified repository.
     * @param xAmzTarget  (required)
     * @param deleteRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteRepositoryPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRepositoryPolicyResponse> deleteRepositoryPolicyWithHttpInfo(String xAmzTarget, DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRepositoryPolicyValidateBeforeCall(xAmzTarget, deleteRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteRepositoryPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes the repository policy that&#39;s associated with the specified repository.
     * @param xAmzTarget  (required)
     * @param deleteRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRepositoryPolicyAsync(String xAmzTarget, DeleteRepositoryPolicyRequest deleteRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteRepositoryPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRepositoryPolicyValidateBeforeCall(xAmzTarget, deleteRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteRepositoryPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeImageTags
     * @param xAmzTarget  (required)
     * @param describeImageTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeImageTagsCall(String xAmzTarget, DescribeImageTagsRequest describeImageTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeImageTagsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.DescribeImageTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeImageTagsValidateBeforeCall(String xAmzTarget, DescribeImageTagsRequest describeImageTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeImageTags(Async)");
        }

        // verify the required parameter 'describeImageTagsRequest' is set
        if (describeImageTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'describeImageTagsRequest' when calling describeImageTags(Async)");
        }

        return describeImageTagsCall(xAmzTarget, describeImageTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns the image tag details for a repository in a public registry.
     * @param xAmzTarget  (required)
     * @param describeImageTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeImageTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeImageTagsResponse describeImageTags(String xAmzTarget, DescribeImageTagsRequest describeImageTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeImageTagsResponse> localVarResp = describeImageTagsWithHttpInfo(xAmzTarget, describeImageTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the image tag details for a repository in a public registry.
     * @param xAmzTarget  (required)
     * @param describeImageTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeImageTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeImageTagsResponse> describeImageTagsWithHttpInfo(String xAmzTarget, DescribeImageTagsRequest describeImageTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeImageTagsValidateBeforeCall(xAmzTarget, describeImageTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeImageTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the image tag details for a repository in a public registry.
     * @param xAmzTarget  (required)
     * @param describeImageTagsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeImageTagsAsync(String xAmzTarget, DescribeImageTagsRequest describeImageTagsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeImageTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeImageTagsValidateBeforeCall(xAmzTarget, describeImageTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeImageTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeImages
     * @param xAmzTarget  (required)
     * @param describeImagesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeImagesCall(String xAmzTarget, DescribeImagesRequest describeImagesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeImagesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.DescribeImages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeImagesValidateBeforeCall(String xAmzTarget, DescribeImagesRequest describeImagesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeImages(Async)");
        }

        // verify the required parameter 'describeImagesRequest' is set
        if (describeImagesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeImagesRequest' when calling describeImages(Async)");
        }

        return describeImagesCall(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns metadata that&#39;s related to the images in a repository in a public registry.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the uncompressed image size. Therefore, it might return a larger image size than the image sizes that are returned by &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeImagesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeImagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeImagesResponse describeImages(String xAmzTarget, DescribeImagesRequest describeImagesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeImagesResponse> localVarResp = describeImagesWithHttpInfo(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns metadata that&#39;s related to the images in a repository in a public registry.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the uncompressed image size. Therefore, it might return a larger image size than the image sizes that are returned by &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeImagesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeImagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeImagesResponse> describeImagesWithHttpInfo(String xAmzTarget, DescribeImagesRequest describeImagesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeImagesValidateBeforeCall(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeImagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns metadata that&#39;s related to the images in a repository in a public registry.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the &lt;code&gt;docker images&lt;/code&gt; command shows the uncompressed image size. Therefore, it might return a larger image size than the image sizes that are returned by &lt;a&gt;DescribeImages&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param describeImagesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeImagesAsync(String xAmzTarget, DescribeImagesRequest describeImagesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeImagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeImagesValidateBeforeCall(xAmzTarget, describeImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeImagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRegistries
     * @param xAmzTarget  (required)
     * @param describeRegistriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRegistriesCall(String xAmzTarget, DescribeRegistriesRequest describeRegistriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRegistriesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.DescribeRegistries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRegistriesValidateBeforeCall(String xAmzTarget, DescribeRegistriesRequest describeRegistriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeRegistries(Async)");
        }

        // verify the required parameter 'describeRegistriesRequest' is set
        if (describeRegistriesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeRegistriesRequest' when calling describeRegistries(Async)");
        }

        return describeRegistriesCall(xAmzTarget, describeRegistriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns details for a public registry.
     * @param xAmzTarget  (required)
     * @param describeRegistriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeRegistriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRegistriesResponse describeRegistries(String xAmzTarget, DescribeRegistriesRequest describeRegistriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeRegistriesResponse> localVarResp = describeRegistriesWithHttpInfo(xAmzTarget, describeRegistriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details for a public registry.
     * @param xAmzTarget  (required)
     * @param describeRegistriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeRegistriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRegistriesResponse> describeRegistriesWithHttpInfo(String xAmzTarget, DescribeRegistriesRequest describeRegistriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeRegistriesValidateBeforeCall(xAmzTarget, describeRegistriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeRegistriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details for a public registry.
     * @param xAmzTarget  (required)
     * @param describeRegistriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRegistriesAsync(String xAmzTarget, DescribeRegistriesRequest describeRegistriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeRegistriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRegistriesValidateBeforeCall(xAmzTarget, describeRegistriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeRegistriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeRepositories
     * @param xAmzTarget  (required)
     * @param describeRepositoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRepositoriesCall(String xAmzTarget, DescribeRepositoriesRequest describeRepositoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeRepositoriesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.DescribeRepositories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeRepositoriesValidateBeforeCall(String xAmzTarget, DescribeRepositoriesRequest describeRepositoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling describeRepositories(Async)");
        }

        // verify the required parameter 'describeRepositoriesRequest' is set
        if (describeRepositoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'describeRepositoriesRequest' when calling describeRepositories(Async)");
        }

        return describeRepositoriesCall(xAmzTarget, describeRepositoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Describes repositories that are in a public registry.
     * @param xAmzTarget  (required)
     * @param describeRepositoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return DescribeRepositoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeRepositoriesResponse describeRepositories(String xAmzTarget, DescribeRepositoriesRequest describeRepositoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<DescribeRepositoriesResponse> localVarResp = describeRepositoriesWithHttpInfo(xAmzTarget, describeRepositoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Describes repositories that are in a public registry.
     * @param xAmzTarget  (required)
     * @param describeRepositoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;DescribeRepositoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeRepositoriesResponse> describeRepositoriesWithHttpInfo(String xAmzTarget, DescribeRepositoriesRequest describeRepositoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = describeRepositoriesValidateBeforeCall(xAmzTarget, describeRepositoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<DescribeRepositoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Describes repositories that are in a public registry.
     * @param xAmzTarget  (required)
     * @param describeRepositoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeRepositoriesAsync(String xAmzTarget, DescribeRepositoriesRequest describeRepositoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<DescribeRepositoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeRepositoriesValidateBeforeCall(xAmzTarget, describeRepositoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<DescribeRepositoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorizationToken
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationTokenCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.GetAuthorizationToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizationTokenValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getAuthorizationToken(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getAuthorizationToken(Async)");
        }

        return getAuthorizationTokenCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves an authorization token. An authorization token represents your IAM authentication credentials. You can use it to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the &lt;code&gt;ecr-public:GetAuthorizationToken&lt;/code&gt; and &lt;code&gt;sts:GetServiceBearerToken&lt;/code&gt; permissions.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAuthorizationTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthorizationTokenResponse getAuthorizationToken(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAuthorizationTokenResponse> localVarResp = getAuthorizationTokenWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves an authorization token. An authorization token represents your IAM authentication credentials. You can use it to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the &lt;code&gt;ecr-public:GetAuthorizationToken&lt;/code&gt; and &lt;code&gt;sts:GetServiceBearerToken&lt;/code&gt; permissions.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAuthorizationTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuthorizationTokenResponse> getAuthorizationTokenWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizationTokenValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAuthorizationTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves an authorization token. An authorization token represents your IAM authentication credentials. You can use it to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the &lt;code&gt;ecr-public:GetAuthorizationToken&lt;/code&gt; and &lt;code&gt;sts:GetServiceBearerToken&lt;/code&gt; permissions.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationTokenAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAuthorizationTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizationTokenValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAuthorizationTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRegistryCatalogData
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistryCatalogDataCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.GetRegistryCatalogData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegistryCatalogDataValidateBeforeCall(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRegistryCatalogData(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRegistryCatalogData(Async)");
        }

        return getRegistryCatalogDataCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves catalog metadata for a public registry.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRegistryCatalogDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public GetRegistryCatalogDataResponse getRegistryCatalogData(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRegistryCatalogDataResponse> localVarResp = getRegistryCatalogDataWithHttpInfo(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves catalog metadata for a public registry.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRegistryCatalogDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRegistryCatalogDataResponse> getRegistryCatalogDataWithHttpInfo(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRegistryCatalogDataValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRegistryCatalogDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves catalog metadata for a public registry.
     * @param xAmzTarget  (required)
     * @param body  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRegistryCatalogDataAsync(String xAmzTarget, Object body, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRegistryCatalogDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegistryCatalogDataValidateBeforeCall(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRegistryCatalogDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryCatalogData
     * @param xAmzTarget  (required)
     * @param getRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryCatalogDataNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryCatalogDataCall(String xAmzTarget, GetRepositoryCatalogDataRequest getRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRepositoryCatalogDataRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.GetRepositoryCatalogData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryCatalogDataValidateBeforeCall(String xAmzTarget, GetRepositoryCatalogDataRequest getRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRepositoryCatalogData(Async)");
        }

        // verify the required parameter 'getRepositoryCatalogDataRequest' is set
        if (getRepositoryCatalogDataRequest == null) {
            throw new ApiException("Missing the required parameter 'getRepositoryCatalogDataRequest' when calling getRepositoryCatalogData(Async)");
        }

        return getRepositoryCatalogDataCall(xAmzTarget, getRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.
     * @param xAmzTarget  (required)
     * @param getRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRepositoryCatalogDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryCatalogDataNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public GetRepositoryCatalogDataResponse getRepositoryCatalogData(String xAmzTarget, GetRepositoryCatalogDataRequest getRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRepositoryCatalogDataResponse> localVarResp = getRepositoryCatalogDataWithHttpInfo(xAmzTarget, getRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.
     * @param xAmzTarget  (required)
     * @param getRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRepositoryCatalogDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryCatalogDataNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRepositoryCatalogDataResponse> getRepositoryCatalogDataWithHttpInfo(String xAmzTarget, GetRepositoryCatalogDataRequest getRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryCatalogDataValidateBeforeCall(xAmzTarget, getRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRepositoryCatalogDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.
     * @param xAmzTarget  (required)
     * @param getRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryCatalogDataNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryCatalogDataAsync(String xAmzTarget, GetRepositoryCatalogDataRequest getRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRepositoryCatalogDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryCatalogDataValidateBeforeCall(xAmzTarget, getRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRepositoryCatalogDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRepositoryPolicy
     * @param xAmzTarget  (required)
     * @param getRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPolicyCall(String xAmzTarget, GetRepositoryPolicyRequest getRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRepositoryPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.GetRepositoryPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRepositoryPolicyValidateBeforeCall(String xAmzTarget, GetRepositoryPolicyRequest getRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getRepositoryPolicy(Async)");
        }

        // verify the required parameter 'getRepositoryPolicyRequest' is set
        if (getRepositoryPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'getRepositoryPolicyRequest' when calling getRepositoryPolicy(Async)");
        }

        return getRepositoryPolicyCall(xAmzTarget, getRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the repository policy for the specified repository.
     * @param xAmzTarget  (required)
     * @param getRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRepositoryPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public GetRepositoryPolicyResponse getRepositoryPolicy(String xAmzTarget, GetRepositoryPolicyRequest getRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRepositoryPolicyResponse> localVarResp = getRepositoryPolicyWithHttpInfo(xAmzTarget, getRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the repository policy for the specified repository.
     * @param xAmzTarget  (required)
     * @param getRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRepositoryPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRepositoryPolicyResponse> getRepositoryPolicyWithHttpInfo(String xAmzTarget, GetRepositoryPolicyRequest getRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRepositoryPolicyValidateBeforeCall(xAmzTarget, getRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRepositoryPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the repository policy for the specified repository.
     * @param xAmzTarget  (required)
     * @param getRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryPolicyNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRepositoryPolicyAsync(String xAmzTarget, GetRepositoryPolicyRequest getRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRepositoryPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRepositoryPolicyValidateBeforeCall(xAmzTarget, getRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRepositoryPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initiateLayerUpload
     * @param xAmzTarget  (required)
     * @param initiateLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateLayerUploadCall(String xAmzTarget, InitiateLayerUploadRequest initiateLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = initiateLayerUploadRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.InitiateLayerUpload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateLayerUploadValidateBeforeCall(String xAmzTarget, InitiateLayerUploadRequest initiateLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling initiateLayerUpload(Async)");
        }

        // verify the required parameter 'initiateLayerUploadRequest' is set
        if (initiateLayerUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'initiateLayerUploadRequest' when calling initiateLayerUpload(Async)");
        }

        return initiateLayerUploadCall(xAmzTarget, initiateLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Notifies Amazon ECR that you intend to upload an image layer.&lt;/p&gt; &lt;p&gt;When an image is pushed, the InitiateLayerUpload API is called once for each image layer that hasn&#39;t already been uploaded. Whether an image layer uploads is determined by the BatchCheckLayerAvailability API action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param initiateLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return InitiateLayerUploadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public InitiateLayerUploadResponse initiateLayerUpload(String xAmzTarget, InitiateLayerUploadRequest initiateLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<InitiateLayerUploadResponse> localVarResp = initiateLayerUploadWithHttpInfo(xAmzTarget, initiateLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Notifies Amazon ECR that you intend to upload an image layer.&lt;/p&gt; &lt;p&gt;When an image is pushed, the InitiateLayerUpload API is called once for each image layer that hasn&#39;t already been uploaded. Whether an image layer uploads is determined by the BatchCheckLayerAvailability API action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param initiateLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;InitiateLayerUploadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InitiateLayerUploadResponse> initiateLayerUploadWithHttpInfo(String xAmzTarget, InitiateLayerUploadRequest initiateLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = initiateLayerUploadValidateBeforeCall(xAmzTarget, initiateLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<InitiateLayerUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Notifies Amazon ECR that you intend to upload an image layer.&lt;/p&gt; &lt;p&gt;When an image is pushed, the InitiateLayerUpload API is called once for each image layer that hasn&#39;t already been uploaded. Whether an image layer uploads is determined by the BatchCheckLayerAvailability API action.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param initiateLayerUploadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initiateLayerUploadAsync(String xAmzTarget, InitiateLayerUploadRequest initiateLayerUploadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<InitiateLayerUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateLayerUploadValidateBeforeCall(xAmzTarget, initiateLayerUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<InitiateLayerUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForResource(Async)");
        }

        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * List the tags for an Amazon ECR Public resource.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * List the tags for an Amazon ECR Public resource.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the tags for an Amazon ECR Public resource.
     * @param xAmzTarget  (required)
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(String xAmzTarget, ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putImage
     * @param xAmzTarget  (required)
     * @param putImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LayersNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReferencedImagesNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImageTagAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ImageDigestDoesNotMatchException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putImageCall(String xAmzTarget, PutImageRequest putImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putImageRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.PutImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putImageValidateBeforeCall(String xAmzTarget, PutImageRequest putImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putImage(Async)");
        }

        // verify the required parameter 'putImageRequest' is set
        if (putImageRequest == null) {
            throw new ApiException("Missing the required parameter 'putImageRequest' when calling putImage(Async)");
        }

        return putImageCall(xAmzTarget, putImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates or updates the image manifest and tags that are associated with an image.&lt;/p&gt; &lt;p&gt;When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags that are associated with the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param putImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LayersNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReferencedImagesNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImageTagAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ImageDigestDoesNotMatchException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public PutImageResponse putImage(String xAmzTarget, PutImageRequest putImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutImageResponse> localVarResp = putImageWithHttpInfo(xAmzTarget, putImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates or updates the image manifest and tags that are associated with an image.&lt;/p&gt; &lt;p&gt;When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags that are associated with the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param putImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LayersNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReferencedImagesNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImageTagAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ImageDigestDoesNotMatchException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutImageResponse> putImageWithHttpInfo(String xAmzTarget, PutImageRequest putImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putImageValidateBeforeCall(xAmzTarget, putImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates or updates the image manifest and tags that are associated with an image.&lt;/p&gt; &lt;p&gt;When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags that are associated with the image.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param putImageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ImageAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LayersNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReferencedImagesNotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ImageTagAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ImageDigestDoesNotMatchException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putImageAsync(String xAmzTarget, PutImageRequest putImageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putImageValidateBeforeCall(xAmzTarget, putImageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRegistryCatalogData
     * @param xAmzTarget  (required)
     * @param putRegistryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRegistryCatalogDataCall(String xAmzTarget, PutRegistryCatalogDataRequest putRegistryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRegistryCatalogDataRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.PutRegistryCatalogData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRegistryCatalogDataValidateBeforeCall(String xAmzTarget, PutRegistryCatalogDataRequest putRegistryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putRegistryCatalogData(Async)");
        }

        // verify the required parameter 'putRegistryCatalogDataRequest' is set
        if (putRegistryCatalogDataRequest == null) {
            throw new ApiException("Missing the required parameter 'putRegistryCatalogDataRequest' when calling putRegistryCatalogData(Async)");
        }

        return putRegistryCatalogDataCall(xAmzTarget, putRegistryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Create or update the catalog data for a public registry.
     * @param xAmzTarget  (required)
     * @param putRegistryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutRegistryCatalogDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public PutRegistryCatalogDataResponse putRegistryCatalogData(String xAmzTarget, PutRegistryCatalogDataRequest putRegistryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutRegistryCatalogDataResponse> localVarResp = putRegistryCatalogDataWithHttpInfo(xAmzTarget, putRegistryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update the catalog data for a public registry.
     * @param xAmzTarget  (required)
     * @param putRegistryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutRegistryCatalogDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutRegistryCatalogDataResponse> putRegistryCatalogDataWithHttpInfo(String xAmzTarget, PutRegistryCatalogDataRequest putRegistryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putRegistryCatalogDataValidateBeforeCall(xAmzTarget, putRegistryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutRegistryCatalogDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update the catalog data for a public registry.
     * @param xAmzTarget  (required)
     * @param putRegistryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRegistryCatalogDataAsync(String xAmzTarget, PutRegistryCatalogDataRequest putRegistryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutRegistryCatalogDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRegistryCatalogDataValidateBeforeCall(xAmzTarget, putRegistryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutRegistryCatalogDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRepositoryCatalogData
     * @param xAmzTarget  (required)
     * @param putRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRepositoryCatalogDataCall(String xAmzTarget, PutRepositoryCatalogDataRequest putRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRepositoryCatalogDataRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.PutRepositoryCatalogData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRepositoryCatalogDataValidateBeforeCall(String xAmzTarget, PutRepositoryCatalogDataRequest putRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling putRepositoryCatalogData(Async)");
        }

        // verify the required parameter 'putRepositoryCatalogDataRequest' is set
        if (putRepositoryCatalogDataRequest == null) {
            throw new ApiException("Missing the required parameter 'putRepositoryCatalogDataRequest' when calling putRepositoryCatalogData(Async)");
        }

        return putRepositoryCatalogDataCall(xAmzTarget, putRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates or updates the catalog data for a repository in a public registry.
     * @param xAmzTarget  (required)
     * @param putRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutRepositoryCatalogDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public PutRepositoryCatalogDataResponse putRepositoryCatalogData(String xAmzTarget, PutRepositoryCatalogDataRequest putRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutRepositoryCatalogDataResponse> localVarResp = putRepositoryCatalogDataWithHttpInfo(xAmzTarget, putRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the catalog data for a repository in a public registry.
     * @param xAmzTarget  (required)
     * @param putRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutRepositoryCatalogDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutRepositoryCatalogDataResponse> putRepositoryCatalogDataWithHttpInfo(String xAmzTarget, PutRepositoryCatalogDataRequest putRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putRepositoryCatalogDataValidateBeforeCall(xAmzTarget, putRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutRepositoryCatalogDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the catalog data for a repository in a public registry.
     * @param xAmzTarget  (required)
     * @param putRepositoryCatalogDataRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRepositoryCatalogDataAsync(String xAmzTarget, PutRepositoryCatalogDataRequest putRepositoryCatalogDataRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutRepositoryCatalogDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRepositoryCatalogDataValidateBeforeCall(xAmzTarget, putRepositoryCatalogDataRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutRepositoryCatalogDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRepositoryPolicy
     * @param xAmzTarget  (required)
     * @param setRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRepositoryPolicyCall(String xAmzTarget, SetRepositoryPolicyRequest setRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setRepositoryPolicyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.SetRepositoryPolicy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRepositoryPolicyValidateBeforeCall(String xAmzTarget, SetRepositoryPolicyRequest setRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling setRepositoryPolicy(Async)");
        }

        // verify the required parameter 'setRepositoryPolicyRequest' is set
        if (setRepositoryPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'setRepositoryPolicyRequest' when calling setRepositoryPolicy(Async)");
        }

        return setRepositoryPolicyCall(xAmzTarget, setRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Applies a repository policy to the specified public repository to control access permissions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\&quot;&gt;Amazon ECR Repository Policies&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param setRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return SetRepositoryPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public SetRepositoryPolicyResponse setRepositoryPolicy(String xAmzTarget, SetRepositoryPolicyRequest setRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<SetRepositoryPolicyResponse> localVarResp = setRepositoryPolicyWithHttpInfo(xAmzTarget, setRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Applies a repository policy to the specified public repository to control access permissions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\&quot;&gt;Amazon ECR Repository Policies&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param setRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;SetRepositoryPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetRepositoryPolicyResponse> setRepositoryPolicyWithHttpInfo(String xAmzTarget, SetRepositoryPolicyRequest setRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = setRepositoryPolicyValidateBeforeCall(xAmzTarget, setRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<SetRepositoryPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Applies a repository policy to the specified public repository to control access permissions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\&quot;&gt;Amazon ECR Repository Policies&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Container Registry User Guide&lt;/i&gt;.
     * @param xAmzTarget  (required)
     * @param setRepositoryPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRepositoryPolicyAsync(String xAmzTarget, SetRepositoryPolicyRequest setRepositoryPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<SetRepositoryPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRepositoryPolicyValidateBeforeCall(xAmzTarget, setRepositoryPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<SetRepositoryPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.TagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associates the specified tags to a resource with the specified &lt;code&gt;resourceArn&lt;/code&gt;. If existing tags on a resource aren&#39;t specified in the request parameters, they aren&#39;t changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param xAmzTarget  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(String xAmzTarget, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.UntagResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes specified tags from a resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes specified tags from a resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes specified tags from a resource.
     * @param xAmzTarget  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidTagParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TooManyTagsException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServerException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(String xAmzTarget, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadLayerPart
     * @param xAmzTarget  (required)
     * @param uploadLayerPartRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLayerPartException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadLayerPartCall(String xAmzTarget, UploadLayerPartRequest uploadLayerPartRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadLayerPartRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=SpencerFrontendService.UploadLayerPart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadLayerPartValidateBeforeCall(String xAmzTarget, UploadLayerPartRequest uploadLayerPartRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling uploadLayerPart(Async)");
        }

        // verify the required parameter 'uploadLayerPartRequest' is set
        if (uploadLayerPartRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadLayerPartRequest' when calling uploadLayerPart(Async)");
        }

        return uploadLayerPartCall(xAmzTarget, uploadLayerPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Uploads an image layer part to Amazon ECR.&lt;/p&gt; &lt;p&gt;When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (about 20MB). The UploadLayerPart API is called once for each new image layer part.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param uploadLayerPartRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UploadLayerPartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLayerPartException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public UploadLayerPartResponse uploadLayerPart(String xAmzTarget, UploadLayerPartRequest uploadLayerPartRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UploadLayerPartResponse> localVarResp = uploadLayerPartWithHttpInfo(xAmzTarget, uploadLayerPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Uploads an image layer part to Amazon ECR.&lt;/p&gt; &lt;p&gt;When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (about 20MB). The UploadLayerPart API is called once for each new image layer part.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param uploadLayerPartRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UploadLayerPartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLayerPartException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadLayerPartResponse> uploadLayerPartWithHttpInfo(String xAmzTarget, UploadLayerPartRequest uploadLayerPartRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = uploadLayerPartValidateBeforeCall(xAmzTarget, uploadLayerPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UploadLayerPartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Uploads an image layer part to Amazon ECR.&lt;/p&gt; &lt;p&gt;When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (about 20MB). The UploadLayerPart API is called once for each new image layer part.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the &lt;code&gt;docker&lt;/code&gt; CLI to pull, tag, and push images.&lt;/p&gt; &lt;/note&gt;
     * @param xAmzTarget  (required)
     * @param uploadLayerPartRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServerException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidLayerPartException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> RepositoryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UploadNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RegistryNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> UnsupportedCommandException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadLayerPartAsync(String xAmzTarget, UploadLayerPartRequest uploadLayerPartRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UploadLayerPartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadLayerPartValidateBeforeCall(xAmzTarget, uploadLayerPartRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UploadLayerPartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
