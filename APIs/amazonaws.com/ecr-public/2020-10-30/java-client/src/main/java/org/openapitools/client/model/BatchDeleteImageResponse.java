/*
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchDeleteImageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:24.913845-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchDeleteImageResponse {
  public static final String SERIALIZED_NAME_IMAGE_IDS = "imageIds";
  @SerializedName(SERIALIZED_NAME_IMAGE_IDS)
  private List imageIds;

  public static final String SERIALIZED_NAME_FAILURES = "failures";
  @SerializedName(SERIALIZED_NAME_FAILURES)
  private List failures;

  public BatchDeleteImageResponse() {
  }

  public BatchDeleteImageResponse imageIds(List imageIds) {
    this.imageIds = imageIds;
    return this;
  }

  /**
   * Get imageIds
   * @return imageIds
   */
  @javax.annotation.Nullable
  public List getImageIds() {
    return imageIds;
  }

  public void setImageIds(List imageIds) {
    this.imageIds = imageIds;
  }


  public BatchDeleteImageResponse failures(List failures) {
    this.failures = failures;
    return this;
  }

  /**
   * Get failures
   * @return failures
   */
  @javax.annotation.Nullable
  public List getFailures() {
    return failures;
  }

  public void setFailures(List failures) {
    this.failures = failures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchDeleteImageResponse batchDeleteImageResponse = (BatchDeleteImageResponse) o;
    return Objects.equals(this.imageIds, batchDeleteImageResponse.imageIds) &&
        Objects.equals(this.failures, batchDeleteImageResponse.failures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageIds, failures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchDeleteImageResponse {\n");
    sb.append("    imageIds: ").append(toIndentedString(imageIds)).append("\n");
    sb.append("    failures: ").append(toIndentedString(failures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("imageIds");
    openapiFields.add("failures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchDeleteImageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchDeleteImageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchDeleteImageResponse is not found in the empty JSON string", BatchDeleteImageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchDeleteImageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchDeleteImageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `imageIds`
      if (jsonObj.get("imageIds") != null && !jsonObj.get("imageIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("imageIds"));
      }
      // validate the optional field `failures`
      if (jsonObj.get("failures") != null && !jsonObj.get("failures").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("failures"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchDeleteImageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchDeleteImageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchDeleteImageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchDeleteImageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchDeleteImageResponse>() {
           @Override
           public void write(JsonWriter out, BatchDeleteImageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchDeleteImageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchDeleteImageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchDeleteImageResponse
   * @throws IOException if the JSON string is invalid with respect to BatchDeleteImageResponse
   */
  public static BatchDeleteImageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchDeleteImageResponse.class);
  }

  /**
   * Convert an instance of BatchDeleteImageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

