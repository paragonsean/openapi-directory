openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon\
    \ Elastic Container Registry Public (Amazon ECR Public) is a managed container\
    \ image registry service. Amazon ECR provides both public and private registries\
    \ to host your container images. You can use the Docker CLI or your preferred\
    \ client to push, pull, and manage images. Amazon ECR provides a secure, scalable,\
    \ and reliable registry for your Docker or Open Container Initiative (OCI) images.\
    \ Amazon ECR supports public repositories with this API. For information about\
    \ the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\"\
    >Amazon Elastic Container Registry API Reference</a>.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Elastic Container Registry Public
  version: 2020-10-30
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: ecr-public
  x-aws-signingName: ecr-public
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/ecr-public-2020-10-30.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/ecr-public/
servers:
- description: The Amazon ECR Public multi-region endpoint
  url: "http://api.ecr-public.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon ECR Public multi-region endpoint
  url: "https://api.ecr-public.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon ECR Public endpoint for China (Beijing) and China (Ningxia)
  url: "http://api.ecr-public.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon ECR Public endpoint for China (Beijing) and China (Ningxia)
  url: "https://api.ecr-public.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=SpencerFrontendService.BatchCheckLayerAvailability:
    post:
      description: "<p>Checks the availability of one or more image layers that are\
        \ within a repository in a public registry. When an image is pushed to a repository,\
        \ each image layer is checked to verify if it has been uploaded before. If\
        \ it has been uploaded, then the image layer is skipped.</p> <note> <p>This\
        \ operation is used by the Amazon ECR proxy and is not generally used by customers\
        \ for pulling and pushing images. In most cases, you should use the <code>docker</code>\
        \ CLI to pull, tag, and push images.</p> </note>"
      operationId: BatchCheckLayerAvailability
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.BatchCheckLayerAvailability
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCheckLayerAvailabilityRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCheckLayerAvailabilityResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryNotFoundException'
          description: RegistryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.BatchDeleteImage:
    post:
      description: "<p>Deletes a list of specified images that are within a repository\
        \ in a public registry. Images are specified with either an <code>imageTag</code>\
        \ or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by\
        \ specifying the image's tag in your request. When you remove the last tag\
        \ from an image, the image is deleted from your repository.</p> <p>You can\
        \ completely delete an image (and all of its tags) by specifying the digest\
        \ of the image in your request.</p>"
      operationId: BatchDeleteImage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.BatchDeleteImage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteImageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteImageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.CompleteLayerUpload:
    post:
      description: "<p>Informs Amazon ECR that the image layer upload is complete\
        \ for a specified public registry, repository name, and upload ID. You can\
        \ optionally provide a <code>sha256</code> digest of the image layer for data\
        \ validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload\
        \ API is called once for each new image layer to verify that the upload is\
        \ complete.</p> <note> <p>This operation is used by the Amazon ECR proxy and\
        \ is not generally used by customers for pulling and pushing images. In most\
        \ cases, you should use the <code>docker</code> CLI to pull, tag, and push\
        \ images.</p> </note>"
      operationId: CompleteLayerUpload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.CompleteLayerUpload
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteLayerUploadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompleteLayerUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadNotFoundException'
          description: UploadNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLayerException'
          description: InvalidLayerException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerPartTooSmallException'
          description: LayerPartTooSmallException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerAlreadyExistsException'
          description: LayerAlreadyExistsException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyUploadException'
          description: EmptyUploadException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryNotFoundException'
          description: RegistryNotFoundException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.CreateRepository:
    post:
      description: "Creates a repository in a public registry. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\"\
        >Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User\
        \ Guide</i>."
      operationId: CreateRepository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.CreateRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRepositoryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
          description: InvalidTagParameterException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryAlreadyExistsException'
          description: RepositoryAlreadyExistsException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.DeleteRepository:
    post:
      description: "Deletes a repository in a public registry. If the repository contains\
        \ images, you must either manually delete all images in the repository or\
        \ use the <code>force</code> option. This option deletes all images on your\
        \ behalf before deleting the repository."
      operationId: DeleteRepository
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.DeleteRepository
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotEmptyException'
          description: RepositoryNotEmptyException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.DeleteRepositoryPolicy:
    post:
      description: Deletes the repository policy that's associated with the specified
        repository.
      operationId: DeleteRepositoryPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.DeleteRepositoryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRepositoryPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepositoryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPolicyNotFoundException'
          description: RepositoryPolicyNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.DescribeImageTags:
    post:
      description: Returns the image tag details for a repository in a public registry.
      operationId: DescribeImageTags
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.DescribeImageTags
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImageTagsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImageTagsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.DescribeImages:
    post:
      description: "<p>Returns metadata that's related to the images in a repository\
        \ in a public registry.</p> <note> <p>Beginning with Docker version 1.9, the\
        \ Docker client compresses image layers before pushing them to a V2 Docker\
        \ registry. The output of the <code>docker images</code> command shows the\
        \ uncompressed image size. Therefore, it might return a larger image size\
        \ than the image sizes that are returned by <a>DescribeImages</a>.</p> </note>"
      operationId: DescribeImages
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.DescribeImages
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeImagesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeImagesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFoundException'
          description: ImageNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.DescribeRegistries:
    post:
      description: Returns details for a public registry.
      operationId: DescribeRegistries
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.DescribeRegistries
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRegistriesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRegistriesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.DescribeRepositories:
    post:
      description: Describes repositories that are in a public registry.
      operationId: DescribeRepositories
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.DescribeRepositories
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRepositoriesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeRepositoriesResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.GetAuthorizationToken:
    post:
      description: Retrieves an authorization token. An authorization token represents
        your IAM authentication credentials. You can use it to access any Amazon ECR
        registry that your IAM principal has access to. The authorization token is
        valid for 12 hours. This API requires the <code>ecr-public:GetAuthorizationToken</code>
        and <code>sts:GetServiceBearerToken</code> permissions.
      operationId: GetAuthorizationToken
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.GetAuthorizationToken
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAuthorizationTokenRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizationTokenResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.GetRegistryCatalogData:
    post:
      description: Retrieves catalog metadata for a public registry.
      operationId: GetRegistryCatalogData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.GetRegistryCatalogData
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRegistryCatalogDataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegistryCatalogDataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.GetRepositoryCatalogData:
    post:
      description: Retrieve catalog metadata for a repository in a public registry.
        This metadata is displayed publicly in the Amazon ECR Public Gallery.
      operationId: GetRepositoryCatalogData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.GetRepositoryCatalogData
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryCatalogDataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryCatalogDataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryCatalogDataNotFoundException'
          description: RepositoryCatalogDataNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.GetRepositoryPolicy:
    post:
      description: Retrieves the repository policy for the specified repository.
      operationId: GetRepositoryPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.GetRepositoryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRepositoryPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRepositoryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryPolicyNotFoundException'
          description: RepositoryPolicyNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.InitiateLayerUpload:
    post:
      description: "<p>Notifies Amazon ECR that you intend to upload an image layer.</p>\
        \ <p>When an image is pushed, the InitiateLayerUpload API is called once for\
        \ each image layer that hasn't already been uploaded. Whether an image layer\
        \ uploads is determined by the BatchCheckLayerAvailability API action.</p>\
        \ <note> <p>This operation is used by the Amazon ECR proxy and is not generally\
        \ used by customers for pulling and pushing images. In most cases, you should\
        \ use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>"
      operationId: InitiateLayerUpload
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.InitiateLayerUpload
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateLayerUploadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateLayerUploadResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryNotFoundException'
          description: RegistryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.ListTagsForResource:
    post:
      description: List the tags for an Amazon ECR Public resource.
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.ListTagsForResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.PutImage:
    post:
      description: "<p>Creates or updates the image manifest and tags that are associated\
        \ with an image.</p> <p>When an image is pushed and all new image layers have\
        \ been uploaded, the PutImage API is called once to create or update the image\
        \ manifest and the tags that are associated with the image.</p> <note> <p>This\
        \ operation is used by the Amazon ECR proxy and is not generally used by customers\
        \ for pulling and pushing images. In most cases, you should use the <code>docker</code>\
        \ CLI to pull, tag, and push images.</p> </note>"
      operationId: PutImage
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.PutImage
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutImageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutImageResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAlreadyExistsException'
          description: ImageAlreadyExistsException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayersNotFoundException'
          description: LayersNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencedImagesNotFoundException'
          description: ReferencedImagesNotFoundException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageTagAlreadyExistsException'
          description: ImageTagAlreadyExistsException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageDigestDoesNotMatchException'
          description: ImageDigestDoesNotMatchException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryNotFoundException'
          description: RegistryNotFoundException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.PutRegistryCatalogData:
    post:
      description: Create or update the catalog data for a public registry.
      operationId: PutRegistryCatalogData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.PutRegistryCatalogData
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRegistryCatalogDataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRegistryCatalogDataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.PutRepositoryCatalogData:
    post:
      description: Creates or updates the catalog data for a repository in a public
        registry.
      operationId: PutRepositoryCatalogData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.PutRepositoryCatalogData
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRepositoryCatalogDataRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutRepositoryCatalogDataResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.SetRepositoryPolicy:
    post:
      description: "Applies a repository policy to the specified public repository\
        \ to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\"\
        >Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry\
        \ User Guide</i>."
      operationId: SetRepositoryPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.SetRepositoryPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRepositoryPolicyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetRepositoryPolicyResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.TagResource:
    post:
      description: "Associates the specified tags to a resource with the specified\
        \ <code>resourceArn</code>. If existing tags on a resource aren't specified\
        \ in the request parameters, they aren't changed. When a resource is deleted,\
        \ the tags associated with that resource are also deleted."
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.TagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
          description: InvalidTagParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.UntagResource:
    post:
      description: Deletes specified tags from a resource.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.UntagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTagParameterException'
          description: InvalidTagParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
          description: TooManyTagsException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=SpencerFrontendService.UploadLayerPart:
    post:
      description: "<p>Uploads an image layer part to Amazon ECR.</p> <p>When an image\
        \ is pushed, each new image layer is uploaded in parts. The maximum size of\
        \ each image layer part can be 20971520 bytes (about 20MB). The UploadLayerPart\
        \ API is called once for each new image layer part.</p> <note> <p>This operation\
        \ is used by the Amazon ECR proxy and is not generally used by customers for\
        \ pulling and pushing images. In most cases, you should use the <code>docker</code>\
        \ CLI to pull, tag, and push images.</p> </note>"
      operationId: UploadLayerPart
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - SpencerFrontendService.UploadLayerPart
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadLayerPartRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadLayerPartResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerException'
          description: ServerException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
          description: InvalidParameterException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLayerPartException'
          description: InvalidLayerPartException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryNotFoundException'
          description: RepositoryNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadNotFoundException'
          description: UploadNotFoundException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistryNotFoundException'
          description: RegistryNotFoundException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedCommandException'
          description: UnsupportedCommandException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    BatchCheckLayerAvailabilityResponse:
      example:
        failures: ""
        layers: ""
      properties:
        layers:
          allOf:
          - $ref: '#/components/schemas/LayerList'
          - description: A list of image layer objects that correspond to the image
              layer references in the request.
        failures:
          allOf:
          - $ref: '#/components/schemas/LayerFailureList'
          - description: Any failures associated with the call.
      type: object
    BatchCheckLayerAvailabilityRequest:
      example:
        registryId: ""
        layerDigests: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: "The Amazon Web Services account ID, or registry alias, associated\
              \ with the public registry that contains the image layers to check.\
              \ If you do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that's associated with the image
              layers to check.
        layerDigests:
          allOf:
          - $ref: '#/components/schemas/BatchedOperationLayerDigestList'
          - description: The digests of the image layers to check.
      required:
      - layerDigests
      - repositoryName
      title: BatchCheckLayerAvailabilityRequest
      type: object
    RepositoryNotFoundException: {}
    InvalidParameterException: {}
    ServerException: {}
    RegistryNotFoundException: {}
    UnsupportedCommandException: {}
    BatchDeleteImageResponse:
      example:
        failures: ""
        imageIds: ""
      properties:
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: The image IDs of the deleted images.
        failures:
          allOf:
          - $ref: '#/components/schemas/ImageFailureList'
          - description: Any failures associated with the call.
      type: object
    BatchDeleteImageRequest:
      example:
        registryId: ""
        repositoryName: ""
        imageIds: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: "The Amazon Web Services account ID, or registry alias, that's\
              \ associated with the registry that contains the image to delete. If\
              \ you do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository in a public registry that contains the image
              to delete.
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: A list of image ID references that correspond to images to
              delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code>
              or <code>imageDigest=digest</code>.
      required:
      - imageIds
      - repositoryName
      title: BatchDeleteImageRequest
      type: object
    CompleteLayerUploadResponse:
      example:
        layerDigest: ""
        uploadId: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The public registry ID that's associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name that's associated with the request.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID that's associated with the layer.
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/LayerDigest'
          - description: The <code>sha256</code> digest of the image layer.
      type: object
    CompleteLayerUploadRequest:
      example:
        uploadId: ""
        registryId: ""
        layerDigests: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: "The Amazon Web Services account ID, or registry alias, associated\
              \ with the registry where layers are uploaded. If you do not specify\
              \ a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository in a public registry to associate
              with the image layer.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID from a previous <a>InitiateLayerUpload</a>
              operation to associate with the image layer.
        layerDigests:
          allOf:
          - $ref: '#/components/schemas/LayerDigestList'
          - description: The <code>sha256</code> digest of the image layer.
      required:
      - layerDigests
      - repositoryName
      - uploadId
      title: CompleteLayerUploadRequest
      type: object
    UploadNotFoundException: {}
    InvalidLayerException: {}
    LayerPartTooSmallException: {}
    LayerAlreadyExistsException: {}
    EmptyUploadException: {}
    CreateRepositoryResponse:
      example:
        catalogData:
          architectures: ""
          operatingSystems: ""
          marketplaceCertified: ""
          description: ""
          usageText: ""
          aboutText: ""
          logoUrl: ""
        repository:
          createdAt: ""
          repositoryUri: ""
          registryId: ""
          repositoryArn: ""
          repositoryName: ""
      properties:
        repository:
          $ref: '#/components/schemas/CreateRepositoryResponse_repository'
        catalogData:
          $ref: '#/components/schemas/RepositoryCatalogData'
      type: object
    CreateRepositoryRequest:
      example:
        catalogData:
          architectures: ""
          operatingSystems: ""
          logoImageBlob: ""
          description: ""
          usageText: ""
          aboutText: ""
        repositoryName: ""
        tags: ""
      properties:
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name to use for the repository. This appears publicly
              in the Amazon ECR Public Gallery. The repository name can be specified
              on its own (for example <code>nginx-web-app</code>) or prepended with
              a namespace to group the repository into a category (for example <code>project-a/nginx-web-app</code>).
        catalogData:
          $ref: '#/components/schemas/CreateRepositoryRequest_catalogData'
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "The metadata that you apply to each repository to help categorize\
              \ and organize your repositories. Each tag consists of a key and an\
              \ optional value. You define both of them. Tag keys can have a maximum\
              \ character length of 128 characters, and tag values can have a maximum\
              \ length of 256 characters."
      required:
      - repositoryName
      title: CreateRepositoryRequest
      type: object
    InvalidTagParameterException: {}
    TooManyTagsException: {}
    RepositoryAlreadyExistsException: {}
    LimitExceededException: {}
    DeleteRepositoryResponse:
      example:
        repository:
          createdAt: ""
          repositoryUri: ""
          registryId: ""
          repositoryArn: ""
          repositoryName: ""
      properties:
        repository:
          $ref: '#/components/schemas/DeleteRepositoryResponse_repository'
      type: object
    DeleteRepositoryRequest:
      example:
        registryId: ""
        force: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the public registry that contains the repository to delete. If you\
              \ do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to delete.
        force:
          allOf:
          - $ref: '#/components/schemas/ForceFlag'
          - description: " The force option can be used to delete a repository that\
              \ contains images. If the force option is not used, the repository must\
              \ be empty prior to deletion."
      required:
      - repositoryName
      title: DeleteRepositoryRequest
      type: object
    RepositoryNotEmptyException: {}
    DeleteRepositoryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID that's associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name that's associated with the request.
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: The JSON repository policy that was deleted from the repository.
      type: object
    DeleteRepositoryPolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the public registry that contains the repository policy to delete.\
              \ If you do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that's associated with the repository
              policy to delete.
      required:
      - repositoryName
      title: DeleteRepositoryPolicyRequest
      type: object
    RepositoryPolicyNotFoundException: {}
    DescribeImageTagsResponse:
      example:
        nextToken: ""
        imageTagDetails: ""
      properties:
        imageTagDetails:
          allOf:
          - $ref: '#/components/schemas/ImageTagDetailList'
          - description: The image tag details for the images in the requested repository.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeImageTags</code> request. When the results of a <code>DescribeImageTags</code>\
              \ request exceed <code>maxResults</code>, you can use this value to\
              \ retrieve the next page of results. If there are no more results to\
              \ return, this value is <code>null</code>."
      type: object
    DescribeImageTagsRequest:
      example:
        nextToken: ""
        maxResults: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the public registry that contains the repository where images are\
              \ described. If you do not specify a registry, the default public registry\
              \ is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that contains the image tag details
              to describe.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value that's returned from a\
              \ previous paginated <code>DescribeImageTags</code> request where <code>maxResults</code>\
              \ was used and the results exceeded the value of that parameter. Pagination\
              \ continues from the end of the previous results that returned the <code>nextToken</code>\
              \ value. If there are no more results to return, this value is <code>null</code>.\
              \ If you specify images with <code>imageIds</code>, you can't use this\
              \ option."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of repository results that's returned\
              \ by <code>DescribeImageTags</code> in paginated output. When this parameter\
              \ is used, <code>DescribeImageTags</code> only returns <code>maxResults</code>\
              \ results in a single page along with a <code>nextToken</code> response\
              \ element. You can see the remaining results of the initial request\
              \ by sending another <code>DescribeImageTags</code> request with the\
              \ returned <code>nextToken</code> value. This value can be between 1\
              \ and 1000. If this parameter isn't used, then <code>DescribeImageTags</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable.\
              \ If you specify images with <code>imageIds</code>, you can't use this\
              \ option."
      required:
      - repositoryName
      title: DescribeImageTagsRequest
      type: object
    DescribeImagesResponse:
      example:
        imageDetails: ""
        nextToken: ""
      properties:
        imageDetails:
          allOf:
          - $ref: '#/components/schemas/ImageDetailList'
          - description: A list of <a>ImageDetail</a> objects that contain data about
              the image.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeImages</code> request. When the results of a <code>DescribeImages</code>\
              \ request exceed <code>maxResults</code>, you can use this value to\
              \ retrieve the next page of results. If there are no more results to\
              \ return, this value is <code>null</code>."
      type: object
    DescribeImagesRequest:
      example:
        nextToken: ""
        maxResults: ""
        registryId: ""
        repositoryName: ""
        imageIds: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the public registry that contains the repository where images are\
              \ described. If you do not specify a registry, the default public registry\
              \ is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository that contains the images to describe.
        imageIds:
          allOf:
          - $ref: '#/components/schemas/ImageIdentifierList'
          - description: The list of image IDs for the requested repository.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value that's returned from a\
              \ previous paginated <code>DescribeImages</code> request where <code>maxResults</code>\
              \ was used and the results exceeded the value of that parameter. Pagination\
              \ continues from the end of the previous results that returned the <code>nextToken</code>\
              \ value. If there are no more results to return, this value is <code>null</code>.\
              \ If you specify images with <code>imageIds</code>, you can't use this\
              \ option."
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of repository results that's returned\
              \ by <code>DescribeImages</code> in paginated output. When this parameter\
              \ is used, <code>DescribeImages</code> only returns <code>maxResults</code>\
              \ results in a single page along with a <code>nextToken</code> response\
              \ element. You can see the remaining results of the initial request\
              \ by sending another <code>DescribeImages</code> request with the returned\
              \ <code>nextToken</code> value. This value can be between 1 and 1000.\
              \ If this parameter isn't used, then <code>DescribeImages</code> returns\
              \ up to 100 results and a <code>nextToken</code> value, if applicable.\
              \ If you specify images with <code>imageIds</code>, you can't use this\
              \ option."
      required:
      - repositoryName
      title: DescribeImagesRequest
      type: object
    ImageNotFoundException: {}
    DescribeRegistriesResponse:
      example:
        nextToken: ""
        registries: ""
      properties:
        registries:
          allOf:
          - $ref: '#/components/schemas/RegistryList'
          - description: An object that contains the details for a public registry.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeRepositories</code> request. If the results of a <code>DescribeRepositories</code>\
              \ request exceed <code>maxResults</code>, you can use this value to\
              \ retrieve the next page of results. If there are no more results, this\
              \ value is <code>null</code>."
      required:
      - registries
      type: object
    DescribeRegistriesRequest:
      example:
        nextToken: ""
        maxResults: ""
      properties:
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>The <code>nextToken</code> value that's returned from\
              \ a previous paginated <code>DescribeRegistries</code> request where\
              \ <code>maxResults</code> was used and the results exceeded the value\
              \ of that parameter. Pagination continues from the end of the previous\
              \ results that returned the <code>nextToken</code> value. If there are\
              \ no more results to return, this value is <code>null</code>.</p> <note>\
              \ <p>This token should be treated as an opaque identifier that is only\
              \ used to retrieve the next items in a list and not for other programmatic\
              \ purposes.</p> </note>"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of repository results that's returned\
              \ by <code>DescribeRegistries</code> in paginated output. When this\
              \ parameter is used, <code>DescribeRegistries</code> only returns <code>maxResults</code>\
              \ results in a single page along with a <code>nextToken</code> response\
              \ element. The remaining results of the initial request can be seen\
              \ by sending another <code>DescribeRegistries</code> request with the\
              \ returned <code>nextToken</code> value. This value can be between 1\
              \ and 1000. If this parameter isn't used, then <code>DescribeRegistries</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable."
      title: DescribeRegistriesRequest
      type: object
    DescribeRepositoriesResponse:
      example:
        repositories: ""
        nextToken: ""
      properties:
        repositories:
          allOf:
          - $ref: '#/components/schemas/RepositoryList'
          - description: A list of repository objects corresponding to valid repositories.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "The <code>nextToken</code> value to include in a future\
              \ <code>DescribeRepositories</code> request. When the results of a <code>DescribeRepositories</code>\
              \ request exceed <code>maxResults</code>, this value can be used to\
              \ retrieve the next page of results. If there are no more results to\
              \ return, this value is <code>null</code>."
      type: object
    DescribeRepositoriesRequest:
      example:
        nextToken: ""
        maxResults: ""
        repositoryNames: ""
        registryId: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the registry that contains the repositories to be described. If you\
              \ do not specify a registry, the default public registry is assumed."
        repositoryNames:
          allOf:
          - $ref: '#/components/schemas/RepositoryNameList'
          - description: "A list of repositories to describe. If this parameter is\
              \ omitted, then all repositories in a registry are described."
        nextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "<p>The <code>nextToken</code> value that's returned from\
              \ a previous paginated <code>DescribeRepositories</code> request where\
              \ <code>maxResults</code> was used and the results exceeded the value\
              \ of that parameter. Pagination continues from the end of the previous\
              \ results that returned the <code>nextToken</code> value. If there are\
              \ no more results to return, this value is <code>null</code>. If you\
              \ specify repositories with <code>repositoryNames</code>, you can't\
              \ use this option.</p> <note> <p>This token should be treated as an\
              \ opaque identifier that is only used to retrieve the next items in\
              \ a list and not for other programmatic purposes.</p> </note>"
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "The maximum number of repository results that's returned\
              \ by <code>DescribeRepositories</code> in paginated output. When this\
              \ parameter is used, <code>DescribeRepositories</code> only returns\
              \ <code>maxResults</code> results in a single page along with a <code>nextToken</code>\
              \ response element. You can see the remaining results of the initial\
              \ request by sending another <code>DescribeRepositories</code> request\
              \ with the returned <code>nextToken</code> value. This value can be\
              \ between 1 and 1000. If this parameter isn't used, then <code>DescribeRepositories</code>\
              \ returns up to 100 results and a <code>nextToken</code> value, if applicable.\
              \ If you specify repositories with <code>repositoryNames</code>, you\
              \ can't use this option."
      title: DescribeRepositoriesRequest
      type: object
    GetAuthorizationTokenResponse:
      example:
        authorizationData:
          authorizationToken: ""
          expiresAt: ""
      properties:
        authorizationData:
          $ref: '#/components/schemas/GetAuthorizationTokenResponse_authorizationData'
      type: object
    GetAuthorizationTokenRequest:
      properties: {}
      title: GetAuthorizationTokenRequest
      type: object
    GetRegistryCatalogDataResponse:
      example:
        registryCatalogData:
          displayName: ""
      properties:
        registryCatalogData:
          $ref: '#/components/schemas/GetRegistryCatalogDataResponse_registryCatalogData'
      required:
      - registryCatalogData
      type: object
    GetRegistryCatalogDataRequest:
      properties: {}
      title: GetRegistryCatalogDataRequest
      type: object
    GetRepositoryCatalogDataResponse:
      example:
        catalogData:
          architectures: ""
          operatingSystems: ""
          marketplaceCertified: ""
          description: ""
          usageText: ""
          aboutText: ""
          logoUrl: ""
      properties:
        catalogData:
          $ref: '#/components/schemas/GetRepositoryCatalogDataResponse_catalogData'
      type: object
    GetRepositoryCatalogDataRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the registry that contains the repositories to be described. If you\
              \ do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to retrieve the catalog metadata
              for.
      required:
      - repositoryName
      title: GetRepositoryCatalogDataRequest
      type: object
    RepositoryCatalogDataNotFoundException: {}
    GetRepositoryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID that's associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name that's associated with the request.
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: The repository policy text that's associated with the repository.
              The policy text will be in JSON format.
      type: object
    GetRepositoryPolicyRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the public registry that contains the repository. If you do not specify\
              \ a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository with the policy to retrieve.
      required:
      - repositoryName
      title: GetRepositoryPolicyRequest
      type: object
    InitiateLayerUploadResponse:
      example:
        uploadId: ""
        partSize: ""
      properties:
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID for the layer upload. This parameter is passed
              to further <a>UploadLayerPart</a> and <a>CompleteLayerUpload</a> operations.
        partSize:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: "The size, in bytes, that Amazon ECR expects future layer\
              \ part uploads to be."
      type: object
    InitiateLayerUploadRequest:
      example:
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: "The Amazon Web Services account ID, or registry alias, that's\
              \ associated with the registry to which you intend to upload layers.\
              \ If you do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that you want to upload layers
              to.
      required:
      - repositoryName
      title: InitiateLayerUploadRequest
      type: object
    ListTagsForResourceResponse:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: The tags for the resource.
      type: object
    ListTagsForResourceRequest:
      example:
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) that identifies the resource\
              \ to list the tags for. Currently, the supported resource is an Amazon\
              \ ECR Public repository."
      required:
      - resourceArn
      title: ListTagsForResourceRequest
      type: object
    PutImageResponse:
      example:
        image:
          imageManifest: ""
          imageId:
            imageTag: ""
            imageDigest: ""
          registryId: ""
          repositoryName: ""
          imageManifestMediaType: ""
      properties:
        image:
          $ref: '#/components/schemas/PutImageResponse_image'
      type: object
    PutImageRequest:
      example:
        imageManifest: ""
        registryId: ""
        repositoryName: ""
        imageTag: ""
        imageManifestMediaType: ""
        imageDigest: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: "The Amazon Web Services account ID, or registry alias, that's\
              \ associated with the public registry that contains the repository where\
              \ the image is put. If you do not specify a registry, the default public\
              \ registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where the image is put.
        imageManifest:
          allOf:
          - $ref: '#/components/schemas/ImageManifest'
          - description: The image manifest that corresponds to the image to be uploaded.
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: "The media type of the image manifest. If you push an image\
              \ manifest that doesn't contain the <code>mediaType</code> field, you\
              \ must specify the <code>imageManifestMediaType</code> in the request."
        imageTag:
          allOf:
          - $ref: '#/components/schemas/ImageTag'
          - description: The tag to associate with the image. This parameter is required
              for images that use the Docker Image Manifest V2 Schema 2 or Open Container
              Initiative (OCI) formats.
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The image digest of the image manifest that corresponds to
              the image.
      required:
      - imageManifest
      - repositoryName
      title: PutImageRequest
      type: object
    ImageAlreadyExistsException: {}
    LayersNotFoundException: {}
    ReferencedImagesNotFoundException: {}
    ImageTagAlreadyExistsException: {}
    ImageDigestDoesNotMatchException: {}
    PutRegistryCatalogDataResponse:
      example:
        registryCatalogData:
          displayName: ""
      properties:
        registryCatalogData:
          $ref: '#/components/schemas/PutRegistryCatalogDataResponse_registryCatalogData'
      required:
      - registryCatalogData
      type: object
    PutRegistryCatalogDataRequest:
      example:
        displayName: ""
      properties:
        displayName:
          allOf:
          - $ref: '#/components/schemas/RegistryDisplayName'
          - description: <p>The display name for a public registry. The display name
              is shown as the repository author in the Amazon ECR Public Gallery.</p>
              <note> <p>The registry display name is only publicly visible in the
              Amazon ECR Public Gallery for verified accounts.</p> </note>
      title: PutRegistryCatalogDataRequest
      type: object
    PutRepositoryCatalogDataResponse:
      example:
        catalogData:
          architectures: ""
          operatingSystems: ""
          marketplaceCertified: ""
          description: ""
          usageText: ""
          aboutText: ""
          logoUrl: ""
      properties:
        catalogData:
          $ref: '#/components/schemas/PutRepositoryCatalogDataResponse_catalogData'
      type: object
    PutRepositoryCatalogDataRequest:
      example:
        catalogData:
          architectures: ""
          operatingSystems: ""
          logoImageBlob: ""
          description: ""
          usageText: ""
          aboutText: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the public registry the repository is in. If you do not specify a\
              \ registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to create or update the catalog
              data for.
        catalogData:
          $ref: '#/components/schemas/PutRepositoryCatalogDataRequest_catalogData'
      required:
      - catalogData
      - repositoryName
      title: PutRepositoryCatalogDataRequest
      type: object
    SetRepositoryPolicyResponse:
      example:
        policyText: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID that's associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name that's associated with the request.
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: The JSON repository policy text that's applied to the repository.
      type: object
    SetRepositoryPolicyRequest:
      example:
        policyText: ""
        registryId: ""
        force: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the registry that contains the repository. If you do not specify a\
              \ registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository to receive the policy.
        policyText:
          allOf:
          - $ref: '#/components/schemas/RepositoryPolicyText'
          - description: "The JSON repository policy text to apply to the repository.\
              \ For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html\"\
              >Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container\
              \ Registry User Guide</i>."
        force:
          allOf:
          - $ref: '#/components/schemas/ForceFlag'
          - description: "If the policy that you want to set on a repository policy\
              \ would prevent you from setting another policy in the future, you must\
              \ force the <a>SetRepositoryPolicy</a> operation. This prevents accidental\
              \ repository lockouts."
      required:
      - policyText
      - repositoryName
      title: SetRepositoryPolicyRequest
      type: object
    TagResourceResponse:
      properties: {}
      type: object
    TagResourceRequest:
      example:
        resourceArn: ""
        tags: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) of the resource to add tags\
              \ to. Currently, the supported resource is an Amazon ECR Public repository."
        tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "The tags to add to the resource. A tag is an array of key-value\
              \ pairs. Tag keys can have a maximum character length of 128 characters,\
              \ and tag values can have a maximum length of 256 characters."
      required:
      - resourceArn
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceResponse:
      properties: {}
      type: object
    UntagResourceRequest:
      example:
        tagKeys: ""
        resourceArn: ""
      properties:
        resourceArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) of the resource to delete\
              \ tags from. Currently, the supported resource is an Amazon ECR Public\
              \ repository."
        tagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          - description: The keys of the tags to be removed.
      required:
      - resourceArn
      - tagKeys
      title: UntagResourceRequest
      type: object
    UploadLayerPartResponse:
      example:
        lastByteReceived: ""
        uploadId: ""
        registryId: ""
        repositoryName: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The registry ID that's associated with the request.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The repository name that's associated with the request.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID that's associated with the request.
        lastByteReceived:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: The integer value of the last byte that's received in the
              request.
      type: object
    UploadLayerPartRequest:
      example:
        uploadId: ""
        layerPartBlob: ""
        registryId: ""
        repositoryName: ""
        partFirstByte: ""
        partLastByte: ""
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: "The Amazon Web Services account ID, or registry alias, that's\
              \ associated with the registry that you're uploading layer parts to.\
              \ If you do not specify a registry, the default public registry is assumed."
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that you're uploading layer parts
              to.
        uploadId:
          allOf:
          - $ref: '#/components/schemas/UploadId'
          - description: The upload ID from a previous <a>InitiateLayerUpload</a>
              operation to associate with the layer part upload.
        partFirstByte:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: The position of the first byte of the layer part witin the
              overall image layer.
        partLastByte:
          allOf:
          - $ref: '#/components/schemas/PartSize'
          - description: The position of the last byte of the layer part within the
              overall image layer.
        layerPartBlob:
          allOf:
          - $ref: '#/components/schemas/LayerPartBlob'
          - description: The base64-encoded layer part payload.
      required:
      - layerPartBlob
      - partFirstByte
      - partLastByte
      - repositoryName
      - uploadId
      title: UploadLayerPartRequest
      type: object
    InvalidLayerPartException: {}
    AboutText:
      maxLength: 25600
      type: string
    Architecture:
      maxLength: 50
      minLength: 1
      type: string
    ArchitectureList:
      items:
        $ref: '#/components/schemas/Architecture'
      maxItems: 50
      type: array
    Arn:
      maxLength: 2048
      minLength: 1
      type: string
    Base64:
      pattern: ^\S+$
      type: string
    ExpirationTimestamp:
      format: date-time
      type: string
    AuthorizationData:
      description: An authorization token data object that corresponds to a public
        registry.
      properties:
        authorizationToken:
          allOf:
          - $ref: '#/components/schemas/Base64'
          - description: "A base64-encoded string that contains authorization data\
              \ for a public Amazon ECR registry. When the string is decoded, it's\
              \ presented in the format <code>user:password</code> for public registry\
              \ authentication using <code>docker login</code>."
        expiresAt:
          allOf:
          - $ref: '#/components/schemas/ExpirationTimestamp'
          - description: The Unix time in seconds and milliseconds when the authorization
              token expires. Authorization tokens are valid for 12 hours.
      type: object
    RegistryIdOrAlias:
      maxLength: 50
      minLength: 2
      type: string
    RepositoryName:
      maxLength: 205
      minLength: 2
      pattern: "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*"
      type: string
    BatchedOperationLayerDigestList:
      items:
        $ref: '#/components/schemas/BatchedOperationLayerDigest'
      maxItems: 100
      minItems: 1
      type: array
    LayerList:
      items:
        $ref: '#/components/schemas/Layer'
      type: array
    LayerFailureList:
      items:
        $ref: '#/components/schemas/LayerFailure'
      type: array
    ImageIdentifierList:
      items:
        $ref: '#/components/schemas/ImageIdentifier'
      maxItems: 100
      minItems: 1
      type: array
    ImageFailureList:
      items:
        $ref: '#/components/schemas/ImageFailure'
      type: array
    BatchedOperationLayerDigest:
      maxLength: 1000
      minLength: 0
      type: string
    UploadId:
      pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      type: string
    LayerDigestList:
      items:
        $ref: '#/components/schemas/LayerDigest'
      maxItems: 100
      minItems: 1
      type: array
    RegistryId:
      pattern: "[0-9]{12}"
      type: string
    LayerDigest:
      pattern: "[a-zA-Z0-9-_+.]+:[a-fA-F0-9]+"
      type: string
    RepositoryCatalogDataInput:
      description: An object that contains the catalog data for a repository. This
        data is publicly visible in the Amazon ECR Public Gallery.
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          - description: A short description of the contents of the repository. This
              text appears in both the image details and also when searching for repositories
              on the Amazon ECR Public Gallery.
        architectures:
          allOf:
          - $ref: '#/components/schemas/ArchitectureList'
          - description: "<p>The system architecture that the images in the repository\
              \ are compatible with. On the Amazon ECR Public Gallery, the following\
              \ supported architectures appear as badges on the repository and are\
              \ used as search filters.</p> <note> <p>If an unsupported tag is added\
              \ to your repository catalog data, it's associated with the repository\
              \ and can be retrieved using the API but isn't discoverable in the Amazon\
              \ ECR Public Gallery.</p> </note> <ul> <li> <p> <code>ARM</code> </p>\
              \ </li> <li> <p> <code>ARM 64</code> </p> </li> <li> <p> <code>x86</code>\
              \ </p> </li> <li> <p> <code>x86-64</code> </p> </li> </ul>"
        operatingSystems:
          allOf:
          - $ref: '#/components/schemas/OperatingSystemList'
          - description: "<p>The operating systems that the images in the repository\
              \ are compatible with. On the Amazon ECR Public Gallery, the following\
              \ supported operating systems appear as badges on the repository and\
              \ are used as search filters.</p> <note> <p>If an unsupported tag is\
              \ added to your repository catalog data, it's associated with the repository\
              \ and can be retrieved using the API but isn't discoverable in the Amazon\
              \ ECR Public Gallery.</p> </note> <ul> <li> <p> <code>Linux</code> </p>\
              \ </li> <li> <p> <code>Windows</code> </p> </li> </ul>"
        logoImageBlob:
          allOf:
          - $ref: '#/components/schemas/LogoImageBlob'
          - description: <p>The base64-encoded repository logo payload.</p> <note>
              <p>The repository logo is only publicly visible in the Amazon ECR Public
              Gallery for verified accounts.</p> </note>
        aboutText:
          allOf:
          - $ref: '#/components/schemas/AboutText'
          - description: A detailed description of the contents of the repository.
              It's publicly visible in the Amazon ECR Public Gallery. The text must
              be in markdown format.
        usageText:
          allOf:
          - $ref: '#/components/schemas/UsageText'
          - description: "Detailed information about how to use the contents of the\
              \ repository. It's publicly visible in the Amazon ECR Public Gallery.\
              \ The usage text provides context, support information, and additional\
              \ usage details for users of the repository. The text must be in markdown\
              \ format."
      type: object
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      maxItems: 200
      minItems: 0
      type: array
    Repository:
      description: An object representing a repository.
      properties:
        repositoryArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: "The Amazon Resource Name (ARN) that identifies the repository.\
              \ The ARN contains the <code>arn:aws:ecr</code> namespace, followed\
              \ by the region of the repository, Amazon Web Services account ID of\
              \ the repository owner, repository namespace, and repository name. For\
              \ example, <code>arn:aws:ecr:region:012345678910:repository/test</code>."
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID that's associated with
              the public registry that contains the repository.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository.
        repositoryUri:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The URI for the repository. You can use this URI for container
              image <code>push</code> and <code>pull</code> operations.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreationTimestamp'
          - description: "The date and time, in JavaScript date format, when the repository\
              \ was created."
      type: object
    RepositoryCatalogData:
      description: The catalog data for a repository. This data is publicly visible
        in the Amazon ECR Public Gallery.
      example:
        architectures: ""
        operatingSystems: ""
        marketplaceCertified: ""
        description: ""
        usageText: ""
        aboutText: ""
        logoUrl: ""
      properties:
        description:
          allOf:
          - $ref: '#/components/schemas/RepositoryDescription'
          - description: The short description of the repository.
        architectures:
          allOf:
          - $ref: '#/components/schemas/ArchitectureList'
          - description: "<p>The architecture tags that are associated with the repository.</p>\
              \ <note> <p>Only supported operating system tags appear publicly in\
              \ the Amazon ECR Public Gallery. For more information, see <a>RepositoryCatalogDataInput</a>.</p>\
              \ </note>"
        operatingSystems:
          allOf:
          - $ref: '#/components/schemas/OperatingSystemList'
          - description: "<p>The operating system tags that are associated with the\
              \ repository.</p> <note> <p>Only supported operating system tags appear\
              \ publicly in the Amazon ECR Public Gallery. For more information, see\
              \ <a>RepositoryCatalogDataInput</a>.</p> </note>"
        logoUrl:
          allOf:
          - $ref: '#/components/schemas/ResourceUrl'
          - description: The URL that contains the logo that's associated with the
              repository.
        aboutText:
          allOf:
          - $ref: '#/components/schemas/AboutText'
          - description: The longform description of the contents of the repository.
              This text appears in the repository details on the Amazon ECR Public
              Gallery.
        usageText:
          allOf:
          - $ref: '#/components/schemas/UsageText'
          - description: The longform usage details of the contents of the repository.
              The usage text provides context for users of the repository.
        marketplaceCertified:
          allOf:
          - $ref: '#/components/schemas/MarketplaceCertified'
          - description: Indicates whether the repository is certified by Amazon Web
              Services Marketplace.
      type: object
    CreationTimestamp:
      format: date-time
      type: string
    DefaultRegistryAliasFlag:
      type: boolean
    RepositoryPolicyText:
      maxLength: 10240
      minLength: 0
      type: string
    ForceFlag:
      type: boolean
    NextToken:
      type: string
    MaxResults:
      maximum: 1000
      minimum: 1
      type: integer
    ImageTagDetailList:
      items:
        $ref: '#/components/schemas/ImageTagDetail'
      type: array
    ImageDetailList:
      items:
        $ref: '#/components/schemas/ImageDetail'
      type: array
    RegistryList:
      items:
        $ref: '#/components/schemas/Registry'
      type: array
    RepositoryNameList:
      items:
        $ref: '#/components/schemas/RepositoryName'
      maxItems: 100
      minItems: 1
      type: array
    RepositoryList:
      items:
        $ref: '#/components/schemas/Repository'
      type: array
    RegistryCatalogData:
      description: The metadata for a public registry.
      properties:
        displayName:
          allOf:
          - $ref: '#/components/schemas/RegistryDisplayName'
          - description: <p>The display name for a public registry. This appears on
              the Amazon ECR Public Gallery.</p> <important> <p>Only accounts that
              have the verified account badge can have a registry display name.</p>
              </important>
      type: object
    ImageIdentifier:
      description: An object with identifying information for an Amazon ECR image.
      properties:
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The <code>sha256</code> digest of the image manifest.
        imageTag:
          allOf:
          - $ref: '#/components/schemas/ImageTag'
          - description: The tag that's used for the image.
      type: object
    ImageManifest:
      maxLength: 4194304
      minLength: 1
      type: string
    MediaType:
      type: string
    Image:
      description: An object that represents an Amazon ECR image.
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryIdOrAlias'
          - description: The Amazon Web Services account ID that's associated with
              the registry containing the image.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository that's associated with the image.
        imageId:
          $ref: '#/components/schemas/Image_imageId'
        imageManifest:
          allOf:
          - $ref: '#/components/schemas/ImageManifest'
          - description: The image manifest that's associated with the image.
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The manifest media type of the image.
      type: object
    ImageDigest:
      type: string
    ImageTagList:
      items:
        $ref: '#/components/schemas/ImageTag'
      type: array
    ImageSizeInBytes:
      type: integer
    PushTimestamp:
      format: date-time
      type: string
    ImageDetail:
      description: An object that describes an image that's returned by a <a>DescribeImages</a>
        operation.
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: The Amazon Web Services account ID that's associated with
              the public registry where this image belongs.
        repositoryName:
          allOf:
          - $ref: '#/components/schemas/RepositoryName'
          - description: The name of the repository where this image belongs.
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The <code>sha256</code> digest of the image manifest.
        imageTags:
          allOf:
          - $ref: '#/components/schemas/ImageTagList'
          - description: The list of tags that's associated with this image.
        imageSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/ImageSizeInBytes'
          - description: "<p>The size, in bytes, of the image in the repository.</p>\
              \ <p>If the image is a manifest list, this is the max size of all manifests\
              \ in the list.</p> <note> <p>Beginning with Docker version 1.9, the\
              \ Docker client compresses image layers before pushing them to a V2\
              \ Docker registry. The output of the <code>docker images</code> command\
              \ shows the uncompressed image size, so it might return a larger image\
              \ size than the image sizes that are returned by <a>DescribeImages</a>.</p>\
              \ </note>"
        imagePushedAt:
          allOf:
          - $ref: '#/components/schemas/PushTimestamp'
          - description: "The date and time, expressed in standard JavaScript date\
              \ format, that the current image was pushed to the repository at. "
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The media type of the image manifest.
        artifactMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The artifact media type of the image.
      type: object
    ImageFailureCode:
      enum:
      - InvalidImageDigest
      - InvalidImageTag
      - ImageTagDoesNotMatchDigest
      - ImageNotFound
      - MissingDigestAndTag
      - ImageReferencedByManifestList
      - KmsError
      type: string
    ImageFailureReason:
      type: string
    ImageFailure:
      description: An object that represents an Amazon ECR image failure.
      properties:
        imageId:
          $ref: '#/components/schemas/ImageFailure_imageId'
        failureCode:
          allOf:
          - $ref: '#/components/schemas/ImageFailureCode'
          - description: The code that's associated with the failure.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/ImageFailureReason'
          - description: The reason for the failure.
      type: object
    ImageTag:
      maxLength: 300
      minLength: 1
      type: string
    ReferencedImageDetail:
      description: An object that describes the image tag details that are returned
        by a <a>DescribeImageTags</a> action.
      properties:
        imageDigest:
          allOf:
          - $ref: '#/components/schemas/ImageDigest'
          - description: The <code>sha256</code> digest of the image manifest.
        imageSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/ImageSizeInBytes'
          - description: "<p>The size, in bytes, of the image in the repository.</p>\
              \ <p>If the image is a manifest list, this is the max size of all manifests\
              \ in the list.</p> <note> <p>Beginning with Docker version 1.9, the\
              \ Docker client compresses image layers before pushing them to a V2\
              \ Docker registry. The output of the <code>docker images</code> command\
              \ shows the uncompressed image size, so it might return a larger image\
              \ size than the image sizes that are returned by <a>DescribeImages</a>.</p>\
              \ </note>"
        imagePushedAt:
          allOf:
          - $ref: '#/components/schemas/PushTimestamp'
          - description: "The date and time, expressed in standard JavaScript date\
              \ format, which the current image tag was pushed to the repository at."
        imageManifestMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The media type of the image manifest.
        artifactMediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: The artifact media type of the image.
      type: object
    ImageTagDetail:
      description: An object that represents the image tag details for an image.
      properties:
        imageTag:
          allOf:
          - $ref: '#/components/schemas/ImageTag'
          - description: The tag that's associated with the image.
        createdAt:
          allOf:
          - $ref: '#/components/schemas/CreationTimestamp'
          - description: The time stamp that indicates when the image tag was created.
        imageDetail:
          $ref: '#/components/schemas/ImageTagDetail_imageDetail'
      type: object
    PartSize:
      minimum: 0
      type: integer
    LayerAvailability:
      enum:
      - AVAILABLE
      - UNAVAILABLE
      type: string
    LayerSizeInBytes:
      type: integer
    Layer:
      description: An object that represents an Amazon ECR image layer.
      properties:
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/LayerDigest'
          - description: The <code>sha256</code> digest of the image layer.
        layerAvailability:
          allOf:
          - $ref: '#/components/schemas/LayerAvailability'
          - description: The availability status of the image layer.
        layerSize:
          allOf:
          - $ref: '#/components/schemas/LayerSizeInBytes'
          - description: "The size, in bytes, of the image layer."
        mediaType:
          allOf:
          - $ref: '#/components/schemas/MediaType'
          - description: "The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code>\
              \ or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>."
      type: object
    LayerFailureCode:
      enum:
      - InvalidLayerDigest
      - MissingLayerDigest
      type: string
    LayerFailureReason:
      type: string
    LayerFailure:
      description: An object that represents an Amazon ECR image layer failure.
      properties:
        layerDigest:
          allOf:
          - $ref: '#/components/schemas/BatchedOperationLayerDigest'
          - description: The layer digest that's associated with the failure.
        failureCode:
          allOf:
          - $ref: '#/components/schemas/LayerFailureCode'
          - description: The failure code that's associated with the failure.
        failureReason:
          allOf:
          - $ref: '#/components/schemas/LayerFailureReason'
          - description: The reason for the failure.
      type: object
    LayerPartBlob:
      maxLength: 20971520
      minLength: 0
      type: string
    LogoImageBlob:
      maxLength: 512000
      minLength: 0
      type: string
    MarketplaceCertified:
      type: boolean
    OperatingSystem:
      maxLength: 50
      minLength: 1
      type: string
    OperatingSystemList:
      items:
        $ref: '#/components/schemas/OperatingSystem'
      maxItems: 50
      type: array
    PrimaryRegistryAliasFlag:
      type: boolean
    RegistryDisplayName:
      maxLength: 100
      minLength: 0
      type: string
    Url:
      type: string
    RegistryVerified:
      type: boolean
    RegistryAliasList:
      items:
        $ref: '#/components/schemas/RegistryAlias'
      type: array
    Registry:
      description: The details of a public registry.
      properties:
        registryId:
          allOf:
          - $ref: '#/components/schemas/RegistryId'
          - description: "The Amazon Web Services account ID that's associated with\
              \ the registry. If you do not specify a registry, the default public\
              \ registry is assumed."
        registryArn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) of the public registry.
        registryUri:
          allOf:
          - $ref: '#/components/schemas/Url'
          - description: The URI of a public registry. The URI contains a universal
              prefix and the registry alias.
        verified:
          allOf:
          - $ref: '#/components/schemas/RegistryVerified'
          - description: "Indicates whether the account is a verified Amazon Web Services\
              \ Marketplace vendor. If an account is verified, each public repository\
              \ receives a verified account badge on the Amazon ECR Public Gallery."
        aliases:
          allOf:
          - $ref: '#/components/schemas/RegistryAliasList'
          - description: An array of objects that represents the aliases for a public
              registry.
      required:
      - aliases
      - registryArn
      - registryId
      - registryUri
      - verified
      type: object
    RegistryAliasName:
      maxLength: 50
      minLength: 2
      pattern: "[a-z][a-z0-9]+(?:[._-][a-z0-9]+)*"
      type: string
    RegistryAliasStatus:
      enum:
      - ACTIVE
      - PENDING
      - REJECTED
      type: string
    RegistryAlias:
      description: "An object representing the aliases for a public registry. A public\
        \ registry is given an alias when it's created. However, a custom alias can\
        \ be set using the Amazon ECR console. For more information, see <a href=\"\
        https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html\">Registries</a>\
        \ in the <i>Amazon Elastic Container Registry User Guide</i>."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/RegistryAliasName'
          - description: The name of the registry alias.
        status:
          allOf:
          - $ref: '#/components/schemas/RegistryAliasStatus'
          - description: The status of the registry alias.
        primaryRegistryAlias:
          allOf:
          - $ref: '#/components/schemas/PrimaryRegistryAliasFlag'
          - description: "<p>Indicates whether the registry alias is the primary alias\
              \ for the registry. If true, the alias is the primary registry alias\
              \ and is displayed in both the repository URL and the image URI used\
              \ in the <code>docker pull</code> commands on the Amazon ECR Public\
              \ Gallery.</p> <note> <p>A registry alias that isn't the primary registry\
              \ alias can be used in the repository URI in a <code>docker pull</code>\
              \ command.</p> </note>"
        defaultRegistryAlias:
          allOf:
          - $ref: '#/components/schemas/DefaultRegistryAliasFlag'
          - description: "Indicates whether the registry alias is the default alias\
              \ for the registry. When the first public repository is created, your\
              \ public registry is assigned a default registry alias."
      required:
      - defaultRegistryAlias
      - name
      - primaryRegistryAlias
      - status
      type: object
    RepositoryDescription:
      maxLength: 1024
      type: string
    ResourceUrl:
      maxLength: 2048
      type: string
    UsageText:
      maxLength: 25600
      type: string
    TagKey:
      maxLength: 128
      minLength: 1
      type: string
    TagValue:
      maxLength: 256
      minLength: 0
      type: string
    Tag:
      description: "The metadata that you apply to a resource to help you categorize\
        \ and organize them. Each tag consists of a key and an optional value. You\
        \ define both. Tag keys can have a maximum character length of 128 characters,\
        \ and tag values can have a maximum length of 256 characters."
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: One part of a key-value pair that make up a tag. A <code>key</code>
              is a general label that acts like a category for more specific tag values.
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: The optional part of a key-value pair that make up a tag.
              A <code>value</code> acts as a descriptor within a tag category (key).
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 200
      minItems: 0
      type: array
    CreateRepositoryResponse_repository:
      allOf:
      - $ref: '#/components/schemas/Repository'
      - description: The repository that was created.
      example:
        createdAt: ""
        repositoryUri: ""
        registryId: ""
        repositoryArn: ""
        repositoryName: ""
    CreateRepositoryRequest_catalogData:
      allOf:
      - $ref: '#/components/schemas/RepositoryCatalogDataInput'
      - description: The details about the repository that are publicly visible in
          the Amazon ECR Public Gallery.
      example:
        architectures: ""
        operatingSystems: ""
        logoImageBlob: ""
        description: ""
        usageText: ""
        aboutText: ""
    DeleteRepositoryResponse_repository:
      allOf:
      - $ref: '#/components/schemas/Repository'
      - description: The repository that was deleted.
      example:
        createdAt: ""
        repositoryUri: ""
        registryId: ""
        repositoryArn: ""
        repositoryName: ""
    GetAuthorizationTokenResponse_authorizationData:
      allOf:
      - $ref: '#/components/schemas/AuthorizationData'
      - description: An authorization token data object that corresponds to a public
          registry.
      example:
        authorizationToken: ""
        expiresAt: ""
    GetRegistryCatalogDataResponse_registryCatalogData:
      allOf:
      - $ref: '#/components/schemas/RegistryCatalogData'
      - description: The catalog metadata for the public registry.
      example:
        displayName: ""
    GetRepositoryCatalogDataResponse_catalogData:
      allOf:
      - $ref: '#/components/schemas/RepositoryCatalogData'
      - description: The catalog metadata for the repository.
      example:
        architectures: ""
        operatingSystems: ""
        marketplaceCertified: ""
        description: ""
        usageText: ""
        aboutText: ""
        logoUrl: ""
    PutImageResponse_image:
      allOf:
      - $ref: '#/components/schemas/Image'
      - description: Details of the image uploaded.
      example:
        imageManifest: ""
        imageId:
          imageTag: ""
          imageDigest: ""
        registryId: ""
        repositoryName: ""
        imageManifestMediaType: ""
    PutRegistryCatalogDataResponse_registryCatalogData:
      allOf:
      - $ref: '#/components/schemas/RegistryCatalogData'
      - description: The catalog data for the public registry.
      example:
        displayName: ""
    PutRepositoryCatalogDataResponse_catalogData:
      allOf:
      - $ref: '#/components/schemas/RepositoryCatalogData'
      - description: The catalog data for the repository.
      example:
        architectures: ""
        operatingSystems: ""
        marketplaceCertified: ""
        description: ""
        usageText: ""
        aboutText: ""
        logoUrl: ""
    PutRepositoryCatalogDataRequest_catalogData:
      allOf:
      - $ref: '#/components/schemas/RepositoryCatalogDataInput'
      - description: An object containing the catalog data for a repository. This
          data is publicly visible in the Amazon ECR Public Gallery.
      example:
        architectures: ""
        operatingSystems: ""
        logoImageBlob: ""
        description: ""
        usageText: ""
        aboutText: ""
    Image_imageId:
      allOf:
      - $ref: '#/components/schemas/ImageIdentifier'
      - description: An object that contains the image tag and image digest associated
          with an image.
      example:
        imageTag: ""
        imageDigest: ""
    ImageFailure_imageId:
      allOf:
      - $ref: '#/components/schemas/ImageIdentifier'
      - description: The image ID that's associated with the failure.
    ImageTagDetail_imageDetail:
      allOf:
      - $ref: '#/components/schemas/ReferencedImageDetail'
      - description: An object that describes the details of an image.
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

