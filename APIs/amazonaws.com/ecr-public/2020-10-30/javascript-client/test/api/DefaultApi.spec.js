/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticContainerRegistryPublic);
  }
}(this, function(expect, AmazonElasticContainerRegistryPublic) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticContainerRegistryPublic.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchCheckLayerAvailability', function() {
      it('should call batchCheckLayerAvailability successfully', function(done) {
        //uncomment below and update the code to test batchCheckLayerAvailability
        //instance.batchCheckLayerAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeleteImage', function() {
      it('should call batchDeleteImage successfully', function(done) {
        //uncomment below and update the code to test batchDeleteImage
        //instance.batchDeleteImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeLayerUpload', function() {
      it('should call completeLayerUpload successfully', function(done) {
        //uncomment below and update the code to test completeLayerUpload
        //instance.completeLayerUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRepository', function() {
      it('should call createRepository successfully', function(done) {
        //uncomment below and update the code to test createRepository
        //instance.createRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRepository', function() {
      it('should call deleteRepository successfully', function(done) {
        //uncomment below and update the code to test deleteRepository
        //instance.deleteRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRepositoryPolicy', function() {
      it('should call deleteRepositoryPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteRepositoryPolicy
        //instance.deleteRepositoryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImageTags', function() {
      it('should call describeImageTags successfully', function(done) {
        //uncomment below and update the code to test describeImageTags
        //instance.describeImageTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeImages', function() {
      it('should call describeImages successfully', function(done) {
        //uncomment below and update the code to test describeImages
        //instance.describeImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRegistries', function() {
      it('should call describeRegistries successfully', function(done) {
        //uncomment below and update the code to test describeRegistries
        //instance.describeRegistries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRepositories', function() {
      it('should call describeRepositories successfully', function(done) {
        //uncomment below and update the code to test describeRepositories
        //instance.describeRepositories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthorizationToken', function() {
      it('should call getAuthorizationToken successfully', function(done) {
        //uncomment below and update the code to test getAuthorizationToken
        //instance.getAuthorizationToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRegistryCatalogData', function() {
      it('should call getRegistryCatalogData successfully', function(done) {
        //uncomment below and update the code to test getRegistryCatalogData
        //instance.getRegistryCatalogData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepositoryCatalogData', function() {
      it('should call getRepositoryCatalogData successfully', function(done) {
        //uncomment below and update the code to test getRepositoryCatalogData
        //instance.getRepositoryCatalogData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepositoryPolicy', function() {
      it('should call getRepositoryPolicy successfully', function(done) {
        //uncomment below and update the code to test getRepositoryPolicy
        //instance.getRepositoryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initiateLayerUpload', function() {
      it('should call initiateLayerUpload successfully', function(done) {
        //uncomment below and update the code to test initiateLayerUpload
        //instance.initiateLayerUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putImage', function() {
      it('should call putImage successfully', function(done) {
        //uncomment below and update the code to test putImage
        //instance.putImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRegistryCatalogData', function() {
      it('should call putRegistryCatalogData successfully', function(done) {
        //uncomment below and update the code to test putRegistryCatalogData
        //instance.putRegistryCatalogData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRepositoryCatalogData', function() {
      it('should call putRepositoryCatalogData successfully', function(done) {
        //uncomment below and update the code to test putRepositoryCatalogData
        //instance.putRepositoryCatalogData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRepositoryPolicy', function() {
      it('should call setRepositoryPolicy successfully', function(done) {
        //uncomment below and update the code to test setRepositoryPolicy
        //instance.setRepositoryPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadLayerPart', function() {
      it('should call uploadLayerPart successfully', function(done) {
        //uncomment below and update the code to test uploadLayerPart
        //instance.uploadLayerPart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
