/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchCheckLayerAvailabilityRequest from '../model/BatchCheckLayerAvailabilityRequest';
import BatchCheckLayerAvailabilityResponse from '../model/BatchCheckLayerAvailabilityResponse';
import BatchDeleteImageRequest from '../model/BatchDeleteImageRequest';
import BatchDeleteImageResponse from '../model/BatchDeleteImageResponse';
import CompleteLayerUploadRequest from '../model/CompleteLayerUploadRequest';
import CompleteLayerUploadResponse from '../model/CompleteLayerUploadResponse';
import CreateRepositoryRequest from '../model/CreateRepositoryRequest';
import CreateRepositoryResponse from '../model/CreateRepositoryResponse';
import DeleteRepositoryPolicyRequest from '../model/DeleteRepositoryPolicyRequest';
import DeleteRepositoryPolicyResponse from '../model/DeleteRepositoryPolicyResponse';
import DeleteRepositoryRequest from '../model/DeleteRepositoryRequest';
import DeleteRepositoryResponse from '../model/DeleteRepositoryResponse';
import DescribeImageTagsRequest from '../model/DescribeImageTagsRequest';
import DescribeImageTagsResponse from '../model/DescribeImageTagsResponse';
import DescribeImagesRequest from '../model/DescribeImagesRequest';
import DescribeImagesResponse from '../model/DescribeImagesResponse';
import DescribeRegistriesRequest from '../model/DescribeRegistriesRequest';
import DescribeRegistriesResponse from '../model/DescribeRegistriesResponse';
import DescribeRepositoriesRequest from '../model/DescribeRepositoriesRequest';
import DescribeRepositoriesResponse from '../model/DescribeRepositoriesResponse';
import GetAuthorizationTokenResponse from '../model/GetAuthorizationTokenResponse';
import GetRegistryCatalogDataResponse from '../model/GetRegistryCatalogDataResponse';
import GetRepositoryCatalogDataRequest from '../model/GetRepositoryCatalogDataRequest';
import GetRepositoryCatalogDataResponse from '../model/GetRepositoryCatalogDataResponse';
import GetRepositoryPolicyRequest from '../model/GetRepositoryPolicyRequest';
import GetRepositoryPolicyResponse from '../model/GetRepositoryPolicyResponse';
import InitiateLayerUploadRequest from '../model/InitiateLayerUploadRequest';
import InitiateLayerUploadResponse from '../model/InitiateLayerUploadResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutImageRequest from '../model/PutImageRequest';
import PutImageResponse from '../model/PutImageResponse';
import PutRegistryCatalogDataRequest from '../model/PutRegistryCatalogDataRequest';
import PutRegistryCatalogDataResponse from '../model/PutRegistryCatalogDataResponse';
import PutRepositoryCatalogDataRequest from '../model/PutRepositoryCatalogDataRequest';
import PutRepositoryCatalogDataResponse from '../model/PutRepositoryCatalogDataResponse';
import SetRepositoryPolicyRequest from '../model/SetRepositoryPolicyRequest';
import SetRepositoryPolicyResponse from '../model/SetRepositoryPolicyResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UploadLayerPartRequest from '../model/UploadLayerPartRequest';
import UploadLayerPartResponse from '../model/UploadLayerPartResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-10-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchCheckLayerAvailability operation.
     * @callback module:api/DefaultApi~batchCheckLayerAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchCheckLayerAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Checks the availability of one or more image layers that are within a repository in a public registry. When an image is pushed to a repository, each image layer is checked to verify if it has been uploaded before. If it has been uploaded, then the image layer is skipped.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchCheckLayerAvailabilityRequest} batchCheckLayerAvailabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchCheckLayerAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchCheckLayerAvailabilityResponse}
     */
    batchCheckLayerAvailability(xAmzTarget, batchCheckLayerAvailabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchCheckLayerAvailabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchCheckLayerAvailability");
      }
      // verify the required parameter 'batchCheckLayerAvailabilityRequest' is set
      if (batchCheckLayerAvailabilityRequest === undefined || batchCheckLayerAvailabilityRequest === null) {
        throw new Error("Missing the required parameter 'batchCheckLayerAvailabilityRequest' when calling batchCheckLayerAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchCheckLayerAvailabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.BatchCheckLayerAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteImage operation.
     * @callback module:api/DefaultApi~batchDeleteImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a list of specified images that are within a repository in a public registry. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p> <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p> <p>You can completely delete an image (and all of its tags) by specifying the digest of the image in your request.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchDeleteImageRequest} batchDeleteImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteImageResponse}
     */
    batchDeleteImage(xAmzTarget, batchDeleteImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchDeleteImage");
      }
      // verify the required parameter 'batchDeleteImageRequest' is set
      if (batchDeleteImageRequest === undefined || batchDeleteImageRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteImageRequest' when calling batchDeleteImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.BatchDeleteImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeLayerUpload operation.
     * @callback module:api/DefaultApi~completeLayerUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompleteLayerUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Informs Amazon ECR that the image layer upload is complete for a specified public registry, repository name, and upload ID. You can optionally provide a <code>sha256</code> digest of the image layer for data validation purposes.</p> <p>When an image is pushed, the CompleteLayerUpload API is called once for each new image layer to verify that the upload is complete.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CompleteLayerUploadRequest} completeLayerUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~completeLayerUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompleteLayerUploadResponse}
     */
    completeLayerUpload(xAmzTarget, completeLayerUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = completeLayerUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling completeLayerUpload");
      }
      // verify the required parameter 'completeLayerUploadRequest' is set
      if (completeLayerUploadRequest === undefined || completeLayerUploadRequest === null) {
        throw new Error("Missing the required parameter 'completeLayerUploadRequest' when calling completeLayerUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompleteLayerUploadResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.CompleteLayerUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepository operation.
     * @callback module:api/DefaultApi~createRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a repository in a public registry. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html\">Amazon ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateRepositoryRequest} createRepositoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRepositoryResponse}
     */
    createRepository(xAmzTarget, createRepositoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRepositoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createRepository");
      }
      // verify the required parameter 'createRepositoryRequest' is set
      if (createRepositoryRequest === undefined || createRepositoryRequest === null) {
        throw new Error("Missing the required parameter 'createRepositoryRequest' when calling createRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRepositoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.CreateRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:api/DefaultApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRepositoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a repository in a public registry. If the repository contains images, you must either manually delete all images in the repository or use the <code>force</code> option. This option deletes all images on your behalf before deleting the repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRepositoryRequest} deleteRepositoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRepositoryResponse}
     */
    deleteRepository(xAmzTarget, deleteRepositoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRepositoryRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRepository");
      }
      // verify the required parameter 'deleteRepositoryRequest' is set
      if (deleteRepositoryRequest === undefined || deleteRepositoryRequest === null) {
        throw new Error("Missing the required parameter 'deleteRepositoryRequest' when calling deleteRepository");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRepositoryResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.DeleteRepository', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPolicy operation.
     * @callback module:api/DefaultApi~deleteRepositoryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteRepositoryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the repository policy that's associated with the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteRepositoryPolicyRequest} deleteRepositoryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRepositoryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteRepositoryPolicyResponse}
     */
    deleteRepositoryPolicy(xAmzTarget, deleteRepositoryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteRepositoryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteRepositoryPolicy");
      }
      // verify the required parameter 'deleteRepositoryPolicyRequest' is set
      if (deleteRepositoryPolicyRequest === undefined || deleteRepositoryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteRepositoryPolicyRequest' when calling deleteRepositoryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteRepositoryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.DeleteRepositoryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImageTags operation.
     * @callback module:api/DefaultApi~describeImageTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImageTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the image tag details for a repository in a public registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImageTagsRequest} describeImageTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeImageTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImageTagsResponse}
     */
    describeImageTags(xAmzTarget, describeImageTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImageTagsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImageTags");
      }
      // verify the required parameter 'describeImageTagsRequest' is set
      if (describeImageTagsRequest === undefined || describeImageTagsRequest === null) {
        throw new Error("Missing the required parameter 'describeImageTagsRequest' when calling describeImageTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImageTagsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.DescribeImageTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeImages operation.
     * @callback module:api/DefaultApi~describeImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeImagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns metadata that's related to the images in a repository in a public registry.</p> <note> <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size. Therefore, it might return a larger image size than the image sizes that are returned by <a>DescribeImages</a>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeImagesRequest} describeImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeImagesResponse}
     */
    describeImages(xAmzTarget, describeImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeImages");
      }
      // verify the required parameter 'describeImagesRequest' is set
      if (describeImagesRequest === undefined || describeImagesRequest === null) {
        throw new Error("Missing the required parameter 'describeImagesRequest' when calling describeImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeImagesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.DescribeImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRegistries operation.
     * @callback module:api/DefaultApi~describeRegistriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRegistriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details for a public registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRegistriesRequest} describeRegistriesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeRegistriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRegistriesResponse}
     */
    describeRegistries(xAmzTarget, describeRegistriesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRegistriesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRegistries");
      }
      // verify the required parameter 'describeRegistriesRequest' is set
      if (describeRegistriesRequest === undefined || describeRegistriesRequest === null) {
        throw new Error("Missing the required parameter 'describeRegistriesRequest' when calling describeRegistries");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRegistriesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.DescribeRegistries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRepositories operation.
     * @callback module:api/DefaultApi~describeRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRepositoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes repositories that are in a public registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeRepositoriesRequest} describeRepositoriesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRepositoriesResponse}
     */
    describeRepositories(xAmzTarget, describeRepositoriesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeRepositoriesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeRepositories");
      }
      // verify the required parameter 'describeRepositoriesRequest' is set
      if (describeRepositoriesRequest === undefined || describeRepositoriesRequest === null) {
        throw new Error("Missing the required parameter 'describeRepositoriesRequest' when calling describeRepositories");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeRepositoriesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.DescribeRepositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizationToken operation.
     * @callback module:api/DefaultApi~getAuthorizationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorizationTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an authorization token. An authorization token represents your IAM authentication credentials. You can use it to access any Amazon ECR registry that your IAM principal has access to. The authorization token is valid for 12 hours. This API requires the <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code> permissions.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAuthorizationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorizationTokenResponse}
     */
    getAuthorizationToken(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAuthorizationToken");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAuthorizationToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAuthorizationTokenResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.GetAuthorizationToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRegistryCatalogData operation.
     * @callback module:api/DefaultApi~getRegistryCatalogDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRegistryCatalogDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves catalog metadata for a public registry.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRegistryCatalogDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRegistryCatalogDataResponse}
     */
    getRegistryCatalogData(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRegistryCatalogData");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRegistryCatalogData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRegistryCatalogDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.GetRegistryCatalogData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryCatalogData operation.
     * @callback module:api/DefaultApi~getRepositoryCatalogDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRepositoryCatalogDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve catalog metadata for a repository in a public registry. This metadata is displayed publicly in the Amazon ECR Public Gallery.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRepositoryCatalogDataRequest} getRepositoryCatalogDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRepositoryCatalogDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRepositoryCatalogDataResponse}
     */
    getRepositoryCatalogData(xAmzTarget, getRepositoryCatalogDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRepositoryCatalogDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRepositoryCatalogData");
      }
      // verify the required parameter 'getRepositoryCatalogDataRequest' is set
      if (getRepositoryCatalogDataRequest === undefined || getRepositoryCatalogDataRequest === null) {
        throw new Error("Missing the required parameter 'getRepositoryCatalogDataRequest' when calling getRepositoryCatalogData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRepositoryCatalogDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.GetRepositoryCatalogData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPolicy operation.
     * @callback module:api/DefaultApi~getRepositoryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRepositoryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the repository policy for the specified repository.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetRepositoryPolicyRequest} getRepositoryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRepositoryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRepositoryPolicyResponse}
     */
    getRepositoryPolicy(xAmzTarget, getRepositoryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getRepositoryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getRepositoryPolicy");
      }
      // verify the required parameter 'getRepositoryPolicyRequest' is set
      if (getRepositoryPolicyRequest === undefined || getRepositoryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getRepositoryPolicyRequest' when calling getRepositoryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetRepositoryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.GetRepositoryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateLayerUpload operation.
     * @callback module:api/DefaultApi~initiateLayerUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InitiateLayerUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Notifies Amazon ECR that you intend to upload an image layer.</p> <p>When an image is pushed, the InitiateLayerUpload API is called once for each image layer that hasn't already been uploaded. Whether an image layer uploads is determined by the BatchCheckLayerAvailability API action.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/InitiateLayerUploadRequest} initiateLayerUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~initiateLayerUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InitiateLayerUploadResponse}
     */
    initiateLayerUpload(xAmzTarget, initiateLayerUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = initiateLayerUploadRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling initiateLayerUpload");
      }
      // verify the required parameter 'initiateLayerUploadRequest' is set
      if (initiateLayerUploadRequest === undefined || initiateLayerUploadRequest === null) {
        throw new Error("Missing the required parameter 'initiateLayerUploadRequest' when calling initiateLayerUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InitiateLayerUploadResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.InitiateLayerUpload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the tags for an Amazon ECR Public resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putImage operation.
     * @callback module:api/DefaultApi~putImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates or updates the image manifest and tags that are associated with an image.</p> <p>When an image is pushed and all new image layers have been uploaded, the PutImage API is called once to create or update the image manifest and the tags that are associated with the image.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutImageRequest} putImageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutImageResponse}
     */
    putImage(xAmzTarget, putImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = putImageRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putImage");
      }
      // verify the required parameter 'putImageRequest' is set
      if (putImageRequest === undefined || putImageRequest === null) {
        throw new Error("Missing the required parameter 'putImageRequest' when calling putImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutImageResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.PutImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRegistryCatalogData operation.
     * @callback module:api/DefaultApi~putRegistryCatalogDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutRegistryCatalogDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the catalog data for a public registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutRegistryCatalogDataRequest} putRegistryCatalogDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putRegistryCatalogDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutRegistryCatalogDataResponse}
     */
    putRegistryCatalogData(xAmzTarget, putRegistryCatalogDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRegistryCatalogDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putRegistryCatalogData");
      }
      // verify the required parameter 'putRegistryCatalogDataRequest' is set
      if (putRegistryCatalogDataRequest === undefined || putRegistryCatalogDataRequest === null) {
        throw new Error("Missing the required parameter 'putRegistryCatalogDataRequest' when calling putRegistryCatalogData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutRegistryCatalogDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.PutRegistryCatalogData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRepositoryCatalogData operation.
     * @callback module:api/DefaultApi~putRepositoryCatalogDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutRepositoryCatalogDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the catalog data for a repository in a public registry.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutRepositoryCatalogDataRequest} putRepositoryCatalogDataRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putRepositoryCatalogDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutRepositoryCatalogDataResponse}
     */
    putRepositoryCatalogData(xAmzTarget, putRepositoryCatalogDataRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRepositoryCatalogDataRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putRepositoryCatalogData");
      }
      // verify the required parameter 'putRepositoryCatalogDataRequest' is set
      if (putRepositoryCatalogDataRequest === undefined || putRepositoryCatalogDataRequest === null) {
        throw new Error("Missing the required parameter 'putRepositoryCatalogDataRequest' when calling putRepositoryCatalogData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutRepositoryCatalogDataResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.PutRepositoryCatalogData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRepositoryPolicy operation.
     * @callback module:api/DefaultApi~setRepositoryPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetRepositoryPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies a repository policy to the specified public repository to control access permissions. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html\">Amazon ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/SetRepositoryPolicyRequest} setRepositoryPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~setRepositoryPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetRepositoryPolicyResponse}
     */
    setRepositoryPolicy(xAmzTarget, setRepositoryPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = setRepositoryPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling setRepositoryPolicy");
      }
      // verify the required parameter 'setRepositoryPolicyRequest' is set
      if (setRepositoryPolicyRequest === undefined || setRepositoryPolicyRequest === null) {
        throw new Error("Missing the required parameter 'setRepositoryPolicyRequest' when calling setRepositoryPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetRepositoryPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.SetRepositoryPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource aren't specified in the request parameters, they aren't changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes specified tags from a resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadLayerPart operation.
     * @callback module:api/DefaultApi~uploadLayerPartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadLayerPartResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Uploads an image layer part to Amazon ECR.</p> <p>When an image is pushed, each new image layer is uploaded in parts. The maximum size of each image layer part can be 20971520 bytes (about 20MB). The UploadLayerPart API is called once for each new image layer part.</p> <note> <p>This operation is used by the Amazon ECR proxy and is not generally used by customers for pulling and pushing images. In most cases, you should use the <code>docker</code> CLI to pull, tag, and push images.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UploadLayerPartRequest} uploadLayerPartRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~uploadLayerPartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadLayerPartResponse}
     */
    uploadLayerPart(xAmzTarget, uploadLayerPartRequest, opts, callback) {
      opts = opts || {};
      let postBody = uploadLayerPartRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling uploadLayerPart");
      }
      // verify the required parameter 'uploadLayerPartRequest' is set
      if (uploadLayerPartRequest === undefined || uploadLayerPartRequest === null) {
        throw new Error("Missing the required parameter 'uploadLayerPartRequest' when calling uploadLayerPart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadLayerPartResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SpencerFrontendService.UploadLayerPart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
