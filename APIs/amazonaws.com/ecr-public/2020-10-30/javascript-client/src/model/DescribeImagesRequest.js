/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DescribeImagesRequest model module.
 * @module model/DescribeImagesRequest
 * @version 2020-10-30
 */
class DescribeImagesRequest {
    /**
     * Constructs a new <code>DescribeImagesRequest</code>.
     * @alias module:model/DescribeImagesRequest
     * @param repositoryName {String} 
     */
    constructor(repositoryName) { 
        
        DescribeImagesRequest.initialize(this, repositoryName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repositoryName) { 
        obj['repositoryName'] = repositoryName;
    }

    /**
     * Constructs a <code>DescribeImagesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeImagesRequest} obj Optional instance to populate.
     * @return {module:model/DescribeImagesRequest} The populated <code>DescribeImagesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeImagesRequest();

            if (data.hasOwnProperty('registryId')) {
                obj['registryId'] = ApiClient.convertToType(data['registryId'], 'String');
            }
            if (data.hasOwnProperty('repositoryName')) {
                obj['repositoryName'] = ApiClient.convertToType(data['repositoryName'], 'String');
            }
            if (data.hasOwnProperty('imageIds')) {
                obj['imageIds'] = ApiClient.convertToType(data['imageIds'], Array);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeImagesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeImagesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeImagesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `registryId`
        if (data['registryId']) { // data not null
          String.validateJSON(data['registryId']);
        }
        // validate the optional field `repositoryName`
        if (data['repositoryName']) { // data not null
          String.validateJSON(data['repositoryName']);
        }
        // validate the optional field `imageIds`
        if (data['imageIds']) { // data not null
          Array.validateJSON(data['imageIds']);
        }
        // validate the optional field `nextToken`
        if (data['nextToken']) { // data not null
          String.validateJSON(data['nextToken']);
        }
        // validate the optional field `maxResults`
        if (data['maxResults']) { // data not null
          Number.validateJSON(data['maxResults']);
        }

        return true;
    }


}

DescribeImagesRequest.RequiredProperties = ["repositoryName"];

/**
 * @member {String} registryId
 */
DescribeImagesRequest.prototype['registryId'] = undefined;

/**
 * @member {String} repositoryName
 */
DescribeImagesRequest.prototype['repositoryName'] = undefined;

/**
 * @member {Array} imageIds
 */
DescribeImagesRequest.prototype['imageIds'] = undefined;

/**
 * @member {String} nextToken
 */
DescribeImagesRequest.prototype['nextToken'] = undefined;

/**
 * @member {Number} maxResults
 */
DescribeImagesRequest.prototype['maxResults'] = undefined;






export default DescribeImagesRequest;

