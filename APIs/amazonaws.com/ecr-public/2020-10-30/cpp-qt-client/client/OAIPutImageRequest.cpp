/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutImageRequest::OAIPutImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutImageRequest::OAIPutImageRequest() {
    this->initializeModel();
}

OAIPutImageRequest::~OAIPutImageRequest() {}

void OAIPutImageRequest::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_image_manifest_isSet = false;
    m_image_manifest_isValid = false;

    m_image_manifest_media_type_isSet = false;
    m_image_manifest_media_type_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;
}

void OAIPutImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutImageRequest::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_image_manifest_isValid = ::OpenAPI::fromJsonValue(m_image_manifest, json[QString("imageManifest")]);
    m_image_manifest_isSet = !json[QString("imageManifest")].isNull() && m_image_manifest_isValid;

    m_image_manifest_media_type_isValid = ::OpenAPI::fromJsonValue(m_image_manifest_media_type, json[QString("imageManifestMediaType")]);
    m_image_manifest_media_type_isSet = !json[QString("imageManifestMediaType")].isNull() && m_image_manifest_media_type_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("imageTag")]);
    m_image_tag_isSet = !json[QString("imageTag")].isNull() && m_image_tag_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;
}

QString OAIPutImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_image_manifest_isSet) {
        obj.insert(QString("imageManifest"), ::OpenAPI::toJsonValue(m_image_manifest));
    }
    if (m_image_manifest_media_type_isSet) {
        obj.insert(QString("imageManifestMediaType"), ::OpenAPI::toJsonValue(m_image_manifest_media_type));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("imageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    return obj;
}

QString OAIPutImageRequest::getRegistryId() const {
    return m_registry_id;
}
void OAIPutImageRequest::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIPutImageRequest::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIPutImageRequest::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIPutImageRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAIPutImageRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIPutImageRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIPutImageRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIPutImageRequest::getImageManifest() const {
    return m_image_manifest;
}
void OAIPutImageRequest::setImageManifest(const QString &image_manifest) {
    m_image_manifest = image_manifest;
    m_image_manifest_isSet = true;
}

bool OAIPutImageRequest::is_image_manifest_Set() const{
    return m_image_manifest_isSet;
}

bool OAIPutImageRequest::is_image_manifest_Valid() const{
    return m_image_manifest_isValid;
}

QString OAIPutImageRequest::getImageManifestMediaType() const {
    return m_image_manifest_media_type;
}
void OAIPutImageRequest::setImageManifestMediaType(const QString &image_manifest_media_type) {
    m_image_manifest_media_type = image_manifest_media_type;
    m_image_manifest_media_type_isSet = true;
}

bool OAIPutImageRequest::is_image_manifest_media_type_Set() const{
    return m_image_manifest_media_type_isSet;
}

bool OAIPutImageRequest::is_image_manifest_media_type_Valid() const{
    return m_image_manifest_media_type_isValid;
}

QString OAIPutImageRequest::getImageTag() const {
    return m_image_tag;
}
void OAIPutImageRequest::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIPutImageRequest::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIPutImageRequest::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

QString OAIPutImageRequest::getImageDigest() const {
    return m_image_digest;
}
void OAIPutImageRequest::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIPutImageRequest::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIPutImageRequest::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

bool OAIPutImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_manifest_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && m_image_manifest_isValid && true;
}

} // namespace OpenAPI
