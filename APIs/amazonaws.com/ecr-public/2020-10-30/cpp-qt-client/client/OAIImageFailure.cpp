/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageFailure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageFailure::OAIImageFailure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageFailure::OAIImageFailure() {
    this->initializeModel();
}

OAIImageFailure::~OAIImageFailure() {}

void OAIImageFailure::initializeModel() {

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;
}

void OAIImageFailure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageFailure::fromJsonObject(QJsonObject json) {

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;
}

QString OAIImageFailure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageFailure::asJsonObject() const {
    QJsonObject obj;
    if (m_image_id.isSet()) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    return obj;
}

OAIImageFailure_imageId OAIImageFailure::getImageId() const {
    return m_image_id;
}
void OAIImageFailure::setImageId(const OAIImageFailure_imageId &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIImageFailure::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIImageFailure::is_image_id_Valid() const{
    return m_image_id_isValid;
}

OAIImageFailureCode OAIImageFailure::getFailureCode() const {
    return m_failure_code;
}
void OAIImageFailure::setFailureCode(const OAIImageFailureCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIImageFailure::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIImageFailure::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

QString OAIImageFailure::getFailureReason() const {
    return m_failure_reason;
}
void OAIImageFailure::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIImageFailure::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIImageFailure::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

bool OAIImageFailure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageFailure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
