/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutImageResponse_image.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutImageResponse_image::OAIPutImageResponse_image(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutImageResponse_image::OAIPutImageResponse_image() {
    this->initializeModel();
}

OAIPutImageResponse_image::~OAIPutImageResponse_image() {}

void OAIPutImageResponse_image::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_image_manifest_isSet = false;
    m_image_manifest_isValid = false;

    m_image_manifest_media_type_isSet = false;
    m_image_manifest_media_type_isValid = false;
}

void OAIPutImageResponse_image::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutImageResponse_image::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_image_manifest_isValid = ::OpenAPI::fromJsonValue(m_image_manifest, json[QString("imageManifest")]);
    m_image_manifest_isSet = !json[QString("imageManifest")].isNull() && m_image_manifest_isValid;

    m_image_manifest_media_type_isValid = ::OpenAPI::fromJsonValue(m_image_manifest_media_type, json[QString("imageManifestMediaType")]);
    m_image_manifest_media_type_isSet = !json[QString("imageManifestMediaType")].isNull() && m_image_manifest_media_type_isValid;
}

QString OAIPutImageResponse_image::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutImageResponse_image::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_image_id.isSet()) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_image_manifest_isSet) {
        obj.insert(QString("imageManifest"), ::OpenAPI::toJsonValue(m_image_manifest));
    }
    if (m_image_manifest_media_type_isSet) {
        obj.insert(QString("imageManifestMediaType"), ::OpenAPI::toJsonValue(m_image_manifest_media_type));
    }
    return obj;
}

QString OAIPutImageResponse_image::getRegistryId() const {
    return m_registry_id;
}
void OAIPutImageResponse_image::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIPutImageResponse_image::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIPutImageResponse_image::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIPutImageResponse_image::getRepositoryName() const {
    return m_repository_name;
}
void OAIPutImageResponse_image::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIPutImageResponse_image::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIPutImageResponse_image::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

OAIImage_imageId OAIPutImageResponse_image::getImageId() const {
    return m_image_id;
}
void OAIPutImageResponse_image::setImageId(const OAIImage_imageId &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIPutImageResponse_image::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIPutImageResponse_image::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAIPutImageResponse_image::getImageManifest() const {
    return m_image_manifest;
}
void OAIPutImageResponse_image::setImageManifest(const QString &image_manifest) {
    m_image_manifest = image_manifest;
    m_image_manifest_isSet = true;
}

bool OAIPutImageResponse_image::is_image_manifest_Set() const{
    return m_image_manifest_isSet;
}

bool OAIPutImageResponse_image::is_image_manifest_Valid() const{
    return m_image_manifest_isValid;
}

QString OAIPutImageResponse_image::getImageManifestMediaType() const {
    return m_image_manifest_media_type;
}
void OAIPutImageResponse_image::setImageManifestMediaType(const QString &image_manifest_media_type) {
    m_image_manifest_media_type = image_manifest_media_type;
    m_image_manifest_media_type_isSet = true;
}

bool OAIPutImageResponse_image::is_image_manifest_media_type_Set() const{
    return m_image_manifest_media_type_isSet;
}

bool OAIPutImageResponse_image::is_image_manifest_media_type_Valid() const{
    return m_image_manifest_media_type_isValid;
}

bool OAIPutImageResponse_image::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_manifest_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutImageResponse_image::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
