/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImageTagsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImageTagsResponse::OAIDescribeImageTagsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImageTagsResponse::OAIDescribeImageTagsResponse() {
    this->initializeModel();
}

OAIDescribeImageTagsResponse::~OAIDescribeImageTagsResponse() {}

void OAIDescribeImageTagsResponse::initializeModel() {

    m_image_tag_details_isSet = false;
    m_image_tag_details_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeImageTagsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImageTagsResponse::fromJsonObject(QJsonObject json) {

    m_image_tag_details_isValid = ::OpenAPI::fromJsonValue(m_image_tag_details, json[QString("imageTagDetails")]);
    m_image_tag_details_isSet = !json[QString("imageTagDetails")].isNull() && m_image_tag_details_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeImageTagsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImageTagsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_image_tag_details.isSet()) {
        obj.insert(QString("imageTagDetails"), ::OpenAPI::toJsonValue(m_image_tag_details));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeImageTagsResponse::getImageTagDetails() const {
    return m_image_tag_details;
}
void OAIDescribeImageTagsResponse::setImageTagDetails(const QList &image_tag_details) {
    m_image_tag_details = image_tag_details;
    m_image_tag_details_isSet = true;
}

bool OAIDescribeImageTagsResponse::is_image_tag_details_Set() const{
    return m_image_tag_details_isSet;
}

bool OAIDescribeImageTagsResponse::is_image_tag_details_Valid() const{
    return m_image_tag_details_isValid;
}

QString OAIDescribeImageTagsResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeImageTagsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeImageTagsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeImageTagsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeImageTagsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_tag_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImageTagsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
