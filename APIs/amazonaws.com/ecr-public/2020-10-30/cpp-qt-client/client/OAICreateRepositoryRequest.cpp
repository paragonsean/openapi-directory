/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRepositoryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRepositoryRequest::OAICreateRepositoryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRepositoryRequest::OAICreateRepositoryRequest() {
    this->initializeModel();
}

OAICreateRepositoryRequest::~OAICreateRepositoryRequest() {}

void OAICreateRepositoryRequest::initializeModel() {

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_catalog_data_isSet = false;
    m_catalog_data_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateRepositoryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRepositoryRequest::fromJsonObject(QJsonObject json) {

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_catalog_data_isValid = ::OpenAPI::fromJsonValue(m_catalog_data, json[QString("catalogData")]);
    m_catalog_data_isSet = !json[QString("catalogData")].isNull() && m_catalog_data_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateRepositoryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRepositoryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_catalog_data.isSet()) {
        obj.insert(QString("catalogData"), ::OpenAPI::toJsonValue(m_catalog_data));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateRepositoryRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAICreateRepositoryRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAICreateRepositoryRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAICreateRepositoryRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

OAICreateRepositoryRequest_catalogData OAICreateRepositoryRequest::getCatalogData() const {
    return m_catalog_data;
}
void OAICreateRepositoryRequest::setCatalogData(const OAICreateRepositoryRequest_catalogData &catalog_data) {
    m_catalog_data = catalog_data;
    m_catalog_data_isSet = true;
}

bool OAICreateRepositoryRequest::is_catalog_data_Set() const{
    return m_catalog_data_isSet;
}

bool OAICreateRepositoryRequest::is_catalog_data_Valid() const{
    return m_catalog_data_isValid;
}

QList OAICreateRepositoryRequest::getTags() const {
    return m_tags;
}
void OAICreateRepositoryRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateRepositoryRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateRepositoryRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateRepositoryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRepositoryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && true;
}

} // namespace OpenAPI
