/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutRepositoryCatalogDataResponse_catalogData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutRepositoryCatalogDataResponse_catalogData::OAIPutRepositoryCatalogDataResponse_catalogData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutRepositoryCatalogDataResponse_catalogData::OAIPutRepositoryCatalogDataResponse_catalogData() {
    this->initializeModel();
}

OAIPutRepositoryCatalogDataResponse_catalogData::~OAIPutRepositoryCatalogDataResponse_catalogData() {}

void OAIPutRepositoryCatalogDataResponse_catalogData::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_architectures_isSet = false;
    m_architectures_isValid = false;

    m_operating_systems_isSet = false;
    m_operating_systems_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_about_text_isSet = false;
    m_about_text_isValid = false;

    m_usage_text_isSet = false;
    m_usage_text_isValid = false;

    m_marketplace_certified_isSet = false;
    m_marketplace_certified_isValid = false;
}

void OAIPutRepositoryCatalogDataResponse_catalogData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutRepositoryCatalogDataResponse_catalogData::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_architectures_isValid = ::OpenAPI::fromJsonValue(m_architectures, json[QString("architectures")]);
    m_architectures_isSet = !json[QString("architectures")].isNull() && m_architectures_isValid;

    m_operating_systems_isValid = ::OpenAPI::fromJsonValue(m_operating_systems, json[QString("operatingSystems")]);
    m_operating_systems_isSet = !json[QString("operatingSystems")].isNull() && m_operating_systems_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoUrl")]);
    m_logo_url_isSet = !json[QString("logoUrl")].isNull() && m_logo_url_isValid;

    m_about_text_isValid = ::OpenAPI::fromJsonValue(m_about_text, json[QString("aboutText")]);
    m_about_text_isSet = !json[QString("aboutText")].isNull() && m_about_text_isValid;

    m_usage_text_isValid = ::OpenAPI::fromJsonValue(m_usage_text, json[QString("usageText")]);
    m_usage_text_isSet = !json[QString("usageText")].isNull() && m_usage_text_isValid;

    m_marketplace_certified_isValid = ::OpenAPI::fromJsonValue(m_marketplace_certified, json[QString("marketplaceCertified")]);
    m_marketplace_certified_isSet = !json[QString("marketplaceCertified")].isNull() && m_marketplace_certified_isValid;
}

QString OAIPutRepositoryCatalogDataResponse_catalogData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutRepositoryCatalogDataResponse_catalogData::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_architectures.isSet()) {
        obj.insert(QString("architectures"), ::OpenAPI::toJsonValue(m_architectures));
    }
    if (m_operating_systems.isSet()) {
        obj.insert(QString("operatingSystems"), ::OpenAPI::toJsonValue(m_operating_systems));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_about_text_isSet) {
        obj.insert(QString("aboutText"), ::OpenAPI::toJsonValue(m_about_text));
    }
    if (m_usage_text_isSet) {
        obj.insert(QString("usageText"), ::OpenAPI::toJsonValue(m_usage_text));
    }
    if (m_marketplace_certified_isSet) {
        obj.insert(QString("marketplaceCertified"), ::OpenAPI::toJsonValue(m_marketplace_certified));
    }
    return obj;
}

QString OAIPutRepositoryCatalogDataResponse_catalogData::getDescription() const {
    return m_description;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIPutRepositoryCatalogDataResponse_catalogData::getArchitectures() const {
    return m_architectures;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setArchitectures(const QList &architectures) {
    m_architectures = architectures;
    m_architectures_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_architectures_Set() const{
    return m_architectures_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_architectures_Valid() const{
    return m_architectures_isValid;
}

QList OAIPutRepositoryCatalogDataResponse_catalogData::getOperatingSystems() const {
    return m_operating_systems;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setOperatingSystems(const QList &operating_systems) {
    m_operating_systems = operating_systems;
    m_operating_systems_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_operating_systems_Set() const{
    return m_operating_systems_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_operating_systems_Valid() const{
    return m_operating_systems_isValid;
}

QString OAIPutRepositoryCatalogDataResponse_catalogData::getLogoUrl() const {
    return m_logo_url;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QString OAIPutRepositoryCatalogDataResponse_catalogData::getAboutText() const {
    return m_about_text;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setAboutText(const QString &about_text) {
    m_about_text = about_text;
    m_about_text_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_about_text_Set() const{
    return m_about_text_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_about_text_Valid() const{
    return m_about_text_isValid;
}

QString OAIPutRepositoryCatalogDataResponse_catalogData::getUsageText() const {
    return m_usage_text;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setUsageText(const QString &usage_text) {
    m_usage_text = usage_text;
    m_usage_text_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_usage_text_Set() const{
    return m_usage_text_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_usage_text_Valid() const{
    return m_usage_text_isValid;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::getMarketplaceCertified() const {
    return m_marketplace_certified;
}
void OAIPutRepositoryCatalogDataResponse_catalogData::setMarketplaceCertified(const bool &marketplace_certified) {
    m_marketplace_certified = marketplace_certified;
    m_marketplace_certified_isSet = true;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_marketplace_certified_Set() const{
    return m_marketplace_certified_isSet;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::is_marketplace_certified_Valid() const{
    return m_marketplace_certified_isValid;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architectures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_systems.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_about_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_certified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutRepositoryCatalogDataResponse_catalogData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
