/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepositoryCatalogDataInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepositoryCatalogDataInput::OAIRepositoryCatalogDataInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepositoryCatalogDataInput::OAIRepositoryCatalogDataInput() {
    this->initializeModel();
}

OAIRepositoryCatalogDataInput::~OAIRepositoryCatalogDataInput() {}

void OAIRepositoryCatalogDataInput::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_architectures_isSet = false;
    m_architectures_isValid = false;

    m_operating_systems_isSet = false;
    m_operating_systems_isValid = false;

    m_logo_image_blob_isSet = false;
    m_logo_image_blob_isValid = false;

    m_about_text_isSet = false;
    m_about_text_isValid = false;

    m_usage_text_isSet = false;
    m_usage_text_isValid = false;
}

void OAIRepositoryCatalogDataInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepositoryCatalogDataInput::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_architectures_isValid = ::OpenAPI::fromJsonValue(m_architectures, json[QString("architectures")]);
    m_architectures_isSet = !json[QString("architectures")].isNull() && m_architectures_isValid;

    m_operating_systems_isValid = ::OpenAPI::fromJsonValue(m_operating_systems, json[QString("operatingSystems")]);
    m_operating_systems_isSet = !json[QString("operatingSystems")].isNull() && m_operating_systems_isValid;

    m_logo_image_blob_isValid = ::OpenAPI::fromJsonValue(m_logo_image_blob, json[QString("logoImageBlob")]);
    m_logo_image_blob_isSet = !json[QString("logoImageBlob")].isNull() && m_logo_image_blob_isValid;

    m_about_text_isValid = ::OpenAPI::fromJsonValue(m_about_text, json[QString("aboutText")]);
    m_about_text_isSet = !json[QString("aboutText")].isNull() && m_about_text_isValid;

    m_usage_text_isValid = ::OpenAPI::fromJsonValue(m_usage_text, json[QString("usageText")]);
    m_usage_text_isSet = !json[QString("usageText")].isNull() && m_usage_text_isValid;
}

QString OAIRepositoryCatalogDataInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepositoryCatalogDataInput::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_architectures.isSet()) {
        obj.insert(QString("architectures"), ::OpenAPI::toJsonValue(m_architectures));
    }
    if (m_operating_systems.isSet()) {
        obj.insert(QString("operatingSystems"), ::OpenAPI::toJsonValue(m_operating_systems));
    }
    if (m_logo_image_blob_isSet) {
        obj.insert(QString("logoImageBlob"), ::OpenAPI::toJsonValue(m_logo_image_blob));
    }
    if (m_about_text_isSet) {
        obj.insert(QString("aboutText"), ::OpenAPI::toJsonValue(m_about_text));
    }
    if (m_usage_text_isSet) {
        obj.insert(QString("usageText"), ::OpenAPI::toJsonValue(m_usage_text));
    }
    return obj;
}

QString OAIRepositoryCatalogDataInput::getDescription() const {
    return m_description;
}
void OAIRepositoryCatalogDataInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRepositoryCatalogDataInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRepositoryCatalogDataInput::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIRepositoryCatalogDataInput::getArchitectures() const {
    return m_architectures;
}
void OAIRepositoryCatalogDataInput::setArchitectures(const QList &architectures) {
    m_architectures = architectures;
    m_architectures_isSet = true;
}

bool OAIRepositoryCatalogDataInput::is_architectures_Set() const{
    return m_architectures_isSet;
}

bool OAIRepositoryCatalogDataInput::is_architectures_Valid() const{
    return m_architectures_isValid;
}

QList OAIRepositoryCatalogDataInput::getOperatingSystems() const {
    return m_operating_systems;
}
void OAIRepositoryCatalogDataInput::setOperatingSystems(const QList &operating_systems) {
    m_operating_systems = operating_systems;
    m_operating_systems_isSet = true;
}

bool OAIRepositoryCatalogDataInput::is_operating_systems_Set() const{
    return m_operating_systems_isSet;
}

bool OAIRepositoryCatalogDataInput::is_operating_systems_Valid() const{
    return m_operating_systems_isValid;
}

QString OAIRepositoryCatalogDataInput::getLogoImageBlob() const {
    return m_logo_image_blob;
}
void OAIRepositoryCatalogDataInput::setLogoImageBlob(const QString &logo_image_blob) {
    m_logo_image_blob = logo_image_blob;
    m_logo_image_blob_isSet = true;
}

bool OAIRepositoryCatalogDataInput::is_logo_image_blob_Set() const{
    return m_logo_image_blob_isSet;
}

bool OAIRepositoryCatalogDataInput::is_logo_image_blob_Valid() const{
    return m_logo_image_blob_isValid;
}

QString OAIRepositoryCatalogDataInput::getAboutText() const {
    return m_about_text;
}
void OAIRepositoryCatalogDataInput::setAboutText(const QString &about_text) {
    m_about_text = about_text;
    m_about_text_isSet = true;
}

bool OAIRepositoryCatalogDataInput::is_about_text_Set() const{
    return m_about_text_isSet;
}

bool OAIRepositoryCatalogDataInput::is_about_text_Valid() const{
    return m_about_text_isValid;
}

QString OAIRepositoryCatalogDataInput::getUsageText() const {
    return m_usage_text;
}
void OAIRepositoryCatalogDataInput::setUsageText(const QString &usage_text) {
    m_usage_text = usage_text;
    m_usage_text_isSet = true;
}

bool OAIRepositoryCatalogDataInput::is_usage_text_Set() const{
    return m_usage_text_isSet;
}

bool OAIRepositoryCatalogDataInput::is_usage_text_Valid() const{
    return m_usage_text_isValid;
}

bool OAIRepositoryCatalogDataInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_architectures.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_systems.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_image_blob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_about_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepositoryCatalogDataInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
