/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepositoryCatalogData.h
 *
 * The catalog data for a repository. This data is publicly visible in the Amazon ECR Public Gallery.
 */

#ifndef OAIRepositoryCatalogData_H
#define OAIRepositoryCatalogData_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRepositoryCatalogData : public OAIObject {
public:
    OAIRepositoryCatalogData();
    OAIRepositoryCatalogData(QString json);
    ~OAIRepositoryCatalogData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getArchitectures() const;
    void setArchitectures(const QList &architectures);
    bool is_architectures_Set() const;
    bool is_architectures_Valid() const;

    QList getOperatingSystems() const;
    void setOperatingSystems(const QList &operating_systems);
    bool is_operating_systems_Set() const;
    bool is_operating_systems_Valid() const;

    QString getLogoUrl() const;
    void setLogoUrl(const QString &logo_url);
    bool is_logo_url_Set() const;
    bool is_logo_url_Valid() const;

    QString getAboutText() const;
    void setAboutText(const QString &about_text);
    bool is_about_text_Set() const;
    bool is_about_text_Valid() const;

    QString getUsageText() const;
    void setUsageText(const QString &usage_text);
    bool is_usage_text_Set() const;
    bool is_usage_text_Valid() const;

    bool getMarketplaceCertified() const;
    void setMarketplaceCertified(const bool &marketplace_certified);
    bool is_marketplace_certified_Set() const;
    bool is_marketplace_certified_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_architectures;
    bool m_architectures_isSet;
    bool m_architectures_isValid;

    QList m_operating_systems;
    bool m_operating_systems_isSet;
    bool m_operating_systems_isValid;

    QString m_logo_url;
    bool m_logo_url_isSet;
    bool m_logo_url_isValid;

    QString m_about_text;
    bool m_about_text_isSet;
    bool m_about_text_isValid;

    QString m_usage_text;
    bool m_usage_text_isSet;
    bool m_usage_text_isValid;

    bool m_marketplace_certified;
    bool m_marketplace_certified_isSet;
    bool m_marketplace_certified_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepositoryCatalogData)

#endif // OAIRepositoryCatalogData_H
