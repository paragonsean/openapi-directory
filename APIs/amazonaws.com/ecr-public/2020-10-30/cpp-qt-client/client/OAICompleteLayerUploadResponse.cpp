/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompleteLayerUploadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompleteLayerUploadResponse::OAICompleteLayerUploadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompleteLayerUploadResponse::OAICompleteLayerUploadResponse() {
    this->initializeModel();
}

OAICompleteLayerUploadResponse::~OAICompleteLayerUploadResponse() {}

void OAICompleteLayerUploadResponse::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_layer_digest_isSet = false;
    m_layer_digest_isValid = false;
}

void OAICompleteLayerUploadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompleteLayerUploadResponse::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_layer_digest_isValid = ::OpenAPI::fromJsonValue(m_layer_digest, json[QString("layerDigest")]);
    m_layer_digest_isSet = !json[QString("layerDigest")].isNull() && m_layer_digest_isValid;
}

QString OAICompleteLayerUploadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompleteLayerUploadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_layer_digest_isSet) {
        obj.insert(QString("layerDigest"), ::OpenAPI::toJsonValue(m_layer_digest));
    }
    return obj;
}

QString OAICompleteLayerUploadResponse::getRegistryId() const {
    return m_registry_id;
}
void OAICompleteLayerUploadResponse::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAICompleteLayerUploadResponse::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAICompleteLayerUploadResponse::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAICompleteLayerUploadResponse::getRepositoryName() const {
    return m_repository_name;
}
void OAICompleteLayerUploadResponse::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAICompleteLayerUploadResponse::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAICompleteLayerUploadResponse::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAICompleteLayerUploadResponse::getUploadId() const {
    return m_upload_id;
}
void OAICompleteLayerUploadResponse::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAICompleteLayerUploadResponse::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAICompleteLayerUploadResponse::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

QString OAICompleteLayerUploadResponse::getLayerDigest() const {
    return m_layer_digest;
}
void OAICompleteLayerUploadResponse::setLayerDigest(const QString &layer_digest) {
    m_layer_digest = layer_digest;
    m_layer_digest_isSet = true;
}

bool OAICompleteLayerUploadResponse::is_layer_digest_Set() const{
    return m_layer_digest_isSet;
}

bool OAICompleteLayerUploadResponse::is_layer_digest_Valid() const{
    return m_layer_digest_isValid;
}

bool OAICompleteLayerUploadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_digest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompleteLayerUploadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
