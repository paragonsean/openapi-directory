/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteImageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteImageResponse::OAIBatchDeleteImageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteImageResponse::OAIBatchDeleteImageResponse() {
    this->initializeModel();
}

OAIBatchDeleteImageResponse::~OAIBatchDeleteImageResponse() {}

void OAIBatchDeleteImageResponse::initializeModel() {

    m_image_ids_isSet = false;
    m_image_ids_isValid = false;

    m_failures_isSet = false;
    m_failures_isValid = false;
}

void OAIBatchDeleteImageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteImageResponse::fromJsonObject(QJsonObject json) {

    m_image_ids_isValid = ::OpenAPI::fromJsonValue(m_image_ids, json[QString("imageIds")]);
    m_image_ids_isSet = !json[QString("imageIds")].isNull() && m_image_ids_isValid;

    m_failures_isValid = ::OpenAPI::fromJsonValue(m_failures, json[QString("failures")]);
    m_failures_isSet = !json[QString("failures")].isNull() && m_failures_isValid;
}

QString OAIBatchDeleteImageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteImageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_image_ids.isSet()) {
        obj.insert(QString("imageIds"), ::OpenAPI::toJsonValue(m_image_ids));
    }
    if (m_failures.isSet()) {
        obj.insert(QString("failures"), ::OpenAPI::toJsonValue(m_failures));
    }
    return obj;
}

QList OAIBatchDeleteImageResponse::getImageIds() const {
    return m_image_ids;
}
void OAIBatchDeleteImageResponse::setImageIds(const QList &image_ids) {
    m_image_ids = image_ids;
    m_image_ids_isSet = true;
}

bool OAIBatchDeleteImageResponse::is_image_ids_Set() const{
    return m_image_ids_isSet;
}

bool OAIBatchDeleteImageResponse::is_image_ids_Valid() const{
    return m_image_ids_isValid;
}

QList OAIBatchDeleteImageResponse::getFailures() const {
    return m_failures;
}
void OAIBatchDeleteImageResponse::setFailures(const QList &failures) {
    m_failures = failures;
    m_failures_isSet = true;
}

bool OAIBatchDeleteImageResponse::is_failures_Set() const{
    return m_failures_isSet;
}

bool OAIBatchDeleteImageResponse::is_failures_Valid() const{
    return m_failures_isValid;
}

bool OAIBatchDeleteImageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteImageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
