/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImage.h
 *
 * An object that represents an Amazon ECR image.
 */

#ifndef OAIImage_H
#define OAIImage_H

#include <QJsonObject>

#include "OAIImage_imageId.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImage_imageId;

class OAIImage : public OAIObject {
public:
    OAIImage();
    OAIImage(QString json);
    ~OAIImage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryId() const;
    void setRegistryId(const QString &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    OAIImage_imageId getImageId() const;
    void setImageId(const OAIImage_imageId &image_id);
    bool is_image_id_Set() const;
    bool is_image_id_Valid() const;

    QString getImageManifest() const;
    void setImageManifest(const QString &image_manifest);
    bool is_image_manifest_Set() const;
    bool is_image_manifest_Valid() const;

    QString getImageManifestMediaType() const;
    void setImageManifestMediaType(const QString &image_manifest_media_type);
    bool is_image_manifest_media_type_Set() const;
    bool is_image_manifest_media_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    OAIImage_imageId m_image_id;
    bool m_image_id_isSet;
    bool m_image_id_isValid;

    QString m_image_manifest;
    bool m_image_manifest_isSet;
    bool m_image_manifest_isValid;

    QString m_image_manifest_media_type;
    bool m_image_manifest_media_type_isSet;
    bool m_image_manifest_media_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImage)

#endif // OAIImage_H
