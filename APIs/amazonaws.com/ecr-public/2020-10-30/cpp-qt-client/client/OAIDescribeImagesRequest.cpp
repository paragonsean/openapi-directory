/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImagesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImagesRequest::OAIDescribeImagesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImagesRequest::OAIDescribeImagesRequest() {
    this->initializeModel();
}

OAIDescribeImagesRequest::~OAIDescribeImagesRequest() {}

void OAIDescribeImagesRequest::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_image_ids_isSet = false;
    m_image_ids_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeImagesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImagesRequest::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_image_ids_isValid = ::OpenAPI::fromJsonValue(m_image_ids, json[QString("imageIds")]);
    m_image_ids_isSet = !json[QString("imageIds")].isNull() && m_image_ids_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeImagesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImagesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_image_ids.isSet()) {
        obj.insert(QString("imageIds"), ::OpenAPI::toJsonValue(m_image_ids));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIDescribeImagesRequest::getRegistryId() const {
    return m_registry_id;
}
void OAIDescribeImagesRequest::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIDescribeImagesRequest::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIDescribeImagesRequest::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIDescribeImagesRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAIDescribeImagesRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIDescribeImagesRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIDescribeImagesRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QList OAIDescribeImagesRequest::getImageIds() const {
    return m_image_ids;
}
void OAIDescribeImagesRequest::setImageIds(const QList &image_ids) {
    m_image_ids = image_ids;
    m_image_ids_isSet = true;
}

bool OAIDescribeImagesRequest::is_image_ids_Set() const{
    return m_image_ids_isSet;
}

bool OAIDescribeImagesRequest::is_image_ids_Valid() const{
    return m_image_ids_isValid;
}

QString OAIDescribeImagesRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeImagesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeImagesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeImagesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeImagesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeImagesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeImagesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeImagesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeImagesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImagesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && true;
}

} // namespace OpenAPI
