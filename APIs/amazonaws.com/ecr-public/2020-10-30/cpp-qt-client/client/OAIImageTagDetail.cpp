/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTagDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTagDetail::OAIImageTagDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTagDetail::OAIImageTagDetail() {
    this->initializeModel();
}

OAIImageTagDetail::~OAIImageTagDetail() {}

void OAIImageTagDetail::initializeModel() {

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_image_detail_isSet = false;
    m_image_detail_isValid = false;
}

void OAIImageTagDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTagDetail::fromJsonObject(QJsonObject json) {

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("imageTag")]);
    m_image_tag_isSet = !json[QString("imageTag")].isNull() && m_image_tag_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_image_detail_isValid = ::OpenAPI::fromJsonValue(m_image_detail, json[QString("imageDetail")]);
    m_image_detail_isSet = !json[QString("imageDetail")].isNull() && m_image_detail_isValid;
}

QString OAIImageTagDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTagDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_image_tag_isSet) {
        obj.insert(QString("imageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_image_detail.isSet()) {
        obj.insert(QString("imageDetail"), ::OpenAPI::toJsonValue(m_image_detail));
    }
    return obj;
}

QString OAIImageTagDetail::getImageTag() const {
    return m_image_tag;
}
void OAIImageTagDetail::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIImageTagDetail::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIImageTagDetail::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

QDateTime OAIImageTagDetail::getCreatedAt() const {
    return m_created_at;
}
void OAIImageTagDetail::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImageTagDetail::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImageTagDetail::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIImageTagDetail_imageDetail OAIImageTagDetail::getImageDetail() const {
    return m_image_detail;
}
void OAIImageTagDetail::setImageDetail(const OAIImageTagDetail_imageDetail &image_detail) {
    m_image_detail = image_detail;
    m_image_detail_isSet = true;
}

bool OAIImageTagDetail::is_image_detail_Set() const{
    return m_image_detail_isSet;
}

bool OAIImageTagDetail::is_image_detail_Valid() const{
    return m_image_detail_isValid;
}

bool OAIImageTagDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTagDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
