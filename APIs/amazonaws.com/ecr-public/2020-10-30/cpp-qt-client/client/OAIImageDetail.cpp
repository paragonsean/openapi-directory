/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageDetail::OAIImageDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageDetail::OAIImageDetail() {
    this->initializeModel();
}

OAIImageDetail::~OAIImageDetail() {}

void OAIImageDetail::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_tags_isSet = false;
    m_image_tags_isValid = false;

    m_image_size_in_bytes_isSet = false;
    m_image_size_in_bytes_isValid = false;

    m_image_pushed_at_isSet = false;
    m_image_pushed_at_isValid = false;

    m_image_manifest_media_type_isSet = false;
    m_image_manifest_media_type_isValid = false;

    m_artifact_media_type_isSet = false;
    m_artifact_media_type_isValid = false;
}

void OAIImageDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageDetail::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_tags_isValid = ::OpenAPI::fromJsonValue(m_image_tags, json[QString("imageTags")]);
    m_image_tags_isSet = !json[QString("imageTags")].isNull() && m_image_tags_isValid;

    m_image_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_size_in_bytes, json[QString("imageSizeInBytes")]);
    m_image_size_in_bytes_isSet = !json[QString("imageSizeInBytes")].isNull() && m_image_size_in_bytes_isValid;

    m_image_pushed_at_isValid = ::OpenAPI::fromJsonValue(m_image_pushed_at, json[QString("imagePushedAt")]);
    m_image_pushed_at_isSet = !json[QString("imagePushedAt")].isNull() && m_image_pushed_at_isValid;

    m_image_manifest_media_type_isValid = ::OpenAPI::fromJsonValue(m_image_manifest_media_type, json[QString("imageManifestMediaType")]);
    m_image_manifest_media_type_isSet = !json[QString("imageManifestMediaType")].isNull() && m_image_manifest_media_type_isValid;

    m_artifact_media_type_isValid = ::OpenAPI::fromJsonValue(m_artifact_media_type, json[QString("artifactMediaType")]);
    m_artifact_media_type_isSet = !json[QString("artifactMediaType")].isNull() && m_artifact_media_type_isValid;
}

QString OAIImageDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_tags.isSet()) {
        obj.insert(QString("imageTags"), ::OpenAPI::toJsonValue(m_image_tags));
    }
    if (m_image_size_in_bytes_isSet) {
        obj.insert(QString("imageSizeInBytes"), ::OpenAPI::toJsonValue(m_image_size_in_bytes));
    }
    if (m_image_pushed_at_isSet) {
        obj.insert(QString("imagePushedAt"), ::OpenAPI::toJsonValue(m_image_pushed_at));
    }
    if (m_image_manifest_media_type_isSet) {
        obj.insert(QString("imageManifestMediaType"), ::OpenAPI::toJsonValue(m_image_manifest_media_type));
    }
    if (m_artifact_media_type_isSet) {
        obj.insert(QString("artifactMediaType"), ::OpenAPI::toJsonValue(m_artifact_media_type));
    }
    return obj;
}

QString OAIImageDetail::getRegistryId() const {
    return m_registry_id;
}
void OAIImageDetail::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIImageDetail::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIImageDetail::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIImageDetail::getRepositoryName() const {
    return m_repository_name;
}
void OAIImageDetail::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIImageDetail::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIImageDetail::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIImageDetail::getImageDigest() const {
    return m_image_digest;
}
void OAIImageDetail::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIImageDetail::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIImageDetail::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QList OAIImageDetail::getImageTags() const {
    return m_image_tags;
}
void OAIImageDetail::setImageTags(const QList &image_tags) {
    m_image_tags = image_tags;
    m_image_tags_isSet = true;
}

bool OAIImageDetail::is_image_tags_Set() const{
    return m_image_tags_isSet;
}

bool OAIImageDetail::is_image_tags_Valid() const{
    return m_image_tags_isValid;
}

qint32 OAIImageDetail::getImageSizeInBytes() const {
    return m_image_size_in_bytes;
}
void OAIImageDetail::setImageSizeInBytes(const qint32 &image_size_in_bytes) {
    m_image_size_in_bytes = image_size_in_bytes;
    m_image_size_in_bytes_isSet = true;
}

bool OAIImageDetail::is_image_size_in_bytes_Set() const{
    return m_image_size_in_bytes_isSet;
}

bool OAIImageDetail::is_image_size_in_bytes_Valid() const{
    return m_image_size_in_bytes_isValid;
}

QDateTime OAIImageDetail::getImagePushedAt() const {
    return m_image_pushed_at;
}
void OAIImageDetail::setImagePushedAt(const QDateTime &image_pushed_at) {
    m_image_pushed_at = image_pushed_at;
    m_image_pushed_at_isSet = true;
}

bool OAIImageDetail::is_image_pushed_at_Set() const{
    return m_image_pushed_at_isSet;
}

bool OAIImageDetail::is_image_pushed_at_Valid() const{
    return m_image_pushed_at_isValid;
}

QString OAIImageDetail::getImageManifestMediaType() const {
    return m_image_manifest_media_type;
}
void OAIImageDetail::setImageManifestMediaType(const QString &image_manifest_media_type) {
    m_image_manifest_media_type = image_manifest_media_type;
    m_image_manifest_media_type_isSet = true;
}

bool OAIImageDetail::is_image_manifest_media_type_Set() const{
    return m_image_manifest_media_type_isSet;
}

bool OAIImageDetail::is_image_manifest_media_type_Valid() const{
    return m_image_manifest_media_type_isValid;
}

QString OAIImageDetail::getArtifactMediaType() const {
    return m_artifact_media_type;
}
void OAIImageDetail::setArtifactMediaType(const QString &artifact_media_type) {
    m_artifact_media_type = artifact_media_type;
    m_artifact_media_type_isSet = true;
}

bool OAIImageDetail::is_artifact_media_type_Set() const{
    return m_artifact_media_type_isSet;
}

bool OAIImageDetail::is_artifact_media_type_Valid() const{
    return m_artifact_media_type_isValid;
}

bool OAIImageDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pushed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_manifest_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
