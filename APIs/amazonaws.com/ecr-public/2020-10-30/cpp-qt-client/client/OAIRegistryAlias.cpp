/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistryAlias.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistryAlias::OAIRegistryAlias(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistryAlias::OAIRegistryAlias() {
    this->initializeModel();
}

OAIRegistryAlias::~OAIRegistryAlias() {}

void OAIRegistryAlias::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_primary_registry_alias_isSet = false;
    m_primary_registry_alias_isValid = false;

    m_default_registry_alias_isSet = false;
    m_default_registry_alias_isValid = false;
}

void OAIRegistryAlias::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistryAlias::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_primary_registry_alias_isValid = ::OpenAPI::fromJsonValue(m_primary_registry_alias, json[QString("primaryRegistryAlias")]);
    m_primary_registry_alias_isSet = !json[QString("primaryRegistryAlias")].isNull() && m_primary_registry_alias_isValid;

    m_default_registry_alias_isValid = ::OpenAPI::fromJsonValue(m_default_registry_alias, json[QString("defaultRegistryAlias")]);
    m_default_registry_alias_isSet = !json[QString("defaultRegistryAlias")].isNull() && m_default_registry_alias_isValid;
}

QString OAIRegistryAlias::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistryAlias::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_primary_registry_alias_isSet) {
        obj.insert(QString("primaryRegistryAlias"), ::OpenAPI::toJsonValue(m_primary_registry_alias));
    }
    if (m_default_registry_alias_isSet) {
        obj.insert(QString("defaultRegistryAlias"), ::OpenAPI::toJsonValue(m_default_registry_alias));
    }
    return obj;
}

QString OAIRegistryAlias::getName() const {
    return m_name;
}
void OAIRegistryAlias::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegistryAlias::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegistryAlias::is_name_Valid() const{
    return m_name_isValid;
}

OAIRegistryAliasStatus OAIRegistryAlias::getStatus() const {
    return m_status;
}
void OAIRegistryAlias::setStatus(const OAIRegistryAliasStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRegistryAlias::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRegistryAlias::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRegistryAlias::getPrimaryRegistryAlias() const {
    return m_primary_registry_alias;
}
void OAIRegistryAlias::setPrimaryRegistryAlias(const bool &primary_registry_alias) {
    m_primary_registry_alias = primary_registry_alias;
    m_primary_registry_alias_isSet = true;
}

bool OAIRegistryAlias::is_primary_registry_alias_Set() const{
    return m_primary_registry_alias_isSet;
}

bool OAIRegistryAlias::is_primary_registry_alias_Valid() const{
    return m_primary_registry_alias_isValid;
}

bool OAIRegistryAlias::getDefaultRegistryAlias() const {
    return m_default_registry_alias;
}
void OAIRegistryAlias::setDefaultRegistryAlias(const bool &default_registry_alias) {
    m_default_registry_alias = default_registry_alias;
    m_default_registry_alias_isSet = true;
}

bool OAIRegistryAlias::is_default_registry_alias_Set() const{
    return m_default_registry_alias_isSet;
}

bool OAIRegistryAlias::is_default_registry_alias_Valid() const{
    return m_default_registry_alias_isValid;
}

bool OAIRegistryAlias::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_registry_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_registry_alias_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistryAlias::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_status_isValid && m_primary_registry_alias_isValid && m_default_registry_alias_isValid && true;
}

} // namespace OpenAPI
