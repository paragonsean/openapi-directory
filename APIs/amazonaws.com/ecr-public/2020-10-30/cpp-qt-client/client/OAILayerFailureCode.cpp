/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILayerFailureCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILayerFailureCode::OAILayerFailureCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILayerFailureCode::OAILayerFailureCode() {
    this->initializeModel();
}

OAILayerFailureCode::~OAILayerFailureCode() {}

void OAILayerFailureCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILayerFailureCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILayerFailureCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("InvalidLayerDigest", Qt::CaseInsensitive) == 0) {
        m_value = eOAILayerFailureCode::INVALIDLAYERDIGEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MissingLayerDigest", Qt::CaseInsensitive) == 0) {
        m_value = eOAILayerFailureCode::MISSINGLAYERDIGEST;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILayerFailureCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILayerFailureCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILayerFailureCode::INVALIDLAYERDIGEST:
            val = "InvalidLayerDigest";
            break;
        case eOAILayerFailureCode::MISSINGLAYERDIGEST:
            val = "MissingLayerDigest";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILayerFailureCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILayerFailureCode::eOAILayerFailureCode OAILayerFailureCode::getValue() const {
    return m_value;
}

void OAILayerFailureCode::setValue(const OAILayerFailureCode::eOAILayerFailureCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILayerFailureCode::isSet() const {
    
    return m_value_isSet;
}

bool OAILayerFailureCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
