/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRegistriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRegistriesResponse::OAIDescribeRegistriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRegistriesResponse::OAIDescribeRegistriesResponse() {
    this->initializeModel();
}

OAIDescribeRegistriesResponse::~OAIDescribeRegistriesResponse() {}

void OAIDescribeRegistriesResponse::initializeModel() {

    m_registries_isSet = false;
    m_registries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeRegistriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRegistriesResponse::fromJsonObject(QJsonObject json) {

    m_registries_isValid = ::OpenAPI::fromJsonValue(m_registries, json[QString("registries")]);
    m_registries_isSet = !json[QString("registries")].isNull() && m_registries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeRegistriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRegistriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_registries.isSet()) {
        obj.insert(QString("registries"), ::OpenAPI::toJsonValue(m_registries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeRegistriesResponse::getRegistries() const {
    return m_registries;
}
void OAIDescribeRegistriesResponse::setRegistries(const QList &registries) {
    m_registries = registries;
    m_registries_isSet = true;
}

bool OAIDescribeRegistriesResponse::is_registries_Set() const{
    return m_registries_isSet;
}

bool OAIDescribeRegistriesResponse::is_registries_Valid() const{
    return m_registries_isValid;
}

QString OAIDescribeRegistriesResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeRegistriesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeRegistriesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeRegistriesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeRegistriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRegistriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_registries_isValid && true;
}

} // namespace OpenAPI
