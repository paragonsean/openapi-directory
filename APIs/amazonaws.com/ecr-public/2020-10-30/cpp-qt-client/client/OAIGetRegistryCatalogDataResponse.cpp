/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRegistryCatalogDataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRegistryCatalogDataResponse::OAIGetRegistryCatalogDataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRegistryCatalogDataResponse::OAIGetRegistryCatalogDataResponse() {
    this->initializeModel();
}

OAIGetRegistryCatalogDataResponse::~OAIGetRegistryCatalogDataResponse() {}

void OAIGetRegistryCatalogDataResponse::initializeModel() {

    m_registry_catalog_data_isSet = false;
    m_registry_catalog_data_isValid = false;
}

void OAIGetRegistryCatalogDataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRegistryCatalogDataResponse::fromJsonObject(QJsonObject json) {

    m_registry_catalog_data_isValid = ::OpenAPI::fromJsonValue(m_registry_catalog_data, json[QString("registryCatalogData")]);
    m_registry_catalog_data_isSet = !json[QString("registryCatalogData")].isNull() && m_registry_catalog_data_isValid;
}

QString OAIGetRegistryCatalogDataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRegistryCatalogDataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_catalog_data.isSet()) {
        obj.insert(QString("registryCatalogData"), ::OpenAPI::toJsonValue(m_registry_catalog_data));
    }
    return obj;
}

OAIGetRegistryCatalogDataResponse_registryCatalogData OAIGetRegistryCatalogDataResponse::getRegistryCatalogData() const {
    return m_registry_catalog_data;
}
void OAIGetRegistryCatalogDataResponse::setRegistryCatalogData(const OAIGetRegistryCatalogDataResponse_registryCatalogData &registry_catalog_data) {
    m_registry_catalog_data = registry_catalog_data;
    m_registry_catalog_data_isSet = true;
}

bool OAIGetRegistryCatalogDataResponse::is_registry_catalog_data_Set() const{
    return m_registry_catalog_data_isSet;
}

bool OAIGetRegistryCatalogDataResponse::is_registry_catalog_data_Valid() const{
    return m_registry_catalog_data_isValid;
}

bool OAIGetRegistryCatalogDataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_catalog_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRegistryCatalogDataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_registry_catalog_data_isValid && true;
}

} // namespace OpenAPI
