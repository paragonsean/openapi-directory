/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadLayerPartRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadLayerPartRequest::OAIUploadLayerPartRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadLayerPartRequest::OAIUploadLayerPartRequest() {
    this->initializeModel();
}

OAIUploadLayerPartRequest::~OAIUploadLayerPartRequest() {}

void OAIUploadLayerPartRequest::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_part_first_byte_isSet = false;
    m_part_first_byte_isValid = false;

    m_part_last_byte_isSet = false;
    m_part_last_byte_isValid = false;

    m_layer_part_blob_isSet = false;
    m_layer_part_blob_isValid = false;
}

void OAIUploadLayerPartRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadLayerPartRequest::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_part_first_byte_isValid = ::OpenAPI::fromJsonValue(m_part_first_byte, json[QString("partFirstByte")]);
    m_part_first_byte_isSet = !json[QString("partFirstByte")].isNull() && m_part_first_byte_isValid;

    m_part_last_byte_isValid = ::OpenAPI::fromJsonValue(m_part_last_byte, json[QString("partLastByte")]);
    m_part_last_byte_isSet = !json[QString("partLastByte")].isNull() && m_part_last_byte_isValid;

    m_layer_part_blob_isValid = ::OpenAPI::fromJsonValue(m_layer_part_blob, json[QString("layerPartBlob")]);
    m_layer_part_blob_isSet = !json[QString("layerPartBlob")].isNull() && m_layer_part_blob_isValid;
}

QString OAIUploadLayerPartRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadLayerPartRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_part_first_byte_isSet) {
        obj.insert(QString("partFirstByte"), ::OpenAPI::toJsonValue(m_part_first_byte));
    }
    if (m_part_last_byte_isSet) {
        obj.insert(QString("partLastByte"), ::OpenAPI::toJsonValue(m_part_last_byte));
    }
    if (m_layer_part_blob_isSet) {
        obj.insert(QString("layerPartBlob"), ::OpenAPI::toJsonValue(m_layer_part_blob));
    }
    return obj;
}

QString OAIUploadLayerPartRequest::getRegistryId() const {
    return m_registry_id;
}
void OAIUploadLayerPartRequest::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIUploadLayerPartRequest::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIUploadLayerPartRequest::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIUploadLayerPartRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAIUploadLayerPartRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIUploadLayerPartRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIUploadLayerPartRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAIUploadLayerPartRequest::getUploadId() const {
    return m_upload_id;
}
void OAIUploadLayerPartRequest::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIUploadLayerPartRequest::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIUploadLayerPartRequest::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

qint32 OAIUploadLayerPartRequest::getPartFirstByte() const {
    return m_part_first_byte;
}
void OAIUploadLayerPartRequest::setPartFirstByte(const qint32 &part_first_byte) {
    m_part_first_byte = part_first_byte;
    m_part_first_byte_isSet = true;
}

bool OAIUploadLayerPartRequest::is_part_first_byte_Set() const{
    return m_part_first_byte_isSet;
}

bool OAIUploadLayerPartRequest::is_part_first_byte_Valid() const{
    return m_part_first_byte_isValid;
}

qint32 OAIUploadLayerPartRequest::getPartLastByte() const {
    return m_part_last_byte;
}
void OAIUploadLayerPartRequest::setPartLastByte(const qint32 &part_last_byte) {
    m_part_last_byte = part_last_byte;
    m_part_last_byte_isSet = true;
}

bool OAIUploadLayerPartRequest::is_part_last_byte_Set() const{
    return m_part_last_byte_isSet;
}

bool OAIUploadLayerPartRequest::is_part_last_byte_Valid() const{
    return m_part_last_byte_isValid;
}

QString OAIUploadLayerPartRequest::getLayerPartBlob() const {
    return m_layer_part_blob;
}
void OAIUploadLayerPartRequest::setLayerPartBlob(const QString &layer_part_blob) {
    m_layer_part_blob = layer_part_blob;
    m_layer_part_blob_isSet = true;
}

bool OAIUploadLayerPartRequest::is_layer_part_blob_Set() const{
    return m_layer_part_blob_isSet;
}

bool OAIUploadLayerPartRequest::is_layer_part_blob_Valid() const{
    return m_layer_part_blob_isValid;
}

bool OAIUploadLayerPartRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_first_byte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_last_byte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layer_part_blob_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadLayerPartRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && m_upload_id_isValid && m_part_first_byte_isValid && m_part_last_byte_isValid && m_layer_part_blob_isValid && true;
}

} // namespace OpenAPI
