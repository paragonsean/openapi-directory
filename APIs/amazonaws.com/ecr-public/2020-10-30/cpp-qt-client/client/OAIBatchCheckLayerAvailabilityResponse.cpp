/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCheckLayerAvailabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCheckLayerAvailabilityResponse::OAIBatchCheckLayerAvailabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCheckLayerAvailabilityResponse::OAIBatchCheckLayerAvailabilityResponse() {
    this->initializeModel();
}

OAIBatchCheckLayerAvailabilityResponse::~OAIBatchCheckLayerAvailabilityResponse() {}

void OAIBatchCheckLayerAvailabilityResponse::initializeModel() {

    m_layers_isSet = false;
    m_layers_isValid = false;

    m_failures_isSet = false;
    m_failures_isValid = false;
}

void OAIBatchCheckLayerAvailabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCheckLayerAvailabilityResponse::fromJsonObject(QJsonObject json) {

    m_layers_isValid = ::OpenAPI::fromJsonValue(m_layers, json[QString("layers")]);
    m_layers_isSet = !json[QString("layers")].isNull() && m_layers_isValid;

    m_failures_isValid = ::OpenAPI::fromJsonValue(m_failures, json[QString("failures")]);
    m_failures_isSet = !json[QString("failures")].isNull() && m_failures_isValid;
}

QString OAIBatchCheckLayerAvailabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCheckLayerAvailabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_layers.isSet()) {
        obj.insert(QString("layers"), ::OpenAPI::toJsonValue(m_layers));
    }
    if (m_failures.isSet()) {
        obj.insert(QString("failures"), ::OpenAPI::toJsonValue(m_failures));
    }
    return obj;
}

QList OAIBatchCheckLayerAvailabilityResponse::getLayers() const {
    return m_layers;
}
void OAIBatchCheckLayerAvailabilityResponse::setLayers(const QList &layers) {
    m_layers = layers;
    m_layers_isSet = true;
}

bool OAIBatchCheckLayerAvailabilityResponse::is_layers_Set() const{
    return m_layers_isSet;
}

bool OAIBatchCheckLayerAvailabilityResponse::is_layers_Valid() const{
    return m_layers_isValid;
}

QList OAIBatchCheckLayerAvailabilityResponse::getFailures() const {
    return m_failures;
}
void OAIBatchCheckLayerAvailabilityResponse::setFailures(const QList &failures) {
    m_failures = failures;
    m_failures_isSet = true;
}

bool OAIBatchCheckLayerAvailabilityResponse::is_failures_Set() const{
    return m_failures_isSet;
}

bool OAIBatchCheckLayerAvailabilityResponse::is_failures_Valid() const{
    return m_failures_isValid;
}

bool OAIBatchCheckLayerAvailabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_layers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCheckLayerAvailabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
