/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRepositoryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRepositoryResponse::OAICreateRepositoryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRepositoryResponse::OAICreateRepositoryResponse() {
    this->initializeModel();
}

OAICreateRepositoryResponse::~OAICreateRepositoryResponse() {}

void OAICreateRepositoryResponse::initializeModel() {

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_catalog_data_isSet = false;
    m_catalog_data_isValid = false;
}

void OAICreateRepositoryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRepositoryResponse::fromJsonObject(QJsonObject json) {

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_catalog_data_isValid = ::OpenAPI::fromJsonValue(m_catalog_data, json[QString("catalogData")]);
    m_catalog_data_isSet = !json[QString("catalogData")].isNull() && m_catalog_data_isValid;
}

QString OAICreateRepositoryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRepositoryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_repository.isSet()) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_catalog_data.isSet()) {
        obj.insert(QString("catalogData"), ::OpenAPI::toJsonValue(m_catalog_data));
    }
    return obj;
}

OAICreateRepositoryResponse_repository OAICreateRepositoryResponse::getRepository() const {
    return m_repository;
}
void OAICreateRepositoryResponse::setRepository(const OAICreateRepositoryResponse_repository &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAICreateRepositoryResponse::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAICreateRepositoryResponse::is_repository_Valid() const{
    return m_repository_isValid;
}

OAIRepositoryCatalogData OAICreateRepositoryResponse::getCatalogData() const {
    return m_catalog_data;
}
void OAICreateRepositoryResponse::setCatalogData(const OAIRepositoryCatalogData &catalog_data) {
    m_catalog_data = catalog_data;
    m_catalog_data_isSet = true;
}

bool OAICreateRepositoryResponse::is_catalog_data_Set() const{
    return m_catalog_data_isSet;
}

bool OAICreateRepositoryResponse::is_catalog_data_Valid() const{
    return m_catalog_data_isValid;
}

bool OAICreateRepositoryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_catalog_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRepositoryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
