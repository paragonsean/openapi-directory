/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILayer.h
 *
 * An object that represents an Amazon ECR image layer.
 */

#ifndef OAILayer_H
#define OAILayer_H

#include <QJsonObject>

#include "OAILayerAvailability.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILayer : public OAIObject {
public:
    OAILayer();
    OAILayer(QString json);
    ~OAILayer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLayerDigest() const;
    void setLayerDigest(const QString &layer_digest);
    bool is_layer_digest_Set() const;
    bool is_layer_digest_Valid() const;

    OAILayerAvailability getLayerAvailability() const;
    void setLayerAvailability(const OAILayerAvailability &layer_availability);
    bool is_layer_availability_Set() const;
    bool is_layer_availability_Valid() const;

    qint32 getLayerSize() const;
    void setLayerSize(const qint32 &layer_size);
    bool is_layer_size_Set() const;
    bool is_layer_size_Valid() const;

    QString getMediaType() const;
    void setMediaType(const QString &media_type);
    bool is_media_type_Set() const;
    bool is_media_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_layer_digest;
    bool m_layer_digest_isSet;
    bool m_layer_digest_isValid;

    OAILayerAvailability m_layer_availability;
    bool m_layer_availability_isSet;
    bool m_layer_availability_isValid;

    qint32 m_layer_size;
    bool m_layer_size_isSet;
    bool m_layer_size_isValid;

    QString m_media_type;
    bool m_media_type_isSet;
    bool m_media_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILayer)

#endif // OAILayer_H
