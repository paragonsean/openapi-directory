/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageFailure_imageId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageFailure_imageId::OAIImageFailure_imageId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageFailure_imageId::OAIImageFailure_imageId() {
    this->initializeModel();
}

OAIImageFailure_imageId::~OAIImageFailure_imageId() {}

void OAIImageFailure_imageId::initializeModel() {

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_tag_isSet = false;
    m_image_tag_isValid = false;
}

void OAIImageFailure_imageId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageFailure_imageId::fromJsonObject(QJsonObject json) {

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_tag_isValid = ::OpenAPI::fromJsonValue(m_image_tag, json[QString("imageTag")]);
    m_image_tag_isSet = !json[QString("imageTag")].isNull() && m_image_tag_isValid;
}

QString OAIImageFailure_imageId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageFailure_imageId::asJsonObject() const {
    QJsonObject obj;
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_tag_isSet) {
        obj.insert(QString("imageTag"), ::OpenAPI::toJsonValue(m_image_tag));
    }
    return obj;
}

QString OAIImageFailure_imageId::getImageDigest() const {
    return m_image_digest;
}
void OAIImageFailure_imageId::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIImageFailure_imageId::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIImageFailure_imageId::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

QString OAIImageFailure_imageId::getImageTag() const {
    return m_image_tag;
}
void OAIImageFailure_imageId::setImageTag(const QString &image_tag) {
    m_image_tag = image_tag;
    m_image_tag_isSet = true;
}

bool OAIImageFailure_imageId::is_image_tag_Set() const{
    return m_image_tag_isSet;
}

bool OAIImageFailure_imageId::is_image_tag_Valid() const{
    return m_image_tag_isValid;
}

bool OAIImageFailure_imageId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageFailure_imageId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
