/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistry::OAIRegistry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistry::OAIRegistry() {
    this->initializeModel();
}

OAIRegistry::~OAIRegistry() {}

void OAIRegistry::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_registry_arn_isSet = false;
    m_registry_arn_isValid = false;

    m_registry_uri_isSet = false;
    m_registry_uri_isValid = false;

    m_verified_isSet = false;
    m_verified_isValid = false;

    m_aliases_isSet = false;
    m_aliases_isValid = false;
}

void OAIRegistry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistry::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_registry_arn_isValid = ::OpenAPI::fromJsonValue(m_registry_arn, json[QString("registryArn")]);
    m_registry_arn_isSet = !json[QString("registryArn")].isNull() && m_registry_arn_isValid;

    m_registry_uri_isValid = ::OpenAPI::fromJsonValue(m_registry_uri, json[QString("registryUri")]);
    m_registry_uri_isSet = !json[QString("registryUri")].isNull() && m_registry_uri_isValid;

    m_verified_isValid = ::OpenAPI::fromJsonValue(m_verified, json[QString("verified")]);
    m_verified_isSet = !json[QString("verified")].isNull() && m_verified_isValid;

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;
}

QString OAIRegistry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistry::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_registry_arn_isSet) {
        obj.insert(QString("registryArn"), ::OpenAPI::toJsonValue(m_registry_arn));
    }
    if (m_registry_uri_isSet) {
        obj.insert(QString("registryUri"), ::OpenAPI::toJsonValue(m_registry_uri));
    }
    if (m_verified_isSet) {
        obj.insert(QString("verified"), ::OpenAPI::toJsonValue(m_verified));
    }
    if (m_aliases.isSet()) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    return obj;
}

QString OAIRegistry::getRegistryId() const {
    return m_registry_id;
}
void OAIRegistry::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIRegistry::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIRegistry::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIRegistry::getRegistryArn() const {
    return m_registry_arn;
}
void OAIRegistry::setRegistryArn(const QString &registry_arn) {
    m_registry_arn = registry_arn;
    m_registry_arn_isSet = true;
}

bool OAIRegistry::is_registry_arn_Set() const{
    return m_registry_arn_isSet;
}

bool OAIRegistry::is_registry_arn_Valid() const{
    return m_registry_arn_isValid;
}

QString OAIRegistry::getRegistryUri() const {
    return m_registry_uri;
}
void OAIRegistry::setRegistryUri(const QString &registry_uri) {
    m_registry_uri = registry_uri;
    m_registry_uri_isSet = true;
}

bool OAIRegistry::is_registry_uri_Set() const{
    return m_registry_uri_isSet;
}

bool OAIRegistry::is_registry_uri_Valid() const{
    return m_registry_uri_isValid;
}

bool OAIRegistry::getVerified() const {
    return m_verified;
}
void OAIRegistry::setVerified(const bool &verified) {
    m_verified = verified;
    m_verified_isSet = true;
}

bool OAIRegistry::is_verified_Set() const{
    return m_verified_isSet;
}

bool OAIRegistry::is_verified_Valid() const{
    return m_verified_isValid;
}

QList OAIRegistry::getAliases() const {
    return m_aliases;
}
void OAIRegistry::setAliases(const QList &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIRegistry::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIRegistry::is_aliases_Valid() const{
    return m_aliases_isValid;
}

bool OAIRegistry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aliases.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_registry_id_isValid && m_registry_arn_isValid && m_registry_uri_isValid && m_verified_isValid && m_aliases_isValid && true;
}

} // namespace OpenAPI
