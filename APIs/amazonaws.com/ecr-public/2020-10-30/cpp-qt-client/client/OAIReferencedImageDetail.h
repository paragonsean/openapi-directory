/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReferencedImageDetail.h
 *
 * An object that describes the image tag details that are returned by a &lt;a&gt;DescribeImageTags&lt;/a&gt; action.
 */

#ifndef OAIReferencedImageDetail_H
#define OAIReferencedImageDetail_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReferencedImageDetail : public OAIObject {
public:
    OAIReferencedImageDetail();
    OAIReferencedImageDetail(QString json);
    ~OAIReferencedImageDetail() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getImageDigest() const;
    void setImageDigest(const QString &image_digest);
    bool is_image_digest_Set() const;
    bool is_image_digest_Valid() const;

    qint32 getImageSizeInBytes() const;
    void setImageSizeInBytes(const qint32 &image_size_in_bytes);
    bool is_image_size_in_bytes_Set() const;
    bool is_image_size_in_bytes_Valid() const;

    QDateTime getImagePushedAt() const;
    void setImagePushedAt(const QDateTime &image_pushed_at);
    bool is_image_pushed_at_Set() const;
    bool is_image_pushed_at_Valid() const;

    QString getImageManifestMediaType() const;
    void setImageManifestMediaType(const QString &image_manifest_media_type);
    bool is_image_manifest_media_type_Set() const;
    bool is_image_manifest_media_type_Valid() const;

    QString getArtifactMediaType() const;
    void setArtifactMediaType(const QString &artifact_media_type);
    bool is_artifact_media_type_Set() const;
    bool is_artifact_media_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_image_digest;
    bool m_image_digest_isSet;
    bool m_image_digest_isValid;

    qint32 m_image_size_in_bytes;
    bool m_image_size_in_bytes_isSet;
    bool m_image_size_in_bytes_isValid;

    QDateTime m_image_pushed_at;
    bool m_image_pushed_at_isSet;
    bool m_image_pushed_at_isValid;

    QString m_image_manifest_media_type;
    bool m_image_manifest_media_type_isSet;
    bool m_image_manifest_media_type_isValid;

    QString m_artifact_media_type;
    bool m_artifact_media_type_isSet;
    bool m_artifact_media_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReferencedImageDetail)

#endif // OAIReferencedImageDetail_H
