/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRepositoryResponse_repository.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRepositoryResponse_repository::OAICreateRepositoryResponse_repository(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRepositoryResponse_repository::OAICreateRepositoryResponse_repository() {
    this->initializeModel();
}

OAICreateRepositoryResponse_repository::~OAICreateRepositoryResponse_repository() {}

void OAICreateRepositoryResponse_repository::initializeModel() {

    m_repository_arn_isSet = false;
    m_repository_arn_isValid = false;

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_repository_uri_isSet = false;
    m_repository_uri_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAICreateRepositoryResponse_repository::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRepositoryResponse_repository::fromJsonObject(QJsonObject json) {

    m_repository_arn_isValid = ::OpenAPI::fromJsonValue(m_repository_arn, json[QString("repositoryArn")]);
    m_repository_arn_isSet = !json[QString("repositoryArn")].isNull() && m_repository_arn_isValid;

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_repository_uri_isValid = ::OpenAPI::fromJsonValue(m_repository_uri, json[QString("repositoryUri")]);
    m_repository_uri_isSet = !json[QString("repositoryUri")].isNull() && m_repository_uri_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;
}

QString OAICreateRepositoryResponse_repository::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRepositoryResponse_repository::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_arn_isSet) {
        obj.insert(QString("repositoryArn"), ::OpenAPI::toJsonValue(m_repository_arn));
    }
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_repository_uri_isSet) {
        obj.insert(QString("repositoryUri"), ::OpenAPI::toJsonValue(m_repository_uri));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    return obj;
}

QString OAICreateRepositoryResponse_repository::getRepositoryArn() const {
    return m_repository_arn;
}
void OAICreateRepositoryResponse_repository::setRepositoryArn(const QString &repository_arn) {
    m_repository_arn = repository_arn;
    m_repository_arn_isSet = true;
}

bool OAICreateRepositoryResponse_repository::is_repository_arn_Set() const{
    return m_repository_arn_isSet;
}

bool OAICreateRepositoryResponse_repository::is_repository_arn_Valid() const{
    return m_repository_arn_isValid;
}

QString OAICreateRepositoryResponse_repository::getRegistryId() const {
    return m_registry_id;
}
void OAICreateRepositoryResponse_repository::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAICreateRepositoryResponse_repository::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAICreateRepositoryResponse_repository::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAICreateRepositoryResponse_repository::getRepositoryName() const {
    return m_repository_name;
}
void OAICreateRepositoryResponse_repository::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAICreateRepositoryResponse_repository::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAICreateRepositoryResponse_repository::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAICreateRepositoryResponse_repository::getRepositoryUri() const {
    return m_repository_uri;
}
void OAICreateRepositoryResponse_repository::setRepositoryUri(const QString &repository_uri) {
    m_repository_uri = repository_uri;
    m_repository_uri_isSet = true;
}

bool OAICreateRepositoryResponse_repository::is_repository_uri_Set() const{
    return m_repository_uri_isSet;
}

bool OAICreateRepositoryResponse_repository::is_repository_uri_Valid() const{
    return m_repository_uri_isValid;
}

QDateTime OAICreateRepositoryResponse_repository::getCreatedAt() const {
    return m_created_at;
}
void OAICreateRepositoryResponse_repository::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateRepositoryResponse_repository::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateRepositoryResponse_repository::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAICreateRepositoryResponse_repository::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRepositoryResponse_repository::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
