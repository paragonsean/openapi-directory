/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUploadLayerPartRequest.h
 *
 * 
 */

#ifndef OAIUploadLayerPartRequest_H
#define OAIUploadLayerPartRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUploadLayerPartRequest : public OAIObject {
public:
    OAIUploadLayerPartRequest();
    OAIUploadLayerPartRequest(QString json);
    ~OAIUploadLayerPartRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRegistryId() const;
    void setRegistryId(const QString &registry_id);
    bool is_registry_id_Set() const;
    bool is_registry_id_Valid() const;

    QString getRepositoryName() const;
    void setRepositoryName(const QString &repository_name);
    bool is_repository_name_Set() const;
    bool is_repository_name_Valid() const;

    QString getUploadId() const;
    void setUploadId(const QString &upload_id);
    bool is_upload_id_Set() const;
    bool is_upload_id_Valid() const;

    qint32 getPartFirstByte() const;
    void setPartFirstByte(const qint32 &part_first_byte);
    bool is_part_first_byte_Set() const;
    bool is_part_first_byte_Valid() const;

    qint32 getPartLastByte() const;
    void setPartLastByte(const qint32 &part_last_byte);
    bool is_part_last_byte_Set() const;
    bool is_part_last_byte_Valid() const;

    QString getLayerPartBlob() const;
    void setLayerPartBlob(const QString &layer_part_blob);
    bool is_layer_part_blob_Set() const;
    bool is_layer_part_blob_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_registry_id;
    bool m_registry_id_isSet;
    bool m_registry_id_isValid;

    QString m_repository_name;
    bool m_repository_name_isSet;
    bool m_repository_name_isValid;

    QString m_upload_id;
    bool m_upload_id_isSet;
    bool m_upload_id_isValid;

    qint32 m_part_first_byte;
    bool m_part_first_byte_isSet;
    bool m_part_first_byte_isValid;

    qint32 m_part_last_byte;
    bool m_part_last_byte_isSet;
    bool m_part_last_byte_isValid;

    QString m_layer_part_blob;
    bool m_layer_part_blob_isSet;
    bool m_layer_part_blob_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUploadLayerPartRequest)

#endif // OAIUploadLayerPartRequest_H
