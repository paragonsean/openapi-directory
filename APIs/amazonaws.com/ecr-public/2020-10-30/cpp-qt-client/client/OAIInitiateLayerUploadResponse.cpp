/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInitiateLayerUploadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInitiateLayerUploadResponse::OAIInitiateLayerUploadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInitiateLayerUploadResponse::OAIInitiateLayerUploadResponse() {
    this->initializeModel();
}

OAIInitiateLayerUploadResponse::~OAIInitiateLayerUploadResponse() {}

void OAIInitiateLayerUploadResponse::initializeModel() {

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_part_size_isSet = false;
    m_part_size_isValid = false;
}

void OAIInitiateLayerUploadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInitiateLayerUploadResponse::fromJsonObject(QJsonObject json) {

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_part_size_isValid = ::OpenAPI::fromJsonValue(m_part_size, json[QString("partSize")]);
    m_part_size_isSet = !json[QString("partSize")].isNull() && m_part_size_isValid;
}

QString OAIInitiateLayerUploadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInitiateLayerUploadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_part_size_isSet) {
        obj.insert(QString("partSize"), ::OpenAPI::toJsonValue(m_part_size));
    }
    return obj;
}

QString OAIInitiateLayerUploadResponse::getUploadId() const {
    return m_upload_id;
}
void OAIInitiateLayerUploadResponse::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIInitiateLayerUploadResponse::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIInitiateLayerUploadResponse::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

qint32 OAIInitiateLayerUploadResponse::getPartSize() const {
    return m_part_size;
}
void OAIInitiateLayerUploadResponse::setPartSize(const qint32 &part_size) {
    m_part_size = part_size;
    m_part_size_isSet = true;
}

bool OAIInitiateLayerUploadResponse::is_part_size_Set() const{
    return m_part_size_isSet;
}

bool OAIInitiateLayerUploadResponse::is_part_size_Valid() const{
    return m_part_size_isValid;
}

bool OAIInitiateLayerUploadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInitiateLayerUploadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
