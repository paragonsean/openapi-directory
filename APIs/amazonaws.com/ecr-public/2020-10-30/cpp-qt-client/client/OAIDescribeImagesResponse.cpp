/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeImagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeImagesResponse::OAIDescribeImagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeImagesResponse::OAIDescribeImagesResponse() {
    this->initializeModel();
}

OAIDescribeImagesResponse::~OAIDescribeImagesResponse() {}

void OAIDescribeImagesResponse::initializeModel() {

    m_image_details_isSet = false;
    m_image_details_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeImagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeImagesResponse::fromJsonObject(QJsonObject json) {

    m_image_details_isValid = ::OpenAPI::fromJsonValue(m_image_details, json[QString("imageDetails")]);
    m_image_details_isSet = !json[QString("imageDetails")].isNull() && m_image_details_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeImagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeImagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_image_details.isSet()) {
        obj.insert(QString("imageDetails"), ::OpenAPI::toJsonValue(m_image_details));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeImagesResponse::getImageDetails() const {
    return m_image_details;
}
void OAIDescribeImagesResponse::setImageDetails(const QList &image_details) {
    m_image_details = image_details;
    m_image_details_isSet = true;
}

bool OAIDescribeImagesResponse::is_image_details_Set() const{
    return m_image_details_isSet;
}

bool OAIDescribeImagesResponse::is_image_details_Valid() const{
    return m_image_details_isValid;
}

QString OAIDescribeImagesResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeImagesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeImagesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeImagesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeImagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeImagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
