/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInitiateLayerUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInitiateLayerUploadRequest::OAIInitiateLayerUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInitiateLayerUploadRequest::OAIInitiateLayerUploadRequest() {
    this->initializeModel();
}

OAIInitiateLayerUploadRequest::~OAIInitiateLayerUploadRequest() {}

void OAIInitiateLayerUploadRequest::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;
}

void OAIInitiateLayerUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInitiateLayerUploadRequest::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;
}

QString OAIInitiateLayerUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInitiateLayerUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    return obj;
}

QString OAIInitiateLayerUploadRequest::getRegistryId() const {
    return m_registry_id;
}
void OAIInitiateLayerUploadRequest::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAIInitiateLayerUploadRequest::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAIInitiateLayerUploadRequest::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAIInitiateLayerUploadRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAIInitiateLayerUploadRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAIInitiateLayerUploadRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAIInitiateLayerUploadRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

bool OAIInitiateLayerUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInitiateLayerUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && true;
}

} // namespace OpenAPI
