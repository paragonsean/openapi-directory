/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetRepositoryPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetRepositoryPolicyRequest::OAISetRepositoryPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetRepositoryPolicyRequest::OAISetRepositoryPolicyRequest() {
    this->initializeModel();
}

OAISetRepositoryPolicyRequest::~OAISetRepositoryPolicyRequest() {}

void OAISetRepositoryPolicyRequest::initializeModel() {

    m_registry_id_isSet = false;
    m_registry_id_isValid = false;

    m_repository_name_isSet = false;
    m_repository_name_isValid = false;

    m_policy_text_isSet = false;
    m_policy_text_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;
}

void OAISetRepositoryPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetRepositoryPolicyRequest::fromJsonObject(QJsonObject json) {

    m_registry_id_isValid = ::OpenAPI::fromJsonValue(m_registry_id, json[QString("registryId")]);
    m_registry_id_isSet = !json[QString("registryId")].isNull() && m_registry_id_isValid;

    m_repository_name_isValid = ::OpenAPI::fromJsonValue(m_repository_name, json[QString("repositoryName")]);
    m_repository_name_isSet = !json[QString("repositoryName")].isNull() && m_repository_name_isValid;

    m_policy_text_isValid = ::OpenAPI::fromJsonValue(m_policy_text, json[QString("policyText")]);
    m_policy_text_isSet = !json[QString("policyText")].isNull() && m_policy_text_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;
}

QString OAISetRepositoryPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetRepositoryPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_id_isSet) {
        obj.insert(QString("registryId"), ::OpenAPI::toJsonValue(m_registry_id));
    }
    if (m_repository_name_isSet) {
        obj.insert(QString("repositoryName"), ::OpenAPI::toJsonValue(m_repository_name));
    }
    if (m_policy_text_isSet) {
        obj.insert(QString("policyText"), ::OpenAPI::toJsonValue(m_policy_text));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    return obj;
}

QString OAISetRepositoryPolicyRequest::getRegistryId() const {
    return m_registry_id;
}
void OAISetRepositoryPolicyRequest::setRegistryId(const QString &registry_id) {
    m_registry_id = registry_id;
    m_registry_id_isSet = true;
}

bool OAISetRepositoryPolicyRequest::is_registry_id_Set() const{
    return m_registry_id_isSet;
}

bool OAISetRepositoryPolicyRequest::is_registry_id_Valid() const{
    return m_registry_id_isValid;
}

QString OAISetRepositoryPolicyRequest::getRepositoryName() const {
    return m_repository_name;
}
void OAISetRepositoryPolicyRequest::setRepositoryName(const QString &repository_name) {
    m_repository_name = repository_name;
    m_repository_name_isSet = true;
}

bool OAISetRepositoryPolicyRequest::is_repository_name_Set() const{
    return m_repository_name_isSet;
}

bool OAISetRepositoryPolicyRequest::is_repository_name_Valid() const{
    return m_repository_name_isValid;
}

QString OAISetRepositoryPolicyRequest::getPolicyText() const {
    return m_policy_text;
}
void OAISetRepositoryPolicyRequest::setPolicyText(const QString &policy_text) {
    m_policy_text = policy_text;
    m_policy_text_isSet = true;
}

bool OAISetRepositoryPolicyRequest::is_policy_text_Set() const{
    return m_policy_text_isSet;
}

bool OAISetRepositoryPolicyRequest::is_policy_text_Valid() const{
    return m_policy_text_isValid;
}

bool OAISetRepositoryPolicyRequest::getForce() const {
    return m_force;
}
void OAISetRepositoryPolicyRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAISetRepositoryPolicyRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAISetRepositoryPolicyRequest::is_force_Valid() const{
    return m_force_isValid;
}

bool OAISetRepositoryPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetRepositoryPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_name_isValid && m_policy_text_isValid && true;
}

} // namespace OpenAPI
