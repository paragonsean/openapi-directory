/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAuthorizationTokenResponse_authorizationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAuthorizationTokenResponse_authorizationData::OAIGetAuthorizationTokenResponse_authorizationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAuthorizationTokenResponse_authorizationData::OAIGetAuthorizationTokenResponse_authorizationData() {
    this->initializeModel();
}

OAIGetAuthorizationTokenResponse_authorizationData::~OAIGetAuthorizationTokenResponse_authorizationData() {}

void OAIGetAuthorizationTokenResponse_authorizationData::initializeModel() {

    m_authorization_token_isSet = false;
    m_authorization_token_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;
}

void OAIGetAuthorizationTokenResponse_authorizationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAuthorizationTokenResponse_authorizationData::fromJsonObject(QJsonObject json) {

    m_authorization_token_isValid = ::OpenAPI::fromJsonValue(m_authorization_token, json[QString("authorizationToken")]);
    m_authorization_token_isSet = !json[QString("authorizationToken")].isNull() && m_authorization_token_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;
}

QString OAIGetAuthorizationTokenResponse_authorizationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAuthorizationTokenResponse_authorizationData::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_token_isSet) {
        obj.insert(QString("authorizationToken"), ::OpenAPI::toJsonValue(m_authorization_token));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    return obj;
}

QString OAIGetAuthorizationTokenResponse_authorizationData::getAuthorizationToken() const {
    return m_authorization_token;
}
void OAIGetAuthorizationTokenResponse_authorizationData::setAuthorizationToken(const QString &authorization_token) {
    m_authorization_token = authorization_token;
    m_authorization_token_isSet = true;
}

bool OAIGetAuthorizationTokenResponse_authorizationData::is_authorization_token_Set() const{
    return m_authorization_token_isSet;
}

bool OAIGetAuthorizationTokenResponse_authorizationData::is_authorization_token_Valid() const{
    return m_authorization_token_isValid;
}

QDateTime OAIGetAuthorizationTokenResponse_authorizationData::getExpiresAt() const {
    return m_expires_at;
}
void OAIGetAuthorizationTokenResponse_authorizationData::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIGetAuthorizationTokenResponse_authorizationData::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIGetAuthorizationTokenResponse_authorizationData::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIGetAuthorizationTokenResponse_authorizationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAuthorizationTokenResponse_authorizationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
