/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageTagDetail_imageDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageTagDetail_imageDetail::OAIImageTagDetail_imageDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageTagDetail_imageDetail::OAIImageTagDetail_imageDetail() {
    this->initializeModel();
}

OAIImageTagDetail_imageDetail::~OAIImageTagDetail_imageDetail() {}

void OAIImageTagDetail_imageDetail::initializeModel() {

    m_image_digest_isSet = false;
    m_image_digest_isValid = false;

    m_image_size_in_bytes_isSet = false;
    m_image_size_in_bytes_isValid = false;

    m_image_pushed_at_isSet = false;
    m_image_pushed_at_isValid = false;

    m_image_manifest_media_type_isSet = false;
    m_image_manifest_media_type_isValid = false;

    m_artifact_media_type_isSet = false;
    m_artifact_media_type_isValid = false;
}

void OAIImageTagDetail_imageDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageTagDetail_imageDetail::fromJsonObject(QJsonObject json) {

    m_image_digest_isValid = ::OpenAPI::fromJsonValue(m_image_digest, json[QString("imageDigest")]);
    m_image_digest_isSet = !json[QString("imageDigest")].isNull() && m_image_digest_isValid;

    m_image_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_size_in_bytes, json[QString("imageSizeInBytes")]);
    m_image_size_in_bytes_isSet = !json[QString("imageSizeInBytes")].isNull() && m_image_size_in_bytes_isValid;

    m_image_pushed_at_isValid = ::OpenAPI::fromJsonValue(m_image_pushed_at, json[QString("imagePushedAt")]);
    m_image_pushed_at_isSet = !json[QString("imagePushedAt")].isNull() && m_image_pushed_at_isValid;

    m_image_manifest_media_type_isValid = ::OpenAPI::fromJsonValue(m_image_manifest_media_type, json[QString("imageManifestMediaType")]);
    m_image_manifest_media_type_isSet = !json[QString("imageManifestMediaType")].isNull() && m_image_manifest_media_type_isValid;

    m_artifact_media_type_isValid = ::OpenAPI::fromJsonValue(m_artifact_media_type, json[QString("artifactMediaType")]);
    m_artifact_media_type_isSet = !json[QString("artifactMediaType")].isNull() && m_artifact_media_type_isValid;
}

QString OAIImageTagDetail_imageDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageTagDetail_imageDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_image_digest_isSet) {
        obj.insert(QString("imageDigest"), ::OpenAPI::toJsonValue(m_image_digest));
    }
    if (m_image_size_in_bytes_isSet) {
        obj.insert(QString("imageSizeInBytes"), ::OpenAPI::toJsonValue(m_image_size_in_bytes));
    }
    if (m_image_pushed_at_isSet) {
        obj.insert(QString("imagePushedAt"), ::OpenAPI::toJsonValue(m_image_pushed_at));
    }
    if (m_image_manifest_media_type_isSet) {
        obj.insert(QString("imageManifestMediaType"), ::OpenAPI::toJsonValue(m_image_manifest_media_type));
    }
    if (m_artifact_media_type_isSet) {
        obj.insert(QString("artifactMediaType"), ::OpenAPI::toJsonValue(m_artifact_media_type));
    }
    return obj;
}

QString OAIImageTagDetail_imageDetail::getImageDigest() const {
    return m_image_digest;
}
void OAIImageTagDetail_imageDetail::setImageDigest(const QString &image_digest) {
    m_image_digest = image_digest;
    m_image_digest_isSet = true;
}

bool OAIImageTagDetail_imageDetail::is_image_digest_Set() const{
    return m_image_digest_isSet;
}

bool OAIImageTagDetail_imageDetail::is_image_digest_Valid() const{
    return m_image_digest_isValid;
}

qint32 OAIImageTagDetail_imageDetail::getImageSizeInBytes() const {
    return m_image_size_in_bytes;
}
void OAIImageTagDetail_imageDetail::setImageSizeInBytes(const qint32 &image_size_in_bytes) {
    m_image_size_in_bytes = image_size_in_bytes;
    m_image_size_in_bytes_isSet = true;
}

bool OAIImageTagDetail_imageDetail::is_image_size_in_bytes_Set() const{
    return m_image_size_in_bytes_isSet;
}

bool OAIImageTagDetail_imageDetail::is_image_size_in_bytes_Valid() const{
    return m_image_size_in_bytes_isValid;
}

QDateTime OAIImageTagDetail_imageDetail::getImagePushedAt() const {
    return m_image_pushed_at;
}
void OAIImageTagDetail_imageDetail::setImagePushedAt(const QDateTime &image_pushed_at) {
    m_image_pushed_at = image_pushed_at;
    m_image_pushed_at_isSet = true;
}

bool OAIImageTagDetail_imageDetail::is_image_pushed_at_Set() const{
    return m_image_pushed_at_isSet;
}

bool OAIImageTagDetail_imageDetail::is_image_pushed_at_Valid() const{
    return m_image_pushed_at_isValid;
}

QString OAIImageTagDetail_imageDetail::getImageManifestMediaType() const {
    return m_image_manifest_media_type;
}
void OAIImageTagDetail_imageDetail::setImageManifestMediaType(const QString &image_manifest_media_type) {
    m_image_manifest_media_type = image_manifest_media_type;
    m_image_manifest_media_type_isSet = true;
}

bool OAIImageTagDetail_imageDetail::is_image_manifest_media_type_Set() const{
    return m_image_manifest_media_type_isSet;
}

bool OAIImageTagDetail_imageDetail::is_image_manifest_media_type_Valid() const{
    return m_image_manifest_media_type_isValid;
}

QString OAIImageTagDetail_imageDetail::getArtifactMediaType() const {
    return m_artifact_media_type;
}
void OAIImageTagDetail_imageDetail::setArtifactMediaType(const QString &artifact_media_type) {
    m_artifact_media_type = artifact_media_type;
    m_artifact_media_type_isSet = true;
}

bool OAIImageTagDetail_imageDetail::is_artifact_media_type_Set() const{
    return m_artifact_media_type_isSet;
}

bool OAIImageTagDetail_imageDetail::is_artifact_media_type_Valid() const{
    return m_artifact_media_type_isValid;
}

bool OAIImageTagDetail_imageDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_digest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pushed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_manifest_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageTagDetail_imageDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
