/**
 * Amazon Elastic Container Registry Public
 * <fullname>Amazon Elastic Container Registry Public</fullname> <p>Amazon Elastic Container Registry Public (Amazon ECR Public) is a managed container image registry service. Amazon ECR provides both public and private registries to host your container images. You can use the Docker CLI or your preferred client to push, pull, and manage images. Amazon ECR provides a secure, scalable, and reliable registry for your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public repositories with this API. For information about the Amazon ECR API for private repositories, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html\">Amazon Elastic Container Registry API Reference</a>.</p>
 *
 * The version of the OpenAPI document: 2020-10-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeRepositoriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeRepositoriesResponse::OAIDescribeRepositoriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeRepositoriesResponse::OAIDescribeRepositoriesResponse() {
    this->initializeModel();
}

OAIDescribeRepositoriesResponse::~OAIDescribeRepositoriesResponse() {}

void OAIDescribeRepositoriesResponse::initializeModel() {

    m_repositories_isSet = false;
    m_repositories_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeRepositoriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeRepositoriesResponse::fromJsonObject(QJsonObject json) {

    m_repositories_isValid = ::OpenAPI::fromJsonValue(m_repositories, json[QString("repositories")]);
    m_repositories_isSet = !json[QString("repositories")].isNull() && m_repositories_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeRepositoriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeRepositoriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_repositories.isSet()) {
        obj.insert(QString("repositories"), ::OpenAPI::toJsonValue(m_repositories));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeRepositoriesResponse::getRepositories() const {
    return m_repositories;
}
void OAIDescribeRepositoriesResponse::setRepositories(const QList &repositories) {
    m_repositories = repositories;
    m_repositories_isSet = true;
}

bool OAIDescribeRepositoriesResponse::is_repositories_Set() const{
    return m_repositories_isSet;
}

bool OAIDescribeRepositoriesResponse::is_repositories_Valid() const{
    return m_repositories_isValid;
}

QString OAIDescribeRepositoriesResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeRepositoriesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeRepositoriesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeRepositoriesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeRepositoriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repositories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeRepositoriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
