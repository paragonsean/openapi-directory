# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_registry_catalog_data_response_registry_catalog_data import GetRegistryCatalogDataResponseRegistryCatalogData
from openapi_server import util


class GetRegistryCatalogDataResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry_catalog_data: GetRegistryCatalogDataResponseRegistryCatalogData=None):
        """GetRegistryCatalogDataResponse - a model defined in OpenAPI

        :param registry_catalog_data: The registry_catalog_data of this GetRegistryCatalogDataResponse.
        """
        self.openapi_types = {
            'registry_catalog_data': GetRegistryCatalogDataResponseRegistryCatalogData
        }

        self.attribute_map = {
            'registry_catalog_data': 'registryCatalogData'
        }

        self._registry_catalog_data = registry_catalog_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRegistryCatalogDataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRegistryCatalogDataResponse of this GetRegistryCatalogDataResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry_catalog_data(self):
        """Gets the registry_catalog_data of this GetRegistryCatalogDataResponse.


        :return: The registry_catalog_data of this GetRegistryCatalogDataResponse.
        :rtype: GetRegistryCatalogDataResponseRegistryCatalogData
        """
        return self._registry_catalog_data

    @registry_catalog_data.setter
    def registry_catalog_data(self, registry_catalog_data):
        """Sets the registry_catalog_data of this GetRegistryCatalogDataResponse.


        :param registry_catalog_data: The registry_catalog_data of this GetRegistryCatalogDataResponse.
        :type registry_catalog_data: GetRegistryCatalogDataResponseRegistryCatalogData
        """
        if registry_catalog_data is None:
            raise ValueError("Invalid value for `registry_catalog_data`, must not be `None`")

        self._registry_catalog_data = registry_catalog_data
