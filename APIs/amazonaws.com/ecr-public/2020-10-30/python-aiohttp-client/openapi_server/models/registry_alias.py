# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registry_alias_status import RegistryAliasStatus
from openapi_server import util


class RegistryAlias(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, status: RegistryAliasStatus=None, primary_registry_alias: bool=None, default_registry_alias: bool=None):
        """RegistryAlias - a model defined in OpenAPI

        :param name: The name of this RegistryAlias.
        :param status: The status of this RegistryAlias.
        :param primary_registry_alias: The primary_registry_alias of this RegistryAlias.
        :param default_registry_alias: The default_registry_alias of this RegistryAlias.
        """
        self.openapi_types = {
            'name': str,
            'status': RegistryAliasStatus,
            'primary_registry_alias': bool,
            'default_registry_alias': bool
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'primary_registry_alias': 'primaryRegistryAlias',
            'default_registry_alias': 'defaultRegistryAlias'
        }

        self._name = name
        self._status = status
        self._primary_registry_alias = primary_registry_alias
        self._default_registry_alias = default_registry_alias

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistryAlias':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistryAlias of this RegistryAlias.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RegistryAlias.


        :return: The name of this RegistryAlias.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegistryAlias.


        :param name: The name of this RegistryAlias.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this RegistryAlias.


        :return: The status of this RegistryAlias.
        :rtype: RegistryAliasStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RegistryAlias.


        :param status: The status of this RegistryAlias.
        :type status: RegistryAliasStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def primary_registry_alias(self):
        """Gets the primary_registry_alias of this RegistryAlias.


        :return: The primary_registry_alias of this RegistryAlias.
        :rtype: bool
        """
        return self._primary_registry_alias

    @primary_registry_alias.setter
    def primary_registry_alias(self, primary_registry_alias):
        """Sets the primary_registry_alias of this RegistryAlias.


        :param primary_registry_alias: The primary_registry_alias of this RegistryAlias.
        :type primary_registry_alias: bool
        """
        if primary_registry_alias is None:
            raise ValueError("Invalid value for `primary_registry_alias`, must not be `None`")

        self._primary_registry_alias = primary_registry_alias

    @property
    def default_registry_alias(self):
        """Gets the default_registry_alias of this RegistryAlias.


        :return: The default_registry_alias of this RegistryAlias.
        :rtype: bool
        """
        return self._default_registry_alias

    @default_registry_alias.setter
    def default_registry_alias(self, default_registry_alias):
        """Sets the default_registry_alias of this RegistryAlias.


        :param default_registry_alias: The default_registry_alias of this RegistryAlias.
        :type default_registry_alias: bool
        """
        if default_registry_alias is None:
            raise ValueError("Invalid value for `default_registry_alias`, must not be `None`")

        self._default_registry_alias = default_registry_alias
