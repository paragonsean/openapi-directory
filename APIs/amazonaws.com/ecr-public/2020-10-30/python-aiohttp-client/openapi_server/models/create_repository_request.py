# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_repository_request_catalog_data import CreateRepositoryRequestCatalogData
from openapi_server import util


class CreateRepositoryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_name: str=None, catalog_data: CreateRepositoryRequestCatalogData=None, tags: List=None):
        """CreateRepositoryRequest - a model defined in OpenAPI

        :param repository_name: The repository_name of this CreateRepositoryRequest.
        :param catalog_data: The catalog_data of this CreateRepositoryRequest.
        :param tags: The tags of this CreateRepositoryRequest.
        """
        self.openapi_types = {
            'repository_name': str,
            'catalog_data': CreateRepositoryRequestCatalogData,
            'tags': List
        }

        self.attribute_map = {
            'repository_name': 'repositoryName',
            'catalog_data': 'catalogData',
            'tags': 'tags'
        }

        self._repository_name = repository_name
        self._catalog_data = catalog_data
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRepositoryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRepositoryRequest of this CreateRepositoryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_name(self):
        """Gets the repository_name of this CreateRepositoryRequest.


        :return: The repository_name of this CreateRepositoryRequest.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name):
        """Sets the repository_name of this CreateRepositoryRequest.


        :param repository_name: The repository_name of this CreateRepositoryRequest.
        :type repository_name: str
        """
        if repository_name is None:
            raise ValueError("Invalid value for `repository_name`, must not be `None`")

        self._repository_name = repository_name

    @property
    def catalog_data(self):
        """Gets the catalog_data of this CreateRepositoryRequest.


        :return: The catalog_data of this CreateRepositoryRequest.
        :rtype: CreateRepositoryRequestCatalogData
        """
        return self._catalog_data

    @catalog_data.setter
    def catalog_data(self, catalog_data):
        """Sets the catalog_data of this CreateRepositoryRequest.


        :param catalog_data: The catalog_data of this CreateRepositoryRequest.
        :type catalog_data: CreateRepositoryRequestCatalogData
        """

        self._catalog_data = catalog_data

    @property
    def tags(self):
        """Gets the tags of this CreateRepositoryRequest.


        :return: The tags of this CreateRepositoryRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRepositoryRequest.


        :param tags: The tags of this CreateRepositoryRequest.
        :type tags: List
        """

        self._tags = tags
