# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Registry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, registry_id: str=None, registry_arn: str=None, registry_uri: str=None, verified: bool=None, aliases: List=None):
        """Registry - a model defined in OpenAPI

        :param registry_id: The registry_id of this Registry.
        :param registry_arn: The registry_arn of this Registry.
        :param registry_uri: The registry_uri of this Registry.
        :param verified: The verified of this Registry.
        :param aliases: The aliases of this Registry.
        """
        self.openapi_types = {
            'registry_id': str,
            'registry_arn': str,
            'registry_uri': str,
            'verified': bool,
            'aliases': List
        }

        self.attribute_map = {
            'registry_id': 'registryId',
            'registry_arn': 'registryArn',
            'registry_uri': 'registryUri',
            'verified': 'verified',
            'aliases': 'aliases'
        }

        self._registry_id = registry_id
        self._registry_arn = registry_arn
        self._registry_uri = registry_uri
        self._verified = verified
        self._aliases = aliases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Registry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Registry of this Registry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def registry_id(self):
        """Gets the registry_id of this Registry.


        :return: The registry_id of this Registry.
        :rtype: str
        """
        return self._registry_id

    @registry_id.setter
    def registry_id(self, registry_id):
        """Sets the registry_id of this Registry.


        :param registry_id: The registry_id of this Registry.
        :type registry_id: str
        """
        if registry_id is None:
            raise ValueError("Invalid value for `registry_id`, must not be `None`")

        self._registry_id = registry_id

    @property
    def registry_arn(self):
        """Gets the registry_arn of this Registry.


        :return: The registry_arn of this Registry.
        :rtype: str
        """
        return self._registry_arn

    @registry_arn.setter
    def registry_arn(self, registry_arn):
        """Sets the registry_arn of this Registry.


        :param registry_arn: The registry_arn of this Registry.
        :type registry_arn: str
        """
        if registry_arn is None:
            raise ValueError("Invalid value for `registry_arn`, must not be `None`")

        self._registry_arn = registry_arn

    @property
    def registry_uri(self):
        """Gets the registry_uri of this Registry.


        :return: The registry_uri of this Registry.
        :rtype: str
        """
        return self._registry_uri

    @registry_uri.setter
    def registry_uri(self, registry_uri):
        """Sets the registry_uri of this Registry.


        :param registry_uri: The registry_uri of this Registry.
        :type registry_uri: str
        """
        if registry_uri is None:
            raise ValueError("Invalid value for `registry_uri`, must not be `None`")

        self._registry_uri = registry_uri

    @property
    def verified(self):
        """Gets the verified of this Registry.


        :return: The verified of this Registry.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Registry.


        :param verified: The verified of this Registry.
        :type verified: bool
        """
        if verified is None:
            raise ValueError("Invalid value for `verified`, must not be `None`")

        self._verified = verified

    @property
    def aliases(self):
        """Gets the aliases of this Registry.


        :return: The aliases of this Registry.
        :rtype: List
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this Registry.


        :param aliases: The aliases of this Registry.
        :type aliases: List
        """
        if aliases is None:
            raise ValueError("Invalid value for `aliases`, must not be `None`")

        self._aliases = aliases
