# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutRepositoryCatalogDataResponseCatalogData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, architectures: List=None, operating_systems: List=None, logo_url: str=None, about_text: str=None, usage_text: str=None, marketplace_certified: bool=None):
        """PutRepositoryCatalogDataResponseCatalogData - a model defined in OpenAPI

        :param description: The description of this PutRepositoryCatalogDataResponseCatalogData.
        :param architectures: The architectures of this PutRepositoryCatalogDataResponseCatalogData.
        :param operating_systems: The operating_systems of this PutRepositoryCatalogDataResponseCatalogData.
        :param logo_url: The logo_url of this PutRepositoryCatalogDataResponseCatalogData.
        :param about_text: The about_text of this PutRepositoryCatalogDataResponseCatalogData.
        :param usage_text: The usage_text of this PutRepositoryCatalogDataResponseCatalogData.
        :param marketplace_certified: The marketplace_certified of this PutRepositoryCatalogDataResponseCatalogData.
        """
        self.openapi_types = {
            'description': str,
            'architectures': List,
            'operating_systems': List,
            'logo_url': str,
            'about_text': str,
            'usage_text': str,
            'marketplace_certified': bool
        }

        self.attribute_map = {
            'description': 'description',
            'architectures': 'architectures',
            'operating_systems': 'operatingSystems',
            'logo_url': 'logoUrl',
            'about_text': 'aboutText',
            'usage_text': 'usageText',
            'marketplace_certified': 'marketplaceCertified'
        }

        self._description = description
        self._architectures = architectures
        self._operating_systems = operating_systems
        self._logo_url = logo_url
        self._about_text = about_text
        self._usage_text = usage_text
        self._marketplace_certified = marketplace_certified

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRepositoryCatalogDataResponseCatalogData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRepositoryCatalogDataResponse_catalogData of this PutRepositoryCatalogDataResponseCatalogData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The description of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutRepositoryCatalogDataResponseCatalogData.


        :param description: The description of this PutRepositoryCatalogDataResponseCatalogData.
        :type description: str
        """

        self._description = description

    @property
    def architectures(self):
        """Gets the architectures of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The architectures of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: List
        """
        return self._architectures

    @architectures.setter
    def architectures(self, architectures):
        """Sets the architectures of this PutRepositoryCatalogDataResponseCatalogData.


        :param architectures: The architectures of this PutRepositoryCatalogDataResponseCatalogData.
        :type architectures: List
        """

        self._architectures = architectures

    @property
    def operating_systems(self):
        """Gets the operating_systems of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The operating_systems of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: List
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this PutRepositoryCatalogDataResponseCatalogData.


        :param operating_systems: The operating_systems of this PutRepositoryCatalogDataResponseCatalogData.
        :type operating_systems: List
        """

        self._operating_systems = operating_systems

    @property
    def logo_url(self):
        """Gets the logo_url of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The logo_url of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PutRepositoryCatalogDataResponseCatalogData.


        :param logo_url: The logo_url of this PutRepositoryCatalogDataResponseCatalogData.
        :type logo_url: str
        """

        self._logo_url = logo_url

    @property
    def about_text(self):
        """Gets the about_text of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The about_text of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: str
        """
        return self._about_text

    @about_text.setter
    def about_text(self, about_text):
        """Sets the about_text of this PutRepositoryCatalogDataResponseCatalogData.


        :param about_text: The about_text of this PutRepositoryCatalogDataResponseCatalogData.
        :type about_text: str
        """

        self._about_text = about_text

    @property
    def usage_text(self):
        """Gets the usage_text of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The usage_text of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: str
        """
        return self._usage_text

    @usage_text.setter
    def usage_text(self, usage_text):
        """Sets the usage_text of this PutRepositoryCatalogDataResponseCatalogData.


        :param usage_text: The usage_text of this PutRepositoryCatalogDataResponseCatalogData.
        :type usage_text: str
        """

        self._usage_text = usage_text

    @property
    def marketplace_certified(self):
        """Gets the marketplace_certified of this PutRepositoryCatalogDataResponseCatalogData.


        :return: The marketplace_certified of this PutRepositoryCatalogDataResponseCatalogData.
        :rtype: bool
        """
        return self._marketplace_certified

    @marketplace_certified.setter
    def marketplace_certified(self, marketplace_certified):
        """Sets the marketplace_certified of this PutRepositoryCatalogDataResponseCatalogData.


        :param marketplace_certified: The marketplace_certified of this PutRepositoryCatalogDataResponseCatalogData.
        :type marketplace_certified: bool
        """

        self._marketplace_certified = marketplace_certified
