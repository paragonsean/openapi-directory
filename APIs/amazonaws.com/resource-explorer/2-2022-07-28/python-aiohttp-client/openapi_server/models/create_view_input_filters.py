# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateViewInputFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_string: str=None):
        """CreateViewInputFilters - a model defined in OpenAPI

        :param filter_string: The filter_string of this CreateViewInputFilters.
        """
        self.openapi_types = {
            'filter_string': str
        }

        self.attribute_map = {
            'filter_string': 'FilterString'
        }

        self._filter_string = filter_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateViewInputFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateViewInput_Filters of this CreateViewInputFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_string(self):
        """Gets the filter_string of this CreateViewInputFilters.


        :return: The filter_string of this CreateViewInputFilters.
        :rtype: str
        """
        return self._filter_string

    @filter_string.setter
    def filter_string(self, filter_string):
        """Sets the filter_string of this CreateViewInputFilters.


        :param filter_string: The filter_string of this CreateViewInputFilters.
        :type filter_string: str
        """
        if filter_string is None:
            raise ValueError("Invalid value for `filter_string`, must not be `None`")

        self._filter_string = filter_string
