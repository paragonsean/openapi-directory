# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_view_input_filters import CreateViewInputFilters
from openapi_server import util


class CreateViewInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, filters: CreateViewInputFilters=None, included_properties: List=None, tags: Dict=None, view_name: str=None):
        """CreateViewInput - a model defined in OpenAPI

        :param client_token: The client_token of this CreateViewInput.
        :param filters: The filters of this CreateViewInput.
        :param included_properties: The included_properties of this CreateViewInput.
        :param tags: The tags of this CreateViewInput.
        :param view_name: The view_name of this CreateViewInput.
        """
        self.openapi_types = {
            'client_token': str,
            'filters': CreateViewInputFilters,
            'included_properties': List,
            'tags': Dict,
            'view_name': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'filters': 'Filters',
            'included_properties': 'IncludedProperties',
            'tags': 'Tags',
            'view_name': 'ViewName'
        }

        self._client_token = client_token
        self._filters = filters
        self._included_properties = included_properties
        self._tags = tags
        self._view_name = view_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateViewInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateViewInput of this CreateViewInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateViewInput.


        :return: The client_token of this CreateViewInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateViewInput.


        :param client_token: The client_token of this CreateViewInput.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def filters(self):
        """Gets the filters of this CreateViewInput.


        :return: The filters of this CreateViewInput.
        :rtype: CreateViewInputFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CreateViewInput.


        :param filters: The filters of this CreateViewInput.
        :type filters: CreateViewInputFilters
        """

        self._filters = filters

    @property
    def included_properties(self):
        """Gets the included_properties of this CreateViewInput.


        :return: The included_properties of this CreateViewInput.
        :rtype: List
        """
        return self._included_properties

    @included_properties.setter
    def included_properties(self, included_properties):
        """Sets the included_properties of this CreateViewInput.


        :param included_properties: The included_properties of this CreateViewInput.
        :type included_properties: List
        """

        self._included_properties = included_properties

    @property
    def tags(self):
        """Gets the tags of this CreateViewInput.


        :return: The tags of this CreateViewInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateViewInput.


        :param tags: The tags of this CreateViewInput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def view_name(self):
        """Gets the view_name of this CreateViewInput.


        :return: The view_name of this CreateViewInput.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this CreateViewInput.


        :param view_name: The view_name of this CreateViewInput.
        :type view_name: str
        """
        if view_name is None:
            raise ValueError("Invalid value for `view_name`, must not be `None`")

        self._view_name = view_name
