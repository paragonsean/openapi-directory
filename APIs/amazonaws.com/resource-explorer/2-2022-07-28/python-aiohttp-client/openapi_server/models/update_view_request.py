# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_view_request_filters import CreateViewRequestFilters
from openapi_server.models.included_property import IncludedProperty
from openapi_server import util


class UpdateViewRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: CreateViewRequestFilters=None, included_properties: List[IncludedProperty]=None, view_arn: str=None):
        """UpdateViewRequest - a model defined in OpenAPI

        :param filters: The filters of this UpdateViewRequest.
        :param included_properties: The included_properties of this UpdateViewRequest.
        :param view_arn: The view_arn of this UpdateViewRequest.
        """
        self.openapi_types = {
            'filters': CreateViewRequestFilters,
            'included_properties': List[IncludedProperty],
            'view_arn': str
        }

        self.attribute_map = {
            'filters': 'Filters',
            'included_properties': 'IncludedProperties',
            'view_arn': 'ViewArn'
        }

        self._filters = filters
        self._included_properties = included_properties
        self._view_arn = view_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateViewRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateView_request of this UpdateViewRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this UpdateViewRequest.


        :return: The filters of this UpdateViewRequest.
        :rtype: CreateViewRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this UpdateViewRequest.


        :param filters: The filters of this UpdateViewRequest.
        :type filters: CreateViewRequestFilters
        """

        self._filters = filters

    @property
    def included_properties(self):
        """Gets the included_properties of this UpdateViewRequest.

        <p>Specifies optional fields that you want included in search results from this view. It is a list of objects that each describe a field to include.</p> <p>The default is an empty list, with no optional fields included in the results.</p>

        :return: The included_properties of this UpdateViewRequest.
        :rtype: List[IncludedProperty]
        """
        return self._included_properties

    @included_properties.setter
    def included_properties(self, included_properties):
        """Sets the included_properties of this UpdateViewRequest.

        <p>Specifies optional fields that you want included in search results from this view. It is a list of objects that each describe a field to include.</p> <p>The default is an empty list, with no optional fields included in the results.</p>

        :param included_properties: The included_properties of this UpdateViewRequest.
        :type included_properties: List[IncludedProperty]
        """

        self._included_properties = included_properties

    @property
    def view_arn(self):
        """Gets the view_arn of this UpdateViewRequest.

        The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon resource name (ARN)</a> of the view that you want to modify.

        :return: The view_arn of this UpdateViewRequest.
        :rtype: str
        """
        return self._view_arn

    @view_arn.setter
    def view_arn(self, view_arn):
        """Sets the view_arn of this UpdateViewRequest.

        The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon resource name (ARN)</a> of the view that you want to modify.

        :param view_arn: The view_arn of this UpdateViewRequest.
        :type view_arn: str
        """
        if view_arn is None:
            raise ValueError("Invalid value for `view_arn`, must not be `None`")
        if view_arn is not None and len(view_arn) > 1011:
            raise ValueError("Invalid value for `view_arn`, length must be less than or equal to `1011`")
        if view_arn is not None and len(view_arn) < 1:
            raise ValueError("Invalid value for `view_arn`, length must be greater than or equal to `1`")

        self._view_arn = view_arn
