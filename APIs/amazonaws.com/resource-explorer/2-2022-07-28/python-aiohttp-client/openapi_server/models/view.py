# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.view_filters import ViewFilters
from openapi_server import util


class View(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: ViewFilters=None, included_properties: List=None, last_updated_at: datetime=None, owner: str=None, scope: str=None, view_arn: str=None):
        """View - a model defined in OpenAPI

        :param filters: The filters of this View.
        :param included_properties: The included_properties of this View.
        :param last_updated_at: The last_updated_at of this View.
        :param owner: The owner of this View.
        :param scope: The scope of this View.
        :param view_arn: The view_arn of this View.
        """
        self.openapi_types = {
            'filters': ViewFilters,
            'included_properties': List,
            'last_updated_at': datetime,
            'owner': str,
            'scope': str,
            'view_arn': str
        }

        self.attribute_map = {
            'filters': 'Filters',
            'included_properties': 'IncludedProperties',
            'last_updated_at': 'LastUpdatedAt',
            'owner': 'Owner',
            'scope': 'Scope',
            'view_arn': 'ViewArn'
        }

        self._filters = filters
        self._included_properties = included_properties
        self._last_updated_at = last_updated_at
        self._owner = owner
        self._scope = scope
        self._view_arn = view_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'View':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The View of this View.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this View.


        :return: The filters of this View.
        :rtype: ViewFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this View.


        :param filters: The filters of this View.
        :type filters: ViewFilters
        """

        self._filters = filters

    @property
    def included_properties(self):
        """Gets the included_properties of this View.


        :return: The included_properties of this View.
        :rtype: List
        """
        return self._included_properties

    @included_properties.setter
    def included_properties(self, included_properties):
        """Sets the included_properties of this View.


        :param included_properties: The included_properties of this View.
        :type included_properties: List
        """

        self._included_properties = included_properties

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this View.


        :return: The last_updated_at of this View.
        :rtype: datetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this View.


        :param last_updated_at: The last_updated_at of this View.
        :type last_updated_at: datetime
        """

        self._last_updated_at = last_updated_at

    @property
    def owner(self):
        """Gets the owner of this View.


        :return: The owner of this View.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this View.


        :param owner: The owner of this View.
        :type owner: str
        """

        self._owner = owner

    @property
    def scope(self):
        """Gets the scope of this View.


        :return: The scope of this View.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this View.


        :param scope: The scope of this View.
        :type scope: str
        """

        self._scope = scope

    @property
    def view_arn(self):
        """Gets the view_arn of this View.


        :return: The view_arn of this View.
        :rtype: str
        """
        return self._view_arn

    @view_arn.setter
    def view_arn(self, view_arn):
        """Sets the view_arn of this View.


        :param view_arn: The view_arn of this View.
        :type view_arn: str
        """

        self._view_arn = view_arn
