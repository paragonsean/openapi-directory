# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_view_request_filters import CreateViewRequestFilters
from openapi_server.models.included_property import IncludedProperty
import re
from openapi_server import util


class CreateViewRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, filters: CreateViewRequestFilters=None, included_properties: List[IncludedProperty]=None, tags: Dict[str, str]=None, view_name: str=None):
        """CreateViewRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateViewRequest.
        :param filters: The filters of this CreateViewRequest.
        :param included_properties: The included_properties of this CreateViewRequest.
        :param tags: The tags of this CreateViewRequest.
        :param view_name: The view_name of this CreateViewRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'filters': CreateViewRequestFilters,
            'included_properties': List[IncludedProperty],
            'tags': Dict[str, str],
            'view_name': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'filters': 'Filters',
            'included_properties': 'IncludedProperties',
            'tags': 'Tags',
            'view_name': 'ViewName'
        }

        self._client_token = client_token
        self._filters = filters
        self._included_properties = included_properties
        self._tags = tags
        self._view_name = view_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateViewRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateView_request of this CreateViewRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateViewRequest.

        This value helps ensure idempotency. Resource Explorer uses this value to prevent the accidental creation of duplicate versions. We recommend that you generate a <a href=\"https://wikipedia.org/wiki/Universally_unique_identifier\">UUID-type value</a> to ensure the uniqueness of your views.

        :return: The client_token of this CreateViewRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateViewRequest.

        This value helps ensure idempotency. Resource Explorer uses this value to prevent the accidental creation of duplicate versions. We recommend that you generate a <a href=\"https://wikipedia.org/wiki/Universally_unique_identifier\">UUID-type value</a> to ensure the uniqueness of your views.

        :param client_token: The client_token of this CreateViewRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 2048:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `2048`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def filters(self):
        """Gets the filters of this CreateViewRequest.


        :return: The filters of this CreateViewRequest.
        :rtype: CreateViewRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CreateViewRequest.


        :param filters: The filters of this CreateViewRequest.
        :type filters: CreateViewRequestFilters
        """

        self._filters = filters

    @property
    def included_properties(self):
        """Gets the included_properties of this CreateViewRequest.

        <p>Specifies optional fields that you want included in search results from this view. It is a list of objects that each describe a field to include.</p> <p>The default is an empty list, with no optional fields included in the results.</p>

        :return: The included_properties of this CreateViewRequest.
        :rtype: List[IncludedProperty]
        """
        return self._included_properties

    @included_properties.setter
    def included_properties(self, included_properties):
        """Sets the included_properties of this CreateViewRequest.

        <p>Specifies optional fields that you want included in search results from this view. It is a list of objects that each describe a field to include.</p> <p>The default is an empty list, with no optional fields included in the results.</p>

        :param included_properties: The included_properties of this CreateViewRequest.
        :type included_properties: List[IncludedProperty]
        """

        self._included_properties = included_properties

    @property
    def tags(self):
        """Gets the tags of this CreateViewRequest.

        Tag key and value pairs that are attached to the view.

        :return: The tags of this CreateViewRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateViewRequest.

        Tag key and value pairs that are attached to the view.

        :param tags: The tags of this CreateViewRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def view_name(self):
        """Gets the view_name of this CreateViewRequest.

        <p>The name of the new view. This name appears in the list of views in Resource Explorer.</p> <p>The name must be no more than 64 characters long, and can include letters, digits, and the dash (-) character. The name must be unique within its Amazon Web Services Region.</p>

        :return: The view_name of this CreateViewRequest.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this CreateViewRequest.

        <p>The name of the new view. This name appears in the list of views in Resource Explorer.</p> <p>The name must be no more than 64 characters long, and can include letters, digits, and the dash (-) character. The name must be unique within its Amazon Web Services Region.</p>

        :param view_name: The view_name of this CreateViewRequest.
        :type view_name: str
        """
        if view_name is None:
            raise ValueError("Invalid value for `view_name`, must not be `None`")
        if view_name is not None and not re.search(r'^[a-zA-Z0-9\-]{1,64}$', view_name):
            raise ValueError("Invalid value for `view_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9\-]{1,64}$/`")

        self._view_name = view_name
