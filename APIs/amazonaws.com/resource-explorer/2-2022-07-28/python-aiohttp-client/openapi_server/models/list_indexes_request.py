# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListIndexesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, next_token: str=None, regions: List[str]=None, type: str=None):
        """ListIndexesRequest - a model defined in OpenAPI

        :param max_results: The max_results of this ListIndexesRequest.
        :param next_token: The next_token of this ListIndexesRequest.
        :param regions: The regions of this ListIndexesRequest.
        :param type: The type of this ListIndexesRequest.
        """
        self.openapi_types = {
            'max_results': int,
            'next_token': str,
            'regions': List[str],
            'type': str
        }

        self.attribute_map = {
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'regions': 'Regions',
            'type': 'Type'
        }

        self._max_results = max_results
        self._next_token = next_token
        self._regions = regions
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListIndexesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListIndexes_request of this ListIndexesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this ListIndexesRequest.

        <p>The maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note> <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p> </note>

        :return: The max_results of this ListIndexesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListIndexesRequest.

        <p>The maximum number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value appropriate to the operation. If additional items exist beyond those included in the current response, the <code>NextToken</code> response element is present and has a value (is not null). Include that value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results.</p> <note> <p>An API operation can return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p> </note>

        :param max_results: The max_results of this ListIndexesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListIndexesRequest.

        The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.

        :return: The next_token of this ListIndexesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListIndexesRequest.

        The parameter for receiving additional results if you receive a <code>NextToken</code> response in a previous request. A <code>NextToken</code> response indicates that more output is available. Set this parameter to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from.

        :param next_token: The next_token of this ListIndexesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def regions(self):
        """Gets the regions of this ListIndexesRequest.

        If specified, limits the response to only information about the index in the specified list of Amazon Web Services Regions.

        :return: The regions of this ListIndexesRequest.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this ListIndexesRequest.

        If specified, limits the response to only information about the index in the specified list of Amazon Web Services Regions.

        :param regions: The regions of this ListIndexesRequest.
        :type regions: List[str]
        """
        if regions is not None and len(regions) > 20:
            raise ValueError("Invalid value for `regions`, number of items must be less than or equal to `20`")
        if regions is not None and len(regions) < 0:
            raise ValueError("Invalid value for `regions`, number of items must be greater than or equal to `0`")

        self._regions = regions

    @property
    def type(self):
        """Gets the type of this ListIndexesRequest.

        <p>If specified, limits the output to only indexes of the specified Type, either <code>LOCAL</code> or <code>AGGREGATOR</code>.</p> <p>Use this option to discover the aggregator index for your account.</p>

        :return: The type of this ListIndexesRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ListIndexesRequest.

        <p>If specified, limits the output to only indexes of the specified Type, either <code>LOCAL</code> or <code>AGGREGATOR</code>.</p> <p>Use this option to discover the aggregator index for your account.</p>

        :param type: The type of this ListIndexesRequest.
        :type type: str
        """
        allowed_values = ["LOCAL", "AGGREGATOR"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
