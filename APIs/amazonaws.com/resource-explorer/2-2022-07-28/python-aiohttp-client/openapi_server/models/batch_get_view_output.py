# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetViewOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List=None, views: List=None):
        """BatchGetViewOutput - a model defined in OpenAPI

        :param errors: The errors of this BatchGetViewOutput.
        :param views: The views of this BatchGetViewOutput.
        """
        self.openapi_types = {
            'errors': List,
            'views': List
        }

        self.attribute_map = {
            'errors': 'Errors',
            'views': 'Views'
        }

        self._errors = errors
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetViewOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetViewOutput of this BatchGetViewOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this BatchGetViewOutput.


        :return: The errors of this BatchGetViewOutput.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchGetViewOutput.


        :param errors: The errors of this BatchGetViewOutput.
        :type errors: List
        """

        self._errors = errors

    @property
    def views(self):
        """Gets the views of this BatchGetViewOutput.


        :return: The views of this BatchGetViewOutput.
        :rtype: List
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this BatchGetViewOutput.


        :param views: The views of this BatchGetViewOutput.
        :type views: List
        """

        self._views = views
