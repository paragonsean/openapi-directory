# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_output_count import SearchOutputCount
from openapi_server import util


class SearchOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: SearchOutputCount=None, next_token: str=None, resources: List=None, view_arn: str=None):
        """SearchOutput - a model defined in OpenAPI

        :param count: The count of this SearchOutput.
        :param next_token: The next_token of this SearchOutput.
        :param resources: The resources of this SearchOutput.
        :param view_arn: The view_arn of this SearchOutput.
        """
        self.openapi_types = {
            'count': SearchOutputCount,
            'next_token': str,
            'resources': List,
            'view_arn': str
        }

        self.attribute_map = {
            'count': 'Count',
            'next_token': 'NextToken',
            'resources': 'Resources',
            'view_arn': 'ViewArn'
        }

        self._count = count
        self._next_token = next_token
        self._resources = resources
        self._view_arn = view_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchOutput of this SearchOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SearchOutput.


        :return: The count of this SearchOutput.
        :rtype: SearchOutputCount
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SearchOutput.


        :param count: The count of this SearchOutput.
        :type count: SearchOutputCount
        """

        self._count = count

    @property
    def next_token(self):
        """Gets the next_token of this SearchOutput.


        :return: The next_token of this SearchOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this SearchOutput.


        :param next_token: The next_token of this SearchOutput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def resources(self):
        """Gets the resources of this SearchOutput.


        :return: The resources of this SearchOutput.
        :rtype: List
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this SearchOutput.


        :param resources: The resources of this SearchOutput.
        :type resources: List
        """

        self._resources = resources

    @property
    def view_arn(self):
        """Gets the view_arn of this SearchOutput.


        :return: The view_arn of this SearchOutput.
        :rtype: str
        """
        return self._view_arn

    @view_arn.setter
    def view_arn(self, view_arn):
        """Sets the view_arn of this SearchOutput.


        :param view_arn: The view_arn of this SearchOutput.
        :type view_arn: str
        """

        self._view_arn = view_arn
