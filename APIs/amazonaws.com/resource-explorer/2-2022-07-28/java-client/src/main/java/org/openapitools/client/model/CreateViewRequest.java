/*
 * AWS Resource Explorer
 * <p>Amazon Web Services Resource Explorer is a resource search and discovery service. By using Resource Explorer, you can explore your resources using an internet search engine-like experience. Examples of resources include Amazon Relational Database Service (Amazon RDS) instances, Amazon Simple Storage Service (Amazon S3) buckets, or Amazon DynamoDB tables. You can search for your resources using resource metadata like names, tags, and IDs. Resource Explorer can search across all of the Amazon Web Services Regions in your account in which you turn the service on, to simplify your cross-Region workloads.</p> <p>Resource Explorer scans the resources in each of the Amazon Web Services Regions in your Amazon Web Services account in which you turn on Resource Explorer. Resource Explorer <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/getting-started-terms-and-concepts.html#term-index\">creates and maintains an index</a> in each Region, with the details of that Region's resources.</p> <p>You can <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/manage-aggregator-region.html\">search across all of the indexed Regions in your account</a> by designating one of your Amazon Web Services Regions to contain the aggregator index for the account. When you <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/manage-aggregator-region-turn-on.html\">promote a local index in a Region to become the aggregator index for the account</a>, Resource Explorer automatically replicates the index information from all local indexes in the other Regions to the aggregator index. Therefore, the Region with the aggregator index has a copy of all resource information for all Regions in the account where you turned on Resource Explorer. As a result, views in the aggregator index Region include resources from all of the indexed Regions in your account.</p> <p>For more information about Amazon Web Services Resource Explorer, including how to enable and configure the service, see the <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/\">Amazon Web Services Resource Explorer User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-07-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateViewRequestFilters;
import org.openapitools.client.model.IncludedProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateViewRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:09.037248-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateViewRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private CreateViewRequestFilters filters;

  public static final String SERIALIZED_NAME_INCLUDED_PROPERTIES = "IncludedProperties";
  @SerializedName(SERIALIZED_NAME_INCLUDED_PROPERTIES)
  private List<IncludedProperty> includedProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VIEW_NAME = "ViewName";
  @SerializedName(SERIALIZED_NAME_VIEW_NAME)
  private String viewName;

  public CreateViewRequest() {
  }

  public CreateViewRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * This value helps ensure idempotency. Resource Explorer uses this value to prevent the accidental creation of duplicate versions. We recommend that you generate a &lt;a href&#x3D;\&quot;https://wikipedia.org/wiki/Universally_unique_identifier\&quot;&gt;UUID-type value&lt;/a&gt; to ensure the uniqueness of your views.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateViewRequest filters(CreateViewRequestFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public CreateViewRequestFilters getFilters() {
    return filters;
  }

  public void setFilters(CreateViewRequestFilters filters) {
    this.filters = filters;
  }


  public CreateViewRequest includedProperties(List<IncludedProperty> includedProperties) {
    this.includedProperties = includedProperties;
    return this;
  }

  public CreateViewRequest addIncludedPropertiesItem(IncludedProperty includedPropertiesItem) {
    if (this.includedProperties == null) {
      this.includedProperties = new ArrayList<>();
    }
    this.includedProperties.add(includedPropertiesItem);
    return this;
  }

  /**
   * &lt;p&gt;Specifies optional fields that you want included in search results from this view. It is a list of objects that each describe a field to include.&lt;/p&gt; &lt;p&gt;The default is an empty list, with no optional fields included in the results.&lt;/p&gt;
   * @return includedProperties
   */
  @javax.annotation.Nullable
  public List<IncludedProperty> getIncludedProperties() {
    return includedProperties;
  }

  public void setIncludedProperties(List<IncludedProperty> includedProperties) {
    this.includedProperties = includedProperties;
  }


  public CreateViewRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateViewRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Tag key and value pairs that are attached to the view.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateViewRequest viewName(String viewName) {
    this.viewName = viewName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the new view. This name appears in the list of views in Resource Explorer.&lt;/p&gt; &lt;p&gt;The name must be no more than 64 characters long, and can include letters, digits, and the dash (-) character. The name must be unique within its Amazon Web Services Region.&lt;/p&gt;
   * @return viewName
   */
  @javax.annotation.Nonnull
  public String getViewName() {
    return viewName;
  }

  public void setViewName(String viewName) {
    this.viewName = viewName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateViewRequest createViewRequest = (CreateViewRequest) o;
    return Objects.equals(this.clientToken, createViewRequest.clientToken) &&
        Objects.equals(this.filters, createViewRequest.filters) &&
        Objects.equals(this.includedProperties, createViewRequest.includedProperties) &&
        Objects.equals(this.tags, createViewRequest.tags) &&
        Objects.equals(this.viewName, createViewRequest.viewName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, filters, includedProperties, tags, viewName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateViewRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    includedProperties: ").append(toIndentedString(includedProperties)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    viewName: ").append(toIndentedString(viewName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("Filters");
    openapiFields.add("IncludedProperties");
    openapiFields.add("Tags");
    openapiFields.add("ViewName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ViewName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateViewRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateViewRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateViewRequest is not found in the empty JSON string", CreateViewRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateViewRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateViewRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateViewRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      // validate the optional field `Filters`
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull()) {
        CreateViewRequestFilters.validateJsonElement(jsonObj.get("Filters"));
      }
      if (jsonObj.get("IncludedProperties") != null && !jsonObj.get("IncludedProperties").isJsonNull()) {
        JsonArray jsonArrayincludedProperties = jsonObj.getAsJsonArray("IncludedProperties");
        if (jsonArrayincludedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("IncludedProperties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `IncludedProperties` to be an array in the JSON string but got `%s`", jsonObj.get("IncludedProperties").toString()));
          }

          // validate the optional field `IncludedProperties` (array)
          for (int i = 0; i < jsonArrayincludedProperties.size(); i++) {
            IncludedProperty.validateJsonElement(jsonArrayincludedProperties.get(i));
          };
        }
      }
      if (!jsonObj.get("ViewName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ViewName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ViewName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateViewRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateViewRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateViewRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateViewRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateViewRequest>() {
           @Override
           public void write(JsonWriter out, CreateViewRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateViewRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateViewRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateViewRequest
   * @throws IOException if the JSON string is invalid with respect to CreateViewRequest
   */
  public static CreateViewRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateViewRequest.class);
  }

  /**
   * Convert an instance of CreateViewRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

