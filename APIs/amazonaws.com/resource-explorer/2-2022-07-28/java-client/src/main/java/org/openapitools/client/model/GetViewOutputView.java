/*
 * AWS Resource Explorer
 * <p>Amazon Web Services Resource Explorer is a resource search and discovery service. By using Resource Explorer, you can explore your resources using an internet search engine-like experience. Examples of resources include Amazon Relational Database Service (Amazon RDS) instances, Amazon Simple Storage Service (Amazon S3) buckets, or Amazon DynamoDB tables. You can search for your resources using resource metadata like names, tags, and IDs. Resource Explorer can search across all of the Amazon Web Services Regions in your account in which you turn the service on, to simplify your cross-Region workloads.</p> <p>Resource Explorer scans the resources in each of the Amazon Web Services Regions in your Amazon Web Services account in which you turn on Resource Explorer. Resource Explorer <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/getting-started-terms-and-concepts.html#term-index\">creates and maintains an index</a> in each Region, with the details of that Region's resources.</p> <p>You can <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/manage-aggregator-region.html\">search across all of the indexed Regions in your account</a> by designating one of your Amazon Web Services Regions to contain the aggregator index for the account. When you <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/manage-aggregator-region-turn-on.html\">promote a local index in a Region to become the aggregator index for the account</a>, Resource Explorer automatically replicates the index information from all local indexes in the other Regions to the aggregator index. Therefore, the Region with the aggregator index has a copy of all resource information for all Regions in the account where you turned on Resource Explorer. As a result, views in the aggregator index Region include resources from all of the indexed Regions in your account.</p> <p>For more information about Amazon Web Services Resource Explorer, including how to enable and configure the service, see the <a href=\"https://docs.aws.amazon.com/resource-explorer/latest/userguide/\">Amazon Web Services Resource Explorer User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-07-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ViewFilters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetViewOutputView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:09.037248-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetViewOutputView {
  public static final String SERIALIZED_NAME_FILTERS = "Filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private ViewFilters filters;

  public static final String SERIALIZED_NAME_INCLUDED_PROPERTIES = "IncludedProperties";
  @SerializedName(SERIALIZED_NAME_INCLUDED_PROPERTIES)
  private List includedProperties;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_SCOPE = "Scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_VIEW_ARN = "ViewArn";
  @SerializedName(SERIALIZED_NAME_VIEW_ARN)
  private String viewArn;

  public GetViewOutputView() {
  }

  public GetViewOutputView filters(ViewFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public ViewFilters getFilters() {
    return filters;
  }

  public void setFilters(ViewFilters filters) {
    this.filters = filters;
  }


  public GetViewOutputView includedProperties(List includedProperties) {
    this.includedProperties = includedProperties;
    return this;
  }

  /**
   * Get includedProperties
   * @return includedProperties
   */
  @javax.annotation.Nullable
  public List getIncludedProperties() {
    return includedProperties;
  }

  public void setIncludedProperties(List includedProperties) {
    this.includedProperties = includedProperties;
  }


  public GetViewOutputView lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public GetViewOutputView owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public GetViewOutputView scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public GetViewOutputView viewArn(String viewArn) {
    this.viewArn = viewArn;
    return this;
  }

  /**
   * Get viewArn
   * @return viewArn
   */
  @javax.annotation.Nullable
  public String getViewArn() {
    return viewArn;
  }

  public void setViewArn(String viewArn) {
    this.viewArn = viewArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetViewOutputView getViewOutputView = (GetViewOutputView) o;
    return Objects.equals(this.filters, getViewOutputView.filters) &&
        Objects.equals(this.includedProperties, getViewOutputView.includedProperties) &&
        Objects.equals(this.lastUpdatedAt, getViewOutputView.lastUpdatedAt) &&
        Objects.equals(this.owner, getViewOutputView.owner) &&
        Objects.equals(this.scope, getViewOutputView.scope) &&
        Objects.equals(this.viewArn, getViewOutputView.viewArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filters, includedProperties, lastUpdatedAt, owner, scope, viewArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetViewOutputView {\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    includedProperties: ").append(toIndentedString(includedProperties)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    viewArn: ").append(toIndentedString(viewArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Filters");
    openapiFields.add("IncludedProperties");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("Owner");
    openapiFields.add("Scope");
    openapiFields.add("ViewArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetViewOutputView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetViewOutputView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetViewOutputView is not found in the empty JSON string", GetViewOutputView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetViewOutputView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetViewOutputView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Filters`
      if (jsonObj.get("Filters") != null && !jsonObj.get("Filters").isJsonNull()) {
        ViewFilters.validateJsonElement(jsonObj.get("Filters"));
      }
      // validate the optional field `IncludedProperties`
      if (jsonObj.get("IncludedProperties") != null && !jsonObj.get("IncludedProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IncludedProperties"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `Owner`
      if (jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Owner"));
      }
      // validate the optional field `Scope`
      if (jsonObj.get("Scope") != null && !jsonObj.get("Scope").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Scope"));
      }
      // validate the optional field `ViewArn`
      if (jsonObj.get("ViewArn") != null && !jsonObj.get("ViewArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ViewArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetViewOutputView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetViewOutputView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetViewOutputView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetViewOutputView.class));

       return (TypeAdapter<T>) new TypeAdapter<GetViewOutputView>() {
           @Override
           public void write(JsonWriter out, GetViewOutputView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetViewOutputView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetViewOutputView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetViewOutputView
   * @throws IOException if the JSON string is invalid with respect to GetViewOutputView
   */
  public static GetViewOutputView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetViewOutputView.class);
  }

  /**
   * Convert an instance of GetViewOutputView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

