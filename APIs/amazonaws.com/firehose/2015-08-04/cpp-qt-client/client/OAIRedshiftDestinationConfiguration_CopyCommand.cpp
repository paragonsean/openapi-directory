/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftDestinationConfiguration_CopyCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftDestinationConfiguration_CopyCommand::OAIRedshiftDestinationConfiguration_CopyCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftDestinationConfiguration_CopyCommand::OAIRedshiftDestinationConfiguration_CopyCommand() {
    this->initializeModel();
}

OAIRedshiftDestinationConfiguration_CopyCommand::~OAIRedshiftDestinationConfiguration_CopyCommand() {}

void OAIRedshiftDestinationConfiguration_CopyCommand::initializeModel() {

    m_data_table_name_isSet = false;
    m_data_table_name_isValid = false;

    m_data_table_columns_isSet = false;
    m_data_table_columns_isValid = false;

    m_copy_options_isSet = false;
    m_copy_options_isValid = false;
}

void OAIRedshiftDestinationConfiguration_CopyCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftDestinationConfiguration_CopyCommand::fromJsonObject(QJsonObject json) {

    m_data_table_name_isValid = ::OpenAPI::fromJsonValue(m_data_table_name, json[QString("DataTableName")]);
    m_data_table_name_isSet = !json[QString("DataTableName")].isNull() && m_data_table_name_isValid;

    m_data_table_columns_isValid = ::OpenAPI::fromJsonValue(m_data_table_columns, json[QString("DataTableColumns")]);
    m_data_table_columns_isSet = !json[QString("DataTableColumns")].isNull() && m_data_table_columns_isValid;

    m_copy_options_isValid = ::OpenAPI::fromJsonValue(m_copy_options, json[QString("CopyOptions")]);
    m_copy_options_isSet = !json[QString("CopyOptions")].isNull() && m_copy_options_isValid;
}

QString OAIRedshiftDestinationConfiguration_CopyCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftDestinationConfiguration_CopyCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_data_table_name_isSet) {
        obj.insert(QString("DataTableName"), ::OpenAPI::toJsonValue(m_data_table_name));
    }
    if (m_data_table_columns_isSet) {
        obj.insert(QString("DataTableColumns"), ::OpenAPI::toJsonValue(m_data_table_columns));
    }
    if (m_copy_options_isSet) {
        obj.insert(QString("CopyOptions"), ::OpenAPI::toJsonValue(m_copy_options));
    }
    return obj;
}

QString OAIRedshiftDestinationConfiguration_CopyCommand::getDataTableName() const {
    return m_data_table_name;
}
void OAIRedshiftDestinationConfiguration_CopyCommand::setDataTableName(const QString &data_table_name) {
    m_data_table_name = data_table_name;
    m_data_table_name_isSet = true;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::is_data_table_name_Set() const{
    return m_data_table_name_isSet;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::is_data_table_name_Valid() const{
    return m_data_table_name_isValid;
}

QString OAIRedshiftDestinationConfiguration_CopyCommand::getDataTableColumns() const {
    return m_data_table_columns;
}
void OAIRedshiftDestinationConfiguration_CopyCommand::setDataTableColumns(const QString &data_table_columns) {
    m_data_table_columns = data_table_columns;
    m_data_table_columns_isSet = true;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::is_data_table_columns_Set() const{
    return m_data_table_columns_isSet;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::is_data_table_columns_Valid() const{
    return m_data_table_columns_isValid;
}

QString OAIRedshiftDestinationConfiguration_CopyCommand::getCopyOptions() const {
    return m_copy_options;
}
void OAIRedshiftDestinationConfiguration_CopyCommand::setCopyOptions(const QString &copy_options) {
    m_copy_options = copy_options;
    m_copy_options_isSet = true;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::is_copy_options_Set() const{
    return m_copy_options_isSet;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::is_copy_options_Valid() const{
    return m_copy_options_isValid;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_table_columns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_options_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftDestinationConfiguration_CopyCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_table_name_isValid && true;
}

} // namespace OpenAPI
