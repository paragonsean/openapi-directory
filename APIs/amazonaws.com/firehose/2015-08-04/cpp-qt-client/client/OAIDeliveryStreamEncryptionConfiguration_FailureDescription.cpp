/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryStreamEncryptionConfiguration_FailureDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryStreamEncryptionConfiguration_FailureDescription::OAIDeliveryStreamEncryptionConfiguration_FailureDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryStreamEncryptionConfiguration_FailureDescription::OAIDeliveryStreamEncryptionConfiguration_FailureDescription() {
    this->initializeModel();
}

OAIDeliveryStreamEncryptionConfiguration_FailureDescription::~OAIDeliveryStreamEncryptionConfiguration_FailureDescription() {}

void OAIDeliveryStreamEncryptionConfiguration_FailureDescription::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;
}

void OAIDeliveryStreamEncryptionConfiguration_FailureDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryStreamEncryptionConfiguration_FailureDescription::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;
}

QString OAIDeliveryStreamEncryptionConfiguration_FailureDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryStreamEncryptionConfiguration_FailureDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    return obj;
}

OAIDeliveryStreamFailureType OAIDeliveryStreamEncryptionConfiguration_FailureDescription::getType() const {
    return m_type;
}
void OAIDeliveryStreamEncryptionConfiguration_FailureDescription::setType(const OAIDeliveryStreamFailureType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeliveryStreamEncryptionConfiguration_FailureDescription::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeliveryStreamEncryptionConfiguration_FailureDescription::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDeliveryStreamEncryptionConfiguration_FailureDescription::getDetails() const {
    return m_details;
}
void OAIDeliveryStreamEncryptionConfiguration_FailureDescription::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIDeliveryStreamEncryptionConfiguration_FailureDescription::is_details_Set() const{
    return m_details_isSet;
}

bool OAIDeliveryStreamEncryptionConfiguration_FailureDescription::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIDeliveryStreamEncryptionConfiguration_FailureDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryStreamEncryptionConfiguration_FailureDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_details_isValid && true;
}

} // namespace OpenAPI
