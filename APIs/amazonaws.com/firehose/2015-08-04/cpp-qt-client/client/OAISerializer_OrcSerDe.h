/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISerializer_OrcSerDe.h
 *
 * 
 */

#ifndef OAISerializer_OrcSerDe_H
#define OAISerializer_OrcSerDe_H

#include <QJsonObject>

#include "OAIOrcCompression.h"
#include "OAIOrcFormatVersion.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISerializer_OrcSerDe : public OAIObject {
public:
    OAISerializer_OrcSerDe();
    OAISerializer_OrcSerDe(QString json);
    ~OAISerializer_OrcSerDe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getStripeSizeBytes() const;
    void setStripeSizeBytes(const qint32 &stripe_size_bytes);
    bool is_stripe_size_bytes_Set() const;
    bool is_stripe_size_bytes_Valid() const;

    qint32 getBlockSizeBytes() const;
    void setBlockSizeBytes(const qint32 &block_size_bytes);
    bool is_block_size_bytes_Set() const;
    bool is_block_size_bytes_Valid() const;

    qint32 getRowIndexStride() const;
    void setRowIndexStride(const qint32 &row_index_stride);
    bool is_row_index_stride_Set() const;
    bool is_row_index_stride_Valid() const;

    bool getEnablePadding() const;
    void setEnablePadding(const bool &enable_padding);
    bool is_enable_padding_Set() const;
    bool is_enable_padding_Valid() const;

    double getPaddingTolerance() const;
    void setPaddingTolerance(const double &padding_tolerance);
    bool is_padding_tolerance_Set() const;
    bool is_padding_tolerance_Valid() const;

    OAIOrcCompression getCompression() const;
    void setCompression(const OAIOrcCompression &compression);
    bool is_compression_Set() const;
    bool is_compression_Valid() const;

    QList getBloomFilterColumns() const;
    void setBloomFilterColumns(const QList &bloom_filter_columns);
    bool is_bloom_filter_columns_Set() const;
    bool is_bloom_filter_columns_Valid() const;

    double getBloomFilterFalsePositiveProbability() const;
    void setBloomFilterFalsePositiveProbability(const double &bloom_filter_false_positive_probability);
    bool is_bloom_filter_false_positive_probability_Set() const;
    bool is_bloom_filter_false_positive_probability_Valid() const;

    double getDictionaryKeyThreshold() const;
    void setDictionaryKeyThreshold(const double &dictionary_key_threshold);
    bool is_dictionary_key_threshold_Set() const;
    bool is_dictionary_key_threshold_Valid() const;

    OAIOrcFormatVersion getFormatVersion() const;
    void setFormatVersion(const OAIOrcFormatVersion &format_version);
    bool is_format_version_Set() const;
    bool is_format_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_stripe_size_bytes;
    bool m_stripe_size_bytes_isSet;
    bool m_stripe_size_bytes_isValid;

    qint32 m_block_size_bytes;
    bool m_block_size_bytes_isSet;
    bool m_block_size_bytes_isValid;

    qint32 m_row_index_stride;
    bool m_row_index_stride_isSet;
    bool m_row_index_stride_isValid;

    bool m_enable_padding;
    bool m_enable_padding_isSet;
    bool m_enable_padding_isValid;

    double m_padding_tolerance;
    bool m_padding_tolerance_isSet;
    bool m_padding_tolerance_isValid;

    OAIOrcCompression m_compression;
    bool m_compression_isSet;
    bool m_compression_isValid;

    QList m_bloom_filter_columns;
    bool m_bloom_filter_columns_isSet;
    bool m_bloom_filter_columns_isValid;

    double m_bloom_filter_false_positive_probability;
    bool m_bloom_filter_false_positive_probability_isSet;
    bool m_bloom_filter_false_positive_probability_isValid;

    double m_dictionary_key_threshold;
    bool m_dictionary_key_threshold_isSet;
    bool m_dictionary_key_threshold_isValid;

    OAIOrcFormatVersion m_format_version;
    bool m_format_version_isSet;
    bool m_format_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISerializer_OrcSerDe)

#endif // OAISerializer_OrcSerDe_H
