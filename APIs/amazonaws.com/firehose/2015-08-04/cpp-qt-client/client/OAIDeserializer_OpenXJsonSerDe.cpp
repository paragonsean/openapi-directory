/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeserializer_OpenXJsonSerDe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeserializer_OpenXJsonSerDe::OAIDeserializer_OpenXJsonSerDe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeserializer_OpenXJsonSerDe::OAIDeserializer_OpenXJsonSerDe() {
    this->initializeModel();
}

OAIDeserializer_OpenXJsonSerDe::~OAIDeserializer_OpenXJsonSerDe() {}

void OAIDeserializer_OpenXJsonSerDe::initializeModel() {

    m_convert_dots_in_json_keys_to_underscores_isSet = false;
    m_convert_dots_in_json_keys_to_underscores_isValid = false;

    m_case_insensitive_isSet = false;
    m_case_insensitive_isValid = false;

    m_column_to_json_key_mappings_isSet = false;
    m_column_to_json_key_mappings_isValid = false;
}

void OAIDeserializer_OpenXJsonSerDe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeserializer_OpenXJsonSerDe::fromJsonObject(QJsonObject json) {

    m_convert_dots_in_json_keys_to_underscores_isValid = ::OpenAPI::fromJsonValue(m_convert_dots_in_json_keys_to_underscores, json[QString("ConvertDotsInJsonKeysToUnderscores")]);
    m_convert_dots_in_json_keys_to_underscores_isSet = !json[QString("ConvertDotsInJsonKeysToUnderscores")].isNull() && m_convert_dots_in_json_keys_to_underscores_isValid;

    m_case_insensitive_isValid = ::OpenAPI::fromJsonValue(m_case_insensitive, json[QString("CaseInsensitive")]);
    m_case_insensitive_isSet = !json[QString("CaseInsensitive")].isNull() && m_case_insensitive_isValid;

    m_column_to_json_key_mappings_isValid = ::OpenAPI::fromJsonValue(m_column_to_json_key_mappings, json[QString("ColumnToJsonKeyMappings")]);
    m_column_to_json_key_mappings_isSet = !json[QString("ColumnToJsonKeyMappings")].isNull() && m_column_to_json_key_mappings_isValid;
}

QString OAIDeserializer_OpenXJsonSerDe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeserializer_OpenXJsonSerDe::asJsonObject() const {
    QJsonObject obj;
    if (m_convert_dots_in_json_keys_to_underscores_isSet) {
        obj.insert(QString("ConvertDotsInJsonKeysToUnderscores"), ::OpenAPI::toJsonValue(m_convert_dots_in_json_keys_to_underscores));
    }
    if (m_case_insensitive_isSet) {
        obj.insert(QString("CaseInsensitive"), ::OpenAPI::toJsonValue(m_case_insensitive));
    }
    if (m_column_to_json_key_mappings.isSet()) {
        obj.insert(QString("ColumnToJsonKeyMappings"), ::OpenAPI::toJsonValue(m_column_to_json_key_mappings));
    }
    return obj;
}

bool OAIDeserializer_OpenXJsonSerDe::getConvertDotsInJsonKeysToUnderscores() const {
    return m_convert_dots_in_json_keys_to_underscores;
}
void OAIDeserializer_OpenXJsonSerDe::setConvertDotsInJsonKeysToUnderscores(const bool &convert_dots_in_json_keys_to_underscores) {
    m_convert_dots_in_json_keys_to_underscores = convert_dots_in_json_keys_to_underscores;
    m_convert_dots_in_json_keys_to_underscores_isSet = true;
}

bool OAIDeserializer_OpenXJsonSerDe::is_convert_dots_in_json_keys_to_underscores_Set() const{
    return m_convert_dots_in_json_keys_to_underscores_isSet;
}

bool OAIDeserializer_OpenXJsonSerDe::is_convert_dots_in_json_keys_to_underscores_Valid() const{
    return m_convert_dots_in_json_keys_to_underscores_isValid;
}

bool OAIDeserializer_OpenXJsonSerDe::getCaseInsensitive() const {
    return m_case_insensitive;
}
void OAIDeserializer_OpenXJsonSerDe::setCaseInsensitive(const bool &case_insensitive) {
    m_case_insensitive = case_insensitive;
    m_case_insensitive_isSet = true;
}

bool OAIDeserializer_OpenXJsonSerDe::is_case_insensitive_Set() const{
    return m_case_insensitive_isSet;
}

bool OAIDeserializer_OpenXJsonSerDe::is_case_insensitive_Valid() const{
    return m_case_insensitive_isValid;
}

QMap OAIDeserializer_OpenXJsonSerDe::getColumnToJsonKeyMappings() const {
    return m_column_to_json_key_mappings;
}
void OAIDeserializer_OpenXJsonSerDe::setColumnToJsonKeyMappings(const QMap &column_to_json_key_mappings) {
    m_column_to_json_key_mappings = column_to_json_key_mappings;
    m_column_to_json_key_mappings_isSet = true;
}

bool OAIDeserializer_OpenXJsonSerDe::is_column_to_json_key_mappings_Set() const{
    return m_column_to_json_key_mappings_isSet;
}

bool OAIDeserializer_OpenXJsonSerDe::is_column_to_json_key_mappings_Valid() const{
    return m_column_to_json_key_mappings_isValid;
}

bool OAIDeserializer_OpenXJsonSerDe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_convert_dots_in_json_keys_to_underscores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_insensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_to_json_key_mappings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeserializer_OpenXJsonSerDe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
