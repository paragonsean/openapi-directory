/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryStreamFailureType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryStreamFailureType::OAIDeliveryStreamFailureType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryStreamFailureType::OAIDeliveryStreamFailureType() {
    this->initializeModel();
}

OAIDeliveryStreamFailureType::~OAIDeliveryStreamFailureType() {}

void OAIDeliveryStreamFailureType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeliveryStreamFailureType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeliveryStreamFailureType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("RETIRE_KMS_GRANT_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::RETIRE_KMS_GRANT_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_KMS_GRANT_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::CREATE_KMS_GRANT_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KMS_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::KMS_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLED_KMS_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::DISABLED_KMS_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INVALID_KMS_KEY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::INVALID_KMS_KEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KMS_KEY_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::KMS_KEY_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KMS_OPT_IN_REQUIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::KMS_OPT_IN_REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_ENI_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::CREATE_ENI_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_ENI_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::DELETE_ENI_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBNET_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::SUBNET_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECURITY_GROUP_NOT_FOUND", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::SECURITY_GROUP_NOT_FOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENI_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::ENI_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBNET_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::SUBNET_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECURITY_GROUP_ACCESS_DENIED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::SECURITY_GROUP_ACCESS_DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNKNOWN_ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeliveryStreamFailureType::UNKNOWN_ERROR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeliveryStreamFailureType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeliveryStreamFailureType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeliveryStreamFailureType::RETIRE_KMS_GRANT_FAILED:
            val = "RETIRE_KMS_GRANT_FAILED";
            break;
        case eOAIDeliveryStreamFailureType::CREATE_KMS_GRANT_FAILED:
            val = "CREATE_KMS_GRANT_FAILED";
            break;
        case eOAIDeliveryStreamFailureType::KMS_ACCESS_DENIED:
            val = "KMS_ACCESS_DENIED";
            break;
        case eOAIDeliveryStreamFailureType::DISABLED_KMS_KEY:
            val = "DISABLED_KMS_KEY";
            break;
        case eOAIDeliveryStreamFailureType::INVALID_KMS_KEY:
            val = "INVALID_KMS_KEY";
            break;
        case eOAIDeliveryStreamFailureType::KMS_KEY_NOT_FOUND:
            val = "KMS_KEY_NOT_FOUND";
            break;
        case eOAIDeliveryStreamFailureType::KMS_OPT_IN_REQUIRED:
            val = "KMS_OPT_IN_REQUIRED";
            break;
        case eOAIDeliveryStreamFailureType::CREATE_ENI_FAILED:
            val = "CREATE_ENI_FAILED";
            break;
        case eOAIDeliveryStreamFailureType::DELETE_ENI_FAILED:
            val = "DELETE_ENI_FAILED";
            break;
        case eOAIDeliveryStreamFailureType::SUBNET_NOT_FOUND:
            val = "SUBNET_NOT_FOUND";
            break;
        case eOAIDeliveryStreamFailureType::SECURITY_GROUP_NOT_FOUND:
            val = "SECURITY_GROUP_NOT_FOUND";
            break;
        case eOAIDeliveryStreamFailureType::ENI_ACCESS_DENIED:
            val = "ENI_ACCESS_DENIED";
            break;
        case eOAIDeliveryStreamFailureType::SUBNET_ACCESS_DENIED:
            val = "SUBNET_ACCESS_DENIED";
            break;
        case eOAIDeliveryStreamFailureType::SECURITY_GROUP_ACCESS_DENIED:
            val = "SECURITY_GROUP_ACCESS_DENIED";
            break;
        case eOAIDeliveryStreamFailureType::UNKNOWN_ERROR:
            val = "UNKNOWN_ERROR";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeliveryStreamFailureType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeliveryStreamFailureType::eOAIDeliveryStreamFailureType OAIDeliveryStreamFailureType::getValue() const {
    return m_value;
}

void OAIDeliveryStreamFailureType::setValue(const OAIDeliveryStreamFailureType::eOAIDeliveryStreamFailureType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeliveryStreamFailureType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeliveryStreamFailureType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
