/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessorParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessorParameter::OAIProcessorParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessorParameter::OAIProcessorParameter() {
    this->initializeModel();
}

OAIProcessorParameter::~OAIProcessorParameter() {}

void OAIProcessorParameter::initializeModel() {

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_parameter_value_isSet = false;
    m_parameter_value_isValid = false;
}

void OAIProcessorParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProcessorParameter::fromJsonObject(QJsonObject json) {

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("ParameterName")]);
    m_parameter_name_isSet = !json[QString("ParameterName")].isNull() && m_parameter_name_isValid;

    m_parameter_value_isValid = ::OpenAPI::fromJsonValue(m_parameter_value, json[QString("ParameterValue")]);
    m_parameter_value_isSet = !json[QString("ParameterValue")].isNull() && m_parameter_value_isValid;
}

QString OAIProcessorParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProcessorParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_name.isSet()) {
        obj.insert(QString("ParameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_parameter_value_isSet) {
        obj.insert(QString("ParameterValue"), ::OpenAPI::toJsonValue(m_parameter_value));
    }
    return obj;
}

OAIProcessorParameterName OAIProcessorParameter::getParameterName() const {
    return m_parameter_name;
}
void OAIProcessorParameter::setParameterName(const OAIProcessorParameterName &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIProcessorParameter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIProcessorParameter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIProcessorParameter::getParameterValue() const {
    return m_parameter_value;
}
void OAIProcessorParameter::setParameterValue(const QString &parameter_value) {
    m_parameter_value = parameter_value;
    m_parameter_value_isSet = true;
}

bool OAIProcessorParameter::is_parameter_value_Set() const{
    return m_parameter_value_isSet;
}

bool OAIProcessorParameter::is_parameter_value_Valid() const{
    return m_parameter_value_isValid;
}

bool OAIProcessorParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProcessorParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_name_isValid && m_parameter_value_isValid && true;
}

} // namespace OpenAPI
