/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpEndpointDestinationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpEndpointDestinationConfiguration::OAIHttpEndpointDestinationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpEndpointDestinationConfiguration::OAIHttpEndpointDestinationConfiguration() {
    this->initializeModel();
}

OAIHttpEndpointDestinationConfiguration::~OAIHttpEndpointDestinationConfiguration() {}

void OAIHttpEndpointDestinationConfiguration::initializeModel() {

    m_endpoint_configuration_isSet = false;
    m_endpoint_configuration_isValid = false;

    m_buffering_hints_isSet = false;
    m_buffering_hints_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;

    m_request_configuration_isSet = false;
    m_request_configuration_isValid = false;

    m_processing_configuration_isSet = false;
    m_processing_configuration_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_retry_options_isSet = false;
    m_retry_options_isValid = false;

    m_s3_backup_mode_isSet = false;
    m_s3_backup_mode_isValid = false;

    m_s3_configuration_isSet = false;
    m_s3_configuration_isValid = false;
}

void OAIHttpEndpointDestinationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpEndpointDestinationConfiguration::fromJsonObject(QJsonObject json) {

    m_endpoint_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoint_configuration, json[QString("EndpointConfiguration")]);
    m_endpoint_configuration_isSet = !json[QString("EndpointConfiguration")].isNull() && m_endpoint_configuration_isValid;

    m_buffering_hints_isValid = ::OpenAPI::fromJsonValue(m_buffering_hints, json[QString("BufferingHints")]);
    m_buffering_hints_isSet = !json[QString("BufferingHints")].isNull() && m_buffering_hints_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;

    m_request_configuration_isValid = ::OpenAPI::fromJsonValue(m_request_configuration, json[QString("RequestConfiguration")]);
    m_request_configuration_isSet = !json[QString("RequestConfiguration")].isNull() && m_request_configuration_isValid;

    m_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_processing_configuration, json[QString("ProcessingConfiguration")]);
    m_processing_configuration_isSet = !json[QString("ProcessingConfiguration")].isNull() && m_processing_configuration_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_retry_options_isValid = ::OpenAPI::fromJsonValue(m_retry_options, json[QString("RetryOptions")]);
    m_retry_options_isSet = !json[QString("RetryOptions")].isNull() && m_retry_options_isValid;

    m_s3_backup_mode_isValid = ::OpenAPI::fromJsonValue(m_s3_backup_mode, json[QString("S3BackupMode")]);
    m_s3_backup_mode_isSet = !json[QString("S3BackupMode")].isNull() && m_s3_backup_mode_isValid;

    m_s3_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_configuration, json[QString("S3Configuration")]);
    m_s3_configuration_isSet = !json[QString("S3Configuration")].isNull() && m_s3_configuration_isValid;
}

QString OAIHttpEndpointDestinationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpEndpointDestinationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_configuration.isSet()) {
        obj.insert(QString("EndpointConfiguration"), ::OpenAPI::toJsonValue(m_endpoint_configuration));
    }
    if (m_buffering_hints.isSet()) {
        obj.insert(QString("BufferingHints"), ::OpenAPI::toJsonValue(m_buffering_hints));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    if (m_request_configuration.isSet()) {
        obj.insert(QString("RequestConfiguration"), ::OpenAPI::toJsonValue(m_request_configuration));
    }
    if (m_processing_configuration.isSet()) {
        obj.insert(QString("ProcessingConfiguration"), ::OpenAPI::toJsonValue(m_processing_configuration));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_retry_options.isSet()) {
        obj.insert(QString("RetryOptions"), ::OpenAPI::toJsonValue(m_retry_options));
    }
    if (m_s3_backup_mode.isSet()) {
        obj.insert(QString("S3BackupMode"), ::OpenAPI::toJsonValue(m_s3_backup_mode));
    }
    if (m_s3_configuration.isSet()) {
        obj.insert(QString("S3Configuration"), ::OpenAPI::toJsonValue(m_s3_configuration));
    }
    return obj;
}

OAIHttpEndpointDestinationConfiguration_EndpointConfiguration OAIHttpEndpointDestinationConfiguration::getEndpointConfiguration() const {
    return m_endpoint_configuration;
}
void OAIHttpEndpointDestinationConfiguration::setEndpointConfiguration(const OAIHttpEndpointDestinationConfiguration_EndpointConfiguration &endpoint_configuration) {
    m_endpoint_configuration = endpoint_configuration;
    m_endpoint_configuration_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_endpoint_configuration_Set() const{
    return m_endpoint_configuration_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_endpoint_configuration_Valid() const{
    return m_endpoint_configuration_isValid;
}

OAIHttpEndpointDestinationConfiguration_BufferingHints OAIHttpEndpointDestinationConfiguration::getBufferingHints() const {
    return m_buffering_hints;
}
void OAIHttpEndpointDestinationConfiguration::setBufferingHints(const OAIHttpEndpointDestinationConfiguration_BufferingHints &buffering_hints) {
    m_buffering_hints = buffering_hints;
    m_buffering_hints_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_buffering_hints_Set() const{
    return m_buffering_hints_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_buffering_hints_Valid() const{
    return m_buffering_hints_isValid;
}

OAICloudWatchLoggingOptions OAIHttpEndpointDestinationConfiguration::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAIHttpEndpointDestinationConfiguration::setCloudWatchLoggingOptions(const OAICloudWatchLoggingOptions &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

OAIHttpEndpointDestinationConfiguration_RequestConfiguration OAIHttpEndpointDestinationConfiguration::getRequestConfiguration() const {
    return m_request_configuration;
}
void OAIHttpEndpointDestinationConfiguration::setRequestConfiguration(const OAIHttpEndpointDestinationConfiguration_RequestConfiguration &request_configuration) {
    m_request_configuration = request_configuration;
    m_request_configuration_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_request_configuration_Set() const{
    return m_request_configuration_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_request_configuration_Valid() const{
    return m_request_configuration_isValid;
}

OAIProcessingConfiguration OAIHttpEndpointDestinationConfiguration::getProcessingConfiguration() const {
    return m_processing_configuration;
}
void OAIHttpEndpointDestinationConfiguration::setProcessingConfiguration(const OAIProcessingConfiguration &processing_configuration) {
    m_processing_configuration = processing_configuration;
    m_processing_configuration_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_processing_configuration_Set() const{
    return m_processing_configuration_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_processing_configuration_Valid() const{
    return m_processing_configuration_isValid;
}

QString OAIHttpEndpointDestinationConfiguration::getRoleArn() const {
    return m_role_arn;
}
void OAIHttpEndpointDestinationConfiguration::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIHttpEndpointDestinationConfiguration_RetryOptions OAIHttpEndpointDestinationConfiguration::getRetryOptions() const {
    return m_retry_options;
}
void OAIHttpEndpointDestinationConfiguration::setRetryOptions(const OAIHttpEndpointDestinationConfiguration_RetryOptions &retry_options) {
    m_retry_options = retry_options;
    m_retry_options_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_retry_options_Set() const{
    return m_retry_options_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_retry_options_Valid() const{
    return m_retry_options_isValid;
}

OAIHttpEndpointS3BackupMode OAIHttpEndpointDestinationConfiguration::getS3BackupMode() const {
    return m_s3_backup_mode;
}
void OAIHttpEndpointDestinationConfiguration::setS3BackupMode(const OAIHttpEndpointS3BackupMode &s3_backup_mode) {
    m_s3_backup_mode = s3_backup_mode;
    m_s3_backup_mode_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_s3_backup_mode_Set() const{
    return m_s3_backup_mode_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_s3_backup_mode_Valid() const{
    return m_s3_backup_mode_isValid;
}

OAIS3DestinationConfiguration OAIHttpEndpointDestinationConfiguration::getS3Configuration() const {
    return m_s3_configuration;
}
void OAIHttpEndpointDestinationConfiguration::setS3Configuration(const OAIS3DestinationConfiguration &s3_configuration) {
    m_s3_configuration = s3_configuration;
    m_s3_configuration_isSet = true;
}

bool OAIHttpEndpointDestinationConfiguration::is_s3_configuration_Set() const{
    return m_s3_configuration_isSet;
}

bool OAIHttpEndpointDestinationConfiguration::is_s3_configuration_Valid() const{
    return m_s3_configuration_isValid;
}

bool OAIHttpEndpointDestinationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffering_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_backup_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpEndpointDestinationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_configuration_isValid && m_s3_configuration_isValid && true;
}

} // namespace OpenAPI
