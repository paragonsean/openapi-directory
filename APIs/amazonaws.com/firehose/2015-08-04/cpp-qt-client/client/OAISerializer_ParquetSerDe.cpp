/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISerializer_ParquetSerDe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISerializer_ParquetSerDe::OAISerializer_ParquetSerDe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISerializer_ParquetSerDe::OAISerializer_ParquetSerDe() {
    this->initializeModel();
}

OAISerializer_ParquetSerDe::~OAISerializer_ParquetSerDe() {}

void OAISerializer_ParquetSerDe::initializeModel() {

    m_block_size_bytes_isSet = false;
    m_block_size_bytes_isValid = false;

    m_page_size_bytes_isSet = false;
    m_page_size_bytes_isValid = false;

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_enable_dictionary_compression_isSet = false;
    m_enable_dictionary_compression_isValid = false;

    m_max_padding_bytes_isSet = false;
    m_max_padding_bytes_isValid = false;

    m_writer_version_isSet = false;
    m_writer_version_isValid = false;
}

void OAISerializer_ParquetSerDe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISerializer_ParquetSerDe::fromJsonObject(QJsonObject json) {

    m_block_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_block_size_bytes, json[QString("BlockSizeBytes")]);
    m_block_size_bytes_isSet = !json[QString("BlockSizeBytes")].isNull() && m_block_size_bytes_isValid;

    m_page_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_page_size_bytes, json[QString("PageSizeBytes")]);
    m_page_size_bytes_isSet = !json[QString("PageSizeBytes")].isNull() && m_page_size_bytes_isValid;

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("Compression")]);
    m_compression_isSet = !json[QString("Compression")].isNull() && m_compression_isValid;

    m_enable_dictionary_compression_isValid = ::OpenAPI::fromJsonValue(m_enable_dictionary_compression, json[QString("EnableDictionaryCompression")]);
    m_enable_dictionary_compression_isSet = !json[QString("EnableDictionaryCompression")].isNull() && m_enable_dictionary_compression_isValid;

    m_max_padding_bytes_isValid = ::OpenAPI::fromJsonValue(m_max_padding_bytes, json[QString("MaxPaddingBytes")]);
    m_max_padding_bytes_isSet = !json[QString("MaxPaddingBytes")].isNull() && m_max_padding_bytes_isValid;

    m_writer_version_isValid = ::OpenAPI::fromJsonValue(m_writer_version, json[QString("WriterVersion")]);
    m_writer_version_isSet = !json[QString("WriterVersion")].isNull() && m_writer_version_isValid;
}

QString OAISerializer_ParquetSerDe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISerializer_ParquetSerDe::asJsonObject() const {
    QJsonObject obj;
    if (m_block_size_bytes_isSet) {
        obj.insert(QString("BlockSizeBytes"), ::OpenAPI::toJsonValue(m_block_size_bytes));
    }
    if (m_page_size_bytes_isSet) {
        obj.insert(QString("PageSizeBytes"), ::OpenAPI::toJsonValue(m_page_size_bytes));
    }
    if (m_compression.isSet()) {
        obj.insert(QString("Compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_enable_dictionary_compression_isSet) {
        obj.insert(QString("EnableDictionaryCompression"), ::OpenAPI::toJsonValue(m_enable_dictionary_compression));
    }
    if (m_max_padding_bytes_isSet) {
        obj.insert(QString("MaxPaddingBytes"), ::OpenAPI::toJsonValue(m_max_padding_bytes));
    }
    if (m_writer_version.isSet()) {
        obj.insert(QString("WriterVersion"), ::OpenAPI::toJsonValue(m_writer_version));
    }
    return obj;
}

qint32 OAISerializer_ParquetSerDe::getBlockSizeBytes() const {
    return m_block_size_bytes;
}
void OAISerializer_ParquetSerDe::setBlockSizeBytes(const qint32 &block_size_bytes) {
    m_block_size_bytes = block_size_bytes;
    m_block_size_bytes_isSet = true;
}

bool OAISerializer_ParquetSerDe::is_block_size_bytes_Set() const{
    return m_block_size_bytes_isSet;
}

bool OAISerializer_ParquetSerDe::is_block_size_bytes_Valid() const{
    return m_block_size_bytes_isValid;
}

qint32 OAISerializer_ParquetSerDe::getPageSizeBytes() const {
    return m_page_size_bytes;
}
void OAISerializer_ParquetSerDe::setPageSizeBytes(const qint32 &page_size_bytes) {
    m_page_size_bytes = page_size_bytes;
    m_page_size_bytes_isSet = true;
}

bool OAISerializer_ParquetSerDe::is_page_size_bytes_Set() const{
    return m_page_size_bytes_isSet;
}

bool OAISerializer_ParquetSerDe::is_page_size_bytes_Valid() const{
    return m_page_size_bytes_isValid;
}

OAIParquetCompression OAISerializer_ParquetSerDe::getCompression() const {
    return m_compression;
}
void OAISerializer_ParquetSerDe::setCompression(const OAIParquetCompression &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAISerializer_ParquetSerDe::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAISerializer_ParquetSerDe::is_compression_Valid() const{
    return m_compression_isValid;
}

bool OAISerializer_ParquetSerDe::getEnableDictionaryCompression() const {
    return m_enable_dictionary_compression;
}
void OAISerializer_ParquetSerDe::setEnableDictionaryCompression(const bool &enable_dictionary_compression) {
    m_enable_dictionary_compression = enable_dictionary_compression;
    m_enable_dictionary_compression_isSet = true;
}

bool OAISerializer_ParquetSerDe::is_enable_dictionary_compression_Set() const{
    return m_enable_dictionary_compression_isSet;
}

bool OAISerializer_ParquetSerDe::is_enable_dictionary_compression_Valid() const{
    return m_enable_dictionary_compression_isValid;
}

qint32 OAISerializer_ParquetSerDe::getMaxPaddingBytes() const {
    return m_max_padding_bytes;
}
void OAISerializer_ParquetSerDe::setMaxPaddingBytes(const qint32 &max_padding_bytes) {
    m_max_padding_bytes = max_padding_bytes;
    m_max_padding_bytes_isSet = true;
}

bool OAISerializer_ParquetSerDe::is_max_padding_bytes_Set() const{
    return m_max_padding_bytes_isSet;
}

bool OAISerializer_ParquetSerDe::is_max_padding_bytes_Valid() const{
    return m_max_padding_bytes_isValid;
}

OAIParquetWriterVersion OAISerializer_ParquetSerDe::getWriterVersion() const {
    return m_writer_version;
}
void OAISerializer_ParquetSerDe::setWriterVersion(const OAIParquetWriterVersion &writer_version) {
    m_writer_version = writer_version;
    m_writer_version_isSet = true;
}

bool OAISerializer_ParquetSerDe::is_writer_version_Set() const{
    return m_writer_version_isSet;
}

bool OAISerializer_ParquetSerDe::is_writer_version_Valid() const{
    return m_writer_version_isValid;
}

bool OAISerializer_ParquetSerDe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_dictionary_compression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_padding_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_writer_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISerializer_ParquetSerDe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
