/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryStreamEncryptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryStreamEncryptionConfiguration::OAIDeliveryStreamEncryptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryStreamEncryptionConfiguration::OAIDeliveryStreamEncryptionConfiguration() {
    this->initializeModel();
}

OAIDeliveryStreamEncryptionConfiguration::~OAIDeliveryStreamEncryptionConfiguration() {}

void OAIDeliveryStreamEncryptionConfiguration::initializeModel() {

    m_key_arn_isSet = false;
    m_key_arn_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_failure_description_isSet = false;
    m_failure_description_isValid = false;
}

void OAIDeliveryStreamEncryptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryStreamEncryptionConfiguration::fromJsonObject(QJsonObject json) {

    m_key_arn_isValid = ::OpenAPI::fromJsonValue(m_key_arn, json[QString("KeyARN")]);
    m_key_arn_isSet = !json[QString("KeyARN")].isNull() && m_key_arn_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("KeyType")]);
    m_key_type_isSet = !json[QString("KeyType")].isNull() && m_key_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_failure_description_isValid = ::OpenAPI::fromJsonValue(m_failure_description, json[QString("FailureDescription")]);
    m_failure_description_isSet = !json[QString("FailureDescription")].isNull() && m_failure_description_isValid;
}

QString OAIDeliveryStreamEncryptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryStreamEncryptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_key_arn_isSet) {
        obj.insert(QString("KeyARN"), ::OpenAPI::toJsonValue(m_key_arn));
    }
    if (m_key_type.isSet()) {
        obj.insert(QString("KeyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_failure_description.isSet()) {
        obj.insert(QString("FailureDescription"), ::OpenAPI::toJsonValue(m_failure_description));
    }
    return obj;
}

QString OAIDeliveryStreamEncryptionConfiguration::getKeyArn() const {
    return m_key_arn;
}
void OAIDeliveryStreamEncryptionConfiguration::setKeyArn(const QString &key_arn) {
    m_key_arn = key_arn;
    m_key_arn_isSet = true;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_key_arn_Set() const{
    return m_key_arn_isSet;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_key_arn_Valid() const{
    return m_key_arn_isValid;
}

OAIKeyType OAIDeliveryStreamEncryptionConfiguration::getKeyType() const {
    return m_key_type;
}
void OAIDeliveryStreamEncryptionConfiguration::setKeyType(const OAIKeyType &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_key_type_Valid() const{
    return m_key_type_isValid;
}

OAIDeliveryStreamEncryptionStatus OAIDeliveryStreamEncryptionConfiguration::getStatus() const {
    return m_status;
}
void OAIDeliveryStreamEncryptionConfiguration::setStatus(const OAIDeliveryStreamEncryptionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

OAIDeliveryStreamEncryptionConfiguration_FailureDescription OAIDeliveryStreamEncryptionConfiguration::getFailureDescription() const {
    return m_failure_description;
}
void OAIDeliveryStreamEncryptionConfiguration::setFailureDescription(const OAIDeliveryStreamEncryptionConfiguration_FailureDescription &failure_description) {
    m_failure_description = failure_description;
    m_failure_description_isSet = true;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_failure_description_Set() const{
    return m_failure_description_isSet;
}

bool OAIDeliveryStreamEncryptionConfiguration::is_failure_description_Valid() const{
    return m_failure_description_isValid;
}

bool OAIDeliveryStreamEncryptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryStreamEncryptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
