/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmazonOpenSearchServerlessDestinationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmazonOpenSearchServerlessDestinationDescription::OAIAmazonOpenSearchServerlessDestinationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmazonOpenSearchServerlessDestinationDescription::OAIAmazonOpenSearchServerlessDestinationDescription() {
    this->initializeModel();
}

OAIAmazonOpenSearchServerlessDestinationDescription::~OAIAmazonOpenSearchServerlessDestinationDescription() {}

void OAIAmazonOpenSearchServerlessDestinationDescription::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_collection_endpoint_isSet = false;
    m_collection_endpoint_isValid = false;

    m_index_name_isSet = false;
    m_index_name_isValid = false;

    m_buffering_hints_isSet = false;
    m_buffering_hints_isValid = false;

    m_retry_options_isSet = false;
    m_retry_options_isValid = false;

    m_s3_backup_mode_isSet = false;
    m_s3_backup_mode_isValid = false;

    m_s3_destination_description_isSet = false;
    m_s3_destination_description_isValid = false;

    m_processing_configuration_isSet = false;
    m_processing_configuration_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;

    m_vpc_configuration_description_isSet = false;
    m_vpc_configuration_description_isValid = false;
}

void OAIAmazonOpenSearchServerlessDestinationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmazonOpenSearchServerlessDestinationDescription::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_collection_endpoint_isValid = ::OpenAPI::fromJsonValue(m_collection_endpoint, json[QString("CollectionEndpoint")]);
    m_collection_endpoint_isSet = !json[QString("CollectionEndpoint")].isNull() && m_collection_endpoint_isValid;

    m_index_name_isValid = ::OpenAPI::fromJsonValue(m_index_name, json[QString("IndexName")]);
    m_index_name_isSet = !json[QString("IndexName")].isNull() && m_index_name_isValid;

    m_buffering_hints_isValid = ::OpenAPI::fromJsonValue(m_buffering_hints, json[QString("BufferingHints")]);
    m_buffering_hints_isSet = !json[QString("BufferingHints")].isNull() && m_buffering_hints_isValid;

    m_retry_options_isValid = ::OpenAPI::fromJsonValue(m_retry_options, json[QString("RetryOptions")]);
    m_retry_options_isSet = !json[QString("RetryOptions")].isNull() && m_retry_options_isValid;

    m_s3_backup_mode_isValid = ::OpenAPI::fromJsonValue(m_s3_backup_mode, json[QString("S3BackupMode")]);
    m_s3_backup_mode_isSet = !json[QString("S3BackupMode")].isNull() && m_s3_backup_mode_isValid;

    m_s3_destination_description_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_description, json[QString("S3DestinationDescription")]);
    m_s3_destination_description_isSet = !json[QString("S3DestinationDescription")].isNull() && m_s3_destination_description_isValid;

    m_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_processing_configuration, json[QString("ProcessingConfiguration")]);
    m_processing_configuration_isSet = !json[QString("ProcessingConfiguration")].isNull() && m_processing_configuration_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;

    m_vpc_configuration_description_isValid = ::OpenAPI::fromJsonValue(m_vpc_configuration_description, json[QString("VpcConfigurationDescription")]);
    m_vpc_configuration_description_isSet = !json[QString("VpcConfigurationDescription")].isNull() && m_vpc_configuration_description_isValid;
}

QString OAIAmazonOpenSearchServerlessDestinationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmazonOpenSearchServerlessDestinationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_collection_endpoint_isSet) {
        obj.insert(QString("CollectionEndpoint"), ::OpenAPI::toJsonValue(m_collection_endpoint));
    }
    if (m_index_name_isSet) {
        obj.insert(QString("IndexName"), ::OpenAPI::toJsonValue(m_index_name));
    }
    if (m_buffering_hints.isSet()) {
        obj.insert(QString("BufferingHints"), ::OpenAPI::toJsonValue(m_buffering_hints));
    }
    if (m_retry_options.isSet()) {
        obj.insert(QString("RetryOptions"), ::OpenAPI::toJsonValue(m_retry_options));
    }
    if (m_s3_backup_mode.isSet()) {
        obj.insert(QString("S3BackupMode"), ::OpenAPI::toJsonValue(m_s3_backup_mode));
    }
    if (m_s3_destination_description.isSet()) {
        obj.insert(QString("S3DestinationDescription"), ::OpenAPI::toJsonValue(m_s3_destination_description));
    }
    if (m_processing_configuration.isSet()) {
        obj.insert(QString("ProcessingConfiguration"), ::OpenAPI::toJsonValue(m_processing_configuration));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    if (m_vpc_configuration_description.isSet()) {
        obj.insert(QString("VpcConfigurationDescription"), ::OpenAPI::toJsonValue(m_vpc_configuration_description));
    }
    return obj;
}

QString OAIAmazonOpenSearchServerlessDestinationDescription::getRoleArn() const {
    return m_role_arn;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIAmazonOpenSearchServerlessDestinationDescription::getCollectionEndpoint() const {
    return m_collection_endpoint;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setCollectionEndpoint(const QString &collection_endpoint) {
    m_collection_endpoint = collection_endpoint;
    m_collection_endpoint_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_collection_endpoint_Set() const{
    return m_collection_endpoint_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_collection_endpoint_Valid() const{
    return m_collection_endpoint_isValid;
}

QString OAIAmazonOpenSearchServerlessDestinationDescription::getIndexName() const {
    return m_index_name;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setIndexName(const QString &index_name) {
    m_index_name = index_name;
    m_index_name_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_index_name_Set() const{
    return m_index_name_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_index_name_Valid() const{
    return m_index_name_isValid;
}

OAIAmazonOpenSearchServerlessDestinationDescription_BufferingHints OAIAmazonOpenSearchServerlessDestinationDescription::getBufferingHints() const {
    return m_buffering_hints;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setBufferingHints(const OAIAmazonOpenSearchServerlessDestinationDescription_BufferingHints &buffering_hints) {
    m_buffering_hints = buffering_hints;
    m_buffering_hints_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_buffering_hints_Set() const{
    return m_buffering_hints_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_buffering_hints_Valid() const{
    return m_buffering_hints_isValid;
}

OAIAmazonOpenSearchServerlessDestinationDescription_RetryOptions OAIAmazonOpenSearchServerlessDestinationDescription::getRetryOptions() const {
    return m_retry_options;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setRetryOptions(const OAIAmazonOpenSearchServerlessDestinationDescription_RetryOptions &retry_options) {
    m_retry_options = retry_options;
    m_retry_options_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_retry_options_Set() const{
    return m_retry_options_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_retry_options_Valid() const{
    return m_retry_options_isValid;
}

OAIAmazonOpenSearchServerlessS3BackupMode OAIAmazonOpenSearchServerlessDestinationDescription::getS3BackupMode() const {
    return m_s3_backup_mode;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setS3BackupMode(const OAIAmazonOpenSearchServerlessS3BackupMode &s3_backup_mode) {
    m_s3_backup_mode = s3_backup_mode;
    m_s3_backup_mode_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_s3_backup_mode_Set() const{
    return m_s3_backup_mode_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_s3_backup_mode_Valid() const{
    return m_s3_backup_mode_isValid;
}

OAIS3DestinationDescription OAIAmazonOpenSearchServerlessDestinationDescription::getS3DestinationDescription() const {
    return m_s3_destination_description;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setS3DestinationDescription(const OAIS3DestinationDescription &s3_destination_description) {
    m_s3_destination_description = s3_destination_description;
    m_s3_destination_description_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_s3_destination_description_Set() const{
    return m_s3_destination_description_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_s3_destination_description_Valid() const{
    return m_s3_destination_description_isValid;
}

OAIProcessingConfiguration OAIAmazonOpenSearchServerlessDestinationDescription::getProcessingConfiguration() const {
    return m_processing_configuration;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setProcessingConfiguration(const OAIProcessingConfiguration &processing_configuration) {
    m_processing_configuration = processing_configuration;
    m_processing_configuration_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_processing_configuration_Set() const{
    return m_processing_configuration_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_processing_configuration_Valid() const{
    return m_processing_configuration_isValid;
}

OAICloudWatchLoggingOptions OAIAmazonOpenSearchServerlessDestinationDescription::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setCloudWatchLoggingOptions(const OAICloudWatchLoggingOptions &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

OAIVpcConfigurationDescription OAIAmazonOpenSearchServerlessDestinationDescription::getVpcConfigurationDescription() const {
    return m_vpc_configuration_description;
}
void OAIAmazonOpenSearchServerlessDestinationDescription::setVpcConfigurationDescription(const OAIVpcConfigurationDescription &vpc_configuration_description) {
    m_vpc_configuration_description = vpc_configuration_description;
    m_vpc_configuration_description_isSet = true;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_vpc_configuration_description_Set() const{
    return m_vpc_configuration_description_isSet;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::is_vpc_configuration_description_Valid() const{
    return m_vpc_configuration_description_isValid;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffering_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_backup_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_configuration_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmazonOpenSearchServerlessDestinationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
