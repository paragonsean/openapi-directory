/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISplunkDestinationConfiguration.h
 *
 * Describes the configuration of a destination in Splunk.
 */

#ifndef OAISplunkDestinationConfiguration_H
#define OAISplunkDestinationConfiguration_H

#include <QJsonObject>

#include "OAIElasticsearchDestinationConfiguration_S3Configuration.h"
#include "OAIExtendedS3DestinationConfiguration_ProcessingConfiguration.h"
#include "OAIHECEndpointType.h"
#include "OAIS3DestinationDescription_CloudWatchLoggingOptions.h"
#include "OAISplunkDestinationConfiguration_RetryOptions.h"
#include "OAISplunkS3BackupMode.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISplunkDestinationConfiguration_RetryOptions;
class OAIElasticsearchDestinationConfiguration_S3Configuration;
class OAIExtendedS3DestinationConfiguration_ProcessingConfiguration;
class OAIS3DestinationDescription_CloudWatchLoggingOptions;

class OAISplunkDestinationConfiguration : public OAIObject {
public:
    OAISplunkDestinationConfiguration();
    OAISplunkDestinationConfiguration(QString json);
    ~OAISplunkDestinationConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getHecEndpoint() const;
    void setHecEndpoint(const QString &hec_endpoint);
    bool is_hec_endpoint_Set() const;
    bool is_hec_endpoint_Valid() const;

    OAIHECEndpointType getHecEndpointType() const;
    void setHecEndpointType(const OAIHECEndpointType &hec_endpoint_type);
    bool is_hec_endpoint_type_Set() const;
    bool is_hec_endpoint_type_Valid() const;

    QString getHecToken() const;
    void setHecToken(const QString &hec_token);
    bool is_hec_token_Set() const;
    bool is_hec_token_Valid() const;

    qint32 getHecAcknowledgmentTimeoutInSeconds() const;
    void setHecAcknowledgmentTimeoutInSeconds(const qint32 &hec_acknowledgment_timeout_in_seconds);
    bool is_hec_acknowledgment_timeout_in_seconds_Set() const;
    bool is_hec_acknowledgment_timeout_in_seconds_Valid() const;

    OAISplunkDestinationConfiguration_RetryOptions getRetryOptions() const;
    void setRetryOptions(const OAISplunkDestinationConfiguration_RetryOptions &retry_options);
    bool is_retry_options_Set() const;
    bool is_retry_options_Valid() const;

    OAISplunkS3BackupMode getS3BackupMode() const;
    void setS3BackupMode(const OAISplunkS3BackupMode &s3_backup_mode);
    bool is_s3_backup_mode_Set() const;
    bool is_s3_backup_mode_Valid() const;

    OAIElasticsearchDestinationConfiguration_S3Configuration getS3Configuration() const;
    void setS3Configuration(const OAIElasticsearchDestinationConfiguration_S3Configuration &s3_configuration);
    bool is_s3_configuration_Set() const;
    bool is_s3_configuration_Valid() const;

    OAIExtendedS3DestinationConfiguration_ProcessingConfiguration getProcessingConfiguration() const;
    void setProcessingConfiguration(const OAIExtendedS3DestinationConfiguration_ProcessingConfiguration &processing_configuration);
    bool is_processing_configuration_Set() const;
    bool is_processing_configuration_Valid() const;

    OAIS3DestinationDescription_CloudWatchLoggingOptions getCloudWatchLoggingOptions() const;
    void setCloudWatchLoggingOptions(const OAIS3DestinationDescription_CloudWatchLoggingOptions &cloud_watch_logging_options);
    bool is_cloud_watch_logging_options_Set() const;
    bool is_cloud_watch_logging_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_hec_endpoint;
    bool m_hec_endpoint_isSet;
    bool m_hec_endpoint_isValid;

    OAIHECEndpointType m_hec_endpoint_type;
    bool m_hec_endpoint_type_isSet;
    bool m_hec_endpoint_type_isValid;

    QString m_hec_token;
    bool m_hec_token_isSet;
    bool m_hec_token_isValid;

    qint32 m_hec_acknowledgment_timeout_in_seconds;
    bool m_hec_acknowledgment_timeout_in_seconds_isSet;
    bool m_hec_acknowledgment_timeout_in_seconds_isValid;

    OAISplunkDestinationConfiguration_RetryOptions m_retry_options;
    bool m_retry_options_isSet;
    bool m_retry_options_isValid;

    OAISplunkS3BackupMode m_s3_backup_mode;
    bool m_s3_backup_mode_isSet;
    bool m_s3_backup_mode_isValid;

    OAIElasticsearchDestinationConfiguration_S3Configuration m_s3_configuration;
    bool m_s3_configuration_isSet;
    bool m_s3_configuration_isValid;

    OAIExtendedS3DestinationConfiguration_ProcessingConfiguration m_processing_configuration;
    bool m_processing_configuration_isSet;
    bool m_processing_configuration_isValid;

    OAIS3DestinationDescription_CloudWatchLoggingOptions m_cloud_watch_logging_options;
    bool m_cloud_watch_logging_options_isSet;
    bool m_cloud_watch_logging_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISplunkDestinationConfiguration)

#endif // OAISplunkDestinationConfiguration_H
