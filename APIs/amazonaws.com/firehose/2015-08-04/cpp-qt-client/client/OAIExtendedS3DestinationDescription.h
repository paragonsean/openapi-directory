/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExtendedS3DestinationDescription.h
 *
 * Describes a destination in Amazon S3.
 */

#ifndef OAIExtendedS3DestinationDescription_H
#define OAIExtendedS3DestinationDescription_H

#include <QJsonObject>

#include "OAICompressionFormat.h"
#include "OAIExtendedS3DestinationConfiguration_BufferingHints.h"
#include "OAIExtendedS3DestinationConfiguration_DataFormatConversionConfiguration.h"
#include "OAIExtendedS3DestinationConfiguration_DynamicPartitioningConfiguration.h"
#include "OAIExtendedS3DestinationConfiguration_ProcessingConfiguration.h"
#include "OAIExtendedS3DestinationDescription_S3BackupDescription.h"
#include "OAIS3BackupMode.h"
#include "OAIS3DestinationConfiguration_EncryptionConfiguration.h"
#include "OAIS3DestinationDescription_CloudWatchLoggingOptions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExtendedS3DestinationConfiguration_BufferingHints;
class OAIS3DestinationConfiguration_EncryptionConfiguration;
class OAIS3DestinationDescription_CloudWatchLoggingOptions;
class OAIExtendedS3DestinationConfiguration_ProcessingConfiguration;
class OAIExtendedS3DestinationDescription_S3BackupDescription;
class OAIExtendedS3DestinationConfiguration_DataFormatConversionConfiguration;
class OAIExtendedS3DestinationConfiguration_DynamicPartitioningConfiguration;

class OAIExtendedS3DestinationDescription : public OAIObject {
public:
    OAIExtendedS3DestinationDescription();
    OAIExtendedS3DestinationDescription(QString json);
    ~OAIExtendedS3DestinationDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getBucketArn() const;
    void setBucketArn(const QString &bucket_arn);
    bool is_bucket_arn_Set() const;
    bool is_bucket_arn_Valid() const;

    QString getPrefix() const;
    void setPrefix(const QString &prefix);
    bool is_prefix_Set() const;
    bool is_prefix_Valid() const;

    QString getErrorOutputPrefix() const;
    void setErrorOutputPrefix(const QString &error_output_prefix);
    bool is_error_output_prefix_Set() const;
    bool is_error_output_prefix_Valid() const;

    OAIExtendedS3DestinationConfiguration_BufferingHints getBufferingHints() const;
    void setBufferingHints(const OAIExtendedS3DestinationConfiguration_BufferingHints &buffering_hints);
    bool is_buffering_hints_Set() const;
    bool is_buffering_hints_Valid() const;

    OAICompressionFormat getCompressionFormat() const;
    void setCompressionFormat(const OAICompressionFormat &compression_format);
    bool is_compression_format_Set() const;
    bool is_compression_format_Valid() const;

    OAIS3DestinationConfiguration_EncryptionConfiguration getEncryptionConfiguration() const;
    void setEncryptionConfiguration(const OAIS3DestinationConfiguration_EncryptionConfiguration &encryption_configuration);
    bool is_encryption_configuration_Set() const;
    bool is_encryption_configuration_Valid() const;

    OAIS3DestinationDescription_CloudWatchLoggingOptions getCloudWatchLoggingOptions() const;
    void setCloudWatchLoggingOptions(const OAIS3DestinationDescription_CloudWatchLoggingOptions &cloud_watch_logging_options);
    bool is_cloud_watch_logging_options_Set() const;
    bool is_cloud_watch_logging_options_Valid() const;

    OAIExtendedS3DestinationConfiguration_ProcessingConfiguration getProcessingConfiguration() const;
    void setProcessingConfiguration(const OAIExtendedS3DestinationConfiguration_ProcessingConfiguration &processing_configuration);
    bool is_processing_configuration_Set() const;
    bool is_processing_configuration_Valid() const;

    OAIS3BackupMode getS3BackupMode() const;
    void setS3BackupMode(const OAIS3BackupMode &s3_backup_mode);
    bool is_s3_backup_mode_Set() const;
    bool is_s3_backup_mode_Valid() const;

    OAIExtendedS3DestinationDescription_S3BackupDescription getS3BackupDescription() const;
    void setS3BackupDescription(const OAIExtendedS3DestinationDescription_S3BackupDescription &s3_backup_description);
    bool is_s3_backup_description_Set() const;
    bool is_s3_backup_description_Valid() const;

    OAIExtendedS3DestinationConfiguration_DataFormatConversionConfiguration getDataFormatConversionConfiguration() const;
    void setDataFormatConversionConfiguration(const OAIExtendedS3DestinationConfiguration_DataFormatConversionConfiguration &data_format_conversion_configuration);
    bool is_data_format_conversion_configuration_Set() const;
    bool is_data_format_conversion_configuration_Valid() const;

    OAIExtendedS3DestinationConfiguration_DynamicPartitioningConfiguration getDynamicPartitioningConfiguration() const;
    void setDynamicPartitioningConfiguration(const OAIExtendedS3DestinationConfiguration_DynamicPartitioningConfiguration &dynamic_partitioning_configuration);
    bool is_dynamic_partitioning_configuration_Set() const;
    bool is_dynamic_partitioning_configuration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_bucket_arn;
    bool m_bucket_arn_isSet;
    bool m_bucket_arn_isValid;

    QString m_prefix;
    bool m_prefix_isSet;
    bool m_prefix_isValid;

    QString m_error_output_prefix;
    bool m_error_output_prefix_isSet;
    bool m_error_output_prefix_isValid;

    OAIExtendedS3DestinationConfiguration_BufferingHints m_buffering_hints;
    bool m_buffering_hints_isSet;
    bool m_buffering_hints_isValid;

    OAICompressionFormat m_compression_format;
    bool m_compression_format_isSet;
    bool m_compression_format_isValid;

    OAIS3DestinationConfiguration_EncryptionConfiguration m_encryption_configuration;
    bool m_encryption_configuration_isSet;
    bool m_encryption_configuration_isValid;

    OAIS3DestinationDescription_CloudWatchLoggingOptions m_cloud_watch_logging_options;
    bool m_cloud_watch_logging_options_isSet;
    bool m_cloud_watch_logging_options_isValid;

    OAIExtendedS3DestinationConfiguration_ProcessingConfiguration m_processing_configuration;
    bool m_processing_configuration_isSet;
    bool m_processing_configuration_isValid;

    OAIS3BackupMode m_s3_backup_mode;
    bool m_s3_backup_mode_isSet;
    bool m_s3_backup_mode_isValid;

    OAIExtendedS3DestinationDescription_S3BackupDescription m_s3_backup_description;
    bool m_s3_backup_description_isSet;
    bool m_s3_backup_description_isValid;

    OAIExtendedS3DestinationConfiguration_DataFormatConversionConfiguration m_data_format_conversion_configuration;
    bool m_data_format_conversion_configuration_isSet;
    bool m_data_format_conversion_configuration_isValid;

    OAIExtendedS3DestinationConfiguration_DynamicPartitioningConfiguration m_dynamic_partitioning_configuration;
    bool m_dynamic_partitioning_configuration_isSet;
    bool m_dynamic_partitioning_configuration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExtendedS3DestinationDescription)

#endif // OAIExtendedS3DestinationDescription_H
