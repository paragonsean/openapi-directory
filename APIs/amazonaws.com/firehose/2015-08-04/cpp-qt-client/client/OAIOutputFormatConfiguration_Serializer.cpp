/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputFormatConfiguration_Serializer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputFormatConfiguration_Serializer::OAIOutputFormatConfiguration_Serializer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputFormatConfiguration_Serializer::OAIOutputFormatConfiguration_Serializer() {
    this->initializeModel();
}

OAIOutputFormatConfiguration_Serializer::~OAIOutputFormatConfiguration_Serializer() {}

void OAIOutputFormatConfiguration_Serializer::initializeModel() {

    m_parquet_ser_de_isSet = false;
    m_parquet_ser_de_isValid = false;

    m_orc_ser_de_isSet = false;
    m_orc_ser_de_isValid = false;
}

void OAIOutputFormatConfiguration_Serializer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputFormatConfiguration_Serializer::fromJsonObject(QJsonObject json) {

    m_parquet_ser_de_isValid = ::OpenAPI::fromJsonValue(m_parquet_ser_de, json[QString("ParquetSerDe")]);
    m_parquet_ser_de_isSet = !json[QString("ParquetSerDe")].isNull() && m_parquet_ser_de_isValid;

    m_orc_ser_de_isValid = ::OpenAPI::fromJsonValue(m_orc_ser_de, json[QString("OrcSerDe")]);
    m_orc_ser_de_isSet = !json[QString("OrcSerDe")].isNull() && m_orc_ser_de_isValid;
}

QString OAIOutputFormatConfiguration_Serializer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputFormatConfiguration_Serializer::asJsonObject() const {
    QJsonObject obj;
    if (m_parquet_ser_de.isSet()) {
        obj.insert(QString("ParquetSerDe"), ::OpenAPI::toJsonValue(m_parquet_ser_de));
    }
    if (m_orc_ser_de.isSet()) {
        obj.insert(QString("OrcSerDe"), ::OpenAPI::toJsonValue(m_orc_ser_de));
    }
    return obj;
}

OAISerializer_ParquetSerDe OAIOutputFormatConfiguration_Serializer::getParquetSerDe() const {
    return m_parquet_ser_de;
}
void OAIOutputFormatConfiguration_Serializer::setParquetSerDe(const OAISerializer_ParquetSerDe &parquet_ser_de) {
    m_parquet_ser_de = parquet_ser_de;
    m_parquet_ser_de_isSet = true;
}

bool OAIOutputFormatConfiguration_Serializer::is_parquet_ser_de_Set() const{
    return m_parquet_ser_de_isSet;
}

bool OAIOutputFormatConfiguration_Serializer::is_parquet_ser_de_Valid() const{
    return m_parquet_ser_de_isValid;
}

OAISerializer_OrcSerDe OAIOutputFormatConfiguration_Serializer::getOrcSerDe() const {
    return m_orc_ser_de;
}
void OAIOutputFormatConfiguration_Serializer::setOrcSerDe(const OAISerializer_OrcSerDe &orc_ser_de) {
    m_orc_ser_de = orc_ser_de;
    m_orc_ser_de_isSet = true;
}

bool OAIOutputFormatConfiguration_Serializer::is_orc_ser_de_Set() const{
    return m_orc_ser_de_isSet;
}

bool OAIOutputFormatConfiguration_Serializer::is_orc_ser_de_Valid() const{
    return m_orc_ser_de_isValid;
}

bool OAIOutputFormatConfiguration_Serializer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parquet_ser_de.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orc_ser_de.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputFormatConfiguration_Serializer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
