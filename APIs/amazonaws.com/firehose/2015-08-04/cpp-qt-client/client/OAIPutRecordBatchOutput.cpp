/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutRecordBatchOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutRecordBatchOutput::OAIPutRecordBatchOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutRecordBatchOutput::OAIPutRecordBatchOutput() {
    this->initializeModel();
}

OAIPutRecordBatchOutput::~OAIPutRecordBatchOutput() {}

void OAIPutRecordBatchOutput::initializeModel() {

    m_failed_put_count_isSet = false;
    m_failed_put_count_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_request_responses_isSet = false;
    m_request_responses_isValid = false;
}

void OAIPutRecordBatchOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutRecordBatchOutput::fromJsonObject(QJsonObject json) {

    m_failed_put_count_isValid = ::OpenAPI::fromJsonValue(m_failed_put_count, json[QString("FailedPutCount")]);
    m_failed_put_count_isSet = !json[QString("FailedPutCount")].isNull() && m_failed_put_count_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("Encrypted")]);
    m_encrypted_isSet = !json[QString("Encrypted")].isNull() && m_encrypted_isValid;

    m_request_responses_isValid = ::OpenAPI::fromJsonValue(m_request_responses, json[QString("RequestResponses")]);
    m_request_responses_isSet = !json[QString("RequestResponses")].isNull() && m_request_responses_isValid;
}

QString OAIPutRecordBatchOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutRecordBatchOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_put_count_isSet) {
        obj.insert(QString("FailedPutCount"), ::OpenAPI::toJsonValue(m_failed_put_count));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("Encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_request_responses.isSet()) {
        obj.insert(QString("RequestResponses"), ::OpenAPI::toJsonValue(m_request_responses));
    }
    return obj;
}

qint32 OAIPutRecordBatchOutput::getFailedPutCount() const {
    return m_failed_put_count;
}
void OAIPutRecordBatchOutput::setFailedPutCount(const qint32 &failed_put_count) {
    m_failed_put_count = failed_put_count;
    m_failed_put_count_isSet = true;
}

bool OAIPutRecordBatchOutput::is_failed_put_count_Set() const{
    return m_failed_put_count_isSet;
}

bool OAIPutRecordBatchOutput::is_failed_put_count_Valid() const{
    return m_failed_put_count_isValid;
}

bool OAIPutRecordBatchOutput::getEncrypted() const {
    return m_encrypted;
}
void OAIPutRecordBatchOutput::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIPutRecordBatchOutput::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIPutRecordBatchOutput::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QList OAIPutRecordBatchOutput::getRequestResponses() const {
    return m_request_responses;
}
void OAIPutRecordBatchOutput::setRequestResponses(const QList &request_responses) {
    m_request_responses = request_responses;
    m_request_responses_isSet = true;
}

bool OAIPutRecordBatchOutput::is_request_responses_Set() const{
    return m_request_responses_isSet;
}

bool OAIPutRecordBatchOutput::is_request_responses_Valid() const{
    return m_request_responses_isValid;
}

bool OAIPutRecordBatchOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_put_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_responses.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutRecordBatchOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failed_put_count_isValid && m_request_responses_isValid && true;
}

} // namespace OpenAPI
