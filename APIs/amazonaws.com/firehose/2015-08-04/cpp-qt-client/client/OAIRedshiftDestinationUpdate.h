/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRedshiftDestinationUpdate.h
 *
 * Describes an update for a destination in Amazon Redshift.
 */

#ifndef OAIRedshiftDestinationUpdate_H
#define OAIRedshiftDestinationUpdate_H

#include <QJsonObject>

#include "OAIExtendedS3DestinationConfiguration_ProcessingConfiguration.h"
#include "OAIExtendedS3DestinationUpdate_S3BackupUpdate.h"
#include "OAIRedshiftDestinationConfiguration_CopyCommand.h"
#include "OAIRedshiftDestinationConfiguration_RetryOptions.h"
#include "OAIRedshiftDestinationUpdate_S3Update.h"
#include "OAIRedshiftS3BackupMode.h"
#include "OAIS3DestinationDescription_CloudWatchLoggingOptions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRedshiftDestinationConfiguration_CopyCommand;
class OAIRedshiftDestinationConfiguration_RetryOptions;
class OAIRedshiftDestinationUpdate_S3Update;
class OAIExtendedS3DestinationConfiguration_ProcessingConfiguration;
class OAIExtendedS3DestinationUpdate_S3BackupUpdate;
class OAIS3DestinationDescription_CloudWatchLoggingOptions;

class OAIRedshiftDestinationUpdate : public OAIObject {
public:
    OAIRedshiftDestinationUpdate();
    OAIRedshiftDestinationUpdate(QString json);
    ~OAIRedshiftDestinationUpdate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QString getClusterJdbcurl() const;
    void setClusterJdbcurl(const QString &cluster_jdbcurl);
    bool is_cluster_jdbcurl_Set() const;
    bool is_cluster_jdbcurl_Valid() const;

    OAIRedshiftDestinationConfiguration_CopyCommand getCopyCommand() const;
    void setCopyCommand(const OAIRedshiftDestinationConfiguration_CopyCommand &copy_command);
    bool is_copy_command_Set() const;
    bool is_copy_command_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    OAIRedshiftDestinationConfiguration_RetryOptions getRetryOptions() const;
    void setRetryOptions(const OAIRedshiftDestinationConfiguration_RetryOptions &retry_options);
    bool is_retry_options_Set() const;
    bool is_retry_options_Valid() const;

    OAIRedshiftDestinationUpdate_S3Update getS3Update() const;
    void setS3Update(const OAIRedshiftDestinationUpdate_S3Update &s3_update);
    bool is_s3_update_Set() const;
    bool is_s3_update_Valid() const;

    OAIExtendedS3DestinationConfiguration_ProcessingConfiguration getProcessingConfiguration() const;
    void setProcessingConfiguration(const OAIExtendedS3DestinationConfiguration_ProcessingConfiguration &processing_configuration);
    bool is_processing_configuration_Set() const;
    bool is_processing_configuration_Valid() const;

    OAIRedshiftS3BackupMode getS3BackupMode() const;
    void setS3BackupMode(const OAIRedshiftS3BackupMode &s3_backup_mode);
    bool is_s3_backup_mode_Set() const;
    bool is_s3_backup_mode_Valid() const;

    OAIExtendedS3DestinationUpdate_S3BackupUpdate getS3BackupUpdate() const;
    void setS3BackupUpdate(const OAIExtendedS3DestinationUpdate_S3BackupUpdate &s3_backup_update);
    bool is_s3_backup_update_Set() const;
    bool is_s3_backup_update_Valid() const;

    OAIS3DestinationDescription_CloudWatchLoggingOptions getCloudWatchLoggingOptions() const;
    void setCloudWatchLoggingOptions(const OAIS3DestinationDescription_CloudWatchLoggingOptions &cloud_watch_logging_options);
    bool is_cloud_watch_logging_options_Set() const;
    bool is_cloud_watch_logging_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QString m_cluster_jdbcurl;
    bool m_cluster_jdbcurl_isSet;
    bool m_cluster_jdbcurl_isValid;

    OAIRedshiftDestinationConfiguration_CopyCommand m_copy_command;
    bool m_copy_command_isSet;
    bool m_copy_command_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    OAIRedshiftDestinationConfiguration_RetryOptions m_retry_options;
    bool m_retry_options_isSet;
    bool m_retry_options_isValid;

    OAIRedshiftDestinationUpdate_S3Update m_s3_update;
    bool m_s3_update_isSet;
    bool m_s3_update_isValid;

    OAIExtendedS3DestinationConfiguration_ProcessingConfiguration m_processing_configuration;
    bool m_processing_configuration_isSet;
    bool m_processing_configuration_isValid;

    OAIRedshiftS3BackupMode m_s3_backup_mode;
    bool m_s3_backup_mode_isSet;
    bool m_s3_backup_mode_isValid;

    OAIExtendedS3DestinationUpdate_S3BackupUpdate m_s3_backup_update;
    bool m_s3_backup_update_isSet;
    bool m_s3_backup_update_isValid;

    OAIS3DestinationDescription_CloudWatchLoggingOptions m_cloud_watch_logging_options;
    bool m_cloud_watch_logging_options_isSet;
    bool m_cloud_watch_logging_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRedshiftDestinationUpdate)

#endif // OAIRedshiftDestinationUpdate_H
