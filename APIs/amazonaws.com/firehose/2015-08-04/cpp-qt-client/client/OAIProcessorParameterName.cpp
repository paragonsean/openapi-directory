/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProcessorParameterName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProcessorParameterName::OAIProcessorParameterName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProcessorParameterName::OAIProcessorParameterName() {
    this->initializeModel();
}

OAIProcessorParameterName::~OAIProcessorParameterName() {}

void OAIProcessorParameterName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProcessorParameterName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProcessorParameterName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LambdaArn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::LAMBDAARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NumberOfRetries", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::NUMBEROFRETRIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MetadataExtractionQuery", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::METADATAEXTRACTIONQUERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JsonParsingEngine", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::JSONPARSINGENGINE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RoleArn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::ROLEARN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BufferSizeInMBs", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::BUFFERSIZEINMBS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BufferIntervalInSeconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::BUFFERINTERVALINSECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SubRecordType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::SUBRECORDTYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Delimiter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProcessorParameterName::DELIMITER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProcessorParameterName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProcessorParameterName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProcessorParameterName::LAMBDAARN:
            val = "LambdaArn";
            break;
        case eOAIProcessorParameterName::NUMBEROFRETRIES:
            val = "NumberOfRetries";
            break;
        case eOAIProcessorParameterName::METADATAEXTRACTIONQUERY:
            val = "MetadataExtractionQuery";
            break;
        case eOAIProcessorParameterName::JSONPARSINGENGINE:
            val = "JsonParsingEngine";
            break;
        case eOAIProcessorParameterName::ROLEARN:
            val = "RoleArn";
            break;
        case eOAIProcessorParameterName::BUFFERSIZEINMBS:
            val = "BufferSizeInMBs";
            break;
        case eOAIProcessorParameterName::BUFFERINTERVALINSECONDS:
            val = "BufferIntervalInSeconds";
            break;
        case eOAIProcessorParameterName::SUBRECORDTYPE:
            val = "SubRecordType";
            break;
        case eOAIProcessorParameterName::DELIMITER:
            val = "Delimiter";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProcessorParameterName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProcessorParameterName::eOAIProcessorParameterName OAIProcessorParameterName::getValue() const {
    return m_value;
}

void OAIProcessorParameterName::setValue(const OAIProcessorParameterName::eOAIProcessorParameterName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProcessorParameterName::isSet() const {
    
    return m_value_isSet;
}

bool OAIProcessorParameterName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
