/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDestinationInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDestinationInput::OAIUpdateDestinationInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDestinationInput::OAIUpdateDestinationInput() {
    this->initializeModel();
}

OAIUpdateDestinationInput::~OAIUpdateDestinationInput() {}

void OAIUpdateDestinationInput::initializeModel() {

    m_delivery_stream_name_isSet = false;
    m_delivery_stream_name_isValid = false;

    m_current_delivery_stream_version_id_isSet = false;
    m_current_delivery_stream_version_id_isValid = false;

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_s3_destination_update_isSet = false;
    m_s3_destination_update_isValid = false;

    m_extended_s3_destination_update_isSet = false;
    m_extended_s3_destination_update_isValid = false;

    m_redshift_destination_update_isSet = false;
    m_redshift_destination_update_isValid = false;

    m_elasticsearch_destination_update_isSet = false;
    m_elasticsearch_destination_update_isValid = false;

    m_amazonopensearchservice_destination_update_isSet = false;
    m_amazonopensearchservice_destination_update_isValid = false;

    m_splunk_destination_update_isSet = false;
    m_splunk_destination_update_isValid = false;

    m_http_endpoint_destination_update_isSet = false;
    m_http_endpoint_destination_update_isValid = false;

    m_amazon_open_search_serverless_destination_update_isSet = false;
    m_amazon_open_search_serverless_destination_update_isValid = false;
}

void OAIUpdateDestinationInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDestinationInput::fromJsonObject(QJsonObject json) {

    m_delivery_stream_name_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_name, json[QString("DeliveryStreamName")]);
    m_delivery_stream_name_isSet = !json[QString("DeliveryStreamName")].isNull() && m_delivery_stream_name_isValid;

    m_current_delivery_stream_version_id_isValid = ::OpenAPI::fromJsonValue(m_current_delivery_stream_version_id, json[QString("CurrentDeliveryStreamVersionId")]);
    m_current_delivery_stream_version_id_isSet = !json[QString("CurrentDeliveryStreamVersionId")].isNull() && m_current_delivery_stream_version_id_isValid;

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("DestinationId")]);
    m_destination_id_isSet = !json[QString("DestinationId")].isNull() && m_destination_id_isValid;

    m_s3_destination_update_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_update, json[QString("S3DestinationUpdate")]);
    m_s3_destination_update_isSet = !json[QString("S3DestinationUpdate")].isNull() && m_s3_destination_update_isValid;

    m_extended_s3_destination_update_isValid = ::OpenAPI::fromJsonValue(m_extended_s3_destination_update, json[QString("ExtendedS3DestinationUpdate")]);
    m_extended_s3_destination_update_isSet = !json[QString("ExtendedS3DestinationUpdate")].isNull() && m_extended_s3_destination_update_isValid;

    m_redshift_destination_update_isValid = ::OpenAPI::fromJsonValue(m_redshift_destination_update, json[QString("RedshiftDestinationUpdate")]);
    m_redshift_destination_update_isSet = !json[QString("RedshiftDestinationUpdate")].isNull() && m_redshift_destination_update_isValid;

    m_elasticsearch_destination_update_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_destination_update, json[QString("ElasticsearchDestinationUpdate")]);
    m_elasticsearch_destination_update_isSet = !json[QString("ElasticsearchDestinationUpdate")].isNull() && m_elasticsearch_destination_update_isValid;

    m_amazonopensearchservice_destination_update_isValid = ::OpenAPI::fromJsonValue(m_amazonopensearchservice_destination_update, json[QString("AmazonopensearchserviceDestinationUpdate")]);
    m_amazonopensearchservice_destination_update_isSet = !json[QString("AmazonopensearchserviceDestinationUpdate")].isNull() && m_amazonopensearchservice_destination_update_isValid;

    m_splunk_destination_update_isValid = ::OpenAPI::fromJsonValue(m_splunk_destination_update, json[QString("SplunkDestinationUpdate")]);
    m_splunk_destination_update_isSet = !json[QString("SplunkDestinationUpdate")].isNull() && m_splunk_destination_update_isValid;

    m_http_endpoint_destination_update_isValid = ::OpenAPI::fromJsonValue(m_http_endpoint_destination_update, json[QString("HttpEndpointDestinationUpdate")]);
    m_http_endpoint_destination_update_isSet = !json[QString("HttpEndpointDestinationUpdate")].isNull() && m_http_endpoint_destination_update_isValid;

    m_amazon_open_search_serverless_destination_update_isValid = ::OpenAPI::fromJsonValue(m_amazon_open_search_serverless_destination_update, json[QString("AmazonOpenSearchServerlessDestinationUpdate")]);
    m_amazon_open_search_serverless_destination_update_isSet = !json[QString("AmazonOpenSearchServerlessDestinationUpdate")].isNull() && m_amazon_open_search_serverless_destination_update_isValid;
}

QString OAIUpdateDestinationInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDestinationInput::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_stream_name_isSet) {
        obj.insert(QString("DeliveryStreamName"), ::OpenAPI::toJsonValue(m_delivery_stream_name));
    }
    if (m_current_delivery_stream_version_id_isSet) {
        obj.insert(QString("CurrentDeliveryStreamVersionId"), ::OpenAPI::toJsonValue(m_current_delivery_stream_version_id));
    }
    if (m_destination_id_isSet) {
        obj.insert(QString("DestinationId"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_s3_destination_update.isSet()) {
        obj.insert(QString("S3DestinationUpdate"), ::OpenAPI::toJsonValue(m_s3_destination_update));
    }
    if (m_extended_s3_destination_update.isSet()) {
        obj.insert(QString("ExtendedS3DestinationUpdate"), ::OpenAPI::toJsonValue(m_extended_s3_destination_update));
    }
    if (m_redshift_destination_update.isSet()) {
        obj.insert(QString("RedshiftDestinationUpdate"), ::OpenAPI::toJsonValue(m_redshift_destination_update));
    }
    if (m_elasticsearch_destination_update.isSet()) {
        obj.insert(QString("ElasticsearchDestinationUpdate"), ::OpenAPI::toJsonValue(m_elasticsearch_destination_update));
    }
    if (m_amazonopensearchservice_destination_update.isSet()) {
        obj.insert(QString("AmazonopensearchserviceDestinationUpdate"), ::OpenAPI::toJsonValue(m_amazonopensearchservice_destination_update));
    }
    if (m_splunk_destination_update.isSet()) {
        obj.insert(QString("SplunkDestinationUpdate"), ::OpenAPI::toJsonValue(m_splunk_destination_update));
    }
    if (m_http_endpoint_destination_update.isSet()) {
        obj.insert(QString("HttpEndpointDestinationUpdate"), ::OpenAPI::toJsonValue(m_http_endpoint_destination_update));
    }
    if (m_amazon_open_search_serverless_destination_update.isSet()) {
        obj.insert(QString("AmazonOpenSearchServerlessDestinationUpdate"), ::OpenAPI::toJsonValue(m_amazon_open_search_serverless_destination_update));
    }
    return obj;
}

QString OAIUpdateDestinationInput::getDeliveryStreamName() const {
    return m_delivery_stream_name;
}
void OAIUpdateDestinationInput::setDeliveryStreamName(const QString &delivery_stream_name) {
    m_delivery_stream_name = delivery_stream_name;
    m_delivery_stream_name_isSet = true;
}

bool OAIUpdateDestinationInput::is_delivery_stream_name_Set() const{
    return m_delivery_stream_name_isSet;
}

bool OAIUpdateDestinationInput::is_delivery_stream_name_Valid() const{
    return m_delivery_stream_name_isValid;
}

QString OAIUpdateDestinationInput::getCurrentDeliveryStreamVersionId() const {
    return m_current_delivery_stream_version_id;
}
void OAIUpdateDestinationInput::setCurrentDeliveryStreamVersionId(const QString &current_delivery_stream_version_id) {
    m_current_delivery_stream_version_id = current_delivery_stream_version_id;
    m_current_delivery_stream_version_id_isSet = true;
}

bool OAIUpdateDestinationInput::is_current_delivery_stream_version_id_Set() const{
    return m_current_delivery_stream_version_id_isSet;
}

bool OAIUpdateDestinationInput::is_current_delivery_stream_version_id_Valid() const{
    return m_current_delivery_stream_version_id_isValid;
}

QString OAIUpdateDestinationInput::getDestinationId() const {
    return m_destination_id;
}
void OAIUpdateDestinationInput::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIUpdateDestinationInput::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIUpdateDestinationInput::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

OAIUpdateDestinationInput_S3DestinationUpdate OAIUpdateDestinationInput::getS3DestinationUpdate() const {
    return m_s3_destination_update;
}
void OAIUpdateDestinationInput::setS3DestinationUpdate(const OAIUpdateDestinationInput_S3DestinationUpdate &s3_destination_update) {
    m_s3_destination_update = s3_destination_update;
    m_s3_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_s3_destination_update_Set() const{
    return m_s3_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_s3_destination_update_Valid() const{
    return m_s3_destination_update_isValid;
}

OAIUpdateDestinationInput_ExtendedS3DestinationUpdate OAIUpdateDestinationInput::getExtendedS3DestinationUpdate() const {
    return m_extended_s3_destination_update;
}
void OAIUpdateDestinationInput::setExtendedS3DestinationUpdate(const OAIUpdateDestinationInput_ExtendedS3DestinationUpdate &extended_s3_destination_update) {
    m_extended_s3_destination_update = extended_s3_destination_update;
    m_extended_s3_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_extended_s3_destination_update_Set() const{
    return m_extended_s3_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_extended_s3_destination_update_Valid() const{
    return m_extended_s3_destination_update_isValid;
}

OAIUpdateDestinationInput_RedshiftDestinationUpdate OAIUpdateDestinationInput::getRedshiftDestinationUpdate() const {
    return m_redshift_destination_update;
}
void OAIUpdateDestinationInput::setRedshiftDestinationUpdate(const OAIUpdateDestinationInput_RedshiftDestinationUpdate &redshift_destination_update) {
    m_redshift_destination_update = redshift_destination_update;
    m_redshift_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_redshift_destination_update_Set() const{
    return m_redshift_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_redshift_destination_update_Valid() const{
    return m_redshift_destination_update_isValid;
}

OAIUpdateDestinationInput_ElasticsearchDestinationUpdate OAIUpdateDestinationInput::getElasticsearchDestinationUpdate() const {
    return m_elasticsearch_destination_update;
}
void OAIUpdateDestinationInput::setElasticsearchDestinationUpdate(const OAIUpdateDestinationInput_ElasticsearchDestinationUpdate &elasticsearch_destination_update) {
    m_elasticsearch_destination_update = elasticsearch_destination_update;
    m_elasticsearch_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_elasticsearch_destination_update_Set() const{
    return m_elasticsearch_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_elasticsearch_destination_update_Valid() const{
    return m_elasticsearch_destination_update_isValid;
}

OAIUpdateDestinationInput_AmazonopensearchserviceDestinationUpdate OAIUpdateDestinationInput::getAmazonopensearchserviceDestinationUpdate() const {
    return m_amazonopensearchservice_destination_update;
}
void OAIUpdateDestinationInput::setAmazonopensearchserviceDestinationUpdate(const OAIUpdateDestinationInput_AmazonopensearchserviceDestinationUpdate &amazonopensearchservice_destination_update) {
    m_amazonopensearchservice_destination_update = amazonopensearchservice_destination_update;
    m_amazonopensearchservice_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_amazonopensearchservice_destination_update_Set() const{
    return m_amazonopensearchservice_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_amazonopensearchservice_destination_update_Valid() const{
    return m_amazonopensearchservice_destination_update_isValid;
}

OAIUpdateDestinationInput_SplunkDestinationUpdate OAIUpdateDestinationInput::getSplunkDestinationUpdate() const {
    return m_splunk_destination_update;
}
void OAIUpdateDestinationInput::setSplunkDestinationUpdate(const OAIUpdateDestinationInput_SplunkDestinationUpdate &splunk_destination_update) {
    m_splunk_destination_update = splunk_destination_update;
    m_splunk_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_splunk_destination_update_Set() const{
    return m_splunk_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_splunk_destination_update_Valid() const{
    return m_splunk_destination_update_isValid;
}

OAIUpdateDestinationInput_HttpEndpointDestinationUpdate OAIUpdateDestinationInput::getHttpEndpointDestinationUpdate() const {
    return m_http_endpoint_destination_update;
}
void OAIUpdateDestinationInput::setHttpEndpointDestinationUpdate(const OAIUpdateDestinationInput_HttpEndpointDestinationUpdate &http_endpoint_destination_update) {
    m_http_endpoint_destination_update = http_endpoint_destination_update;
    m_http_endpoint_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_http_endpoint_destination_update_Set() const{
    return m_http_endpoint_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_http_endpoint_destination_update_Valid() const{
    return m_http_endpoint_destination_update_isValid;
}

OAIUpdateDestinationInput_AmazonOpenSearchServerlessDestinationUpdate OAIUpdateDestinationInput::getAmazonOpenSearchServerlessDestinationUpdate() const {
    return m_amazon_open_search_serverless_destination_update;
}
void OAIUpdateDestinationInput::setAmazonOpenSearchServerlessDestinationUpdate(const OAIUpdateDestinationInput_AmazonOpenSearchServerlessDestinationUpdate &amazon_open_search_serverless_destination_update) {
    m_amazon_open_search_serverless_destination_update = amazon_open_search_serverless_destination_update;
    m_amazon_open_search_serverless_destination_update_isSet = true;
}

bool OAIUpdateDestinationInput::is_amazon_open_search_serverless_destination_update_Set() const{
    return m_amazon_open_search_serverless_destination_update_isSet;
}

bool OAIUpdateDestinationInput::is_amazon_open_search_serverless_destination_update_Valid() const{
    return m_amazon_open_search_serverless_destination_update_isValid;
}

bool OAIUpdateDestinationInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_delivery_stream_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_s3_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazonopensearchservice_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splunk_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_endpoint_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_open_search_serverless_destination_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDestinationInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_stream_name_isValid && m_current_delivery_stream_version_id_isValid && m_destination_id_isValid && true;
}

} // namespace OpenAPI
