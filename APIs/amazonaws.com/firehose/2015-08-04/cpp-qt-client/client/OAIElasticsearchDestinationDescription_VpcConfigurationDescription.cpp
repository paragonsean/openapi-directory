/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticsearchDestinationDescription_VpcConfigurationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticsearchDestinationDescription_VpcConfigurationDescription::OAIElasticsearchDestinationDescription_VpcConfigurationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticsearchDestinationDescription_VpcConfigurationDescription::OAIElasticsearchDestinationDescription_VpcConfigurationDescription() {
    this->initializeModel();
}

OAIElasticsearchDestinationDescription_VpcConfigurationDescription::~OAIElasticsearchDestinationDescription_VpcConfigurationDescription() {}

void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::initializeModel() {

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::fromJsonObject(QJsonObject json) {

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("SubnetIds")]);
    m_subnet_ids_isSet = !json[QString("SubnetIds")].isNull() && m_subnet_ids_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("SecurityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("SecurityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("VpcId")]);
    m_vpc_id_isSet = !json[QString("VpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIElasticsearchDestinationDescription_VpcConfigurationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticsearchDestinationDescription_VpcConfigurationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("SubnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("SecurityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("VpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QList OAIElasticsearchDestinationDescription_VpcConfigurationDescription::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QString OAIElasticsearchDestinationDescription_VpcConfigurationDescription::getRoleArn() const {
    return m_role_arn;
}
void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAIElasticsearchDestinationDescription_VpcConfigurationDescription::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QString OAIElasticsearchDestinationDescription_VpcConfigurationDescription::getVpcId() const {
    return m_vpc_id;
}
void OAIElasticsearchDestinationDescription_VpcConfigurationDescription::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticsearchDestinationDescription_VpcConfigurationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_subnet_ids_isValid && m_role_arn_isValid && m_security_group_ids_isValid && m_vpc_id_isValid && true;
}

} // namespace OpenAPI
