/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpEndpointDestinationDescription_EndpointConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpEndpointDestinationDescription_EndpointConfiguration::OAIHttpEndpointDestinationDescription_EndpointConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpEndpointDestinationDescription_EndpointConfiguration::OAIHttpEndpointDestinationDescription_EndpointConfiguration() {
    this->initializeModel();
}

OAIHttpEndpointDestinationDescription_EndpointConfiguration::~OAIHttpEndpointDestinationDescription_EndpointConfiguration() {}

void OAIHttpEndpointDestinationDescription_EndpointConfiguration::initializeModel() {

    m_url_isSet = false;
    m_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIHttpEndpointDestinationDescription_EndpointConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpEndpointDestinationDescription_EndpointConfiguration::fromJsonObject(QJsonObject json) {

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("Url")]);
    m_url_isSet = !json[QString("Url")].isNull() && m_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIHttpEndpointDestinationDescription_EndpointConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpEndpointDestinationDescription_EndpointConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_url_isSet) {
        obj.insert(QString("Url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIHttpEndpointDestinationDescription_EndpointConfiguration::getUrl() const {
    return m_url;
}
void OAIHttpEndpointDestinationDescription_EndpointConfiguration::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIHttpEndpointDestinationDescription_EndpointConfiguration::is_url_Set() const{
    return m_url_isSet;
}

bool OAIHttpEndpointDestinationDescription_EndpointConfiguration::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIHttpEndpointDestinationDescription_EndpointConfiguration::getName() const {
    return m_name;
}
void OAIHttpEndpointDestinationDescription_EndpointConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHttpEndpointDestinationDescription_EndpointConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHttpEndpointDestinationDescription_EndpointConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIHttpEndpointDestinationDescription_EndpointConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpEndpointDestinationDescription_EndpointConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
