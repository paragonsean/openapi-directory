/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStopDeliveryStreamEncryptionInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStopDeliveryStreamEncryptionInput::OAIStopDeliveryStreamEncryptionInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStopDeliveryStreamEncryptionInput::OAIStopDeliveryStreamEncryptionInput() {
    this->initializeModel();
}

OAIStopDeliveryStreamEncryptionInput::~OAIStopDeliveryStreamEncryptionInput() {}

void OAIStopDeliveryStreamEncryptionInput::initializeModel() {

    m_delivery_stream_name_isSet = false;
    m_delivery_stream_name_isValid = false;
}

void OAIStopDeliveryStreamEncryptionInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStopDeliveryStreamEncryptionInput::fromJsonObject(QJsonObject json) {

    m_delivery_stream_name_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_name, json[QString("DeliveryStreamName")]);
    m_delivery_stream_name_isSet = !json[QString("DeliveryStreamName")].isNull() && m_delivery_stream_name_isValid;
}

QString OAIStopDeliveryStreamEncryptionInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStopDeliveryStreamEncryptionInput::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_stream_name_isSet) {
        obj.insert(QString("DeliveryStreamName"), ::OpenAPI::toJsonValue(m_delivery_stream_name));
    }
    return obj;
}

QString OAIStopDeliveryStreamEncryptionInput::getDeliveryStreamName() const {
    return m_delivery_stream_name;
}
void OAIStopDeliveryStreamEncryptionInput::setDeliveryStreamName(const QString &delivery_stream_name) {
    m_delivery_stream_name = delivery_stream_name;
    m_delivery_stream_name_isSet = true;
}

bool OAIStopDeliveryStreamEncryptionInput::is_delivery_stream_name_Set() const{
    return m_delivery_stream_name_isSet;
}

bool OAIStopDeliveryStreamEncryptionInput::is_delivery_stream_name_Valid() const{
    return m_delivery_stream_name_isValid;
}

bool OAIStopDeliveryStreamEncryptionInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStopDeliveryStreamEncryptionInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_stream_name_isValid && true;
}

} // namespace OpenAPI
