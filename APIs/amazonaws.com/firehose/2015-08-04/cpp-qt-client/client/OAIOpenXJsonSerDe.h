/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOpenXJsonSerDe.h
 *
 * The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
 */

#ifndef OAIOpenXJsonSerDe_H
#define OAIOpenXJsonSerDe_H

#include <QJsonObject>

#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOpenXJsonSerDe : public OAIObject {
public:
    OAIOpenXJsonSerDe();
    OAIOpenXJsonSerDe(QString json);
    ~OAIOpenXJsonSerDe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getConvertDotsInJsonKeysToUnderscores() const;
    void setConvertDotsInJsonKeysToUnderscores(const bool &convert_dots_in_json_keys_to_underscores);
    bool is_convert_dots_in_json_keys_to_underscores_Set() const;
    bool is_convert_dots_in_json_keys_to_underscores_Valid() const;

    bool getCaseInsensitive() const;
    void setCaseInsensitive(const bool &case_insensitive);
    bool is_case_insensitive_Set() const;
    bool is_case_insensitive_Valid() const;

    QMap getColumnToJsonKeyMappings() const;
    void setColumnToJsonKeyMappings(const QMap &column_to_json_key_mappings);
    bool is_column_to_json_key_mappings_Set() const;
    bool is_column_to_json_key_mappings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_convert_dots_in_json_keys_to_underscores;
    bool m_convert_dots_in_json_keys_to_underscores_isSet;
    bool m_convert_dots_in_json_keys_to_underscores_isValid;

    bool m_case_insensitive;
    bool m_case_insensitive_isSet;
    bool m_case_insensitive_isValid;

    QMap m_column_to_json_key_mappings;
    bool m_column_to_json_key_mappings_isSet;
    bool m_column_to_json_key_mappings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOpenXJsonSerDe)

#endif // OAIOpenXJsonSerDe_H
