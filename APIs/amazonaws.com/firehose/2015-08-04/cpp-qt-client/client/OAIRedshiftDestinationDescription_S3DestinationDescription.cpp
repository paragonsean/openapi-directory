/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftDestinationDescription_S3DestinationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftDestinationDescription_S3DestinationDescription::OAIRedshiftDestinationDescription_S3DestinationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftDestinationDescription_S3DestinationDescription::OAIRedshiftDestinationDescription_S3DestinationDescription() {
    this->initializeModel();
}

OAIRedshiftDestinationDescription_S3DestinationDescription::~OAIRedshiftDestinationDescription_S3DestinationDescription() {}

void OAIRedshiftDestinationDescription_S3DestinationDescription::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_error_output_prefix_isSet = false;
    m_error_output_prefix_isValid = false;

    m_buffering_hints_isSet = false;
    m_buffering_hints_isValid = false;

    m_compression_format_isSet = false;
    m_compression_format_isValid = false;

    m_encryption_configuration_isSet = false;
    m_encryption_configuration_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;
}

void OAIRedshiftDestinationDescription_S3DestinationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftDestinationDescription_S3DestinationDescription::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketARN")]);
    m_bucket_arn_isSet = !json[QString("BucketARN")].isNull() && m_bucket_arn_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("Prefix")]);
    m_prefix_isSet = !json[QString("Prefix")].isNull() && m_prefix_isValid;

    m_error_output_prefix_isValid = ::OpenAPI::fromJsonValue(m_error_output_prefix, json[QString("ErrorOutputPrefix")]);
    m_error_output_prefix_isSet = !json[QString("ErrorOutputPrefix")].isNull() && m_error_output_prefix_isValid;

    m_buffering_hints_isValid = ::OpenAPI::fromJsonValue(m_buffering_hints, json[QString("BufferingHints")]);
    m_buffering_hints_isSet = !json[QString("BufferingHints")].isNull() && m_buffering_hints_isValid;

    m_compression_format_isValid = ::OpenAPI::fromJsonValue(m_compression_format, json[QString("CompressionFormat")]);
    m_compression_format_isSet = !json[QString("CompressionFormat")].isNull() && m_compression_format_isValid;

    m_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_encryption_configuration, json[QString("EncryptionConfiguration")]);
    m_encryption_configuration_isSet = !json[QString("EncryptionConfiguration")].isNull() && m_encryption_configuration_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;
}

QString OAIRedshiftDestinationDescription_S3DestinationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftDestinationDescription_S3DestinationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketARN"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("Prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_error_output_prefix_isSet) {
        obj.insert(QString("ErrorOutputPrefix"), ::OpenAPI::toJsonValue(m_error_output_prefix));
    }
    if (m_buffering_hints.isSet()) {
        obj.insert(QString("BufferingHints"), ::OpenAPI::toJsonValue(m_buffering_hints));
    }
    if (m_compression_format.isSet()) {
        obj.insert(QString("CompressionFormat"), ::OpenAPI::toJsonValue(m_compression_format));
    }
    if (m_encryption_configuration.isSet()) {
        obj.insert(QString("EncryptionConfiguration"), ::OpenAPI::toJsonValue(m_encryption_configuration));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    return obj;
}

QString OAIRedshiftDestinationDescription_S3DestinationDescription::getRoleArn() const {
    return m_role_arn;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIRedshiftDestinationDescription_S3DestinationDescription::getBucketArn() const {
    return m_bucket_arn;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

QString OAIRedshiftDestinationDescription_S3DestinationDescription::getPrefix() const {
    return m_prefix;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIRedshiftDestinationDescription_S3DestinationDescription::getErrorOutputPrefix() const {
    return m_error_output_prefix;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setErrorOutputPrefix(const QString &error_output_prefix) {
    m_error_output_prefix = error_output_prefix;
    m_error_output_prefix_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_error_output_prefix_Set() const{
    return m_error_output_prefix_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_error_output_prefix_Valid() const{
    return m_error_output_prefix_isValid;
}

OAIS3DestinationConfiguration_BufferingHints OAIRedshiftDestinationDescription_S3DestinationDescription::getBufferingHints() const {
    return m_buffering_hints;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setBufferingHints(const OAIS3DestinationConfiguration_BufferingHints &buffering_hints) {
    m_buffering_hints = buffering_hints;
    m_buffering_hints_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_buffering_hints_Set() const{
    return m_buffering_hints_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_buffering_hints_Valid() const{
    return m_buffering_hints_isValid;
}

OAICompressionFormat OAIRedshiftDestinationDescription_S3DestinationDescription::getCompressionFormat() const {
    return m_compression_format;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setCompressionFormat(const OAICompressionFormat &compression_format) {
    m_compression_format = compression_format;
    m_compression_format_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_compression_format_Set() const{
    return m_compression_format_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_compression_format_Valid() const{
    return m_compression_format_isValid;
}

OAIS3DestinationConfiguration_EncryptionConfiguration OAIRedshiftDestinationDescription_S3DestinationDescription::getEncryptionConfiguration() const {
    return m_encryption_configuration;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setEncryptionConfiguration(const OAIS3DestinationConfiguration_EncryptionConfiguration &encryption_configuration) {
    m_encryption_configuration = encryption_configuration;
    m_encryption_configuration_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_encryption_configuration_Set() const{
    return m_encryption_configuration_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_encryption_configuration_Valid() const{
    return m_encryption_configuration_isValid;
}

OAIS3DestinationDescription_CloudWatchLoggingOptions OAIRedshiftDestinationDescription_S3DestinationDescription::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAIRedshiftDestinationDescription_S3DestinationDescription::setCloudWatchLoggingOptions(const OAIS3DestinationDescription_CloudWatchLoggingOptions &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_output_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffering_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftDestinationDescription_S3DestinationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_bucket_arn_isValid && m_buffering_hints_isValid && m_compression_format_isValid && m_encryption_configuration_isValid && true;
}

} // namespace OpenAPI
