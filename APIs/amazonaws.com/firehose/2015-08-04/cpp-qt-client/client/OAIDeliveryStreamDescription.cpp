/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryStreamDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryStreamDescription::OAIDeliveryStreamDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryStreamDescription::OAIDeliveryStreamDescription() {
    this->initializeModel();
}

OAIDeliveryStreamDescription::~OAIDeliveryStreamDescription() {}

void OAIDeliveryStreamDescription::initializeModel() {

    m_delivery_stream_name_isSet = false;
    m_delivery_stream_name_isValid = false;

    m_delivery_stream_arn_isSet = false;
    m_delivery_stream_arn_isValid = false;

    m_delivery_stream_status_isSet = false;
    m_delivery_stream_status_isValid = false;

    m_failure_description_isSet = false;
    m_failure_description_isValid = false;

    m_delivery_stream_encryption_configuration_isSet = false;
    m_delivery_stream_encryption_configuration_isValid = false;

    m_delivery_stream_type_isSet = false;
    m_delivery_stream_type_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;

    m_create_timestamp_isSet = false;
    m_create_timestamp_isValid = false;

    m_last_update_timestamp_isSet = false;
    m_last_update_timestamp_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_has_more_destinations_isSet = false;
    m_has_more_destinations_isValid = false;
}

void OAIDeliveryStreamDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryStreamDescription::fromJsonObject(QJsonObject json) {

    m_delivery_stream_name_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_name, json[QString("DeliveryStreamName")]);
    m_delivery_stream_name_isSet = !json[QString("DeliveryStreamName")].isNull() && m_delivery_stream_name_isValid;

    m_delivery_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_arn, json[QString("DeliveryStreamARN")]);
    m_delivery_stream_arn_isSet = !json[QString("DeliveryStreamARN")].isNull() && m_delivery_stream_arn_isValid;

    m_delivery_stream_status_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_status, json[QString("DeliveryStreamStatus")]);
    m_delivery_stream_status_isSet = !json[QString("DeliveryStreamStatus")].isNull() && m_delivery_stream_status_isValid;

    m_failure_description_isValid = ::OpenAPI::fromJsonValue(m_failure_description, json[QString("FailureDescription")]);
    m_failure_description_isSet = !json[QString("FailureDescription")].isNull() && m_failure_description_isValid;

    m_delivery_stream_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_encryption_configuration, json[QString("DeliveryStreamEncryptionConfiguration")]);
    m_delivery_stream_encryption_configuration_isSet = !json[QString("DeliveryStreamEncryptionConfiguration")].isNull() && m_delivery_stream_encryption_configuration_isValid;

    m_delivery_stream_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_type, json[QString("DeliveryStreamType")]);
    m_delivery_stream_type_isSet = !json[QString("DeliveryStreamType")].isNull() && m_delivery_stream_type_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;

    m_create_timestamp_isValid = ::OpenAPI::fromJsonValue(m_create_timestamp, json[QString("CreateTimestamp")]);
    m_create_timestamp_isSet = !json[QString("CreateTimestamp")].isNull() && m_create_timestamp_isValid;

    m_last_update_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_update_timestamp, json[QString("LastUpdateTimestamp")]);
    m_last_update_timestamp_isSet = !json[QString("LastUpdateTimestamp")].isNull() && m_last_update_timestamp_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("Destinations")]);
    m_destinations_isSet = !json[QString("Destinations")].isNull() && m_destinations_isValid;

    m_has_more_destinations_isValid = ::OpenAPI::fromJsonValue(m_has_more_destinations, json[QString("HasMoreDestinations")]);
    m_has_more_destinations_isSet = !json[QString("HasMoreDestinations")].isNull() && m_has_more_destinations_isValid;
}

QString OAIDeliveryStreamDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryStreamDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_stream_name_isSet) {
        obj.insert(QString("DeliveryStreamName"), ::OpenAPI::toJsonValue(m_delivery_stream_name));
    }
    if (m_delivery_stream_arn_isSet) {
        obj.insert(QString("DeliveryStreamARN"), ::OpenAPI::toJsonValue(m_delivery_stream_arn));
    }
    if (m_delivery_stream_status.isSet()) {
        obj.insert(QString("DeliveryStreamStatus"), ::OpenAPI::toJsonValue(m_delivery_stream_status));
    }
    if (m_failure_description.isSet()) {
        obj.insert(QString("FailureDescription"), ::OpenAPI::toJsonValue(m_failure_description));
    }
    if (m_delivery_stream_encryption_configuration.isSet()) {
        obj.insert(QString("DeliveryStreamEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_delivery_stream_encryption_configuration));
    }
    if (m_delivery_stream_type.isSet()) {
        obj.insert(QString("DeliveryStreamType"), ::OpenAPI::toJsonValue(m_delivery_stream_type));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    if (m_create_timestamp_isSet) {
        obj.insert(QString("CreateTimestamp"), ::OpenAPI::toJsonValue(m_create_timestamp));
    }
    if (m_last_update_timestamp_isSet) {
        obj.insert(QString("LastUpdateTimestamp"), ::OpenAPI::toJsonValue(m_last_update_timestamp));
    }
    if (m_source.isSet()) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_destinations.isSet()) {
        obj.insert(QString("Destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_has_more_destinations_isSet) {
        obj.insert(QString("HasMoreDestinations"), ::OpenAPI::toJsonValue(m_has_more_destinations));
    }
    return obj;
}

QString OAIDeliveryStreamDescription::getDeliveryStreamName() const {
    return m_delivery_stream_name;
}
void OAIDeliveryStreamDescription::setDeliveryStreamName(const QString &delivery_stream_name) {
    m_delivery_stream_name = delivery_stream_name;
    m_delivery_stream_name_isSet = true;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_name_Set() const{
    return m_delivery_stream_name_isSet;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_name_Valid() const{
    return m_delivery_stream_name_isValid;
}

QString OAIDeliveryStreamDescription::getDeliveryStreamArn() const {
    return m_delivery_stream_arn;
}
void OAIDeliveryStreamDescription::setDeliveryStreamArn(const QString &delivery_stream_arn) {
    m_delivery_stream_arn = delivery_stream_arn;
    m_delivery_stream_arn_isSet = true;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_arn_Set() const{
    return m_delivery_stream_arn_isSet;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_arn_Valid() const{
    return m_delivery_stream_arn_isValid;
}

OAIDeliveryStreamStatus OAIDeliveryStreamDescription::getDeliveryStreamStatus() const {
    return m_delivery_stream_status;
}
void OAIDeliveryStreamDescription::setDeliveryStreamStatus(const OAIDeliveryStreamStatus &delivery_stream_status) {
    m_delivery_stream_status = delivery_stream_status;
    m_delivery_stream_status_isSet = true;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_status_Set() const{
    return m_delivery_stream_status_isSet;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_status_Valid() const{
    return m_delivery_stream_status_isValid;
}

OAIDeliveryStreamEncryptionConfiguration_FailureDescription OAIDeliveryStreamDescription::getFailureDescription() const {
    return m_failure_description;
}
void OAIDeliveryStreamDescription::setFailureDescription(const OAIDeliveryStreamEncryptionConfiguration_FailureDescription &failure_description) {
    m_failure_description = failure_description;
    m_failure_description_isSet = true;
}

bool OAIDeliveryStreamDescription::is_failure_description_Set() const{
    return m_failure_description_isSet;
}

bool OAIDeliveryStreamDescription::is_failure_description_Valid() const{
    return m_failure_description_isValid;
}

OAIDeliveryStreamDescription_DeliveryStreamEncryptionConfiguration OAIDeliveryStreamDescription::getDeliveryStreamEncryptionConfiguration() const {
    return m_delivery_stream_encryption_configuration;
}
void OAIDeliveryStreamDescription::setDeliveryStreamEncryptionConfiguration(const OAIDeliveryStreamDescription_DeliveryStreamEncryptionConfiguration &delivery_stream_encryption_configuration) {
    m_delivery_stream_encryption_configuration = delivery_stream_encryption_configuration;
    m_delivery_stream_encryption_configuration_isSet = true;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_encryption_configuration_Set() const{
    return m_delivery_stream_encryption_configuration_isSet;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_encryption_configuration_Valid() const{
    return m_delivery_stream_encryption_configuration_isValid;
}

OAIDeliveryStreamType OAIDeliveryStreamDescription::getDeliveryStreamType() const {
    return m_delivery_stream_type;
}
void OAIDeliveryStreamDescription::setDeliveryStreamType(const OAIDeliveryStreamType &delivery_stream_type) {
    m_delivery_stream_type = delivery_stream_type;
    m_delivery_stream_type_isSet = true;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_type_Set() const{
    return m_delivery_stream_type_isSet;
}

bool OAIDeliveryStreamDescription::is_delivery_stream_type_Valid() const{
    return m_delivery_stream_type_isValid;
}

QString OAIDeliveryStreamDescription::getVersionId() const {
    return m_version_id;
}
void OAIDeliveryStreamDescription::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIDeliveryStreamDescription::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIDeliveryStreamDescription::is_version_id_Valid() const{
    return m_version_id_isValid;
}

QDateTime OAIDeliveryStreamDescription::getCreateTimestamp() const {
    return m_create_timestamp;
}
void OAIDeliveryStreamDescription::setCreateTimestamp(const QDateTime &create_timestamp) {
    m_create_timestamp = create_timestamp;
    m_create_timestamp_isSet = true;
}

bool OAIDeliveryStreamDescription::is_create_timestamp_Set() const{
    return m_create_timestamp_isSet;
}

bool OAIDeliveryStreamDescription::is_create_timestamp_Valid() const{
    return m_create_timestamp_isValid;
}

QDateTime OAIDeliveryStreamDescription::getLastUpdateTimestamp() const {
    return m_last_update_timestamp;
}
void OAIDeliveryStreamDescription::setLastUpdateTimestamp(const QDateTime &last_update_timestamp) {
    m_last_update_timestamp = last_update_timestamp;
    m_last_update_timestamp_isSet = true;
}

bool OAIDeliveryStreamDescription::is_last_update_timestamp_Set() const{
    return m_last_update_timestamp_isSet;
}

bool OAIDeliveryStreamDescription::is_last_update_timestamp_Valid() const{
    return m_last_update_timestamp_isValid;
}

OAIDeliveryStreamDescription_Source OAIDeliveryStreamDescription::getSource() const {
    return m_source;
}
void OAIDeliveryStreamDescription::setSource(const OAIDeliveryStreamDescription_Source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDeliveryStreamDescription::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDeliveryStreamDescription::is_source_Valid() const{
    return m_source_isValid;
}

QList OAIDeliveryStreamDescription::getDestinations() const {
    return m_destinations;
}
void OAIDeliveryStreamDescription::setDestinations(const QList &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIDeliveryStreamDescription::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIDeliveryStreamDescription::is_destinations_Valid() const{
    return m_destinations_isValid;
}

bool OAIDeliveryStreamDescription::getHasMoreDestinations() const {
    return m_has_more_destinations;
}
void OAIDeliveryStreamDescription::setHasMoreDestinations(const bool &has_more_destinations) {
    m_has_more_destinations = has_more_destinations;
    m_has_more_destinations_isSet = true;
}

bool OAIDeliveryStreamDescription::is_has_more_destinations_Set() const{
    return m_has_more_destinations_isSet;
}

bool OAIDeliveryStreamDescription::is_has_more_destinations_Valid() const{
    return m_has_more_destinations_isValid;
}

bool OAIDeliveryStreamDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_stream_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_stream_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_stream_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_more_destinations_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryStreamDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_stream_name_isValid && m_delivery_stream_arn_isValid && m_delivery_stream_status_isValid && m_delivery_stream_type_isValid && m_version_id_isValid && m_destinations_isValid && m_has_more_destinations_isValid && true;
}

} // namespace OpenAPI
