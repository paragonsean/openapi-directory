/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedshiftDestinationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedshiftDestinationUpdate::OAIRedshiftDestinationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedshiftDestinationUpdate::OAIRedshiftDestinationUpdate() {
    this->initializeModel();
}

OAIRedshiftDestinationUpdate::~OAIRedshiftDestinationUpdate() {}

void OAIRedshiftDestinationUpdate::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_cluster_jdbcurl_isSet = false;
    m_cluster_jdbcurl_isValid = false;

    m_copy_command_isSet = false;
    m_copy_command_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_retry_options_isSet = false;
    m_retry_options_isValid = false;

    m_s3_update_isSet = false;
    m_s3_update_isValid = false;

    m_processing_configuration_isSet = false;
    m_processing_configuration_isValid = false;

    m_s3_backup_mode_isSet = false;
    m_s3_backup_mode_isValid = false;

    m_s3_backup_update_isSet = false;
    m_s3_backup_update_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;
}

void OAIRedshiftDestinationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedshiftDestinationUpdate::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_cluster_jdbcurl_isValid = ::OpenAPI::fromJsonValue(m_cluster_jdbcurl, json[QString("ClusterJDBCURL")]);
    m_cluster_jdbcurl_isSet = !json[QString("ClusterJDBCURL")].isNull() && m_cluster_jdbcurl_isValid;

    m_copy_command_isValid = ::OpenAPI::fromJsonValue(m_copy_command, json[QString("CopyCommand")]);
    m_copy_command_isSet = !json[QString("CopyCommand")].isNull() && m_copy_command_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("Username")]);
    m_username_isSet = !json[QString("Username")].isNull() && m_username_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_retry_options_isValid = ::OpenAPI::fromJsonValue(m_retry_options, json[QString("RetryOptions")]);
    m_retry_options_isSet = !json[QString("RetryOptions")].isNull() && m_retry_options_isValid;

    m_s3_update_isValid = ::OpenAPI::fromJsonValue(m_s3_update, json[QString("S3Update")]);
    m_s3_update_isSet = !json[QString("S3Update")].isNull() && m_s3_update_isValid;

    m_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_processing_configuration, json[QString("ProcessingConfiguration")]);
    m_processing_configuration_isSet = !json[QString("ProcessingConfiguration")].isNull() && m_processing_configuration_isValid;

    m_s3_backup_mode_isValid = ::OpenAPI::fromJsonValue(m_s3_backup_mode, json[QString("S3BackupMode")]);
    m_s3_backup_mode_isSet = !json[QString("S3BackupMode")].isNull() && m_s3_backup_mode_isValid;

    m_s3_backup_update_isValid = ::OpenAPI::fromJsonValue(m_s3_backup_update, json[QString("S3BackupUpdate")]);
    m_s3_backup_update_isSet = !json[QString("S3BackupUpdate")].isNull() && m_s3_backup_update_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;
}

QString OAIRedshiftDestinationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedshiftDestinationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_cluster_jdbcurl_isSet) {
        obj.insert(QString("ClusterJDBCURL"), ::OpenAPI::toJsonValue(m_cluster_jdbcurl));
    }
    if (m_copy_command.isSet()) {
        obj.insert(QString("CopyCommand"), ::OpenAPI::toJsonValue(m_copy_command));
    }
    if (m_username_isSet) {
        obj.insert(QString("Username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_retry_options.isSet()) {
        obj.insert(QString("RetryOptions"), ::OpenAPI::toJsonValue(m_retry_options));
    }
    if (m_s3_update.isSet()) {
        obj.insert(QString("S3Update"), ::OpenAPI::toJsonValue(m_s3_update));
    }
    if (m_processing_configuration.isSet()) {
        obj.insert(QString("ProcessingConfiguration"), ::OpenAPI::toJsonValue(m_processing_configuration));
    }
    if (m_s3_backup_mode.isSet()) {
        obj.insert(QString("S3BackupMode"), ::OpenAPI::toJsonValue(m_s3_backup_mode));
    }
    if (m_s3_backup_update.isSet()) {
        obj.insert(QString("S3BackupUpdate"), ::OpenAPI::toJsonValue(m_s3_backup_update));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    return obj;
}

QString OAIRedshiftDestinationUpdate::getRoleArn() const {
    return m_role_arn;
}
void OAIRedshiftDestinationUpdate::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRedshiftDestinationUpdate::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIRedshiftDestinationUpdate::getClusterJdbcurl() const {
    return m_cluster_jdbcurl;
}
void OAIRedshiftDestinationUpdate::setClusterJdbcurl(const QString &cluster_jdbcurl) {
    m_cluster_jdbcurl = cluster_jdbcurl;
    m_cluster_jdbcurl_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_cluster_jdbcurl_Set() const{
    return m_cluster_jdbcurl_isSet;
}

bool OAIRedshiftDestinationUpdate::is_cluster_jdbcurl_Valid() const{
    return m_cluster_jdbcurl_isValid;
}

OAIRedshiftDestinationConfiguration_CopyCommand OAIRedshiftDestinationUpdate::getCopyCommand() const {
    return m_copy_command;
}
void OAIRedshiftDestinationUpdate::setCopyCommand(const OAIRedshiftDestinationConfiguration_CopyCommand &copy_command) {
    m_copy_command = copy_command;
    m_copy_command_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_copy_command_Set() const{
    return m_copy_command_isSet;
}

bool OAIRedshiftDestinationUpdate::is_copy_command_Valid() const{
    return m_copy_command_isValid;
}

QString OAIRedshiftDestinationUpdate::getUsername() const {
    return m_username;
}
void OAIRedshiftDestinationUpdate::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_username_Set() const{
    return m_username_isSet;
}

bool OAIRedshiftDestinationUpdate::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIRedshiftDestinationUpdate::getPassword() const {
    return m_password;
}
void OAIRedshiftDestinationUpdate::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_password_Set() const{
    return m_password_isSet;
}

bool OAIRedshiftDestinationUpdate::is_password_Valid() const{
    return m_password_isValid;
}

OAIRedshiftDestinationConfiguration_RetryOptions OAIRedshiftDestinationUpdate::getRetryOptions() const {
    return m_retry_options;
}
void OAIRedshiftDestinationUpdate::setRetryOptions(const OAIRedshiftDestinationConfiguration_RetryOptions &retry_options) {
    m_retry_options = retry_options;
    m_retry_options_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_retry_options_Set() const{
    return m_retry_options_isSet;
}

bool OAIRedshiftDestinationUpdate::is_retry_options_Valid() const{
    return m_retry_options_isValid;
}

OAIRedshiftDestinationUpdate_S3Update OAIRedshiftDestinationUpdate::getS3Update() const {
    return m_s3_update;
}
void OAIRedshiftDestinationUpdate::setS3Update(const OAIRedshiftDestinationUpdate_S3Update &s3_update) {
    m_s3_update = s3_update;
    m_s3_update_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_s3_update_Set() const{
    return m_s3_update_isSet;
}

bool OAIRedshiftDestinationUpdate::is_s3_update_Valid() const{
    return m_s3_update_isValid;
}

OAIExtendedS3DestinationConfiguration_ProcessingConfiguration OAIRedshiftDestinationUpdate::getProcessingConfiguration() const {
    return m_processing_configuration;
}
void OAIRedshiftDestinationUpdate::setProcessingConfiguration(const OAIExtendedS3DestinationConfiguration_ProcessingConfiguration &processing_configuration) {
    m_processing_configuration = processing_configuration;
    m_processing_configuration_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_processing_configuration_Set() const{
    return m_processing_configuration_isSet;
}

bool OAIRedshiftDestinationUpdate::is_processing_configuration_Valid() const{
    return m_processing_configuration_isValid;
}

OAIRedshiftS3BackupMode OAIRedshiftDestinationUpdate::getS3BackupMode() const {
    return m_s3_backup_mode;
}
void OAIRedshiftDestinationUpdate::setS3BackupMode(const OAIRedshiftS3BackupMode &s3_backup_mode) {
    m_s3_backup_mode = s3_backup_mode;
    m_s3_backup_mode_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_s3_backup_mode_Set() const{
    return m_s3_backup_mode_isSet;
}

bool OAIRedshiftDestinationUpdate::is_s3_backup_mode_Valid() const{
    return m_s3_backup_mode_isValid;
}

OAIExtendedS3DestinationUpdate_S3BackupUpdate OAIRedshiftDestinationUpdate::getS3BackupUpdate() const {
    return m_s3_backup_update;
}
void OAIRedshiftDestinationUpdate::setS3BackupUpdate(const OAIExtendedS3DestinationUpdate_S3BackupUpdate &s3_backup_update) {
    m_s3_backup_update = s3_backup_update;
    m_s3_backup_update_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_s3_backup_update_Set() const{
    return m_s3_backup_update_isSet;
}

bool OAIRedshiftDestinationUpdate::is_s3_backup_update_Valid() const{
    return m_s3_backup_update_isValid;
}

OAIS3DestinationDescription_CloudWatchLoggingOptions OAIRedshiftDestinationUpdate::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAIRedshiftDestinationUpdate::setCloudWatchLoggingOptions(const OAIS3DestinationDescription_CloudWatchLoggingOptions &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAIRedshiftDestinationUpdate::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAIRedshiftDestinationUpdate::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

bool OAIRedshiftDestinationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_jdbcurl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_backup_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_backup_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedshiftDestinationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
