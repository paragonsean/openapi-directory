/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpEndpointDestinationDescription_RequestConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpEndpointDestinationDescription_RequestConfiguration::OAIHttpEndpointDestinationDescription_RequestConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpEndpointDestinationDescription_RequestConfiguration::OAIHttpEndpointDestinationDescription_RequestConfiguration() {
    this->initializeModel();
}

OAIHttpEndpointDestinationDescription_RequestConfiguration::~OAIHttpEndpointDestinationDescription_RequestConfiguration() {}

void OAIHttpEndpointDestinationDescription_RequestConfiguration::initializeModel() {

    m_content_encoding_isSet = false;
    m_content_encoding_isValid = false;

    m_common_attributes_isSet = false;
    m_common_attributes_isValid = false;
}

void OAIHttpEndpointDestinationDescription_RequestConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpEndpointDestinationDescription_RequestConfiguration::fromJsonObject(QJsonObject json) {

    m_content_encoding_isValid = ::OpenAPI::fromJsonValue(m_content_encoding, json[QString("ContentEncoding")]);
    m_content_encoding_isSet = !json[QString("ContentEncoding")].isNull() && m_content_encoding_isValid;

    m_common_attributes_isValid = ::OpenAPI::fromJsonValue(m_common_attributes, json[QString("CommonAttributes")]);
    m_common_attributes_isSet = !json[QString("CommonAttributes")].isNull() && m_common_attributes_isValid;
}

QString OAIHttpEndpointDestinationDescription_RequestConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpEndpointDestinationDescription_RequestConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_content_encoding.isSet()) {
        obj.insert(QString("ContentEncoding"), ::OpenAPI::toJsonValue(m_content_encoding));
    }
    if (m_common_attributes.isSet()) {
        obj.insert(QString("CommonAttributes"), ::OpenAPI::toJsonValue(m_common_attributes));
    }
    return obj;
}

OAIContentEncoding OAIHttpEndpointDestinationDescription_RequestConfiguration::getContentEncoding() const {
    return m_content_encoding;
}
void OAIHttpEndpointDestinationDescription_RequestConfiguration::setContentEncoding(const OAIContentEncoding &content_encoding) {
    m_content_encoding = content_encoding;
    m_content_encoding_isSet = true;
}

bool OAIHttpEndpointDestinationDescription_RequestConfiguration::is_content_encoding_Set() const{
    return m_content_encoding_isSet;
}

bool OAIHttpEndpointDestinationDescription_RequestConfiguration::is_content_encoding_Valid() const{
    return m_content_encoding_isValid;
}

QList OAIHttpEndpointDestinationDescription_RequestConfiguration::getCommonAttributes() const {
    return m_common_attributes;
}
void OAIHttpEndpointDestinationDescription_RequestConfiguration::setCommonAttributes(const QList &common_attributes) {
    m_common_attributes = common_attributes;
    m_common_attributes_isSet = true;
}

bool OAIHttpEndpointDestinationDescription_RequestConfiguration::is_common_attributes_Set() const{
    return m_common_attributes_isSet;
}

bool OAIHttpEndpointDestinationDescription_RequestConfiguration::is_common_attributes_Valid() const{
    return m_common_attributes_isValid;
}

bool OAIHttpEndpointDestinationDescription_RequestConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_encoding.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpEndpointDestinationDescription_RequestConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
