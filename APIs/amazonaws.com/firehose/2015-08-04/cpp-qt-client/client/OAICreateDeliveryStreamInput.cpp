/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDeliveryStreamInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDeliveryStreamInput::OAICreateDeliveryStreamInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDeliveryStreamInput::OAICreateDeliveryStreamInput() {
    this->initializeModel();
}

OAICreateDeliveryStreamInput::~OAICreateDeliveryStreamInput() {}

void OAICreateDeliveryStreamInput::initializeModel() {

    m_delivery_stream_name_isSet = false;
    m_delivery_stream_name_isValid = false;

    m_delivery_stream_type_isSet = false;
    m_delivery_stream_type_isValid = false;

    m_kinesis_stream_source_configuration_isSet = false;
    m_kinesis_stream_source_configuration_isValid = false;

    m_delivery_stream_encryption_configuration_input_isSet = false;
    m_delivery_stream_encryption_configuration_input_isValid = false;

    m_s3_destination_configuration_isSet = false;
    m_s3_destination_configuration_isValid = false;

    m_extended_s3_destination_configuration_isSet = false;
    m_extended_s3_destination_configuration_isValid = false;

    m_redshift_destination_configuration_isSet = false;
    m_redshift_destination_configuration_isValid = false;

    m_elasticsearch_destination_configuration_isSet = false;
    m_elasticsearch_destination_configuration_isValid = false;

    m_amazonopensearchservice_destination_configuration_isSet = false;
    m_amazonopensearchservice_destination_configuration_isValid = false;

    m_splunk_destination_configuration_isSet = false;
    m_splunk_destination_configuration_isValid = false;

    m_http_endpoint_destination_configuration_isSet = false;
    m_http_endpoint_destination_configuration_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_amazon_open_search_serverless_destination_configuration_isSet = false;
    m_amazon_open_search_serverless_destination_configuration_isValid = false;
}

void OAICreateDeliveryStreamInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDeliveryStreamInput::fromJsonObject(QJsonObject json) {

    m_delivery_stream_name_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_name, json[QString("DeliveryStreamName")]);
    m_delivery_stream_name_isSet = !json[QString("DeliveryStreamName")].isNull() && m_delivery_stream_name_isValid;

    m_delivery_stream_type_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_type, json[QString("DeliveryStreamType")]);
    m_delivery_stream_type_isSet = !json[QString("DeliveryStreamType")].isNull() && m_delivery_stream_type_isValid;

    m_kinesis_stream_source_configuration_isValid = ::OpenAPI::fromJsonValue(m_kinesis_stream_source_configuration, json[QString("KinesisStreamSourceConfiguration")]);
    m_kinesis_stream_source_configuration_isSet = !json[QString("KinesisStreamSourceConfiguration")].isNull() && m_kinesis_stream_source_configuration_isValid;

    m_delivery_stream_encryption_configuration_input_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_encryption_configuration_input, json[QString("DeliveryStreamEncryptionConfigurationInput")]);
    m_delivery_stream_encryption_configuration_input_isSet = !json[QString("DeliveryStreamEncryptionConfigurationInput")].isNull() && m_delivery_stream_encryption_configuration_input_isValid;

    m_s3_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_configuration, json[QString("S3DestinationConfiguration")]);
    m_s3_destination_configuration_isSet = !json[QString("S3DestinationConfiguration")].isNull() && m_s3_destination_configuration_isValid;

    m_extended_s3_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_extended_s3_destination_configuration, json[QString("ExtendedS3DestinationConfiguration")]);
    m_extended_s3_destination_configuration_isSet = !json[QString("ExtendedS3DestinationConfiguration")].isNull() && m_extended_s3_destination_configuration_isValid;

    m_redshift_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_redshift_destination_configuration, json[QString("RedshiftDestinationConfiguration")]);
    m_redshift_destination_configuration_isSet = !json[QString("RedshiftDestinationConfiguration")].isNull() && m_redshift_destination_configuration_isValid;

    m_elasticsearch_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_destination_configuration, json[QString("ElasticsearchDestinationConfiguration")]);
    m_elasticsearch_destination_configuration_isSet = !json[QString("ElasticsearchDestinationConfiguration")].isNull() && m_elasticsearch_destination_configuration_isValid;

    m_amazonopensearchservice_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_amazonopensearchservice_destination_configuration, json[QString("AmazonopensearchserviceDestinationConfiguration")]);
    m_amazonopensearchservice_destination_configuration_isSet = !json[QString("AmazonopensearchserviceDestinationConfiguration")].isNull() && m_amazonopensearchservice_destination_configuration_isValid;

    m_splunk_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_splunk_destination_configuration, json[QString("SplunkDestinationConfiguration")]);
    m_splunk_destination_configuration_isSet = !json[QString("SplunkDestinationConfiguration")].isNull() && m_splunk_destination_configuration_isValid;

    m_http_endpoint_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_http_endpoint_destination_configuration, json[QString("HttpEndpointDestinationConfiguration")]);
    m_http_endpoint_destination_configuration_isSet = !json[QString("HttpEndpointDestinationConfiguration")].isNull() && m_http_endpoint_destination_configuration_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_amazon_open_search_serverless_destination_configuration_isValid = ::OpenAPI::fromJsonValue(m_amazon_open_search_serverless_destination_configuration, json[QString("AmazonOpenSearchServerlessDestinationConfiguration")]);
    m_amazon_open_search_serverless_destination_configuration_isSet = !json[QString("AmazonOpenSearchServerlessDestinationConfiguration")].isNull() && m_amazon_open_search_serverless_destination_configuration_isValid;
}

QString OAICreateDeliveryStreamInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDeliveryStreamInput::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_stream_name_isSet) {
        obj.insert(QString("DeliveryStreamName"), ::OpenAPI::toJsonValue(m_delivery_stream_name));
    }
    if (m_delivery_stream_type.isSet()) {
        obj.insert(QString("DeliveryStreamType"), ::OpenAPI::toJsonValue(m_delivery_stream_type));
    }
    if (m_kinesis_stream_source_configuration.isSet()) {
        obj.insert(QString("KinesisStreamSourceConfiguration"), ::OpenAPI::toJsonValue(m_kinesis_stream_source_configuration));
    }
    if (m_delivery_stream_encryption_configuration_input.isSet()) {
        obj.insert(QString("DeliveryStreamEncryptionConfigurationInput"), ::OpenAPI::toJsonValue(m_delivery_stream_encryption_configuration_input));
    }
    if (m_s3_destination_configuration.isSet()) {
        obj.insert(QString("S3DestinationConfiguration"), ::OpenAPI::toJsonValue(m_s3_destination_configuration));
    }
    if (m_extended_s3_destination_configuration.isSet()) {
        obj.insert(QString("ExtendedS3DestinationConfiguration"), ::OpenAPI::toJsonValue(m_extended_s3_destination_configuration));
    }
    if (m_redshift_destination_configuration.isSet()) {
        obj.insert(QString("RedshiftDestinationConfiguration"), ::OpenAPI::toJsonValue(m_redshift_destination_configuration));
    }
    if (m_elasticsearch_destination_configuration.isSet()) {
        obj.insert(QString("ElasticsearchDestinationConfiguration"), ::OpenAPI::toJsonValue(m_elasticsearch_destination_configuration));
    }
    if (m_amazonopensearchservice_destination_configuration.isSet()) {
        obj.insert(QString("AmazonopensearchserviceDestinationConfiguration"), ::OpenAPI::toJsonValue(m_amazonopensearchservice_destination_configuration));
    }
    if (m_splunk_destination_configuration.isSet()) {
        obj.insert(QString("SplunkDestinationConfiguration"), ::OpenAPI::toJsonValue(m_splunk_destination_configuration));
    }
    if (m_http_endpoint_destination_configuration.isSet()) {
        obj.insert(QString("HttpEndpointDestinationConfiguration"), ::OpenAPI::toJsonValue(m_http_endpoint_destination_configuration));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_amazon_open_search_serverless_destination_configuration.isSet()) {
        obj.insert(QString("AmazonOpenSearchServerlessDestinationConfiguration"), ::OpenAPI::toJsonValue(m_amazon_open_search_serverless_destination_configuration));
    }
    return obj;
}

QString OAICreateDeliveryStreamInput::getDeliveryStreamName() const {
    return m_delivery_stream_name;
}
void OAICreateDeliveryStreamInput::setDeliveryStreamName(const QString &delivery_stream_name) {
    m_delivery_stream_name = delivery_stream_name;
    m_delivery_stream_name_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_delivery_stream_name_Set() const{
    return m_delivery_stream_name_isSet;
}

bool OAICreateDeliveryStreamInput::is_delivery_stream_name_Valid() const{
    return m_delivery_stream_name_isValid;
}

OAIDeliveryStreamType OAICreateDeliveryStreamInput::getDeliveryStreamType() const {
    return m_delivery_stream_type;
}
void OAICreateDeliveryStreamInput::setDeliveryStreamType(const OAIDeliveryStreamType &delivery_stream_type) {
    m_delivery_stream_type = delivery_stream_type;
    m_delivery_stream_type_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_delivery_stream_type_Set() const{
    return m_delivery_stream_type_isSet;
}

bool OAICreateDeliveryStreamInput::is_delivery_stream_type_Valid() const{
    return m_delivery_stream_type_isValid;
}

OAICreateDeliveryStreamInput_KinesisStreamSourceConfiguration OAICreateDeliveryStreamInput::getKinesisStreamSourceConfiguration() const {
    return m_kinesis_stream_source_configuration;
}
void OAICreateDeliveryStreamInput::setKinesisStreamSourceConfiguration(const OAICreateDeliveryStreamInput_KinesisStreamSourceConfiguration &kinesis_stream_source_configuration) {
    m_kinesis_stream_source_configuration = kinesis_stream_source_configuration;
    m_kinesis_stream_source_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_kinesis_stream_source_configuration_Set() const{
    return m_kinesis_stream_source_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_kinesis_stream_source_configuration_Valid() const{
    return m_kinesis_stream_source_configuration_isValid;
}

OAICreateDeliveryStreamInput_DeliveryStreamEncryptionConfigurationInput OAICreateDeliveryStreamInput::getDeliveryStreamEncryptionConfigurationInput() const {
    return m_delivery_stream_encryption_configuration_input;
}
void OAICreateDeliveryStreamInput::setDeliveryStreamEncryptionConfigurationInput(const OAICreateDeliveryStreamInput_DeliveryStreamEncryptionConfigurationInput &delivery_stream_encryption_configuration_input) {
    m_delivery_stream_encryption_configuration_input = delivery_stream_encryption_configuration_input;
    m_delivery_stream_encryption_configuration_input_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_delivery_stream_encryption_configuration_input_Set() const{
    return m_delivery_stream_encryption_configuration_input_isSet;
}

bool OAICreateDeliveryStreamInput::is_delivery_stream_encryption_configuration_input_Valid() const{
    return m_delivery_stream_encryption_configuration_input_isValid;
}

OAICreateDeliveryStreamInput_S3DestinationConfiguration OAICreateDeliveryStreamInput::getS3DestinationConfiguration() const {
    return m_s3_destination_configuration;
}
void OAICreateDeliveryStreamInput::setS3DestinationConfiguration(const OAICreateDeliveryStreamInput_S3DestinationConfiguration &s3_destination_configuration) {
    m_s3_destination_configuration = s3_destination_configuration;
    m_s3_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_s3_destination_configuration_Set() const{
    return m_s3_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_s3_destination_configuration_Valid() const{
    return m_s3_destination_configuration_isValid;
}

OAICreateDeliveryStreamInput_ExtendedS3DestinationConfiguration OAICreateDeliveryStreamInput::getExtendedS3DestinationConfiguration() const {
    return m_extended_s3_destination_configuration;
}
void OAICreateDeliveryStreamInput::setExtendedS3DestinationConfiguration(const OAICreateDeliveryStreamInput_ExtendedS3DestinationConfiguration &extended_s3_destination_configuration) {
    m_extended_s3_destination_configuration = extended_s3_destination_configuration;
    m_extended_s3_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_extended_s3_destination_configuration_Set() const{
    return m_extended_s3_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_extended_s3_destination_configuration_Valid() const{
    return m_extended_s3_destination_configuration_isValid;
}

OAICreateDeliveryStreamInput_RedshiftDestinationConfiguration OAICreateDeliveryStreamInput::getRedshiftDestinationConfiguration() const {
    return m_redshift_destination_configuration;
}
void OAICreateDeliveryStreamInput::setRedshiftDestinationConfiguration(const OAICreateDeliveryStreamInput_RedshiftDestinationConfiguration &redshift_destination_configuration) {
    m_redshift_destination_configuration = redshift_destination_configuration;
    m_redshift_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_redshift_destination_configuration_Set() const{
    return m_redshift_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_redshift_destination_configuration_Valid() const{
    return m_redshift_destination_configuration_isValid;
}

OAICreateDeliveryStreamInput_ElasticsearchDestinationConfiguration OAICreateDeliveryStreamInput::getElasticsearchDestinationConfiguration() const {
    return m_elasticsearch_destination_configuration;
}
void OAICreateDeliveryStreamInput::setElasticsearchDestinationConfiguration(const OAICreateDeliveryStreamInput_ElasticsearchDestinationConfiguration &elasticsearch_destination_configuration) {
    m_elasticsearch_destination_configuration = elasticsearch_destination_configuration;
    m_elasticsearch_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_elasticsearch_destination_configuration_Set() const{
    return m_elasticsearch_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_elasticsearch_destination_configuration_Valid() const{
    return m_elasticsearch_destination_configuration_isValid;
}

OAICreateDeliveryStreamInput_AmazonopensearchserviceDestinationConfiguration OAICreateDeliveryStreamInput::getAmazonopensearchserviceDestinationConfiguration() const {
    return m_amazonopensearchservice_destination_configuration;
}
void OAICreateDeliveryStreamInput::setAmazonopensearchserviceDestinationConfiguration(const OAICreateDeliveryStreamInput_AmazonopensearchserviceDestinationConfiguration &amazonopensearchservice_destination_configuration) {
    m_amazonopensearchservice_destination_configuration = amazonopensearchservice_destination_configuration;
    m_amazonopensearchservice_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_amazonopensearchservice_destination_configuration_Set() const{
    return m_amazonopensearchservice_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_amazonopensearchservice_destination_configuration_Valid() const{
    return m_amazonopensearchservice_destination_configuration_isValid;
}

OAICreateDeliveryStreamInput_SplunkDestinationConfiguration OAICreateDeliveryStreamInput::getSplunkDestinationConfiguration() const {
    return m_splunk_destination_configuration;
}
void OAICreateDeliveryStreamInput::setSplunkDestinationConfiguration(const OAICreateDeliveryStreamInput_SplunkDestinationConfiguration &splunk_destination_configuration) {
    m_splunk_destination_configuration = splunk_destination_configuration;
    m_splunk_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_splunk_destination_configuration_Set() const{
    return m_splunk_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_splunk_destination_configuration_Valid() const{
    return m_splunk_destination_configuration_isValid;
}

OAICreateDeliveryStreamInput_HttpEndpointDestinationConfiguration OAICreateDeliveryStreamInput::getHttpEndpointDestinationConfiguration() const {
    return m_http_endpoint_destination_configuration;
}
void OAICreateDeliveryStreamInput::setHttpEndpointDestinationConfiguration(const OAICreateDeliveryStreamInput_HttpEndpointDestinationConfiguration &http_endpoint_destination_configuration) {
    m_http_endpoint_destination_configuration = http_endpoint_destination_configuration;
    m_http_endpoint_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_http_endpoint_destination_configuration_Set() const{
    return m_http_endpoint_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_http_endpoint_destination_configuration_Valid() const{
    return m_http_endpoint_destination_configuration_isValid;
}

QList OAICreateDeliveryStreamInput::getTags() const {
    return m_tags;
}
void OAICreateDeliveryStreamInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDeliveryStreamInput::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateDeliveryStreamInput_AmazonOpenSearchServerlessDestinationConfiguration OAICreateDeliveryStreamInput::getAmazonOpenSearchServerlessDestinationConfiguration() const {
    return m_amazon_open_search_serverless_destination_configuration;
}
void OAICreateDeliveryStreamInput::setAmazonOpenSearchServerlessDestinationConfiguration(const OAICreateDeliveryStreamInput_AmazonOpenSearchServerlessDestinationConfiguration &amazon_open_search_serverless_destination_configuration) {
    m_amazon_open_search_serverless_destination_configuration = amazon_open_search_serverless_destination_configuration;
    m_amazon_open_search_serverless_destination_configuration_isSet = true;
}

bool OAICreateDeliveryStreamInput::is_amazon_open_search_serverless_destination_configuration_Set() const{
    return m_amazon_open_search_serverless_destination_configuration_isSet;
}

bool OAICreateDeliveryStreamInput::is_amazon_open_search_serverless_destination_configuration_Valid() const{
    return m_amazon_open_search_serverless_destination_configuration_isValid;
}

bool OAICreateDeliveryStreamInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_stream_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_stream_source_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_stream_encryption_configuration_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_s3_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazonopensearchservice_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splunk_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_endpoint_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_open_search_serverless_destination_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDeliveryStreamInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_stream_name_isValid && true;
}

} // namespace OpenAPI
