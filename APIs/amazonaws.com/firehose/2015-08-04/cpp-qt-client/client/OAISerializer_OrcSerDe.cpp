/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISerializer_OrcSerDe.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISerializer_OrcSerDe::OAISerializer_OrcSerDe(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISerializer_OrcSerDe::OAISerializer_OrcSerDe() {
    this->initializeModel();
}

OAISerializer_OrcSerDe::~OAISerializer_OrcSerDe() {}

void OAISerializer_OrcSerDe::initializeModel() {

    m_stripe_size_bytes_isSet = false;
    m_stripe_size_bytes_isValid = false;

    m_block_size_bytes_isSet = false;
    m_block_size_bytes_isValid = false;

    m_row_index_stride_isSet = false;
    m_row_index_stride_isValid = false;

    m_enable_padding_isSet = false;
    m_enable_padding_isValid = false;

    m_padding_tolerance_isSet = false;
    m_padding_tolerance_isValid = false;

    m_compression_isSet = false;
    m_compression_isValid = false;

    m_bloom_filter_columns_isSet = false;
    m_bloom_filter_columns_isValid = false;

    m_bloom_filter_false_positive_probability_isSet = false;
    m_bloom_filter_false_positive_probability_isValid = false;

    m_dictionary_key_threshold_isSet = false;
    m_dictionary_key_threshold_isValid = false;

    m_format_version_isSet = false;
    m_format_version_isValid = false;
}

void OAISerializer_OrcSerDe::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISerializer_OrcSerDe::fromJsonObject(QJsonObject json) {

    m_stripe_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_stripe_size_bytes, json[QString("StripeSizeBytes")]);
    m_stripe_size_bytes_isSet = !json[QString("StripeSizeBytes")].isNull() && m_stripe_size_bytes_isValid;

    m_block_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_block_size_bytes, json[QString("BlockSizeBytes")]);
    m_block_size_bytes_isSet = !json[QString("BlockSizeBytes")].isNull() && m_block_size_bytes_isValid;

    m_row_index_stride_isValid = ::OpenAPI::fromJsonValue(m_row_index_stride, json[QString("RowIndexStride")]);
    m_row_index_stride_isSet = !json[QString("RowIndexStride")].isNull() && m_row_index_stride_isValid;

    m_enable_padding_isValid = ::OpenAPI::fromJsonValue(m_enable_padding, json[QString("EnablePadding")]);
    m_enable_padding_isSet = !json[QString("EnablePadding")].isNull() && m_enable_padding_isValid;

    m_padding_tolerance_isValid = ::OpenAPI::fromJsonValue(m_padding_tolerance, json[QString("PaddingTolerance")]);
    m_padding_tolerance_isSet = !json[QString("PaddingTolerance")].isNull() && m_padding_tolerance_isValid;

    m_compression_isValid = ::OpenAPI::fromJsonValue(m_compression, json[QString("Compression")]);
    m_compression_isSet = !json[QString("Compression")].isNull() && m_compression_isValid;

    m_bloom_filter_columns_isValid = ::OpenAPI::fromJsonValue(m_bloom_filter_columns, json[QString("BloomFilterColumns")]);
    m_bloom_filter_columns_isSet = !json[QString("BloomFilterColumns")].isNull() && m_bloom_filter_columns_isValid;

    m_bloom_filter_false_positive_probability_isValid = ::OpenAPI::fromJsonValue(m_bloom_filter_false_positive_probability, json[QString("BloomFilterFalsePositiveProbability")]);
    m_bloom_filter_false_positive_probability_isSet = !json[QString("BloomFilterFalsePositiveProbability")].isNull() && m_bloom_filter_false_positive_probability_isValid;

    m_dictionary_key_threshold_isValid = ::OpenAPI::fromJsonValue(m_dictionary_key_threshold, json[QString("DictionaryKeyThreshold")]);
    m_dictionary_key_threshold_isSet = !json[QString("DictionaryKeyThreshold")].isNull() && m_dictionary_key_threshold_isValid;

    m_format_version_isValid = ::OpenAPI::fromJsonValue(m_format_version, json[QString("FormatVersion")]);
    m_format_version_isSet = !json[QString("FormatVersion")].isNull() && m_format_version_isValid;
}

QString OAISerializer_OrcSerDe::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISerializer_OrcSerDe::asJsonObject() const {
    QJsonObject obj;
    if (m_stripe_size_bytes_isSet) {
        obj.insert(QString("StripeSizeBytes"), ::OpenAPI::toJsonValue(m_stripe_size_bytes));
    }
    if (m_block_size_bytes_isSet) {
        obj.insert(QString("BlockSizeBytes"), ::OpenAPI::toJsonValue(m_block_size_bytes));
    }
    if (m_row_index_stride_isSet) {
        obj.insert(QString("RowIndexStride"), ::OpenAPI::toJsonValue(m_row_index_stride));
    }
    if (m_enable_padding_isSet) {
        obj.insert(QString("EnablePadding"), ::OpenAPI::toJsonValue(m_enable_padding));
    }
    if (m_padding_tolerance_isSet) {
        obj.insert(QString("PaddingTolerance"), ::OpenAPI::toJsonValue(m_padding_tolerance));
    }
    if (m_compression.isSet()) {
        obj.insert(QString("Compression"), ::OpenAPI::toJsonValue(m_compression));
    }
    if (m_bloom_filter_columns.isSet()) {
        obj.insert(QString("BloomFilterColumns"), ::OpenAPI::toJsonValue(m_bloom_filter_columns));
    }
    if (m_bloom_filter_false_positive_probability_isSet) {
        obj.insert(QString("BloomFilterFalsePositiveProbability"), ::OpenAPI::toJsonValue(m_bloom_filter_false_positive_probability));
    }
    if (m_dictionary_key_threshold_isSet) {
        obj.insert(QString("DictionaryKeyThreshold"), ::OpenAPI::toJsonValue(m_dictionary_key_threshold));
    }
    if (m_format_version.isSet()) {
        obj.insert(QString("FormatVersion"), ::OpenAPI::toJsonValue(m_format_version));
    }
    return obj;
}

qint32 OAISerializer_OrcSerDe::getStripeSizeBytes() const {
    return m_stripe_size_bytes;
}
void OAISerializer_OrcSerDe::setStripeSizeBytes(const qint32 &stripe_size_bytes) {
    m_stripe_size_bytes = stripe_size_bytes;
    m_stripe_size_bytes_isSet = true;
}

bool OAISerializer_OrcSerDe::is_stripe_size_bytes_Set() const{
    return m_stripe_size_bytes_isSet;
}

bool OAISerializer_OrcSerDe::is_stripe_size_bytes_Valid() const{
    return m_stripe_size_bytes_isValid;
}

qint32 OAISerializer_OrcSerDe::getBlockSizeBytes() const {
    return m_block_size_bytes;
}
void OAISerializer_OrcSerDe::setBlockSizeBytes(const qint32 &block_size_bytes) {
    m_block_size_bytes = block_size_bytes;
    m_block_size_bytes_isSet = true;
}

bool OAISerializer_OrcSerDe::is_block_size_bytes_Set() const{
    return m_block_size_bytes_isSet;
}

bool OAISerializer_OrcSerDe::is_block_size_bytes_Valid() const{
    return m_block_size_bytes_isValid;
}

qint32 OAISerializer_OrcSerDe::getRowIndexStride() const {
    return m_row_index_stride;
}
void OAISerializer_OrcSerDe::setRowIndexStride(const qint32 &row_index_stride) {
    m_row_index_stride = row_index_stride;
    m_row_index_stride_isSet = true;
}

bool OAISerializer_OrcSerDe::is_row_index_stride_Set() const{
    return m_row_index_stride_isSet;
}

bool OAISerializer_OrcSerDe::is_row_index_stride_Valid() const{
    return m_row_index_stride_isValid;
}

bool OAISerializer_OrcSerDe::getEnablePadding() const {
    return m_enable_padding;
}
void OAISerializer_OrcSerDe::setEnablePadding(const bool &enable_padding) {
    m_enable_padding = enable_padding;
    m_enable_padding_isSet = true;
}

bool OAISerializer_OrcSerDe::is_enable_padding_Set() const{
    return m_enable_padding_isSet;
}

bool OAISerializer_OrcSerDe::is_enable_padding_Valid() const{
    return m_enable_padding_isValid;
}

double OAISerializer_OrcSerDe::getPaddingTolerance() const {
    return m_padding_tolerance;
}
void OAISerializer_OrcSerDe::setPaddingTolerance(const double &padding_tolerance) {
    m_padding_tolerance = padding_tolerance;
    m_padding_tolerance_isSet = true;
}

bool OAISerializer_OrcSerDe::is_padding_tolerance_Set() const{
    return m_padding_tolerance_isSet;
}

bool OAISerializer_OrcSerDe::is_padding_tolerance_Valid() const{
    return m_padding_tolerance_isValid;
}

OAIOrcCompression OAISerializer_OrcSerDe::getCompression() const {
    return m_compression;
}
void OAISerializer_OrcSerDe::setCompression(const OAIOrcCompression &compression) {
    m_compression = compression;
    m_compression_isSet = true;
}

bool OAISerializer_OrcSerDe::is_compression_Set() const{
    return m_compression_isSet;
}

bool OAISerializer_OrcSerDe::is_compression_Valid() const{
    return m_compression_isValid;
}

QList OAISerializer_OrcSerDe::getBloomFilterColumns() const {
    return m_bloom_filter_columns;
}
void OAISerializer_OrcSerDe::setBloomFilterColumns(const QList &bloom_filter_columns) {
    m_bloom_filter_columns = bloom_filter_columns;
    m_bloom_filter_columns_isSet = true;
}

bool OAISerializer_OrcSerDe::is_bloom_filter_columns_Set() const{
    return m_bloom_filter_columns_isSet;
}

bool OAISerializer_OrcSerDe::is_bloom_filter_columns_Valid() const{
    return m_bloom_filter_columns_isValid;
}

double OAISerializer_OrcSerDe::getBloomFilterFalsePositiveProbability() const {
    return m_bloom_filter_false_positive_probability;
}
void OAISerializer_OrcSerDe::setBloomFilterFalsePositiveProbability(const double &bloom_filter_false_positive_probability) {
    m_bloom_filter_false_positive_probability = bloom_filter_false_positive_probability;
    m_bloom_filter_false_positive_probability_isSet = true;
}

bool OAISerializer_OrcSerDe::is_bloom_filter_false_positive_probability_Set() const{
    return m_bloom_filter_false_positive_probability_isSet;
}

bool OAISerializer_OrcSerDe::is_bloom_filter_false_positive_probability_Valid() const{
    return m_bloom_filter_false_positive_probability_isValid;
}

double OAISerializer_OrcSerDe::getDictionaryKeyThreshold() const {
    return m_dictionary_key_threshold;
}
void OAISerializer_OrcSerDe::setDictionaryKeyThreshold(const double &dictionary_key_threshold) {
    m_dictionary_key_threshold = dictionary_key_threshold;
    m_dictionary_key_threshold_isSet = true;
}

bool OAISerializer_OrcSerDe::is_dictionary_key_threshold_Set() const{
    return m_dictionary_key_threshold_isSet;
}

bool OAISerializer_OrcSerDe::is_dictionary_key_threshold_Valid() const{
    return m_dictionary_key_threshold_isValid;
}

OAIOrcFormatVersion OAISerializer_OrcSerDe::getFormatVersion() const {
    return m_format_version;
}
void OAISerializer_OrcSerDe::setFormatVersion(const OAIOrcFormatVersion &format_version) {
    m_format_version = format_version;
    m_format_version_isSet = true;
}

bool OAISerializer_OrcSerDe::is_format_version_Set() const{
    return m_format_version_isSet;
}

bool OAISerializer_OrcSerDe::is_format_version_Valid() const{
    return m_format_version_isValid;
}

bool OAISerializer_OrcSerDe::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stripe_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_index_stride_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_padding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_padding_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compression.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bloom_filter_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bloom_filter_false_positive_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dictionary_key_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISerializer_OrcSerDe::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
