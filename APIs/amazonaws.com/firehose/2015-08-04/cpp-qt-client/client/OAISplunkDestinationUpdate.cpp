/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISplunkDestinationUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISplunkDestinationUpdate::OAISplunkDestinationUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISplunkDestinationUpdate::OAISplunkDestinationUpdate() {
    this->initializeModel();
}

OAISplunkDestinationUpdate::~OAISplunkDestinationUpdate() {}

void OAISplunkDestinationUpdate::initializeModel() {

    m_hec_endpoint_isSet = false;
    m_hec_endpoint_isValid = false;

    m_hec_endpoint_type_isSet = false;
    m_hec_endpoint_type_isValid = false;

    m_hec_token_isSet = false;
    m_hec_token_isValid = false;

    m_hec_acknowledgment_timeout_in_seconds_isSet = false;
    m_hec_acknowledgment_timeout_in_seconds_isValid = false;

    m_retry_options_isSet = false;
    m_retry_options_isValid = false;

    m_s3_backup_mode_isSet = false;
    m_s3_backup_mode_isValid = false;

    m_s3_update_isSet = false;
    m_s3_update_isValid = false;

    m_processing_configuration_isSet = false;
    m_processing_configuration_isValid = false;

    m_cloud_watch_logging_options_isSet = false;
    m_cloud_watch_logging_options_isValid = false;
}

void OAISplunkDestinationUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISplunkDestinationUpdate::fromJsonObject(QJsonObject json) {

    m_hec_endpoint_isValid = ::OpenAPI::fromJsonValue(m_hec_endpoint, json[QString("HECEndpoint")]);
    m_hec_endpoint_isSet = !json[QString("HECEndpoint")].isNull() && m_hec_endpoint_isValid;

    m_hec_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_hec_endpoint_type, json[QString("HECEndpointType")]);
    m_hec_endpoint_type_isSet = !json[QString("HECEndpointType")].isNull() && m_hec_endpoint_type_isValid;

    m_hec_token_isValid = ::OpenAPI::fromJsonValue(m_hec_token, json[QString("HECToken")]);
    m_hec_token_isSet = !json[QString("HECToken")].isNull() && m_hec_token_isValid;

    m_hec_acknowledgment_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_hec_acknowledgment_timeout_in_seconds, json[QString("HECAcknowledgmentTimeoutInSeconds")]);
    m_hec_acknowledgment_timeout_in_seconds_isSet = !json[QString("HECAcknowledgmentTimeoutInSeconds")].isNull() && m_hec_acknowledgment_timeout_in_seconds_isValid;

    m_retry_options_isValid = ::OpenAPI::fromJsonValue(m_retry_options, json[QString("RetryOptions")]);
    m_retry_options_isSet = !json[QString("RetryOptions")].isNull() && m_retry_options_isValid;

    m_s3_backup_mode_isValid = ::OpenAPI::fromJsonValue(m_s3_backup_mode, json[QString("S3BackupMode")]);
    m_s3_backup_mode_isSet = !json[QString("S3BackupMode")].isNull() && m_s3_backup_mode_isValid;

    m_s3_update_isValid = ::OpenAPI::fromJsonValue(m_s3_update, json[QString("S3Update")]);
    m_s3_update_isSet = !json[QString("S3Update")].isNull() && m_s3_update_isValid;

    m_processing_configuration_isValid = ::OpenAPI::fromJsonValue(m_processing_configuration, json[QString("ProcessingConfiguration")]);
    m_processing_configuration_isSet = !json[QString("ProcessingConfiguration")].isNull() && m_processing_configuration_isValid;

    m_cloud_watch_logging_options_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logging_options, json[QString("CloudWatchLoggingOptions")]);
    m_cloud_watch_logging_options_isSet = !json[QString("CloudWatchLoggingOptions")].isNull() && m_cloud_watch_logging_options_isValid;
}

QString OAISplunkDestinationUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISplunkDestinationUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_hec_endpoint_isSet) {
        obj.insert(QString("HECEndpoint"), ::OpenAPI::toJsonValue(m_hec_endpoint));
    }
    if (m_hec_endpoint_type.isSet()) {
        obj.insert(QString("HECEndpointType"), ::OpenAPI::toJsonValue(m_hec_endpoint_type));
    }
    if (m_hec_token_isSet) {
        obj.insert(QString("HECToken"), ::OpenAPI::toJsonValue(m_hec_token));
    }
    if (m_hec_acknowledgment_timeout_in_seconds_isSet) {
        obj.insert(QString("HECAcknowledgmentTimeoutInSeconds"), ::OpenAPI::toJsonValue(m_hec_acknowledgment_timeout_in_seconds));
    }
    if (m_retry_options.isSet()) {
        obj.insert(QString("RetryOptions"), ::OpenAPI::toJsonValue(m_retry_options));
    }
    if (m_s3_backup_mode.isSet()) {
        obj.insert(QString("S3BackupMode"), ::OpenAPI::toJsonValue(m_s3_backup_mode));
    }
    if (m_s3_update.isSet()) {
        obj.insert(QString("S3Update"), ::OpenAPI::toJsonValue(m_s3_update));
    }
    if (m_processing_configuration.isSet()) {
        obj.insert(QString("ProcessingConfiguration"), ::OpenAPI::toJsonValue(m_processing_configuration));
    }
    if (m_cloud_watch_logging_options.isSet()) {
        obj.insert(QString("CloudWatchLoggingOptions"), ::OpenAPI::toJsonValue(m_cloud_watch_logging_options));
    }
    return obj;
}

QString OAISplunkDestinationUpdate::getHecEndpoint() const {
    return m_hec_endpoint;
}
void OAISplunkDestinationUpdate::setHecEndpoint(const QString &hec_endpoint) {
    m_hec_endpoint = hec_endpoint;
    m_hec_endpoint_isSet = true;
}

bool OAISplunkDestinationUpdate::is_hec_endpoint_Set() const{
    return m_hec_endpoint_isSet;
}

bool OAISplunkDestinationUpdate::is_hec_endpoint_Valid() const{
    return m_hec_endpoint_isValid;
}

OAIHECEndpointType OAISplunkDestinationUpdate::getHecEndpointType() const {
    return m_hec_endpoint_type;
}
void OAISplunkDestinationUpdate::setHecEndpointType(const OAIHECEndpointType &hec_endpoint_type) {
    m_hec_endpoint_type = hec_endpoint_type;
    m_hec_endpoint_type_isSet = true;
}

bool OAISplunkDestinationUpdate::is_hec_endpoint_type_Set() const{
    return m_hec_endpoint_type_isSet;
}

bool OAISplunkDestinationUpdate::is_hec_endpoint_type_Valid() const{
    return m_hec_endpoint_type_isValid;
}

QString OAISplunkDestinationUpdate::getHecToken() const {
    return m_hec_token;
}
void OAISplunkDestinationUpdate::setHecToken(const QString &hec_token) {
    m_hec_token = hec_token;
    m_hec_token_isSet = true;
}

bool OAISplunkDestinationUpdate::is_hec_token_Set() const{
    return m_hec_token_isSet;
}

bool OAISplunkDestinationUpdate::is_hec_token_Valid() const{
    return m_hec_token_isValid;
}

qint32 OAISplunkDestinationUpdate::getHecAcknowledgmentTimeoutInSeconds() const {
    return m_hec_acknowledgment_timeout_in_seconds;
}
void OAISplunkDestinationUpdate::setHecAcknowledgmentTimeoutInSeconds(const qint32 &hec_acknowledgment_timeout_in_seconds) {
    m_hec_acknowledgment_timeout_in_seconds = hec_acknowledgment_timeout_in_seconds;
    m_hec_acknowledgment_timeout_in_seconds_isSet = true;
}

bool OAISplunkDestinationUpdate::is_hec_acknowledgment_timeout_in_seconds_Set() const{
    return m_hec_acknowledgment_timeout_in_seconds_isSet;
}

bool OAISplunkDestinationUpdate::is_hec_acknowledgment_timeout_in_seconds_Valid() const{
    return m_hec_acknowledgment_timeout_in_seconds_isValid;
}

OAISplunkDestinationDescription_RetryOptions OAISplunkDestinationUpdate::getRetryOptions() const {
    return m_retry_options;
}
void OAISplunkDestinationUpdate::setRetryOptions(const OAISplunkDestinationDescription_RetryOptions &retry_options) {
    m_retry_options = retry_options;
    m_retry_options_isSet = true;
}

bool OAISplunkDestinationUpdate::is_retry_options_Set() const{
    return m_retry_options_isSet;
}

bool OAISplunkDestinationUpdate::is_retry_options_Valid() const{
    return m_retry_options_isValid;
}

OAISplunkS3BackupMode OAISplunkDestinationUpdate::getS3BackupMode() const {
    return m_s3_backup_mode;
}
void OAISplunkDestinationUpdate::setS3BackupMode(const OAISplunkS3BackupMode &s3_backup_mode) {
    m_s3_backup_mode = s3_backup_mode;
    m_s3_backup_mode_isSet = true;
}

bool OAISplunkDestinationUpdate::is_s3_backup_mode_Set() const{
    return m_s3_backup_mode_isSet;
}

bool OAISplunkDestinationUpdate::is_s3_backup_mode_Valid() const{
    return m_s3_backup_mode_isValid;
}

OAISplunkDestinationUpdate_S3Update OAISplunkDestinationUpdate::getS3Update() const {
    return m_s3_update;
}
void OAISplunkDestinationUpdate::setS3Update(const OAISplunkDestinationUpdate_S3Update &s3_update) {
    m_s3_update = s3_update;
    m_s3_update_isSet = true;
}

bool OAISplunkDestinationUpdate::is_s3_update_Set() const{
    return m_s3_update_isSet;
}

bool OAISplunkDestinationUpdate::is_s3_update_Valid() const{
    return m_s3_update_isValid;
}

OAIExtendedS3DestinationConfiguration_ProcessingConfiguration OAISplunkDestinationUpdate::getProcessingConfiguration() const {
    return m_processing_configuration;
}
void OAISplunkDestinationUpdate::setProcessingConfiguration(const OAIExtendedS3DestinationConfiguration_ProcessingConfiguration &processing_configuration) {
    m_processing_configuration = processing_configuration;
    m_processing_configuration_isSet = true;
}

bool OAISplunkDestinationUpdate::is_processing_configuration_Set() const{
    return m_processing_configuration_isSet;
}

bool OAISplunkDestinationUpdate::is_processing_configuration_Valid() const{
    return m_processing_configuration_isValid;
}

OAIS3DestinationDescription_CloudWatchLoggingOptions OAISplunkDestinationUpdate::getCloudWatchLoggingOptions() const {
    return m_cloud_watch_logging_options;
}
void OAISplunkDestinationUpdate::setCloudWatchLoggingOptions(const OAIS3DestinationDescription_CloudWatchLoggingOptions &cloud_watch_logging_options) {
    m_cloud_watch_logging_options = cloud_watch_logging_options;
    m_cloud_watch_logging_options_isSet = true;
}

bool OAISplunkDestinationUpdate::is_cloud_watch_logging_options_Set() const{
    return m_cloud_watch_logging_options_isSet;
}

bool OAISplunkDestinationUpdate::is_cloud_watch_logging_options_Valid() const{
    return m_cloud_watch_logging_options_isValid;
}

bool OAISplunkDestinationUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hec_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hec_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hec_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hec_acknowledgment_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_backup_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISplunkDestinationUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
