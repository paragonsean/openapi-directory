/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISerializer_ParquetSerDe.h
 *
 * 
 */

#ifndef OAISerializer_ParquetSerDe_H
#define OAISerializer_ParquetSerDe_H

#include <QJsonObject>

#include "OAIParquetCompression.h"
#include "OAIParquetWriterVersion.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISerializer_ParquetSerDe : public OAIObject {
public:
    OAISerializer_ParquetSerDe();
    OAISerializer_ParquetSerDe(QString json);
    ~OAISerializer_ParquetSerDe() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBlockSizeBytes() const;
    void setBlockSizeBytes(const qint32 &block_size_bytes);
    bool is_block_size_bytes_Set() const;
    bool is_block_size_bytes_Valid() const;

    qint32 getPageSizeBytes() const;
    void setPageSizeBytes(const qint32 &page_size_bytes);
    bool is_page_size_bytes_Set() const;
    bool is_page_size_bytes_Valid() const;

    OAIParquetCompression getCompression() const;
    void setCompression(const OAIParquetCompression &compression);
    bool is_compression_Set() const;
    bool is_compression_Valid() const;

    bool getEnableDictionaryCompression() const;
    void setEnableDictionaryCompression(const bool &enable_dictionary_compression);
    bool is_enable_dictionary_compression_Set() const;
    bool is_enable_dictionary_compression_Valid() const;

    qint32 getMaxPaddingBytes() const;
    void setMaxPaddingBytes(const qint32 &max_padding_bytes);
    bool is_max_padding_bytes_Set() const;
    bool is_max_padding_bytes_Valid() const;

    OAIParquetWriterVersion getWriterVersion() const;
    void setWriterVersion(const OAIParquetWriterVersion &writer_version);
    bool is_writer_version_Set() const;
    bool is_writer_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_block_size_bytes;
    bool m_block_size_bytes_isSet;
    bool m_block_size_bytes_isValid;

    qint32 m_page_size_bytes;
    bool m_page_size_bytes_isSet;
    bool m_page_size_bytes_isValid;

    OAIParquetCompression m_compression;
    bool m_compression_isSet;
    bool m_compression_isValid;

    bool m_enable_dictionary_compression;
    bool m_enable_dictionary_compression_isSet;
    bool m_enable_dictionary_compression_isValid;

    qint32 m_max_padding_bytes;
    bool m_max_padding_bytes_isSet;
    bool m_max_padding_bytes_isValid;

    OAIParquetWriterVersion m_writer_version;
    bool m_writer_version_isSet;
    bool m_writer_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISerializer_ParquetSerDe)

#endif // OAISerializer_ParquetSerDe_H
