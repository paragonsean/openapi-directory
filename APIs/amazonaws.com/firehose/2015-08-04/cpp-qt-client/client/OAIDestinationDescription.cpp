/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationDescription::OAIDestinationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationDescription::OAIDestinationDescription() {
    this->initializeModel();
}

OAIDestinationDescription::~OAIDestinationDescription() {}

void OAIDestinationDescription::initializeModel() {

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_s3_destination_description_isSet = false;
    m_s3_destination_description_isValid = false;

    m_extended_s3_destination_description_isSet = false;
    m_extended_s3_destination_description_isValid = false;

    m_redshift_destination_description_isSet = false;
    m_redshift_destination_description_isValid = false;

    m_elasticsearch_destination_description_isSet = false;
    m_elasticsearch_destination_description_isValid = false;

    m_amazonopensearchservice_destination_description_isSet = false;
    m_amazonopensearchservice_destination_description_isValid = false;

    m_splunk_destination_description_isSet = false;
    m_splunk_destination_description_isValid = false;

    m_http_endpoint_destination_description_isSet = false;
    m_http_endpoint_destination_description_isValid = false;

    m_amazon_open_search_serverless_destination_description_isSet = false;
    m_amazon_open_search_serverless_destination_description_isValid = false;
}

void OAIDestinationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationDescription::fromJsonObject(QJsonObject json) {

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("DestinationId")]);
    m_destination_id_isSet = !json[QString("DestinationId")].isNull() && m_destination_id_isValid;

    m_s3_destination_description_isValid = ::OpenAPI::fromJsonValue(m_s3_destination_description, json[QString("S3DestinationDescription")]);
    m_s3_destination_description_isSet = !json[QString("S3DestinationDescription")].isNull() && m_s3_destination_description_isValid;

    m_extended_s3_destination_description_isValid = ::OpenAPI::fromJsonValue(m_extended_s3_destination_description, json[QString("ExtendedS3DestinationDescription")]);
    m_extended_s3_destination_description_isSet = !json[QString("ExtendedS3DestinationDescription")].isNull() && m_extended_s3_destination_description_isValid;

    m_redshift_destination_description_isValid = ::OpenAPI::fromJsonValue(m_redshift_destination_description, json[QString("RedshiftDestinationDescription")]);
    m_redshift_destination_description_isSet = !json[QString("RedshiftDestinationDescription")].isNull() && m_redshift_destination_description_isValid;

    m_elasticsearch_destination_description_isValid = ::OpenAPI::fromJsonValue(m_elasticsearch_destination_description, json[QString("ElasticsearchDestinationDescription")]);
    m_elasticsearch_destination_description_isSet = !json[QString("ElasticsearchDestinationDescription")].isNull() && m_elasticsearch_destination_description_isValid;

    m_amazonopensearchservice_destination_description_isValid = ::OpenAPI::fromJsonValue(m_amazonopensearchservice_destination_description, json[QString("AmazonopensearchserviceDestinationDescription")]);
    m_amazonopensearchservice_destination_description_isSet = !json[QString("AmazonopensearchserviceDestinationDescription")].isNull() && m_amazonopensearchservice_destination_description_isValid;

    m_splunk_destination_description_isValid = ::OpenAPI::fromJsonValue(m_splunk_destination_description, json[QString("SplunkDestinationDescription")]);
    m_splunk_destination_description_isSet = !json[QString("SplunkDestinationDescription")].isNull() && m_splunk_destination_description_isValid;

    m_http_endpoint_destination_description_isValid = ::OpenAPI::fromJsonValue(m_http_endpoint_destination_description, json[QString("HttpEndpointDestinationDescription")]);
    m_http_endpoint_destination_description_isSet = !json[QString("HttpEndpointDestinationDescription")].isNull() && m_http_endpoint_destination_description_isValid;

    m_amazon_open_search_serverless_destination_description_isValid = ::OpenAPI::fromJsonValue(m_amazon_open_search_serverless_destination_description, json[QString("AmazonOpenSearchServerlessDestinationDescription")]);
    m_amazon_open_search_serverless_destination_description_isSet = !json[QString("AmazonOpenSearchServerlessDestinationDescription")].isNull() && m_amazon_open_search_serverless_destination_description_isValid;
}

QString OAIDestinationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_id_isSet) {
        obj.insert(QString("DestinationId"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_s3_destination_description.isSet()) {
        obj.insert(QString("S3DestinationDescription"), ::OpenAPI::toJsonValue(m_s3_destination_description));
    }
    if (m_extended_s3_destination_description.isSet()) {
        obj.insert(QString("ExtendedS3DestinationDescription"), ::OpenAPI::toJsonValue(m_extended_s3_destination_description));
    }
    if (m_redshift_destination_description.isSet()) {
        obj.insert(QString("RedshiftDestinationDescription"), ::OpenAPI::toJsonValue(m_redshift_destination_description));
    }
    if (m_elasticsearch_destination_description.isSet()) {
        obj.insert(QString("ElasticsearchDestinationDescription"), ::OpenAPI::toJsonValue(m_elasticsearch_destination_description));
    }
    if (m_amazonopensearchservice_destination_description.isSet()) {
        obj.insert(QString("AmazonopensearchserviceDestinationDescription"), ::OpenAPI::toJsonValue(m_amazonopensearchservice_destination_description));
    }
    if (m_splunk_destination_description.isSet()) {
        obj.insert(QString("SplunkDestinationDescription"), ::OpenAPI::toJsonValue(m_splunk_destination_description));
    }
    if (m_http_endpoint_destination_description.isSet()) {
        obj.insert(QString("HttpEndpointDestinationDescription"), ::OpenAPI::toJsonValue(m_http_endpoint_destination_description));
    }
    if (m_amazon_open_search_serverless_destination_description.isSet()) {
        obj.insert(QString("AmazonOpenSearchServerlessDestinationDescription"), ::OpenAPI::toJsonValue(m_amazon_open_search_serverless_destination_description));
    }
    return obj;
}

QString OAIDestinationDescription::getDestinationId() const {
    return m_destination_id;
}
void OAIDestinationDescription::setDestinationId(const QString &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIDestinationDescription::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIDestinationDescription::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

OAIDestinationDescription_S3DestinationDescription OAIDestinationDescription::getS3DestinationDescription() const {
    return m_s3_destination_description;
}
void OAIDestinationDescription::setS3DestinationDescription(const OAIDestinationDescription_S3DestinationDescription &s3_destination_description) {
    m_s3_destination_description = s3_destination_description;
    m_s3_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_s3_destination_description_Set() const{
    return m_s3_destination_description_isSet;
}

bool OAIDestinationDescription::is_s3_destination_description_Valid() const{
    return m_s3_destination_description_isValid;
}

OAIDestinationDescription_ExtendedS3DestinationDescription OAIDestinationDescription::getExtendedS3DestinationDescription() const {
    return m_extended_s3_destination_description;
}
void OAIDestinationDescription::setExtendedS3DestinationDescription(const OAIDestinationDescription_ExtendedS3DestinationDescription &extended_s3_destination_description) {
    m_extended_s3_destination_description = extended_s3_destination_description;
    m_extended_s3_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_extended_s3_destination_description_Set() const{
    return m_extended_s3_destination_description_isSet;
}

bool OAIDestinationDescription::is_extended_s3_destination_description_Valid() const{
    return m_extended_s3_destination_description_isValid;
}

OAIDestinationDescription_RedshiftDestinationDescription OAIDestinationDescription::getRedshiftDestinationDescription() const {
    return m_redshift_destination_description;
}
void OAIDestinationDescription::setRedshiftDestinationDescription(const OAIDestinationDescription_RedshiftDestinationDescription &redshift_destination_description) {
    m_redshift_destination_description = redshift_destination_description;
    m_redshift_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_redshift_destination_description_Set() const{
    return m_redshift_destination_description_isSet;
}

bool OAIDestinationDescription::is_redshift_destination_description_Valid() const{
    return m_redshift_destination_description_isValid;
}

OAIDestinationDescription_ElasticsearchDestinationDescription OAIDestinationDescription::getElasticsearchDestinationDescription() const {
    return m_elasticsearch_destination_description;
}
void OAIDestinationDescription::setElasticsearchDestinationDescription(const OAIDestinationDescription_ElasticsearchDestinationDescription &elasticsearch_destination_description) {
    m_elasticsearch_destination_description = elasticsearch_destination_description;
    m_elasticsearch_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_elasticsearch_destination_description_Set() const{
    return m_elasticsearch_destination_description_isSet;
}

bool OAIDestinationDescription::is_elasticsearch_destination_description_Valid() const{
    return m_elasticsearch_destination_description_isValid;
}

OAIDestinationDescription_AmazonopensearchserviceDestinationDescription OAIDestinationDescription::getAmazonopensearchserviceDestinationDescription() const {
    return m_amazonopensearchservice_destination_description;
}
void OAIDestinationDescription::setAmazonopensearchserviceDestinationDescription(const OAIDestinationDescription_AmazonopensearchserviceDestinationDescription &amazonopensearchservice_destination_description) {
    m_amazonopensearchservice_destination_description = amazonopensearchservice_destination_description;
    m_amazonopensearchservice_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_amazonopensearchservice_destination_description_Set() const{
    return m_amazonopensearchservice_destination_description_isSet;
}

bool OAIDestinationDescription::is_amazonopensearchservice_destination_description_Valid() const{
    return m_amazonopensearchservice_destination_description_isValid;
}

OAIDestinationDescription_SplunkDestinationDescription OAIDestinationDescription::getSplunkDestinationDescription() const {
    return m_splunk_destination_description;
}
void OAIDestinationDescription::setSplunkDestinationDescription(const OAIDestinationDescription_SplunkDestinationDescription &splunk_destination_description) {
    m_splunk_destination_description = splunk_destination_description;
    m_splunk_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_splunk_destination_description_Set() const{
    return m_splunk_destination_description_isSet;
}

bool OAIDestinationDescription::is_splunk_destination_description_Valid() const{
    return m_splunk_destination_description_isValid;
}

OAIDestinationDescription_HttpEndpointDestinationDescription OAIDestinationDescription::getHttpEndpointDestinationDescription() const {
    return m_http_endpoint_destination_description;
}
void OAIDestinationDescription::setHttpEndpointDestinationDescription(const OAIDestinationDescription_HttpEndpointDestinationDescription &http_endpoint_destination_description) {
    m_http_endpoint_destination_description = http_endpoint_destination_description;
    m_http_endpoint_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_http_endpoint_destination_description_Set() const{
    return m_http_endpoint_destination_description_isSet;
}

bool OAIDestinationDescription::is_http_endpoint_destination_description_Valid() const{
    return m_http_endpoint_destination_description_isValid;
}

OAIDestinationDescription_AmazonOpenSearchServerlessDestinationDescription OAIDestinationDescription::getAmazonOpenSearchServerlessDestinationDescription() const {
    return m_amazon_open_search_serverless_destination_description;
}
void OAIDestinationDescription::setAmazonOpenSearchServerlessDestinationDescription(const OAIDestinationDescription_AmazonOpenSearchServerlessDestinationDescription &amazon_open_search_serverless_destination_description) {
    m_amazon_open_search_serverless_destination_description = amazon_open_search_serverless_destination_description;
    m_amazon_open_search_serverless_destination_description_isSet = true;
}

bool OAIDestinationDescription::is_amazon_open_search_serverless_destination_description_Set() const{
    return m_amazon_open_search_serverless_destination_description_isSet;
}

bool OAIDestinationDescription::is_amazon_open_search_serverless_destination_description_Valid() const{
    return m_amazon_open_search_serverless_destination_description_isValid;
}

bool OAIDestinationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_s3_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redshift_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elasticsearch_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazonopensearchservice_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_splunk_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_endpoint_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_open_search_serverless_destination_description.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_destination_id_isValid && true;
}

} // namespace OpenAPI
