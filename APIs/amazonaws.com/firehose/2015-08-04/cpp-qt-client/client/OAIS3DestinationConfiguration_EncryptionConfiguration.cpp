/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3DestinationConfiguration_EncryptionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3DestinationConfiguration_EncryptionConfiguration::OAIS3DestinationConfiguration_EncryptionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3DestinationConfiguration_EncryptionConfiguration::OAIS3DestinationConfiguration_EncryptionConfiguration() {
    this->initializeModel();
}

OAIS3DestinationConfiguration_EncryptionConfiguration::~OAIS3DestinationConfiguration_EncryptionConfiguration() {}

void OAIS3DestinationConfiguration_EncryptionConfiguration::initializeModel() {

    m_no_encryption_config_isSet = false;
    m_no_encryption_config_isValid = false;

    m_kms_encryption_config_isSet = false;
    m_kms_encryption_config_isValid = false;
}

void OAIS3DestinationConfiguration_EncryptionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3DestinationConfiguration_EncryptionConfiguration::fromJsonObject(QJsonObject json) {

    m_no_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_no_encryption_config, json[QString("NoEncryptionConfig")]);
    m_no_encryption_config_isSet = !json[QString("NoEncryptionConfig")].isNull() && m_no_encryption_config_isValid;

    m_kms_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_kms_encryption_config, json[QString("KMSEncryptionConfig")]);
    m_kms_encryption_config_isSet = !json[QString("KMSEncryptionConfig")].isNull() && m_kms_encryption_config_isValid;
}

QString OAIS3DestinationConfiguration_EncryptionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3DestinationConfiguration_EncryptionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_no_encryption_config.isSet()) {
        obj.insert(QString("NoEncryptionConfig"), ::OpenAPI::toJsonValue(m_no_encryption_config));
    }
    if (m_kms_encryption_config.isSet()) {
        obj.insert(QString("KMSEncryptionConfig"), ::OpenAPI::toJsonValue(m_kms_encryption_config));
    }
    return obj;
}

OAINoEncryptionConfig OAIS3DestinationConfiguration_EncryptionConfiguration::getNoEncryptionConfig() const {
    return m_no_encryption_config;
}
void OAIS3DestinationConfiguration_EncryptionConfiguration::setNoEncryptionConfig(const OAINoEncryptionConfig &no_encryption_config) {
    m_no_encryption_config = no_encryption_config;
    m_no_encryption_config_isSet = true;
}

bool OAIS3DestinationConfiguration_EncryptionConfiguration::is_no_encryption_config_Set() const{
    return m_no_encryption_config_isSet;
}

bool OAIS3DestinationConfiguration_EncryptionConfiguration::is_no_encryption_config_Valid() const{
    return m_no_encryption_config_isValid;
}

OAIEncryptionConfiguration_KMSEncryptionConfig OAIS3DestinationConfiguration_EncryptionConfiguration::getKmsEncryptionConfig() const {
    return m_kms_encryption_config;
}
void OAIS3DestinationConfiguration_EncryptionConfiguration::setKmsEncryptionConfig(const OAIEncryptionConfiguration_KMSEncryptionConfig &kms_encryption_config) {
    m_kms_encryption_config = kms_encryption_config;
    m_kms_encryption_config_isSet = true;
}

bool OAIS3DestinationConfiguration_EncryptionConfiguration::is_kms_encryption_config_Set() const{
    return m_kms_encryption_config_isSet;
}

bool OAIS3DestinationConfiguration_EncryptionConfiguration::is_kms_encryption_config_Valid() const{
    return m_kms_encryption_config_isValid;
}

bool OAIS3DestinationConfiguration_EncryptionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_no_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3DestinationConfiguration_EncryptionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
