/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompressionFormat;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationBufferingHints;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationDataFormatConversionConfiguration;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationProcessingConfiguration;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationS3BackupConfiguration;
import org.openapitools.client.model.S3BackupMode;
import org.openapitools.client.model.S3DestinationConfigurationEncryptionConfiguration;
import org.openapitools.client.model.S3DestinationDescriptionCloudWatchLoggingOptions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ExtendedS3DestinationConfiguration
 */
public class ExtendedS3DestinationConfigurationTest {
    private final ExtendedS3DestinationConfiguration model = new ExtendedS3DestinationConfiguration();

    /**
     * Model tests for ExtendedS3DestinationConfiguration
     */
    @Test
    public void testExtendedS3DestinationConfiguration() {
        // TODO: test ExtendedS3DestinationConfiguration
    }

    /**
     * Test the property 'roleARN'
     */
    @Test
    public void roleARNTest() {
        // TODO: test roleARN
    }

    /**
     * Test the property 'bucketARN'
     */
    @Test
    public void bucketARNTest() {
        // TODO: test bucketARN
    }

    /**
     * Test the property 'prefix'
     */
    @Test
    public void prefixTest() {
        // TODO: test prefix
    }

    /**
     * Test the property 'errorOutputPrefix'
     */
    @Test
    public void errorOutputPrefixTest() {
        // TODO: test errorOutputPrefix
    }

    /**
     * Test the property 'bufferingHints'
     */
    @Test
    public void bufferingHintsTest() {
        // TODO: test bufferingHints
    }

    /**
     * Test the property 'compressionFormat'
     */
    @Test
    public void compressionFormatTest() {
        // TODO: test compressionFormat
    }

    /**
     * Test the property 'encryptionConfiguration'
     */
    @Test
    public void encryptionConfigurationTest() {
        // TODO: test encryptionConfiguration
    }

    /**
     * Test the property 'cloudWatchLoggingOptions'
     */
    @Test
    public void cloudWatchLoggingOptionsTest() {
        // TODO: test cloudWatchLoggingOptions
    }

    /**
     * Test the property 'processingConfiguration'
     */
    @Test
    public void processingConfigurationTest() {
        // TODO: test processingConfiguration
    }

    /**
     * Test the property 's3BackupMode'
     */
    @Test
    public void s3BackupModeTest() {
        // TODO: test s3BackupMode
    }

    /**
     * Test the property 's3BackupConfiguration'
     */
    @Test
    public void s3BackupConfigurationTest() {
        // TODO: test s3BackupConfiguration
    }

    /**
     * Test the property 'dataFormatConversionConfiguration'
     */
    @Test
    public void dataFormatConversionConfigurationTest() {
        // TODO: test dataFormatConversionConfiguration
    }

    /**
     * Test the property 'dynamicPartitioningConfiguration'
     */
    @Test
    public void dynamicPartitioningConfigurationTest() {
        // TODO: test dynamicPartitioningConfiguration
    }

}
