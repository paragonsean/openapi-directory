/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataFormatConversionConfigurationSchemaConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataFormatConversionConfigurationSchemaConfiguration {
  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_VERSION_ID = "VersionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public DataFormatConversionConfigurationSchemaConfiguration() {
  }

  public DataFormatConversionConfigurationSchemaConfiguration roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public DataFormatConversionConfigurationSchemaConfiguration catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * Get catalogId
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public DataFormatConversionConfigurationSchemaConfiguration databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public DataFormatConversionConfigurationSchemaConfiguration tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public DataFormatConversionConfigurationSchemaConfiguration region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public DataFormatConversionConfigurationSchemaConfiguration versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nullable
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFormatConversionConfigurationSchemaConfiguration dataFormatConversionConfigurationSchemaConfiguration = (DataFormatConversionConfigurationSchemaConfiguration) o;
    return Objects.equals(this.roleARN, dataFormatConversionConfigurationSchemaConfiguration.roleARN) &&
        Objects.equals(this.catalogId, dataFormatConversionConfigurationSchemaConfiguration.catalogId) &&
        Objects.equals(this.databaseName, dataFormatConversionConfigurationSchemaConfiguration.databaseName) &&
        Objects.equals(this.tableName, dataFormatConversionConfigurationSchemaConfiguration.tableName) &&
        Objects.equals(this.region, dataFormatConversionConfigurationSchemaConfiguration.region) &&
        Objects.equals(this.versionId, dataFormatConversionConfigurationSchemaConfiguration.versionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleARN, catalogId, databaseName, tableName, region, versionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFormatConversionConfigurationSchemaConfiguration {\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RoleARN");
    openapiFields.add("CatalogId");
    openapiFields.add("DatabaseName");
    openapiFields.add("TableName");
    openapiFields.add("Region");
    openapiFields.add("VersionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataFormatConversionConfigurationSchemaConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataFormatConversionConfigurationSchemaConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataFormatConversionConfigurationSchemaConfiguration is not found in the empty JSON string", DataFormatConversionConfigurationSchemaConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataFormatConversionConfigurationSchemaConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataFormatConversionConfigurationSchemaConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `CatalogId`
      if (jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CatalogId"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `TableName`
      if (jsonObj.get("TableName") != null && !jsonObj.get("TableName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TableName"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `VersionId`
      if (jsonObj.get("VersionId") != null && !jsonObj.get("VersionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VersionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataFormatConversionConfigurationSchemaConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataFormatConversionConfigurationSchemaConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataFormatConversionConfigurationSchemaConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataFormatConversionConfigurationSchemaConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataFormatConversionConfigurationSchemaConfiguration>() {
           @Override
           public void write(JsonWriter out, DataFormatConversionConfigurationSchemaConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataFormatConversionConfigurationSchemaConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataFormatConversionConfigurationSchemaConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataFormatConversionConfigurationSchemaConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataFormatConversionConfigurationSchemaConfiguration
   */
  public static DataFormatConversionConfigurationSchemaConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataFormatConversionConfigurationSchemaConfiguration.class);
  }

  /**
   * Convert an instance of DataFormatConversionConfigurationSchemaConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

