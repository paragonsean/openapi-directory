/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CloudWatchLoggingOptions;
import org.openapitools.client.model.HttpEndpointDestinationConfigurationRetryOptions;
import org.openapitools.client.model.HttpEndpointDestinationDescriptionBufferingHints;
import org.openapitools.client.model.HttpEndpointDestinationUpdateEndpointConfiguration;
import org.openapitools.client.model.HttpEndpointDestinationUpdateRequestConfiguration;
import org.openapitools.client.model.HttpEndpointS3BackupMode;
import org.openapitools.client.model.ProcessingConfiguration;
import org.openapitools.client.model.S3DestinationUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Updates the specified HTTP endpoint destination.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpEndpointDestinationUpdate {
  public static final String SERIALIZED_NAME_ENDPOINT_CONFIGURATION = "EndpointConfiguration";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIGURATION)
  private HttpEndpointDestinationUpdateEndpointConfiguration endpointConfiguration;

  public static final String SERIALIZED_NAME_BUFFERING_HINTS = "BufferingHints";
  @SerializedName(SERIALIZED_NAME_BUFFERING_HINTS)
  private HttpEndpointDestinationDescriptionBufferingHints bufferingHints;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS = "CloudWatchLoggingOptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS)
  private CloudWatchLoggingOptions cloudWatchLoggingOptions;

  public static final String SERIALIZED_NAME_REQUEST_CONFIGURATION = "RequestConfiguration";
  @SerializedName(SERIALIZED_NAME_REQUEST_CONFIGURATION)
  private HttpEndpointDestinationUpdateRequestConfiguration requestConfiguration;

  public static final String SERIALIZED_NAME_PROCESSING_CONFIGURATION = "ProcessingConfiguration";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CONFIGURATION)
  private ProcessingConfiguration processingConfiguration;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_RETRY_OPTIONS = "RetryOptions";
  @SerializedName(SERIALIZED_NAME_RETRY_OPTIONS)
  private HttpEndpointDestinationConfigurationRetryOptions retryOptions;

  public static final String SERIALIZED_NAME_S3_BACKUP_MODE = "S3BackupMode";
  @SerializedName(SERIALIZED_NAME_S3_BACKUP_MODE)
  private HttpEndpointS3BackupMode s3BackupMode;

  public static final String SERIALIZED_NAME_S3_UPDATE = "S3Update";
  @SerializedName(SERIALIZED_NAME_S3_UPDATE)
  private S3DestinationUpdate s3Update;

  public HttpEndpointDestinationUpdate() {
  }

  public HttpEndpointDestinationUpdate endpointConfiguration(HttpEndpointDestinationUpdateEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
    return this;
  }

  /**
   * Get endpointConfiguration
   * @return endpointConfiguration
   */
  @javax.annotation.Nullable
  public HttpEndpointDestinationUpdateEndpointConfiguration getEndpointConfiguration() {
    return endpointConfiguration;
  }

  public void setEndpointConfiguration(HttpEndpointDestinationUpdateEndpointConfiguration endpointConfiguration) {
    this.endpointConfiguration = endpointConfiguration;
  }


  public HttpEndpointDestinationUpdate bufferingHints(HttpEndpointDestinationDescriptionBufferingHints bufferingHints) {
    this.bufferingHints = bufferingHints;
    return this;
  }

  /**
   * Get bufferingHints
   * @return bufferingHints
   */
  @javax.annotation.Nullable
  public HttpEndpointDestinationDescriptionBufferingHints getBufferingHints() {
    return bufferingHints;
  }

  public void setBufferingHints(HttpEndpointDestinationDescriptionBufferingHints bufferingHints) {
    this.bufferingHints = bufferingHints;
  }


  public HttpEndpointDestinationUpdate cloudWatchLoggingOptions(CloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptions
   * @return cloudWatchLoggingOptions
   */
  @javax.annotation.Nullable
  public CloudWatchLoggingOptions getCloudWatchLoggingOptions() {
    return cloudWatchLoggingOptions;
  }

  public void setCloudWatchLoggingOptions(CloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
  }


  public HttpEndpointDestinationUpdate requestConfiguration(HttpEndpointDestinationUpdateRequestConfiguration requestConfiguration) {
    this.requestConfiguration = requestConfiguration;
    return this;
  }

  /**
   * Get requestConfiguration
   * @return requestConfiguration
   */
  @javax.annotation.Nullable
  public HttpEndpointDestinationUpdateRequestConfiguration getRequestConfiguration() {
    return requestConfiguration;
  }

  public void setRequestConfiguration(HttpEndpointDestinationUpdateRequestConfiguration requestConfiguration) {
    this.requestConfiguration = requestConfiguration;
  }


  public HttpEndpointDestinationUpdate processingConfiguration(ProcessingConfiguration processingConfiguration) {
    this.processingConfiguration = processingConfiguration;
    return this;
  }

  /**
   * Get processingConfiguration
   * @return processingConfiguration
   */
  @javax.annotation.Nullable
  public ProcessingConfiguration getProcessingConfiguration() {
    return processingConfiguration;
  }

  public void setProcessingConfiguration(ProcessingConfiguration processingConfiguration) {
    this.processingConfiguration = processingConfiguration;
  }


  public HttpEndpointDestinationUpdate roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public HttpEndpointDestinationUpdate retryOptions(HttpEndpointDestinationConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
    return this;
  }

  /**
   * Get retryOptions
   * @return retryOptions
   */
  @javax.annotation.Nullable
  public HttpEndpointDestinationConfigurationRetryOptions getRetryOptions() {
    return retryOptions;
  }

  public void setRetryOptions(HttpEndpointDestinationConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
  }


  public HttpEndpointDestinationUpdate s3BackupMode(HttpEndpointS3BackupMode s3BackupMode) {
    this.s3BackupMode = s3BackupMode;
    return this;
  }

  /**
   * Get s3BackupMode
   * @return s3BackupMode
   */
  @javax.annotation.Nullable
  public HttpEndpointS3BackupMode getS3BackupMode() {
    return s3BackupMode;
  }

  public void setS3BackupMode(HttpEndpointS3BackupMode s3BackupMode) {
    this.s3BackupMode = s3BackupMode;
  }


  public HttpEndpointDestinationUpdate s3Update(S3DestinationUpdate s3Update) {
    this.s3Update = s3Update;
    return this;
  }

  /**
   * Get s3Update
   * @return s3Update
   */
  @javax.annotation.Nullable
  public S3DestinationUpdate getS3Update() {
    return s3Update;
  }

  public void setS3Update(S3DestinationUpdate s3Update) {
    this.s3Update = s3Update;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpEndpointDestinationUpdate httpEndpointDestinationUpdate = (HttpEndpointDestinationUpdate) o;
    return Objects.equals(this.endpointConfiguration, httpEndpointDestinationUpdate.endpointConfiguration) &&
        Objects.equals(this.bufferingHints, httpEndpointDestinationUpdate.bufferingHints) &&
        Objects.equals(this.cloudWatchLoggingOptions, httpEndpointDestinationUpdate.cloudWatchLoggingOptions) &&
        Objects.equals(this.requestConfiguration, httpEndpointDestinationUpdate.requestConfiguration) &&
        Objects.equals(this.processingConfiguration, httpEndpointDestinationUpdate.processingConfiguration) &&
        Objects.equals(this.roleARN, httpEndpointDestinationUpdate.roleARN) &&
        Objects.equals(this.retryOptions, httpEndpointDestinationUpdate.retryOptions) &&
        Objects.equals(this.s3BackupMode, httpEndpointDestinationUpdate.s3BackupMode) &&
        Objects.equals(this.s3Update, httpEndpointDestinationUpdate.s3Update);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointConfiguration, bufferingHints, cloudWatchLoggingOptions, requestConfiguration, processingConfiguration, roleARN, retryOptions, s3BackupMode, s3Update);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpEndpointDestinationUpdate {\n");
    sb.append("    endpointConfiguration: ").append(toIndentedString(endpointConfiguration)).append("\n");
    sb.append("    bufferingHints: ").append(toIndentedString(bufferingHints)).append("\n");
    sb.append("    cloudWatchLoggingOptions: ").append(toIndentedString(cloudWatchLoggingOptions)).append("\n");
    sb.append("    requestConfiguration: ").append(toIndentedString(requestConfiguration)).append("\n");
    sb.append("    processingConfiguration: ").append(toIndentedString(processingConfiguration)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    retryOptions: ").append(toIndentedString(retryOptions)).append("\n");
    sb.append("    s3BackupMode: ").append(toIndentedString(s3BackupMode)).append("\n");
    sb.append("    s3Update: ").append(toIndentedString(s3Update)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EndpointConfiguration");
    openapiFields.add("BufferingHints");
    openapiFields.add("CloudWatchLoggingOptions");
    openapiFields.add("RequestConfiguration");
    openapiFields.add("ProcessingConfiguration");
    openapiFields.add("RoleARN");
    openapiFields.add("RetryOptions");
    openapiFields.add("S3BackupMode");
    openapiFields.add("S3Update");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpEndpointDestinationUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpEndpointDestinationUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpEndpointDestinationUpdate is not found in the empty JSON string", HttpEndpointDestinationUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpEndpointDestinationUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpEndpointDestinationUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EndpointConfiguration`
      if (jsonObj.get("EndpointConfiguration") != null && !jsonObj.get("EndpointConfiguration").isJsonNull()) {
        HttpEndpointDestinationUpdateEndpointConfiguration.validateJsonElement(jsonObj.get("EndpointConfiguration"));
      }
      // validate the optional field `BufferingHints`
      if (jsonObj.get("BufferingHints") != null && !jsonObj.get("BufferingHints").isJsonNull()) {
        HttpEndpointDestinationDescriptionBufferingHints.validateJsonElement(jsonObj.get("BufferingHints"));
      }
      // validate the optional field `CloudWatchLoggingOptions`
      if (jsonObj.get("CloudWatchLoggingOptions") != null && !jsonObj.get("CloudWatchLoggingOptions").isJsonNull()) {
        CloudWatchLoggingOptions.validateJsonElement(jsonObj.get("CloudWatchLoggingOptions"));
      }
      // validate the optional field `RequestConfiguration`
      if (jsonObj.get("RequestConfiguration") != null && !jsonObj.get("RequestConfiguration").isJsonNull()) {
        HttpEndpointDestinationUpdateRequestConfiguration.validateJsonElement(jsonObj.get("RequestConfiguration"));
      }
      // validate the optional field `ProcessingConfiguration`
      if (jsonObj.get("ProcessingConfiguration") != null && !jsonObj.get("ProcessingConfiguration").isJsonNull()) {
        ProcessingConfiguration.validateJsonElement(jsonObj.get("ProcessingConfiguration"));
      }
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `RetryOptions`
      if (jsonObj.get("RetryOptions") != null && !jsonObj.get("RetryOptions").isJsonNull()) {
        HttpEndpointDestinationConfigurationRetryOptions.validateJsonElement(jsonObj.get("RetryOptions"));
      }
      // validate the optional field `S3BackupMode`
      if (jsonObj.get("S3BackupMode") != null && !jsonObj.get("S3BackupMode").isJsonNull()) {
        HttpEndpointS3BackupMode.validateJsonElement(jsonObj.get("S3BackupMode"));
      }
      // validate the optional field `S3Update`
      if (jsonObj.get("S3Update") != null && !jsonObj.get("S3Update").isJsonNull()) {
        S3DestinationUpdate.validateJsonElement(jsonObj.get("S3Update"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpEndpointDestinationUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpEndpointDestinationUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpEndpointDestinationUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpEndpointDestinationUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpEndpointDestinationUpdate>() {
           @Override
           public void write(JsonWriter out, HttpEndpointDestinationUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpEndpointDestinationUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpEndpointDestinationUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpEndpointDestinationUpdate
   * @throws IOException if the JSON string is invalid with respect to HttpEndpointDestinationUpdate
   */
  public static HttpEndpointDestinationUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpEndpointDestinationUpdate.class);
  }

  /**
   * Convert an instance of HttpEndpointDestinationUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

