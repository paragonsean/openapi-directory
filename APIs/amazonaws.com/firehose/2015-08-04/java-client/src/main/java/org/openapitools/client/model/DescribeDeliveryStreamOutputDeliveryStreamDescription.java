/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration;
import org.openapitools.client.model.DeliveryStreamDescriptionSource;
import org.openapitools.client.model.DeliveryStreamEncryptionConfigurationFailureDescription;
import org.openapitools.client.model.DeliveryStreamStatus;
import org.openapitools.client.model.DeliveryStreamType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDeliveryStreamOutputDeliveryStreamDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDeliveryStreamOutputDeliveryStreamDescription {
  public static final String SERIALIZED_NAME_DELIVERY_STREAM_NAME = "DeliveryStreamName";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STREAM_NAME)
  private String deliveryStreamName;

  public static final String SERIALIZED_NAME_DELIVERY_STREAM_A_R_N = "DeliveryStreamARN";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STREAM_A_R_N)
  private String deliveryStreamARN;

  public static final String SERIALIZED_NAME_DELIVERY_STREAM_STATUS = "DeliveryStreamStatus";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STREAM_STATUS)
  private DeliveryStreamStatus deliveryStreamStatus;

  public static final String SERIALIZED_NAME_FAILURE_DESCRIPTION = "FailureDescription";
  @SerializedName(SERIALIZED_NAME_FAILURE_DESCRIPTION)
  private DeliveryStreamEncryptionConfigurationFailureDescription failureDescription;

  public static final String SERIALIZED_NAME_DELIVERY_STREAM_ENCRYPTION_CONFIGURATION = "DeliveryStreamEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STREAM_ENCRYPTION_CONFIGURATION)
  private DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration deliveryStreamEncryptionConfiguration;

  public static final String SERIALIZED_NAME_DELIVERY_STREAM_TYPE = "DeliveryStreamType";
  @SerializedName(SERIALIZED_NAME_DELIVERY_STREAM_TYPE)
  private DeliveryStreamType deliveryStreamType;

  public static final String SERIALIZED_NAME_VERSION_ID = "VersionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private String versionId;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "CreateTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private OffsetDateTime createTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP = "LastUpdateTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIMESTAMP)
  private OffsetDateTime lastUpdateTimestamp;

  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private DeliveryStreamDescriptionSource source;

  public static final String SERIALIZED_NAME_DESTINATIONS = "Destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List destinations;

  public static final String SERIALIZED_NAME_HAS_MORE_DESTINATIONS = "HasMoreDestinations";
  @SerializedName(SERIALIZED_NAME_HAS_MORE_DESTINATIONS)
  private Boolean hasMoreDestinations;

  public DescribeDeliveryStreamOutputDeliveryStreamDescription() {
  }

  public DescribeDeliveryStreamOutputDeliveryStreamDescription deliveryStreamName(String deliveryStreamName) {
    this.deliveryStreamName = deliveryStreamName;
    return this;
  }

  /**
   * Get deliveryStreamName
   * @return deliveryStreamName
   */
  @javax.annotation.Nonnull
  public String getDeliveryStreamName() {
    return deliveryStreamName;
  }

  public void setDeliveryStreamName(String deliveryStreamName) {
    this.deliveryStreamName = deliveryStreamName;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription deliveryStreamARN(String deliveryStreamARN) {
    this.deliveryStreamARN = deliveryStreamARN;
    return this;
  }

  /**
   * Get deliveryStreamARN
   * @return deliveryStreamARN
   */
  @javax.annotation.Nonnull
  public String getDeliveryStreamARN() {
    return deliveryStreamARN;
  }

  public void setDeliveryStreamARN(String deliveryStreamARN) {
    this.deliveryStreamARN = deliveryStreamARN;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription deliveryStreamStatus(DeliveryStreamStatus deliveryStreamStatus) {
    this.deliveryStreamStatus = deliveryStreamStatus;
    return this;
  }

  /**
   * Get deliveryStreamStatus
   * @return deliveryStreamStatus
   */
  @javax.annotation.Nonnull
  public DeliveryStreamStatus getDeliveryStreamStatus() {
    return deliveryStreamStatus;
  }

  public void setDeliveryStreamStatus(DeliveryStreamStatus deliveryStreamStatus) {
    this.deliveryStreamStatus = deliveryStreamStatus;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription failureDescription(DeliveryStreamEncryptionConfigurationFailureDescription failureDescription) {
    this.failureDescription = failureDescription;
    return this;
  }

  /**
   * Get failureDescription
   * @return failureDescription
   */
  @javax.annotation.Nullable
  public DeliveryStreamEncryptionConfigurationFailureDescription getFailureDescription() {
    return failureDescription;
  }

  public void setFailureDescription(DeliveryStreamEncryptionConfigurationFailureDescription failureDescription) {
    this.failureDescription = failureDescription;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription deliveryStreamEncryptionConfiguration(DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration deliveryStreamEncryptionConfiguration) {
    this.deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfiguration;
    return this;
  }

  /**
   * Get deliveryStreamEncryptionConfiguration
   * @return deliveryStreamEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration getDeliveryStreamEncryptionConfiguration() {
    return deliveryStreamEncryptionConfiguration;
  }

  public void setDeliveryStreamEncryptionConfiguration(DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration deliveryStreamEncryptionConfiguration) {
    this.deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfiguration;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription deliveryStreamType(DeliveryStreamType deliveryStreamType) {
    this.deliveryStreamType = deliveryStreamType;
    return this;
  }

  /**
   * Get deliveryStreamType
   * @return deliveryStreamType
   */
  @javax.annotation.Nonnull
  public DeliveryStreamType getDeliveryStreamType() {
    return deliveryStreamType;
  }

  public void setDeliveryStreamType(DeliveryStreamType deliveryStreamType) {
    this.deliveryStreamType = deliveryStreamType;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

  /**
   * Get versionId
   * @return versionId
   */
  @javax.annotation.Nonnull
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription createTimestamp(OffsetDateTime createTimestamp) {
    this.createTimestamp = createTimestamp;
    return this;
  }

  /**
   * Get createTimestamp
   * @return createTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreateTimestamp() {
    return createTimestamp;
  }

  public void setCreateTimestamp(OffsetDateTime createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription lastUpdateTimestamp(OffsetDateTime lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
    return this;
  }

  /**
   * Get lastUpdateTimestamp
   * @return lastUpdateTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

  public void setLastUpdateTimestamp(OffsetDateTime lastUpdateTimestamp) {
    this.lastUpdateTimestamp = lastUpdateTimestamp;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription source(DeliveryStreamDescriptionSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public DeliveryStreamDescriptionSource getSource() {
    return source;
  }

  public void setSource(DeliveryStreamDescriptionSource source) {
    this.source = source;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription destinations(List destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nonnull
  public List getDestinations() {
    return destinations;
  }

  public void setDestinations(List destinations) {
    this.destinations = destinations;
  }


  public DescribeDeliveryStreamOutputDeliveryStreamDescription hasMoreDestinations(Boolean hasMoreDestinations) {
    this.hasMoreDestinations = hasMoreDestinations;
    return this;
  }

  /**
   * Get hasMoreDestinations
   * @return hasMoreDestinations
   */
  @javax.annotation.Nonnull
  public Boolean getHasMoreDestinations() {
    return hasMoreDestinations;
  }

  public void setHasMoreDestinations(Boolean hasMoreDestinations) {
    this.hasMoreDestinations = hasMoreDestinations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDeliveryStreamOutputDeliveryStreamDescription describeDeliveryStreamOutputDeliveryStreamDescription = (DescribeDeliveryStreamOutputDeliveryStreamDescription) o;
    return Objects.equals(this.deliveryStreamName, describeDeliveryStreamOutputDeliveryStreamDescription.deliveryStreamName) &&
        Objects.equals(this.deliveryStreamARN, describeDeliveryStreamOutputDeliveryStreamDescription.deliveryStreamARN) &&
        Objects.equals(this.deliveryStreamStatus, describeDeliveryStreamOutputDeliveryStreamDescription.deliveryStreamStatus) &&
        Objects.equals(this.failureDescription, describeDeliveryStreamOutputDeliveryStreamDescription.failureDescription) &&
        Objects.equals(this.deliveryStreamEncryptionConfiguration, describeDeliveryStreamOutputDeliveryStreamDescription.deliveryStreamEncryptionConfiguration) &&
        Objects.equals(this.deliveryStreamType, describeDeliveryStreamOutputDeliveryStreamDescription.deliveryStreamType) &&
        Objects.equals(this.versionId, describeDeliveryStreamOutputDeliveryStreamDescription.versionId) &&
        Objects.equals(this.createTimestamp, describeDeliveryStreamOutputDeliveryStreamDescription.createTimestamp) &&
        Objects.equals(this.lastUpdateTimestamp, describeDeliveryStreamOutputDeliveryStreamDescription.lastUpdateTimestamp) &&
        Objects.equals(this.source, describeDeliveryStreamOutputDeliveryStreamDescription.source) &&
        Objects.equals(this.destinations, describeDeliveryStreamOutputDeliveryStreamDescription.destinations) &&
        Objects.equals(this.hasMoreDestinations, describeDeliveryStreamOutputDeliveryStreamDescription.hasMoreDestinations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deliveryStreamName, deliveryStreamARN, deliveryStreamStatus, failureDescription, deliveryStreamEncryptionConfiguration, deliveryStreamType, versionId, createTimestamp, lastUpdateTimestamp, source, destinations, hasMoreDestinations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDeliveryStreamOutputDeliveryStreamDescription {\n");
    sb.append("    deliveryStreamName: ").append(toIndentedString(deliveryStreamName)).append("\n");
    sb.append("    deliveryStreamARN: ").append(toIndentedString(deliveryStreamARN)).append("\n");
    sb.append("    deliveryStreamStatus: ").append(toIndentedString(deliveryStreamStatus)).append("\n");
    sb.append("    failureDescription: ").append(toIndentedString(failureDescription)).append("\n");
    sb.append("    deliveryStreamEncryptionConfiguration: ").append(toIndentedString(deliveryStreamEncryptionConfiguration)).append("\n");
    sb.append("    deliveryStreamType: ").append(toIndentedString(deliveryStreamType)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    lastUpdateTimestamp: ").append(toIndentedString(lastUpdateTimestamp)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    hasMoreDestinations: ").append(toIndentedString(hasMoreDestinations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeliveryStreamName");
    openapiFields.add("DeliveryStreamARN");
    openapiFields.add("DeliveryStreamStatus");
    openapiFields.add("FailureDescription");
    openapiFields.add("DeliveryStreamEncryptionConfiguration");
    openapiFields.add("DeliveryStreamType");
    openapiFields.add("VersionId");
    openapiFields.add("CreateTimestamp");
    openapiFields.add("LastUpdateTimestamp");
    openapiFields.add("Source");
    openapiFields.add("Destinations");
    openapiFields.add("HasMoreDestinations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DeliveryStreamName");
    openapiRequiredFields.add("DeliveryStreamARN");
    openapiRequiredFields.add("DeliveryStreamStatus");
    openapiRequiredFields.add("DeliveryStreamType");
    openapiRequiredFields.add("VersionId");
    openapiRequiredFields.add("Destinations");
    openapiRequiredFields.add("HasMoreDestinations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDeliveryStreamOutputDeliveryStreamDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDeliveryStreamOutputDeliveryStreamDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDeliveryStreamOutputDeliveryStreamDescription is not found in the empty JSON string", DescribeDeliveryStreamOutputDeliveryStreamDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDeliveryStreamOutputDeliveryStreamDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDeliveryStreamOutputDeliveryStreamDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeDeliveryStreamOutputDeliveryStreamDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DeliveryStreamName`
      String.validateJsonElement(jsonObj.get("DeliveryStreamName"));
      // validate the required field `DeliveryStreamARN`
      String.validateJsonElement(jsonObj.get("DeliveryStreamARN"));
      // validate the required field `DeliveryStreamStatus`
      DeliveryStreamStatus.validateJsonElement(jsonObj.get("DeliveryStreamStatus"));
      // validate the optional field `FailureDescription`
      if (jsonObj.get("FailureDescription") != null && !jsonObj.get("FailureDescription").isJsonNull()) {
        DeliveryStreamEncryptionConfigurationFailureDescription.validateJsonElement(jsonObj.get("FailureDescription"));
      }
      // validate the optional field `DeliveryStreamEncryptionConfiguration`
      if (jsonObj.get("DeliveryStreamEncryptionConfiguration") != null && !jsonObj.get("DeliveryStreamEncryptionConfiguration").isJsonNull()) {
        DeliveryStreamDescriptionDeliveryStreamEncryptionConfiguration.validateJsonElement(jsonObj.get("DeliveryStreamEncryptionConfiguration"));
      }
      // validate the required field `DeliveryStreamType`
      DeliveryStreamType.validateJsonElement(jsonObj.get("DeliveryStreamType"));
      // validate the required field `VersionId`
      String.validateJsonElement(jsonObj.get("VersionId"));
      // validate the optional field `CreateTimestamp`
      if (jsonObj.get("CreateTimestamp") != null && !jsonObj.get("CreateTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreateTimestamp"));
      }
      // validate the optional field `LastUpdateTimestamp`
      if (jsonObj.get("LastUpdateTimestamp") != null && !jsonObj.get("LastUpdateTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdateTimestamp"));
      }
      // validate the optional field `Source`
      if (jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) {
        DeliveryStreamDescriptionSource.validateJsonElement(jsonObj.get("Source"));
      }
      // validate the required field `Destinations`
      List.validateJsonElement(jsonObj.get("Destinations"));
      // validate the required field `HasMoreDestinations`
      Boolean.validateJsonElement(jsonObj.get("HasMoreDestinations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDeliveryStreamOutputDeliveryStreamDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDeliveryStreamOutputDeliveryStreamDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDeliveryStreamOutputDeliveryStreamDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDeliveryStreamOutputDeliveryStreamDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDeliveryStreamOutputDeliveryStreamDescription>() {
           @Override
           public void write(JsonWriter out, DescribeDeliveryStreamOutputDeliveryStreamDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDeliveryStreamOutputDeliveryStreamDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDeliveryStreamOutputDeliveryStreamDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDeliveryStreamOutputDeliveryStreamDescription
   * @throws IOException if the JSON string is invalid with respect to DescribeDeliveryStreamOutputDeliveryStreamDescription
   */
  public static DescribeDeliveryStreamOutputDeliveryStreamDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDeliveryStreamOutputDeliveryStreamDescription.class);
  }

  /**
   * Convert an instance of DescribeDeliveryStreamOutputDeliveryStreamDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

