/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CompressionFormat;
import org.openapitools.client.model.S3DestinationConfigurationBufferingHints;
import org.openapitools.client.model.S3DestinationConfigurationCloudWatchLoggingOptions;
import org.openapitools.client.model.S3DestinationConfigurationEncryptionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDeliveryStreamInputS3DestinationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDeliveryStreamInputS3DestinationConfiguration {
  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_BUCKET_A_R_N = "BucketARN";
  @SerializedName(SERIALIZED_NAME_BUCKET_A_R_N)
  private String bucketARN;

  public static final String SERIALIZED_NAME_PREFIX = "Prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_ERROR_OUTPUT_PREFIX = "ErrorOutputPrefix";
  @SerializedName(SERIALIZED_NAME_ERROR_OUTPUT_PREFIX)
  private String errorOutputPrefix;

  public static final String SERIALIZED_NAME_BUFFERING_HINTS = "BufferingHints";
  @SerializedName(SERIALIZED_NAME_BUFFERING_HINTS)
  private S3DestinationConfigurationBufferingHints bufferingHints;

  public static final String SERIALIZED_NAME_COMPRESSION_FORMAT = "CompressionFormat";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_FORMAT)
  private CompressionFormat compressionFormat;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIGURATION = "EncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIGURATION)
  private S3DestinationConfigurationEncryptionConfiguration encryptionConfiguration;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS = "CloudWatchLoggingOptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS)
  private S3DestinationConfigurationCloudWatchLoggingOptions cloudWatchLoggingOptions;

  public CreateDeliveryStreamInputS3DestinationConfiguration() {
  }

  public CreateDeliveryStreamInputS3DestinationConfiguration roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nonnull
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration bucketARN(String bucketARN) {
    this.bucketARN = bucketARN;
    return this;
  }

  /**
   * Get bucketARN
   * @return bucketARN
   */
  @javax.annotation.Nonnull
  public String getBucketARN() {
    return bucketARN;
  }

  public void setBucketARN(String bucketARN) {
    this.bucketARN = bucketARN;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * Get prefix
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration errorOutputPrefix(String errorOutputPrefix) {
    this.errorOutputPrefix = errorOutputPrefix;
    return this;
  }

  /**
   * Get errorOutputPrefix
   * @return errorOutputPrefix
   */
  @javax.annotation.Nullable
  public String getErrorOutputPrefix() {
    return errorOutputPrefix;
  }

  public void setErrorOutputPrefix(String errorOutputPrefix) {
    this.errorOutputPrefix = errorOutputPrefix;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration bufferingHints(S3DestinationConfigurationBufferingHints bufferingHints) {
    this.bufferingHints = bufferingHints;
    return this;
  }

  /**
   * Get bufferingHints
   * @return bufferingHints
   */
  @javax.annotation.Nullable
  public S3DestinationConfigurationBufferingHints getBufferingHints() {
    return bufferingHints;
  }

  public void setBufferingHints(S3DestinationConfigurationBufferingHints bufferingHints) {
    this.bufferingHints = bufferingHints;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration compressionFormat(CompressionFormat compressionFormat) {
    this.compressionFormat = compressionFormat;
    return this;
  }

  /**
   * Get compressionFormat
   * @return compressionFormat
   */
  @javax.annotation.Nullable
  public CompressionFormat getCompressionFormat() {
    return compressionFormat;
  }

  public void setCompressionFormat(CompressionFormat compressionFormat) {
    this.compressionFormat = compressionFormat;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration encryptionConfiguration(S3DestinationConfigurationEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
    return this;
  }

  /**
   * Get encryptionConfiguration
   * @return encryptionConfiguration
   */
  @javax.annotation.Nullable
  public S3DestinationConfigurationEncryptionConfiguration getEncryptionConfiguration() {
    return encryptionConfiguration;
  }

  public void setEncryptionConfiguration(S3DestinationConfigurationEncryptionConfiguration encryptionConfiguration) {
    this.encryptionConfiguration = encryptionConfiguration;
  }


  public CreateDeliveryStreamInputS3DestinationConfiguration cloudWatchLoggingOptions(S3DestinationConfigurationCloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptions
   * @return cloudWatchLoggingOptions
   */
  @javax.annotation.Nullable
  public S3DestinationConfigurationCloudWatchLoggingOptions getCloudWatchLoggingOptions() {
    return cloudWatchLoggingOptions;
  }

  public void setCloudWatchLoggingOptions(S3DestinationConfigurationCloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDeliveryStreamInputS3DestinationConfiguration createDeliveryStreamInputS3DestinationConfiguration = (CreateDeliveryStreamInputS3DestinationConfiguration) o;
    return Objects.equals(this.roleARN, createDeliveryStreamInputS3DestinationConfiguration.roleARN) &&
        Objects.equals(this.bucketARN, createDeliveryStreamInputS3DestinationConfiguration.bucketARN) &&
        Objects.equals(this.prefix, createDeliveryStreamInputS3DestinationConfiguration.prefix) &&
        Objects.equals(this.errorOutputPrefix, createDeliveryStreamInputS3DestinationConfiguration.errorOutputPrefix) &&
        Objects.equals(this.bufferingHints, createDeliveryStreamInputS3DestinationConfiguration.bufferingHints) &&
        Objects.equals(this.compressionFormat, createDeliveryStreamInputS3DestinationConfiguration.compressionFormat) &&
        Objects.equals(this.encryptionConfiguration, createDeliveryStreamInputS3DestinationConfiguration.encryptionConfiguration) &&
        Objects.equals(this.cloudWatchLoggingOptions, createDeliveryStreamInputS3DestinationConfiguration.cloudWatchLoggingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleARN, bucketARN, prefix, errorOutputPrefix, bufferingHints, compressionFormat, encryptionConfiguration, cloudWatchLoggingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDeliveryStreamInputS3DestinationConfiguration {\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    bucketARN: ").append(toIndentedString(bucketARN)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    errorOutputPrefix: ").append(toIndentedString(errorOutputPrefix)).append("\n");
    sb.append("    bufferingHints: ").append(toIndentedString(bufferingHints)).append("\n");
    sb.append("    compressionFormat: ").append(toIndentedString(compressionFormat)).append("\n");
    sb.append("    encryptionConfiguration: ").append(toIndentedString(encryptionConfiguration)).append("\n");
    sb.append("    cloudWatchLoggingOptions: ").append(toIndentedString(cloudWatchLoggingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RoleARN");
    openapiFields.add("BucketARN");
    openapiFields.add("Prefix");
    openapiFields.add("ErrorOutputPrefix");
    openapiFields.add("BufferingHints");
    openapiFields.add("CompressionFormat");
    openapiFields.add("EncryptionConfiguration");
    openapiFields.add("CloudWatchLoggingOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RoleARN");
    openapiRequiredFields.add("BucketARN");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDeliveryStreamInputS3DestinationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDeliveryStreamInputS3DestinationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDeliveryStreamInputS3DestinationConfiguration is not found in the empty JSON string", CreateDeliveryStreamInputS3DestinationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDeliveryStreamInputS3DestinationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDeliveryStreamInputS3DestinationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDeliveryStreamInputS3DestinationConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RoleARN`
      String.validateJsonElement(jsonObj.get("RoleARN"));
      // validate the required field `BucketARN`
      String.validateJsonElement(jsonObj.get("BucketARN"));
      // validate the optional field `Prefix`
      if (jsonObj.get("Prefix") != null && !jsonObj.get("Prefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Prefix"));
      }
      // validate the optional field `ErrorOutputPrefix`
      if (jsonObj.get("ErrorOutputPrefix") != null && !jsonObj.get("ErrorOutputPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorOutputPrefix"));
      }
      // validate the optional field `BufferingHints`
      if (jsonObj.get("BufferingHints") != null && !jsonObj.get("BufferingHints").isJsonNull()) {
        S3DestinationConfigurationBufferingHints.validateJsonElement(jsonObj.get("BufferingHints"));
      }
      // validate the optional field `CompressionFormat`
      if (jsonObj.get("CompressionFormat") != null && !jsonObj.get("CompressionFormat").isJsonNull()) {
        CompressionFormat.validateJsonElement(jsonObj.get("CompressionFormat"));
      }
      // validate the optional field `EncryptionConfiguration`
      if (jsonObj.get("EncryptionConfiguration") != null && !jsonObj.get("EncryptionConfiguration").isJsonNull()) {
        S3DestinationConfigurationEncryptionConfiguration.validateJsonElement(jsonObj.get("EncryptionConfiguration"));
      }
      // validate the optional field `CloudWatchLoggingOptions`
      if (jsonObj.get("CloudWatchLoggingOptions") != null && !jsonObj.get("CloudWatchLoggingOptions").isJsonNull()) {
        S3DestinationConfigurationCloudWatchLoggingOptions.validateJsonElement(jsonObj.get("CloudWatchLoggingOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDeliveryStreamInputS3DestinationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDeliveryStreamInputS3DestinationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDeliveryStreamInputS3DestinationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDeliveryStreamInputS3DestinationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDeliveryStreamInputS3DestinationConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateDeliveryStreamInputS3DestinationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDeliveryStreamInputS3DestinationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDeliveryStreamInputS3DestinationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDeliveryStreamInputS3DestinationConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateDeliveryStreamInputS3DestinationConfiguration
   */
  public static CreateDeliveryStreamInputS3DestinationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDeliveryStreamInputS3DestinationConfiguration.class);
  }

  /**
   * Convert an instance of CreateDeliveryStreamInputS3DestinationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

