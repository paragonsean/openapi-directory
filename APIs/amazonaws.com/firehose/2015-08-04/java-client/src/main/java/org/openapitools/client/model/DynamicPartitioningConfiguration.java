/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DynamicPartitioningConfigurationRetryOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration of the dynamic partitioning mechanism that creates smaller data sets from the streaming data by partitioning it based on partition keys. Currently, dynamic partitioning is only supported for Amazon S3 destinations. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DynamicPartitioningConfiguration {
  public static final String SERIALIZED_NAME_RETRY_OPTIONS = "RetryOptions";
  @SerializedName(SERIALIZED_NAME_RETRY_OPTIONS)
  private DynamicPartitioningConfigurationRetryOptions retryOptions;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public DynamicPartitioningConfiguration() {
  }

  public DynamicPartitioningConfiguration retryOptions(DynamicPartitioningConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
    return this;
  }

  /**
   * Get retryOptions
   * @return retryOptions
   */
  @javax.annotation.Nullable
  public DynamicPartitioningConfigurationRetryOptions getRetryOptions() {
    return retryOptions;
  }

  public void setRetryOptions(DynamicPartitioningConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
  }


  public DynamicPartitioningConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicPartitioningConfiguration dynamicPartitioningConfiguration = (DynamicPartitioningConfiguration) o;
    return Objects.equals(this.retryOptions, dynamicPartitioningConfiguration.retryOptions) &&
        Objects.equals(this.enabled, dynamicPartitioningConfiguration.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(retryOptions, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicPartitioningConfiguration {\n");
    sb.append("    retryOptions: ").append(toIndentedString(retryOptions)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RetryOptions");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicPartitioningConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicPartitioningConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicPartitioningConfiguration is not found in the empty JSON string", DynamicPartitioningConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicPartitioningConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicPartitioningConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RetryOptions`
      if (jsonObj.get("RetryOptions") != null && !jsonObj.get("RetryOptions").isJsonNull()) {
        DynamicPartitioningConfigurationRetryOptions.validateJsonElement(jsonObj.get("RetryOptions"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicPartitioningConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicPartitioningConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicPartitioningConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicPartitioningConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicPartitioningConfiguration>() {
           @Override
           public void write(JsonWriter out, DynamicPartitioningConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicPartitioningConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicPartitioningConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicPartitioningConfiguration
   * @throws IOException if the JSON string is invalid with respect to DynamicPartitioningConfiguration
   */
  public static DynamicPartitioningConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicPartitioningConfiguration.class);
  }

  /**
   * Convert an instance of DynamicPartitioningConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

