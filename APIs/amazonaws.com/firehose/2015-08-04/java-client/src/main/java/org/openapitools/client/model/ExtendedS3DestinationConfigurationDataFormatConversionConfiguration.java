/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataFormatConversionConfigurationInputFormatConfiguration;
import org.openapitools.client.model.DataFormatConversionConfigurationOutputFormatConfiguration;
import org.openapitools.client.model.DataFormatConversionConfigurationSchemaConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExtendedS3DestinationConfigurationDataFormatConversionConfiguration {
  public static final String SERIALIZED_NAME_SCHEMA_CONFIGURATION = "SchemaConfiguration";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CONFIGURATION)
  private DataFormatConversionConfigurationSchemaConfiguration schemaConfiguration;

  public static final String SERIALIZED_NAME_INPUT_FORMAT_CONFIGURATION = "InputFormatConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT_CONFIGURATION)
  private DataFormatConversionConfigurationInputFormatConfiguration inputFormatConfiguration;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT_CONFIGURATION = "OutputFormatConfiguration";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT_CONFIGURATION)
  private DataFormatConversionConfigurationOutputFormatConfiguration outputFormatConfiguration;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public ExtendedS3DestinationConfigurationDataFormatConversionConfiguration() {
  }

  public ExtendedS3DestinationConfigurationDataFormatConversionConfiguration schemaConfiguration(DataFormatConversionConfigurationSchemaConfiguration schemaConfiguration) {
    this.schemaConfiguration = schemaConfiguration;
    return this;
  }

  /**
   * Get schemaConfiguration
   * @return schemaConfiguration
   */
  @javax.annotation.Nullable
  public DataFormatConversionConfigurationSchemaConfiguration getSchemaConfiguration() {
    return schemaConfiguration;
  }

  public void setSchemaConfiguration(DataFormatConversionConfigurationSchemaConfiguration schemaConfiguration) {
    this.schemaConfiguration = schemaConfiguration;
  }


  public ExtendedS3DestinationConfigurationDataFormatConversionConfiguration inputFormatConfiguration(DataFormatConversionConfigurationInputFormatConfiguration inputFormatConfiguration) {
    this.inputFormatConfiguration = inputFormatConfiguration;
    return this;
  }

  /**
   * Get inputFormatConfiguration
   * @return inputFormatConfiguration
   */
  @javax.annotation.Nullable
  public DataFormatConversionConfigurationInputFormatConfiguration getInputFormatConfiguration() {
    return inputFormatConfiguration;
  }

  public void setInputFormatConfiguration(DataFormatConversionConfigurationInputFormatConfiguration inputFormatConfiguration) {
    this.inputFormatConfiguration = inputFormatConfiguration;
  }


  public ExtendedS3DestinationConfigurationDataFormatConversionConfiguration outputFormatConfiguration(DataFormatConversionConfigurationOutputFormatConfiguration outputFormatConfiguration) {
    this.outputFormatConfiguration = outputFormatConfiguration;
    return this;
  }

  /**
   * Get outputFormatConfiguration
   * @return outputFormatConfiguration
   */
  @javax.annotation.Nullable
  public DataFormatConversionConfigurationOutputFormatConfiguration getOutputFormatConfiguration() {
    return outputFormatConfiguration;
  }

  public void setOutputFormatConfiguration(DataFormatConversionConfigurationOutputFormatConfiguration outputFormatConfiguration) {
    this.outputFormatConfiguration = outputFormatConfiguration;
  }


  public ExtendedS3DestinationConfigurationDataFormatConversionConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExtendedS3DestinationConfigurationDataFormatConversionConfiguration extendedS3DestinationConfigurationDataFormatConversionConfiguration = (ExtendedS3DestinationConfigurationDataFormatConversionConfiguration) o;
    return Objects.equals(this.schemaConfiguration, extendedS3DestinationConfigurationDataFormatConversionConfiguration.schemaConfiguration) &&
        Objects.equals(this.inputFormatConfiguration, extendedS3DestinationConfigurationDataFormatConversionConfiguration.inputFormatConfiguration) &&
        Objects.equals(this.outputFormatConfiguration, extendedS3DestinationConfigurationDataFormatConversionConfiguration.outputFormatConfiguration) &&
        Objects.equals(this.enabled, extendedS3DestinationConfigurationDataFormatConversionConfiguration.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaConfiguration, inputFormatConfiguration, outputFormatConfiguration, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExtendedS3DestinationConfigurationDataFormatConversionConfiguration {\n");
    sb.append("    schemaConfiguration: ").append(toIndentedString(schemaConfiguration)).append("\n");
    sb.append("    inputFormatConfiguration: ").append(toIndentedString(inputFormatConfiguration)).append("\n");
    sb.append("    outputFormatConfiguration: ").append(toIndentedString(outputFormatConfiguration)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaConfiguration");
    openapiFields.add("InputFormatConfiguration");
    openapiFields.add("OutputFormatConfiguration");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExtendedS3DestinationConfigurationDataFormatConversionConfiguration is not found in the empty JSON string", ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExtendedS3DestinationConfigurationDataFormatConversionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SchemaConfiguration`
      if (jsonObj.get("SchemaConfiguration") != null && !jsonObj.get("SchemaConfiguration").isJsonNull()) {
        DataFormatConversionConfigurationSchemaConfiguration.validateJsonElement(jsonObj.get("SchemaConfiguration"));
      }
      // validate the optional field `InputFormatConfiguration`
      if (jsonObj.get("InputFormatConfiguration") != null && !jsonObj.get("InputFormatConfiguration").isJsonNull()) {
        DataFormatConversionConfigurationInputFormatConfiguration.validateJsonElement(jsonObj.get("InputFormatConfiguration"));
      }
      // validate the optional field `OutputFormatConfiguration`
      if (jsonObj.get("OutputFormatConfiguration") != null && !jsonObj.get("OutputFormatConfiguration").isJsonNull()) {
        DataFormatConversionConfigurationOutputFormatConfiguration.validateJsonElement(jsonObj.get("OutputFormatConfiguration"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExtendedS3DestinationConfigurationDataFormatConversionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExtendedS3DestinationConfigurationDataFormatConversionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ExtendedS3DestinationConfigurationDataFormatConversionConfiguration>() {
           @Override
           public void write(JsonWriter out, ExtendedS3DestinationConfigurationDataFormatConversionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExtendedS3DestinationConfigurationDataFormatConversionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExtendedS3DestinationConfigurationDataFormatConversionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
   * @throws IOException if the JSON string is invalid with respect to ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
   */
  public static ExtendedS3DestinationConfigurationDataFormatConversionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.class);
  }

  /**
   * Convert an instance of ExtendedS3DestinationConfigurationDataFormatConversionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

