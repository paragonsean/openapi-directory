/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OpenXJsonSerDe {
  public static final String SERIALIZED_NAME_CONVERT_DOTS_IN_JSON_KEYS_TO_UNDERSCORES = "ConvertDotsInJsonKeysToUnderscores";
  @SerializedName(SERIALIZED_NAME_CONVERT_DOTS_IN_JSON_KEYS_TO_UNDERSCORES)
  private Boolean convertDotsInJsonKeysToUnderscores;

  public static final String SERIALIZED_NAME_CASE_INSENSITIVE = "CaseInsensitive";
  @SerializedName(SERIALIZED_NAME_CASE_INSENSITIVE)
  private Boolean caseInsensitive;

  public static final String SERIALIZED_NAME_COLUMN_TO_JSON_KEY_MAPPINGS = "ColumnToJsonKeyMappings";
  @SerializedName(SERIALIZED_NAME_COLUMN_TO_JSON_KEY_MAPPINGS)
  private Map columnToJsonKeyMappings;

  public OpenXJsonSerDe() {
  }

  public OpenXJsonSerDe convertDotsInJsonKeysToUnderscores(Boolean convertDotsInJsonKeysToUnderscores) {
    this.convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscores;
    return this;
  }

  /**
   * Get convertDotsInJsonKeysToUnderscores
   * @return convertDotsInJsonKeysToUnderscores
   */
  @javax.annotation.Nullable
  public Boolean getConvertDotsInJsonKeysToUnderscores() {
    return convertDotsInJsonKeysToUnderscores;
  }

  public void setConvertDotsInJsonKeysToUnderscores(Boolean convertDotsInJsonKeysToUnderscores) {
    this.convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscores;
  }


  public OpenXJsonSerDe caseInsensitive(Boolean caseInsensitive) {
    this.caseInsensitive = caseInsensitive;
    return this;
  }

  /**
   * Get caseInsensitive
   * @return caseInsensitive
   */
  @javax.annotation.Nullable
  public Boolean getCaseInsensitive() {
    return caseInsensitive;
  }

  public void setCaseInsensitive(Boolean caseInsensitive) {
    this.caseInsensitive = caseInsensitive;
  }


  public OpenXJsonSerDe columnToJsonKeyMappings(Map columnToJsonKeyMappings) {
    this.columnToJsonKeyMappings = columnToJsonKeyMappings;
    return this;
  }

  /**
   * Get columnToJsonKeyMappings
   * @return columnToJsonKeyMappings
   */
  @javax.annotation.Nullable
  public Map getColumnToJsonKeyMappings() {
    return columnToJsonKeyMappings;
  }

  public void setColumnToJsonKeyMappings(Map columnToJsonKeyMappings) {
    this.columnToJsonKeyMappings = columnToJsonKeyMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenXJsonSerDe openXJsonSerDe = (OpenXJsonSerDe) o;
    return Objects.equals(this.convertDotsInJsonKeysToUnderscores, openXJsonSerDe.convertDotsInJsonKeysToUnderscores) &&
        Objects.equals(this.caseInsensitive, openXJsonSerDe.caseInsensitive) &&
        Objects.equals(this.columnToJsonKeyMappings, openXJsonSerDe.columnToJsonKeyMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convertDotsInJsonKeysToUnderscores, caseInsensitive, columnToJsonKeyMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenXJsonSerDe {\n");
    sb.append("    convertDotsInJsonKeysToUnderscores: ").append(toIndentedString(convertDotsInJsonKeysToUnderscores)).append("\n");
    sb.append("    caseInsensitive: ").append(toIndentedString(caseInsensitive)).append("\n");
    sb.append("    columnToJsonKeyMappings: ").append(toIndentedString(columnToJsonKeyMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConvertDotsInJsonKeysToUnderscores");
    openapiFields.add("CaseInsensitive");
    openapiFields.add("ColumnToJsonKeyMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OpenXJsonSerDe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OpenXJsonSerDe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OpenXJsonSerDe is not found in the empty JSON string", OpenXJsonSerDe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OpenXJsonSerDe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OpenXJsonSerDe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ConvertDotsInJsonKeysToUnderscores`
      if (jsonObj.get("ConvertDotsInJsonKeysToUnderscores") != null && !jsonObj.get("ConvertDotsInJsonKeysToUnderscores").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ConvertDotsInJsonKeysToUnderscores"));
      }
      // validate the optional field `CaseInsensitive`
      if (jsonObj.get("CaseInsensitive") != null && !jsonObj.get("CaseInsensitive").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CaseInsensitive"));
      }
      // validate the optional field `ColumnToJsonKeyMappings`
      if (jsonObj.get("ColumnToJsonKeyMappings") != null && !jsonObj.get("ColumnToJsonKeyMappings").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ColumnToJsonKeyMappings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OpenXJsonSerDe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OpenXJsonSerDe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OpenXJsonSerDe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OpenXJsonSerDe.class));

       return (TypeAdapter<T>) new TypeAdapter<OpenXJsonSerDe>() {
           @Override
           public void write(JsonWriter out, OpenXJsonSerDe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OpenXJsonSerDe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OpenXJsonSerDe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OpenXJsonSerDe
   * @throws IOException if the JSON string is invalid with respect to OpenXJsonSerDe
   */
  public static OpenXJsonSerDe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OpenXJsonSerDe.class);
  }

  /**
   * Convert an instance of OpenXJsonSerDe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

