/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrcCompression;
import org.openapitools.client.model.OrcFormatVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SerializerOrcSerDe
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SerializerOrcSerDe {
  public static final String SERIALIZED_NAME_STRIPE_SIZE_BYTES = "StripeSizeBytes";
  @SerializedName(SERIALIZED_NAME_STRIPE_SIZE_BYTES)
  private Integer stripeSizeBytes;

  public static final String SERIALIZED_NAME_BLOCK_SIZE_BYTES = "BlockSizeBytes";
  @SerializedName(SERIALIZED_NAME_BLOCK_SIZE_BYTES)
  private Integer blockSizeBytes;

  public static final String SERIALIZED_NAME_ROW_INDEX_STRIDE = "RowIndexStride";
  @SerializedName(SERIALIZED_NAME_ROW_INDEX_STRIDE)
  private Integer rowIndexStride;

  public static final String SERIALIZED_NAME_ENABLE_PADDING = "EnablePadding";
  @SerializedName(SERIALIZED_NAME_ENABLE_PADDING)
  private Boolean enablePadding;

  public static final String SERIALIZED_NAME_PADDING_TOLERANCE = "PaddingTolerance";
  @SerializedName(SERIALIZED_NAME_PADDING_TOLERANCE)
  private Double paddingTolerance;

  public static final String SERIALIZED_NAME_COMPRESSION = "Compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  private OrcCompression compression;

  public static final String SERIALIZED_NAME_BLOOM_FILTER_COLUMNS = "BloomFilterColumns";
  @SerializedName(SERIALIZED_NAME_BLOOM_FILTER_COLUMNS)
  private List bloomFilterColumns;

  public static final String SERIALIZED_NAME_BLOOM_FILTER_FALSE_POSITIVE_PROBABILITY = "BloomFilterFalsePositiveProbability";
  @SerializedName(SERIALIZED_NAME_BLOOM_FILTER_FALSE_POSITIVE_PROBABILITY)
  private Double bloomFilterFalsePositiveProbability;

  public static final String SERIALIZED_NAME_DICTIONARY_KEY_THRESHOLD = "DictionaryKeyThreshold";
  @SerializedName(SERIALIZED_NAME_DICTIONARY_KEY_THRESHOLD)
  private Double dictionaryKeyThreshold;

  public static final String SERIALIZED_NAME_FORMAT_VERSION = "FormatVersion";
  @SerializedName(SERIALIZED_NAME_FORMAT_VERSION)
  private OrcFormatVersion formatVersion;

  public SerializerOrcSerDe() {
  }

  public SerializerOrcSerDe stripeSizeBytes(Integer stripeSizeBytes) {
    this.stripeSizeBytes = stripeSizeBytes;
    return this;
  }

  /**
   * Get stripeSizeBytes
   * @return stripeSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getStripeSizeBytes() {
    return stripeSizeBytes;
  }

  public void setStripeSizeBytes(Integer stripeSizeBytes) {
    this.stripeSizeBytes = stripeSizeBytes;
  }


  public SerializerOrcSerDe blockSizeBytes(Integer blockSizeBytes) {
    this.blockSizeBytes = blockSizeBytes;
    return this;
  }

  /**
   * Get blockSizeBytes
   * @return blockSizeBytes
   */
  @javax.annotation.Nullable
  public Integer getBlockSizeBytes() {
    return blockSizeBytes;
  }

  public void setBlockSizeBytes(Integer blockSizeBytes) {
    this.blockSizeBytes = blockSizeBytes;
  }


  public SerializerOrcSerDe rowIndexStride(Integer rowIndexStride) {
    this.rowIndexStride = rowIndexStride;
    return this;
  }

  /**
   * Get rowIndexStride
   * @return rowIndexStride
   */
  @javax.annotation.Nullable
  public Integer getRowIndexStride() {
    return rowIndexStride;
  }

  public void setRowIndexStride(Integer rowIndexStride) {
    this.rowIndexStride = rowIndexStride;
  }


  public SerializerOrcSerDe enablePadding(Boolean enablePadding) {
    this.enablePadding = enablePadding;
    return this;
  }

  /**
   * Get enablePadding
   * @return enablePadding
   */
  @javax.annotation.Nullable
  public Boolean getEnablePadding() {
    return enablePadding;
  }

  public void setEnablePadding(Boolean enablePadding) {
    this.enablePadding = enablePadding;
  }


  public SerializerOrcSerDe paddingTolerance(Double paddingTolerance) {
    this.paddingTolerance = paddingTolerance;
    return this;
  }

  /**
   * Get paddingTolerance
   * @return paddingTolerance
   */
  @javax.annotation.Nullable
  public Double getPaddingTolerance() {
    return paddingTolerance;
  }

  public void setPaddingTolerance(Double paddingTolerance) {
    this.paddingTolerance = paddingTolerance;
  }


  public SerializerOrcSerDe compression(OrcCompression compression) {
    this.compression = compression;
    return this;
  }

  /**
   * Get compression
   * @return compression
   */
  @javax.annotation.Nullable
  public OrcCompression getCompression() {
    return compression;
  }

  public void setCompression(OrcCompression compression) {
    this.compression = compression;
  }


  public SerializerOrcSerDe bloomFilterColumns(List bloomFilterColumns) {
    this.bloomFilterColumns = bloomFilterColumns;
    return this;
  }

  /**
   * Get bloomFilterColumns
   * @return bloomFilterColumns
   */
  @javax.annotation.Nullable
  public List getBloomFilterColumns() {
    return bloomFilterColumns;
  }

  public void setBloomFilterColumns(List bloomFilterColumns) {
    this.bloomFilterColumns = bloomFilterColumns;
  }


  public SerializerOrcSerDe bloomFilterFalsePositiveProbability(Double bloomFilterFalsePositiveProbability) {
    this.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability;
    return this;
  }

  /**
   * Get bloomFilterFalsePositiveProbability
   * @return bloomFilterFalsePositiveProbability
   */
  @javax.annotation.Nullable
  public Double getBloomFilterFalsePositiveProbability() {
    return bloomFilterFalsePositiveProbability;
  }

  public void setBloomFilterFalsePositiveProbability(Double bloomFilterFalsePositiveProbability) {
    this.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability;
  }


  public SerializerOrcSerDe dictionaryKeyThreshold(Double dictionaryKeyThreshold) {
    this.dictionaryKeyThreshold = dictionaryKeyThreshold;
    return this;
  }

  /**
   * Get dictionaryKeyThreshold
   * @return dictionaryKeyThreshold
   */
  @javax.annotation.Nullable
  public Double getDictionaryKeyThreshold() {
    return dictionaryKeyThreshold;
  }

  public void setDictionaryKeyThreshold(Double dictionaryKeyThreshold) {
    this.dictionaryKeyThreshold = dictionaryKeyThreshold;
  }


  public SerializerOrcSerDe formatVersion(OrcFormatVersion formatVersion) {
    this.formatVersion = formatVersion;
    return this;
  }

  /**
   * Get formatVersion
   * @return formatVersion
   */
  @javax.annotation.Nullable
  public OrcFormatVersion getFormatVersion() {
    return formatVersion;
  }

  public void setFormatVersion(OrcFormatVersion formatVersion) {
    this.formatVersion = formatVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SerializerOrcSerDe serializerOrcSerDe = (SerializerOrcSerDe) o;
    return Objects.equals(this.stripeSizeBytes, serializerOrcSerDe.stripeSizeBytes) &&
        Objects.equals(this.blockSizeBytes, serializerOrcSerDe.blockSizeBytes) &&
        Objects.equals(this.rowIndexStride, serializerOrcSerDe.rowIndexStride) &&
        Objects.equals(this.enablePadding, serializerOrcSerDe.enablePadding) &&
        Objects.equals(this.paddingTolerance, serializerOrcSerDe.paddingTolerance) &&
        Objects.equals(this.compression, serializerOrcSerDe.compression) &&
        Objects.equals(this.bloomFilterColumns, serializerOrcSerDe.bloomFilterColumns) &&
        Objects.equals(this.bloomFilterFalsePositiveProbability, serializerOrcSerDe.bloomFilterFalsePositiveProbability) &&
        Objects.equals(this.dictionaryKeyThreshold, serializerOrcSerDe.dictionaryKeyThreshold) &&
        Objects.equals(this.formatVersion, serializerOrcSerDe.formatVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stripeSizeBytes, blockSizeBytes, rowIndexStride, enablePadding, paddingTolerance, compression, bloomFilterColumns, bloomFilterFalsePositiveProbability, dictionaryKeyThreshold, formatVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SerializerOrcSerDe {\n");
    sb.append("    stripeSizeBytes: ").append(toIndentedString(stripeSizeBytes)).append("\n");
    sb.append("    blockSizeBytes: ").append(toIndentedString(blockSizeBytes)).append("\n");
    sb.append("    rowIndexStride: ").append(toIndentedString(rowIndexStride)).append("\n");
    sb.append("    enablePadding: ").append(toIndentedString(enablePadding)).append("\n");
    sb.append("    paddingTolerance: ").append(toIndentedString(paddingTolerance)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    bloomFilterColumns: ").append(toIndentedString(bloomFilterColumns)).append("\n");
    sb.append("    bloomFilterFalsePositiveProbability: ").append(toIndentedString(bloomFilterFalsePositiveProbability)).append("\n");
    sb.append("    dictionaryKeyThreshold: ").append(toIndentedString(dictionaryKeyThreshold)).append("\n");
    sb.append("    formatVersion: ").append(toIndentedString(formatVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StripeSizeBytes");
    openapiFields.add("BlockSizeBytes");
    openapiFields.add("RowIndexStride");
    openapiFields.add("EnablePadding");
    openapiFields.add("PaddingTolerance");
    openapiFields.add("Compression");
    openapiFields.add("BloomFilterColumns");
    openapiFields.add("BloomFilterFalsePositiveProbability");
    openapiFields.add("DictionaryKeyThreshold");
    openapiFields.add("FormatVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SerializerOrcSerDe
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SerializerOrcSerDe.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SerializerOrcSerDe is not found in the empty JSON string", SerializerOrcSerDe.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SerializerOrcSerDe.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SerializerOrcSerDe` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StripeSizeBytes`
      if (jsonObj.get("StripeSizeBytes") != null && !jsonObj.get("StripeSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StripeSizeBytes"));
      }
      // validate the optional field `BlockSizeBytes`
      if (jsonObj.get("BlockSizeBytes") != null && !jsonObj.get("BlockSizeBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("BlockSizeBytes"));
      }
      // validate the optional field `RowIndexStride`
      if (jsonObj.get("RowIndexStride") != null && !jsonObj.get("RowIndexStride").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RowIndexStride"));
      }
      // validate the optional field `EnablePadding`
      if (jsonObj.get("EnablePadding") != null && !jsonObj.get("EnablePadding").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnablePadding"));
      }
      // validate the optional field `PaddingTolerance`
      if (jsonObj.get("PaddingTolerance") != null && !jsonObj.get("PaddingTolerance").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("PaddingTolerance"));
      }
      // validate the optional field `Compression`
      if (jsonObj.get("Compression") != null && !jsonObj.get("Compression").isJsonNull()) {
        OrcCompression.validateJsonElement(jsonObj.get("Compression"));
      }
      // validate the optional field `BloomFilterColumns`
      if (jsonObj.get("BloomFilterColumns") != null && !jsonObj.get("BloomFilterColumns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BloomFilterColumns"));
      }
      // validate the optional field `BloomFilterFalsePositiveProbability`
      if (jsonObj.get("BloomFilterFalsePositiveProbability") != null && !jsonObj.get("BloomFilterFalsePositiveProbability").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("BloomFilterFalsePositiveProbability"));
      }
      // validate the optional field `DictionaryKeyThreshold`
      if (jsonObj.get("DictionaryKeyThreshold") != null && !jsonObj.get("DictionaryKeyThreshold").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("DictionaryKeyThreshold"));
      }
      // validate the optional field `FormatVersion`
      if (jsonObj.get("FormatVersion") != null && !jsonObj.get("FormatVersion").isJsonNull()) {
        OrcFormatVersion.validateJsonElement(jsonObj.get("FormatVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SerializerOrcSerDe.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SerializerOrcSerDe' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SerializerOrcSerDe> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SerializerOrcSerDe.class));

       return (TypeAdapter<T>) new TypeAdapter<SerializerOrcSerDe>() {
           @Override
           public void write(JsonWriter out, SerializerOrcSerDe value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SerializerOrcSerDe read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SerializerOrcSerDe given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SerializerOrcSerDe
   * @throws IOException if the JSON string is invalid with respect to SerializerOrcSerDe
   */
  public static SerializerOrcSerDe fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SerializerOrcSerDe.class);
  }

  /**
   * Convert an instance of SerializerOrcSerDe to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

