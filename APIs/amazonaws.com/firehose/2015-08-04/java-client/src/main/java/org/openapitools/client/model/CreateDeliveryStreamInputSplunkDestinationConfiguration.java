/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ElasticsearchDestinationConfigurationS3Configuration;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationProcessingConfiguration;
import org.openapitools.client.model.HECEndpointType;
import org.openapitools.client.model.S3DestinationDescriptionCloudWatchLoggingOptions;
import org.openapitools.client.model.SplunkDestinationConfigurationRetryOptions;
import org.openapitools.client.model.SplunkS3BackupMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDeliveryStreamInputSplunkDestinationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDeliveryStreamInputSplunkDestinationConfiguration {
  public static final String SERIALIZED_NAME_HE_C_ENDPOINT = "HECEndpoint";
  @SerializedName(SERIALIZED_NAME_HE_C_ENDPOINT)
  private String heCEndpoint;

  public static final String SERIALIZED_NAME_HE_C_ENDPOINT_TYPE = "HECEndpointType";
  @SerializedName(SERIALIZED_NAME_HE_C_ENDPOINT_TYPE)
  private HECEndpointType heCEndpointType;

  public static final String SERIALIZED_NAME_HE_C_TOKEN = "HECToken";
  @SerializedName(SERIALIZED_NAME_HE_C_TOKEN)
  private String heCToken;

  public static final String SERIALIZED_NAME_HE_C_ACKNOWLEDGMENT_TIMEOUT_IN_SECONDS = "HECAcknowledgmentTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_HE_C_ACKNOWLEDGMENT_TIMEOUT_IN_SECONDS)
  private Integer heCAcknowledgmentTimeoutInSeconds;

  public static final String SERIALIZED_NAME_RETRY_OPTIONS = "RetryOptions";
  @SerializedName(SERIALIZED_NAME_RETRY_OPTIONS)
  private SplunkDestinationConfigurationRetryOptions retryOptions;

  public static final String SERIALIZED_NAME_S3_BACKUP_MODE = "S3BackupMode";
  @SerializedName(SERIALIZED_NAME_S3_BACKUP_MODE)
  private SplunkS3BackupMode s3BackupMode;

  public static final String SERIALIZED_NAME_S3_CONFIGURATION = "S3Configuration";
  @SerializedName(SERIALIZED_NAME_S3_CONFIGURATION)
  private ElasticsearchDestinationConfigurationS3Configuration s3Configuration;

  public static final String SERIALIZED_NAME_PROCESSING_CONFIGURATION = "ProcessingConfiguration";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CONFIGURATION)
  private ExtendedS3DestinationConfigurationProcessingConfiguration processingConfiguration;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS = "CloudWatchLoggingOptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS)
  private S3DestinationDescriptionCloudWatchLoggingOptions cloudWatchLoggingOptions;

  public CreateDeliveryStreamInputSplunkDestinationConfiguration() {
  }

  public CreateDeliveryStreamInputSplunkDestinationConfiguration heCEndpoint(String heCEndpoint) {
    this.heCEndpoint = heCEndpoint;
    return this;
  }

  /**
   * Get heCEndpoint
   * @return heCEndpoint
   */
  @javax.annotation.Nonnull
  public String getHeCEndpoint() {
    return heCEndpoint;
  }

  public void setHeCEndpoint(String heCEndpoint) {
    this.heCEndpoint = heCEndpoint;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration heCEndpointType(HECEndpointType heCEndpointType) {
    this.heCEndpointType = heCEndpointType;
    return this;
  }

  /**
   * Get heCEndpointType
   * @return heCEndpointType
   */
  @javax.annotation.Nonnull
  public HECEndpointType getHeCEndpointType() {
    return heCEndpointType;
  }

  public void setHeCEndpointType(HECEndpointType heCEndpointType) {
    this.heCEndpointType = heCEndpointType;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration heCToken(String heCToken) {
    this.heCToken = heCToken;
    return this;
  }

  /**
   * Get heCToken
   * @return heCToken
   */
  @javax.annotation.Nonnull
  public String getHeCToken() {
    return heCToken;
  }

  public void setHeCToken(String heCToken) {
    this.heCToken = heCToken;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration heCAcknowledgmentTimeoutInSeconds(Integer heCAcknowledgmentTimeoutInSeconds) {
    this.heCAcknowledgmentTimeoutInSeconds = heCAcknowledgmentTimeoutInSeconds;
    return this;
  }

  /**
   * Get heCAcknowledgmentTimeoutInSeconds
   * @return heCAcknowledgmentTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public Integer getHeCAcknowledgmentTimeoutInSeconds() {
    return heCAcknowledgmentTimeoutInSeconds;
  }

  public void setHeCAcknowledgmentTimeoutInSeconds(Integer heCAcknowledgmentTimeoutInSeconds) {
    this.heCAcknowledgmentTimeoutInSeconds = heCAcknowledgmentTimeoutInSeconds;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration retryOptions(SplunkDestinationConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
    return this;
  }

  /**
   * Get retryOptions
   * @return retryOptions
   */
  @javax.annotation.Nullable
  public SplunkDestinationConfigurationRetryOptions getRetryOptions() {
    return retryOptions;
  }

  public void setRetryOptions(SplunkDestinationConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration s3BackupMode(SplunkS3BackupMode s3BackupMode) {
    this.s3BackupMode = s3BackupMode;
    return this;
  }

  /**
   * Get s3BackupMode
   * @return s3BackupMode
   */
  @javax.annotation.Nullable
  public SplunkS3BackupMode getS3BackupMode() {
    return s3BackupMode;
  }

  public void setS3BackupMode(SplunkS3BackupMode s3BackupMode) {
    this.s3BackupMode = s3BackupMode;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration s3Configuration(ElasticsearchDestinationConfigurationS3Configuration s3Configuration) {
    this.s3Configuration = s3Configuration;
    return this;
  }

  /**
   * Get s3Configuration
   * @return s3Configuration
   */
  @javax.annotation.Nonnull
  public ElasticsearchDestinationConfigurationS3Configuration getS3Configuration() {
    return s3Configuration;
  }

  public void setS3Configuration(ElasticsearchDestinationConfigurationS3Configuration s3Configuration) {
    this.s3Configuration = s3Configuration;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration processingConfiguration(ExtendedS3DestinationConfigurationProcessingConfiguration processingConfiguration) {
    this.processingConfiguration = processingConfiguration;
    return this;
  }

  /**
   * Get processingConfiguration
   * @return processingConfiguration
   */
  @javax.annotation.Nullable
  public ExtendedS3DestinationConfigurationProcessingConfiguration getProcessingConfiguration() {
    return processingConfiguration;
  }

  public void setProcessingConfiguration(ExtendedS3DestinationConfigurationProcessingConfiguration processingConfiguration) {
    this.processingConfiguration = processingConfiguration;
  }


  public CreateDeliveryStreamInputSplunkDestinationConfiguration cloudWatchLoggingOptions(S3DestinationDescriptionCloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptions
   * @return cloudWatchLoggingOptions
   */
  @javax.annotation.Nullable
  public S3DestinationDescriptionCloudWatchLoggingOptions getCloudWatchLoggingOptions() {
    return cloudWatchLoggingOptions;
  }

  public void setCloudWatchLoggingOptions(S3DestinationDescriptionCloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDeliveryStreamInputSplunkDestinationConfiguration createDeliveryStreamInputSplunkDestinationConfiguration = (CreateDeliveryStreamInputSplunkDestinationConfiguration) o;
    return Objects.equals(this.heCEndpoint, createDeliveryStreamInputSplunkDestinationConfiguration.heCEndpoint) &&
        Objects.equals(this.heCEndpointType, createDeliveryStreamInputSplunkDestinationConfiguration.heCEndpointType) &&
        Objects.equals(this.heCToken, createDeliveryStreamInputSplunkDestinationConfiguration.heCToken) &&
        Objects.equals(this.heCAcknowledgmentTimeoutInSeconds, createDeliveryStreamInputSplunkDestinationConfiguration.heCAcknowledgmentTimeoutInSeconds) &&
        Objects.equals(this.retryOptions, createDeliveryStreamInputSplunkDestinationConfiguration.retryOptions) &&
        Objects.equals(this.s3BackupMode, createDeliveryStreamInputSplunkDestinationConfiguration.s3BackupMode) &&
        Objects.equals(this.s3Configuration, createDeliveryStreamInputSplunkDestinationConfiguration.s3Configuration) &&
        Objects.equals(this.processingConfiguration, createDeliveryStreamInputSplunkDestinationConfiguration.processingConfiguration) &&
        Objects.equals(this.cloudWatchLoggingOptions, createDeliveryStreamInputSplunkDestinationConfiguration.cloudWatchLoggingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(heCEndpoint, heCEndpointType, heCToken, heCAcknowledgmentTimeoutInSeconds, retryOptions, s3BackupMode, s3Configuration, processingConfiguration, cloudWatchLoggingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDeliveryStreamInputSplunkDestinationConfiguration {\n");
    sb.append("    heCEndpoint: ").append(toIndentedString(heCEndpoint)).append("\n");
    sb.append("    heCEndpointType: ").append(toIndentedString(heCEndpointType)).append("\n");
    sb.append("    heCToken: ").append(toIndentedString(heCToken)).append("\n");
    sb.append("    heCAcknowledgmentTimeoutInSeconds: ").append(toIndentedString(heCAcknowledgmentTimeoutInSeconds)).append("\n");
    sb.append("    retryOptions: ").append(toIndentedString(retryOptions)).append("\n");
    sb.append("    s3BackupMode: ").append(toIndentedString(s3BackupMode)).append("\n");
    sb.append("    s3Configuration: ").append(toIndentedString(s3Configuration)).append("\n");
    sb.append("    processingConfiguration: ").append(toIndentedString(processingConfiguration)).append("\n");
    sb.append("    cloudWatchLoggingOptions: ").append(toIndentedString(cloudWatchLoggingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HECEndpoint");
    openapiFields.add("HECEndpointType");
    openapiFields.add("HECToken");
    openapiFields.add("HECAcknowledgmentTimeoutInSeconds");
    openapiFields.add("RetryOptions");
    openapiFields.add("S3BackupMode");
    openapiFields.add("S3Configuration");
    openapiFields.add("ProcessingConfiguration");
    openapiFields.add("CloudWatchLoggingOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("HECEndpoint");
    openapiRequiredFields.add("HECEndpointType");
    openapiRequiredFields.add("HECToken");
    openapiRequiredFields.add("S3Configuration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDeliveryStreamInputSplunkDestinationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDeliveryStreamInputSplunkDestinationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDeliveryStreamInputSplunkDestinationConfiguration is not found in the empty JSON string", CreateDeliveryStreamInputSplunkDestinationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDeliveryStreamInputSplunkDestinationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDeliveryStreamInputSplunkDestinationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDeliveryStreamInputSplunkDestinationConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `HECEndpoint`
      String.validateJsonElement(jsonObj.get("HECEndpoint"));
      // validate the required field `HECEndpointType`
      HECEndpointType.validateJsonElement(jsonObj.get("HECEndpointType"));
      // validate the required field `HECToken`
      String.validateJsonElement(jsonObj.get("HECToken"));
      // validate the optional field `HECAcknowledgmentTimeoutInSeconds`
      if (jsonObj.get("HECAcknowledgmentTimeoutInSeconds") != null && !jsonObj.get("HECAcknowledgmentTimeoutInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HECAcknowledgmentTimeoutInSeconds"));
      }
      // validate the optional field `RetryOptions`
      if (jsonObj.get("RetryOptions") != null && !jsonObj.get("RetryOptions").isJsonNull()) {
        SplunkDestinationConfigurationRetryOptions.validateJsonElement(jsonObj.get("RetryOptions"));
      }
      // validate the optional field `S3BackupMode`
      if (jsonObj.get("S3BackupMode") != null && !jsonObj.get("S3BackupMode").isJsonNull()) {
        SplunkS3BackupMode.validateJsonElement(jsonObj.get("S3BackupMode"));
      }
      // validate the required field `S3Configuration`
      ElasticsearchDestinationConfigurationS3Configuration.validateJsonElement(jsonObj.get("S3Configuration"));
      // validate the optional field `ProcessingConfiguration`
      if (jsonObj.get("ProcessingConfiguration") != null && !jsonObj.get("ProcessingConfiguration").isJsonNull()) {
        ExtendedS3DestinationConfigurationProcessingConfiguration.validateJsonElement(jsonObj.get("ProcessingConfiguration"));
      }
      // validate the optional field `CloudWatchLoggingOptions`
      if (jsonObj.get("CloudWatchLoggingOptions") != null && !jsonObj.get("CloudWatchLoggingOptions").isJsonNull()) {
        S3DestinationDescriptionCloudWatchLoggingOptions.validateJsonElement(jsonObj.get("CloudWatchLoggingOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDeliveryStreamInputSplunkDestinationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDeliveryStreamInputSplunkDestinationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDeliveryStreamInputSplunkDestinationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDeliveryStreamInputSplunkDestinationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDeliveryStreamInputSplunkDestinationConfiguration>() {
           @Override
           public void write(JsonWriter out, CreateDeliveryStreamInputSplunkDestinationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDeliveryStreamInputSplunkDestinationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDeliveryStreamInputSplunkDestinationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDeliveryStreamInputSplunkDestinationConfiguration
   * @throws IOException if the JSON string is invalid with respect to CreateDeliveryStreamInputSplunkDestinationConfiguration
   */
  public static CreateDeliveryStreamInputSplunkDestinationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDeliveryStreamInputSplunkDestinationConfiguration.class);
  }

  /**
   * Convert an instance of CreateDeliveryStreamInputSplunkDestinationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

