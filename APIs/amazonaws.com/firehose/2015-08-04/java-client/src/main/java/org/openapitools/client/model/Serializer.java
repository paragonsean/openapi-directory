/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SerializerOrcSerDe;
import org.openapitools.client.model.SerializerParquetSerDe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the &lt;a href&#x3D;\&quot;https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html\&quot;&gt;ORC SerDe&lt;/a&gt; and the &lt;a href&#x3D;\&quot;https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html\&quot;&gt;Parquet SerDe&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Serializer {
  public static final String SERIALIZED_NAME_PARQUET_SER_DE = "ParquetSerDe";
  @SerializedName(SERIALIZED_NAME_PARQUET_SER_DE)
  private SerializerParquetSerDe parquetSerDe;

  public static final String SERIALIZED_NAME_ORC_SER_DE = "OrcSerDe";
  @SerializedName(SERIALIZED_NAME_ORC_SER_DE)
  private SerializerOrcSerDe orcSerDe;

  public Serializer() {
  }

  public Serializer parquetSerDe(SerializerParquetSerDe parquetSerDe) {
    this.parquetSerDe = parquetSerDe;
    return this;
  }

  /**
   * Get parquetSerDe
   * @return parquetSerDe
   */
  @javax.annotation.Nullable
  public SerializerParquetSerDe getParquetSerDe() {
    return parquetSerDe;
  }

  public void setParquetSerDe(SerializerParquetSerDe parquetSerDe) {
    this.parquetSerDe = parquetSerDe;
  }


  public Serializer orcSerDe(SerializerOrcSerDe orcSerDe) {
    this.orcSerDe = orcSerDe;
    return this;
  }

  /**
   * Get orcSerDe
   * @return orcSerDe
   */
  @javax.annotation.Nullable
  public SerializerOrcSerDe getOrcSerDe() {
    return orcSerDe;
  }

  public void setOrcSerDe(SerializerOrcSerDe orcSerDe) {
    this.orcSerDe = orcSerDe;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Serializer serializer = (Serializer) o;
    return Objects.equals(this.parquetSerDe, serializer.parquetSerDe) &&
        Objects.equals(this.orcSerDe, serializer.orcSerDe);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parquetSerDe, orcSerDe);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Serializer {\n");
    sb.append("    parquetSerDe: ").append(toIndentedString(parquetSerDe)).append("\n");
    sb.append("    orcSerDe: ").append(toIndentedString(orcSerDe)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParquetSerDe");
    openapiFields.add("OrcSerDe");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Serializer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Serializer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Serializer is not found in the empty JSON string", Serializer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Serializer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Serializer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ParquetSerDe`
      if (jsonObj.get("ParquetSerDe") != null && !jsonObj.get("ParquetSerDe").isJsonNull()) {
        SerializerParquetSerDe.validateJsonElement(jsonObj.get("ParquetSerDe"));
      }
      // validate the optional field `OrcSerDe`
      if (jsonObj.get("OrcSerDe") != null && !jsonObj.get("OrcSerDe").isJsonNull()) {
        SerializerOrcSerDe.validateJsonElement(jsonObj.get("OrcSerDe"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Serializer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Serializer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Serializer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Serializer.class));

       return (TypeAdapter<T>) new TypeAdapter<Serializer>() {
           @Override
           public void write(JsonWriter out, Serializer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Serializer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Serializer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Serializer
   * @throws IOException if the JSON string is invalid with respect to Serializer
   */
  public static Serializer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Serializer.class);
  }

  /**
   * Convert an instance of Serializer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

