/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DataFormatConversionConfigurationInputFormatConfiguration;
import org.openapitools.client.model.DataFormatConversionConfigurationOutputFormatConfiguration;
import org.openapitools.client.model.DataFormatConversionConfigurationSchemaConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the Amazon Web Services Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html\&quot;&gt;Kinesis Data Firehose Record Format Conversion&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataFormatConversionConfiguration {
  public static final String SERIALIZED_NAME_SCHEMA_CONFIGURATION = "SchemaConfiguration";
  @SerializedName(SERIALIZED_NAME_SCHEMA_CONFIGURATION)
  private DataFormatConversionConfigurationSchemaConfiguration schemaConfiguration;

  public static final String SERIALIZED_NAME_INPUT_FORMAT_CONFIGURATION = "InputFormatConfiguration";
  @SerializedName(SERIALIZED_NAME_INPUT_FORMAT_CONFIGURATION)
  private DataFormatConversionConfigurationInputFormatConfiguration inputFormatConfiguration;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT_CONFIGURATION = "OutputFormatConfiguration";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT_CONFIGURATION)
  private DataFormatConversionConfigurationOutputFormatConfiguration outputFormatConfiguration;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public DataFormatConversionConfiguration() {
  }

  public DataFormatConversionConfiguration schemaConfiguration(DataFormatConversionConfigurationSchemaConfiguration schemaConfiguration) {
    this.schemaConfiguration = schemaConfiguration;
    return this;
  }

  /**
   * Get schemaConfiguration
   * @return schemaConfiguration
   */
  @javax.annotation.Nullable
  public DataFormatConversionConfigurationSchemaConfiguration getSchemaConfiguration() {
    return schemaConfiguration;
  }

  public void setSchemaConfiguration(DataFormatConversionConfigurationSchemaConfiguration schemaConfiguration) {
    this.schemaConfiguration = schemaConfiguration;
  }


  public DataFormatConversionConfiguration inputFormatConfiguration(DataFormatConversionConfigurationInputFormatConfiguration inputFormatConfiguration) {
    this.inputFormatConfiguration = inputFormatConfiguration;
    return this;
  }

  /**
   * Get inputFormatConfiguration
   * @return inputFormatConfiguration
   */
  @javax.annotation.Nullable
  public DataFormatConversionConfigurationInputFormatConfiguration getInputFormatConfiguration() {
    return inputFormatConfiguration;
  }

  public void setInputFormatConfiguration(DataFormatConversionConfigurationInputFormatConfiguration inputFormatConfiguration) {
    this.inputFormatConfiguration = inputFormatConfiguration;
  }


  public DataFormatConversionConfiguration outputFormatConfiguration(DataFormatConversionConfigurationOutputFormatConfiguration outputFormatConfiguration) {
    this.outputFormatConfiguration = outputFormatConfiguration;
    return this;
  }

  /**
   * Get outputFormatConfiguration
   * @return outputFormatConfiguration
   */
  @javax.annotation.Nullable
  public DataFormatConversionConfigurationOutputFormatConfiguration getOutputFormatConfiguration() {
    return outputFormatConfiguration;
  }

  public void setOutputFormatConfiguration(DataFormatConversionConfigurationOutputFormatConfiguration outputFormatConfiguration) {
    this.outputFormatConfiguration = outputFormatConfiguration;
  }


  public DataFormatConversionConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFormatConversionConfiguration dataFormatConversionConfiguration = (DataFormatConversionConfiguration) o;
    return Objects.equals(this.schemaConfiguration, dataFormatConversionConfiguration.schemaConfiguration) &&
        Objects.equals(this.inputFormatConfiguration, dataFormatConversionConfiguration.inputFormatConfiguration) &&
        Objects.equals(this.outputFormatConfiguration, dataFormatConversionConfiguration.outputFormatConfiguration) &&
        Objects.equals(this.enabled, dataFormatConversionConfiguration.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaConfiguration, inputFormatConfiguration, outputFormatConfiguration, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFormatConversionConfiguration {\n");
    sb.append("    schemaConfiguration: ").append(toIndentedString(schemaConfiguration)).append("\n");
    sb.append("    inputFormatConfiguration: ").append(toIndentedString(inputFormatConfiguration)).append("\n");
    sb.append("    outputFormatConfiguration: ").append(toIndentedString(outputFormatConfiguration)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaConfiguration");
    openapiFields.add("InputFormatConfiguration");
    openapiFields.add("OutputFormatConfiguration");
    openapiFields.add("Enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataFormatConversionConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataFormatConversionConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataFormatConversionConfiguration is not found in the empty JSON string", DataFormatConversionConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataFormatConversionConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataFormatConversionConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SchemaConfiguration`
      if (jsonObj.get("SchemaConfiguration") != null && !jsonObj.get("SchemaConfiguration").isJsonNull()) {
        DataFormatConversionConfigurationSchemaConfiguration.validateJsonElement(jsonObj.get("SchemaConfiguration"));
      }
      // validate the optional field `InputFormatConfiguration`
      if (jsonObj.get("InputFormatConfiguration") != null && !jsonObj.get("InputFormatConfiguration").isJsonNull()) {
        DataFormatConversionConfigurationInputFormatConfiguration.validateJsonElement(jsonObj.get("InputFormatConfiguration"));
      }
      // validate the optional field `OutputFormatConfiguration`
      if (jsonObj.get("OutputFormatConfiguration") != null && !jsonObj.get("OutputFormatConfiguration").isJsonNull()) {
        DataFormatConversionConfigurationOutputFormatConfiguration.validateJsonElement(jsonObj.get("OutputFormatConfiguration"));
      }
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataFormatConversionConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataFormatConversionConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataFormatConversionConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataFormatConversionConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DataFormatConversionConfiguration>() {
           @Override
           public void write(JsonWriter out, DataFormatConversionConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataFormatConversionConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataFormatConversionConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataFormatConversionConfiguration
   * @throws IOException if the JSON string is invalid with respect to DataFormatConversionConfiguration
   */
  public static DataFormatConversionConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataFormatConversionConfiguration.class);
  }

  /**
   * Convert an instance of DataFormatConversionConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

