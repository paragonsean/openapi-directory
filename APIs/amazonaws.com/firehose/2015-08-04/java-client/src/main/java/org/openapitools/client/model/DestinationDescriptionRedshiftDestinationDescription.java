/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExtendedS3DestinationConfigurationProcessingConfiguration;
import org.openapitools.client.model.ExtendedS3DestinationDescriptionS3BackupDescription;
import org.openapitools.client.model.RedshiftDestinationConfigurationCopyCommand;
import org.openapitools.client.model.RedshiftDestinationConfigurationRetryOptions;
import org.openapitools.client.model.RedshiftDestinationDescriptionS3DestinationDescription;
import org.openapitools.client.model.RedshiftS3BackupMode;
import org.openapitools.client.model.S3DestinationDescriptionCloudWatchLoggingOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DestinationDescriptionRedshiftDestinationDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationDescriptionRedshiftDestinationDescription {
  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_CLUSTER_J_D_B_C_U_R_L = "ClusterJDBCURL";
  @SerializedName(SERIALIZED_NAME_CLUSTER_J_D_B_C_U_R_L)
  private String clusterJDBCURL;

  public static final String SERIALIZED_NAME_COPY_COMMAND = "CopyCommand";
  @SerializedName(SERIALIZED_NAME_COPY_COMMAND)
  private RedshiftDestinationConfigurationCopyCommand copyCommand;

  public static final String SERIALIZED_NAME_USERNAME = "Username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_RETRY_OPTIONS = "RetryOptions";
  @SerializedName(SERIALIZED_NAME_RETRY_OPTIONS)
  private RedshiftDestinationConfigurationRetryOptions retryOptions;

  public static final String SERIALIZED_NAME_S3_DESTINATION_DESCRIPTION = "S3DestinationDescription";
  @SerializedName(SERIALIZED_NAME_S3_DESTINATION_DESCRIPTION)
  private RedshiftDestinationDescriptionS3DestinationDescription s3DestinationDescription;

  public static final String SERIALIZED_NAME_PROCESSING_CONFIGURATION = "ProcessingConfiguration";
  @SerializedName(SERIALIZED_NAME_PROCESSING_CONFIGURATION)
  private ExtendedS3DestinationConfigurationProcessingConfiguration processingConfiguration;

  public static final String SERIALIZED_NAME_S3_BACKUP_MODE = "S3BackupMode";
  @SerializedName(SERIALIZED_NAME_S3_BACKUP_MODE)
  private RedshiftS3BackupMode s3BackupMode;

  public static final String SERIALIZED_NAME_S3_BACKUP_DESCRIPTION = "S3BackupDescription";
  @SerializedName(SERIALIZED_NAME_S3_BACKUP_DESCRIPTION)
  private ExtendedS3DestinationDescriptionS3BackupDescription s3BackupDescription;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS = "CloudWatchLoggingOptions";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOGGING_OPTIONS)
  private S3DestinationDescriptionCloudWatchLoggingOptions cloudWatchLoggingOptions;

  public DestinationDescriptionRedshiftDestinationDescription() {
  }

  public DestinationDescriptionRedshiftDestinationDescription roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nonnull
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public DestinationDescriptionRedshiftDestinationDescription clusterJDBCURL(String clusterJDBCURL) {
    this.clusterJDBCURL = clusterJDBCURL;
    return this;
  }

  /**
   * Get clusterJDBCURL
   * @return clusterJDBCURL
   */
  @javax.annotation.Nonnull
  public String getClusterJDBCURL() {
    return clusterJDBCURL;
  }

  public void setClusterJDBCURL(String clusterJDBCURL) {
    this.clusterJDBCURL = clusterJDBCURL;
  }


  public DestinationDescriptionRedshiftDestinationDescription copyCommand(RedshiftDestinationConfigurationCopyCommand copyCommand) {
    this.copyCommand = copyCommand;
    return this;
  }

  /**
   * Get copyCommand
   * @return copyCommand
   */
  @javax.annotation.Nonnull
  public RedshiftDestinationConfigurationCopyCommand getCopyCommand() {
    return copyCommand;
  }

  public void setCopyCommand(RedshiftDestinationConfigurationCopyCommand copyCommand) {
    this.copyCommand = copyCommand;
  }


  public DestinationDescriptionRedshiftDestinationDescription username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public DestinationDescriptionRedshiftDestinationDescription retryOptions(RedshiftDestinationConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
    return this;
  }

  /**
   * Get retryOptions
   * @return retryOptions
   */
  @javax.annotation.Nullable
  public RedshiftDestinationConfigurationRetryOptions getRetryOptions() {
    return retryOptions;
  }

  public void setRetryOptions(RedshiftDestinationConfigurationRetryOptions retryOptions) {
    this.retryOptions = retryOptions;
  }


  public DestinationDescriptionRedshiftDestinationDescription s3DestinationDescription(RedshiftDestinationDescriptionS3DestinationDescription s3DestinationDescription) {
    this.s3DestinationDescription = s3DestinationDescription;
    return this;
  }

  /**
   * Get s3DestinationDescription
   * @return s3DestinationDescription
   */
  @javax.annotation.Nonnull
  public RedshiftDestinationDescriptionS3DestinationDescription getS3DestinationDescription() {
    return s3DestinationDescription;
  }

  public void setS3DestinationDescription(RedshiftDestinationDescriptionS3DestinationDescription s3DestinationDescription) {
    this.s3DestinationDescription = s3DestinationDescription;
  }


  public DestinationDescriptionRedshiftDestinationDescription processingConfiguration(ExtendedS3DestinationConfigurationProcessingConfiguration processingConfiguration) {
    this.processingConfiguration = processingConfiguration;
    return this;
  }

  /**
   * Get processingConfiguration
   * @return processingConfiguration
   */
  @javax.annotation.Nullable
  public ExtendedS3DestinationConfigurationProcessingConfiguration getProcessingConfiguration() {
    return processingConfiguration;
  }

  public void setProcessingConfiguration(ExtendedS3DestinationConfigurationProcessingConfiguration processingConfiguration) {
    this.processingConfiguration = processingConfiguration;
  }


  public DestinationDescriptionRedshiftDestinationDescription s3BackupMode(RedshiftS3BackupMode s3BackupMode) {
    this.s3BackupMode = s3BackupMode;
    return this;
  }

  /**
   * Get s3BackupMode
   * @return s3BackupMode
   */
  @javax.annotation.Nullable
  public RedshiftS3BackupMode getS3BackupMode() {
    return s3BackupMode;
  }

  public void setS3BackupMode(RedshiftS3BackupMode s3BackupMode) {
    this.s3BackupMode = s3BackupMode;
  }


  public DestinationDescriptionRedshiftDestinationDescription s3BackupDescription(ExtendedS3DestinationDescriptionS3BackupDescription s3BackupDescription) {
    this.s3BackupDescription = s3BackupDescription;
    return this;
  }

  /**
   * Get s3BackupDescription
   * @return s3BackupDescription
   */
  @javax.annotation.Nullable
  public ExtendedS3DestinationDescriptionS3BackupDescription getS3BackupDescription() {
    return s3BackupDescription;
  }

  public void setS3BackupDescription(ExtendedS3DestinationDescriptionS3BackupDescription s3BackupDescription) {
    this.s3BackupDescription = s3BackupDescription;
  }


  public DestinationDescriptionRedshiftDestinationDescription cloudWatchLoggingOptions(S3DestinationDescriptionCloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
    return this;
  }

  /**
   * Get cloudWatchLoggingOptions
   * @return cloudWatchLoggingOptions
   */
  @javax.annotation.Nullable
  public S3DestinationDescriptionCloudWatchLoggingOptions getCloudWatchLoggingOptions() {
    return cloudWatchLoggingOptions;
  }

  public void setCloudWatchLoggingOptions(S3DestinationDescriptionCloudWatchLoggingOptions cloudWatchLoggingOptions) {
    this.cloudWatchLoggingOptions = cloudWatchLoggingOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationDescriptionRedshiftDestinationDescription destinationDescriptionRedshiftDestinationDescription = (DestinationDescriptionRedshiftDestinationDescription) o;
    return Objects.equals(this.roleARN, destinationDescriptionRedshiftDestinationDescription.roleARN) &&
        Objects.equals(this.clusterJDBCURL, destinationDescriptionRedshiftDestinationDescription.clusterJDBCURL) &&
        Objects.equals(this.copyCommand, destinationDescriptionRedshiftDestinationDescription.copyCommand) &&
        Objects.equals(this.username, destinationDescriptionRedshiftDestinationDescription.username) &&
        Objects.equals(this.retryOptions, destinationDescriptionRedshiftDestinationDescription.retryOptions) &&
        Objects.equals(this.s3DestinationDescription, destinationDescriptionRedshiftDestinationDescription.s3DestinationDescription) &&
        Objects.equals(this.processingConfiguration, destinationDescriptionRedshiftDestinationDescription.processingConfiguration) &&
        Objects.equals(this.s3BackupMode, destinationDescriptionRedshiftDestinationDescription.s3BackupMode) &&
        Objects.equals(this.s3BackupDescription, destinationDescriptionRedshiftDestinationDescription.s3BackupDescription) &&
        Objects.equals(this.cloudWatchLoggingOptions, destinationDescriptionRedshiftDestinationDescription.cloudWatchLoggingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleARN, clusterJDBCURL, copyCommand, username, retryOptions, s3DestinationDescription, processingConfiguration, s3BackupMode, s3BackupDescription, cloudWatchLoggingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationDescriptionRedshiftDestinationDescription {\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    clusterJDBCURL: ").append(toIndentedString(clusterJDBCURL)).append("\n");
    sb.append("    copyCommand: ").append(toIndentedString(copyCommand)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    retryOptions: ").append(toIndentedString(retryOptions)).append("\n");
    sb.append("    s3DestinationDescription: ").append(toIndentedString(s3DestinationDescription)).append("\n");
    sb.append("    processingConfiguration: ").append(toIndentedString(processingConfiguration)).append("\n");
    sb.append("    s3BackupMode: ").append(toIndentedString(s3BackupMode)).append("\n");
    sb.append("    s3BackupDescription: ").append(toIndentedString(s3BackupDescription)).append("\n");
    sb.append("    cloudWatchLoggingOptions: ").append(toIndentedString(cloudWatchLoggingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RoleARN");
    openapiFields.add("ClusterJDBCURL");
    openapiFields.add("CopyCommand");
    openapiFields.add("Username");
    openapiFields.add("RetryOptions");
    openapiFields.add("S3DestinationDescription");
    openapiFields.add("ProcessingConfiguration");
    openapiFields.add("S3BackupMode");
    openapiFields.add("S3BackupDescription");
    openapiFields.add("CloudWatchLoggingOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RoleARN");
    openapiRequiredFields.add("ClusterJDBCURL");
    openapiRequiredFields.add("CopyCommand");
    openapiRequiredFields.add("Username");
    openapiRequiredFields.add("S3DestinationDescription");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationDescriptionRedshiftDestinationDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationDescriptionRedshiftDestinationDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationDescriptionRedshiftDestinationDescription is not found in the empty JSON string", DestinationDescriptionRedshiftDestinationDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationDescriptionRedshiftDestinationDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationDescriptionRedshiftDestinationDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DestinationDescriptionRedshiftDestinationDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `RoleARN`
      String.validateJsonElement(jsonObj.get("RoleARN"));
      // validate the required field `ClusterJDBCURL`
      String.validateJsonElement(jsonObj.get("ClusterJDBCURL"));
      // validate the required field `CopyCommand`
      RedshiftDestinationConfigurationCopyCommand.validateJsonElement(jsonObj.get("CopyCommand"));
      // validate the required field `Username`
      String.validateJsonElement(jsonObj.get("Username"));
      // validate the optional field `RetryOptions`
      if (jsonObj.get("RetryOptions") != null && !jsonObj.get("RetryOptions").isJsonNull()) {
        RedshiftDestinationConfigurationRetryOptions.validateJsonElement(jsonObj.get("RetryOptions"));
      }
      // validate the required field `S3DestinationDescription`
      RedshiftDestinationDescriptionS3DestinationDescription.validateJsonElement(jsonObj.get("S3DestinationDescription"));
      // validate the optional field `ProcessingConfiguration`
      if (jsonObj.get("ProcessingConfiguration") != null && !jsonObj.get("ProcessingConfiguration").isJsonNull()) {
        ExtendedS3DestinationConfigurationProcessingConfiguration.validateJsonElement(jsonObj.get("ProcessingConfiguration"));
      }
      // validate the optional field `S3BackupMode`
      if (jsonObj.get("S3BackupMode") != null && !jsonObj.get("S3BackupMode").isJsonNull()) {
        RedshiftS3BackupMode.validateJsonElement(jsonObj.get("S3BackupMode"));
      }
      // validate the optional field `S3BackupDescription`
      if (jsonObj.get("S3BackupDescription") != null && !jsonObj.get("S3BackupDescription").isJsonNull()) {
        ExtendedS3DestinationDescriptionS3BackupDescription.validateJsonElement(jsonObj.get("S3BackupDescription"));
      }
      // validate the optional field `CloudWatchLoggingOptions`
      if (jsonObj.get("CloudWatchLoggingOptions") != null && !jsonObj.get("CloudWatchLoggingOptions").isJsonNull()) {
        S3DestinationDescriptionCloudWatchLoggingOptions.validateJsonElement(jsonObj.get("CloudWatchLoggingOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationDescriptionRedshiftDestinationDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationDescriptionRedshiftDestinationDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationDescriptionRedshiftDestinationDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationDescriptionRedshiftDestinationDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationDescriptionRedshiftDestinationDescription>() {
           @Override
           public void write(JsonWriter out, DestinationDescriptionRedshiftDestinationDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationDescriptionRedshiftDestinationDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationDescriptionRedshiftDestinationDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationDescriptionRedshiftDestinationDescription
   * @throws IOException if the JSON string is invalid with respect to DestinationDescriptionRedshiftDestinationDescription
   */
  public static DestinationDescriptionRedshiftDestinationDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationDescriptionRedshiftDestinationDescription.class);
  }

  /**
   * Convert an instance of DestinationDescriptionRedshiftDestinationDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

