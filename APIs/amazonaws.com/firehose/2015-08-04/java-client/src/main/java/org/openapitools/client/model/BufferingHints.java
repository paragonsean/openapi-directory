/*
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes hints for the buffering to perform before delivering data to the destination. These options are treated as hints, and therefore Kinesis Data Firehose might choose to use different values when it is optimal. The &lt;code&gt;SizeInMBs&lt;/code&gt; and &lt;code&gt;IntervalInSeconds&lt;/code&gt; parameters are optional. However, if specify a value for one of them, you must also provide a value for the other.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:11.989141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BufferingHints {
  public static final String SERIALIZED_NAME_SIZE_IN_M_BS = "SizeInMBs";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_M_BS)
  private Integer sizeInMBs;

  public static final String SERIALIZED_NAME_INTERVAL_IN_SECONDS = "IntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_INTERVAL_IN_SECONDS)
  private Integer intervalInSeconds;

  public BufferingHints() {
  }

  public BufferingHints sizeInMBs(Integer sizeInMBs) {
    this.sizeInMBs = sizeInMBs;
    return this;
  }

  /**
   * Get sizeInMBs
   * @return sizeInMBs
   */
  @javax.annotation.Nullable
  public Integer getSizeInMBs() {
    return sizeInMBs;
  }

  public void setSizeInMBs(Integer sizeInMBs) {
    this.sizeInMBs = sizeInMBs;
  }


  public BufferingHints intervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
    return this;
  }

  /**
   * Get intervalInSeconds
   * @return intervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getIntervalInSeconds() {
    return intervalInSeconds;
  }

  public void setIntervalInSeconds(Integer intervalInSeconds) {
    this.intervalInSeconds = intervalInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BufferingHints bufferingHints = (BufferingHints) o;
    return Objects.equals(this.sizeInMBs, bufferingHints.sizeInMBs) &&
        Objects.equals(this.intervalInSeconds, bufferingHints.intervalInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sizeInMBs, intervalInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BufferingHints {\n");
    sb.append("    sizeInMBs: ").append(toIndentedString(sizeInMBs)).append("\n");
    sb.append("    intervalInSeconds: ").append(toIndentedString(intervalInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SizeInMBs");
    openapiFields.add("IntervalInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BufferingHints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BufferingHints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BufferingHints is not found in the empty JSON string", BufferingHints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BufferingHints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BufferingHints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SizeInMBs`
      if (jsonObj.get("SizeInMBs") != null && !jsonObj.get("SizeInMBs").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SizeInMBs"));
      }
      // validate the optional field `IntervalInSeconds`
      if (jsonObj.get("IntervalInSeconds") != null && !jsonObj.get("IntervalInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IntervalInSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BufferingHints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BufferingHints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BufferingHints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BufferingHints.class));

       return (TypeAdapter<T>) new TypeAdapter<BufferingHints>() {
           @Override
           public void write(JsonWriter out, BufferingHints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BufferingHints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BufferingHints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BufferingHints
   * @throws IOException if the JSON string is invalid with respect to BufferingHints
   */
  public static BufferingHints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BufferingHints.class);
  }

  /**
   * Convert an instance of BufferingHints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

