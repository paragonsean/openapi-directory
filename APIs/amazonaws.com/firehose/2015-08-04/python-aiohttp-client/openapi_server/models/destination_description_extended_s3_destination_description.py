# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compression_format import CompressionFormat
from openapi_server.models.extended_s3_destination_configuration_buffering_hints import ExtendedS3DestinationConfigurationBufferingHints
from openapi_server.models.extended_s3_destination_configuration_data_format_conversion_configuration import ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
from openapi_server.models.extended_s3_destination_configuration_dynamic_partitioning_configuration import ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration
from openapi_server.models.extended_s3_destination_configuration_processing_configuration import ExtendedS3DestinationConfigurationProcessingConfiguration
from openapi_server.models.extended_s3_destination_description_s3_backup_description import ExtendedS3DestinationDescriptionS3BackupDescription
from openapi_server.models.s3_backup_mode import S3BackupMode
from openapi_server.models.s3_destination_configuration_encryption_configuration import S3DestinationConfigurationEncryptionConfiguration
from openapi_server.models.s3_destination_description_cloud_watch_logging_options import S3DestinationDescriptionCloudWatchLoggingOptions
from openapi_server import util


class DestinationDescriptionExtendedS3DestinationDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, bucket_arn: str=None, prefix: str=None, error_output_prefix: str=None, buffering_hints: ExtendedS3DestinationConfigurationBufferingHints=None, compression_format: CompressionFormat=None, encryption_configuration: S3DestinationConfigurationEncryptionConfiguration=None, cloud_watch_logging_options: S3DestinationDescriptionCloudWatchLoggingOptions=None, processing_configuration: ExtendedS3DestinationConfigurationProcessingConfiguration=None, s3_backup_mode: S3BackupMode=None, s3_backup_description: ExtendedS3DestinationDescriptionS3BackupDescription=None, data_format_conversion_configuration: ExtendedS3DestinationConfigurationDataFormatConversionConfiguration=None, dynamic_partitioning_configuration: ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration=None):
        """DestinationDescriptionExtendedS3DestinationDescription - a model defined in OpenAPI

        :param role_arn: The role_arn of this DestinationDescriptionExtendedS3DestinationDescription.
        :param bucket_arn: The bucket_arn of this DestinationDescriptionExtendedS3DestinationDescription.
        :param prefix: The prefix of this DestinationDescriptionExtendedS3DestinationDescription.
        :param error_output_prefix: The error_output_prefix of this DestinationDescriptionExtendedS3DestinationDescription.
        :param buffering_hints: The buffering_hints of this DestinationDescriptionExtendedS3DestinationDescription.
        :param compression_format: The compression_format of this DestinationDescriptionExtendedS3DestinationDescription.
        :param encryption_configuration: The encryption_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :param cloud_watch_logging_options: The cloud_watch_logging_options of this DestinationDescriptionExtendedS3DestinationDescription.
        :param processing_configuration: The processing_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :param s3_backup_mode: The s3_backup_mode of this DestinationDescriptionExtendedS3DestinationDescription.
        :param s3_backup_description: The s3_backup_description of this DestinationDescriptionExtendedS3DestinationDescription.
        :param data_format_conversion_configuration: The data_format_conversion_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :param dynamic_partitioning_configuration: The dynamic_partitioning_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        """
        self.openapi_types = {
            'role_arn': str,
            'bucket_arn': str,
            'prefix': str,
            'error_output_prefix': str,
            'buffering_hints': ExtendedS3DestinationConfigurationBufferingHints,
            'compression_format': CompressionFormat,
            'encryption_configuration': S3DestinationConfigurationEncryptionConfiguration,
            'cloud_watch_logging_options': S3DestinationDescriptionCloudWatchLoggingOptions,
            'processing_configuration': ExtendedS3DestinationConfigurationProcessingConfiguration,
            's3_backup_mode': S3BackupMode,
            's3_backup_description': ExtendedS3DestinationDescriptionS3BackupDescription,
            'data_format_conversion_configuration': ExtendedS3DestinationConfigurationDataFormatConversionConfiguration,
            'dynamic_partitioning_configuration': ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration
        }

        self.attribute_map = {
            'role_arn': 'RoleARN',
            'bucket_arn': 'BucketARN',
            'prefix': 'Prefix',
            'error_output_prefix': 'ErrorOutputPrefix',
            'buffering_hints': 'BufferingHints',
            'compression_format': 'CompressionFormat',
            'encryption_configuration': 'EncryptionConfiguration',
            'cloud_watch_logging_options': 'CloudWatchLoggingOptions',
            'processing_configuration': 'ProcessingConfiguration',
            's3_backup_mode': 'S3BackupMode',
            's3_backup_description': 'S3BackupDescription',
            'data_format_conversion_configuration': 'DataFormatConversionConfiguration',
            'dynamic_partitioning_configuration': 'DynamicPartitioningConfiguration'
        }

        self._role_arn = role_arn
        self._bucket_arn = bucket_arn
        self._prefix = prefix
        self._error_output_prefix = error_output_prefix
        self._buffering_hints = buffering_hints
        self._compression_format = compression_format
        self._encryption_configuration = encryption_configuration
        self._cloud_watch_logging_options = cloud_watch_logging_options
        self._processing_configuration = processing_configuration
        self._s3_backup_mode = s3_backup_mode
        self._s3_backup_description = s3_backup_description
        self._data_format_conversion_configuration = data_format_conversion_configuration
        self._dynamic_partitioning_configuration = dynamic_partitioning_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationDescriptionExtendedS3DestinationDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationDescription_ExtendedS3DestinationDescription of this DestinationDescriptionExtendedS3DestinationDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The role_arn of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this DestinationDescriptionExtendedS3DestinationDescription.


        :param role_arn: The role_arn of this DestinationDescriptionExtendedS3DestinationDescription.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def bucket_arn(self):
        """Gets the bucket_arn of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The bucket_arn of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: str
        """
        return self._bucket_arn

    @bucket_arn.setter
    def bucket_arn(self, bucket_arn):
        """Sets the bucket_arn of this DestinationDescriptionExtendedS3DestinationDescription.


        :param bucket_arn: The bucket_arn of this DestinationDescriptionExtendedS3DestinationDescription.
        :type bucket_arn: str
        """
        if bucket_arn is None:
            raise ValueError("Invalid value for `bucket_arn`, must not be `None`")

        self._bucket_arn = bucket_arn

    @property
    def prefix(self):
        """Gets the prefix of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The prefix of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this DestinationDescriptionExtendedS3DestinationDescription.


        :param prefix: The prefix of this DestinationDescriptionExtendedS3DestinationDescription.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def error_output_prefix(self):
        """Gets the error_output_prefix of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The error_output_prefix of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: str
        """
        return self._error_output_prefix

    @error_output_prefix.setter
    def error_output_prefix(self, error_output_prefix):
        """Sets the error_output_prefix of this DestinationDescriptionExtendedS3DestinationDescription.


        :param error_output_prefix: The error_output_prefix of this DestinationDescriptionExtendedS3DestinationDescription.
        :type error_output_prefix: str
        """

        self._error_output_prefix = error_output_prefix

    @property
    def buffering_hints(self):
        """Gets the buffering_hints of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The buffering_hints of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: ExtendedS3DestinationConfigurationBufferingHints
        """
        return self._buffering_hints

    @buffering_hints.setter
    def buffering_hints(self, buffering_hints):
        """Sets the buffering_hints of this DestinationDescriptionExtendedS3DestinationDescription.


        :param buffering_hints: The buffering_hints of this DestinationDescriptionExtendedS3DestinationDescription.
        :type buffering_hints: ExtendedS3DestinationConfigurationBufferingHints
        """
        if buffering_hints is None:
            raise ValueError("Invalid value for `buffering_hints`, must not be `None`")

        self._buffering_hints = buffering_hints

    @property
    def compression_format(self):
        """Gets the compression_format of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The compression_format of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: CompressionFormat
        """
        return self._compression_format

    @compression_format.setter
    def compression_format(self, compression_format):
        """Sets the compression_format of this DestinationDescriptionExtendedS3DestinationDescription.


        :param compression_format: The compression_format of this DestinationDescriptionExtendedS3DestinationDescription.
        :type compression_format: CompressionFormat
        """
        if compression_format is None:
            raise ValueError("Invalid value for `compression_format`, must not be `None`")

        self._compression_format = compression_format

    @property
    def encryption_configuration(self):
        """Gets the encryption_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The encryption_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: S3DestinationConfigurationEncryptionConfiguration
        """
        return self._encryption_configuration

    @encryption_configuration.setter
    def encryption_configuration(self, encryption_configuration):
        """Sets the encryption_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :param encryption_configuration: The encryption_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :type encryption_configuration: S3DestinationConfigurationEncryptionConfiguration
        """
        if encryption_configuration is None:
            raise ValueError("Invalid value for `encryption_configuration`, must not be `None`")

        self._encryption_configuration = encryption_configuration

    @property
    def cloud_watch_logging_options(self):
        """Gets the cloud_watch_logging_options of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The cloud_watch_logging_options of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: S3DestinationDescriptionCloudWatchLoggingOptions
        """
        return self._cloud_watch_logging_options

    @cloud_watch_logging_options.setter
    def cloud_watch_logging_options(self, cloud_watch_logging_options):
        """Sets the cloud_watch_logging_options of this DestinationDescriptionExtendedS3DestinationDescription.


        :param cloud_watch_logging_options: The cloud_watch_logging_options of this DestinationDescriptionExtendedS3DestinationDescription.
        :type cloud_watch_logging_options: S3DestinationDescriptionCloudWatchLoggingOptions
        """

        self._cloud_watch_logging_options = cloud_watch_logging_options

    @property
    def processing_configuration(self):
        """Gets the processing_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The processing_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: ExtendedS3DestinationConfigurationProcessingConfiguration
        """
        return self._processing_configuration

    @processing_configuration.setter
    def processing_configuration(self, processing_configuration):
        """Sets the processing_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :param processing_configuration: The processing_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :type processing_configuration: ExtendedS3DestinationConfigurationProcessingConfiguration
        """

        self._processing_configuration = processing_configuration

    @property
    def s3_backup_mode(self):
        """Gets the s3_backup_mode of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The s3_backup_mode of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: S3BackupMode
        """
        return self._s3_backup_mode

    @s3_backup_mode.setter
    def s3_backup_mode(self, s3_backup_mode):
        """Sets the s3_backup_mode of this DestinationDescriptionExtendedS3DestinationDescription.


        :param s3_backup_mode: The s3_backup_mode of this DestinationDescriptionExtendedS3DestinationDescription.
        :type s3_backup_mode: S3BackupMode
        """

        self._s3_backup_mode = s3_backup_mode

    @property
    def s3_backup_description(self):
        """Gets the s3_backup_description of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The s3_backup_description of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: ExtendedS3DestinationDescriptionS3BackupDescription
        """
        return self._s3_backup_description

    @s3_backup_description.setter
    def s3_backup_description(self, s3_backup_description):
        """Sets the s3_backup_description of this DestinationDescriptionExtendedS3DestinationDescription.


        :param s3_backup_description: The s3_backup_description of this DestinationDescriptionExtendedS3DestinationDescription.
        :type s3_backup_description: ExtendedS3DestinationDescriptionS3BackupDescription
        """

        self._s3_backup_description = s3_backup_description

    @property
    def data_format_conversion_configuration(self):
        """Gets the data_format_conversion_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The data_format_conversion_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
        """
        return self._data_format_conversion_configuration

    @data_format_conversion_configuration.setter
    def data_format_conversion_configuration(self, data_format_conversion_configuration):
        """Sets the data_format_conversion_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :param data_format_conversion_configuration: The data_format_conversion_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :type data_format_conversion_configuration: ExtendedS3DestinationConfigurationDataFormatConversionConfiguration
        """

        self._data_format_conversion_configuration = data_format_conversion_configuration

    @property
    def dynamic_partitioning_configuration(self):
        """Gets the dynamic_partitioning_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :return: The dynamic_partitioning_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :rtype: ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration
        """
        return self._dynamic_partitioning_configuration

    @dynamic_partitioning_configuration.setter
    def dynamic_partitioning_configuration(self, dynamic_partitioning_configuration):
        """Sets the dynamic_partitioning_configuration of this DestinationDescriptionExtendedS3DestinationDescription.


        :param dynamic_partitioning_configuration: The dynamic_partitioning_configuration of this DestinationDescriptionExtendedS3DestinationDescription.
        :type dynamic_partitioning_configuration: ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration
        """

        self._dynamic_partitioning_configuration = dynamic_partitioning_configuration
