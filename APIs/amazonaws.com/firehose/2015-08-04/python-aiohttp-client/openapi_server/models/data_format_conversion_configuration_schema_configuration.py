# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataFormatConversionConfigurationSchemaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, catalog_id: str=None, database_name: str=None, table_name: str=None, region: str=None, version_id: str=None):
        """DataFormatConversionConfigurationSchemaConfiguration - a model defined in OpenAPI

        :param role_arn: The role_arn of this DataFormatConversionConfigurationSchemaConfiguration.
        :param catalog_id: The catalog_id of this DataFormatConversionConfigurationSchemaConfiguration.
        :param database_name: The database_name of this DataFormatConversionConfigurationSchemaConfiguration.
        :param table_name: The table_name of this DataFormatConversionConfigurationSchemaConfiguration.
        :param region: The region of this DataFormatConversionConfigurationSchemaConfiguration.
        :param version_id: The version_id of this DataFormatConversionConfigurationSchemaConfiguration.
        """
        self.openapi_types = {
            'role_arn': str,
            'catalog_id': str,
            'database_name': str,
            'table_name': str,
            'region': str,
            'version_id': str
        }

        self.attribute_map = {
            'role_arn': 'RoleARN',
            'catalog_id': 'CatalogId',
            'database_name': 'DatabaseName',
            'table_name': 'TableName',
            'region': 'Region',
            'version_id': 'VersionId'
        }

        self._role_arn = role_arn
        self._catalog_id = catalog_id
        self._database_name = database_name
        self._table_name = table_name
        self._region = region
        self._version_id = version_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFormatConversionConfigurationSchemaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFormatConversionConfiguration_SchemaConfiguration of this DataFormatConversionConfigurationSchemaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this DataFormatConversionConfigurationSchemaConfiguration.


        :return: The role_arn of this DataFormatConversionConfigurationSchemaConfiguration.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this DataFormatConversionConfigurationSchemaConfiguration.


        :param role_arn: The role_arn of this DataFormatConversionConfigurationSchemaConfiguration.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def catalog_id(self):
        """Gets the catalog_id of this DataFormatConversionConfigurationSchemaConfiguration.


        :return: The catalog_id of this DataFormatConversionConfigurationSchemaConfiguration.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this DataFormatConversionConfigurationSchemaConfiguration.


        :param catalog_id: The catalog_id of this DataFormatConversionConfigurationSchemaConfiguration.
        :type catalog_id: str
        """

        self._catalog_id = catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this DataFormatConversionConfigurationSchemaConfiguration.


        :return: The database_name of this DataFormatConversionConfigurationSchemaConfiguration.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this DataFormatConversionConfigurationSchemaConfiguration.


        :param database_name: The database_name of this DataFormatConversionConfigurationSchemaConfiguration.
        :type database_name: str
        """

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this DataFormatConversionConfigurationSchemaConfiguration.


        :return: The table_name of this DataFormatConversionConfigurationSchemaConfiguration.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this DataFormatConversionConfigurationSchemaConfiguration.


        :param table_name: The table_name of this DataFormatConversionConfigurationSchemaConfiguration.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def region(self):
        """Gets the region of this DataFormatConversionConfigurationSchemaConfiguration.


        :return: The region of this DataFormatConversionConfigurationSchemaConfiguration.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DataFormatConversionConfigurationSchemaConfiguration.


        :param region: The region of this DataFormatConversionConfigurationSchemaConfiguration.
        :type region: str
        """

        self._region = region

    @property
    def version_id(self):
        """Gets the version_id of this DataFormatConversionConfigurationSchemaConfiguration.


        :return: The version_id of this DataFormatConversionConfigurationSchemaConfiguration.
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this DataFormatConversionConfigurationSchemaConfiguration.


        :param version_id: The version_id of this DataFormatConversionConfigurationSchemaConfiguration.
        :type version_id: str
        """

        self._version_id = version_id
