# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutRecordBatchOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_put_count: int=None, encrypted: bool=None, request_responses: List=None):
        """PutRecordBatchOutput - a model defined in OpenAPI

        :param failed_put_count: The failed_put_count of this PutRecordBatchOutput.
        :param encrypted: The encrypted of this PutRecordBatchOutput.
        :param request_responses: The request_responses of this PutRecordBatchOutput.
        """
        self.openapi_types = {
            'failed_put_count': int,
            'encrypted': bool,
            'request_responses': List
        }

        self.attribute_map = {
            'failed_put_count': 'FailedPutCount',
            'encrypted': 'Encrypted',
            'request_responses': 'RequestResponses'
        }

        self._failed_put_count = failed_put_count
        self._encrypted = encrypted
        self._request_responses = request_responses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRecordBatchOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRecordBatchOutput of this PutRecordBatchOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_put_count(self):
        """Gets the failed_put_count of this PutRecordBatchOutput.


        :return: The failed_put_count of this PutRecordBatchOutput.
        :rtype: int
        """
        return self._failed_put_count

    @failed_put_count.setter
    def failed_put_count(self, failed_put_count):
        """Sets the failed_put_count of this PutRecordBatchOutput.


        :param failed_put_count: The failed_put_count of this PutRecordBatchOutput.
        :type failed_put_count: int
        """
        if failed_put_count is None:
            raise ValueError("Invalid value for `failed_put_count`, must not be `None`")

        self._failed_put_count = failed_put_count

    @property
    def encrypted(self):
        """Gets the encrypted of this PutRecordBatchOutput.


        :return: The encrypted of this PutRecordBatchOutput.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this PutRecordBatchOutput.


        :param encrypted: The encrypted of this PutRecordBatchOutput.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def request_responses(self):
        """Gets the request_responses of this PutRecordBatchOutput.


        :return: The request_responses of this PutRecordBatchOutput.
        :rtype: List
        """
        return self._request_responses

    @request_responses.setter
    def request_responses(self, request_responses):
        """Sets the request_responses of this PutRecordBatchOutput.


        :param request_responses: The request_responses of this PutRecordBatchOutput.
        :type request_responses: List
        """
        if request_responses is None:
            raise ValueError("Invalid value for `request_responses`, must not be `None`")

        self._request_responses = request_responses
