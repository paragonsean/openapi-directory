# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_format_conversion_configuration_input_format_configuration import DataFormatConversionConfigurationInputFormatConfiguration
from openapi_server.models.data_format_conversion_configuration_output_format_configuration import DataFormatConversionConfigurationOutputFormatConfiguration
from openapi_server.models.data_format_conversion_configuration_schema_configuration import DataFormatConversionConfigurationSchemaConfiguration
from openapi_server import util


class DataFormatConversionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schema_configuration: DataFormatConversionConfigurationSchemaConfiguration=None, input_format_configuration: DataFormatConversionConfigurationInputFormatConfiguration=None, output_format_configuration: DataFormatConversionConfigurationOutputFormatConfiguration=None, enabled: bool=None):
        """DataFormatConversionConfiguration - a model defined in OpenAPI

        :param schema_configuration: The schema_configuration of this DataFormatConversionConfiguration.
        :param input_format_configuration: The input_format_configuration of this DataFormatConversionConfiguration.
        :param output_format_configuration: The output_format_configuration of this DataFormatConversionConfiguration.
        :param enabled: The enabled of this DataFormatConversionConfiguration.
        """
        self.openapi_types = {
            'schema_configuration': DataFormatConversionConfigurationSchemaConfiguration,
            'input_format_configuration': DataFormatConversionConfigurationInputFormatConfiguration,
            'output_format_configuration': DataFormatConversionConfigurationOutputFormatConfiguration,
            'enabled': bool
        }

        self.attribute_map = {
            'schema_configuration': 'SchemaConfiguration',
            'input_format_configuration': 'InputFormatConfiguration',
            'output_format_configuration': 'OutputFormatConfiguration',
            'enabled': 'Enabled'
        }

        self._schema_configuration = schema_configuration
        self._input_format_configuration = input_format_configuration
        self._output_format_configuration = output_format_configuration
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataFormatConversionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataFormatConversionConfiguration of this DataFormatConversionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_configuration(self):
        """Gets the schema_configuration of this DataFormatConversionConfiguration.


        :return: The schema_configuration of this DataFormatConversionConfiguration.
        :rtype: DataFormatConversionConfigurationSchemaConfiguration
        """
        return self._schema_configuration

    @schema_configuration.setter
    def schema_configuration(self, schema_configuration):
        """Sets the schema_configuration of this DataFormatConversionConfiguration.


        :param schema_configuration: The schema_configuration of this DataFormatConversionConfiguration.
        :type schema_configuration: DataFormatConversionConfigurationSchemaConfiguration
        """

        self._schema_configuration = schema_configuration

    @property
    def input_format_configuration(self):
        """Gets the input_format_configuration of this DataFormatConversionConfiguration.


        :return: The input_format_configuration of this DataFormatConversionConfiguration.
        :rtype: DataFormatConversionConfigurationInputFormatConfiguration
        """
        return self._input_format_configuration

    @input_format_configuration.setter
    def input_format_configuration(self, input_format_configuration):
        """Sets the input_format_configuration of this DataFormatConversionConfiguration.


        :param input_format_configuration: The input_format_configuration of this DataFormatConversionConfiguration.
        :type input_format_configuration: DataFormatConversionConfigurationInputFormatConfiguration
        """

        self._input_format_configuration = input_format_configuration

    @property
    def output_format_configuration(self):
        """Gets the output_format_configuration of this DataFormatConversionConfiguration.


        :return: The output_format_configuration of this DataFormatConversionConfiguration.
        :rtype: DataFormatConversionConfigurationOutputFormatConfiguration
        """
        return self._output_format_configuration

    @output_format_configuration.setter
    def output_format_configuration(self, output_format_configuration):
        """Sets the output_format_configuration of this DataFormatConversionConfiguration.


        :param output_format_configuration: The output_format_configuration of this DataFormatConversionConfiguration.
        :type output_format_configuration: DataFormatConversionConfigurationOutputFormatConfiguration
        """

        self._output_format_configuration = output_format_configuration

    @property
    def enabled(self):
        """Gets the enabled of this DataFormatConversionConfiguration.


        :return: The enabled of this DataFormatConversionConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DataFormatConversionConfiguration.


        :param enabled: The enabled of this DataFormatConversionConfiguration.
        :type enabled: bool
        """

        self._enabled = enabled
