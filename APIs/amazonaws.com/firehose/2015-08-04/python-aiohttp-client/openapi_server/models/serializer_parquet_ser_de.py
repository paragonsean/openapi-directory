# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parquet_compression import ParquetCompression
from openapi_server.models.parquet_writer_version import ParquetWriterVersion
from openapi_server import util


class SerializerParquetSerDe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_size_bytes: int=None, page_size_bytes: int=None, compression: ParquetCompression=None, enable_dictionary_compression: bool=None, max_padding_bytes: int=None, writer_version: ParquetWriterVersion=None):
        """SerializerParquetSerDe - a model defined in OpenAPI

        :param block_size_bytes: The block_size_bytes of this SerializerParquetSerDe.
        :param page_size_bytes: The page_size_bytes of this SerializerParquetSerDe.
        :param compression: The compression of this SerializerParquetSerDe.
        :param enable_dictionary_compression: The enable_dictionary_compression of this SerializerParquetSerDe.
        :param max_padding_bytes: The max_padding_bytes of this SerializerParquetSerDe.
        :param writer_version: The writer_version of this SerializerParquetSerDe.
        """
        self.openapi_types = {
            'block_size_bytes': int,
            'page_size_bytes': int,
            'compression': ParquetCompression,
            'enable_dictionary_compression': bool,
            'max_padding_bytes': int,
            'writer_version': ParquetWriterVersion
        }

        self.attribute_map = {
            'block_size_bytes': 'BlockSizeBytes',
            'page_size_bytes': 'PageSizeBytes',
            'compression': 'Compression',
            'enable_dictionary_compression': 'EnableDictionaryCompression',
            'max_padding_bytes': 'MaxPaddingBytes',
            'writer_version': 'WriterVersion'
        }

        self._block_size_bytes = block_size_bytes
        self._page_size_bytes = page_size_bytes
        self._compression = compression
        self._enable_dictionary_compression = enable_dictionary_compression
        self._max_padding_bytes = max_padding_bytes
        self._writer_version = writer_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SerializerParquetSerDe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Serializer_ParquetSerDe of this SerializerParquetSerDe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_size_bytes(self):
        """Gets the block_size_bytes of this SerializerParquetSerDe.


        :return: The block_size_bytes of this SerializerParquetSerDe.
        :rtype: int
        """
        return self._block_size_bytes

    @block_size_bytes.setter
    def block_size_bytes(self, block_size_bytes):
        """Sets the block_size_bytes of this SerializerParquetSerDe.


        :param block_size_bytes: The block_size_bytes of this SerializerParquetSerDe.
        :type block_size_bytes: int
        """

        self._block_size_bytes = block_size_bytes

    @property
    def page_size_bytes(self):
        """Gets the page_size_bytes of this SerializerParquetSerDe.


        :return: The page_size_bytes of this SerializerParquetSerDe.
        :rtype: int
        """
        return self._page_size_bytes

    @page_size_bytes.setter
    def page_size_bytes(self, page_size_bytes):
        """Sets the page_size_bytes of this SerializerParquetSerDe.


        :param page_size_bytes: The page_size_bytes of this SerializerParquetSerDe.
        :type page_size_bytes: int
        """

        self._page_size_bytes = page_size_bytes

    @property
    def compression(self):
        """Gets the compression of this SerializerParquetSerDe.


        :return: The compression of this SerializerParquetSerDe.
        :rtype: ParquetCompression
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this SerializerParquetSerDe.


        :param compression: The compression of this SerializerParquetSerDe.
        :type compression: ParquetCompression
        """

        self._compression = compression

    @property
    def enable_dictionary_compression(self):
        """Gets the enable_dictionary_compression of this SerializerParquetSerDe.


        :return: The enable_dictionary_compression of this SerializerParquetSerDe.
        :rtype: bool
        """
        return self._enable_dictionary_compression

    @enable_dictionary_compression.setter
    def enable_dictionary_compression(self, enable_dictionary_compression):
        """Sets the enable_dictionary_compression of this SerializerParquetSerDe.


        :param enable_dictionary_compression: The enable_dictionary_compression of this SerializerParquetSerDe.
        :type enable_dictionary_compression: bool
        """

        self._enable_dictionary_compression = enable_dictionary_compression

    @property
    def max_padding_bytes(self):
        """Gets the max_padding_bytes of this SerializerParquetSerDe.


        :return: The max_padding_bytes of this SerializerParquetSerDe.
        :rtype: int
        """
        return self._max_padding_bytes

    @max_padding_bytes.setter
    def max_padding_bytes(self, max_padding_bytes):
        """Sets the max_padding_bytes of this SerializerParquetSerDe.


        :param max_padding_bytes: The max_padding_bytes of this SerializerParquetSerDe.
        :type max_padding_bytes: int
        """

        self._max_padding_bytes = max_padding_bytes

    @property
    def writer_version(self):
        """Gets the writer_version of this SerializerParquetSerDe.


        :return: The writer_version of this SerializerParquetSerDe.
        :rtype: ParquetWriterVersion
        """
        return self._writer_version

    @writer_version.setter
    def writer_version(self, writer_version):
        """Sets the writer_version of this SerializerParquetSerDe.


        :param writer_version: The writer_version of this SerializerParquetSerDe.
        :type writer_version: ParquetWriterVersion
        """

        self._writer_version = writer_version
