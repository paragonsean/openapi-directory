# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CopyCommand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_table_name: str=None, data_table_columns: str=None, copy_options: str=None):
        """CopyCommand - a model defined in OpenAPI

        :param data_table_name: The data_table_name of this CopyCommand.
        :param data_table_columns: The data_table_columns of this CopyCommand.
        :param copy_options: The copy_options of this CopyCommand.
        """
        self.openapi_types = {
            'data_table_name': str,
            'data_table_columns': str,
            'copy_options': str
        }

        self.attribute_map = {
            'data_table_name': 'DataTableName',
            'data_table_columns': 'DataTableColumns',
            'copy_options': 'CopyOptions'
        }

        self._data_table_name = data_table_name
        self._data_table_columns = data_table_columns
        self._copy_options = copy_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CopyCommand':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CopyCommand of this CopyCommand.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_table_name(self):
        """Gets the data_table_name of this CopyCommand.


        :return: The data_table_name of this CopyCommand.
        :rtype: str
        """
        return self._data_table_name

    @data_table_name.setter
    def data_table_name(self, data_table_name):
        """Sets the data_table_name of this CopyCommand.


        :param data_table_name: The data_table_name of this CopyCommand.
        :type data_table_name: str
        """
        if data_table_name is None:
            raise ValueError("Invalid value for `data_table_name`, must not be `None`")

        self._data_table_name = data_table_name

    @property
    def data_table_columns(self):
        """Gets the data_table_columns of this CopyCommand.


        :return: The data_table_columns of this CopyCommand.
        :rtype: str
        """
        return self._data_table_columns

    @data_table_columns.setter
    def data_table_columns(self, data_table_columns):
        """Sets the data_table_columns of this CopyCommand.


        :param data_table_columns: The data_table_columns of this CopyCommand.
        :type data_table_columns: str
        """

        self._data_table_columns = data_table_columns

    @property
    def copy_options(self):
        """Gets the copy_options of this CopyCommand.


        :return: The copy_options of this CopyCommand.
        :rtype: str
        """
        return self._copy_options

    @copy_options.setter
    def copy_options(self, copy_options):
        """Sets the copy_options of this CopyCommand.


        :param copy_options: The copy_options of this CopyCommand.
        :type copy_options: str
        """

        self._copy_options = copy_options
