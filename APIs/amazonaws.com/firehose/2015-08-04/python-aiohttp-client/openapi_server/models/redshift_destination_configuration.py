# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_s3_destination_configuration_processing_configuration import ExtendedS3DestinationConfigurationProcessingConfiguration
from openapi_server.models.extended_s3_destination_configuration_s3_backup_configuration import ExtendedS3DestinationConfigurationS3BackupConfiguration
from openapi_server.models.redshift_destination_configuration_copy_command import RedshiftDestinationConfigurationCopyCommand
from openapi_server.models.redshift_destination_configuration_retry_options import RedshiftDestinationConfigurationRetryOptions
from openapi_server.models.redshift_destination_configuration_s3_configuration import RedshiftDestinationConfigurationS3Configuration
from openapi_server.models.redshift_s3_backup_mode import RedshiftS3BackupMode
from openapi_server.models.s3_destination_configuration_cloud_watch_logging_options import S3DestinationConfigurationCloudWatchLoggingOptions
from openapi_server import util


class RedshiftDestinationConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, cluster_jdbcurl: str=None, copy_command: RedshiftDestinationConfigurationCopyCommand=None, username: str=None, password: str=None, retry_options: RedshiftDestinationConfigurationRetryOptions=None, s3_configuration: RedshiftDestinationConfigurationS3Configuration=None, processing_configuration: ExtendedS3DestinationConfigurationProcessingConfiguration=None, s3_backup_mode: RedshiftS3BackupMode=None, s3_backup_configuration: ExtendedS3DestinationConfigurationS3BackupConfiguration=None, cloud_watch_logging_options: S3DestinationConfigurationCloudWatchLoggingOptions=None):
        """RedshiftDestinationConfiguration - a model defined in OpenAPI

        :param role_arn: The role_arn of this RedshiftDestinationConfiguration.
        :param cluster_jdbcurl: The cluster_jdbcurl of this RedshiftDestinationConfiguration.
        :param copy_command: The copy_command of this RedshiftDestinationConfiguration.
        :param username: The username of this RedshiftDestinationConfiguration.
        :param password: The password of this RedshiftDestinationConfiguration.
        :param retry_options: The retry_options of this RedshiftDestinationConfiguration.
        :param s3_configuration: The s3_configuration of this RedshiftDestinationConfiguration.
        :param processing_configuration: The processing_configuration of this RedshiftDestinationConfiguration.
        :param s3_backup_mode: The s3_backup_mode of this RedshiftDestinationConfiguration.
        :param s3_backup_configuration: The s3_backup_configuration of this RedshiftDestinationConfiguration.
        :param cloud_watch_logging_options: The cloud_watch_logging_options of this RedshiftDestinationConfiguration.
        """
        self.openapi_types = {
            'role_arn': str,
            'cluster_jdbcurl': str,
            'copy_command': RedshiftDestinationConfigurationCopyCommand,
            'username': str,
            'password': str,
            'retry_options': RedshiftDestinationConfigurationRetryOptions,
            's3_configuration': RedshiftDestinationConfigurationS3Configuration,
            'processing_configuration': ExtendedS3DestinationConfigurationProcessingConfiguration,
            's3_backup_mode': RedshiftS3BackupMode,
            's3_backup_configuration': ExtendedS3DestinationConfigurationS3BackupConfiguration,
            'cloud_watch_logging_options': S3DestinationConfigurationCloudWatchLoggingOptions
        }

        self.attribute_map = {
            'role_arn': 'RoleARN',
            'cluster_jdbcurl': 'ClusterJDBCURL',
            'copy_command': 'CopyCommand',
            'username': 'Username',
            'password': 'Password',
            'retry_options': 'RetryOptions',
            's3_configuration': 'S3Configuration',
            'processing_configuration': 'ProcessingConfiguration',
            's3_backup_mode': 'S3BackupMode',
            's3_backup_configuration': 'S3BackupConfiguration',
            'cloud_watch_logging_options': 'CloudWatchLoggingOptions'
        }

        self._role_arn = role_arn
        self._cluster_jdbcurl = cluster_jdbcurl
        self._copy_command = copy_command
        self._username = username
        self._password = password
        self._retry_options = retry_options
        self._s3_configuration = s3_configuration
        self._processing_configuration = processing_configuration
        self._s3_backup_mode = s3_backup_mode
        self._s3_backup_configuration = s3_backup_configuration
        self._cloud_watch_logging_options = cloud_watch_logging_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedshiftDestinationConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedshiftDestinationConfiguration of this RedshiftDestinationConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this RedshiftDestinationConfiguration.


        :return: The role_arn of this RedshiftDestinationConfiguration.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this RedshiftDestinationConfiguration.


        :param role_arn: The role_arn of this RedshiftDestinationConfiguration.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def cluster_jdbcurl(self):
        """Gets the cluster_jdbcurl of this RedshiftDestinationConfiguration.


        :return: The cluster_jdbcurl of this RedshiftDestinationConfiguration.
        :rtype: str
        """
        return self._cluster_jdbcurl

    @cluster_jdbcurl.setter
    def cluster_jdbcurl(self, cluster_jdbcurl):
        """Sets the cluster_jdbcurl of this RedshiftDestinationConfiguration.


        :param cluster_jdbcurl: The cluster_jdbcurl of this RedshiftDestinationConfiguration.
        :type cluster_jdbcurl: str
        """
        if cluster_jdbcurl is None:
            raise ValueError("Invalid value for `cluster_jdbcurl`, must not be `None`")

        self._cluster_jdbcurl = cluster_jdbcurl

    @property
    def copy_command(self):
        """Gets the copy_command of this RedshiftDestinationConfiguration.


        :return: The copy_command of this RedshiftDestinationConfiguration.
        :rtype: RedshiftDestinationConfigurationCopyCommand
        """
        return self._copy_command

    @copy_command.setter
    def copy_command(self, copy_command):
        """Sets the copy_command of this RedshiftDestinationConfiguration.


        :param copy_command: The copy_command of this RedshiftDestinationConfiguration.
        :type copy_command: RedshiftDestinationConfigurationCopyCommand
        """
        if copy_command is None:
            raise ValueError("Invalid value for `copy_command`, must not be `None`")

        self._copy_command = copy_command

    @property
    def username(self):
        """Gets the username of this RedshiftDestinationConfiguration.


        :return: The username of this RedshiftDestinationConfiguration.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RedshiftDestinationConfiguration.


        :param username: The username of this RedshiftDestinationConfiguration.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def password(self):
        """Gets the password of this RedshiftDestinationConfiguration.


        :return: The password of this RedshiftDestinationConfiguration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RedshiftDestinationConfiguration.


        :param password: The password of this RedshiftDestinationConfiguration.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def retry_options(self):
        """Gets the retry_options of this RedshiftDestinationConfiguration.


        :return: The retry_options of this RedshiftDestinationConfiguration.
        :rtype: RedshiftDestinationConfigurationRetryOptions
        """
        return self._retry_options

    @retry_options.setter
    def retry_options(self, retry_options):
        """Sets the retry_options of this RedshiftDestinationConfiguration.


        :param retry_options: The retry_options of this RedshiftDestinationConfiguration.
        :type retry_options: RedshiftDestinationConfigurationRetryOptions
        """

        self._retry_options = retry_options

    @property
    def s3_configuration(self):
        """Gets the s3_configuration of this RedshiftDestinationConfiguration.


        :return: The s3_configuration of this RedshiftDestinationConfiguration.
        :rtype: RedshiftDestinationConfigurationS3Configuration
        """
        return self._s3_configuration

    @s3_configuration.setter
    def s3_configuration(self, s3_configuration):
        """Sets the s3_configuration of this RedshiftDestinationConfiguration.


        :param s3_configuration: The s3_configuration of this RedshiftDestinationConfiguration.
        :type s3_configuration: RedshiftDestinationConfigurationS3Configuration
        """
        if s3_configuration is None:
            raise ValueError("Invalid value for `s3_configuration`, must not be `None`")

        self._s3_configuration = s3_configuration

    @property
    def processing_configuration(self):
        """Gets the processing_configuration of this RedshiftDestinationConfiguration.


        :return: The processing_configuration of this RedshiftDestinationConfiguration.
        :rtype: ExtendedS3DestinationConfigurationProcessingConfiguration
        """
        return self._processing_configuration

    @processing_configuration.setter
    def processing_configuration(self, processing_configuration):
        """Sets the processing_configuration of this RedshiftDestinationConfiguration.


        :param processing_configuration: The processing_configuration of this RedshiftDestinationConfiguration.
        :type processing_configuration: ExtendedS3DestinationConfigurationProcessingConfiguration
        """

        self._processing_configuration = processing_configuration

    @property
    def s3_backup_mode(self):
        """Gets the s3_backup_mode of this RedshiftDestinationConfiguration.


        :return: The s3_backup_mode of this RedshiftDestinationConfiguration.
        :rtype: RedshiftS3BackupMode
        """
        return self._s3_backup_mode

    @s3_backup_mode.setter
    def s3_backup_mode(self, s3_backup_mode):
        """Sets the s3_backup_mode of this RedshiftDestinationConfiguration.


        :param s3_backup_mode: The s3_backup_mode of this RedshiftDestinationConfiguration.
        :type s3_backup_mode: RedshiftS3BackupMode
        """

        self._s3_backup_mode = s3_backup_mode

    @property
    def s3_backup_configuration(self):
        """Gets the s3_backup_configuration of this RedshiftDestinationConfiguration.


        :return: The s3_backup_configuration of this RedshiftDestinationConfiguration.
        :rtype: ExtendedS3DestinationConfigurationS3BackupConfiguration
        """
        return self._s3_backup_configuration

    @s3_backup_configuration.setter
    def s3_backup_configuration(self, s3_backup_configuration):
        """Sets the s3_backup_configuration of this RedshiftDestinationConfiguration.


        :param s3_backup_configuration: The s3_backup_configuration of this RedshiftDestinationConfiguration.
        :type s3_backup_configuration: ExtendedS3DestinationConfigurationS3BackupConfiguration
        """

        self._s3_backup_configuration = s3_backup_configuration

    @property
    def cloud_watch_logging_options(self):
        """Gets the cloud_watch_logging_options of this RedshiftDestinationConfiguration.


        :return: The cloud_watch_logging_options of this RedshiftDestinationConfiguration.
        :rtype: S3DestinationConfigurationCloudWatchLoggingOptions
        """
        return self._cloud_watch_logging_options

    @cloud_watch_logging_options.setter
    def cloud_watch_logging_options(self, cloud_watch_logging_options):
        """Sets the cloud_watch_logging_options of this RedshiftDestinationConfiguration.


        :param cloud_watch_logging_options: The cloud_watch_logging_options of this RedshiftDestinationConfiguration.
        :type cloud_watch_logging_options: S3DestinationConfigurationCloudWatchLoggingOptions
        """

        self._cloud_watch_logging_options = cloud_watch_logging_options
