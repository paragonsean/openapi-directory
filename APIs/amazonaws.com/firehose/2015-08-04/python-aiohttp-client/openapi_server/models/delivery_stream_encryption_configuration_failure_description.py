# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_stream_failure_type import DeliveryStreamFailureType
from openapi_server import util


class DeliveryStreamEncryptionConfigurationFailureDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: DeliveryStreamFailureType=None, details: str=None):
        """DeliveryStreamEncryptionConfigurationFailureDescription - a model defined in OpenAPI

        :param type: The type of this DeliveryStreamEncryptionConfigurationFailureDescription.
        :param details: The details of this DeliveryStreamEncryptionConfigurationFailureDescription.
        """
        self.openapi_types = {
            'type': DeliveryStreamFailureType,
            'details': str
        }

        self.attribute_map = {
            'type': 'Type',
            'details': 'Details'
        }

        self._type = type
        self._details = details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryStreamEncryptionConfigurationFailureDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryStreamEncryptionConfiguration_FailureDescription of this DeliveryStreamEncryptionConfigurationFailureDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DeliveryStreamEncryptionConfigurationFailureDescription.


        :return: The type of this DeliveryStreamEncryptionConfigurationFailureDescription.
        :rtype: DeliveryStreamFailureType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeliveryStreamEncryptionConfigurationFailureDescription.


        :param type: The type of this DeliveryStreamEncryptionConfigurationFailureDescription.
        :type type: DeliveryStreamFailureType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def details(self):
        """Gets the details of this DeliveryStreamEncryptionConfigurationFailureDescription.


        :return: The details of this DeliveryStreamEncryptionConfigurationFailureDescription.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this DeliveryStreamEncryptionConfigurationFailureDescription.


        :param details: The details of this DeliveryStreamEncryptionConfigurationFailureDescription.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details
