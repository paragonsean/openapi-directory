# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_record_input_record import PutRecordInputRecord
from openapi_server import util


class PutRecordInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_stream_name: str=None, record: PutRecordInputRecord=None):
        """PutRecordInput - a model defined in OpenAPI

        :param delivery_stream_name: The delivery_stream_name of this PutRecordInput.
        :param record: The record of this PutRecordInput.
        """
        self.openapi_types = {
            'delivery_stream_name': str,
            'record': PutRecordInputRecord
        }

        self.attribute_map = {
            'delivery_stream_name': 'DeliveryStreamName',
            'record': 'Record'
        }

        self._delivery_stream_name = delivery_stream_name
        self._record = record

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRecordInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRecordInput of this PutRecordInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_stream_name(self):
        """Gets the delivery_stream_name of this PutRecordInput.


        :return: The delivery_stream_name of this PutRecordInput.
        :rtype: str
        """
        return self._delivery_stream_name

    @delivery_stream_name.setter
    def delivery_stream_name(self, delivery_stream_name):
        """Sets the delivery_stream_name of this PutRecordInput.


        :param delivery_stream_name: The delivery_stream_name of this PutRecordInput.
        :type delivery_stream_name: str
        """
        if delivery_stream_name is None:
            raise ValueError("Invalid value for `delivery_stream_name`, must not be `None`")

        self._delivery_stream_name = delivery_stream_name

    @property
    def record(self):
        """Gets the record of this PutRecordInput.


        :return: The record of this PutRecordInput.
        :rtype: PutRecordInputRecord
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this PutRecordInput.


        :param record: The record of this PutRecordInput.
        :type record: PutRecordInputRecord
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")

        self._record = record
