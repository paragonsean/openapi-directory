# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpEndpointConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, url: str=None, name: str=None, access_key: str=None):
        """HttpEndpointConfiguration - a model defined in OpenAPI

        :param url: The url of this HttpEndpointConfiguration.
        :param name: The name of this HttpEndpointConfiguration.
        :param access_key: The access_key of this HttpEndpointConfiguration.
        """
        self.openapi_types = {
            'url': str,
            'name': str,
            'access_key': str
        }

        self.attribute_map = {
            'url': 'Url',
            'name': 'Name',
            'access_key': 'AccessKey'
        }

        self._url = url
        self._name = name
        self._access_key = access_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpEndpointConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpEndpointConfiguration of this HttpEndpointConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def url(self):
        """Gets the url of this HttpEndpointConfiguration.


        :return: The url of this HttpEndpointConfiguration.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HttpEndpointConfiguration.


        :param url: The url of this HttpEndpointConfiguration.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def name(self):
        """Gets the name of this HttpEndpointConfiguration.


        :return: The name of this HttpEndpointConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HttpEndpointConfiguration.


        :param name: The name of this HttpEndpointConfiguration.
        :type name: str
        """

        self._name = name

    @property
    def access_key(self):
        """Gets the access_key of this HttpEndpointConfiguration.


        :return: The access_key of this HttpEndpointConfiguration.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this HttpEndpointConfiguration.


        :param access_key: The access_key of this HttpEndpointConfiguration.
        :type access_key: str
        """

        self._access_key = access_key
