# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.orc_compression import OrcCompression
from openapi_server.models.orc_format_version import OrcFormatVersion
from openapi_server import util


class OrcSerDe(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stripe_size_bytes: int=None, block_size_bytes: int=None, row_index_stride: int=None, enable_padding: bool=None, padding_tolerance: float=None, compression: OrcCompression=None, bloom_filter_columns: List=None, bloom_filter_false_positive_probability: float=None, dictionary_key_threshold: float=None, format_version: OrcFormatVersion=None):
        """OrcSerDe - a model defined in OpenAPI

        :param stripe_size_bytes: The stripe_size_bytes of this OrcSerDe.
        :param block_size_bytes: The block_size_bytes of this OrcSerDe.
        :param row_index_stride: The row_index_stride of this OrcSerDe.
        :param enable_padding: The enable_padding of this OrcSerDe.
        :param padding_tolerance: The padding_tolerance of this OrcSerDe.
        :param compression: The compression of this OrcSerDe.
        :param bloom_filter_columns: The bloom_filter_columns of this OrcSerDe.
        :param bloom_filter_false_positive_probability: The bloom_filter_false_positive_probability of this OrcSerDe.
        :param dictionary_key_threshold: The dictionary_key_threshold of this OrcSerDe.
        :param format_version: The format_version of this OrcSerDe.
        """
        self.openapi_types = {
            'stripe_size_bytes': int,
            'block_size_bytes': int,
            'row_index_stride': int,
            'enable_padding': bool,
            'padding_tolerance': float,
            'compression': OrcCompression,
            'bloom_filter_columns': List,
            'bloom_filter_false_positive_probability': float,
            'dictionary_key_threshold': float,
            'format_version': OrcFormatVersion
        }

        self.attribute_map = {
            'stripe_size_bytes': 'StripeSizeBytes',
            'block_size_bytes': 'BlockSizeBytes',
            'row_index_stride': 'RowIndexStride',
            'enable_padding': 'EnablePadding',
            'padding_tolerance': 'PaddingTolerance',
            'compression': 'Compression',
            'bloom_filter_columns': 'BloomFilterColumns',
            'bloom_filter_false_positive_probability': 'BloomFilterFalsePositiveProbability',
            'dictionary_key_threshold': 'DictionaryKeyThreshold',
            'format_version': 'FormatVersion'
        }

        self._stripe_size_bytes = stripe_size_bytes
        self._block_size_bytes = block_size_bytes
        self._row_index_stride = row_index_stride
        self._enable_padding = enable_padding
        self._padding_tolerance = padding_tolerance
        self._compression = compression
        self._bloom_filter_columns = bloom_filter_columns
        self._bloom_filter_false_positive_probability = bloom_filter_false_positive_probability
        self._dictionary_key_threshold = dictionary_key_threshold
        self._format_version = format_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrcSerDe':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrcSerDe of this OrcSerDe.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stripe_size_bytes(self):
        """Gets the stripe_size_bytes of this OrcSerDe.


        :return: The stripe_size_bytes of this OrcSerDe.
        :rtype: int
        """
        return self._stripe_size_bytes

    @stripe_size_bytes.setter
    def stripe_size_bytes(self, stripe_size_bytes):
        """Sets the stripe_size_bytes of this OrcSerDe.


        :param stripe_size_bytes: The stripe_size_bytes of this OrcSerDe.
        :type stripe_size_bytes: int
        """

        self._stripe_size_bytes = stripe_size_bytes

    @property
    def block_size_bytes(self):
        """Gets the block_size_bytes of this OrcSerDe.


        :return: The block_size_bytes of this OrcSerDe.
        :rtype: int
        """
        return self._block_size_bytes

    @block_size_bytes.setter
    def block_size_bytes(self, block_size_bytes):
        """Sets the block_size_bytes of this OrcSerDe.


        :param block_size_bytes: The block_size_bytes of this OrcSerDe.
        :type block_size_bytes: int
        """

        self._block_size_bytes = block_size_bytes

    @property
    def row_index_stride(self):
        """Gets the row_index_stride of this OrcSerDe.


        :return: The row_index_stride of this OrcSerDe.
        :rtype: int
        """
        return self._row_index_stride

    @row_index_stride.setter
    def row_index_stride(self, row_index_stride):
        """Sets the row_index_stride of this OrcSerDe.


        :param row_index_stride: The row_index_stride of this OrcSerDe.
        :type row_index_stride: int
        """

        self._row_index_stride = row_index_stride

    @property
    def enable_padding(self):
        """Gets the enable_padding of this OrcSerDe.


        :return: The enable_padding of this OrcSerDe.
        :rtype: bool
        """
        return self._enable_padding

    @enable_padding.setter
    def enable_padding(self, enable_padding):
        """Sets the enable_padding of this OrcSerDe.


        :param enable_padding: The enable_padding of this OrcSerDe.
        :type enable_padding: bool
        """

        self._enable_padding = enable_padding

    @property
    def padding_tolerance(self):
        """Gets the padding_tolerance of this OrcSerDe.


        :return: The padding_tolerance of this OrcSerDe.
        :rtype: float
        """
        return self._padding_tolerance

    @padding_tolerance.setter
    def padding_tolerance(self, padding_tolerance):
        """Sets the padding_tolerance of this OrcSerDe.


        :param padding_tolerance: The padding_tolerance of this OrcSerDe.
        :type padding_tolerance: float
        """

        self._padding_tolerance = padding_tolerance

    @property
    def compression(self):
        """Gets the compression of this OrcSerDe.


        :return: The compression of this OrcSerDe.
        :rtype: OrcCompression
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this OrcSerDe.


        :param compression: The compression of this OrcSerDe.
        :type compression: OrcCompression
        """

        self._compression = compression

    @property
    def bloom_filter_columns(self):
        """Gets the bloom_filter_columns of this OrcSerDe.


        :return: The bloom_filter_columns of this OrcSerDe.
        :rtype: List
        """
        return self._bloom_filter_columns

    @bloom_filter_columns.setter
    def bloom_filter_columns(self, bloom_filter_columns):
        """Sets the bloom_filter_columns of this OrcSerDe.


        :param bloom_filter_columns: The bloom_filter_columns of this OrcSerDe.
        :type bloom_filter_columns: List
        """

        self._bloom_filter_columns = bloom_filter_columns

    @property
    def bloom_filter_false_positive_probability(self):
        """Gets the bloom_filter_false_positive_probability of this OrcSerDe.


        :return: The bloom_filter_false_positive_probability of this OrcSerDe.
        :rtype: float
        """
        return self._bloom_filter_false_positive_probability

    @bloom_filter_false_positive_probability.setter
    def bloom_filter_false_positive_probability(self, bloom_filter_false_positive_probability):
        """Sets the bloom_filter_false_positive_probability of this OrcSerDe.


        :param bloom_filter_false_positive_probability: The bloom_filter_false_positive_probability of this OrcSerDe.
        :type bloom_filter_false_positive_probability: float
        """

        self._bloom_filter_false_positive_probability = bloom_filter_false_positive_probability

    @property
    def dictionary_key_threshold(self):
        """Gets the dictionary_key_threshold of this OrcSerDe.


        :return: The dictionary_key_threshold of this OrcSerDe.
        :rtype: float
        """
        return self._dictionary_key_threshold

    @dictionary_key_threshold.setter
    def dictionary_key_threshold(self, dictionary_key_threshold):
        """Sets the dictionary_key_threshold of this OrcSerDe.


        :param dictionary_key_threshold: The dictionary_key_threshold of this OrcSerDe.
        :type dictionary_key_threshold: float
        """

        self._dictionary_key_threshold = dictionary_key_threshold

    @property
    def format_version(self):
        """Gets the format_version of this OrcSerDe.


        :return: The format_version of this OrcSerDe.
        :rtype: OrcFormatVersion
        """
        return self._format_version

    @format_version.setter
    def format_version(self, format_version):
        """Sets the format_version of this OrcSerDe.


        :param format_version: The format_version of this OrcSerDe.
        :type format_version: OrcFormatVersion
        """

        self._format_version = format_version
