# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.extended_s3_destination_configuration_processing_configuration import ExtendedS3DestinationConfigurationProcessingConfiguration
from openapi_server.models.hec_endpoint_type import HECEndpointType
from openapi_server.models.s3_destination_description_cloud_watch_logging_options import S3DestinationDescriptionCloudWatchLoggingOptions
from openapi_server.models.splunk_destination_description_retry_options import SplunkDestinationDescriptionRetryOptions
from openapi_server.models.splunk_destination_update_s3_update import SplunkDestinationUpdateS3Update
from openapi_server.models.splunk_s3_backup_mode import SplunkS3BackupMode
from openapi_server import util


class SplunkDestinationUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hec_endpoint: str=None, hec_endpoint_type: HECEndpointType=None, hec_token: str=None, hec_acknowledgment_timeout_in_seconds: int=None, retry_options: SplunkDestinationDescriptionRetryOptions=None, s3_backup_mode: SplunkS3BackupMode=None, s3_update: SplunkDestinationUpdateS3Update=None, processing_configuration: ExtendedS3DestinationConfigurationProcessingConfiguration=None, cloud_watch_logging_options: S3DestinationDescriptionCloudWatchLoggingOptions=None):
        """SplunkDestinationUpdate - a model defined in OpenAPI

        :param hec_endpoint: The hec_endpoint of this SplunkDestinationUpdate.
        :param hec_endpoint_type: The hec_endpoint_type of this SplunkDestinationUpdate.
        :param hec_token: The hec_token of this SplunkDestinationUpdate.
        :param hec_acknowledgment_timeout_in_seconds: The hec_acknowledgment_timeout_in_seconds of this SplunkDestinationUpdate.
        :param retry_options: The retry_options of this SplunkDestinationUpdate.
        :param s3_backup_mode: The s3_backup_mode of this SplunkDestinationUpdate.
        :param s3_update: The s3_update of this SplunkDestinationUpdate.
        :param processing_configuration: The processing_configuration of this SplunkDestinationUpdate.
        :param cloud_watch_logging_options: The cloud_watch_logging_options of this SplunkDestinationUpdate.
        """
        self.openapi_types = {
            'hec_endpoint': str,
            'hec_endpoint_type': HECEndpointType,
            'hec_token': str,
            'hec_acknowledgment_timeout_in_seconds': int,
            'retry_options': SplunkDestinationDescriptionRetryOptions,
            's3_backup_mode': SplunkS3BackupMode,
            's3_update': SplunkDestinationUpdateS3Update,
            'processing_configuration': ExtendedS3DestinationConfigurationProcessingConfiguration,
            'cloud_watch_logging_options': S3DestinationDescriptionCloudWatchLoggingOptions
        }

        self.attribute_map = {
            'hec_endpoint': 'HECEndpoint',
            'hec_endpoint_type': 'HECEndpointType',
            'hec_token': 'HECToken',
            'hec_acknowledgment_timeout_in_seconds': 'HECAcknowledgmentTimeoutInSeconds',
            'retry_options': 'RetryOptions',
            's3_backup_mode': 'S3BackupMode',
            's3_update': 'S3Update',
            'processing_configuration': 'ProcessingConfiguration',
            'cloud_watch_logging_options': 'CloudWatchLoggingOptions'
        }

        self._hec_endpoint = hec_endpoint
        self._hec_endpoint_type = hec_endpoint_type
        self._hec_token = hec_token
        self._hec_acknowledgment_timeout_in_seconds = hec_acknowledgment_timeout_in_seconds
        self._retry_options = retry_options
        self._s3_backup_mode = s3_backup_mode
        self._s3_update = s3_update
        self._processing_configuration = processing_configuration
        self._cloud_watch_logging_options = cloud_watch_logging_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SplunkDestinationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SplunkDestinationUpdate of this SplunkDestinationUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hec_endpoint(self):
        """Gets the hec_endpoint of this SplunkDestinationUpdate.


        :return: The hec_endpoint of this SplunkDestinationUpdate.
        :rtype: str
        """
        return self._hec_endpoint

    @hec_endpoint.setter
    def hec_endpoint(self, hec_endpoint):
        """Sets the hec_endpoint of this SplunkDestinationUpdate.


        :param hec_endpoint: The hec_endpoint of this SplunkDestinationUpdate.
        :type hec_endpoint: str
        """

        self._hec_endpoint = hec_endpoint

    @property
    def hec_endpoint_type(self):
        """Gets the hec_endpoint_type of this SplunkDestinationUpdate.


        :return: The hec_endpoint_type of this SplunkDestinationUpdate.
        :rtype: HECEndpointType
        """
        return self._hec_endpoint_type

    @hec_endpoint_type.setter
    def hec_endpoint_type(self, hec_endpoint_type):
        """Sets the hec_endpoint_type of this SplunkDestinationUpdate.


        :param hec_endpoint_type: The hec_endpoint_type of this SplunkDestinationUpdate.
        :type hec_endpoint_type: HECEndpointType
        """

        self._hec_endpoint_type = hec_endpoint_type

    @property
    def hec_token(self):
        """Gets the hec_token of this SplunkDestinationUpdate.


        :return: The hec_token of this SplunkDestinationUpdate.
        :rtype: str
        """
        return self._hec_token

    @hec_token.setter
    def hec_token(self, hec_token):
        """Sets the hec_token of this SplunkDestinationUpdate.


        :param hec_token: The hec_token of this SplunkDestinationUpdate.
        :type hec_token: str
        """

        self._hec_token = hec_token

    @property
    def hec_acknowledgment_timeout_in_seconds(self):
        """Gets the hec_acknowledgment_timeout_in_seconds of this SplunkDestinationUpdate.


        :return: The hec_acknowledgment_timeout_in_seconds of this SplunkDestinationUpdate.
        :rtype: int
        """
        return self._hec_acknowledgment_timeout_in_seconds

    @hec_acknowledgment_timeout_in_seconds.setter
    def hec_acknowledgment_timeout_in_seconds(self, hec_acknowledgment_timeout_in_seconds):
        """Sets the hec_acknowledgment_timeout_in_seconds of this SplunkDestinationUpdate.


        :param hec_acknowledgment_timeout_in_seconds: The hec_acknowledgment_timeout_in_seconds of this SplunkDestinationUpdate.
        :type hec_acknowledgment_timeout_in_seconds: int
        """

        self._hec_acknowledgment_timeout_in_seconds = hec_acknowledgment_timeout_in_seconds

    @property
    def retry_options(self):
        """Gets the retry_options of this SplunkDestinationUpdate.


        :return: The retry_options of this SplunkDestinationUpdate.
        :rtype: SplunkDestinationDescriptionRetryOptions
        """
        return self._retry_options

    @retry_options.setter
    def retry_options(self, retry_options):
        """Sets the retry_options of this SplunkDestinationUpdate.


        :param retry_options: The retry_options of this SplunkDestinationUpdate.
        :type retry_options: SplunkDestinationDescriptionRetryOptions
        """

        self._retry_options = retry_options

    @property
    def s3_backup_mode(self):
        """Gets the s3_backup_mode of this SplunkDestinationUpdate.


        :return: The s3_backup_mode of this SplunkDestinationUpdate.
        :rtype: SplunkS3BackupMode
        """
        return self._s3_backup_mode

    @s3_backup_mode.setter
    def s3_backup_mode(self, s3_backup_mode):
        """Sets the s3_backup_mode of this SplunkDestinationUpdate.


        :param s3_backup_mode: The s3_backup_mode of this SplunkDestinationUpdate.
        :type s3_backup_mode: SplunkS3BackupMode
        """

        self._s3_backup_mode = s3_backup_mode

    @property
    def s3_update(self):
        """Gets the s3_update of this SplunkDestinationUpdate.


        :return: The s3_update of this SplunkDestinationUpdate.
        :rtype: SplunkDestinationUpdateS3Update
        """
        return self._s3_update

    @s3_update.setter
    def s3_update(self, s3_update):
        """Sets the s3_update of this SplunkDestinationUpdate.


        :param s3_update: The s3_update of this SplunkDestinationUpdate.
        :type s3_update: SplunkDestinationUpdateS3Update
        """

        self._s3_update = s3_update

    @property
    def processing_configuration(self):
        """Gets the processing_configuration of this SplunkDestinationUpdate.


        :return: The processing_configuration of this SplunkDestinationUpdate.
        :rtype: ExtendedS3DestinationConfigurationProcessingConfiguration
        """
        return self._processing_configuration

    @processing_configuration.setter
    def processing_configuration(self, processing_configuration):
        """Sets the processing_configuration of this SplunkDestinationUpdate.


        :param processing_configuration: The processing_configuration of this SplunkDestinationUpdate.
        :type processing_configuration: ExtendedS3DestinationConfigurationProcessingConfiguration
        """

        self._processing_configuration = processing_configuration

    @property
    def cloud_watch_logging_options(self):
        """Gets the cloud_watch_logging_options of this SplunkDestinationUpdate.


        :return: The cloud_watch_logging_options of this SplunkDestinationUpdate.
        :rtype: S3DestinationDescriptionCloudWatchLoggingOptions
        """
        return self._cloud_watch_logging_options

    @cloud_watch_logging_options.setter
    def cloud_watch_logging_options(self, cloud_watch_logging_options):
        """Sets the cloud_watch_logging_options of this SplunkDestinationUpdate.


        :param cloud_watch_logging_options: The cloud_watch_logging_options of this SplunkDestinationUpdate.
        :type cloud_watch_logging_options: S3DestinationDescriptionCloudWatchLoggingOptions
        """

        self._cloud_watch_logging_options = cloud_watch_logging_options
