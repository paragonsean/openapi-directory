# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutRecordOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record_id: str=None, encrypted: bool=None):
        """PutRecordOutput - a model defined in OpenAPI

        :param record_id: The record_id of this PutRecordOutput.
        :param encrypted: The encrypted of this PutRecordOutput.
        """
        self.openapi_types = {
            'record_id': str,
            'encrypted': bool
        }

        self.attribute_map = {
            'record_id': 'RecordId',
            'encrypted': 'Encrypted'
        }

        self._record_id = record_id
        self._encrypted = encrypted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRecordOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRecordOutput of this PutRecordOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record_id(self):
        """Gets the record_id of this PutRecordOutput.


        :return: The record_id of this PutRecordOutput.
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this PutRecordOutput.


        :param record_id: The record_id of this PutRecordOutput.
        :type record_id: str
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")

        self._record_id = record_id

    @property
    def encrypted(self):
        """Gets the encrypted of this PutRecordOutput.


        :return: The encrypted of this PutRecordOutput.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this PutRecordOutput.


        :param encrypted: The encrypted of this PutRecordOutput.
        :type encrypted: bool
        """

        self._encrypted = encrypted
