/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SchemaConfiguration from './SchemaConfiguration';

/**
 * The DataFormatConversionConfigurationSchemaConfiguration model module.
 * @module model/DataFormatConversionConfigurationSchemaConfiguration
 * @version 2015-08-04
 */
class DataFormatConversionConfigurationSchemaConfiguration {
    /**
     * Constructs a new <code>DataFormatConversionConfigurationSchemaConfiguration</code>.
     * @alias module:model/DataFormatConversionConfigurationSchemaConfiguration
     * @implements module:model/SchemaConfiguration
     */
    constructor() { 
        SchemaConfiguration.initialize(this);
        DataFormatConversionConfigurationSchemaConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataFormatConversionConfigurationSchemaConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFormatConversionConfigurationSchemaConfiguration} obj Optional instance to populate.
     * @return {module:model/DataFormatConversionConfigurationSchemaConfiguration} The populated <code>DataFormatConversionConfigurationSchemaConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFormatConversionConfigurationSchemaConfiguration();
            SchemaConfiguration.constructFromObject(data, obj);

            if (data.hasOwnProperty('RoleARN')) {
                obj['RoleARN'] = ApiClient.convertToType(data['RoleARN'], 'String');
            }
            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('Region')) {
                obj['Region'] = ApiClient.convertToType(data['Region'], 'String');
            }
            if (data.hasOwnProperty('VersionId')) {
                obj['VersionId'] = ApiClient.convertToType(data['VersionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataFormatConversionConfigurationSchemaConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataFormatConversionConfigurationSchemaConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `RoleARN`
        if (data['RoleARN']) { // data not null
          String.validateJSON(data['RoleARN']);
        }
        // validate the optional field `CatalogId`
        if (data['CatalogId']) { // data not null
          String.validateJSON(data['CatalogId']);
        }
        // validate the optional field `DatabaseName`
        if (data['DatabaseName']) { // data not null
          String.validateJSON(data['DatabaseName']);
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `Region`
        if (data['Region']) { // data not null
          String.validateJSON(data['Region']);
        }
        // validate the optional field `VersionId`
        if (data['VersionId']) { // data not null
          String.validateJSON(data['VersionId']);
        }

        return true;
    }


}



/**
 * @member {String} RoleARN
 */
DataFormatConversionConfigurationSchemaConfiguration.prototype['RoleARN'] = undefined;

/**
 * @member {String} CatalogId
 */
DataFormatConversionConfigurationSchemaConfiguration.prototype['CatalogId'] = undefined;

/**
 * @member {String} DatabaseName
 */
DataFormatConversionConfigurationSchemaConfiguration.prototype['DatabaseName'] = undefined;

/**
 * @member {String} TableName
 */
DataFormatConversionConfigurationSchemaConfiguration.prototype['TableName'] = undefined;

/**
 * @member {String} Region
 */
DataFormatConversionConfigurationSchemaConfiguration.prototype['Region'] = undefined;

/**
 * @member {String} VersionId
 */
DataFormatConversionConfigurationSchemaConfiguration.prototype['VersionId'] = undefined;


// Implement SchemaConfiguration interface:
/**
 * @member {String} RoleARN
 */
SchemaConfiguration.prototype['RoleARN'] = undefined;
/**
 * @member {String} CatalogId
 */
SchemaConfiguration.prototype['CatalogId'] = undefined;
/**
 * @member {String} DatabaseName
 */
SchemaConfiguration.prototype['DatabaseName'] = undefined;
/**
 * @member {String} TableName
 */
SchemaConfiguration.prototype['TableName'] = undefined;
/**
 * @member {String} Region
 */
SchemaConfiguration.prototype['Region'] = undefined;
/**
 * @member {String} VersionId
 */
SchemaConfiguration.prototype['VersionId'] = undefined;




export default DataFormatConversionConfigurationSchemaConfiguration;

