/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataFormatConversionConfigurationInputFormatConfiguration from './DataFormatConversionConfigurationInputFormatConfiguration';
import DataFormatConversionConfigurationOutputFormatConfiguration from './DataFormatConversionConfigurationOutputFormatConfiguration';
import DataFormatConversionConfigurationSchemaConfiguration from './DataFormatConversionConfigurationSchemaConfiguration';

/**
 * The DataFormatConversionConfiguration model module.
 * @module model/DataFormatConversionConfiguration
 * @version 2015-08-04
 */
class DataFormatConversionConfiguration {
    /**
     * Constructs a new <code>DataFormatConversionConfiguration</code>.
     * Specifies that you want Kinesis Data Firehose to convert data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. Kinesis Data Firehose uses the serializer and deserializer that you specify, in addition to the column information from the Amazon Web Services Glue table, to deserialize your input data from JSON and then serialize it to the Parquet or ORC format. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html\&quot;&gt;Kinesis Data Firehose Record Format Conversion&lt;/a&gt;.
     * @alias module:model/DataFormatConversionConfiguration
     */
    constructor() { 
        
        DataFormatConversionConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataFormatConversionConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataFormatConversionConfiguration} obj Optional instance to populate.
     * @return {module:model/DataFormatConversionConfiguration} The populated <code>DataFormatConversionConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataFormatConversionConfiguration();

            if (data.hasOwnProperty('SchemaConfiguration')) {
                obj['SchemaConfiguration'] = DataFormatConversionConfigurationSchemaConfiguration.constructFromObject(data['SchemaConfiguration']);
            }
            if (data.hasOwnProperty('InputFormatConfiguration')) {
                obj['InputFormatConfiguration'] = DataFormatConversionConfigurationInputFormatConfiguration.constructFromObject(data['InputFormatConfiguration']);
            }
            if (data.hasOwnProperty('OutputFormatConfiguration')) {
                obj['OutputFormatConfiguration'] = DataFormatConversionConfigurationOutputFormatConfiguration.constructFromObject(data['OutputFormatConfiguration']);
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataFormatConversionConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataFormatConversionConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `SchemaConfiguration`
        if (data['SchemaConfiguration']) { // data not null
          DataFormatConversionConfigurationSchemaConfiguration.validateJSON(data['SchemaConfiguration']);
        }
        // validate the optional field `InputFormatConfiguration`
        if (data['InputFormatConfiguration']) { // data not null
          DataFormatConversionConfigurationInputFormatConfiguration.validateJSON(data['InputFormatConfiguration']);
        }
        // validate the optional field `OutputFormatConfiguration`
        if (data['OutputFormatConfiguration']) { // data not null
          DataFormatConversionConfigurationOutputFormatConfiguration.validateJSON(data['OutputFormatConfiguration']);
        }
        // validate the optional field `Enabled`
        if (data['Enabled']) { // data not null
          Boolean.validateJSON(data['Enabled']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataFormatConversionConfigurationSchemaConfiguration} SchemaConfiguration
 */
DataFormatConversionConfiguration.prototype['SchemaConfiguration'] = undefined;

/**
 * @member {module:model/DataFormatConversionConfigurationInputFormatConfiguration} InputFormatConfiguration
 */
DataFormatConversionConfiguration.prototype['InputFormatConfiguration'] = undefined;

/**
 * @member {module:model/DataFormatConversionConfigurationOutputFormatConfiguration} OutputFormatConfiguration
 */
DataFormatConversionConfiguration.prototype['OutputFormatConfiguration'] = undefined;

/**
 * @member {Boolean} Enabled
 */
DataFormatConversionConfiguration.prototype['Enabled'] = undefined;






export default DataFormatConversionConfiguration;

