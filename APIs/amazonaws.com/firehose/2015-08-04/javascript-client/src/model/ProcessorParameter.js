/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProcessorParameterName from './ProcessorParameterName';

/**
 * The ProcessorParameter model module.
 * @module model/ProcessorParameter
 * @version 2015-08-04
 */
class ProcessorParameter {
    /**
     * Constructs a new <code>ProcessorParameter</code>.
     * Describes the processor parameter. 
     * @alias module:model/ProcessorParameter
     * @param parameterName {module:model/ProcessorParameterName} 
     * @param parameterValue {String} 
     */
    constructor(parameterName, parameterValue) { 
        
        ProcessorParameter.initialize(this, parameterName, parameterValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, parameterName, parameterValue) { 
        obj['ParameterName'] = parameterName;
        obj['ParameterValue'] = parameterValue;
    }

    /**
     * Constructs a <code>ProcessorParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProcessorParameter} obj Optional instance to populate.
     * @return {module:model/ProcessorParameter} The populated <code>ProcessorParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProcessorParameter();

            if (data.hasOwnProperty('ParameterName')) {
                obj['ParameterName'] = ApiClient.convertToType(data['ParameterName'], ProcessorParameterName);
            }
            if (data.hasOwnProperty('ParameterValue')) {
                obj['ParameterValue'] = ApiClient.convertToType(data['ParameterValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProcessorParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProcessorParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProcessorParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ParameterName`
        if (data['ParameterName']) { // data not null
          ProcessorParameterName.validateJSON(data['ParameterName']);
        }
        // validate the optional field `ParameterValue`
        if (data['ParameterValue']) { // data not null
          String.validateJSON(data['ParameterValue']);
        }

        return true;
    }


}

ProcessorParameter.RequiredProperties = ["ParameterName", "ParameterValue"];

/**
 * @member {module:model/ProcessorParameterName} ParameterName
 */
ProcessorParameter.prototype['ParameterName'] = undefined;

/**
 * @member {String} ParameterValue
 */
ProcessorParameter.prototype['ParameterValue'] = undefined;






export default ProcessorParameter;

