/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedS3DestinationConfigurationProcessingConfiguration from './ExtendedS3DestinationConfigurationProcessingConfiguration';
import HECEndpointType from './HECEndpointType';
import S3DestinationDescriptionCloudWatchLoggingOptions from './S3DestinationDescriptionCloudWatchLoggingOptions';
import SplunkDestinationDescriptionRetryOptions from './SplunkDestinationDescriptionRetryOptions';
import SplunkDestinationUpdateS3Update from './SplunkDestinationUpdateS3Update';
import SplunkS3BackupMode from './SplunkS3BackupMode';

/**
 * The SplunkDestinationUpdate model module.
 * @module model/SplunkDestinationUpdate
 * @version 2015-08-04
 */
class SplunkDestinationUpdate {
    /**
     * Constructs a new <code>SplunkDestinationUpdate</code>.
     * Describes an update for a destination in Splunk.
     * @alias module:model/SplunkDestinationUpdate
     */
    constructor() { 
        
        SplunkDestinationUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SplunkDestinationUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SplunkDestinationUpdate} obj Optional instance to populate.
     * @return {module:model/SplunkDestinationUpdate} The populated <code>SplunkDestinationUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SplunkDestinationUpdate();

            if (data.hasOwnProperty('HECEndpoint')) {
                obj['HECEndpoint'] = ApiClient.convertToType(data['HECEndpoint'], 'String');
            }
            if (data.hasOwnProperty('HECEndpointType')) {
                obj['HECEndpointType'] = ApiClient.convertToType(data['HECEndpointType'], HECEndpointType);
            }
            if (data.hasOwnProperty('HECToken')) {
                obj['HECToken'] = ApiClient.convertToType(data['HECToken'], 'String');
            }
            if (data.hasOwnProperty('HECAcknowledgmentTimeoutInSeconds')) {
                obj['HECAcknowledgmentTimeoutInSeconds'] = ApiClient.convertToType(data['HECAcknowledgmentTimeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('RetryOptions')) {
                obj['RetryOptions'] = SplunkDestinationDescriptionRetryOptions.constructFromObject(data['RetryOptions']);
            }
            if (data.hasOwnProperty('S3BackupMode')) {
                obj['S3BackupMode'] = ApiClient.convertToType(data['S3BackupMode'], SplunkS3BackupMode);
            }
            if (data.hasOwnProperty('S3Update')) {
                obj['S3Update'] = SplunkDestinationUpdateS3Update.constructFromObject(data['S3Update']);
            }
            if (data.hasOwnProperty('ProcessingConfiguration')) {
                obj['ProcessingConfiguration'] = ExtendedS3DestinationConfigurationProcessingConfiguration.constructFromObject(data['ProcessingConfiguration']);
            }
            if (data.hasOwnProperty('CloudWatchLoggingOptions')) {
                obj['CloudWatchLoggingOptions'] = S3DestinationDescriptionCloudWatchLoggingOptions.constructFromObject(data['CloudWatchLoggingOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SplunkDestinationUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SplunkDestinationUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `HECEndpoint`
        if (data['HECEndpoint']) { // data not null
          String.validateJSON(data['HECEndpoint']);
        }
        // validate the optional field `HECEndpointType`
        if (data['HECEndpointType']) { // data not null
          HECEndpointType.validateJSON(data['HECEndpointType']);
        }
        // validate the optional field `HECToken`
        if (data['HECToken']) { // data not null
          String.validateJSON(data['HECToken']);
        }
        // validate the optional field `HECAcknowledgmentTimeoutInSeconds`
        if (data['HECAcknowledgmentTimeoutInSeconds']) { // data not null
          Number.validateJSON(data['HECAcknowledgmentTimeoutInSeconds']);
        }
        // validate the optional field `RetryOptions`
        if (data['RetryOptions']) { // data not null
          SplunkDestinationDescriptionRetryOptions.validateJSON(data['RetryOptions']);
        }
        // validate the optional field `S3BackupMode`
        if (data['S3BackupMode']) { // data not null
          SplunkS3BackupMode.validateJSON(data['S3BackupMode']);
        }
        // validate the optional field `S3Update`
        if (data['S3Update']) { // data not null
          SplunkDestinationUpdateS3Update.validateJSON(data['S3Update']);
        }
        // validate the optional field `ProcessingConfiguration`
        if (data['ProcessingConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationProcessingConfiguration.validateJSON(data['ProcessingConfiguration']);
        }
        // validate the optional field `CloudWatchLoggingOptions`
        if (data['CloudWatchLoggingOptions']) { // data not null
          S3DestinationDescriptionCloudWatchLoggingOptions.validateJSON(data['CloudWatchLoggingOptions']);
        }

        return true;
    }


}



/**
 * @member {String} HECEndpoint
 */
SplunkDestinationUpdate.prototype['HECEndpoint'] = undefined;

/**
 * @member {module:model/HECEndpointType} HECEndpointType
 */
SplunkDestinationUpdate.prototype['HECEndpointType'] = undefined;

/**
 * @member {String} HECToken
 */
SplunkDestinationUpdate.prototype['HECToken'] = undefined;

/**
 * @member {Number} HECAcknowledgmentTimeoutInSeconds
 */
SplunkDestinationUpdate.prototype['HECAcknowledgmentTimeoutInSeconds'] = undefined;

/**
 * @member {module:model/SplunkDestinationDescriptionRetryOptions} RetryOptions
 */
SplunkDestinationUpdate.prototype['RetryOptions'] = undefined;

/**
 * @member {module:model/SplunkS3BackupMode} S3BackupMode
 */
SplunkDestinationUpdate.prototype['S3BackupMode'] = undefined;

/**
 * @member {module:model/SplunkDestinationUpdateS3Update} S3Update
 */
SplunkDestinationUpdate.prototype['S3Update'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationProcessingConfiguration} ProcessingConfiguration
 */
SplunkDestinationUpdate.prototype['ProcessingConfiguration'] = undefined;

/**
 * @member {module:model/S3DestinationDescriptionCloudWatchLoggingOptions} CloudWatchLoggingOptions
 */
SplunkDestinationUpdate.prototype['CloudWatchLoggingOptions'] = undefined;






export default SplunkDestinationUpdate;

