/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedS3DestinationConfigurationProcessingConfiguration from './ExtendedS3DestinationConfigurationProcessingConfiguration';
import ExtendedS3DestinationUpdateS3BackupUpdate from './ExtendedS3DestinationUpdateS3BackupUpdate';
import RedshiftDestinationConfigurationCopyCommand from './RedshiftDestinationConfigurationCopyCommand';
import RedshiftDestinationConfigurationRetryOptions from './RedshiftDestinationConfigurationRetryOptions';
import RedshiftDestinationUpdate from './RedshiftDestinationUpdate';
import RedshiftDestinationUpdateS3Update from './RedshiftDestinationUpdateS3Update';
import RedshiftS3BackupMode from './RedshiftS3BackupMode';
import S3DestinationDescriptionCloudWatchLoggingOptions from './S3DestinationDescriptionCloudWatchLoggingOptions';

/**
 * The UpdateDestinationInputRedshiftDestinationUpdate model module.
 * @module model/UpdateDestinationInputRedshiftDestinationUpdate
 * @version 2015-08-04
 */
class UpdateDestinationInputRedshiftDestinationUpdate {
    /**
     * Constructs a new <code>UpdateDestinationInputRedshiftDestinationUpdate</code>.
     * @alias module:model/UpdateDestinationInputRedshiftDestinationUpdate
     * @implements module:model/RedshiftDestinationUpdate
     */
    constructor() { 
        RedshiftDestinationUpdate.initialize(this);
        UpdateDestinationInputRedshiftDestinationUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateDestinationInputRedshiftDestinationUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDestinationInputRedshiftDestinationUpdate} obj Optional instance to populate.
     * @return {module:model/UpdateDestinationInputRedshiftDestinationUpdate} The populated <code>UpdateDestinationInputRedshiftDestinationUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDestinationInputRedshiftDestinationUpdate();
            RedshiftDestinationUpdate.constructFromObject(data, obj);

            if (data.hasOwnProperty('RoleARN')) {
                obj['RoleARN'] = ApiClient.convertToType(data['RoleARN'], 'String');
            }
            if (data.hasOwnProperty('ClusterJDBCURL')) {
                obj['ClusterJDBCURL'] = ApiClient.convertToType(data['ClusterJDBCURL'], 'String');
            }
            if (data.hasOwnProperty('CopyCommand')) {
                obj['CopyCommand'] = RedshiftDestinationConfigurationCopyCommand.constructFromObject(data['CopyCommand']);
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('RetryOptions')) {
                obj['RetryOptions'] = RedshiftDestinationConfigurationRetryOptions.constructFromObject(data['RetryOptions']);
            }
            if (data.hasOwnProperty('S3Update')) {
                obj['S3Update'] = RedshiftDestinationUpdateS3Update.constructFromObject(data['S3Update']);
            }
            if (data.hasOwnProperty('ProcessingConfiguration')) {
                obj['ProcessingConfiguration'] = ExtendedS3DestinationConfigurationProcessingConfiguration.constructFromObject(data['ProcessingConfiguration']);
            }
            if (data.hasOwnProperty('S3BackupMode')) {
                obj['S3BackupMode'] = ApiClient.convertToType(data['S3BackupMode'], RedshiftS3BackupMode);
            }
            if (data.hasOwnProperty('S3BackupUpdate')) {
                obj['S3BackupUpdate'] = ExtendedS3DestinationUpdateS3BackupUpdate.constructFromObject(data['S3BackupUpdate']);
            }
            if (data.hasOwnProperty('CloudWatchLoggingOptions')) {
                obj['CloudWatchLoggingOptions'] = S3DestinationDescriptionCloudWatchLoggingOptions.constructFromObject(data['CloudWatchLoggingOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDestinationInputRedshiftDestinationUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDestinationInputRedshiftDestinationUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `RoleARN`
        if (data['RoleARN']) { // data not null
          String.validateJSON(data['RoleARN']);
        }
        // validate the optional field `ClusterJDBCURL`
        if (data['ClusterJDBCURL']) { // data not null
          String.validateJSON(data['ClusterJDBCURL']);
        }
        // validate the optional field `CopyCommand`
        if (data['CopyCommand']) { // data not null
          RedshiftDestinationConfigurationCopyCommand.validateJSON(data['CopyCommand']);
        }
        // validate the optional field `Username`
        if (data['Username']) { // data not null
          String.validateJSON(data['Username']);
        }
        // validate the optional field `Password`
        if (data['Password']) { // data not null
          String.validateJSON(data['Password']);
        }
        // validate the optional field `RetryOptions`
        if (data['RetryOptions']) { // data not null
          RedshiftDestinationConfigurationRetryOptions.validateJSON(data['RetryOptions']);
        }
        // validate the optional field `S3Update`
        if (data['S3Update']) { // data not null
          RedshiftDestinationUpdateS3Update.validateJSON(data['S3Update']);
        }
        // validate the optional field `ProcessingConfiguration`
        if (data['ProcessingConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationProcessingConfiguration.validateJSON(data['ProcessingConfiguration']);
        }
        // validate the optional field `S3BackupMode`
        if (data['S3BackupMode']) { // data not null
          RedshiftS3BackupMode.validateJSON(data['S3BackupMode']);
        }
        // validate the optional field `S3BackupUpdate`
        if (data['S3BackupUpdate']) { // data not null
          ExtendedS3DestinationUpdateS3BackupUpdate.validateJSON(data['S3BackupUpdate']);
        }
        // validate the optional field `CloudWatchLoggingOptions`
        if (data['CloudWatchLoggingOptions']) { // data not null
          S3DestinationDescriptionCloudWatchLoggingOptions.validateJSON(data['CloudWatchLoggingOptions']);
        }

        return true;
    }


}



/**
 * @member {String} RoleARN
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['RoleARN'] = undefined;

/**
 * @member {String} ClusterJDBCURL
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['ClusterJDBCURL'] = undefined;

/**
 * @member {module:model/RedshiftDestinationConfigurationCopyCommand} CopyCommand
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['CopyCommand'] = undefined;

/**
 * @member {String} Username
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['Username'] = undefined;

/**
 * @member {String} Password
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['Password'] = undefined;

/**
 * @member {module:model/RedshiftDestinationConfigurationRetryOptions} RetryOptions
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['RetryOptions'] = undefined;

/**
 * @member {module:model/RedshiftDestinationUpdateS3Update} S3Update
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['S3Update'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationProcessingConfiguration} ProcessingConfiguration
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['ProcessingConfiguration'] = undefined;

/**
 * @member {module:model/RedshiftS3BackupMode} S3BackupMode
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['S3BackupMode'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationUpdateS3BackupUpdate} S3BackupUpdate
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['S3BackupUpdate'] = undefined;

/**
 * @member {module:model/S3DestinationDescriptionCloudWatchLoggingOptions} CloudWatchLoggingOptions
 */
UpdateDestinationInputRedshiftDestinationUpdate.prototype['CloudWatchLoggingOptions'] = undefined;


// Implement RedshiftDestinationUpdate interface:
/**
 * @member {String} RoleARN
 */
RedshiftDestinationUpdate.prototype['RoleARN'] = undefined;
/**
 * @member {String} ClusterJDBCURL
 */
RedshiftDestinationUpdate.prototype['ClusterJDBCURL'] = undefined;
/**
 * @member {module:model/RedshiftDestinationConfigurationCopyCommand} CopyCommand
 */
RedshiftDestinationUpdate.prototype['CopyCommand'] = undefined;
/**
 * @member {String} Username
 */
RedshiftDestinationUpdate.prototype['Username'] = undefined;
/**
 * @member {String} Password
 */
RedshiftDestinationUpdate.prototype['Password'] = undefined;
/**
 * @member {module:model/RedshiftDestinationConfigurationRetryOptions} RetryOptions
 */
RedshiftDestinationUpdate.prototype['RetryOptions'] = undefined;
/**
 * @member {module:model/RedshiftDestinationUpdateS3Update} S3Update
 */
RedshiftDestinationUpdate.prototype['S3Update'] = undefined;
/**
 * @member {module:model/ExtendedS3DestinationConfigurationProcessingConfiguration} ProcessingConfiguration
 */
RedshiftDestinationUpdate.prototype['ProcessingConfiguration'] = undefined;
/**
 * @member {module:model/RedshiftS3BackupMode} S3BackupMode
 */
RedshiftDestinationUpdate.prototype['S3BackupMode'] = undefined;
/**
 * @member {module:model/ExtendedS3DestinationUpdateS3BackupUpdate} S3BackupUpdate
 */
RedshiftDestinationUpdate.prototype['S3BackupUpdate'] = undefined;
/**
 * @member {module:model/S3DestinationDescriptionCloudWatchLoggingOptions} CloudWatchLoggingOptions
 */
RedshiftDestinationUpdate.prototype['CloudWatchLoggingOptions'] = undefined;




export default UpdateDestinationInputRedshiftDestinationUpdate;

