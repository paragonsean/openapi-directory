/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtendedS3DestinationConfigurationProcessingConfiguration from './ExtendedS3DestinationConfigurationProcessingConfiguration';
import ExtendedS3DestinationDescriptionS3BackupDescription from './ExtendedS3DestinationDescriptionS3BackupDescription';
import RedshiftDestinationConfigurationCopyCommand from './RedshiftDestinationConfigurationCopyCommand';
import RedshiftDestinationConfigurationRetryOptions from './RedshiftDestinationConfigurationRetryOptions';
import RedshiftDestinationDescriptionS3DestinationDescription from './RedshiftDestinationDescriptionS3DestinationDescription';
import RedshiftS3BackupMode from './RedshiftS3BackupMode';
import S3DestinationDescriptionCloudWatchLoggingOptions from './S3DestinationDescriptionCloudWatchLoggingOptions';

/**
 * The RedshiftDestinationDescription model module.
 * @module model/RedshiftDestinationDescription
 * @version 2015-08-04
 */
class RedshiftDestinationDescription {
    /**
     * Constructs a new <code>RedshiftDestinationDescription</code>.
     * Describes a destination in Amazon Redshift.
     * @alias module:model/RedshiftDestinationDescription
     * @param roleARN {String} 
     * @param clusterJDBCURL {String} 
     * @param copyCommand {module:model/RedshiftDestinationConfigurationCopyCommand} 
     * @param username {String} 
     * @param s3DestinationDescription {module:model/RedshiftDestinationDescriptionS3DestinationDescription} 
     */
    constructor(roleARN, clusterJDBCURL, copyCommand, username, s3DestinationDescription) { 
        
        RedshiftDestinationDescription.initialize(this, roleARN, clusterJDBCURL, copyCommand, username, s3DestinationDescription);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roleARN, clusterJDBCURL, copyCommand, username, s3DestinationDescription) { 
        obj['RoleARN'] = roleARN;
        obj['ClusterJDBCURL'] = clusterJDBCURL;
        obj['CopyCommand'] = copyCommand;
        obj['Username'] = username;
        obj['S3DestinationDescription'] = s3DestinationDescription;
    }

    /**
     * Constructs a <code>RedshiftDestinationDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedshiftDestinationDescription} obj Optional instance to populate.
     * @return {module:model/RedshiftDestinationDescription} The populated <code>RedshiftDestinationDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedshiftDestinationDescription();

            if (data.hasOwnProperty('RoleARN')) {
                obj['RoleARN'] = ApiClient.convertToType(data['RoleARN'], 'String');
            }
            if (data.hasOwnProperty('ClusterJDBCURL')) {
                obj['ClusterJDBCURL'] = ApiClient.convertToType(data['ClusterJDBCURL'], 'String');
            }
            if (data.hasOwnProperty('CopyCommand')) {
                obj['CopyCommand'] = RedshiftDestinationConfigurationCopyCommand.constructFromObject(data['CopyCommand']);
            }
            if (data.hasOwnProperty('Username')) {
                obj['Username'] = ApiClient.convertToType(data['Username'], 'String');
            }
            if (data.hasOwnProperty('RetryOptions')) {
                obj['RetryOptions'] = RedshiftDestinationConfigurationRetryOptions.constructFromObject(data['RetryOptions']);
            }
            if (data.hasOwnProperty('S3DestinationDescription')) {
                obj['S3DestinationDescription'] = RedshiftDestinationDescriptionS3DestinationDescription.constructFromObject(data['S3DestinationDescription']);
            }
            if (data.hasOwnProperty('ProcessingConfiguration')) {
                obj['ProcessingConfiguration'] = ExtendedS3DestinationConfigurationProcessingConfiguration.constructFromObject(data['ProcessingConfiguration']);
            }
            if (data.hasOwnProperty('S3BackupMode')) {
                obj['S3BackupMode'] = ApiClient.convertToType(data['S3BackupMode'], RedshiftS3BackupMode);
            }
            if (data.hasOwnProperty('S3BackupDescription')) {
                obj['S3BackupDescription'] = ExtendedS3DestinationDescriptionS3BackupDescription.constructFromObject(data['S3BackupDescription']);
            }
            if (data.hasOwnProperty('CloudWatchLoggingOptions')) {
                obj['CloudWatchLoggingOptions'] = S3DestinationDescriptionCloudWatchLoggingOptions.constructFromObject(data['CloudWatchLoggingOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedshiftDestinationDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedshiftDestinationDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedshiftDestinationDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `RoleARN`
        if (data['RoleARN']) { // data not null
          String.validateJSON(data['RoleARN']);
        }
        // validate the optional field `ClusterJDBCURL`
        if (data['ClusterJDBCURL']) { // data not null
          String.validateJSON(data['ClusterJDBCURL']);
        }
        // validate the optional field `CopyCommand`
        if (data['CopyCommand']) { // data not null
          RedshiftDestinationConfigurationCopyCommand.validateJSON(data['CopyCommand']);
        }
        // validate the optional field `Username`
        if (data['Username']) { // data not null
          String.validateJSON(data['Username']);
        }
        // validate the optional field `RetryOptions`
        if (data['RetryOptions']) { // data not null
          RedshiftDestinationConfigurationRetryOptions.validateJSON(data['RetryOptions']);
        }
        // validate the optional field `S3DestinationDescription`
        if (data['S3DestinationDescription']) { // data not null
          RedshiftDestinationDescriptionS3DestinationDescription.validateJSON(data['S3DestinationDescription']);
        }
        // validate the optional field `ProcessingConfiguration`
        if (data['ProcessingConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationProcessingConfiguration.validateJSON(data['ProcessingConfiguration']);
        }
        // validate the optional field `S3BackupMode`
        if (data['S3BackupMode']) { // data not null
          RedshiftS3BackupMode.validateJSON(data['S3BackupMode']);
        }
        // validate the optional field `S3BackupDescription`
        if (data['S3BackupDescription']) { // data not null
          ExtendedS3DestinationDescriptionS3BackupDescription.validateJSON(data['S3BackupDescription']);
        }
        // validate the optional field `CloudWatchLoggingOptions`
        if (data['CloudWatchLoggingOptions']) { // data not null
          S3DestinationDescriptionCloudWatchLoggingOptions.validateJSON(data['CloudWatchLoggingOptions']);
        }

        return true;
    }


}

RedshiftDestinationDescription.RequiredProperties = ["RoleARN", "ClusterJDBCURL", "CopyCommand", "Username", "S3DestinationDescription"];

/**
 * @member {String} RoleARN
 */
RedshiftDestinationDescription.prototype['RoleARN'] = undefined;

/**
 * @member {String} ClusterJDBCURL
 */
RedshiftDestinationDescription.prototype['ClusterJDBCURL'] = undefined;

/**
 * @member {module:model/RedshiftDestinationConfigurationCopyCommand} CopyCommand
 */
RedshiftDestinationDescription.prototype['CopyCommand'] = undefined;

/**
 * @member {String} Username
 */
RedshiftDestinationDescription.prototype['Username'] = undefined;

/**
 * @member {module:model/RedshiftDestinationConfigurationRetryOptions} RetryOptions
 */
RedshiftDestinationDescription.prototype['RetryOptions'] = undefined;

/**
 * @member {module:model/RedshiftDestinationDescriptionS3DestinationDescription} S3DestinationDescription
 */
RedshiftDestinationDescription.prototype['S3DestinationDescription'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationProcessingConfiguration} ProcessingConfiguration
 */
RedshiftDestinationDescription.prototype['ProcessingConfiguration'] = undefined;

/**
 * @member {module:model/RedshiftS3BackupMode} S3BackupMode
 */
RedshiftDestinationDescription.prototype['S3BackupMode'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationDescriptionS3BackupDescription} S3BackupDescription
 */
RedshiftDestinationDescription.prototype['S3BackupDescription'] = undefined;

/**
 * @member {module:model/S3DestinationDescriptionCloudWatchLoggingOptions} CloudWatchLoggingOptions
 */
RedshiftDestinationDescription.prototype['CloudWatchLoggingOptions'] = undefined;






export default RedshiftDestinationDescription;

