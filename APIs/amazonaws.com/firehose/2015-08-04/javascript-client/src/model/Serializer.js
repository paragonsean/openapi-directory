/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SerializerOrcSerDe from './SerializerOrcSerDe';
import SerializerParquetSerDe from './SerializerParquetSerDe';

/**
 * The Serializer model module.
 * @module model/Serializer
 * @version 2015-08-04
 */
class Serializer {
    /**
     * Constructs a new <code>Serializer</code>.
     * The serializer that you want Kinesis Data Firehose to use to convert data to the target format before writing it to Amazon S3. Kinesis Data Firehose supports two types of serializers: the &lt;a href&#x3D;\&quot;https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html\&quot;&gt;ORC SerDe&lt;/a&gt; and the &lt;a href&#x3D;\&quot;https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html\&quot;&gt;Parquet SerDe&lt;/a&gt;.
     * @alias module:model/Serializer
     */
    constructor() { 
        
        Serializer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Serializer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Serializer} obj Optional instance to populate.
     * @return {module:model/Serializer} The populated <code>Serializer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Serializer();

            if (data.hasOwnProperty('ParquetSerDe')) {
                obj['ParquetSerDe'] = SerializerParquetSerDe.constructFromObject(data['ParquetSerDe']);
            }
            if (data.hasOwnProperty('OrcSerDe')) {
                obj['OrcSerDe'] = SerializerOrcSerDe.constructFromObject(data['OrcSerDe']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Serializer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Serializer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ParquetSerDe`
        if (data['ParquetSerDe']) { // data not null
          SerializerParquetSerDe.validateJSON(data['ParquetSerDe']);
        }
        // validate the optional field `OrcSerDe`
        if (data['OrcSerDe']) { // data not null
          SerializerOrcSerDe.validateJSON(data['OrcSerDe']);
        }

        return true;
    }


}



/**
 * @member {module:model/SerializerParquetSerDe} ParquetSerDe
 */
Serializer.prototype['ParquetSerDe'] = undefined;

/**
 * @member {module:model/SerializerOrcSerDe} OrcSerDe
 */
Serializer.prototype['OrcSerDe'] = undefined;






export default Serializer;

