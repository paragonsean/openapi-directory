/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompressionFormat from './CompressionFormat';
import ExtendedS3DestinationConfigurationBufferingHints from './ExtendedS3DestinationConfigurationBufferingHints';
import ExtendedS3DestinationConfigurationDataFormatConversionConfiguration from './ExtendedS3DestinationConfigurationDataFormatConversionConfiguration';
import ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration from './ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration';
import ExtendedS3DestinationConfigurationProcessingConfiguration from './ExtendedS3DestinationConfigurationProcessingConfiguration';
import ExtendedS3DestinationConfigurationS3BackupConfiguration from './ExtendedS3DestinationConfigurationS3BackupConfiguration';
import S3BackupMode from './S3BackupMode';
import S3DestinationConfigurationEncryptionConfiguration from './S3DestinationConfigurationEncryptionConfiguration';
import S3DestinationDescriptionCloudWatchLoggingOptions from './S3DestinationDescriptionCloudWatchLoggingOptions';

/**
 * The ExtendedS3DestinationConfiguration model module.
 * @module model/ExtendedS3DestinationConfiguration
 * @version 2015-08-04
 */
class ExtendedS3DestinationConfiguration {
    /**
     * Constructs a new <code>ExtendedS3DestinationConfiguration</code>.
     * Describes the configuration of a destination in Amazon S3.
     * @alias module:model/ExtendedS3DestinationConfiguration
     * @param roleARN {String} 
     * @param bucketARN {String} 
     */
    constructor(roleARN, bucketARN) { 
        
        ExtendedS3DestinationConfiguration.initialize(this, roleARN, bucketARN);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roleARN, bucketARN) { 
        obj['RoleARN'] = roleARN;
        obj['BucketARN'] = bucketARN;
    }

    /**
     * Constructs a <code>ExtendedS3DestinationConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExtendedS3DestinationConfiguration} obj Optional instance to populate.
     * @return {module:model/ExtendedS3DestinationConfiguration} The populated <code>ExtendedS3DestinationConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExtendedS3DestinationConfiguration();

            if (data.hasOwnProperty('RoleARN')) {
                obj['RoleARN'] = ApiClient.convertToType(data['RoleARN'], 'String');
            }
            if (data.hasOwnProperty('BucketARN')) {
                obj['BucketARN'] = ApiClient.convertToType(data['BucketARN'], 'String');
            }
            if (data.hasOwnProperty('Prefix')) {
                obj['Prefix'] = ApiClient.convertToType(data['Prefix'], 'String');
            }
            if (data.hasOwnProperty('ErrorOutputPrefix')) {
                obj['ErrorOutputPrefix'] = ApiClient.convertToType(data['ErrorOutputPrefix'], 'String');
            }
            if (data.hasOwnProperty('BufferingHints')) {
                obj['BufferingHints'] = ExtendedS3DestinationConfigurationBufferingHints.constructFromObject(data['BufferingHints']);
            }
            if (data.hasOwnProperty('CompressionFormat')) {
                obj['CompressionFormat'] = ApiClient.convertToType(data['CompressionFormat'], CompressionFormat);
            }
            if (data.hasOwnProperty('EncryptionConfiguration')) {
                obj['EncryptionConfiguration'] = S3DestinationConfigurationEncryptionConfiguration.constructFromObject(data['EncryptionConfiguration']);
            }
            if (data.hasOwnProperty('CloudWatchLoggingOptions')) {
                obj['CloudWatchLoggingOptions'] = S3DestinationDescriptionCloudWatchLoggingOptions.constructFromObject(data['CloudWatchLoggingOptions']);
            }
            if (data.hasOwnProperty('ProcessingConfiguration')) {
                obj['ProcessingConfiguration'] = ExtendedS3DestinationConfigurationProcessingConfiguration.constructFromObject(data['ProcessingConfiguration']);
            }
            if (data.hasOwnProperty('S3BackupMode')) {
                obj['S3BackupMode'] = ApiClient.convertToType(data['S3BackupMode'], S3BackupMode);
            }
            if (data.hasOwnProperty('S3BackupConfiguration')) {
                obj['S3BackupConfiguration'] = ExtendedS3DestinationConfigurationS3BackupConfiguration.constructFromObject(data['S3BackupConfiguration']);
            }
            if (data.hasOwnProperty('DataFormatConversionConfiguration')) {
                obj['DataFormatConversionConfiguration'] = ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.constructFromObject(data['DataFormatConversionConfiguration']);
            }
            if (data.hasOwnProperty('DynamicPartitioningConfiguration')) {
                obj['DynamicPartitioningConfiguration'] = ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration.constructFromObject(data['DynamicPartitioningConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExtendedS3DestinationConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExtendedS3DestinationConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExtendedS3DestinationConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `RoleARN`
        if (data['RoleARN']) { // data not null
          String.validateJSON(data['RoleARN']);
        }
        // validate the optional field `BucketARN`
        if (data['BucketARN']) { // data not null
          String.validateJSON(data['BucketARN']);
        }
        // validate the optional field `Prefix`
        if (data['Prefix']) { // data not null
          String.validateJSON(data['Prefix']);
        }
        // validate the optional field `ErrorOutputPrefix`
        if (data['ErrorOutputPrefix']) { // data not null
          String.validateJSON(data['ErrorOutputPrefix']);
        }
        // validate the optional field `BufferingHints`
        if (data['BufferingHints']) { // data not null
          ExtendedS3DestinationConfigurationBufferingHints.validateJSON(data['BufferingHints']);
        }
        // validate the optional field `CompressionFormat`
        if (data['CompressionFormat']) { // data not null
          CompressionFormat.validateJSON(data['CompressionFormat']);
        }
        // validate the optional field `EncryptionConfiguration`
        if (data['EncryptionConfiguration']) { // data not null
          S3DestinationConfigurationEncryptionConfiguration.validateJSON(data['EncryptionConfiguration']);
        }
        // validate the optional field `CloudWatchLoggingOptions`
        if (data['CloudWatchLoggingOptions']) { // data not null
          S3DestinationDescriptionCloudWatchLoggingOptions.validateJSON(data['CloudWatchLoggingOptions']);
        }
        // validate the optional field `ProcessingConfiguration`
        if (data['ProcessingConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationProcessingConfiguration.validateJSON(data['ProcessingConfiguration']);
        }
        // validate the optional field `S3BackupMode`
        if (data['S3BackupMode']) { // data not null
          S3BackupMode.validateJSON(data['S3BackupMode']);
        }
        // validate the optional field `S3BackupConfiguration`
        if (data['S3BackupConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationS3BackupConfiguration.validateJSON(data['S3BackupConfiguration']);
        }
        // validate the optional field `DataFormatConversionConfiguration`
        if (data['DataFormatConversionConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationDataFormatConversionConfiguration.validateJSON(data['DataFormatConversionConfiguration']);
        }
        // validate the optional field `DynamicPartitioningConfiguration`
        if (data['DynamicPartitioningConfiguration']) { // data not null
          ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration.validateJSON(data['DynamicPartitioningConfiguration']);
        }

        return true;
    }


}

ExtendedS3DestinationConfiguration.RequiredProperties = ["RoleARN", "BucketARN"];

/**
 * @member {String} RoleARN
 */
ExtendedS3DestinationConfiguration.prototype['RoleARN'] = undefined;

/**
 * @member {String} BucketARN
 */
ExtendedS3DestinationConfiguration.prototype['BucketARN'] = undefined;

/**
 * @member {String} Prefix
 */
ExtendedS3DestinationConfiguration.prototype['Prefix'] = undefined;

/**
 * @member {String} ErrorOutputPrefix
 */
ExtendedS3DestinationConfiguration.prototype['ErrorOutputPrefix'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationBufferingHints} BufferingHints
 */
ExtendedS3DestinationConfiguration.prototype['BufferingHints'] = undefined;

/**
 * @member {module:model/CompressionFormat} CompressionFormat
 */
ExtendedS3DestinationConfiguration.prototype['CompressionFormat'] = undefined;

/**
 * @member {module:model/S3DestinationConfigurationEncryptionConfiguration} EncryptionConfiguration
 */
ExtendedS3DestinationConfiguration.prototype['EncryptionConfiguration'] = undefined;

/**
 * @member {module:model/S3DestinationDescriptionCloudWatchLoggingOptions} CloudWatchLoggingOptions
 */
ExtendedS3DestinationConfiguration.prototype['CloudWatchLoggingOptions'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationProcessingConfiguration} ProcessingConfiguration
 */
ExtendedS3DestinationConfiguration.prototype['ProcessingConfiguration'] = undefined;

/**
 * @member {module:model/S3BackupMode} S3BackupMode
 */
ExtendedS3DestinationConfiguration.prototype['S3BackupMode'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationS3BackupConfiguration} S3BackupConfiguration
 */
ExtendedS3DestinationConfiguration.prototype['S3BackupConfiguration'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationDataFormatConversionConfiguration} DataFormatConversionConfiguration
 */
ExtendedS3DestinationConfiguration.prototype['DataFormatConversionConfiguration'] = undefined;

/**
 * @member {module:model/ExtendedS3DestinationConfigurationDynamicPartitioningConfiguration} DynamicPartitioningConfiguration
 */
ExtendedS3DestinationConfiguration.prototype['DynamicPartitioningConfiguration'] = undefined;






export default ExtendedS3DestinationConfiguration;

