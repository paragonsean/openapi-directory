/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmazonOpenSearchServerlessDestinationConfigurationBufferingHints from './AmazonOpenSearchServerlessDestinationConfigurationBufferingHints';
import AmazonOpenSearchServerlessDestinationConfigurationRetryOptions from './AmazonOpenSearchServerlessDestinationConfigurationRetryOptions';
import AmazonOpenSearchServerlessS3BackupMode from './AmazonOpenSearchServerlessS3BackupMode';
import CloudWatchLoggingOptions from './CloudWatchLoggingOptions';
import ProcessingConfiguration from './ProcessingConfiguration';
import S3DestinationConfiguration from './S3DestinationConfiguration';
import VpcConfiguration from './VpcConfiguration';

/**
 * The AmazonOpenSearchServerlessDestinationConfiguration model module.
 * @module model/AmazonOpenSearchServerlessDestinationConfiguration
 * @version 2015-08-04
 */
class AmazonOpenSearchServerlessDestinationConfiguration {
    /**
     * Constructs a new <code>AmazonOpenSearchServerlessDestinationConfiguration</code>.
     * Describes the configuration of a destination in the Serverless offering for Amazon OpenSearch Service.
     * @alias module:model/AmazonOpenSearchServerlessDestinationConfiguration
     * @param roleARN {String} 
     * @param indexName {String} 
     * @param s3Configuration {module:model/S3DestinationConfiguration} 
     */
    constructor(roleARN, indexName, s3Configuration) { 
        
        AmazonOpenSearchServerlessDestinationConfiguration.initialize(this, roleARN, indexName, s3Configuration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, roleARN, indexName, s3Configuration) { 
        obj['RoleARN'] = roleARN;
        obj['IndexName'] = indexName;
        obj['S3Configuration'] = s3Configuration;
    }

    /**
     * Constructs a <code>AmazonOpenSearchServerlessDestinationConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AmazonOpenSearchServerlessDestinationConfiguration} obj Optional instance to populate.
     * @return {module:model/AmazonOpenSearchServerlessDestinationConfiguration} The populated <code>AmazonOpenSearchServerlessDestinationConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AmazonOpenSearchServerlessDestinationConfiguration();

            if (data.hasOwnProperty('RoleARN')) {
                obj['RoleARN'] = ApiClient.convertToType(data['RoleARN'], 'String');
            }
            if (data.hasOwnProperty('CollectionEndpoint')) {
                obj['CollectionEndpoint'] = ApiClient.convertToType(data['CollectionEndpoint'], 'String');
            }
            if (data.hasOwnProperty('IndexName')) {
                obj['IndexName'] = ApiClient.convertToType(data['IndexName'], 'String');
            }
            if (data.hasOwnProperty('BufferingHints')) {
                obj['BufferingHints'] = AmazonOpenSearchServerlessDestinationConfigurationBufferingHints.constructFromObject(data['BufferingHints']);
            }
            if (data.hasOwnProperty('RetryOptions')) {
                obj['RetryOptions'] = AmazonOpenSearchServerlessDestinationConfigurationRetryOptions.constructFromObject(data['RetryOptions']);
            }
            if (data.hasOwnProperty('S3BackupMode')) {
                obj['S3BackupMode'] = ApiClient.convertToType(data['S3BackupMode'], AmazonOpenSearchServerlessS3BackupMode);
            }
            if (data.hasOwnProperty('S3Configuration')) {
                obj['S3Configuration'] = S3DestinationConfiguration.constructFromObject(data['S3Configuration']);
            }
            if (data.hasOwnProperty('ProcessingConfiguration')) {
                obj['ProcessingConfiguration'] = ProcessingConfiguration.constructFromObject(data['ProcessingConfiguration']);
            }
            if (data.hasOwnProperty('CloudWatchLoggingOptions')) {
                obj['CloudWatchLoggingOptions'] = CloudWatchLoggingOptions.constructFromObject(data['CloudWatchLoggingOptions']);
            }
            if (data.hasOwnProperty('VpcConfiguration')) {
                obj['VpcConfiguration'] = VpcConfiguration.constructFromObject(data['VpcConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AmazonOpenSearchServerlessDestinationConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AmazonOpenSearchServerlessDestinationConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AmazonOpenSearchServerlessDestinationConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `RoleARN`
        if (data['RoleARN']) { // data not null
          String.validateJSON(data['RoleARN']);
        }
        // validate the optional field `CollectionEndpoint`
        if (data['CollectionEndpoint']) { // data not null
          String.validateJSON(data['CollectionEndpoint']);
        }
        // validate the optional field `IndexName`
        if (data['IndexName']) { // data not null
          String.validateJSON(data['IndexName']);
        }
        // validate the optional field `BufferingHints`
        if (data['BufferingHints']) { // data not null
          AmazonOpenSearchServerlessDestinationConfigurationBufferingHints.validateJSON(data['BufferingHints']);
        }
        // validate the optional field `RetryOptions`
        if (data['RetryOptions']) { // data not null
          AmazonOpenSearchServerlessDestinationConfigurationRetryOptions.validateJSON(data['RetryOptions']);
        }
        // validate the optional field `S3BackupMode`
        if (data['S3BackupMode']) { // data not null
          AmazonOpenSearchServerlessS3BackupMode.validateJSON(data['S3BackupMode']);
        }
        // validate the optional field `S3Configuration`
        if (data['S3Configuration']) { // data not null
          S3DestinationConfiguration.validateJSON(data['S3Configuration']);
        }
        // validate the optional field `ProcessingConfiguration`
        if (data['ProcessingConfiguration']) { // data not null
          ProcessingConfiguration.validateJSON(data['ProcessingConfiguration']);
        }
        // validate the optional field `CloudWatchLoggingOptions`
        if (data['CloudWatchLoggingOptions']) { // data not null
          CloudWatchLoggingOptions.validateJSON(data['CloudWatchLoggingOptions']);
        }
        // validate the optional field `VpcConfiguration`
        if (data['VpcConfiguration']) { // data not null
          VpcConfiguration.validateJSON(data['VpcConfiguration']);
        }

        return true;
    }


}

AmazonOpenSearchServerlessDestinationConfiguration.RequiredProperties = ["RoleARN", "IndexName", "S3Configuration"];

/**
 * @member {String} RoleARN
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['RoleARN'] = undefined;

/**
 * @member {String} CollectionEndpoint
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['CollectionEndpoint'] = undefined;

/**
 * @member {String} IndexName
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['IndexName'] = undefined;

/**
 * @member {module:model/AmazonOpenSearchServerlessDestinationConfigurationBufferingHints} BufferingHints
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['BufferingHints'] = undefined;

/**
 * @member {module:model/AmazonOpenSearchServerlessDestinationConfigurationRetryOptions} RetryOptions
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['RetryOptions'] = undefined;

/**
 * @member {module:model/AmazonOpenSearchServerlessS3BackupMode} S3BackupMode
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['S3BackupMode'] = undefined;

/**
 * @member {module:model/S3DestinationConfiguration} S3Configuration
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['S3Configuration'] = undefined;

/**
 * @member {module:model/ProcessingConfiguration} ProcessingConfiguration
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['ProcessingConfiguration'] = undefined;

/**
 * @member {module:model/CloudWatchLoggingOptions} CloudWatchLoggingOptions
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['CloudWatchLoggingOptions'] = undefined;

/**
 * @member {module:model/VpcConfiguration} VpcConfiguration
 */
AmazonOpenSearchServerlessDestinationConfiguration.prototype['VpcConfiguration'] = undefined;






export default AmazonOpenSearchServerlessDestinationConfiguration;

