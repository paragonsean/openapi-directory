/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParquetCompression from './ParquetCompression';
import ParquetWriterVersion from './ParquetWriterVersion';

/**
 * The ParquetSerDe model module.
 * @module model/ParquetSerDe
 * @version 2015-08-04
 */
class ParquetSerDe {
    /**
     * Constructs a new <code>ParquetSerDe</code>.
     * A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see &lt;a href&#x3D;\&quot;https://parquet.apache.org/documentation/latest/\&quot;&gt;Apache Parquet&lt;/a&gt;.
     * @alias module:model/ParquetSerDe
     */
    constructor() { 
        
        ParquetSerDe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ParquetSerDe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParquetSerDe} obj Optional instance to populate.
     * @return {module:model/ParquetSerDe} The populated <code>ParquetSerDe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParquetSerDe();

            if (data.hasOwnProperty('BlockSizeBytes')) {
                obj['BlockSizeBytes'] = ApiClient.convertToType(data['BlockSizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('PageSizeBytes')) {
                obj['PageSizeBytes'] = ApiClient.convertToType(data['PageSizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('Compression')) {
                obj['Compression'] = ApiClient.convertToType(data['Compression'], ParquetCompression);
            }
            if (data.hasOwnProperty('EnableDictionaryCompression')) {
                obj['EnableDictionaryCompression'] = ApiClient.convertToType(data['EnableDictionaryCompression'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxPaddingBytes')) {
                obj['MaxPaddingBytes'] = ApiClient.convertToType(data['MaxPaddingBytes'], 'Number');
            }
            if (data.hasOwnProperty('WriterVersion')) {
                obj['WriterVersion'] = ApiClient.convertToType(data['WriterVersion'], ParquetWriterVersion);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParquetSerDe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParquetSerDe</code>.
     */
    static validateJSON(data) {
        // validate the optional field `BlockSizeBytes`
        if (data['BlockSizeBytes']) { // data not null
          Number.validateJSON(data['BlockSizeBytes']);
        }
        // validate the optional field `PageSizeBytes`
        if (data['PageSizeBytes']) { // data not null
          Number.validateJSON(data['PageSizeBytes']);
        }
        // validate the optional field `Compression`
        if (data['Compression']) { // data not null
          ParquetCompression.validateJSON(data['Compression']);
        }
        // validate the optional field `EnableDictionaryCompression`
        if (data['EnableDictionaryCompression']) { // data not null
          Boolean.validateJSON(data['EnableDictionaryCompression']);
        }
        // validate the optional field `MaxPaddingBytes`
        if (data['MaxPaddingBytes']) { // data not null
          Number.validateJSON(data['MaxPaddingBytes']);
        }
        // validate the optional field `WriterVersion`
        if (data['WriterVersion']) { // data not null
          ParquetWriterVersion.validateJSON(data['WriterVersion']);
        }

        return true;
    }


}



/**
 * @member {Number} BlockSizeBytes
 */
ParquetSerDe.prototype['BlockSizeBytes'] = undefined;

/**
 * @member {Number} PageSizeBytes
 */
ParquetSerDe.prototype['PageSizeBytes'] = undefined;

/**
 * @member {module:model/ParquetCompression} Compression
 */
ParquetSerDe.prototype['Compression'] = undefined;

/**
 * @member {Boolean} EnableDictionaryCompression
 */
ParquetSerDe.prototype['EnableDictionaryCompression'] = undefined;

/**
 * @member {Number} MaxPaddingBytes
 */
ParquetSerDe.prototype['MaxPaddingBytes'] = undefined;

/**
 * @member {module:model/ParquetWriterVersion} WriterVersion
 */
ParquetSerDe.prototype['WriterVersion'] = undefined;






export default ParquetSerDe;

