/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrcCompression from './OrcCompression';
import OrcFormatVersion from './OrcFormatVersion';

/**
 * The OrcSerDe model module.
 * @module model/OrcSerDe
 * @version 2015-08-04
 */
class OrcSerDe {
    /**
     * Constructs a new <code>OrcSerDe</code>.
     * A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see &lt;a href&#x3D;\&quot;https://orc.apache.org/docs/\&quot;&gt;Apache ORC&lt;/a&gt;.
     * @alias module:model/OrcSerDe
     */
    constructor() { 
        
        OrcSerDe.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrcSerDe</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrcSerDe} obj Optional instance to populate.
     * @return {module:model/OrcSerDe} The populated <code>OrcSerDe</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrcSerDe();

            if (data.hasOwnProperty('StripeSizeBytes')) {
                obj['StripeSizeBytes'] = ApiClient.convertToType(data['StripeSizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('BlockSizeBytes')) {
                obj['BlockSizeBytes'] = ApiClient.convertToType(data['BlockSizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('RowIndexStride')) {
                obj['RowIndexStride'] = ApiClient.convertToType(data['RowIndexStride'], 'Number');
            }
            if (data.hasOwnProperty('EnablePadding')) {
                obj['EnablePadding'] = ApiClient.convertToType(data['EnablePadding'], 'Boolean');
            }
            if (data.hasOwnProperty('PaddingTolerance')) {
                obj['PaddingTolerance'] = ApiClient.convertToType(data['PaddingTolerance'], 'Number');
            }
            if (data.hasOwnProperty('Compression')) {
                obj['Compression'] = ApiClient.convertToType(data['Compression'], OrcCompression);
            }
            if (data.hasOwnProperty('BloomFilterColumns')) {
                obj['BloomFilterColumns'] = ApiClient.convertToType(data['BloomFilterColumns'], Array);
            }
            if (data.hasOwnProperty('BloomFilterFalsePositiveProbability')) {
                obj['BloomFilterFalsePositiveProbability'] = ApiClient.convertToType(data['BloomFilterFalsePositiveProbability'], 'Number');
            }
            if (data.hasOwnProperty('DictionaryKeyThreshold')) {
                obj['DictionaryKeyThreshold'] = ApiClient.convertToType(data['DictionaryKeyThreshold'], 'Number');
            }
            if (data.hasOwnProperty('FormatVersion')) {
                obj['FormatVersion'] = ApiClient.convertToType(data['FormatVersion'], OrcFormatVersion);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrcSerDe</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrcSerDe</code>.
     */
    static validateJSON(data) {
        // validate the optional field `StripeSizeBytes`
        if (data['StripeSizeBytes']) { // data not null
          Number.validateJSON(data['StripeSizeBytes']);
        }
        // validate the optional field `BlockSizeBytes`
        if (data['BlockSizeBytes']) { // data not null
          Number.validateJSON(data['BlockSizeBytes']);
        }
        // validate the optional field `RowIndexStride`
        if (data['RowIndexStride']) { // data not null
          Number.validateJSON(data['RowIndexStride']);
        }
        // validate the optional field `EnablePadding`
        if (data['EnablePadding']) { // data not null
          Boolean.validateJSON(data['EnablePadding']);
        }
        // validate the optional field `PaddingTolerance`
        if (data['PaddingTolerance']) { // data not null
          Number.validateJSON(data['PaddingTolerance']);
        }
        // validate the optional field `Compression`
        if (data['Compression']) { // data not null
          OrcCompression.validateJSON(data['Compression']);
        }
        // validate the optional field `BloomFilterColumns`
        if (data['BloomFilterColumns']) { // data not null
          Array.validateJSON(data['BloomFilterColumns']);
        }
        // validate the optional field `BloomFilterFalsePositiveProbability`
        if (data['BloomFilterFalsePositiveProbability']) { // data not null
          Number.validateJSON(data['BloomFilterFalsePositiveProbability']);
        }
        // validate the optional field `DictionaryKeyThreshold`
        if (data['DictionaryKeyThreshold']) { // data not null
          Number.validateJSON(data['DictionaryKeyThreshold']);
        }
        // validate the optional field `FormatVersion`
        if (data['FormatVersion']) { // data not null
          OrcFormatVersion.validateJSON(data['FormatVersion']);
        }

        return true;
    }


}



/**
 * @member {Number} StripeSizeBytes
 */
OrcSerDe.prototype['StripeSizeBytes'] = undefined;

/**
 * @member {Number} BlockSizeBytes
 */
OrcSerDe.prototype['BlockSizeBytes'] = undefined;

/**
 * @member {Number} RowIndexStride
 */
OrcSerDe.prototype['RowIndexStride'] = undefined;

/**
 * @member {Boolean} EnablePadding
 */
OrcSerDe.prototype['EnablePadding'] = undefined;

/**
 * @member {Number} PaddingTolerance
 */
OrcSerDe.prototype['PaddingTolerance'] = undefined;

/**
 * @member {module:model/OrcCompression} Compression
 */
OrcSerDe.prototype['Compression'] = undefined;

/**
 * @member {Array} BloomFilterColumns
 */
OrcSerDe.prototype['BloomFilterColumns'] = undefined;

/**
 * @member {Number} BloomFilterFalsePositiveProbability
 */
OrcSerDe.prototype['BloomFilterFalsePositiveProbability'] = undefined;

/**
 * @member {Number} DictionaryKeyThreshold
 */
OrcSerDe.prototype['DictionaryKeyThreshold'] = undefined;

/**
 * @member {module:model/OrcFormatVersion} FormatVersion
 */
OrcSerDe.prototype['FormatVersion'] = undefined;






export default OrcSerDe;

