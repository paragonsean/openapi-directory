/**
 * Amazon Kinesis Firehose
 * <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>
 *
 * The version of the OpenAPI document: 2015-08-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonKinesisFirehose);
  }
}(this, function(expect, AmazonKinesisFirehose) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonKinesisFirehose.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createDeliveryStream', function() {
      it('should call createDeliveryStream successfully', function(done) {
        //uncomment below and update the code to test createDeliveryStream
        //instance.createDeliveryStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeliveryStream', function() {
      it('should call deleteDeliveryStream successfully', function(done) {
        //uncomment below and update the code to test deleteDeliveryStream
        //instance.deleteDeliveryStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDeliveryStream', function() {
      it('should call describeDeliveryStream successfully', function(done) {
        //uncomment below and update the code to test describeDeliveryStream
        //instance.describeDeliveryStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDeliveryStreams', function() {
      it('should call listDeliveryStreams successfully', function(done) {
        //uncomment below and update the code to test listDeliveryStreams
        //instance.listDeliveryStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForDeliveryStream', function() {
      it('should call listTagsForDeliveryStream successfully', function(done) {
        //uncomment below and update the code to test listTagsForDeliveryStream
        //instance.listTagsForDeliveryStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRecord', function() {
      it('should call putRecord successfully', function(done) {
        //uncomment below and update the code to test putRecord
        //instance.putRecord(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRecordBatch', function() {
      it('should call putRecordBatch successfully', function(done) {
        //uncomment below and update the code to test putRecordBatch
        //instance.putRecordBatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startDeliveryStreamEncryption', function() {
      it('should call startDeliveryStreamEncryption successfully', function(done) {
        //uncomment below and update the code to test startDeliveryStreamEncryption
        //instance.startDeliveryStreamEncryption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopDeliveryStreamEncryption', function() {
      it('should call stopDeliveryStreamEncryption successfully', function(done) {
        //uncomment below and update the code to test stopDeliveryStreamEncryption
        //instance.stopDeliveryStreamEncryption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagDeliveryStream', function() {
      it('should call tagDeliveryStream successfully', function(done) {
        //uncomment below and update the code to test tagDeliveryStream
        //instance.tagDeliveryStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagDeliveryStream', function() {
      it('should call untagDeliveryStream successfully', function(done) {
        //uncomment below and update the code to test untagDeliveryStream
        //instance.untagDeliveryStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDestination', function() {
      it('should call updateDestination successfully', function(done) {
        //uncomment below and update the code to test updateDestination
        //instance.updateDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
