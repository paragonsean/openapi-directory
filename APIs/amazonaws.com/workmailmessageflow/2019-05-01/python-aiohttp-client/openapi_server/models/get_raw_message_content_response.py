# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRawMessageContentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_content: str=None):
        """GetRawMessageContentResponse - a model defined in OpenAPI

        :param message_content: The message_content of this GetRawMessageContentResponse.
        """
        self.openapi_types = {
            'message_content': str
        }

        self.attribute_map = {
            'message_content': 'messageContent'
        }

        self._message_content = message_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRawMessageContentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRawMessageContentResponse of this GetRawMessageContentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_content(self):
        """Gets the message_content of this GetRawMessageContentResponse.


        :return: The message_content of this GetRawMessageContentResponse.
        :rtype: str
        """
        return self._message_content

    @message_content.setter
    def message_content(self, message_content):
        """Sets the message_content of this GetRawMessageContentResponse.


        :param message_content: The message_content of this GetRawMessageContentResponse.
        :type message_content: str
        """
        if message_content is None:
            raise ValueError("Invalid value for `message_content`, must not be `None`")

        self._message_content = message_content
