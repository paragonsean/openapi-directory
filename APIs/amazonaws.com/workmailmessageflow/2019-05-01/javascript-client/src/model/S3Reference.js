/**
 * Amazon WorkMail Message Flow
 * The WorkMail Message Flow API provides access to email messages as they are being sent and received by a WorkMail organization.
 *
 * The version of the OpenAPI document: 2019-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The S3Reference model module.
 * @module model/S3Reference
 * @version 2019-05-01
 */
class S3Reference {
    /**
     * Constructs a new <code>S3Reference</code>.
     * &lt;p&gt;Amazon S3 object representing the updated message content, in MIME format.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The region for the S3 bucket containing the S3 object must match the region used for WorkMail operations. Also, for WorkMail to process an S3 object, it must have permission to access that object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html\&quot;&gt; Updating message content with AWS Lambda&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     * @alias module:model/S3Reference
     * @param bucket {String} 
     * @param key {String} 
     */
    constructor(bucket, key) { 
        
        S3Reference.initialize(this, bucket, key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bucket, key) { 
        obj['bucket'] = bucket;
        obj['key'] = key;
    }

    /**
     * Constructs a <code>S3Reference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3Reference} obj Optional instance to populate.
     * @return {module:model/S3Reference} The populated <code>S3Reference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3Reference();

            if (data.hasOwnProperty('bucket')) {
                obj['bucket'] = ApiClient.convertToType(data['bucket'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('objectVersion')) {
                obj['objectVersion'] = ApiClient.convertToType(data['objectVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3Reference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3Reference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3Reference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `bucket`
        if (data['bucket']) { // data not null
          String.validateJSON(data['bucket']);
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          String.validateJSON(data['key']);
        }
        // validate the optional field `objectVersion`
        if (data['objectVersion']) { // data not null
          String.validateJSON(data['objectVersion']);
        }

        return true;
    }


}

S3Reference.RequiredProperties = ["bucket", "key"];

/**
 * @member {String} bucket
 */
S3Reference.prototype['bucket'] = undefined;

/**
 * @member {String} key
 */
S3Reference.prototype['key'] = undefined;

/**
 * @member {String} objectVersion
 */
S3Reference.prototype['objectVersion'] = undefined;






export default S3Reference;

