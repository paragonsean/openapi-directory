/**
 * Amazon WorkMail Message Flow
 * The WorkMail Message Flow API provides access to email messages as they are being sent and received by a WorkMail organization.
 *
 * The version of the OpenAPI document: 2019-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutRawMessageContent_request_content_s3Reference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutRawMessageContent_request_content_s3Reference::OAIPutRawMessageContent_request_content_s3Reference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutRawMessageContent_request_content_s3Reference::OAIPutRawMessageContent_request_content_s3Reference() {
    this->initializeModel();
}

OAIPutRawMessageContent_request_content_s3Reference::~OAIPutRawMessageContent_request_content_s3Reference() {}

void OAIPutRawMessageContent_request_content_s3Reference::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_object_version_isSet = false;
    m_object_version_isValid = false;
}

void OAIPutRawMessageContent_request_content_s3Reference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutRawMessageContent_request_content_s3Reference::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_object_version_isValid = ::OpenAPI::fromJsonValue(m_object_version, json[QString("objectVersion")]);
    m_object_version_isSet = !json[QString("objectVersion")].isNull() && m_object_version_isValid;
}

QString OAIPutRawMessageContent_request_content_s3Reference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutRawMessageContent_request_content_s3Reference::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_object_version_isSet) {
        obj.insert(QString("objectVersion"), ::OpenAPI::toJsonValue(m_object_version));
    }
    return obj;
}

QString OAIPutRawMessageContent_request_content_s3Reference::getBucket() const {
    return m_bucket;
}
void OAIPutRawMessageContent_request_content_s3Reference::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIPutRawMessageContent_request_content_s3Reference::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIPutRawMessageContent_request_content_s3Reference::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIPutRawMessageContent_request_content_s3Reference::getKey() const {
    return m_key;
}
void OAIPutRawMessageContent_request_content_s3Reference::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPutRawMessageContent_request_content_s3Reference::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPutRawMessageContent_request_content_s3Reference::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPutRawMessageContent_request_content_s3Reference::getObjectVersion() const {
    return m_object_version;
}
void OAIPutRawMessageContent_request_content_s3Reference::setObjectVersion(const QString &object_version) {
    m_object_version = object_version;
    m_object_version_isSet = true;
}

bool OAIPutRawMessageContent_request_content_s3Reference::is_object_version_Set() const{
    return m_object_version_isSet;
}

bool OAIPutRawMessageContent_request_content_s3Reference::is_object_version_Valid() const{
    return m_object_version_isValid;
}

bool OAIPutRawMessageContent_request_content_s3Reference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutRawMessageContent_request_content_s3Reference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_isValid && m_key_isValid && true;
}

} // namespace OpenAPI
