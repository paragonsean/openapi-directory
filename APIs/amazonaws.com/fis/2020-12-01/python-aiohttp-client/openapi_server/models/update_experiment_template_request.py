# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_experiment_template_request_log_configuration import CreateExperimentTemplateRequestLogConfiguration
from openapi_server.models.update_experiment_template_action_input_item import UpdateExperimentTemplateActionInputItem
from openapi_server.models.update_experiment_template_stop_condition_input import UpdateExperimentTemplateStopConditionInput
from openapi_server.models.update_experiment_template_target_input import UpdateExperimentTemplateTargetInput
import re
from openapi_server import util


class UpdateExperimentTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, stop_conditions: List[UpdateExperimentTemplateStopConditionInput]=None, targets: Dict[str, UpdateExperimentTemplateTargetInput]=None, actions: Dict[str, UpdateExperimentTemplateActionInputItem]=None, role_arn: str=None, log_configuration: CreateExperimentTemplateRequestLogConfiguration=None):
        """UpdateExperimentTemplateRequest - a model defined in OpenAPI

        :param description: The description of this UpdateExperimentTemplateRequest.
        :param stop_conditions: The stop_conditions of this UpdateExperimentTemplateRequest.
        :param targets: The targets of this UpdateExperimentTemplateRequest.
        :param actions: The actions of this UpdateExperimentTemplateRequest.
        :param role_arn: The role_arn of this UpdateExperimentTemplateRequest.
        :param log_configuration: The log_configuration of this UpdateExperimentTemplateRequest.
        """
        self.openapi_types = {
            'description': str,
            'stop_conditions': List[UpdateExperimentTemplateStopConditionInput],
            'targets': Dict[str, UpdateExperimentTemplateTargetInput],
            'actions': Dict[str, UpdateExperimentTemplateActionInputItem],
            'role_arn': str,
            'log_configuration': CreateExperimentTemplateRequestLogConfiguration
        }

        self.attribute_map = {
            'description': 'description',
            'stop_conditions': 'stopConditions',
            'targets': 'targets',
            'actions': 'actions',
            'role_arn': 'roleArn',
            'log_configuration': 'logConfiguration'
        }

        self._description = description
        self._stop_conditions = stop_conditions
        self._targets = targets
        self._actions = actions
        self._role_arn = role_arn
        self._log_configuration = log_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateExperimentTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateExperimentTemplate_request of this UpdateExperimentTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateExperimentTemplateRequest.

        A description for the template.

        :return: The description of this UpdateExperimentTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateExperimentTemplateRequest.

        A description for the template.

        :param description: The description of this UpdateExperimentTemplateRequest.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")
        if description is not None and not re.search(r'[\s\S]+', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\s\S]+/`")

        self._description = description

    @property
    def stop_conditions(self):
        """Gets the stop_conditions of this UpdateExperimentTemplateRequest.

        The stop conditions for the experiment.

        :return: The stop_conditions of this UpdateExperimentTemplateRequest.
        :rtype: List[UpdateExperimentTemplateStopConditionInput]
        """
        return self._stop_conditions

    @stop_conditions.setter
    def stop_conditions(self, stop_conditions):
        """Sets the stop_conditions of this UpdateExperimentTemplateRequest.

        The stop conditions for the experiment.

        :param stop_conditions: The stop_conditions of this UpdateExperimentTemplateRequest.
        :type stop_conditions: List[UpdateExperimentTemplateStopConditionInput]
        """

        self._stop_conditions = stop_conditions

    @property
    def targets(self):
        """Gets the targets of this UpdateExperimentTemplateRequest.

        The targets for the experiment.

        :return: The targets of this UpdateExperimentTemplateRequest.
        :rtype: Dict[str, UpdateExperimentTemplateTargetInput]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this UpdateExperimentTemplateRequest.

        The targets for the experiment.

        :param targets: The targets of this UpdateExperimentTemplateRequest.
        :type targets: Dict[str, UpdateExperimentTemplateTargetInput]
        """

        self._targets = targets

    @property
    def actions(self):
        """Gets the actions of this UpdateExperimentTemplateRequest.

        The actions for the experiment.

        :return: The actions of this UpdateExperimentTemplateRequest.
        :rtype: Dict[str, UpdateExperimentTemplateActionInputItem]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this UpdateExperimentTemplateRequest.

        The actions for the experiment.

        :param actions: The actions of this UpdateExperimentTemplateRequest.
        :type actions: Dict[str, UpdateExperimentTemplateActionInputItem]
        """

        self._actions = actions

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdateExperimentTemplateRequest.

        The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.

        :return: The role_arn of this UpdateExperimentTemplateRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdateExperimentTemplateRequest.

        The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.

        :param role_arn: The role_arn of this UpdateExperimentTemplateRequest.
        :type role_arn: str
        """
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 20:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `20`")
        if role_arn is not None and not re.search(r'[\S]+', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/[\S]+/`")

        self._role_arn = role_arn

    @property
    def log_configuration(self):
        """Gets the log_configuration of this UpdateExperimentTemplateRequest.


        :return: The log_configuration of this UpdateExperimentTemplateRequest.
        :rtype: CreateExperimentTemplateRequestLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this UpdateExperimentTemplateRequest.


        :param log_configuration: The log_configuration of this UpdateExperimentTemplateRequest.
        :type log_configuration: CreateExperimentTemplateRequestLogConfiguration
        """

        self._log_configuration = log_configuration
