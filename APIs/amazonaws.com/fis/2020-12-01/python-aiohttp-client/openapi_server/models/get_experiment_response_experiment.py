# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_log_configuration import ExperimentLogConfiguration
from openapi_server.models.experiment_state import ExperimentState
from openapi_server import util


class GetExperimentResponseExperiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, experiment_template_id: str=None, role_arn: str=None, state: ExperimentState=None, targets: Dict=None, actions: Dict=None, stop_conditions: List=None, creation_time: datetime=None, start_time: datetime=None, end_time: datetime=None, tags: Dict=None, log_configuration: ExperimentLogConfiguration=None):
        """GetExperimentResponseExperiment - a model defined in OpenAPI

        :param id: The id of this GetExperimentResponseExperiment.
        :param experiment_template_id: The experiment_template_id of this GetExperimentResponseExperiment.
        :param role_arn: The role_arn of this GetExperimentResponseExperiment.
        :param state: The state of this GetExperimentResponseExperiment.
        :param targets: The targets of this GetExperimentResponseExperiment.
        :param actions: The actions of this GetExperimentResponseExperiment.
        :param stop_conditions: The stop_conditions of this GetExperimentResponseExperiment.
        :param creation_time: The creation_time of this GetExperimentResponseExperiment.
        :param start_time: The start_time of this GetExperimentResponseExperiment.
        :param end_time: The end_time of this GetExperimentResponseExperiment.
        :param tags: The tags of this GetExperimentResponseExperiment.
        :param log_configuration: The log_configuration of this GetExperimentResponseExperiment.
        """
        self.openapi_types = {
            'id': str,
            'experiment_template_id': str,
            'role_arn': str,
            'state': ExperimentState,
            'targets': Dict,
            'actions': Dict,
            'stop_conditions': List,
            'creation_time': datetime,
            'start_time': datetime,
            'end_time': datetime,
            'tags': Dict,
            'log_configuration': ExperimentLogConfiguration
        }

        self.attribute_map = {
            'id': 'id',
            'experiment_template_id': 'experimentTemplateId',
            'role_arn': 'roleArn',
            'state': 'state',
            'targets': 'targets',
            'actions': 'actions',
            'stop_conditions': 'stopConditions',
            'creation_time': 'creationTime',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'tags': 'tags',
            'log_configuration': 'logConfiguration'
        }

        self._id = id
        self._experiment_template_id = experiment_template_id
        self._role_arn = role_arn
        self._state = state
        self._targets = targets
        self._actions = actions
        self._stop_conditions = stop_conditions
        self._creation_time = creation_time
        self._start_time = start_time
        self._end_time = end_time
        self._tags = tags
        self._log_configuration = log_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetExperimentResponseExperiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetExperimentResponse_experiment of this GetExperimentResponseExperiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GetExperimentResponseExperiment.


        :return: The id of this GetExperimentResponseExperiment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetExperimentResponseExperiment.


        :param id: The id of this GetExperimentResponseExperiment.
        :type id: str
        """

        self._id = id

    @property
    def experiment_template_id(self):
        """Gets the experiment_template_id of this GetExperimentResponseExperiment.


        :return: The experiment_template_id of this GetExperimentResponseExperiment.
        :rtype: str
        """
        return self._experiment_template_id

    @experiment_template_id.setter
    def experiment_template_id(self, experiment_template_id):
        """Sets the experiment_template_id of this GetExperimentResponseExperiment.


        :param experiment_template_id: The experiment_template_id of this GetExperimentResponseExperiment.
        :type experiment_template_id: str
        """

        self._experiment_template_id = experiment_template_id

    @property
    def role_arn(self):
        """Gets the role_arn of this GetExperimentResponseExperiment.


        :return: The role_arn of this GetExperimentResponseExperiment.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this GetExperimentResponseExperiment.


        :param role_arn: The role_arn of this GetExperimentResponseExperiment.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def state(self):
        """Gets the state of this GetExperimentResponseExperiment.


        :return: The state of this GetExperimentResponseExperiment.
        :rtype: ExperimentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GetExperimentResponseExperiment.


        :param state: The state of this GetExperimentResponseExperiment.
        :type state: ExperimentState
        """

        self._state = state

    @property
    def targets(self):
        """Gets the targets of this GetExperimentResponseExperiment.


        :return: The targets of this GetExperimentResponseExperiment.
        :rtype: Dict
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this GetExperimentResponseExperiment.


        :param targets: The targets of this GetExperimentResponseExperiment.
        :type targets: Dict
        """

        self._targets = targets

    @property
    def actions(self):
        """Gets the actions of this GetExperimentResponseExperiment.


        :return: The actions of this GetExperimentResponseExperiment.
        :rtype: Dict
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this GetExperimentResponseExperiment.


        :param actions: The actions of this GetExperimentResponseExperiment.
        :type actions: Dict
        """

        self._actions = actions

    @property
    def stop_conditions(self):
        """Gets the stop_conditions of this GetExperimentResponseExperiment.


        :return: The stop_conditions of this GetExperimentResponseExperiment.
        :rtype: List
        """
        return self._stop_conditions

    @stop_conditions.setter
    def stop_conditions(self, stop_conditions):
        """Sets the stop_conditions of this GetExperimentResponseExperiment.


        :param stop_conditions: The stop_conditions of this GetExperimentResponseExperiment.
        :type stop_conditions: List
        """

        self._stop_conditions = stop_conditions

    @property
    def creation_time(self):
        """Gets the creation_time of this GetExperimentResponseExperiment.


        :return: The creation_time of this GetExperimentResponseExperiment.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this GetExperimentResponseExperiment.


        :param creation_time: The creation_time of this GetExperimentResponseExperiment.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def start_time(self):
        """Gets the start_time of this GetExperimentResponseExperiment.


        :return: The start_time of this GetExperimentResponseExperiment.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetExperimentResponseExperiment.


        :param start_time: The start_time of this GetExperimentResponseExperiment.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetExperimentResponseExperiment.


        :return: The end_time of this GetExperimentResponseExperiment.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetExperimentResponseExperiment.


        :param end_time: The end_time of this GetExperimentResponseExperiment.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def tags(self):
        """Gets the tags of this GetExperimentResponseExperiment.


        :return: The tags of this GetExperimentResponseExperiment.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetExperimentResponseExperiment.


        :param tags: The tags of this GetExperimentResponseExperiment.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def log_configuration(self):
        """Gets the log_configuration of this GetExperimentResponseExperiment.


        :return: The log_configuration of this GetExperimentResponseExperiment.
        :rtype: ExperimentLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this GetExperimentResponseExperiment.


        :param log_configuration: The log_configuration of this GetExperimentResponseExperiment.
        :type log_configuration: ExperimentLogConfiguration
        """

        self._log_configuration = log_configuration
