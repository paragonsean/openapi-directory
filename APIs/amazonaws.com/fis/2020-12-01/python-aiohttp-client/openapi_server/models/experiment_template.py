# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_template_log_configuration import ExperimentTemplateLogConfiguration
from openapi_server import util


class ExperimentTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, description: str=None, targets: Dict=None, actions: Dict=None, stop_conditions: List=None, creation_time: datetime=None, last_update_time: datetime=None, role_arn: str=None, tags: Dict=None, log_configuration: ExperimentTemplateLogConfiguration=None):
        """ExperimentTemplate - a model defined in OpenAPI

        :param id: The id of this ExperimentTemplate.
        :param description: The description of this ExperimentTemplate.
        :param targets: The targets of this ExperimentTemplate.
        :param actions: The actions of this ExperimentTemplate.
        :param stop_conditions: The stop_conditions of this ExperimentTemplate.
        :param creation_time: The creation_time of this ExperimentTemplate.
        :param last_update_time: The last_update_time of this ExperimentTemplate.
        :param role_arn: The role_arn of this ExperimentTemplate.
        :param tags: The tags of this ExperimentTemplate.
        :param log_configuration: The log_configuration of this ExperimentTemplate.
        """
        self.openapi_types = {
            'id': str,
            'description': str,
            'targets': Dict,
            'actions': Dict,
            'stop_conditions': List,
            'creation_time': datetime,
            'last_update_time': datetime,
            'role_arn': str,
            'tags': Dict,
            'log_configuration': ExperimentTemplateLogConfiguration
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description',
            'targets': 'targets',
            'actions': 'actions',
            'stop_conditions': 'stopConditions',
            'creation_time': 'creationTime',
            'last_update_time': 'lastUpdateTime',
            'role_arn': 'roleArn',
            'tags': 'tags',
            'log_configuration': 'logConfiguration'
        }

        self._id = id
        self._description = description
        self._targets = targets
        self._actions = actions
        self._stop_conditions = stop_conditions
        self._creation_time = creation_time
        self._last_update_time = last_update_time
        self._role_arn = role_arn
        self._tags = tags
        self._log_configuration = log_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExperimentTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExperimentTemplate of this ExperimentTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ExperimentTemplate.


        :return: The id of this ExperimentTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExperimentTemplate.


        :param id: The id of this ExperimentTemplate.
        :type id: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this ExperimentTemplate.


        :return: The description of this ExperimentTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExperimentTemplate.


        :param description: The description of this ExperimentTemplate.
        :type description: str
        """

        self._description = description

    @property
    def targets(self):
        """Gets the targets of this ExperimentTemplate.


        :return: The targets of this ExperimentTemplate.
        :rtype: Dict
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ExperimentTemplate.


        :param targets: The targets of this ExperimentTemplate.
        :type targets: Dict
        """

        self._targets = targets

    @property
    def actions(self):
        """Gets the actions of this ExperimentTemplate.


        :return: The actions of this ExperimentTemplate.
        :rtype: Dict
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ExperimentTemplate.


        :param actions: The actions of this ExperimentTemplate.
        :type actions: Dict
        """

        self._actions = actions

    @property
    def stop_conditions(self):
        """Gets the stop_conditions of this ExperimentTemplate.


        :return: The stop_conditions of this ExperimentTemplate.
        :rtype: List
        """
        return self._stop_conditions

    @stop_conditions.setter
    def stop_conditions(self, stop_conditions):
        """Sets the stop_conditions of this ExperimentTemplate.


        :param stop_conditions: The stop_conditions of this ExperimentTemplate.
        :type stop_conditions: List
        """

        self._stop_conditions = stop_conditions

    @property
    def creation_time(self):
        """Gets the creation_time of this ExperimentTemplate.


        :return: The creation_time of this ExperimentTemplate.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ExperimentTemplate.


        :param creation_time: The creation_time of this ExperimentTemplate.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this ExperimentTemplate.


        :return: The last_update_time of this ExperimentTemplate.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this ExperimentTemplate.


        :param last_update_time: The last_update_time of this ExperimentTemplate.
        :type last_update_time: datetime
        """

        self._last_update_time = last_update_time

    @property
    def role_arn(self):
        """Gets the role_arn of this ExperimentTemplate.


        :return: The role_arn of this ExperimentTemplate.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this ExperimentTemplate.


        :param role_arn: The role_arn of this ExperimentTemplate.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this ExperimentTemplate.


        :return: The tags of this ExperimentTemplate.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ExperimentTemplate.


        :param tags: The tags of this ExperimentTemplate.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def log_configuration(self):
        """Gets the log_configuration of this ExperimentTemplate.


        :return: The log_configuration of this ExperimentTemplate.
        :rtype: ExperimentTemplateLogConfiguration
        """
        return self._log_configuration

    @log_configuration.setter
    def log_configuration(self, log_configuration):
        """Sets the log_configuration of this ExperimentTemplate.


        :param log_configuration: The log_configuration of this ExperimentTemplate.
        :type log_configuration: ExperimentTemplateLogConfiguration
        """

        self._log_configuration = log_configuration
