# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_state import ExperimentState
from openapi_server import util


class ExperimentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, experiment_template_id: str=None, state: ExperimentState=None, creation_time: datetime=None, tags: Dict=None):
        """ExperimentSummary - a model defined in OpenAPI

        :param id: The id of this ExperimentSummary.
        :param experiment_template_id: The experiment_template_id of this ExperimentSummary.
        :param state: The state of this ExperimentSummary.
        :param creation_time: The creation_time of this ExperimentSummary.
        :param tags: The tags of this ExperimentSummary.
        """
        self.openapi_types = {
            'id': str,
            'experiment_template_id': str,
            'state': ExperimentState,
            'creation_time': datetime,
            'tags': Dict
        }

        self.attribute_map = {
            'id': 'id',
            'experiment_template_id': 'experimentTemplateId',
            'state': 'state',
            'creation_time': 'creationTime',
            'tags': 'tags'
        }

        self._id = id
        self._experiment_template_id = experiment_template_id
        self._state = state
        self._creation_time = creation_time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExperimentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExperimentSummary of this ExperimentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ExperimentSummary.


        :return: The id of this ExperimentSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExperimentSummary.


        :param id: The id of this ExperimentSummary.
        :type id: str
        """

        self._id = id

    @property
    def experiment_template_id(self):
        """Gets the experiment_template_id of this ExperimentSummary.


        :return: The experiment_template_id of this ExperimentSummary.
        :rtype: str
        """
        return self._experiment_template_id

    @experiment_template_id.setter
    def experiment_template_id(self, experiment_template_id):
        """Sets the experiment_template_id of this ExperimentSummary.


        :param experiment_template_id: The experiment_template_id of this ExperimentSummary.
        :type experiment_template_id: str
        """

        self._experiment_template_id = experiment_template_id

    @property
    def state(self):
        """Gets the state of this ExperimentSummary.


        :return: The state of this ExperimentSummary.
        :rtype: ExperimentState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExperimentSummary.


        :param state: The state of this ExperimentSummary.
        :type state: ExperimentState
        """

        self._state = state

    @property
    def creation_time(self):
        """Gets the creation_time of this ExperimentSummary.


        :return: The creation_time of this ExperimentSummary.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ExperimentSummary.


        :param creation_time: The creation_time of this ExperimentSummary.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def tags(self):
        """Gets the tags of this ExperimentSummary.


        :return: The tags of this ExperimentSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ExperimentSummary.


        :param tags: The tags of this ExperimentSummary.
        :type tags: Dict
        """

        self._tags = tags
