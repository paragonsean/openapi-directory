# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_action_state import ExperimentActionState
from openapi_server import util


class ExperimentAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, description: str=None, parameters: Dict=None, targets: Dict=None, start_after: List=None, state: ExperimentActionState=None, start_time: datetime=None, end_time: datetime=None):
        """ExperimentAction - a model defined in OpenAPI

        :param action_id: The action_id of this ExperimentAction.
        :param description: The description of this ExperimentAction.
        :param parameters: The parameters of this ExperimentAction.
        :param targets: The targets of this ExperimentAction.
        :param start_after: The start_after of this ExperimentAction.
        :param state: The state of this ExperimentAction.
        :param start_time: The start_time of this ExperimentAction.
        :param end_time: The end_time of this ExperimentAction.
        """
        self.openapi_types = {
            'action_id': str,
            'description': str,
            'parameters': Dict,
            'targets': Dict,
            'start_after': List,
            'state': ExperimentActionState,
            'start_time': datetime,
            'end_time': datetime
        }

        self.attribute_map = {
            'action_id': 'actionId',
            'description': 'description',
            'parameters': 'parameters',
            'targets': 'targets',
            'start_after': 'startAfter',
            'state': 'state',
            'start_time': 'startTime',
            'end_time': 'endTime'
        }

        self._action_id = action_id
        self._description = description
        self._parameters = parameters
        self._targets = targets
        self._start_after = start_after
        self._state = state
        self._start_time = start_time
        self._end_time = end_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExperimentAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExperimentAction of this ExperimentAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this ExperimentAction.


        :return: The action_id of this ExperimentAction.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ExperimentAction.


        :param action_id: The action_id of this ExperimentAction.
        :type action_id: str
        """

        self._action_id = action_id

    @property
    def description(self):
        """Gets the description of this ExperimentAction.


        :return: The description of this ExperimentAction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExperimentAction.


        :param description: The description of this ExperimentAction.
        :type description: str
        """

        self._description = description

    @property
    def parameters(self):
        """Gets the parameters of this ExperimentAction.


        :return: The parameters of this ExperimentAction.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExperimentAction.


        :param parameters: The parameters of this ExperimentAction.
        :type parameters: Dict
        """

        self._parameters = parameters

    @property
    def targets(self):
        """Gets the targets of this ExperimentAction.


        :return: The targets of this ExperimentAction.
        :rtype: Dict
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ExperimentAction.


        :param targets: The targets of this ExperimentAction.
        :type targets: Dict
        """

        self._targets = targets

    @property
    def start_after(self):
        """Gets the start_after of this ExperimentAction.


        :return: The start_after of this ExperimentAction.
        :rtype: List
        """
        return self._start_after

    @start_after.setter
    def start_after(self, start_after):
        """Sets the start_after of this ExperimentAction.


        :param start_after: The start_after of this ExperimentAction.
        :type start_after: List
        """

        self._start_after = start_after

    @property
    def state(self):
        """Gets the state of this ExperimentAction.


        :return: The state of this ExperimentAction.
        :rtype: ExperimentActionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExperimentAction.


        :param state: The state of this ExperimentAction.
        :type state: ExperimentActionState
        """

        self._state = state

    @property
    def start_time(self):
        """Gets the start_time of this ExperimentAction.


        :return: The start_time of this ExperimentAction.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ExperimentAction.


        :param start_time: The start_time of this ExperimentAction.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ExperimentAction.


        :return: The end_time of this ExperimentAction.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ExperimentAction.


        :param end_time: The end_time of this ExperimentAction.
        :type end_time: datetime
        """

        self._end_time = end_time
