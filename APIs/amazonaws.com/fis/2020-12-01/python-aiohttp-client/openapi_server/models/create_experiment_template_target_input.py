# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateExperimentTemplateTargetInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, resource_arns: List=None, resource_tags: Dict=None, filters: List=None, selection_mode: str=None, parameters: Dict=None):
        """CreateExperimentTemplateTargetInput - a model defined in OpenAPI

        :param resource_type: The resource_type of this CreateExperimentTemplateTargetInput.
        :param resource_arns: The resource_arns of this CreateExperimentTemplateTargetInput.
        :param resource_tags: The resource_tags of this CreateExperimentTemplateTargetInput.
        :param filters: The filters of this CreateExperimentTemplateTargetInput.
        :param selection_mode: The selection_mode of this CreateExperimentTemplateTargetInput.
        :param parameters: The parameters of this CreateExperimentTemplateTargetInput.
        """
        self.openapi_types = {
            'resource_type': str,
            'resource_arns': List,
            'resource_tags': Dict,
            'filters': List,
            'selection_mode': str,
            'parameters': Dict
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'resource_arns': 'resourceArns',
            'resource_tags': 'resourceTags',
            'filters': 'filters',
            'selection_mode': 'selectionMode',
            'parameters': 'parameters'
        }

        self._resource_type = resource_type
        self._resource_arns = resource_arns
        self._resource_tags = resource_tags
        self._filters = filters
        self._selection_mode = selection_mode
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExperimentTemplateTargetInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExperimentTemplateTargetInput of this CreateExperimentTemplateTargetInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this CreateExperimentTemplateTargetInput.


        :return: The resource_type of this CreateExperimentTemplateTargetInput.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreateExperimentTemplateTargetInput.


        :param resource_type: The resource_type of this CreateExperimentTemplateTargetInput.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def resource_arns(self):
        """Gets the resource_arns of this CreateExperimentTemplateTargetInput.


        :return: The resource_arns of this CreateExperimentTemplateTargetInput.
        :rtype: List
        """
        return self._resource_arns

    @resource_arns.setter
    def resource_arns(self, resource_arns):
        """Sets the resource_arns of this CreateExperimentTemplateTargetInput.


        :param resource_arns: The resource_arns of this CreateExperimentTemplateTargetInput.
        :type resource_arns: List
        """

        self._resource_arns = resource_arns

    @property
    def resource_tags(self):
        """Gets the resource_tags of this CreateExperimentTemplateTargetInput.


        :return: The resource_tags of this CreateExperimentTemplateTargetInput.
        :rtype: Dict
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this CreateExperimentTemplateTargetInput.


        :param resource_tags: The resource_tags of this CreateExperimentTemplateTargetInput.
        :type resource_tags: Dict
        """

        self._resource_tags = resource_tags

    @property
    def filters(self):
        """Gets the filters of this CreateExperimentTemplateTargetInput.


        :return: The filters of this CreateExperimentTemplateTargetInput.
        :rtype: List
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this CreateExperimentTemplateTargetInput.


        :param filters: The filters of this CreateExperimentTemplateTargetInput.
        :type filters: List
        """

        self._filters = filters

    @property
    def selection_mode(self):
        """Gets the selection_mode of this CreateExperimentTemplateTargetInput.


        :return: The selection_mode of this CreateExperimentTemplateTargetInput.
        :rtype: str
        """
        return self._selection_mode

    @selection_mode.setter
    def selection_mode(self, selection_mode):
        """Sets the selection_mode of this CreateExperimentTemplateTargetInput.


        :param selection_mode: The selection_mode of this CreateExperimentTemplateTargetInput.
        :type selection_mode: str
        """
        if selection_mode is None:
            raise ValueError("Invalid value for `selection_mode`, must not be `None`")

        self._selection_mode = selection_mode

    @property
    def parameters(self):
        """Gets the parameters of this CreateExperimentTemplateTargetInput.


        :return: The parameters of this CreateExperimentTemplateTargetInput.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CreateExperimentTemplateTargetInput.


        :param parameters: The parameters of this CreateExperimentTemplateTargetInput.
        :type parameters: Dict
        """

        self._parameters = parameters
