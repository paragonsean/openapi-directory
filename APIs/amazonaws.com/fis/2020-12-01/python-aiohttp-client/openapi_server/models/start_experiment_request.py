# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, experiment_template_id: str=None, tags: Dict[str, str]=None):
        """StartExperimentRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartExperimentRequest.
        :param experiment_template_id: The experiment_template_id of this StartExperimentRequest.
        :param tags: The tags of this StartExperimentRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'experiment_template_id': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'experiment_template_id': 'experimentTemplateId',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._experiment_template_id = experiment_template_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartExperiment_request of this StartExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartExperimentRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_token of this StartExperimentRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartExperimentRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this StartExperimentRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 1024:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `1024`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'[\S]+', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/[\S]+/`")

        self._client_token = client_token

    @property
    def experiment_template_id(self):
        """Gets the experiment_template_id of this StartExperimentRequest.

        The ID of the experiment template.

        :return: The experiment_template_id of this StartExperimentRequest.
        :rtype: str
        """
        return self._experiment_template_id

    @experiment_template_id.setter
    def experiment_template_id(self, experiment_template_id):
        """Sets the experiment_template_id of this StartExperimentRequest.

        The ID of the experiment template.

        :param experiment_template_id: The experiment_template_id of this StartExperimentRequest.
        :type experiment_template_id: str
        """
        if experiment_template_id is None:
            raise ValueError("Invalid value for `experiment_template_id`, must not be `None`")
        if experiment_template_id is not None and len(experiment_template_id) > 64:
            raise ValueError("Invalid value for `experiment_template_id`, length must be less than or equal to `64`")
        if experiment_template_id is not None and not re.search(r'[\S]+', experiment_template_id):
            raise ValueError("Invalid value for `experiment_template_id`, must be a follow pattern or equal to `/[\S]+/`")

        self._experiment_template_id = experiment_template_id

    @property
    def tags(self):
        """Gets the tags of this StartExperimentRequest.

        The tags to apply to the experiment.

        :return: The tags of this StartExperimentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartExperimentRequest.

        The tags to apply to the experiment.

        :param tags: The tags of this StartExperimentRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")

        self._tags = tags
