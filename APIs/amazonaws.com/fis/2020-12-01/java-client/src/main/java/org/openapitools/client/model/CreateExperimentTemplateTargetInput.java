/*
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both ARNs and tags.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fis/latest/userguide/targets.html\&quot;&gt;Targets&lt;/a&gt; in the &lt;i&gt;Fault Injection Simulator User Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:41.845900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateExperimentTemplateTargetInput {
  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_ARNS = "resourceArns";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARNS)
  private List resourceArns;

  public static final String SERIALIZED_NAME_RESOURCE_TAGS = "resourceTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TAGS)
  private Map resourceTags;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List filters;

  public static final String SERIALIZED_NAME_SELECTION_MODE = "selectionMode";
  @SerializedName(SERIALIZED_NAME_SELECTION_MODE)
  private String selectionMode;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public CreateExperimentTemplateTargetInput() {
  }

  public CreateExperimentTemplateTargetInput resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nonnull
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public CreateExperimentTemplateTargetInput resourceArns(List resourceArns) {
    this.resourceArns = resourceArns;
    return this;
  }

  /**
   * Get resourceArns
   * @return resourceArns
   */
  @javax.annotation.Nullable
  public List getResourceArns() {
    return resourceArns;
  }

  public void setResourceArns(List resourceArns) {
    this.resourceArns = resourceArns;
  }


  public CreateExperimentTemplateTargetInput resourceTags(Map resourceTags) {
    this.resourceTags = resourceTags;
    return this;
  }

  /**
   * Get resourceTags
   * @return resourceTags
   */
  @javax.annotation.Nullable
  public Map getResourceTags() {
    return resourceTags;
  }

  public void setResourceTags(Map resourceTags) {
    this.resourceTags = resourceTags;
  }


  public CreateExperimentTemplateTargetInput filters(List filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public List getFilters() {
    return filters;
  }

  public void setFilters(List filters) {
    this.filters = filters;
  }


  public CreateExperimentTemplateTargetInput selectionMode(String selectionMode) {
    this.selectionMode = selectionMode;
    return this;
  }

  /**
   * Get selectionMode
   * @return selectionMode
   */
  @javax.annotation.Nonnull
  public String getSelectionMode() {
    return selectionMode;
  }

  public void setSelectionMode(String selectionMode) {
    this.selectionMode = selectionMode;
  }


  public CreateExperimentTemplateTargetInput parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateExperimentTemplateTargetInput createExperimentTemplateTargetInput = (CreateExperimentTemplateTargetInput) o;
    return Objects.equals(this.resourceType, createExperimentTemplateTargetInput.resourceType) &&
        Objects.equals(this.resourceArns, createExperimentTemplateTargetInput.resourceArns) &&
        Objects.equals(this.resourceTags, createExperimentTemplateTargetInput.resourceTags) &&
        Objects.equals(this.filters, createExperimentTemplateTargetInput.filters) &&
        Objects.equals(this.selectionMode, createExperimentTemplateTargetInput.selectionMode) &&
        Objects.equals(this.parameters, createExperimentTemplateTargetInput.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceType, resourceArns, resourceTags, filters, selectionMode, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateExperimentTemplateTargetInput {\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceArns: ").append(toIndentedString(resourceArns)).append("\n");
    sb.append("    resourceTags: ").append(toIndentedString(resourceTags)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    selectionMode: ").append(toIndentedString(selectionMode)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceType");
    openapiFields.add("resourceArns");
    openapiFields.add("resourceTags");
    openapiFields.add("filters");
    openapiFields.add("selectionMode");
    openapiFields.add("parameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceType");
    openapiRequiredFields.add("selectionMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateExperimentTemplateTargetInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateExperimentTemplateTargetInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateExperimentTemplateTargetInput is not found in the empty JSON string", CreateExperimentTemplateTargetInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateExperimentTemplateTargetInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateExperimentTemplateTargetInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateExperimentTemplateTargetInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `resourceType`
      String.validateJsonElement(jsonObj.get("resourceType"));
      // validate the optional field `resourceArns`
      if (jsonObj.get("resourceArns") != null && !jsonObj.get("resourceArns").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resourceArns"));
      }
      // validate the optional field `resourceTags`
      if (jsonObj.get("resourceTags") != null && !jsonObj.get("resourceTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("resourceTags"));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("filters"));
      }
      // validate the required field `selectionMode`
      String.validateJsonElement(jsonObj.get("selectionMode"));
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("parameters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateExperimentTemplateTargetInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateExperimentTemplateTargetInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateExperimentTemplateTargetInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateExperimentTemplateTargetInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateExperimentTemplateTargetInput>() {
           @Override
           public void write(JsonWriter out, CreateExperimentTemplateTargetInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateExperimentTemplateTargetInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateExperimentTemplateTargetInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateExperimentTemplateTargetInput
   * @throws IOException if the JSON string is invalid with respect to CreateExperimentTemplateTargetInput
   */
  public static CreateExperimentTemplateTargetInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateExperimentTemplateTargetInput.class);
  }

  /**
   * Convert an instance of CreateExperimentTemplateTargetInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

