/*
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ExperimentTemplateLogConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an experiment template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:41.845900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExperimentTemplate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private Map targets;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private Map actions;

  public static final String SERIALIZED_NAME_STOP_CONDITIONS = "stopConditions";
  @SerializedName(SERIALIZED_NAME_STOP_CONDITIONS)
  private List stopConditions;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_LOG_CONFIGURATION = "logConfiguration";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGURATION)
  private ExperimentTemplateLogConfiguration logConfiguration;

  public ExperimentTemplate() {
  }

  public ExperimentTemplate id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ExperimentTemplate description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ExperimentTemplate targets(Map targets) {
    this.targets = targets;
    return this;
  }

  /**
   * Get targets
   * @return targets
   */
  @javax.annotation.Nullable
  public Map getTargets() {
    return targets;
  }

  public void setTargets(Map targets) {
    this.targets = targets;
  }


  public ExperimentTemplate actions(Map actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public Map getActions() {
    return actions;
  }

  public void setActions(Map actions) {
    this.actions = actions;
  }


  public ExperimentTemplate stopConditions(List stopConditions) {
    this.stopConditions = stopConditions;
    return this;
  }

  /**
   * Get stopConditions
   * @return stopConditions
   */
  @javax.annotation.Nullable
  public List getStopConditions() {
    return stopConditions;
  }

  public void setStopConditions(List stopConditions) {
    this.stopConditions = stopConditions;
  }


  public ExperimentTemplate creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ExperimentTemplate lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Get lastUpdateTime
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public ExperimentTemplate roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * Get roleArn
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public ExperimentTemplate tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public ExperimentTemplate logConfiguration(ExperimentTemplateLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
    return this;
  }

  /**
   * Get logConfiguration
   * @return logConfiguration
   */
  @javax.annotation.Nullable
  public ExperimentTemplateLogConfiguration getLogConfiguration() {
    return logConfiguration;
  }

  public void setLogConfiguration(ExperimentTemplateLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExperimentTemplate experimentTemplate = (ExperimentTemplate) o;
    return Objects.equals(this.id, experimentTemplate.id) &&
        Objects.equals(this.description, experimentTemplate.description) &&
        Objects.equals(this.targets, experimentTemplate.targets) &&
        Objects.equals(this.actions, experimentTemplate.actions) &&
        Objects.equals(this.stopConditions, experimentTemplate.stopConditions) &&
        Objects.equals(this.creationTime, experimentTemplate.creationTime) &&
        Objects.equals(this.lastUpdateTime, experimentTemplate.lastUpdateTime) &&
        Objects.equals(this.roleArn, experimentTemplate.roleArn) &&
        Objects.equals(this.tags, experimentTemplate.tags) &&
        Objects.equals(this.logConfiguration, experimentTemplate.logConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, description, targets, actions, stopConditions, creationTime, lastUpdateTime, roleArn, tags, logConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExperimentTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    stopConditions: ").append(toIndentedString(stopConditions)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    logConfiguration: ").append(toIndentedString(logConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("description");
    openapiFields.add("targets");
    openapiFields.add("actions");
    openapiFields.add("stopConditions");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("roleArn");
    openapiFields.add("tags");
    openapiFields.add("logConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExperimentTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExperimentTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExperimentTemplate is not found in the empty JSON string", ExperimentTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExperimentTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExperimentTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `targets`
      if (jsonObj.get("targets") != null && !jsonObj.get("targets").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("targets"));
      }
      // validate the optional field `actions`
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("actions"));
      }
      // validate the optional field `stopConditions`
      if (jsonObj.get("stopConditions") != null && !jsonObj.get("stopConditions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("stopConditions"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdateTime`
      if (jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdateTime"));
      }
      // validate the optional field `roleArn`
      if (jsonObj.get("roleArn") != null && !jsonObj.get("roleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("roleArn"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `logConfiguration`
      if (jsonObj.get("logConfiguration") != null && !jsonObj.get("logConfiguration").isJsonNull()) {
        ExperimentTemplateLogConfiguration.validateJsonElement(jsonObj.get("logConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExperimentTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExperimentTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExperimentTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExperimentTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<ExperimentTemplate>() {
           @Override
           public void write(JsonWriter out, ExperimentTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExperimentTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExperimentTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExperimentTemplate
   * @throws IOException if the JSON string is invalid with respect to ExperimentTemplate
   */
  public static ExperimentTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExperimentTemplate.class);
  }

  /**
   * Convert an instance of ExperimentTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

