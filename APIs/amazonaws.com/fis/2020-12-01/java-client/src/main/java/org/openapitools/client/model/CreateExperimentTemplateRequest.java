/*
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateExperimentTemplateActionInput;
import org.openapitools.client.model.CreateExperimentTemplateRequestLogConfiguration;
import org.openapitools.client.model.CreateExperimentTemplateStopConditionInput;
import org.openapitools.client.model.CreateExperimentTemplateTargetInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateExperimentTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:41.845900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateExperimentTemplateRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STOP_CONDITIONS = "stopConditions";
  @SerializedName(SERIALIZED_NAME_STOP_CONDITIONS)
  private List<CreateExperimentTemplateStopConditionInput> stopConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETS = "targets";
  @SerializedName(SERIALIZED_NAME_TARGETS)
  private Map<String, CreateExperimentTemplateTargetInput> targets = new HashMap<>();

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private Map<String, CreateExperimentTemplateActionInput> actions = new HashMap<>();

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_LOG_CONFIGURATION = "logConfiguration";
  @SerializedName(SERIALIZED_NAME_LOG_CONFIGURATION)
  private CreateExperimentTemplateRequestLogConfiguration logConfiguration;

  public CreateExperimentTemplateRequest() {
  }

  public CreateExperimentTemplateRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateExperimentTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the experiment template.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateExperimentTemplateRequest stopConditions(List<CreateExperimentTemplateStopConditionInput> stopConditions) {
    this.stopConditions = stopConditions;
    return this;
  }

  public CreateExperimentTemplateRequest addStopConditionsItem(CreateExperimentTemplateStopConditionInput stopConditionsItem) {
    if (this.stopConditions == null) {
      this.stopConditions = new ArrayList<>();
    }
    this.stopConditions.add(stopConditionsItem);
    return this;
  }

  /**
   * The stop conditions.
   * @return stopConditions
   */
  @javax.annotation.Nonnull
  public List<CreateExperimentTemplateStopConditionInput> getStopConditions() {
    return stopConditions;
  }

  public void setStopConditions(List<CreateExperimentTemplateStopConditionInput> stopConditions) {
    this.stopConditions = stopConditions;
  }


  public CreateExperimentTemplateRequest targets(Map<String, CreateExperimentTemplateTargetInput> targets) {
    this.targets = targets;
    return this;
  }

  public CreateExperimentTemplateRequest putTargetsItem(String key, CreateExperimentTemplateTargetInput targetsItem) {
    if (this.targets == null) {
      this.targets = new HashMap<>();
    }
    this.targets.put(key, targetsItem);
    return this;
  }

  /**
   * The targets for the experiment.
   * @return targets
   */
  @javax.annotation.Nullable
  public Map<String, CreateExperimentTemplateTargetInput> getTargets() {
    return targets;
  }

  public void setTargets(Map<String, CreateExperimentTemplateTargetInput> targets) {
    this.targets = targets;
  }


  public CreateExperimentTemplateRequest actions(Map<String, CreateExperimentTemplateActionInput> actions) {
    this.actions = actions;
    return this;
  }

  public CreateExperimentTemplateRequest putActionsItem(String key, CreateExperimentTemplateActionInput actionsItem) {
    if (this.actions == null) {
      this.actions = new HashMap<>();
    }
    this.actions.put(key, actionsItem);
    return this;
  }

  /**
   * The actions for the experiment.
   * @return actions
   */
  @javax.annotation.Nonnull
  public Map<String, CreateExperimentTemplateActionInput> getActions() {
    return actions;
  }

  public void setActions(Map<String, CreateExperimentTemplateActionInput> actions) {
    this.actions = actions;
  }


  public CreateExperimentTemplateRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateExperimentTemplateRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateExperimentTemplateRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags to apply to the experiment template.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateExperimentTemplateRequest logConfiguration(CreateExperimentTemplateRequestLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
    return this;
  }

  /**
   * Get logConfiguration
   * @return logConfiguration
   */
  @javax.annotation.Nullable
  public CreateExperimentTemplateRequestLogConfiguration getLogConfiguration() {
    return logConfiguration;
  }

  public void setLogConfiguration(CreateExperimentTemplateRequestLogConfiguration logConfiguration) {
    this.logConfiguration = logConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateExperimentTemplateRequest createExperimentTemplateRequest = (CreateExperimentTemplateRequest) o;
    return Objects.equals(this.clientToken, createExperimentTemplateRequest.clientToken) &&
        Objects.equals(this.description, createExperimentTemplateRequest.description) &&
        Objects.equals(this.stopConditions, createExperimentTemplateRequest.stopConditions) &&
        Objects.equals(this.targets, createExperimentTemplateRequest.targets) &&
        Objects.equals(this.actions, createExperimentTemplateRequest.actions) &&
        Objects.equals(this.roleArn, createExperimentTemplateRequest.roleArn) &&
        Objects.equals(this.tags, createExperimentTemplateRequest.tags) &&
        Objects.equals(this.logConfiguration, createExperimentTemplateRequest.logConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, description, stopConditions, targets, actions, roleArn, tags, logConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateExperimentTemplateRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    stopConditions: ").append(toIndentedString(stopConditions)).append("\n");
    sb.append("    targets: ").append(toIndentedString(targets)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    logConfiguration: ").append(toIndentedString(logConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("description");
    openapiFields.add("stopConditions");
    openapiFields.add("targets");
    openapiFields.add("actions");
    openapiFields.add("roleArn");
    openapiFields.add("tags");
    openapiFields.add("logConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientToken");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("stopConditions");
    openapiRequiredFields.add("actions");
    openapiRequiredFields.add("roleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateExperimentTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateExperimentTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateExperimentTemplateRequest is not found in the empty JSON string", CreateExperimentTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateExperimentTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateExperimentTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateExperimentTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("stopConditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopConditions` to be an array in the JSON string but got `%s`", jsonObj.get("stopConditions").toString()));
      }

      JsonArray jsonArraystopConditions = jsonObj.getAsJsonArray("stopConditions");
      // validate the required field `stopConditions` (array)
      for (int i = 0; i < jsonArraystopConditions.size(); i++) {
        CreateExperimentTemplateStopConditionInput.validateJsonElement(jsonArraystopConditions.get(i));
      };
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      // validate the optional field `logConfiguration`
      if (jsonObj.get("logConfiguration") != null && !jsonObj.get("logConfiguration").isJsonNull()) {
        CreateExperimentTemplateRequestLogConfiguration.validateJsonElement(jsonObj.get("logConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateExperimentTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateExperimentTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateExperimentTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateExperimentTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateExperimentTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateExperimentTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateExperimentTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateExperimentTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateExperimentTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateExperimentTemplateRequest
   */
  public static CreateExperimentTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateExperimentTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateExperimentTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

