/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateExperimentTemplateRequestLogConfigurationCloudWatchLogsConfiguration from './CreateExperimentTemplateRequestLogConfigurationCloudWatchLogsConfiguration';
import CreateExperimentTemplateRequestLogConfigurationS3Configuration from './CreateExperimentTemplateRequestLogConfigurationS3Configuration';
import UpdateExperimentTemplateLogConfigurationInput from './UpdateExperimentTemplateLogConfigurationInput';

/**
 * The UpdateExperimentTemplateRequestLogConfiguration model module.
 * @module model/UpdateExperimentTemplateRequestLogConfiguration
 * @version 2020-12-01
 */
class UpdateExperimentTemplateRequestLogConfiguration {
    /**
     * Constructs a new <code>UpdateExperimentTemplateRequestLogConfiguration</code>.
     * @alias module:model/UpdateExperimentTemplateRequestLogConfiguration
     * @implements module:model/UpdateExperimentTemplateLogConfigurationInput
     */
    constructor() { 
        UpdateExperimentTemplateLogConfigurationInput.initialize(this);
        UpdateExperimentTemplateRequestLogConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateExperimentTemplateRequestLogConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateExperimentTemplateRequestLogConfiguration} obj Optional instance to populate.
     * @return {module:model/UpdateExperimentTemplateRequestLogConfiguration} The populated <code>UpdateExperimentTemplateRequestLogConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateExperimentTemplateRequestLogConfiguration();
            UpdateExperimentTemplateLogConfigurationInput.constructFromObject(data, obj);

            if (data.hasOwnProperty('cloudWatchLogsConfiguration')) {
                obj['cloudWatchLogsConfiguration'] = CreateExperimentTemplateRequestLogConfigurationCloudWatchLogsConfiguration.constructFromObject(data['cloudWatchLogsConfiguration']);
            }
            if (data.hasOwnProperty('s3Configuration')) {
                obj['s3Configuration'] = CreateExperimentTemplateRequestLogConfigurationS3Configuration.constructFromObject(data['s3Configuration']);
            }
            if (data.hasOwnProperty('logSchemaVersion')) {
                obj['logSchemaVersion'] = ApiClient.convertToType(data['logSchemaVersion'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateExperimentTemplateRequestLogConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateExperimentTemplateRequestLogConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cloudWatchLogsConfiguration`
        if (data['cloudWatchLogsConfiguration']) { // data not null
          CreateExperimentTemplateRequestLogConfigurationCloudWatchLogsConfiguration.validateJSON(data['cloudWatchLogsConfiguration']);
        }
        // validate the optional field `s3Configuration`
        if (data['s3Configuration']) { // data not null
          CreateExperimentTemplateRequestLogConfigurationS3Configuration.validateJSON(data['s3Configuration']);
        }
        // validate the optional field `logSchemaVersion`
        if (data['logSchemaVersion']) { // data not null
          Number.validateJSON(data['logSchemaVersion']);
        }

        return true;
    }


}



/**
 * @member {module:model/CreateExperimentTemplateRequestLogConfigurationCloudWatchLogsConfiguration} cloudWatchLogsConfiguration
 */
UpdateExperimentTemplateRequestLogConfiguration.prototype['cloudWatchLogsConfiguration'] = undefined;

/**
 * @member {module:model/CreateExperimentTemplateRequestLogConfigurationS3Configuration} s3Configuration
 */
UpdateExperimentTemplateRequestLogConfiguration.prototype['s3Configuration'] = undefined;

/**
 * @member {Number} logSchemaVersion
 */
UpdateExperimentTemplateRequestLogConfiguration.prototype['logSchemaVersion'] = undefined;


// Implement UpdateExperimentTemplateLogConfigurationInput interface:
/**
 * @member {module:model/CreateExperimentTemplateRequestLogConfigurationCloudWatchLogsConfiguration} cloudWatchLogsConfiguration
 */
UpdateExperimentTemplateLogConfigurationInput.prototype['cloudWatchLogsConfiguration'] = undefined;
/**
 * @member {module:model/CreateExperimentTemplateRequestLogConfigurationS3Configuration} s3Configuration
 */
UpdateExperimentTemplateLogConfigurationInput.prototype['s3Configuration'] = undefined;
/**
 * @member {Number} logSchemaVersion
 */
UpdateExperimentTemplateLogConfigurationInput.prototype['logSchemaVersion'] = undefined;




export default UpdateExperimentTemplateRequestLogConfiguration;

