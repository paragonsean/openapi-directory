/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateExperimentTemplateActionInput from './CreateExperimentTemplateActionInput';
import CreateExperimentTemplateRequestLogConfiguration from './CreateExperimentTemplateRequestLogConfiguration';
import CreateExperimentTemplateStopConditionInput from './CreateExperimentTemplateStopConditionInput';
import CreateExperimentTemplateTargetInput from './CreateExperimentTemplateTargetInput';

/**
 * The CreateExperimentTemplateRequest model module.
 * @module model/CreateExperimentTemplateRequest
 * @version 2020-12-01
 */
class CreateExperimentTemplateRequest {
    /**
     * Constructs a new <code>CreateExperimentTemplateRequest</code>.
     * @alias module:model/CreateExperimentTemplateRequest
     * @param clientToken {String} Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
     * @param description {String} A description for the experiment template.
     * @param stopConditions {Array.<module:model/CreateExperimentTemplateStopConditionInput>} The stop conditions.
     * @param actions {Object.<String, module:model/CreateExperimentTemplateActionInput>} The actions for the experiment.
     * @param roleArn {String} The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
     */
    constructor(clientToken, description, stopConditions, actions, roleArn) { 
        
        CreateExperimentTemplateRequest.initialize(this, clientToken, description, stopConditions, actions, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientToken, description, stopConditions, actions, roleArn) { 
        obj['clientToken'] = clientToken;
        obj['description'] = description;
        obj['stopConditions'] = stopConditions;
        obj['actions'] = actions;
        obj['roleArn'] = roleArn;
    }

    /**
     * Constructs a <code>CreateExperimentTemplateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateExperimentTemplateRequest} obj Optional instance to populate.
     * @return {module:model/CreateExperimentTemplateRequest} The populated <code>CreateExperimentTemplateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateExperimentTemplateRequest();

            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('stopConditions')) {
                obj['stopConditions'] = ApiClient.convertToType(data['stopConditions'], [CreateExperimentTemplateStopConditionInput]);
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], {'String': CreateExperimentTemplateTargetInput});
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], {'String': CreateExperimentTemplateActionInput});
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('logConfiguration')) {
                obj['logConfiguration'] = CreateExperimentTemplateRequestLogConfiguration.constructFromObject(data['logConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateExperimentTemplateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateExperimentTemplateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateExperimentTemplateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['stopConditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['stopConditions'])) {
                throw new Error("Expected the field `stopConditions` to be an array in the JSON data but got " + data['stopConditions']);
            }
            // validate the optional field `stopConditions` (array)
            for (const item of data['stopConditions']) {
                CreateExperimentTemplateStopConditionInput.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }
        // validate the optional field `logConfiguration`
        if (data['logConfiguration']) { // data not null
          CreateExperimentTemplateRequestLogConfiguration.validateJSON(data['logConfiguration']);
        }

        return true;
    }


}

CreateExperimentTemplateRequest.RequiredProperties = ["clientToken", "description", "stopConditions", "actions", "roleArn"];

/**
 * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
 * @member {String} clientToken
 */
CreateExperimentTemplateRequest.prototype['clientToken'] = undefined;

/**
 * A description for the experiment template.
 * @member {String} description
 */
CreateExperimentTemplateRequest.prototype['description'] = undefined;

/**
 * The stop conditions.
 * @member {Array.<module:model/CreateExperimentTemplateStopConditionInput>} stopConditions
 */
CreateExperimentTemplateRequest.prototype['stopConditions'] = undefined;

/**
 * The targets for the experiment.
 * @member {Object.<String, module:model/CreateExperimentTemplateTargetInput>} targets
 */
CreateExperimentTemplateRequest.prototype['targets'] = undefined;

/**
 * The actions for the experiment.
 * @member {Object.<String, module:model/CreateExperimentTemplateActionInput>} actions
 */
CreateExperimentTemplateRequest.prototype['actions'] = undefined;

/**
 * The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.
 * @member {String} roleArn
 */
CreateExperimentTemplateRequest.prototype['roleArn'] = undefined;

/**
 * The tags to apply to the experiment template.
 * @member {Object.<String, String>} tags
 */
CreateExperimentTemplateRequest.prototype['tags'] = undefined;

/**
 * @member {module:model/CreateExperimentTemplateRequestLogConfiguration} logConfiguration
 */
CreateExperimentTemplateRequest.prototype['logConfiguration'] = undefined;






export default CreateExperimentTemplateRequest;

