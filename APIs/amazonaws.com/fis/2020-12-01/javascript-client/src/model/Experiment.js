/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExperimentLogConfiguration from './ExperimentLogConfiguration';
import ExperimentState from './ExperimentState';

/**
 * The Experiment model module.
 * @module model/Experiment
 * @version 2020-12-01
 */
class Experiment {
    /**
     * Constructs a new <code>Experiment</code>.
     * Describes an experiment.
     * @alias module:model/Experiment
     */
    constructor() { 
        
        Experiment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Experiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Experiment} obj Optional instance to populate.
     * @return {module:model/Experiment} The populated <code>Experiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Experiment();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('experimentTemplateId')) {
                obj['experimentTemplateId'] = ApiClient.convertToType(data['experimentTemplateId'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ExperimentState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], Object);
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], Object);
            }
            if (data.hasOwnProperty('stopConditions')) {
                obj['stopConditions'] = ApiClient.convertToType(data['stopConditions'], Array);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('logConfiguration')) {
                obj['logConfiguration'] = ExperimentLogConfiguration.constructFromObject(data['logConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Experiment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Experiment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `experimentTemplateId`
        if (data['experimentTemplateId']) { // data not null
          String.validateJSON(data['experimentTemplateId']);
        }
        // validate the optional field `roleArn`
        if (data['roleArn']) { // data not null
          String.validateJSON(data['roleArn']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          ExperimentState.validateJSON(data['state']);
        }
        // validate the optional field `targets`
        if (data['targets']) { // data not null
          Object.validateJSON(data['targets']);
        }
        // validate the optional field `actions`
        if (data['actions']) { // data not null
          Object.validateJSON(data['actions']);
        }
        // validate the optional field `stopConditions`
        if (data['stopConditions']) { // data not null
          Array.validateJSON(data['stopConditions']);
        }
        // validate the optional field `creationTime`
        if (data['creationTime']) { // data not null
          Date.validateJSON(data['creationTime']);
        }
        // validate the optional field `startTime`
        if (data['startTime']) { // data not null
          Date.validateJSON(data['startTime']);
        }
        // validate the optional field `endTime`
        if (data['endTime']) { // data not null
          Date.validateJSON(data['endTime']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `logConfiguration`
        if (data['logConfiguration']) { // data not null
          ExperimentLogConfiguration.validateJSON(data['logConfiguration']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Experiment.prototype['id'] = undefined;

/**
 * @member {String} experimentTemplateId
 */
Experiment.prototype['experimentTemplateId'] = undefined;

/**
 * @member {String} roleArn
 */
Experiment.prototype['roleArn'] = undefined;

/**
 * @member {module:model/ExperimentState} state
 */
Experiment.prototype['state'] = undefined;

/**
 * @member {Object} targets
 */
Experiment.prototype['targets'] = undefined;

/**
 * @member {Object} actions
 */
Experiment.prototype['actions'] = undefined;

/**
 * @member {Array} stopConditions
 */
Experiment.prototype['stopConditions'] = undefined;

/**
 * @member {Date} creationTime
 */
Experiment.prototype['creationTime'] = undefined;

/**
 * @member {Date} startTime
 */
Experiment.prototype['startTime'] = undefined;

/**
 * @member {Date} endTime
 */
Experiment.prototype['endTime'] = undefined;

/**
 * @member {Object} tags
 */
Experiment.prototype['tags'] = undefined;

/**
 * @member {module:model/ExperimentLogConfiguration} logConfiguration
 */
Experiment.prototype['logConfiguration'] = undefined;






export default Experiment;

