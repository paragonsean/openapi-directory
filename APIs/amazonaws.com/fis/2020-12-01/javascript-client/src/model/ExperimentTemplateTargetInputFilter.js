/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExperimentTemplateTargetInputFilter model module.
 * @module model/ExperimentTemplateTargetInputFilter
 * @version 2020-12-01
 */
class ExperimentTemplateTargetInputFilter {
    /**
     * Constructs a new <code>ExperimentTemplateTargetInputFilter</code>.
     * &lt;p&gt;Specifies a filter used for the target resource input in an experiment template.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters\&quot;&gt;Resource filters&lt;/a&gt; in the &lt;i&gt;Fault Injection Simulator User Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/ExperimentTemplateTargetInputFilter
     * @param path {String} 
     * @param values {Array} 
     */
    constructor(path, values) { 
        
        ExperimentTemplateTargetInputFilter.initialize(this, path, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, values) { 
        obj['path'] = path;
        obj['values'] = values;
    }

    /**
     * Constructs a <code>ExperimentTemplateTargetInputFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExperimentTemplateTargetInputFilter} obj Optional instance to populate.
     * @return {module:model/ExperimentTemplateTargetInputFilter} The populated <code>ExperimentTemplateTargetInputFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExperimentTemplateTargetInputFilter();

            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExperimentTemplateTargetInputFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExperimentTemplateTargetInputFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExperimentTemplateTargetInputFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `path`
        if (data['path']) { // data not null
          String.validateJSON(data['path']);
        }
        // validate the optional field `values`
        if (data['values']) { // data not null
          Array.validateJSON(data['values']);
        }

        return true;
    }


}

ExperimentTemplateTargetInputFilter.RequiredProperties = ["path", "values"];

/**
 * @member {String} path
 */
ExperimentTemplateTargetInputFilter.prototype['path'] = undefined;

/**
 * @member {Array} values
 */
ExperimentTemplateTargetInputFilter.prototype['values'] = undefined;






export default ExperimentTemplateTargetInputFilter;

