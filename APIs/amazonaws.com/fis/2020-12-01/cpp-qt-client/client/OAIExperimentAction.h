/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExperimentAction.h
 *
 * Describes the action for an experiment.
 */

#ifndef OAIExperimentAction_H
#define OAIExperimentAction_H

#include <QJsonObject>

#include "OAIExperimentAction_state.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExperimentAction_state;

class OAIExperimentAction : public OAIObject {
public:
    OAIExperimentAction();
    OAIExperimentAction(QString json);
    ~OAIExperimentAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionId() const;
    void setActionId(const QString &action_id);
    bool is_action_id_Set() const;
    bool is_action_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap getParameters() const;
    void setParameters(const QMap &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QMap getTargets() const;
    void setTargets(const QMap &targets);
    bool is_targets_Set() const;
    bool is_targets_Valid() const;

    QList getStartAfter() const;
    void setStartAfter(const QList &start_after);
    bool is_start_after_Set() const;
    bool is_start_after_Valid() const;

    OAIExperimentAction_state getState() const;
    void setState(const OAIExperimentAction_state &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_id;
    bool m_action_id_isSet;
    bool m_action_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QMap m_targets;
    bool m_targets_isSet;
    bool m_targets_isValid;

    QList m_start_after;
    bool m_start_after_isSet;
    bool m_start_after_isValid;

    OAIExperimentAction_state m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExperimentAction)

#endif // OAIExperimentAction_H
