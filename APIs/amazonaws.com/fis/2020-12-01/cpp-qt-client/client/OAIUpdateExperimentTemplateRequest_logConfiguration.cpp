/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateExperimentTemplateRequest_logConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateExperimentTemplateRequest_logConfiguration::OAIUpdateExperimentTemplateRequest_logConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateExperimentTemplateRequest_logConfiguration::OAIUpdateExperimentTemplateRequest_logConfiguration() {
    this->initializeModel();
}

OAIUpdateExperimentTemplateRequest_logConfiguration::~OAIUpdateExperimentTemplateRequest_logConfiguration() {}

void OAIUpdateExperimentTemplateRequest_logConfiguration::initializeModel() {

    m_cloud_watch_logs_configuration_isSet = false;
    m_cloud_watch_logs_configuration_isValid = false;

    m_s3_configuration_isSet = false;
    m_s3_configuration_isValid = false;

    m_log_schema_version_isSet = false;
    m_log_schema_version_isValid = false;
}

void OAIUpdateExperimentTemplateRequest_logConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateExperimentTemplateRequest_logConfiguration::fromJsonObject(QJsonObject json) {

    m_cloud_watch_logs_configuration_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs_configuration, json[QString("cloudWatchLogsConfiguration")]);
    m_cloud_watch_logs_configuration_isSet = !json[QString("cloudWatchLogsConfiguration")].isNull() && m_cloud_watch_logs_configuration_isValid;

    m_s3_configuration_isValid = ::OpenAPI::fromJsonValue(m_s3_configuration, json[QString("s3Configuration")]);
    m_s3_configuration_isSet = !json[QString("s3Configuration")].isNull() && m_s3_configuration_isValid;

    m_log_schema_version_isValid = ::OpenAPI::fromJsonValue(m_log_schema_version, json[QString("logSchemaVersion")]);
    m_log_schema_version_isSet = !json[QString("logSchemaVersion")].isNull() && m_log_schema_version_isValid;
}

QString OAIUpdateExperimentTemplateRequest_logConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateExperimentTemplateRequest_logConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_logs_configuration.isSet()) {
        obj.insert(QString("cloudWatchLogsConfiguration"), ::OpenAPI::toJsonValue(m_cloud_watch_logs_configuration));
    }
    if (m_s3_configuration.isSet()) {
        obj.insert(QString("s3Configuration"), ::OpenAPI::toJsonValue(m_s3_configuration));
    }
    if (m_log_schema_version_isSet) {
        obj.insert(QString("logSchemaVersion"), ::OpenAPI::toJsonValue(m_log_schema_version));
    }
    return obj;
}

OAICreateExperimentTemplate_request_logConfiguration_cloudWatchLogsConfiguration OAIUpdateExperimentTemplateRequest_logConfiguration::getCloudWatchLogsConfiguration() const {
    return m_cloud_watch_logs_configuration;
}
void OAIUpdateExperimentTemplateRequest_logConfiguration::setCloudWatchLogsConfiguration(const OAICreateExperimentTemplate_request_logConfiguration_cloudWatchLogsConfiguration &cloud_watch_logs_configuration) {
    m_cloud_watch_logs_configuration = cloud_watch_logs_configuration;
    m_cloud_watch_logs_configuration_isSet = true;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::is_cloud_watch_logs_configuration_Set() const{
    return m_cloud_watch_logs_configuration_isSet;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::is_cloud_watch_logs_configuration_Valid() const{
    return m_cloud_watch_logs_configuration_isValid;
}

OAICreateExperimentTemplate_request_logConfiguration_s3Configuration OAIUpdateExperimentTemplateRequest_logConfiguration::getS3Configuration() const {
    return m_s3_configuration;
}
void OAIUpdateExperimentTemplateRequest_logConfiguration::setS3Configuration(const OAICreateExperimentTemplate_request_logConfiguration_s3Configuration &s3_configuration) {
    m_s3_configuration = s3_configuration;
    m_s3_configuration_isSet = true;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::is_s3_configuration_Set() const{
    return m_s3_configuration_isSet;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::is_s3_configuration_Valid() const{
    return m_s3_configuration_isValid;
}

qint32 OAIUpdateExperimentTemplateRequest_logConfiguration::getLogSchemaVersion() const {
    return m_log_schema_version;
}
void OAIUpdateExperimentTemplateRequest_logConfiguration::setLogSchemaVersion(const qint32 &log_schema_version) {
    m_log_schema_version = log_schema_version;
    m_log_schema_version_isSet = true;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::is_log_schema_version_Set() const{
    return m_log_schema_version_isSet;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::is_log_schema_version_Valid() const{
    return m_log_schema_version_isValid;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_logs_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateExperimentTemplateRequest_logConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
