/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListExperimentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListExperimentsResponse::OAIListExperimentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListExperimentsResponse::OAIListExperimentsResponse() {
    this->initializeModel();
}

OAIListExperimentsResponse::~OAIListExperimentsResponse() {}

void OAIListExperimentsResponse::initializeModel() {

    m_experiments_isSet = false;
    m_experiments_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListExperimentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListExperimentsResponse::fromJsonObject(QJsonObject json) {

    m_experiments_isValid = ::OpenAPI::fromJsonValue(m_experiments, json[QString("experiments")]);
    m_experiments_isSet = !json[QString("experiments")].isNull() && m_experiments_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListExperimentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListExperimentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_experiments.isSet()) {
        obj.insert(QString("experiments"), ::OpenAPI::toJsonValue(m_experiments));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListExperimentsResponse::getExperiments() const {
    return m_experiments;
}
void OAIListExperimentsResponse::setExperiments(const QList &experiments) {
    m_experiments = experiments;
    m_experiments_isSet = true;
}

bool OAIListExperimentsResponse::is_experiments_Set() const{
    return m_experiments_isSet;
}

bool OAIListExperimentsResponse::is_experiments_Valid() const{
    return m_experiments_isValid;
}

QString OAIListExperimentsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListExperimentsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListExperimentsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListExperimentsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListExperimentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_experiments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListExperimentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
