/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentAction::OAIExperimentAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentAction::OAIExperimentAction() {
    this->initializeModel();
}

OAIExperimentAction::~OAIExperimentAction() {}

void OAIExperimentAction::initializeModel() {

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_start_after_isSet = false;
    m_start_after_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;
}

void OAIExperimentAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentAction::fromJsonObject(QJsonObject json) {

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionId")]);
    m_action_id_isSet = !json[QString("actionId")].isNull() && m_action_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_start_after_isValid = ::OpenAPI::fromJsonValue(m_start_after, json[QString("startAfter")]);
    m_start_after_isSet = !json[QString("startAfter")].isNull() && m_start_after_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;
}

QString OAIExperimentAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_id_isSet) {
        obj.insert(QString("actionId"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_start_after.isSet()) {
        obj.insert(QString("startAfter"), ::OpenAPI::toJsonValue(m_start_after));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    return obj;
}

QString OAIExperimentAction::getActionId() const {
    return m_action_id;
}
void OAIExperimentAction::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIExperimentAction::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIExperimentAction::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIExperimentAction::getDescription() const {
    return m_description;
}
void OAIExperimentAction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExperimentAction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExperimentAction::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAIExperimentAction::getParameters() const {
    return m_parameters;
}
void OAIExperimentAction::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIExperimentAction::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIExperimentAction::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QMap OAIExperimentAction::getTargets() const {
    return m_targets;
}
void OAIExperimentAction::setTargets(const QMap &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIExperimentAction::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIExperimentAction::is_targets_Valid() const{
    return m_targets_isValid;
}

QList OAIExperimentAction::getStartAfter() const {
    return m_start_after;
}
void OAIExperimentAction::setStartAfter(const QList &start_after) {
    m_start_after = start_after;
    m_start_after_isSet = true;
}

bool OAIExperimentAction::is_start_after_Set() const{
    return m_start_after_isSet;
}

bool OAIExperimentAction::is_start_after_Valid() const{
    return m_start_after_isValid;
}

OAIExperimentAction_state OAIExperimentAction::getState() const {
    return m_state;
}
void OAIExperimentAction::setState(const OAIExperimentAction_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExperimentAction::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExperimentAction::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIExperimentAction::getStartTime() const {
    return m_start_time;
}
void OAIExperimentAction::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIExperimentAction::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIExperimentAction::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIExperimentAction::getEndTime() const {
    return m_end_time;
}
void OAIExperimentAction::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIExperimentAction::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIExperimentAction::is_end_time_Valid() const{
    return m_end_time_isValid;
}

bool OAIExperimentAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_after.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
