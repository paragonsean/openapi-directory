/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentTemplateCloudWatchLogsLogConfigurationInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::OAIExperimentTemplateCloudWatchLogsLogConfigurationInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::OAIExperimentTemplateCloudWatchLogsLogConfigurationInput() {
    this->initializeModel();
}

OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::~OAIExperimentTemplateCloudWatchLogsLogConfigurationInput() {}

void OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::initializeModel() {

    m_log_group_arn_isSet = false;
    m_log_group_arn_isValid = false;
}

void OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::fromJsonObject(QJsonObject json) {

    m_log_group_arn_isValid = ::OpenAPI::fromJsonValue(m_log_group_arn, json[QString("logGroupArn")]);
    m_log_group_arn_isSet = !json[QString("logGroupArn")].isNull() && m_log_group_arn_isValid;
}

QString OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::asJsonObject() const {
    QJsonObject obj;
    if (m_log_group_arn_isSet) {
        obj.insert(QString("logGroupArn"), ::OpenAPI::toJsonValue(m_log_group_arn));
    }
    return obj;
}

QString OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::getLogGroupArn() const {
    return m_log_group_arn;
}
void OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::setLogGroupArn(const QString &log_group_arn) {
    m_log_group_arn = log_group_arn;
    m_log_group_arn_isSet = true;
}

bool OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::is_log_group_arn_Set() const{
    return m_log_group_arn_isSet;
}

bool OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::is_log_group_arn_Valid() const{
    return m_log_group_arn_isValid;
}

bool OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentTemplateCloudWatchLogsLogConfigurationInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_log_group_arn_isValid && true;
}

} // namespace OpenAPI
