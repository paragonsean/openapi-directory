/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExperimentTemplateResponse_experimentTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExperimentTemplateResponse_experimentTemplate::OAICreateExperimentTemplateResponse_experimentTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExperimentTemplateResponse_experimentTemplate::OAICreateExperimentTemplateResponse_experimentTemplate() {
    this->initializeModel();
}

OAICreateExperimentTemplateResponse_experimentTemplate::~OAICreateExperimentTemplateResponse_experimentTemplate() {}

void OAICreateExperimentTemplateResponse_experimentTemplate::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_stop_conditions_isSet = false;
    m_stop_conditions_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_log_configuration_isSet = false;
    m_log_configuration_isValid = false;
}

void OAICreateExperimentTemplateResponse_experimentTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExperimentTemplateResponse_experimentTemplate::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_stop_conditions_isValid = ::OpenAPI::fromJsonValue(m_stop_conditions, json[QString("stopConditions")]);
    m_stop_conditions_isSet = !json[QString("stopConditions")].isNull() && m_stop_conditions_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_log_configuration_isValid = ::OpenAPI::fromJsonValue(m_log_configuration, json[QString("logConfiguration")]);
    m_log_configuration_isSet = !json[QString("logConfiguration")].isNull() && m_log_configuration_isValid;
}

QString OAICreateExperimentTemplateResponse_experimentTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExperimentTemplateResponse_experimentTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_targets.isSet()) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_stop_conditions.isSet()) {
        obj.insert(QString("stopConditions"), ::OpenAPI::toJsonValue(m_stop_conditions));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_log_configuration.isSet()) {
        obj.insert(QString("logConfiguration"), ::OpenAPI::toJsonValue(m_log_configuration));
    }
    return obj;
}

QString OAICreateExperimentTemplateResponse_experimentTemplate::getId() const {
    return m_id;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateExperimentTemplateResponse_experimentTemplate::getDescription() const {
    return m_description;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAICreateExperimentTemplateResponse_experimentTemplate::getTargets() const {
    return m_targets;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setTargets(const QMap &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_targets_Valid() const{
    return m_targets_isValid;
}

QMap OAICreateExperimentTemplateResponse_experimentTemplate::getActions() const {
    return m_actions;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setActions(const QMap &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_actions_Valid() const{
    return m_actions_isValid;
}

QList OAICreateExperimentTemplateResponse_experimentTemplate::getStopConditions() const {
    return m_stop_conditions;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setStopConditions(const QList &stop_conditions) {
    m_stop_conditions = stop_conditions;
    m_stop_conditions_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_stop_conditions_Set() const{
    return m_stop_conditions_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_stop_conditions_Valid() const{
    return m_stop_conditions_isValid;
}

QDateTime OAICreateExperimentTemplateResponse_experimentTemplate::getCreationTime() const {
    return m_creation_time;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICreateExperimentTemplateResponse_experimentTemplate::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QString OAICreateExperimentTemplateResponse_experimentTemplate::getRoleArn() const {
    return m_role_arn;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QMap OAICreateExperimentTemplateResponse_experimentTemplate::getTags() const {
    return m_tags;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIExperimentTemplate_logConfiguration OAICreateExperimentTemplateResponse_experimentTemplate::getLogConfiguration() const {
    return m_log_configuration;
}
void OAICreateExperimentTemplateResponse_experimentTemplate::setLogConfiguration(const OAIExperimentTemplate_logConfiguration &log_configuration) {
    m_log_configuration = log_configuration;
    m_log_configuration_isSet = true;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_log_configuration_Set() const{
    return m_log_configuration_isSet;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::is_log_configuration_Valid() const{
    return m_log_configuration_isValid;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExperimentTemplateResponse_experimentTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
