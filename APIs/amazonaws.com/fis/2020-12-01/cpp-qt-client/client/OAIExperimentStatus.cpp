/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentStatus::OAIExperimentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentStatus::OAIExperimentStatus() {
    this->initializeModel();
}

OAIExperimentStatus::~OAIExperimentStatus() {}

void OAIExperimentStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExperimentStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExperimentStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("initiating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::INITIATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stopping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExperimentStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExperimentStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExperimentStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExperimentStatus::PENDING:
            val = "pending";
            break;
        case eOAIExperimentStatus::INITIATING:
            val = "initiating";
            break;
        case eOAIExperimentStatus::RUNNING:
            val = "running";
            break;
        case eOAIExperimentStatus::COMPLETED:
            val = "completed";
            break;
        case eOAIExperimentStatus::STOPPING:
            val = "stopping";
            break;
        case eOAIExperimentStatus::STOPPED:
            val = "stopped";
            break;
        case eOAIExperimentStatus::FAILED:
            val = "failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExperimentStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExperimentStatus::eOAIExperimentStatus OAIExperimentStatus::getValue() const {
    return m_value;
}

void OAIExperimentStatus::setValue(const OAIExperimentStatus::eOAIExperimentStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExperimentStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIExperimentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
