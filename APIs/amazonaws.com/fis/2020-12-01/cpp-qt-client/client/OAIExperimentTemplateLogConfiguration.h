/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExperimentTemplateLogConfiguration.h
 *
 * Describes the configuration for experiment logging.
 */

#ifndef OAIExperimentTemplateLogConfiguration_H
#define OAIExperimentTemplateLogConfiguration_H

#include <QJsonObject>

#include "OAIExperimentTemplateLogConfiguration_cloudWatchLogsConfiguration.h"
#include "OAIExperimentTemplateLogConfiguration_s3Configuration.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExperimentTemplateLogConfiguration_cloudWatchLogsConfiguration;
class OAIExperimentTemplateLogConfiguration_s3Configuration;

class OAIExperimentTemplateLogConfiguration : public OAIObject {
public:
    OAIExperimentTemplateLogConfiguration();
    OAIExperimentTemplateLogConfiguration(QString json);
    ~OAIExperimentTemplateLogConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIExperimentTemplateLogConfiguration_cloudWatchLogsConfiguration getCloudWatchLogsConfiguration() const;
    void setCloudWatchLogsConfiguration(const OAIExperimentTemplateLogConfiguration_cloudWatchLogsConfiguration &cloud_watch_logs_configuration);
    bool is_cloud_watch_logs_configuration_Set() const;
    bool is_cloud_watch_logs_configuration_Valid() const;

    OAIExperimentTemplateLogConfiguration_s3Configuration getS3Configuration() const;
    void setS3Configuration(const OAIExperimentTemplateLogConfiguration_s3Configuration &s3_configuration);
    bool is_s3_configuration_Set() const;
    bool is_s3_configuration_Valid() const;

    qint32 getLogSchemaVersion() const;
    void setLogSchemaVersion(const qint32 &log_schema_version);
    bool is_log_schema_version_Set() const;
    bool is_log_schema_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIExperimentTemplateLogConfiguration_cloudWatchLogsConfiguration m_cloud_watch_logs_configuration;
    bool m_cloud_watch_logs_configuration_isSet;
    bool m_cloud_watch_logs_configuration_isValid;

    OAIExperimentTemplateLogConfiguration_s3Configuration m_s3_configuration;
    bool m_s3_configuration_isSet;
    bool m_s3_configuration_isValid;

    qint32 m_log_schema_version;
    bool m_log_schema_version_isSet;
    bool m_log_schema_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExperimentTemplateLogConfiguration)

#endif // OAIExperimentTemplateLogConfiguration_H
