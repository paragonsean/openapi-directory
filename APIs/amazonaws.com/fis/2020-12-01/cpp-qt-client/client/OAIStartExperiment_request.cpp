/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartExperiment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartExperiment_request::OAIStartExperiment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartExperiment_request::OAIStartExperiment_request() {
    this->initializeModel();
}

OAIStartExperiment_request::~OAIStartExperiment_request() {}

void OAIStartExperiment_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_experiment_template_id_isSet = false;
    m_experiment_template_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIStartExperiment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartExperiment_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_experiment_template_id_isValid = ::OpenAPI::fromJsonValue(m_experiment_template_id, json[QString("experimentTemplateId")]);
    m_experiment_template_id_isSet = !json[QString("experimentTemplateId")].isNull() && m_experiment_template_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIStartExperiment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartExperiment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_experiment_template_id_isSet) {
        obj.insert(QString("experimentTemplateId"), ::OpenAPI::toJsonValue(m_experiment_template_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIStartExperiment_request::getClientToken() const {
    return m_client_token;
}
void OAIStartExperiment_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartExperiment_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartExperiment_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIStartExperiment_request::getExperimentTemplateId() const {
    return m_experiment_template_id;
}
void OAIStartExperiment_request::setExperimentTemplateId(const QString &experiment_template_id) {
    m_experiment_template_id = experiment_template_id;
    m_experiment_template_id_isSet = true;
}

bool OAIStartExperiment_request::is_experiment_template_id_Set() const{
    return m_experiment_template_id_isSet;
}

bool OAIStartExperiment_request::is_experiment_template_id_Valid() const{
    return m_experiment_template_id_isValid;
}

QMap<QString, QString> OAIStartExperiment_request::getTags() const {
    return m_tags;
}
void OAIStartExperiment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartExperiment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartExperiment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIStartExperiment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartExperiment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_experiment_template_id_isValid && true;
}

} // namespace OpenAPI
