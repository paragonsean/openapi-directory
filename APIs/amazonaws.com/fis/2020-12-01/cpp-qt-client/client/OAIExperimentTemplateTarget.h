/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExperimentTemplateTarget.h
 *
 * Describes a target for an experiment template.
 */

#ifndef OAIExperimentTemplateTarget_H
#define OAIExperimentTemplateTarget_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExperimentTemplateTarget : public OAIObject {
public:
    OAIExperimentTemplateTarget();
    OAIExperimentTemplateTarget(QString json);
    ~OAIExperimentTemplateTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QList getResourceArns() const;
    void setResourceArns(const QList &resource_arns);
    bool is_resource_arns_Set() const;
    bool is_resource_arns_Valid() const;

    QMap getResourceTags() const;
    void setResourceTags(const QMap &resource_tags);
    bool is_resource_tags_Set() const;
    bool is_resource_tags_Valid() const;

    QList getFilters() const;
    void setFilters(const QList &filters);
    bool is_filters_Set() const;
    bool is_filters_Valid() const;

    QString getSelectionMode() const;
    void setSelectionMode(const QString &selection_mode);
    bool is_selection_mode_Set() const;
    bool is_selection_mode_Valid() const;

    QMap getParameters() const;
    void setParameters(const QMap &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QList m_resource_arns;
    bool m_resource_arns_isSet;
    bool m_resource_arns_isValid;

    QMap m_resource_tags;
    bool m_resource_tags_isSet;
    bool m_resource_tags_isValid;

    QList m_filters;
    bool m_filters_isSet;
    bool m_filters_isValid;

    QString m_selection_mode;
    bool m_selection_mode_isSet;
    bool m_selection_mode_isValid;

    QMap m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExperimentTemplateTarget)

#endif // OAIExperimentTemplateTarget_H
