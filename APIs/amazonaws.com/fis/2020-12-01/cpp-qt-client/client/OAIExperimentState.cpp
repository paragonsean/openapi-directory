/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentState::OAIExperimentState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentState::OAIExperimentState() {
    this->initializeModel();
}

OAIExperimentState::~OAIExperimentState() {}

void OAIExperimentState::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIExperimentState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentState::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIExperimentState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentState::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

OAIExperimentStatus OAIExperimentState::getStatus() const {
    return m_status;
}
void OAIExperimentState::setStatus(const OAIExperimentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExperimentState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExperimentState::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIExperimentState::getReason() const {
    return m_reason;
}
void OAIExperimentState::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIExperimentState::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIExperimentState::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIExperimentState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
