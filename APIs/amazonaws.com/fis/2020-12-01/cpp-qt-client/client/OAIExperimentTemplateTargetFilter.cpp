/**
 * AWS Fault Injection Simulator
 * Fault Injection Simulator is a managed service that enables you to perform fault injection experiments on your Amazon Web Services workloads. For more information, see the <a href=\"https://docs.aws.amazon.com/fis/latest/userguide/\">Fault Injection Simulator User Guide</a>.
 *
 * The version of the OpenAPI document: 2020-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentTemplateTargetFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentTemplateTargetFilter::OAIExperimentTemplateTargetFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentTemplateTargetFilter::OAIExperimentTemplateTargetFilter() {
    this->initializeModel();
}

OAIExperimentTemplateTargetFilter::~OAIExperimentTemplateTargetFilter() {}

void OAIExperimentTemplateTargetFilter::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIExperimentTemplateTargetFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentTemplateTargetFilter::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIExperimentTemplateTargetFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentTemplateTargetFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIExperimentTemplateTargetFilter::getPath() const {
    return m_path;
}
void OAIExperimentTemplateTargetFilter::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIExperimentTemplateTargetFilter::is_path_Set() const{
    return m_path_isSet;
}

bool OAIExperimentTemplateTargetFilter::is_path_Valid() const{
    return m_path_isValid;
}

QList OAIExperimentTemplateTargetFilter::getValues() const {
    return m_values;
}
void OAIExperimentTemplateTargetFilter::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIExperimentTemplateTargetFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAIExperimentTemplateTargetFilter::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIExperimentTemplateTargetFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentTemplateTargetFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
