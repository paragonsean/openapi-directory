/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetDomainDetailResponseAdminContact;
import org.openapitools.client.model.GetDomainDetailResponseRegistrantContact;
import org.openapitools.client.model.GetDomainDetailResponseTechContact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The GetDomainDetail response includes the following elements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:05.093058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDomainDetailResponse {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_NAMESERVERS = "Nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  private List nameservers;

  public static final String SERIALIZED_NAME_AUTO_RENEW = "AutoRenew";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEW)
  private Boolean autoRenew;

  public static final String SERIALIZED_NAME_ADMIN_CONTACT = "AdminContact";
  @SerializedName(SERIALIZED_NAME_ADMIN_CONTACT)
  private GetDomainDetailResponseAdminContact adminContact;

  public static final String SERIALIZED_NAME_REGISTRANT_CONTACT = "RegistrantContact";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_CONTACT)
  private GetDomainDetailResponseRegistrantContact registrantContact;

  public static final String SERIALIZED_NAME_TECH_CONTACT = "TechContact";
  @SerializedName(SERIALIZED_NAME_TECH_CONTACT)
  private GetDomainDetailResponseTechContact techContact;

  public static final String SERIALIZED_NAME_ADMIN_PRIVACY = "AdminPrivacy";
  @SerializedName(SERIALIZED_NAME_ADMIN_PRIVACY)
  private Boolean adminPrivacy;

  public static final String SERIALIZED_NAME_REGISTRANT_PRIVACY = "RegistrantPrivacy";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_PRIVACY)
  private Boolean registrantPrivacy;

  public static final String SERIALIZED_NAME_TECH_PRIVACY = "TechPrivacy";
  @SerializedName(SERIALIZED_NAME_TECH_PRIVACY)
  private Boolean techPrivacy;

  public static final String SERIALIZED_NAME_REGISTRAR_NAME = "RegistrarName";
  @SerializedName(SERIALIZED_NAME_REGISTRAR_NAME)
  private String registrarName;

  public static final String SERIALIZED_NAME_WHO_IS_SERVER = "WhoIsServer";
  @SerializedName(SERIALIZED_NAME_WHO_IS_SERVER)
  private String whoIsServer;

  public static final String SERIALIZED_NAME_REGISTRAR_URL = "RegistrarUrl";
  @SerializedName(SERIALIZED_NAME_REGISTRAR_URL)
  private String registrarUrl;

  public static final String SERIALIZED_NAME_ABUSE_CONTACT_EMAIL = "AbuseContactEmail";
  @SerializedName(SERIALIZED_NAME_ABUSE_CONTACT_EMAIL)
  private String abuseContactEmail;

  public static final String SERIALIZED_NAME_ABUSE_CONTACT_PHONE = "AbuseContactPhone";
  @SerializedName(SERIALIZED_NAME_ABUSE_CONTACT_PHONE)
  private String abuseContactPhone;

  public static final String SERIALIZED_NAME_REGISTRY_DOMAIN_ID = "RegistryDomainId";
  @SerializedName(SERIALIZED_NAME_REGISTRY_DOMAIN_ID)
  private String registryDomainId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "CreationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "UpdatedDate";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private OffsetDateTime updatedDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "ExpirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_RESELLER = "Reseller";
  @SerializedName(SERIALIZED_NAME_RESELLER)
  private String reseller;

  public static final String SERIALIZED_NAME_DNS_SEC = "DnsSec";
  @SerializedName(SERIALIZED_NAME_DNS_SEC)
  private String dnsSec;

  public static final String SERIALIZED_NAME_STATUS_LIST = "StatusList";
  @SerializedName(SERIALIZED_NAME_STATUS_LIST)
  private List statusList;

  public static final String SERIALIZED_NAME_DNSSEC_KEYS = "DnssecKeys";
  @SerializedName(SERIALIZED_NAME_DNSSEC_KEYS)
  private List dnssecKeys;

  public GetDomainDetailResponse() {
  }

  public GetDomainDetailResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public GetDomainDetailResponse nameservers(List nameservers) {
    this.nameservers = nameservers;
    return this;
  }

  /**
   * Get nameservers
   * @return nameservers
   */
  @javax.annotation.Nullable
  public List getNameservers() {
    return nameservers;
  }

  public void setNameservers(List nameservers) {
    this.nameservers = nameservers;
  }


  public GetDomainDetailResponse autoRenew(Boolean autoRenew) {
    this.autoRenew = autoRenew;
    return this;
  }

  /**
   * Get autoRenew
   * @return autoRenew
   */
  @javax.annotation.Nullable
  public Boolean getAutoRenew() {
    return autoRenew;
  }

  public void setAutoRenew(Boolean autoRenew) {
    this.autoRenew = autoRenew;
  }


  public GetDomainDetailResponse adminContact(GetDomainDetailResponseAdminContact adminContact) {
    this.adminContact = adminContact;
    return this;
  }

  /**
   * Get adminContact
   * @return adminContact
   */
  @javax.annotation.Nullable
  public GetDomainDetailResponseAdminContact getAdminContact() {
    return adminContact;
  }

  public void setAdminContact(GetDomainDetailResponseAdminContact adminContact) {
    this.adminContact = adminContact;
  }


  public GetDomainDetailResponse registrantContact(GetDomainDetailResponseRegistrantContact registrantContact) {
    this.registrantContact = registrantContact;
    return this;
  }

  /**
   * Get registrantContact
   * @return registrantContact
   */
  @javax.annotation.Nullable
  public GetDomainDetailResponseRegistrantContact getRegistrantContact() {
    return registrantContact;
  }

  public void setRegistrantContact(GetDomainDetailResponseRegistrantContact registrantContact) {
    this.registrantContact = registrantContact;
  }


  public GetDomainDetailResponse techContact(GetDomainDetailResponseTechContact techContact) {
    this.techContact = techContact;
    return this;
  }

  /**
   * Get techContact
   * @return techContact
   */
  @javax.annotation.Nullable
  public GetDomainDetailResponseTechContact getTechContact() {
    return techContact;
  }

  public void setTechContact(GetDomainDetailResponseTechContact techContact) {
    this.techContact = techContact;
  }


  public GetDomainDetailResponse adminPrivacy(Boolean adminPrivacy) {
    this.adminPrivacy = adminPrivacy;
    return this;
  }

  /**
   * Get adminPrivacy
   * @return adminPrivacy
   */
  @javax.annotation.Nullable
  public Boolean getAdminPrivacy() {
    return adminPrivacy;
  }

  public void setAdminPrivacy(Boolean adminPrivacy) {
    this.adminPrivacy = adminPrivacy;
  }


  public GetDomainDetailResponse registrantPrivacy(Boolean registrantPrivacy) {
    this.registrantPrivacy = registrantPrivacy;
    return this;
  }

  /**
   * Get registrantPrivacy
   * @return registrantPrivacy
   */
  @javax.annotation.Nullable
  public Boolean getRegistrantPrivacy() {
    return registrantPrivacy;
  }

  public void setRegistrantPrivacy(Boolean registrantPrivacy) {
    this.registrantPrivacy = registrantPrivacy;
  }


  public GetDomainDetailResponse techPrivacy(Boolean techPrivacy) {
    this.techPrivacy = techPrivacy;
    return this;
  }

  /**
   * Get techPrivacy
   * @return techPrivacy
   */
  @javax.annotation.Nullable
  public Boolean getTechPrivacy() {
    return techPrivacy;
  }

  public void setTechPrivacy(Boolean techPrivacy) {
    this.techPrivacy = techPrivacy;
  }


  public GetDomainDetailResponse registrarName(String registrarName) {
    this.registrarName = registrarName;
    return this;
  }

  /**
   * Get registrarName
   * @return registrarName
   */
  @javax.annotation.Nullable
  public String getRegistrarName() {
    return registrarName;
  }

  public void setRegistrarName(String registrarName) {
    this.registrarName = registrarName;
  }


  public GetDomainDetailResponse whoIsServer(String whoIsServer) {
    this.whoIsServer = whoIsServer;
    return this;
  }

  /**
   * Get whoIsServer
   * @return whoIsServer
   */
  @javax.annotation.Nullable
  public String getWhoIsServer() {
    return whoIsServer;
  }

  public void setWhoIsServer(String whoIsServer) {
    this.whoIsServer = whoIsServer;
  }


  public GetDomainDetailResponse registrarUrl(String registrarUrl) {
    this.registrarUrl = registrarUrl;
    return this;
  }

  /**
   * Get registrarUrl
   * @return registrarUrl
   */
  @javax.annotation.Nullable
  public String getRegistrarUrl() {
    return registrarUrl;
  }

  public void setRegistrarUrl(String registrarUrl) {
    this.registrarUrl = registrarUrl;
  }


  public GetDomainDetailResponse abuseContactEmail(String abuseContactEmail) {
    this.abuseContactEmail = abuseContactEmail;
    return this;
  }

  /**
   * Get abuseContactEmail
   * @return abuseContactEmail
   */
  @javax.annotation.Nullable
  public String getAbuseContactEmail() {
    return abuseContactEmail;
  }

  public void setAbuseContactEmail(String abuseContactEmail) {
    this.abuseContactEmail = abuseContactEmail;
  }


  public GetDomainDetailResponse abuseContactPhone(String abuseContactPhone) {
    this.abuseContactPhone = abuseContactPhone;
    return this;
  }

  /**
   * Get abuseContactPhone
   * @return abuseContactPhone
   */
  @javax.annotation.Nullable
  public String getAbuseContactPhone() {
    return abuseContactPhone;
  }

  public void setAbuseContactPhone(String abuseContactPhone) {
    this.abuseContactPhone = abuseContactPhone;
  }


  public GetDomainDetailResponse registryDomainId(String registryDomainId) {
    this.registryDomainId = registryDomainId;
    return this;
  }

  /**
   * Get registryDomainId
   * @return registryDomainId
   */
  @javax.annotation.Nullable
  public String getRegistryDomainId() {
    return registryDomainId;
  }

  public void setRegistryDomainId(String registryDomainId) {
    this.registryDomainId = registryDomainId;
  }


  public GetDomainDetailResponse creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public GetDomainDetailResponse updatedDate(OffsetDateTime updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

  /**
   * Get updatedDate
   * @return updatedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(OffsetDateTime updatedDate) {
    this.updatedDate = updatedDate;
  }


  public GetDomainDetailResponse expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Get expirationDate
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public GetDomainDetailResponse reseller(String reseller) {
    this.reseller = reseller;
    return this;
  }

  /**
   * Get reseller
   * @return reseller
   */
  @javax.annotation.Nullable
  public String getReseller() {
    return reseller;
  }

  public void setReseller(String reseller) {
    this.reseller = reseller;
  }


  public GetDomainDetailResponse dnsSec(String dnsSec) {
    this.dnsSec = dnsSec;
    return this;
  }

  /**
   * Get dnsSec
   * @return dnsSec
   */
  @javax.annotation.Nullable
  public String getDnsSec() {
    return dnsSec;
  }

  public void setDnsSec(String dnsSec) {
    this.dnsSec = dnsSec;
  }


  public GetDomainDetailResponse statusList(List statusList) {
    this.statusList = statusList;
    return this;
  }

  /**
   * Get statusList
   * @return statusList
   */
  @javax.annotation.Nullable
  public List getStatusList() {
    return statusList;
  }

  public void setStatusList(List statusList) {
    this.statusList = statusList;
  }


  public GetDomainDetailResponse dnssecKeys(List dnssecKeys) {
    this.dnssecKeys = dnssecKeys;
    return this;
  }

  /**
   * Get dnssecKeys
   * @return dnssecKeys
   */
  @javax.annotation.Nullable
  public List getDnssecKeys() {
    return dnssecKeys;
  }

  public void setDnssecKeys(List dnssecKeys) {
    this.dnssecKeys = dnssecKeys;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDomainDetailResponse getDomainDetailResponse = (GetDomainDetailResponse) o;
    return Objects.equals(this.domainName, getDomainDetailResponse.domainName) &&
        Objects.equals(this.nameservers, getDomainDetailResponse.nameservers) &&
        Objects.equals(this.autoRenew, getDomainDetailResponse.autoRenew) &&
        Objects.equals(this.adminContact, getDomainDetailResponse.adminContact) &&
        Objects.equals(this.registrantContact, getDomainDetailResponse.registrantContact) &&
        Objects.equals(this.techContact, getDomainDetailResponse.techContact) &&
        Objects.equals(this.adminPrivacy, getDomainDetailResponse.adminPrivacy) &&
        Objects.equals(this.registrantPrivacy, getDomainDetailResponse.registrantPrivacy) &&
        Objects.equals(this.techPrivacy, getDomainDetailResponse.techPrivacy) &&
        Objects.equals(this.registrarName, getDomainDetailResponse.registrarName) &&
        Objects.equals(this.whoIsServer, getDomainDetailResponse.whoIsServer) &&
        Objects.equals(this.registrarUrl, getDomainDetailResponse.registrarUrl) &&
        Objects.equals(this.abuseContactEmail, getDomainDetailResponse.abuseContactEmail) &&
        Objects.equals(this.abuseContactPhone, getDomainDetailResponse.abuseContactPhone) &&
        Objects.equals(this.registryDomainId, getDomainDetailResponse.registryDomainId) &&
        Objects.equals(this.creationDate, getDomainDetailResponse.creationDate) &&
        Objects.equals(this.updatedDate, getDomainDetailResponse.updatedDate) &&
        Objects.equals(this.expirationDate, getDomainDetailResponse.expirationDate) &&
        Objects.equals(this.reseller, getDomainDetailResponse.reseller) &&
        Objects.equals(this.dnsSec, getDomainDetailResponse.dnsSec) &&
        Objects.equals(this.statusList, getDomainDetailResponse.statusList) &&
        Objects.equals(this.dnssecKeys, getDomainDetailResponse.dnssecKeys);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, nameservers, autoRenew, adminContact, registrantContact, techContact, adminPrivacy, registrantPrivacy, techPrivacy, registrarName, whoIsServer, registrarUrl, abuseContactEmail, abuseContactPhone, registryDomainId, creationDate, updatedDate, expirationDate, reseller, dnsSec, statusList, dnssecKeys);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDomainDetailResponse {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("    autoRenew: ").append(toIndentedString(autoRenew)).append("\n");
    sb.append("    adminContact: ").append(toIndentedString(adminContact)).append("\n");
    sb.append("    registrantContact: ").append(toIndentedString(registrantContact)).append("\n");
    sb.append("    techContact: ").append(toIndentedString(techContact)).append("\n");
    sb.append("    adminPrivacy: ").append(toIndentedString(adminPrivacy)).append("\n");
    sb.append("    registrantPrivacy: ").append(toIndentedString(registrantPrivacy)).append("\n");
    sb.append("    techPrivacy: ").append(toIndentedString(techPrivacy)).append("\n");
    sb.append("    registrarName: ").append(toIndentedString(registrarName)).append("\n");
    sb.append("    whoIsServer: ").append(toIndentedString(whoIsServer)).append("\n");
    sb.append("    registrarUrl: ").append(toIndentedString(registrarUrl)).append("\n");
    sb.append("    abuseContactEmail: ").append(toIndentedString(abuseContactEmail)).append("\n");
    sb.append("    abuseContactPhone: ").append(toIndentedString(abuseContactPhone)).append("\n");
    sb.append("    registryDomainId: ").append(toIndentedString(registryDomainId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    reseller: ").append(toIndentedString(reseller)).append("\n");
    sb.append("    dnsSec: ").append(toIndentedString(dnsSec)).append("\n");
    sb.append("    statusList: ").append(toIndentedString(statusList)).append("\n");
    sb.append("    dnssecKeys: ").append(toIndentedString(dnssecKeys)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("Nameservers");
    openapiFields.add("AutoRenew");
    openapiFields.add("AdminContact");
    openapiFields.add("RegistrantContact");
    openapiFields.add("TechContact");
    openapiFields.add("AdminPrivacy");
    openapiFields.add("RegistrantPrivacy");
    openapiFields.add("TechPrivacy");
    openapiFields.add("RegistrarName");
    openapiFields.add("WhoIsServer");
    openapiFields.add("RegistrarUrl");
    openapiFields.add("AbuseContactEmail");
    openapiFields.add("AbuseContactPhone");
    openapiFields.add("RegistryDomainId");
    openapiFields.add("CreationDate");
    openapiFields.add("UpdatedDate");
    openapiFields.add("ExpirationDate");
    openapiFields.add("Reseller");
    openapiFields.add("DnsSec");
    openapiFields.add("StatusList");
    openapiFields.add("DnssecKeys");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDomainDetailResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDomainDetailResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDomainDetailResponse is not found in the empty JSON string", GetDomainDetailResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDomainDetailResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDomainDetailResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `Nameservers`
      if (jsonObj.get("Nameservers") != null && !jsonObj.get("Nameservers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Nameservers"));
      }
      // validate the optional field `AutoRenew`
      if (jsonObj.get("AutoRenew") != null && !jsonObj.get("AutoRenew").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoRenew"));
      }
      // validate the optional field `AdminContact`
      if (jsonObj.get("AdminContact") != null && !jsonObj.get("AdminContact").isJsonNull()) {
        GetDomainDetailResponseAdminContact.validateJsonElement(jsonObj.get("AdminContact"));
      }
      // validate the optional field `RegistrantContact`
      if (jsonObj.get("RegistrantContact") != null && !jsonObj.get("RegistrantContact").isJsonNull()) {
        GetDomainDetailResponseRegistrantContact.validateJsonElement(jsonObj.get("RegistrantContact"));
      }
      // validate the optional field `TechContact`
      if (jsonObj.get("TechContact") != null && !jsonObj.get("TechContact").isJsonNull()) {
        GetDomainDetailResponseTechContact.validateJsonElement(jsonObj.get("TechContact"));
      }
      // validate the optional field `AdminPrivacy`
      if (jsonObj.get("AdminPrivacy") != null && !jsonObj.get("AdminPrivacy").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AdminPrivacy"));
      }
      // validate the optional field `RegistrantPrivacy`
      if (jsonObj.get("RegistrantPrivacy") != null && !jsonObj.get("RegistrantPrivacy").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RegistrantPrivacy"));
      }
      // validate the optional field `TechPrivacy`
      if (jsonObj.get("TechPrivacy") != null && !jsonObj.get("TechPrivacy").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TechPrivacy"));
      }
      // validate the optional field `RegistrarName`
      if (jsonObj.get("RegistrarName") != null && !jsonObj.get("RegistrarName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegistrarName"));
      }
      // validate the optional field `WhoIsServer`
      if (jsonObj.get("WhoIsServer") != null && !jsonObj.get("WhoIsServer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WhoIsServer"));
      }
      // validate the optional field `RegistrarUrl`
      if (jsonObj.get("RegistrarUrl") != null && !jsonObj.get("RegistrarUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegistrarUrl"));
      }
      // validate the optional field `AbuseContactEmail`
      if (jsonObj.get("AbuseContactEmail") != null && !jsonObj.get("AbuseContactEmail").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AbuseContactEmail"));
      }
      // validate the optional field `AbuseContactPhone`
      if (jsonObj.get("AbuseContactPhone") != null && !jsonObj.get("AbuseContactPhone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AbuseContactPhone"));
      }
      // validate the optional field `RegistryDomainId`
      if (jsonObj.get("RegistryDomainId") != null && !jsonObj.get("RegistryDomainId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RegistryDomainId"));
      }
      // validate the optional field `CreationDate`
      if (jsonObj.get("CreationDate") != null && !jsonObj.get("CreationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationDate"));
      }
      // validate the optional field `UpdatedDate`
      if (jsonObj.get("UpdatedDate") != null && !jsonObj.get("UpdatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedDate"));
      }
      // validate the optional field `ExpirationDate`
      if (jsonObj.get("ExpirationDate") != null && !jsonObj.get("ExpirationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ExpirationDate"));
      }
      // validate the optional field `Reseller`
      if (jsonObj.get("Reseller") != null && !jsonObj.get("Reseller").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Reseller"));
      }
      // validate the optional field `DnsSec`
      if (jsonObj.get("DnsSec") != null && !jsonObj.get("DnsSec").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DnsSec"));
      }
      // validate the optional field `StatusList`
      if (jsonObj.get("StatusList") != null && !jsonObj.get("StatusList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("StatusList"));
      }
      // validate the optional field `DnssecKeys`
      if (jsonObj.get("DnssecKeys") != null && !jsonObj.get("DnssecKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DnssecKeys"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDomainDetailResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDomainDetailResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDomainDetailResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDomainDetailResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDomainDetailResponse>() {
           @Override
           public void write(JsonWriter out, GetDomainDetailResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDomainDetailResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDomainDetailResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDomainDetailResponse
   * @throws IOException if the JSON string is invalid with respect to GetDomainDetailResponse
   */
  public static GetDomainDetailResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDomainDetailResponse.class);
  }

  /**
   * Convert an instance of GetDomainDetailResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

