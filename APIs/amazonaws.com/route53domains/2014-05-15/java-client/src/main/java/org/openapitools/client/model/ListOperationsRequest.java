/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ListOperationsSortAttributeName;
import org.openapitools.client.model.SortOrder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ListOperations request includes the following elements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:05.093058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListOperationsRequest {
  public static final String SERIALIZED_NAME_SUBMITTED_SINCE = "SubmittedSince";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_SINCE)
  private OffsetDateTime submittedSince;

  public static final String SERIALIZED_NAME_MARKER = "Marker";
  @SerializedName(SERIALIZED_NAME_MARKER)
  private String marker;

  public static final String SERIALIZED_NAME_MAX_ITEMS = "MaxItems";
  @SerializedName(SERIALIZED_NAME_MAX_ITEMS)
  private Integer maxItems;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private List status;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private List type;

  public static final String SERIALIZED_NAME_SORT_BY = "SortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private ListOperationsSortAttributeName sortBy;

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrder sortOrder;

  public ListOperationsRequest() {
  }

  public ListOperationsRequest submittedSince(OffsetDateTime submittedSince) {
    this.submittedSince = submittedSince;
    return this;
  }

  /**
   * Get submittedSince
   * @return submittedSince
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSubmittedSince() {
    return submittedSince;
  }

  public void setSubmittedSince(OffsetDateTime submittedSince) {
    this.submittedSince = submittedSince;
  }


  public ListOperationsRequest marker(String marker) {
    this.marker = marker;
    return this;
  }

  /**
   * Get marker
   * @return marker
   */
  @javax.annotation.Nullable
  public String getMarker() {
    return marker;
  }

  public void setMarker(String marker) {
    this.marker = marker;
  }


  public ListOperationsRequest maxItems(Integer maxItems) {
    this.maxItems = maxItems;
    return this;
  }

  /**
   * Get maxItems
   * @return maxItems
   */
  @javax.annotation.Nullable
  public Integer getMaxItems() {
    return maxItems;
  }

  public void setMaxItems(Integer maxItems) {
    this.maxItems = maxItems;
  }


  public ListOperationsRequest status(List status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public List getStatus() {
    return status;
  }

  public void setStatus(List status) {
    this.status = status;
  }


  public ListOperationsRequest type(List type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public List getType() {
    return type;
  }

  public void setType(List type) {
    this.type = type;
  }


  public ListOperationsRequest sortBy(ListOperationsSortAttributeName sortBy) {
    this.sortBy = sortBy;
    return this;
  }

  /**
   * Get sortBy
   * @return sortBy
   */
  @javax.annotation.Nullable
  public ListOperationsSortAttributeName getSortBy() {
    return sortBy;
  }

  public void setSortBy(ListOperationsSortAttributeName sortBy) {
    this.sortBy = sortBy;
  }


  public ListOperationsRequest sortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * Get sortOrder
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrder getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrder sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListOperationsRequest listOperationsRequest = (ListOperationsRequest) o;
    return Objects.equals(this.submittedSince, listOperationsRequest.submittedSince) &&
        Objects.equals(this.marker, listOperationsRequest.marker) &&
        Objects.equals(this.maxItems, listOperationsRequest.maxItems) &&
        Objects.equals(this.status, listOperationsRequest.status) &&
        Objects.equals(this.type, listOperationsRequest.type) &&
        Objects.equals(this.sortBy, listOperationsRequest.sortBy) &&
        Objects.equals(this.sortOrder, listOperationsRequest.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(submittedSince, marker, maxItems, status, type, sortBy, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListOperationsRequest {\n");
    sb.append("    submittedSince: ").append(toIndentedString(submittedSince)).append("\n");
    sb.append("    marker: ").append(toIndentedString(marker)).append("\n");
    sb.append("    maxItems: ").append(toIndentedString(maxItems)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SubmittedSince");
    openapiFields.add("Marker");
    openapiFields.add("MaxItems");
    openapiFields.add("Status");
    openapiFields.add("Type");
    openapiFields.add("SortBy");
    openapiFields.add("SortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListOperationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListOperationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListOperationsRequest is not found in the empty JSON string", ListOperationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListOperationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListOperationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SubmittedSince`
      if (jsonObj.get("SubmittedSince") != null && !jsonObj.get("SubmittedSince").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("SubmittedSince"));
      }
      // validate the optional field `Marker`
      if (jsonObj.get("Marker") != null && !jsonObj.get("Marker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Marker"));
      }
      // validate the optional field `MaxItems`
      if (jsonObj.get("MaxItems") != null && !jsonObj.get("MaxItems").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxItems"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `SortBy`
      if (jsonObj.get("SortBy") != null && !jsonObj.get("SortBy").isJsonNull()) {
        ListOperationsSortAttributeName.validateJsonElement(jsonObj.get("SortBy"));
      }
      // validate the optional field `SortOrder`
      if (jsonObj.get("SortOrder") != null && !jsonObj.get("SortOrder").isJsonNull()) {
        SortOrder.validateJsonElement(jsonObj.get("SortOrder"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListOperationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListOperationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListOperationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListOperationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListOperationsRequest>() {
           @Override
           public void write(JsonWriter out, ListOperationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListOperationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListOperationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListOperationsRequest
   * @throws IOException if the JSON string is invalid with respect to ListOperationsRequest
   */
  public static ListOperationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListOperationsRequest.class);
  }

  /**
   * Convert an instance of ListOperationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

