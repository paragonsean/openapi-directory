/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Information about the DNSSEC key.&lt;/p&gt; &lt;p&gt;You get this from your DNS provider and then give it to RouteÂ 53 (by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AssociateDelegationSignerToDomain.html\&quot;&gt;AssociateDelegationSignerToDomain&lt;/a&gt;) to pass it to the registry to establish the chain of trust.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:05.093058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DnssecKey {
  public static final String SERIALIZED_NAME_ALGORITHM = "Algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private Integer algorithm;

  public static final String SERIALIZED_NAME_FLAGS = "Flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private Integer flags;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "PublicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_DIGEST_TYPE = "DigestType";
  @SerializedName(SERIALIZED_NAME_DIGEST_TYPE)
  private Integer digestType;

  public static final String SERIALIZED_NAME_DIGEST = "Digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_KEY_TAG = "KeyTag";
  @SerializedName(SERIALIZED_NAME_KEY_TAG)
  private Integer keyTag;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public DnssecKey() {
  }

  public DnssecKey algorithm(Integer algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Get algorithm
   * @return algorithm
   */
  @javax.annotation.Nullable
  public Integer getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(Integer algorithm) {
    this.algorithm = algorithm;
  }


  public DnssecKey flags(Integer flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public Integer getFlags() {
    return flags;
  }

  public void setFlags(Integer flags) {
    this.flags = flags;
  }


  public DnssecKey publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public DnssecKey digestType(Integer digestType) {
    this.digestType = digestType;
    return this;
  }

  /**
   * Get digestType
   * @return digestType
   */
  @javax.annotation.Nullable
  public Integer getDigestType() {
    return digestType;
  }

  public void setDigestType(Integer digestType) {
    this.digestType = digestType;
  }


  public DnssecKey digest(String digest) {
    this.digest = digest;
    return this;
  }

  /**
   * Get digest
   * @return digest
   */
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }


  public DnssecKey keyTag(Integer keyTag) {
    this.keyTag = keyTag;
    return this;
  }

  /**
   * Get keyTag
   * @return keyTag
   */
  @javax.annotation.Nullable
  public Integer getKeyTag() {
    return keyTag;
  }

  public void setKeyTag(Integer keyTag) {
    this.keyTag = keyTag;
  }


  public DnssecKey id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnssecKey dnssecKey = (DnssecKey) o;
    return Objects.equals(this.algorithm, dnssecKey.algorithm) &&
        Objects.equals(this.flags, dnssecKey.flags) &&
        Objects.equals(this.publicKey, dnssecKey.publicKey) &&
        Objects.equals(this.digestType, dnssecKey.digestType) &&
        Objects.equals(this.digest, dnssecKey.digest) &&
        Objects.equals(this.keyTag, dnssecKey.keyTag) &&
        Objects.equals(this.id, dnssecKey.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, flags, publicKey, digestType, digest, keyTag, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnssecKey {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    digestType: ").append(toIndentedString(digestType)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    keyTag: ").append(toIndentedString(keyTag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Algorithm");
    openapiFields.add("Flags");
    openapiFields.add("PublicKey");
    openapiFields.add("DigestType");
    openapiFields.add("Digest");
    openapiFields.add("KeyTag");
    openapiFields.add("Id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DnssecKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnssecKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnssecKey is not found in the empty JSON string", DnssecKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnssecKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnssecKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Algorithm`
      if (jsonObj.get("Algorithm") != null && !jsonObj.get("Algorithm").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Algorithm"));
      }
      // validate the optional field `Flags`
      if (jsonObj.get("Flags") != null && !jsonObj.get("Flags").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Flags"));
      }
      // validate the optional field `PublicKey`
      if (jsonObj.get("PublicKey") != null && !jsonObj.get("PublicKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublicKey"));
      }
      // validate the optional field `DigestType`
      if (jsonObj.get("DigestType") != null && !jsonObj.get("DigestType").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DigestType"));
      }
      // validate the optional field `Digest`
      if (jsonObj.get("Digest") != null && !jsonObj.get("Digest").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Digest"));
      }
      // validate the optional field `KeyTag`
      if (jsonObj.get("KeyTag") != null && !jsonObj.get("KeyTag").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("KeyTag"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnssecKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnssecKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnssecKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnssecKey.class));

       return (TypeAdapter<T>) new TypeAdapter<DnssecKey>() {
           @Override
           public void write(JsonWriter out, DnssecKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnssecKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DnssecKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DnssecKey
   * @throws IOException if the JSON string is invalid with respect to DnssecKey
   */
  public static DnssecKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnssecKey.class);
  }

  /**
   * Convert an instance of DnssecKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

