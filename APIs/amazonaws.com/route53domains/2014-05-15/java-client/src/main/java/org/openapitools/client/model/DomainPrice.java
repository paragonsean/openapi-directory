/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DomainPriceChangeOwnershipPrice;
import org.openapitools.client.model.DomainPriceRegistrationPrice;
import org.openapitools.client.model.DomainPriceRenewalPrice;
import org.openapitools.client.model.DomainPriceRestorationPrice;
import org.openapitools.client.model.DomainPriceTransferPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the domain price associated with a TLD.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:05.093058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainPrice {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGISTRATION_PRICE = "RegistrationPrice";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_PRICE)
  private DomainPriceRegistrationPrice registrationPrice;

  public static final String SERIALIZED_NAME_TRANSFER_PRICE = "TransferPrice";
  @SerializedName(SERIALIZED_NAME_TRANSFER_PRICE)
  private DomainPriceTransferPrice transferPrice;

  public static final String SERIALIZED_NAME_RENEWAL_PRICE = "RenewalPrice";
  @SerializedName(SERIALIZED_NAME_RENEWAL_PRICE)
  private DomainPriceRenewalPrice renewalPrice;

  public static final String SERIALIZED_NAME_CHANGE_OWNERSHIP_PRICE = "ChangeOwnershipPrice";
  @SerializedName(SERIALIZED_NAME_CHANGE_OWNERSHIP_PRICE)
  private DomainPriceChangeOwnershipPrice changeOwnershipPrice;

  public static final String SERIALIZED_NAME_RESTORATION_PRICE = "RestorationPrice";
  @SerializedName(SERIALIZED_NAME_RESTORATION_PRICE)
  private DomainPriceRestorationPrice restorationPrice;

  public DomainPrice() {
  }

  public DomainPrice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DomainPrice registrationPrice(DomainPriceRegistrationPrice registrationPrice) {
    this.registrationPrice = registrationPrice;
    return this;
  }

  /**
   * Get registrationPrice
   * @return registrationPrice
   */
  @javax.annotation.Nullable
  public DomainPriceRegistrationPrice getRegistrationPrice() {
    return registrationPrice;
  }

  public void setRegistrationPrice(DomainPriceRegistrationPrice registrationPrice) {
    this.registrationPrice = registrationPrice;
  }


  public DomainPrice transferPrice(DomainPriceTransferPrice transferPrice) {
    this.transferPrice = transferPrice;
    return this;
  }

  /**
   * Get transferPrice
   * @return transferPrice
   */
  @javax.annotation.Nullable
  public DomainPriceTransferPrice getTransferPrice() {
    return transferPrice;
  }

  public void setTransferPrice(DomainPriceTransferPrice transferPrice) {
    this.transferPrice = transferPrice;
  }


  public DomainPrice renewalPrice(DomainPriceRenewalPrice renewalPrice) {
    this.renewalPrice = renewalPrice;
    return this;
  }

  /**
   * Get renewalPrice
   * @return renewalPrice
   */
  @javax.annotation.Nullable
  public DomainPriceRenewalPrice getRenewalPrice() {
    return renewalPrice;
  }

  public void setRenewalPrice(DomainPriceRenewalPrice renewalPrice) {
    this.renewalPrice = renewalPrice;
  }


  public DomainPrice changeOwnershipPrice(DomainPriceChangeOwnershipPrice changeOwnershipPrice) {
    this.changeOwnershipPrice = changeOwnershipPrice;
    return this;
  }

  /**
   * Get changeOwnershipPrice
   * @return changeOwnershipPrice
   */
  @javax.annotation.Nullable
  public DomainPriceChangeOwnershipPrice getChangeOwnershipPrice() {
    return changeOwnershipPrice;
  }

  public void setChangeOwnershipPrice(DomainPriceChangeOwnershipPrice changeOwnershipPrice) {
    this.changeOwnershipPrice = changeOwnershipPrice;
  }


  public DomainPrice restorationPrice(DomainPriceRestorationPrice restorationPrice) {
    this.restorationPrice = restorationPrice;
    return this;
  }

  /**
   * Get restorationPrice
   * @return restorationPrice
   */
  @javax.annotation.Nullable
  public DomainPriceRestorationPrice getRestorationPrice() {
    return restorationPrice;
  }

  public void setRestorationPrice(DomainPriceRestorationPrice restorationPrice) {
    this.restorationPrice = restorationPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainPrice domainPrice = (DomainPrice) o;
    return Objects.equals(this.name, domainPrice.name) &&
        Objects.equals(this.registrationPrice, domainPrice.registrationPrice) &&
        Objects.equals(this.transferPrice, domainPrice.transferPrice) &&
        Objects.equals(this.renewalPrice, domainPrice.renewalPrice) &&
        Objects.equals(this.changeOwnershipPrice, domainPrice.changeOwnershipPrice) &&
        Objects.equals(this.restorationPrice, domainPrice.restorationPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, registrationPrice, transferPrice, renewalPrice, changeOwnershipPrice, restorationPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainPrice {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registrationPrice: ").append(toIndentedString(registrationPrice)).append("\n");
    sb.append("    transferPrice: ").append(toIndentedString(transferPrice)).append("\n");
    sb.append("    renewalPrice: ").append(toIndentedString(renewalPrice)).append("\n");
    sb.append("    changeOwnershipPrice: ").append(toIndentedString(changeOwnershipPrice)).append("\n");
    sb.append("    restorationPrice: ").append(toIndentedString(restorationPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("RegistrationPrice");
    openapiFields.add("TransferPrice");
    openapiFields.add("RenewalPrice");
    openapiFields.add("ChangeOwnershipPrice");
    openapiFields.add("RestorationPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainPrice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainPrice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainPrice is not found in the empty JSON string", DomainPrice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainPrice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainPrice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `RegistrationPrice`
      if (jsonObj.get("RegistrationPrice") != null && !jsonObj.get("RegistrationPrice").isJsonNull()) {
        DomainPriceRegistrationPrice.validateJsonElement(jsonObj.get("RegistrationPrice"));
      }
      // validate the optional field `TransferPrice`
      if (jsonObj.get("TransferPrice") != null && !jsonObj.get("TransferPrice").isJsonNull()) {
        DomainPriceTransferPrice.validateJsonElement(jsonObj.get("TransferPrice"));
      }
      // validate the optional field `RenewalPrice`
      if (jsonObj.get("RenewalPrice") != null && !jsonObj.get("RenewalPrice").isJsonNull()) {
        DomainPriceRenewalPrice.validateJsonElement(jsonObj.get("RenewalPrice"));
      }
      // validate the optional field `ChangeOwnershipPrice`
      if (jsonObj.get("ChangeOwnershipPrice") != null && !jsonObj.get("ChangeOwnershipPrice").isJsonNull()) {
        DomainPriceChangeOwnershipPrice.validateJsonElement(jsonObj.get("ChangeOwnershipPrice"));
      }
      // validate the optional field `RestorationPrice`
      if (jsonObj.get("RestorationPrice") != null && !jsonObj.get("RestorationPrice").isJsonNull()) {
        DomainPriceRestorationPrice.validateJsonElement(jsonObj.get("RestorationPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainPrice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainPrice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainPrice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainPrice.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainPrice>() {
           @Override
           public void write(JsonWriter out, DomainPrice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainPrice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainPrice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainPrice
   * @throws IOException if the JSON string is invalid with respect to DomainPrice
   */
  public static DomainPrice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainPrice.class);
  }

  /**
   * Convert an instance of DomainPrice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

