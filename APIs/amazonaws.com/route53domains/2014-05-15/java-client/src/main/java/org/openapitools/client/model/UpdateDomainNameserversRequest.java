/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.&lt;/p&gt; &lt;p&gt;If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email. &lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:05.093058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDomainNameserversRequest {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_FI_AUTH_KEY = "FIAuthKey";
  @SerializedName(SERIALIZED_NAME_FI_AUTH_KEY)
  private String fiAuthKey;

  public static final String SERIALIZED_NAME_NAMESERVERS = "Nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  private List nameservers;

  public UpdateDomainNameserversRequest() {
  }

  public UpdateDomainNameserversRequest domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public UpdateDomainNameserversRequest fiAuthKey(String fiAuthKey) {
    this.fiAuthKey = fiAuthKey;
    return this;
  }

  /**
   * Get fiAuthKey
   * @return fiAuthKey
   */
  @javax.annotation.Nullable
  public String getFiAuthKey() {
    return fiAuthKey;
  }

  public void setFiAuthKey(String fiAuthKey) {
    this.fiAuthKey = fiAuthKey;
  }


  public UpdateDomainNameserversRequest nameservers(List nameservers) {
    this.nameservers = nameservers;
    return this;
  }

  /**
   * Get nameservers
   * @return nameservers
   */
  @javax.annotation.Nonnull
  public List getNameservers() {
    return nameservers;
  }

  public void setNameservers(List nameservers) {
    this.nameservers = nameservers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDomainNameserversRequest updateDomainNameserversRequest = (UpdateDomainNameserversRequest) o;
    return Objects.equals(this.domainName, updateDomainNameserversRequest.domainName) &&
        Objects.equals(this.fiAuthKey, updateDomainNameserversRequest.fiAuthKey) &&
        Objects.equals(this.nameservers, updateDomainNameserversRequest.nameservers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, fiAuthKey, nameservers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDomainNameserversRequest {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    fiAuthKey: ").append(toIndentedString(fiAuthKey)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("FIAuthKey");
    openapiFields.add("Nameservers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DomainName");
    openapiRequiredFields.add("Nameservers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDomainNameserversRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDomainNameserversRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDomainNameserversRequest is not found in the empty JSON string", UpdateDomainNameserversRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDomainNameserversRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDomainNameserversRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDomainNameserversRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DomainName`
      String.validateJsonElement(jsonObj.get("DomainName"));
      // validate the optional field `FIAuthKey`
      if (jsonObj.get("FIAuthKey") != null && !jsonObj.get("FIAuthKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FIAuthKey"));
      }
      // validate the required field `Nameservers`
      List.validateJsonElement(jsonObj.get("Nameservers"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDomainNameserversRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDomainNameserversRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDomainNameserversRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDomainNameserversRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDomainNameserversRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDomainNameserversRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDomainNameserversRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDomainNameserversRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDomainNameserversRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDomainNameserversRequest
   */
  public static UpdateDomainNameserversRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDomainNameserversRequest.class);
  }

  /**
   * Convert an instance of UpdateDomainNameserversRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

