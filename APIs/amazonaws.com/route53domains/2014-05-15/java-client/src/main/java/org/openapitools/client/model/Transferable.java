/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &lt;p&gt;Whether the domain name can be transferred to Route 53.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can transfer only domains that have a value of &lt;code&gt;TRANSFERABLE&lt;/code&gt; or &lt;code&gt;Transferable&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Valid values:&lt;/p&gt; &lt;dl&gt; &lt;dt&gt;TRANSFERABLE&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The domain name can be transferred to Route 53.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;UNTRANSFERRABLE&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The domain name can&#39;t be transferred to Route 53.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DONT_KNOW&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Reserved for future use.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DOMAIN_IN_OWN_ACCOUNT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;The domain already exists in the current Amazon Web Services account.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;DOMAIN_IN_ANOTHER_ACCOUNT&lt;/dt&gt; &lt;dd&gt; &lt;p&gt; the domain exists in another Amazon Web Services account.&lt;/p&gt; &lt;/dd&gt; &lt;dt&gt;PREMIUM_DOMAIN&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Premium domain transfer is not supported.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt;
 */
@JsonAdapter(Transferable.Adapter.class)
public enum Transferable {
  
  TRANSFERABLE("TRANSFERABLE"),
  
  UNTRANSFERABLE("UNTRANSFERABLE"),
  
  DONT_KNOW("DONT_KNOW"),
  
  DOMAIN_IN_OWN_ACCOUNT("DOMAIN_IN_OWN_ACCOUNT"),
  
  DOMAIN_IN_ANOTHER_ACCOUNT("DOMAIN_IN_ANOTHER_ACCOUNT"),
  
  PREMIUM_DOMAIN("PREMIUM_DOMAIN");

  private String value;

  Transferable(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Transferable fromValue(String value) {
    for (Transferable b : Transferable.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Transferable> {
    @Override
    public void write(final JsonWriter jsonWriter, final Transferable enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Transferable read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Transferable.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Transferable.fromValue(value);
  }
}

