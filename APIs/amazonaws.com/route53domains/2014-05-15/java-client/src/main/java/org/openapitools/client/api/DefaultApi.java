/*
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AcceptDomainTransferFromAnotherAwsAccountRequest;
import org.openapitools.client.model.AcceptDomainTransferFromAnotherAwsAccountResponse;
import org.openapitools.client.model.AssociateDelegationSignerToDomainRequest;
import org.openapitools.client.model.AssociateDelegationSignerToDomainResponse;
import org.openapitools.client.model.CancelDomainTransferToAnotherAwsAccountRequest;
import org.openapitools.client.model.CancelDomainTransferToAnotherAwsAccountResponse;
import org.openapitools.client.model.CheckDomainAvailabilityRequest;
import org.openapitools.client.model.CheckDomainAvailabilityResponse;
import org.openapitools.client.model.CheckDomainTransferabilityRequest;
import org.openapitools.client.model.CheckDomainTransferabilityResponse;
import org.openapitools.client.model.DeleteDomainRequest;
import org.openapitools.client.model.DeleteDomainResponse;
import org.openapitools.client.model.DeleteTagsForDomainRequest;
import org.openapitools.client.model.DisableDomainAutoRenewRequest;
import org.openapitools.client.model.DisableDomainTransferLockRequest;
import org.openapitools.client.model.DisableDomainTransferLockResponse;
import org.openapitools.client.model.DisassociateDelegationSignerFromDomainRequest;
import org.openapitools.client.model.DisassociateDelegationSignerFromDomainResponse;
import org.openapitools.client.model.EnableDomainAutoRenewRequest;
import org.openapitools.client.model.EnableDomainTransferLockRequest;
import org.openapitools.client.model.EnableDomainTransferLockResponse;
import org.openapitools.client.model.GetContactReachabilityStatusRequest;
import org.openapitools.client.model.GetContactReachabilityStatusResponse;
import org.openapitools.client.model.GetDomainDetailRequest;
import org.openapitools.client.model.GetDomainDetailResponse;
import org.openapitools.client.model.GetDomainSuggestionsRequest;
import org.openapitools.client.model.GetDomainSuggestionsResponse;
import org.openapitools.client.model.GetOperationDetailRequest;
import org.openapitools.client.model.GetOperationDetailResponse;
import org.openapitools.client.model.ListDomainsRequest;
import org.openapitools.client.model.ListDomainsResponse;
import org.openapitools.client.model.ListOperationsRequest;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListPricesRequest;
import org.openapitools.client.model.ListPricesResponse;
import org.openapitools.client.model.ListTagsForDomainRequest;
import org.openapitools.client.model.ListTagsForDomainResponse;
import org.openapitools.client.model.PushDomainRequest;
import org.openapitools.client.model.RegisterDomainRequest;
import org.openapitools.client.model.RegisterDomainResponse;
import org.openapitools.client.model.RejectDomainTransferFromAnotherAwsAccountRequest;
import org.openapitools.client.model.RejectDomainTransferFromAnotherAwsAccountResponse;
import org.openapitools.client.model.RenewDomainRequest;
import org.openapitools.client.model.RenewDomainResponse;
import org.openapitools.client.model.ResendContactReachabilityEmailRequest;
import org.openapitools.client.model.ResendContactReachabilityEmailResponse;
import org.openapitools.client.model.ResendOperationAuthorizationRequest;
import org.openapitools.client.model.RetrieveDomainAuthCodeRequest;
import org.openapitools.client.model.RetrieveDomainAuthCodeResponse;
import org.openapitools.client.model.TransferDomainRequest;
import org.openapitools.client.model.TransferDomainResponse;
import org.openapitools.client.model.TransferDomainToAnotherAwsAccountRequest;
import org.openapitools.client.model.TransferDomainToAnotherAwsAccountResponse;
import org.openapitools.client.model.UpdateDomainContactPrivacyRequest;
import org.openapitools.client.model.UpdateDomainContactPrivacyResponse;
import org.openapitools.client.model.UpdateDomainContactRequest;
import org.openapitools.client.model.UpdateDomainContactResponse;
import org.openapitools.client.model.UpdateDomainNameserversRequest;
import org.openapitools.client.model.UpdateDomainNameserversResponse;
import org.openapitools.client.model.UpdateTagsForDomainRequest;
import org.openapitools.client.model.ViewBillingRequest;
import org.openapitools.client.model.ViewBillingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptDomainTransferFromAnotherAwsAccount
     * @param xAmzTarget  (required)
     * @param acceptDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptDomainTransferFromAnotherAwsAccountCall(String xAmzTarget, AcceptDomainTransferFromAnotherAwsAccountRequest acceptDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = acceptDomainTransferFromAnotherAwsAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptDomainTransferFromAnotherAwsAccountValidateBeforeCall(String xAmzTarget, AcceptDomainTransferFromAnotherAwsAccountRequest acceptDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling acceptDomainTransferFromAnotherAwsAccount(Async)");
        }

        // verify the required parameter 'acceptDomainTransferFromAnotherAwsAccountRequest' is set
        if (acceptDomainTransferFromAnotherAwsAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'acceptDomainTransferFromAnotherAwsAccountRequest' when calling acceptDomainTransferFromAnotherAwsAccount(Async)");
        }

        return acceptDomainTransferFromAnotherAwsAccountCall(xAmzTarget, acceptDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Accepts the transfer of a domain from another Amazon Web Services account to the currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the CLI command at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html\&quot;&gt;accept-domain-transfer-from-another-aws-account&lt;/a&gt;, use JSON format as input instead of text because otherwise CLI will throw an error from domain transfer input that includes single quotes.&lt;/p&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param acceptDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AcceptDomainTransferFromAnotherAwsAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public AcceptDomainTransferFromAnotherAwsAccountResponse acceptDomainTransferFromAnotherAwsAccount(String xAmzTarget, AcceptDomainTransferFromAnotherAwsAccountRequest acceptDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AcceptDomainTransferFromAnotherAwsAccountResponse> localVarResp = acceptDomainTransferFromAnotherAwsAccountWithHttpInfo(xAmzTarget, acceptDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Accepts the transfer of a domain from another Amazon Web Services account to the currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the CLI command at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html\&quot;&gt;accept-domain-transfer-from-another-aws-account&lt;/a&gt;, use JSON format as input instead of text because otherwise CLI will throw an error from domain transfer input that includes single quotes.&lt;/p&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param acceptDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AcceptDomainTransferFromAnotherAwsAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AcceptDomainTransferFromAnotherAwsAccountResponse> acceptDomainTransferFromAnotherAwsAccountWithHttpInfo(String xAmzTarget, AcceptDomainTransferFromAnotherAwsAccountRequest acceptDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = acceptDomainTransferFromAnotherAwsAccountValidateBeforeCall(xAmzTarget, acceptDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AcceptDomainTransferFromAnotherAwsAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Accepts the transfer of a domain from another Amazon Web Services account to the currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you use the CLI command at &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html\&quot;&gt;accept-domain-transfer-from-another-aws-account&lt;/a&gt;, use JSON format as input instead of text because otherwise CLI will throw an error from domain transfer input that includes single quotes.&lt;/p&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param acceptDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptDomainTransferFromAnotherAwsAccountAsync(String xAmzTarget, AcceptDomainTransferFromAnotherAwsAccountRequest acceptDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AcceptDomainTransferFromAnotherAwsAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptDomainTransferFromAnotherAwsAccountValidateBeforeCall(xAmzTarget, acceptDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AcceptDomainTransferFromAnotherAwsAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateDelegationSignerToDomain
     * @param xAmzTarget  (required)
     * @param associateDelegationSignerToDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DnssecLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateDelegationSignerToDomainCall(String xAmzTarget, AssociateDelegationSignerToDomainRequest associateDelegationSignerToDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateDelegationSignerToDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.AssociateDelegationSignerToDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateDelegationSignerToDomainValidateBeforeCall(String xAmzTarget, AssociateDelegationSignerToDomainRequest associateDelegationSignerToDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling associateDelegationSignerToDomain(Async)");
        }

        // verify the required parameter 'associateDelegationSignerToDomainRequest' is set
        if (associateDelegationSignerToDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'associateDelegationSignerToDomainRequest' when calling associateDelegationSignerToDomain(Async)");
        }

        return associateDelegationSignerToDomainCall(xAmzTarget, associateDelegationSignerToDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Creates a delegation signer (DS) record in the registry zone for this domain name.&lt;/p&gt; &lt;p&gt;Note that creating DS record at the registry impacts DNSSEC validation of your DNS records. This action may render your domain name unavailable on the internet if the steps are completed in the wrong order, or with incorrect timing. For more information about DNSSEC signing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html\&quot;&gt;Configuring DNSSEC signing&lt;/a&gt; in the &lt;i&gt;Route 53 developer guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDelegationSignerToDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AssociateDelegationSignerToDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DnssecLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public AssociateDelegationSignerToDomainResponse associateDelegationSignerToDomain(String xAmzTarget, AssociateDelegationSignerToDomainRequest associateDelegationSignerToDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AssociateDelegationSignerToDomainResponse> localVarResp = associateDelegationSignerToDomainWithHttpInfo(xAmzTarget, associateDelegationSignerToDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Creates a delegation signer (DS) record in the registry zone for this domain name.&lt;/p&gt; &lt;p&gt;Note that creating DS record at the registry impacts DNSSEC validation of your DNS records. This action may render your domain name unavailable on the internet if the steps are completed in the wrong order, or with incorrect timing. For more information about DNSSEC signing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html\&quot;&gt;Configuring DNSSEC signing&lt;/a&gt; in the &lt;i&gt;Route 53 developer guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDelegationSignerToDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AssociateDelegationSignerToDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DnssecLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssociateDelegationSignerToDomainResponse> associateDelegationSignerToDomainWithHttpInfo(String xAmzTarget, AssociateDelegationSignerToDomainRequest associateDelegationSignerToDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateDelegationSignerToDomainValidateBeforeCall(xAmzTarget, associateDelegationSignerToDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AssociateDelegationSignerToDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Creates a delegation signer (DS) record in the registry zone for this domain name.&lt;/p&gt; &lt;p&gt;Note that creating DS record at the registry impacts DNSSEC validation of your DNS records. This action may render your domain name unavailable on the internet if the steps are completed in the wrong order, or with incorrect timing. For more information about DNSSEC signing, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html\&quot;&gt;Configuring DNSSEC signing&lt;/a&gt; in the &lt;i&gt;Route 53 developer guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param associateDelegationSignerToDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DnssecLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateDelegationSignerToDomainAsync(String xAmzTarget, AssociateDelegationSignerToDomainRequest associateDelegationSignerToDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AssociateDelegationSignerToDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateDelegationSignerToDomainValidateBeforeCall(xAmzTarget, associateDelegationSignerToDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AssociateDelegationSignerToDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelDomainTransferToAnotherAwsAccount
     * @param xAmzTarget  (required)
     * @param cancelDomainTransferToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDomainTransferToAnotherAwsAccountCall(String xAmzTarget, CancelDomainTransferToAnotherAwsAccountRequest cancelDomainTransferToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cancelDomainTransferToAnotherAwsAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDomainTransferToAnotherAwsAccountValidateBeforeCall(String xAmzTarget, CancelDomainTransferToAnotherAwsAccountRequest cancelDomainTransferToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling cancelDomainTransferToAnotherAwsAccount(Async)");
        }

        // verify the required parameter 'cancelDomainTransferToAnotherAwsAccountRequest' is set
        if (cancelDomainTransferToAnotherAwsAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'cancelDomainTransferToAnotherAwsAccountRequest' when calling cancelDomainTransferToAnotherAwsAccount(Async)");
        }

        return cancelDomainTransferToAnotherAwsAccountCall(xAmzTarget, cancelDomainTransferToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You must cancel the transfer before the other Amazon Web Services account accepts the transfer using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\&quot;&gt;AcceptDomainTransferFromAnotherAwsAccount&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelDomainTransferToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CancelDomainTransferToAnotherAwsAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public CancelDomainTransferToAnotherAwsAccountResponse cancelDomainTransferToAnotherAwsAccount(String xAmzTarget, CancelDomainTransferToAnotherAwsAccountRequest cancelDomainTransferToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CancelDomainTransferToAnotherAwsAccountResponse> localVarResp = cancelDomainTransferToAnotherAwsAccountWithHttpInfo(xAmzTarget, cancelDomainTransferToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You must cancel the transfer before the other Amazon Web Services account accepts the transfer using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\&quot;&gt;AcceptDomainTransferFromAnotherAwsAccount&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelDomainTransferToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CancelDomainTransferToAnotherAwsAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelDomainTransferToAnotherAwsAccountResponse> cancelDomainTransferToAnotherAwsAccountWithHttpInfo(String xAmzTarget, CancelDomainTransferToAnotherAwsAccountRequest cancelDomainTransferToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = cancelDomainTransferToAnotherAwsAccountValidateBeforeCall(xAmzTarget, cancelDomainTransferToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CancelDomainTransferToAnotherAwsAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt;You must cancel the transfer before the other Amazon Web Services account accepts the transfer using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\&quot;&gt;AcceptDomainTransferFromAnotherAwsAccount&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param cancelDomainTransferToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelDomainTransferToAnotherAwsAccountAsync(String xAmzTarget, CancelDomainTransferToAnotherAwsAccountRequest cancelDomainTransferToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CancelDomainTransferToAnotherAwsAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDomainTransferToAnotherAwsAccountValidateBeforeCall(xAmzTarget, cancelDomainTransferToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CancelDomainTransferToAnotherAwsAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkDomainAvailability
     * @param xAmzTarget  (required)
     * @param checkDomainAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDomainAvailabilityCall(String xAmzTarget, CheckDomainAvailabilityRequest checkDomainAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkDomainAvailabilityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.CheckDomainAvailability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDomainAvailabilityValidateBeforeCall(String xAmzTarget, CheckDomainAvailabilityRequest checkDomainAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling checkDomainAvailability(Async)");
        }

        // verify the required parameter 'checkDomainAvailabilityRequest' is set
        if (checkDomainAvailabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'checkDomainAvailabilityRequest' when calling checkDomainAvailability(Async)");
        }

        return checkDomainAvailabilityCall(xAmzTarget, checkDomainAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must submit another request to determine the availability of the domain name.
     * @param xAmzTarget  (required)
     * @param checkDomainAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CheckDomainAvailabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public CheckDomainAvailabilityResponse checkDomainAvailability(String xAmzTarget, CheckDomainAvailabilityRequest checkDomainAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CheckDomainAvailabilityResponse> localVarResp = checkDomainAvailabilityWithHttpInfo(xAmzTarget, checkDomainAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must submit another request to determine the availability of the domain name.
     * @param xAmzTarget  (required)
     * @param checkDomainAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CheckDomainAvailabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDomainAvailabilityResponse> checkDomainAvailabilityWithHttpInfo(String xAmzTarget, CheckDomainAvailabilityRequest checkDomainAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = checkDomainAvailabilityValidateBeforeCall(xAmzTarget, checkDomainAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CheckDomainAvailabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must submit another request to determine the availability of the domain name.
     * @param xAmzTarget  (required)
     * @param checkDomainAvailabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDomainAvailabilityAsync(String xAmzTarget, CheckDomainAvailabilityRequest checkDomainAvailabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CheckDomainAvailabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDomainAvailabilityValidateBeforeCall(xAmzTarget, checkDomainAvailabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CheckDomainAvailabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkDomainTransferability
     * @param xAmzTarget  (required)
     * @param checkDomainTransferabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDomainTransferabilityCall(String xAmzTarget, CheckDomainTransferabilityRequest checkDomainTransferabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkDomainTransferabilityRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.CheckDomainTransferability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDomainTransferabilityValidateBeforeCall(String xAmzTarget, CheckDomainTransferabilityRequest checkDomainTransferabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling checkDomainTransferability(Async)");
        }

        // verify the required parameter 'checkDomainTransferabilityRequest' is set
        if (checkDomainTransferabilityRequest == null) {
            throw new ApiException("Missing the required parameter 'checkDomainTransferabilityRequest' when calling checkDomainTransferability(Async)");
        }

        return checkDomainTransferabilityCall(xAmzTarget, checkDomainTransferabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Checks whether a domain name can be transferred to Amazon Route 53. 
     * @param xAmzTarget  (required)
     * @param checkDomainTransferabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CheckDomainTransferabilityResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public CheckDomainTransferabilityResponse checkDomainTransferability(String xAmzTarget, CheckDomainTransferabilityRequest checkDomainTransferabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CheckDomainTransferabilityResponse> localVarResp = checkDomainTransferabilityWithHttpInfo(xAmzTarget, checkDomainTransferabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether a domain name can be transferred to Amazon Route 53. 
     * @param xAmzTarget  (required)
     * @param checkDomainTransferabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CheckDomainTransferabilityResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckDomainTransferabilityResponse> checkDomainTransferabilityWithHttpInfo(String xAmzTarget, CheckDomainTransferabilityRequest checkDomainTransferabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = checkDomainTransferabilityValidateBeforeCall(xAmzTarget, checkDomainTransferabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CheckDomainTransferabilityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether a domain name can be transferred to Amazon Route 53. 
     * @param xAmzTarget  (required)
     * @param checkDomainTransferabilityRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkDomainTransferabilityAsync(String xAmzTarget, CheckDomainTransferabilityRequest checkDomainTransferabilityRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CheckDomainTransferabilityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkDomainTransferabilityValidateBeforeCall(xAmzTarget, checkDomainTransferabilityRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CheckDomainTransferabilityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDomain
     * @param xAmzTarget  (required)
     * @param deleteDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainCall(String xAmzTarget, DeleteDomainRequest deleteDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.DeleteDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainValidateBeforeCall(String xAmzTarget, DeleteDomainRequest deleteDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteDomain(Async)");
        }

        // verify the required parameter 'deleteDomainRequest' is set
        if (deleteDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteDomainRequest' when calling deleteDomain(Async)");
        }

        return deleteDomainCall(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation deletes the specified domain. This action is permanent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html\&quot;&gt;Deleting a domain name registration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To transfer the domain registration to another registrar, use the transfer process that’s provided by the registrar to which you want to transfer the registration. Otherwise, the following apply:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You can’t get a refund for the cost of a deleted domain registration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the registration has been deleted, we&#39;ll send you a confirmation to the registrant contact. The email will come from &lt;code&gt;noreply@domainnameverification.net&lt;/code&gt; or &lt;code&gt;noreply@registrar.amazon.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDomainResponse deleteDomain(String xAmzTarget, DeleteDomainRequest deleteDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDomainResponse> localVarResp = deleteDomainWithHttpInfo(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation deletes the specified domain. This action is permanent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html\&quot;&gt;Deleting a domain name registration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To transfer the domain registration to another registrar, use the transfer process that’s provided by the registrar to which you want to transfer the registration. Otherwise, the following apply:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You can’t get a refund for the cost of a deleted domain registration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the registration has been deleted, we&#39;ll send you a confirmation to the registrant contact. The email will come from &lt;code&gt;noreply@domainnameverification.net&lt;/code&gt; or &lt;code&gt;noreply@registrar.amazon.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDomainResponse> deleteDomainWithHttpInfo(String xAmzTarget, DeleteDomainRequest deleteDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation deletes the specified domain. This action is permanent. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html\&quot;&gt;Deleting a domain name registration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To transfer the domain registration to another registrar, use the transfer process that’s provided by the registrar to which you want to transfer the registration. Otherwise, the following apply:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;You can’t get a refund for the cost of a deleted domain registration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;When the registration has been deleted, we&#39;ll send you a confirmation to the registrant contact. The email will come from &lt;code&gt;noreply@domainnameverification.net&lt;/code&gt; or &lt;code&gt;noreply@registrar.amazon.com&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzTarget  (required)
     * @param deleteDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDomainAsync(String xAmzTarget, DeleteDomainRequest deleteDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(xAmzTarget, deleteDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTagsForDomain
     * @param xAmzTarget  (required)
     * @param deleteTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagsForDomainCall(String xAmzTarget, DeleteTagsForDomainRequest deleteTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTagsForDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.DeleteTagsForDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagsForDomainValidateBeforeCall(String xAmzTarget, DeleteTagsForDomainRequest deleteTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling deleteTagsForDomain(Async)");
        }

        // verify the required parameter 'deleteTagsForDomainRequest' is set
        if (deleteTagsForDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTagsForDomainRequest' when calling deleteTagsForDomain(Async)");
        }

        return deleteTagsForDomainCall(xAmzTarget, deleteTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation deletes the specified tags for a domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTagsForDomain(String xAmzTarget, DeleteTagsForDomainRequest deleteTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTagsForDomainWithHttpInfo(xAmzTarget, deleteTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation deletes the specified tags for a domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTagsForDomainWithHttpInfo(String xAmzTarget, DeleteTagsForDomainRequest deleteTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTagsForDomainValidateBeforeCall(xAmzTarget, deleteTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation deletes the specified tags for a domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param deleteTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTagsForDomainAsync(String xAmzTarget, DeleteTagsForDomainRequest deleteTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagsForDomainValidateBeforeCall(xAmzTarget, deleteTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableDomainAutoRenew
     * @param xAmzTarget  (required)
     * @param disableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDomainAutoRenewCall(String xAmzTarget, DisableDomainAutoRenewRequest disableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableDomainAutoRenewRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.DisableDomainAutoRenew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableDomainAutoRenewValidateBeforeCall(String xAmzTarget, DisableDomainAutoRenewRequest disableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disableDomainAutoRenew(Async)");
        }

        // verify the required parameter 'disableDomainAutoRenewRequest' is set
        if (disableDomainAutoRenewRequest == null) {
            throw new ApiException("Missing the required parameter 'disableDomainAutoRenewRequest' when calling disableDomainAutoRenew(Async)");
        }

        return disableDomainAutoRenewCall(xAmzTarget, disableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation disables automatic renewal of domain registration for the specified domain.
     * @param xAmzTarget  (required)
     * @param disableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public Object disableDomainAutoRenew(String xAmzTarget, DisableDomainAutoRenewRequest disableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disableDomainAutoRenewWithHttpInfo(xAmzTarget, disableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation disables automatic renewal of domain registration for the specified domain.
     * @param xAmzTarget  (required)
     * @param disableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disableDomainAutoRenewWithHttpInfo(String xAmzTarget, DisableDomainAutoRenewRequest disableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableDomainAutoRenewValidateBeforeCall(xAmzTarget, disableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation disables automatic renewal of domain registration for the specified domain.
     * @param xAmzTarget  (required)
     * @param disableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDomainAutoRenewAsync(String xAmzTarget, DisableDomainAutoRenewRequest disableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableDomainAutoRenewValidateBeforeCall(xAmzTarget, disableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableDomainTransferLock
     * @param xAmzTarget  (required)
     * @param disableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDomainTransferLockCall(String xAmzTarget, DisableDomainTransferLockRequest disableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disableDomainTransferLockRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.DisableDomainTransferLock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableDomainTransferLockValidateBeforeCall(String xAmzTarget, DisableDomainTransferLockRequest disableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disableDomainTransferLock(Async)");
        }

        // verify the required parameter 'disableDomainTransferLockRequest' is set
        if (disableDomainTransferLockRequest == null) {
            throw new ApiException("Missing the required parameter 'disableDomainTransferLockRequest' when calling disableDomainTransferLock(Async)");
        }

        return disableDomainTransferLockCall(xAmzTarget, disableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation removes the transfer lock on the domain (specifically the &lt;code&gt;clientTransferProhibited&lt;/code&gt; status) to allow domain transfers. We recommend you refrain from performing this action unless you intend to transfer the domain to a different registrar. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param xAmzTarget  (required)
     * @param disableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisableDomainTransferLockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public DisableDomainTransferLockResponse disableDomainTransferLock(String xAmzTarget, DisableDomainTransferLockRequest disableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisableDomainTransferLockResponse> localVarResp = disableDomainTransferLockWithHttpInfo(xAmzTarget, disableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation removes the transfer lock on the domain (specifically the &lt;code&gt;clientTransferProhibited&lt;/code&gt; status) to allow domain transfers. We recommend you refrain from performing this action unless you intend to transfer the domain to a different registrar. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param xAmzTarget  (required)
     * @param disableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisableDomainTransferLockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableDomainTransferLockResponse> disableDomainTransferLockWithHttpInfo(String xAmzTarget, DisableDomainTransferLockRequest disableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableDomainTransferLockValidateBeforeCall(xAmzTarget, disableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisableDomainTransferLockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation removes the transfer lock on the domain (specifically the &lt;code&gt;clientTransferProhibited&lt;/code&gt; status) to allow domain transfers. We recommend you refrain from performing this action unless you intend to transfer the domain to a different registrar. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param xAmzTarget  (required)
     * @param disableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDomainTransferLockAsync(String xAmzTarget, DisableDomainTransferLockRequest disableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisableDomainTransferLockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableDomainTransferLockValidateBeforeCall(xAmzTarget, disableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisableDomainTransferLockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateDelegationSignerFromDomain
     * @param xAmzTarget  (required)
     * @param disassociateDelegationSignerFromDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateDelegationSignerFromDomainCall(String xAmzTarget, DisassociateDelegationSignerFromDomainRequest disassociateDelegationSignerFromDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateDelegationSignerFromDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.DisassociateDelegationSignerFromDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateDelegationSignerFromDomainValidateBeforeCall(String xAmzTarget, DisassociateDelegationSignerFromDomainRequest disassociateDelegationSignerFromDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling disassociateDelegationSignerFromDomain(Async)");
        }

        // verify the required parameter 'disassociateDelegationSignerFromDomainRequest' is set
        if (disassociateDelegationSignerFromDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateDelegationSignerFromDomainRequest' when calling disassociateDelegationSignerFromDomain(Async)");
        }

        return disassociateDelegationSignerFromDomainCall(xAmzTarget, disassociateDelegationSignerFromDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a delegation signer (DS) record in the registry zone for this domain name.
     * @param xAmzTarget  (required)
     * @param disassociateDelegationSignerFromDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisassociateDelegationSignerFromDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public DisassociateDelegationSignerFromDomainResponse disassociateDelegationSignerFromDomain(String xAmzTarget, DisassociateDelegationSignerFromDomainRequest disassociateDelegationSignerFromDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisassociateDelegationSignerFromDomainResponse> localVarResp = disassociateDelegationSignerFromDomainWithHttpInfo(xAmzTarget, disassociateDelegationSignerFromDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a delegation signer (DS) record in the registry zone for this domain name.
     * @param xAmzTarget  (required)
     * @param disassociateDelegationSignerFromDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisassociateDelegationSignerFromDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisassociateDelegationSignerFromDomainResponse> disassociateDelegationSignerFromDomainWithHttpInfo(String xAmzTarget, DisassociateDelegationSignerFromDomainRequest disassociateDelegationSignerFromDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateDelegationSignerFromDomainValidateBeforeCall(xAmzTarget, disassociateDelegationSignerFromDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisassociateDelegationSignerFromDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a delegation signer (DS) record in the registry zone for this domain name.
     * @param xAmzTarget  (required)
     * @param disassociateDelegationSignerFromDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateDelegationSignerFromDomainAsync(String xAmzTarget, DisassociateDelegationSignerFromDomainRequest disassociateDelegationSignerFromDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisassociateDelegationSignerFromDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateDelegationSignerFromDomainValidateBeforeCall(xAmzTarget, disassociateDelegationSignerFromDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisassociateDelegationSignerFromDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableDomainAutoRenew
     * @param xAmzTarget  (required)
     * @param enableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDomainAutoRenewCall(String xAmzTarget, EnableDomainAutoRenewRequest enableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableDomainAutoRenewRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.EnableDomainAutoRenew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableDomainAutoRenewValidateBeforeCall(String xAmzTarget, EnableDomainAutoRenewRequest enableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableDomainAutoRenew(Async)");
        }

        // verify the required parameter 'enableDomainAutoRenewRequest' is set
        if (enableDomainAutoRenewRequest == null) {
            throw new ApiException("Missing the required parameter 'enableDomainAutoRenewRequest' when calling enableDomainAutoRenew(Async)");
        }

        return enableDomainAutoRenewCall(xAmzTarget, enableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires. The cost of renewing your domain registration is billed to your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html\&quot;&gt;Domains That You Can Register with Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. Route 53 requires that you renew before the end of the renewal period so we can complete processing before the deadline.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
     </table>
     */
    public Object enableDomainAutoRenew(String xAmzTarget, EnableDomainAutoRenewRequest enableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = enableDomainAutoRenewWithHttpInfo(xAmzTarget, enableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires. The cost of renewing your domain registration is billed to your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html\&quot;&gt;Domains That You Can Register with Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. Route 53 requires that you renew before the end of the renewal period so we can complete processing before the deadline.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> enableDomainAutoRenewWithHttpInfo(String xAmzTarget, EnableDomainAutoRenewRequest enableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableDomainAutoRenewValidateBeforeCall(xAmzTarget, enableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires. The cost of renewing your domain registration is billed to your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html\&quot;&gt;Domains That You Can Register with Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;. Route 53 requires that you renew before the end of the renewal period so we can complete processing before the deadline.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param enableDomainAutoRenewRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDomainAutoRenewAsync(String xAmzTarget, EnableDomainAutoRenewRequest enableDomainAutoRenewRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableDomainAutoRenewValidateBeforeCall(xAmzTarget, enableDomainAutoRenewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableDomainTransferLock
     * @param xAmzTarget  (required)
     * @param enableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDomainTransferLockCall(String xAmzTarget, EnableDomainTransferLockRequest enableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableDomainTransferLockRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.EnableDomainTransferLock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableDomainTransferLockValidateBeforeCall(String xAmzTarget, EnableDomainTransferLockRequest enableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling enableDomainTransferLock(Async)");
        }

        // verify the required parameter 'enableDomainTransferLockRequest' is set
        if (enableDomainTransferLockRequest == null) {
            throw new ApiException("Missing the required parameter 'enableDomainTransferLockRequest' when calling enableDomainTransferLock(Async)");
        }

        return enableDomainTransferLockCall(xAmzTarget, enableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation sets the transfer lock on the domain (specifically the &lt;code&gt;clientTransferProhibited&lt;/code&gt; status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param xAmzTarget  (required)
     * @param enableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EnableDomainTransferLockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public EnableDomainTransferLockResponse enableDomainTransferLock(String xAmzTarget, EnableDomainTransferLockRequest enableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EnableDomainTransferLockResponse> localVarResp = enableDomainTransferLockWithHttpInfo(xAmzTarget, enableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation sets the transfer lock on the domain (specifically the &lt;code&gt;clientTransferProhibited&lt;/code&gt; status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param xAmzTarget  (required)
     * @param enableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EnableDomainTransferLockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableDomainTransferLockResponse> enableDomainTransferLockWithHttpInfo(String xAmzTarget, EnableDomainTransferLockRequest enableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableDomainTransferLockValidateBeforeCall(xAmzTarget, enableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EnableDomainTransferLockResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation sets the transfer lock on the domain (specifically the &lt;code&gt;clientTransferProhibited&lt;/code&gt; status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param xAmzTarget  (required)
     * @param enableDomainTransferLockRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDomainTransferLockAsync(String xAmzTarget, EnableDomainTransferLockRequest enableDomainTransferLockRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EnableDomainTransferLockResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableDomainTransferLockValidateBeforeCall(xAmzTarget, enableDomainTransferLockRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EnableDomainTransferLockResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactReachabilityStatus
     * @param xAmzTarget  (required)
     * @param getContactReachabilityStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactReachabilityStatusCall(String xAmzTarget, GetContactReachabilityStatusRequest getContactReachabilityStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getContactReachabilityStatusRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.GetContactReachabilityStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactReachabilityStatusValidateBeforeCall(String xAmzTarget, GetContactReachabilityStatusRequest getContactReachabilityStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getContactReachabilityStatus(Async)");
        }

        // verify the required parameter 'getContactReachabilityStatusRequest' is set
        if (getContactReachabilityStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'getContactReachabilityStatusRequest' when calling getContactReachabilityStatus(Async)");
        }

        return getContactReachabilityStatusCall(xAmzTarget, getContactReachabilityStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation returns information about whether the registrant contact has responded.&lt;/p&gt; &lt;p&gt;If you want us to resend the email, use the &lt;code&gt;ResendContactReachabilityEmail&lt;/code&gt; operation.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getContactReachabilityStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetContactReachabilityStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public GetContactReachabilityStatusResponse getContactReachabilityStatus(String xAmzTarget, GetContactReachabilityStatusRequest getContactReachabilityStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetContactReachabilityStatusResponse> localVarResp = getContactReachabilityStatusWithHttpInfo(xAmzTarget, getContactReachabilityStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation returns information about whether the registrant contact has responded.&lt;/p&gt; &lt;p&gt;If you want us to resend the email, use the &lt;code&gt;ResendContactReachabilityEmail&lt;/code&gt; operation.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getContactReachabilityStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetContactReachabilityStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetContactReachabilityStatusResponse> getContactReachabilityStatusWithHttpInfo(String xAmzTarget, GetContactReachabilityStatusRequest getContactReachabilityStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getContactReachabilityStatusValidateBeforeCall(xAmzTarget, getContactReachabilityStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetContactReachabilityStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation returns information about whether the registrant contact has responded.&lt;/p&gt; &lt;p&gt;If you want us to resend the email, use the &lt;code&gt;ResendContactReachabilityEmail&lt;/code&gt; operation.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param getContactReachabilityStatusRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getContactReachabilityStatusAsync(String xAmzTarget, GetContactReachabilityStatusRequest getContactReachabilityStatusRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetContactReachabilityStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactReachabilityStatusValidateBeforeCall(xAmzTarget, getContactReachabilityStatusRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetContactReachabilityStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainDetail
     * @param xAmzTarget  (required)
     * @param getDomainDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainDetailCall(String xAmzTarget, GetDomainDetailRequest getDomainDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDomainDetailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.GetDomainDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainDetailValidateBeforeCall(String xAmzTarget, GetDomainDetailRequest getDomainDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getDomainDetail(Async)");
        }

        // verify the required parameter 'getDomainDetailRequest' is set
        if (getDomainDetailRequest == null) {
            throw new ApiException("Missing the required parameter 'getDomainDetailRequest' when calling getDomainDetail(Async)");
        }

        return getDomainDetailCall(xAmzTarget, getDomainDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account. Contact information for the domain is also returned as part of the output.
     * @param xAmzTarget  (required)
     * @param getDomainDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDomainDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public GetDomainDetailResponse getDomainDetail(String xAmzTarget, GetDomainDetailRequest getDomainDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDomainDetailResponse> localVarResp = getDomainDetailWithHttpInfo(xAmzTarget, getDomainDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account. Contact information for the domain is also returned as part of the output.
     * @param xAmzTarget  (required)
     * @param getDomainDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDomainDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDomainDetailResponse> getDomainDetailWithHttpInfo(String xAmzTarget, GetDomainDetailRequest getDomainDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDomainDetailValidateBeforeCall(xAmzTarget, getDomainDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDomainDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account. Contact information for the domain is also returned as part of the output.
     * @param xAmzTarget  (required)
     * @param getDomainDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainDetailAsync(String xAmzTarget, GetDomainDetailRequest getDomainDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDomainDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainDetailValidateBeforeCall(xAmzTarget, getDomainDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDomainDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDomainSuggestions
     * @param xAmzTarget  (required)
     * @param getDomainSuggestionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainSuggestionsCall(String xAmzTarget, GetDomainSuggestionsRequest getDomainSuggestionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getDomainSuggestionsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.GetDomainSuggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainSuggestionsValidateBeforeCall(String xAmzTarget, GetDomainSuggestionsRequest getDomainSuggestionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getDomainSuggestions(Async)");
        }

        // verify the required parameter 'getDomainSuggestionsRequest' is set
        if (getDomainSuggestionsRequest == null) {
            throw new ApiException("Missing the required parameter 'getDomainSuggestionsRequest' when calling getDomainSuggestions(Async)");
        }

        return getDomainSuggestionsCall(xAmzTarget, getDomainSuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * The GetDomainSuggestions operation returns a list of suggested domain names.
     * @param xAmzTarget  (required)
     * @param getDomainSuggestionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDomainSuggestionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public GetDomainSuggestionsResponse getDomainSuggestions(String xAmzTarget, GetDomainSuggestionsRequest getDomainSuggestionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDomainSuggestionsResponse> localVarResp = getDomainSuggestionsWithHttpInfo(xAmzTarget, getDomainSuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * The GetDomainSuggestions operation returns a list of suggested domain names.
     * @param xAmzTarget  (required)
     * @param getDomainSuggestionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDomainSuggestionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDomainSuggestionsResponse> getDomainSuggestionsWithHttpInfo(String xAmzTarget, GetDomainSuggestionsRequest getDomainSuggestionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDomainSuggestionsValidateBeforeCall(xAmzTarget, getDomainSuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDomainSuggestionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The GetDomainSuggestions operation returns a list of suggested domain names.
     * @param xAmzTarget  (required)
     * @param getDomainSuggestionsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomainSuggestionsAsync(String xAmzTarget, GetDomainSuggestionsRequest getDomainSuggestionsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDomainSuggestionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainSuggestionsValidateBeforeCall(xAmzTarget, getDomainSuggestionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDomainSuggestionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOperationDetail
     * @param xAmzTarget  (required)
     * @param getOperationDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationDetailCall(String xAmzTarget, GetOperationDetailRequest getOperationDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getOperationDetailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.GetOperationDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOperationDetailValidateBeforeCall(String xAmzTarget, GetOperationDetailRequest getOperationDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling getOperationDetail(Async)");
        }

        // verify the required parameter 'getOperationDetailRequest' is set
        if (getOperationDetailRequest == null) {
            throw new ApiException("Missing the required parameter 'getOperationDetailRequest' when calling getOperationDetail(Async)");
        }

        return getOperationDetailCall(xAmzTarget, getOperationDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation returns the current status of an operation that is not completed.
     * @param xAmzTarget  (required)
     * @param getOperationDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetOperationDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public GetOperationDetailResponse getOperationDetail(String xAmzTarget, GetOperationDetailRequest getOperationDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetOperationDetailResponse> localVarResp = getOperationDetailWithHttpInfo(xAmzTarget, getOperationDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns the current status of an operation that is not completed.
     * @param xAmzTarget  (required)
     * @param getOperationDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetOperationDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOperationDetailResponse> getOperationDetailWithHttpInfo(String xAmzTarget, GetOperationDetailRequest getOperationDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getOperationDetailValidateBeforeCall(xAmzTarget, getOperationDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetOperationDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns the current status of an operation that is not completed.
     * @param xAmzTarget  (required)
     * @param getOperationDetailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOperationDetailAsync(String xAmzTarget, GetOperationDetailRequest getOperationDetailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetOperationDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOperationDetailValidateBeforeCall(xAmzTarget, getOperationDetailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetOperationDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDomains
     * @param xAmzTarget  (required)
     * @param listDomainsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDomainsCall(String xAmzTarget, ListDomainsRequest listDomainsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDomainsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ListDomains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDomainsValidateBeforeCall(String xAmzTarget, ListDomainsRequest listDomainsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listDomains(Async)");
        }

        // verify the required parameter 'listDomainsRequest' is set
        if (listDomainsRequest == null) {
            throw new ApiException("Missing the required parameter 'listDomainsRequest' when calling listDomains(Async)");
        }

        return listDomainsCall(xAmzTarget, listDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);

    }

    /**
     * 
     * This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account if no filtering conditions are used.
     * @param xAmzTarget  (required)
     * @param listDomainsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ListDomainsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListDomainsResponse listDomains(String xAmzTarget, ListDomainsRequest listDomainsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        ApiResponse<ListDomainsResponse> localVarResp = listDomainsWithHttpInfo(xAmzTarget, listDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account if no filtering conditions are used.
     * @param xAmzTarget  (required)
     * @param listDomainsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;ListDomainsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDomainsResponse> listDomainsWithHttpInfo(String xAmzTarget, ListDomainsRequest listDomainsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        okhttp3.Call localVarCall = listDomainsValidateBeforeCall(xAmzTarget, listDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, null);
        Type localVarReturnType = new TypeToken<ListDomainsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account if no filtering conditions are used.
     * @param xAmzTarget  (required)
     * @param listDomainsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDomainsAsync(String xAmzTarget, ListDomainsRequest listDomainsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback<ListDomainsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDomainsValidateBeforeCall(xAmzTarget, listDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);
        Type localVarReturnType = new TypeToken<ListDomainsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOperations
     * @param xAmzTarget  (required)
     * @param listOperationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOperationsCall(String xAmzTarget, ListOperationsRequest listOperationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listOperationsRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ListOperations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOperationsValidateBeforeCall(String xAmzTarget, ListOperationsRequest listOperationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listOperations(Async)");
        }

        // verify the required parameter 'listOperationsRequest' is set
        if (listOperationsRequest == null) {
            throw new ApiException("Missing the required parameter 'listOperationsRequest' when calling listOperations(Async)");
        }

        return listOperationsCall(xAmzTarget, listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about all of the operations that return an operation ID and that have ever been performed on domains that were registered by the current account. &lt;/p&gt; &lt;p&gt;This command runs only in the us-east-1 Region.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listOperationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ListOperationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ListOperationsResponse listOperations(String xAmzTarget, ListOperationsRequest listOperationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        ApiResponse<ListOperationsResponse> localVarResp = listOperationsWithHttpInfo(xAmzTarget, listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about all of the operations that return an operation ID and that have ever been performed on domains that were registered by the current account. &lt;/p&gt; &lt;p&gt;This command runs only in the us-east-1 Region.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listOperationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;ListOperationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOperationsResponse> listOperationsWithHttpInfo(String xAmzTarget, ListOperationsRequest listOperationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(xAmzTarget, listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, null);
        Type localVarReturnType = new TypeToken<ListOperationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about all of the operations that return an operation ID and that have ever been performed on domains that were registered by the current account. &lt;/p&gt; &lt;p&gt;This command runs only in the us-east-1 Region.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listOperationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOperationsAsync(String xAmzTarget, ListOperationsRequest listOperationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback<ListOperationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOperationsValidateBeforeCall(xAmzTarget, listOperationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);
        Type localVarReturnType = new TypeToken<ListOperationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPrices
     * @param xAmzTarget  (required)
     * @param listPricesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricesCall(String xAmzTarget, ListPricesRequest listPricesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPricesRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ListPrices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricesValidateBeforeCall(String xAmzTarget, ListPricesRequest listPricesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listPrices(Async)");
        }

        // verify the required parameter 'listPricesRequest' is set
        if (listPricesRequest == null) {
            throw new ApiException("Missing the required parameter 'listPricesRequest' when calling listPrices(Async)");
        }

        return listPricesCall(xAmzTarget, listPricesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Registration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Transfer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Owner change&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain renewal&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain restoration&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listPricesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ListPricesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ListPricesResponse listPrices(String xAmzTarget, ListPricesRequest listPricesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        ApiResponse<ListPricesResponse> localVarResp = listPricesWithHttpInfo(xAmzTarget, listPricesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Registration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Transfer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Owner change&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain renewal&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain restoration&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listPricesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;ListPricesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPricesResponse> listPricesWithHttpInfo(String xAmzTarget, ListPricesRequest listPricesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        okhttp3.Call localVarCall = listPricesValidateBeforeCall(xAmzTarget, listPricesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, null);
        Type localVarReturnType = new TypeToken<ListPricesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Registration&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Transfer&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Owner change&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain renewal&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Domain restoration&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param listPricesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricesAsync(String xAmzTarget, ListPricesRequest listPricesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback<ListPricesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricesValidateBeforeCall(xAmzTarget, listPricesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);
        Type localVarReturnType = new TypeToken<ListPricesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForDomain
     * @param xAmzTarget  (required)
     * @param listTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForDomainCall(String xAmzTarget, ListTagsForDomainRequest listTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ListTagsForDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForDomainValidateBeforeCall(String xAmzTarget, ListTagsForDomainRequest listTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling listTagsForDomain(Async)");
        }

        // verify the required parameter 'listTagsForDomainRequest' is set
        if (listTagsForDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForDomainRequest' when calling listTagsForDomain(Async)");
        }

        return listTagsForDomainCall(xAmzTarget, listTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation returns all of the tags that are associated with the specified domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForDomainResponse listTagsForDomain(String xAmzTarget, ListTagsForDomainRequest listTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForDomainResponse> localVarResp = listTagsForDomainWithHttpInfo(xAmzTarget, listTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation returns all of the tags that are associated with the specified domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForDomainResponse> listTagsForDomainWithHttpInfo(String xAmzTarget, ListTagsForDomainRequest listTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForDomainValidateBeforeCall(xAmzTarget, listTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation returns all of the tags that are associated with the specified domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param listTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForDomainAsync(String xAmzTarget, ListTagsForDomainRequest listTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForDomainValidateBeforeCall(xAmzTarget, listTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pushDomain
     * @param xAmzTarget  (required)
     * @param pushDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushDomainCall(String xAmzTarget, PushDomainRequest pushDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.PushDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushDomainValidateBeforeCall(String xAmzTarget, PushDomainRequest pushDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling pushDomain(Async)");
        }

        // verify the required parameter 'pushDomainRequest' is set
        if (pushDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'pushDomainRequest' when calling pushDomain(Async)");
        }

        return pushDomainCall(xAmzTarget, pushDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Moves a domain from Amazon Web Services to another registrar. &lt;/p&gt; &lt;p&gt;Supported actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Changes the IPS tags of a .uk domain, and pushes it to transit. Transit means that the domain is ready to be transferred to another registrar.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param pushDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public void pushDomain(String xAmzTarget, PushDomainRequest pushDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        pushDomainWithHttpInfo(xAmzTarget, pushDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt; Moves a domain from Amazon Web Services to another registrar. &lt;/p&gt; &lt;p&gt;Supported actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Changes the IPS tags of a .uk domain, and pushes it to transit. Transit means that the domain is ready to be transferred to another registrar.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param pushDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pushDomainWithHttpInfo(String xAmzTarget, PushDomainRequest pushDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = pushDomainValidateBeforeCall(xAmzTarget, pushDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Moves a domain from Amazon Web Services to another registrar. &lt;/p&gt; &lt;p&gt;Supported actions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Changes the IPS tags of a .uk domain, and pushes it to transit. Transit means that the domain is ready to be transferred to another registrar.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param pushDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushDomainAsync(String xAmzTarget, PushDomainRequest pushDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushDomainValidateBeforeCall(xAmzTarget, pushDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerDomain
     * @param xAmzTarget  (required)
     * @param registerDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDomainCall(String xAmzTarget, RegisterDomainRequest registerDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = registerDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.RegisterDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerDomainValidateBeforeCall(String xAmzTarget, RegisterDomainRequest registerDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling registerDomain(Async)");
        }

        // verify the required parameter 'registerDomainRequest' is set
        if (registerDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'registerDomainRequest' when calling registerDomain(Async)");
        }

        return registerDomainCall(xAmzTarget, registerDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation registers a domain. For some top-level domains (TLDs), this operation requires extra parameters.&lt;/p&gt; &lt;p&gt;When you register a domain, Amazon Route 53 does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enables auto renew, so your domain registration will renew automatically each year. We&#39;ll notify you in advance of the renewal date so you can choose whether to renew the registration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optionally enables privacy protection, so WHOIS queries return contact for the registrar or the phrase \&quot;REDACTED FOR PRIVACY\&quot;, or \&quot;On behalf of &amp;lt;domain name&amp;gt; owner.\&quot; If you don&#39;t enable privacy protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.&lt;/p&gt; &lt;note&gt; &lt;p&gt;While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param registerDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RegisterDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public RegisterDomainResponse registerDomain(String xAmzTarget, RegisterDomainRequest registerDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RegisterDomainResponse> localVarResp = registerDomainWithHttpInfo(xAmzTarget, registerDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation registers a domain. For some top-level domains (TLDs), this operation requires extra parameters.&lt;/p&gt; &lt;p&gt;When you register a domain, Amazon Route 53 does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enables auto renew, so your domain registration will renew automatically each year. We&#39;ll notify you in advance of the renewal date so you can choose whether to renew the registration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optionally enables privacy protection, so WHOIS queries return contact for the registrar or the phrase \&quot;REDACTED FOR PRIVACY\&quot;, or \&quot;On behalf of &amp;lt;domain name&amp;gt; owner.\&quot; If you don&#39;t enable privacy protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.&lt;/p&gt; &lt;note&gt; &lt;p&gt;While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param registerDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RegisterDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegisterDomainResponse> registerDomainWithHttpInfo(String xAmzTarget, RegisterDomainRequest registerDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = registerDomainValidateBeforeCall(xAmzTarget, registerDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RegisterDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation registers a domain. For some top-level domains (TLDs), this operation requires extra parameters.&lt;/p&gt; &lt;p&gt;When you register a domain, Amazon Route 53 does the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enables auto renew, so your domain registration will renew automatically each year. We&#39;ll notify you in advance of the renewal date so you can choose whether to renew the registration.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Optionally enables privacy protection, so WHOIS queries return contact for the registrar or the phrase \&quot;REDACTED FOR PRIVACY\&quot;, or \&quot;On behalf of &amp;lt;domain name&amp;gt; owner.\&quot; If you don&#39;t enable privacy protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.&lt;/p&gt; &lt;note&gt; &lt;p&gt;While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see &lt;a href&#x3D;\&quot;http://aws.amazon.com/route53/pricing/\&quot;&gt;Amazon Route 53 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param xAmzTarget  (required)
     * @param registerDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerDomainAsync(String xAmzTarget, RegisterDomainRequest registerDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RegisterDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerDomainValidateBeforeCall(xAmzTarget, registerDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RegisterDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectDomainTransferFromAnotherAwsAccount
     * @param xAmzTarget  (required)
     * @param rejectDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectDomainTransferFromAnotherAwsAccountCall(String xAmzTarget, RejectDomainTransferFromAnotherAwsAccountRequest rejectDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rejectDomainTransferFromAnotherAwsAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectDomainTransferFromAnotherAwsAccountValidateBeforeCall(String xAmzTarget, RejectDomainTransferFromAnotherAwsAccountRequest rejectDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling rejectDomainTransferFromAnotherAwsAccount(Async)");
        }

        // verify the required parameter 'rejectDomainTransferFromAnotherAwsAccountRequest' is set
        if (rejectDomainTransferFromAnotherAwsAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'rejectDomainTransferFromAnotherAwsAccountRequest' when calling rejectDomainTransferFromAnotherAwsAccount(Async)");
        }

        return rejectDomainTransferFromAnotherAwsAccountCall(xAmzTarget, rejectDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param rejectDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RejectDomainTransferFromAnotherAwsAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public RejectDomainTransferFromAnotherAwsAccountResponse rejectDomainTransferFromAnotherAwsAccount(String xAmzTarget, RejectDomainTransferFromAnotherAwsAccountRequest rejectDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RejectDomainTransferFromAnotherAwsAccountResponse> localVarResp = rejectDomainTransferFromAnotherAwsAccountWithHttpInfo(xAmzTarget, rejectDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param rejectDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RejectDomainTransferFromAnotherAwsAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RejectDomainTransferFromAnotherAwsAccountResponse> rejectDomainTransferFromAnotherAwsAccountWithHttpInfo(String xAmzTarget, RejectDomainTransferFromAnotherAwsAccountRequest rejectDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = rejectDomainTransferFromAnotherAwsAccountValidateBeforeCall(xAmzTarget, rejectDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RejectDomainTransferFromAnotherAwsAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param rejectDomainTransferFromAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectDomainTransferFromAnotherAwsAccountAsync(String xAmzTarget, RejectDomainTransferFromAnotherAwsAccountRequest rejectDomainTransferFromAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RejectDomainTransferFromAnotherAwsAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectDomainTransferFromAnotherAwsAccountValidateBeforeCall(xAmzTarget, rejectDomainTransferFromAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RejectDomainTransferFromAnotherAwsAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renewDomain
     * @param xAmzTarget  (required)
     * @param renewDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewDomainCall(String xAmzTarget, RenewDomainRequest renewDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.RenewDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renewDomainValidateBeforeCall(String xAmzTarget, RenewDomainRequest renewDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling renewDomain(Async)");
        }

        // verify the required parameter 'renewDomainRequest' is set
        if (renewDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'renewDomainRequest' when calling renewDomain(Async)");
        }

        return renewDomainCall(xAmzTarget, renewDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the expiration date if you haven&#39;t renewed far enough in advance. For more information about renewing domain registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html\&quot;&gt;Renewing Registration for a Domain&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param renewDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RenewDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public RenewDomainResponse renewDomain(String xAmzTarget, RenewDomainRequest renewDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RenewDomainResponse> localVarResp = renewDomainWithHttpInfo(xAmzTarget, renewDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the expiration date if you haven&#39;t renewed far enough in advance. For more information about renewing domain registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html\&quot;&gt;Renewing Registration for a Domain&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param renewDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RenewDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenewDomainResponse> renewDomainWithHttpInfo(String xAmzTarget, RenewDomainRequest renewDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = renewDomainValidateBeforeCall(xAmzTarget, renewDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RenewDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.&lt;/p&gt; &lt;p&gt;We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the expiration date if you haven&#39;t renewed far enough in advance. For more information about renewing domain registration, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html\&quot;&gt;Renewing Registration for a Domain&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param renewDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renewDomainAsync(String xAmzTarget, RenewDomainRequest renewDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RenewDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renewDomainValidateBeforeCall(xAmzTarget, renewDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RenewDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendContactReachabilityEmail
     * @param xAmzTarget  (required)
     * @param resendContactReachabilityEmailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendContactReachabilityEmailCall(String xAmzTarget, ResendContactReachabilityEmailRequest resendContactReachabilityEmailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendContactReachabilityEmailRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ResendContactReachabilityEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendContactReachabilityEmailValidateBeforeCall(String xAmzTarget, ResendContactReachabilityEmailRequest resendContactReachabilityEmailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling resendContactReachabilityEmail(Async)");
        }

        // verify the required parameter 'resendContactReachabilityEmailRequest' is set
        if (resendContactReachabilityEmailRequest == null) {
            throw new ApiException("Missing the required parameter 'resendContactReachabilityEmailRequest' when calling resendContactReachabilityEmail(Async)");
        }

        return resendContactReachabilityEmailCall(xAmzTarget, resendContactReachabilityEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
     * @param xAmzTarget  (required)
     * @param resendContactReachabilityEmailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ResendContactReachabilityEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ResendContactReachabilityEmailResponse resendContactReachabilityEmail(String xAmzTarget, ResendContactReachabilityEmailRequest resendContactReachabilityEmailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ResendContactReachabilityEmailResponse> localVarResp = resendContactReachabilityEmailWithHttpInfo(xAmzTarget, resendContactReachabilityEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
     * @param xAmzTarget  (required)
     * @param resendContactReachabilityEmailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ResendContactReachabilityEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResendContactReachabilityEmailResponse> resendContactReachabilityEmailWithHttpInfo(String xAmzTarget, ResendContactReachabilityEmailRequest resendContactReachabilityEmailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = resendContactReachabilityEmailValidateBeforeCall(xAmzTarget, resendContactReachabilityEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ResendContactReachabilityEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
     * @param xAmzTarget  (required)
     * @param resendContactReachabilityEmailRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendContactReachabilityEmailAsync(String xAmzTarget, ResendContactReachabilityEmailRequest resendContactReachabilityEmailRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ResendContactReachabilityEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendContactReachabilityEmailValidateBeforeCall(xAmzTarget, resendContactReachabilityEmailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ResendContactReachabilityEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resendOperationAuthorization
     * @param xAmzTarget  (required)
     * @param resendOperationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendOperationAuthorizationCall(String xAmzTarget, ResendOperationAuthorizationRequest resendOperationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resendOperationAuthorizationRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ResendOperationAuthorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendOperationAuthorizationValidateBeforeCall(String xAmzTarget, ResendOperationAuthorizationRequest resendOperationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling resendOperationAuthorization(Async)");
        }

        // verify the required parameter 'resendOperationAuthorizationRequest' is set
        if (resendOperationAuthorizationRequest == null) {
            throw new ApiException("Missing the required parameter 'resendOperationAuthorizationRequest' when calling resendOperationAuthorization(Async)");
        }

        return resendOperationAuthorizationCall(xAmzTarget, resendOperationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Resend the form of authorization email for this operation. 
     * @param xAmzTarget  (required)
     * @param resendOperationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public void resendOperationAuthorization(String xAmzTarget, ResendOperationAuthorizationRequest resendOperationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        resendOperationAuthorizationWithHttpInfo(xAmzTarget, resendOperationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     *  Resend the form of authorization email for this operation. 
     * @param xAmzTarget  (required)
     * @param resendOperationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> resendOperationAuthorizationWithHttpInfo(String xAmzTarget, ResendOperationAuthorizationRequest resendOperationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = resendOperationAuthorizationValidateBeforeCall(xAmzTarget, resendOperationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     *  Resend the form of authorization email for this operation. 
     * @param xAmzTarget  (required)
     * @param resendOperationAuthorizationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resendOperationAuthorizationAsync(String xAmzTarget, ResendOperationAuthorizationRequest resendOperationAuthorizationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendOperationAuthorizationValidateBeforeCall(xAmzTarget, resendOperationAuthorizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveDomainAuthCode
     * @param xAmzTarget  (required)
     * @param retrieveDomainAuthCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDomainAuthCodeCall(String xAmzTarget, RetrieveDomainAuthCodeRequest retrieveDomainAuthCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = retrieveDomainAuthCodeRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.RetrieveDomainAuthCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveDomainAuthCodeValidateBeforeCall(String xAmzTarget, RetrieveDomainAuthCodeRequest retrieveDomainAuthCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling retrieveDomainAuthCode(Async)");
        }

        // verify the required parameter 'retrieveDomainAuthCodeRequest' is set
        if (retrieveDomainAuthCodeRequest == null) {
            throw new ApiException("Missing the required parameter 'retrieveDomainAuthCodeRequest' when calling retrieveDomainAuthCode(Async)");
        }

        return retrieveDomainAuthCodeCall(xAmzTarget, retrieveDomainAuthCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * This operation returns the authorization code for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
     * @param xAmzTarget  (required)
     * @param retrieveDomainAuthCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RetrieveDomainAuthCodeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public RetrieveDomainAuthCodeResponse retrieveDomainAuthCode(String xAmzTarget, RetrieveDomainAuthCodeRequest retrieveDomainAuthCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RetrieveDomainAuthCodeResponse> localVarResp = retrieveDomainAuthCodeWithHttpInfo(xAmzTarget, retrieveDomainAuthCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation returns the authorization code for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
     * @param xAmzTarget  (required)
     * @param retrieveDomainAuthCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RetrieveDomainAuthCodeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetrieveDomainAuthCodeResponse> retrieveDomainAuthCodeWithHttpInfo(String xAmzTarget, RetrieveDomainAuthCodeRequest retrieveDomainAuthCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = retrieveDomainAuthCodeValidateBeforeCall(xAmzTarget, retrieveDomainAuthCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RetrieveDomainAuthCodeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation returns the authorization code for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
     * @param xAmzTarget  (required)
     * @param retrieveDomainAuthCodeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveDomainAuthCodeAsync(String xAmzTarget, RetrieveDomainAuthCodeRequest retrieveDomainAuthCodeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RetrieveDomainAuthCodeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveDomainAuthCodeValidateBeforeCall(xAmzTarget, retrieveDomainAuthCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RetrieveDomainAuthCodeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferDomain
     * @param xAmzTarget  (required)
     * @param transferDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferDomainCall(String xAmzTarget, TransferDomainRequest transferDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.TransferDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferDomainValidateBeforeCall(String xAmzTarget, TransferDomainRequest transferDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling transferDomain(Async)");
        }

        // verify the required parameter 'transferDomainRequest' is set
        if (transferDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'transferDomainRequest' when calling transferDomain(Async)");
        }

        return transferDomainCall(xAmzTarget, transferDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Transfers a domain from another registrar to Amazon Route 53. &lt;/p&gt; &lt;p&gt;For more information about transferring domains, see the following topics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you&#39;re transferring to Route 53, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html\&quot;&gt;Transferring Registration for a Domain to Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For information about how to transfer a domain from one Amazon Web Services account to another, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For information about how to transfer a domain to another domain registrar, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html\&quot;&gt;Transferring a Domain from Amazon Route 53 to Another Registrar&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the registrar for your domain is also the DNS service provider for the domain and you don&#39;t transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn&#39;t complete successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param transferDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TransferDomainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public TransferDomainResponse transferDomain(String xAmzTarget, TransferDomainRequest transferDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TransferDomainResponse> localVarResp = transferDomainWithHttpInfo(xAmzTarget, transferDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Transfers a domain from another registrar to Amazon Route 53. &lt;/p&gt; &lt;p&gt;For more information about transferring domains, see the following topics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you&#39;re transferring to Route 53, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html\&quot;&gt;Transferring Registration for a Domain to Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For information about how to transfer a domain from one Amazon Web Services account to another, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For information about how to transfer a domain to another domain registrar, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html\&quot;&gt;Transferring a Domain from Amazon Route 53 to Another Registrar&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the registrar for your domain is also the DNS service provider for the domain and you don&#39;t transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn&#39;t complete successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param transferDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TransferDomainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDomainResponse> transferDomainWithHttpInfo(String xAmzTarget, TransferDomainRequest transferDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = transferDomainValidateBeforeCall(xAmzTarget, transferDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TransferDomainResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Transfers a domain from another registrar to Amazon Route 53. &lt;/p&gt; &lt;p&gt;For more information about transferring domains, see the following topics:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you&#39;re transferring to Route 53, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html\&quot;&gt;Transferring Registration for a Domain to Amazon Route 53&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For information about how to transfer a domain from one Amazon Web Services account to another, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\&quot;&gt;TransferDomainToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For information about how to transfer a domain to another domain registrar, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html\&quot;&gt;Transferring a Domain from Amazon Route 53 to Another Registrar&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If the registrar for your domain is also the DNS service provider for the domain and you don&#39;t transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn&#39;t complete successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param transferDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DomainLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferDomainAsync(String xAmzTarget, TransferDomainRequest transferDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TransferDomainResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferDomainValidateBeforeCall(xAmzTarget, transferDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TransferDomainResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transferDomainToAnotherAwsAccount
     * @param xAmzTarget  (required)
     * @param transferDomainToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferDomainToAnotherAwsAccountCall(String xAmzTarget, TransferDomainToAnotherAwsAccountRequest transferDomainToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transferDomainToAnotherAwsAccountRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.TransferDomainToAnotherAwsAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferDomainToAnotherAwsAccountValidateBeforeCall(String xAmzTarget, TransferDomainToAnotherAwsAccountRequest transferDomainToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling transferDomainToAnotherAwsAccount(Async)");
        }

        // verify the required parameter 'transferDomainToAnotherAwsAccountRequest' is set
        if (transferDomainToAnotherAwsAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'transferDomainToAnotherAwsAccountRequest' when calling transferDomainToAnotherAwsAccount(Async)");
        }

        return transferDomainToAnotherAwsAccountCall(xAmzTarget, transferDomainToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Amazon Web Services account that you&#39;re transferring the domain to must accept the transfer. If the other account doesn&#39;t accept the transfer within 3 days, we cancel the transfer. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\&quot;&gt;AcceptDomainTransferFromAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can cancel the transfer before the other account accepts it. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html\&quot;&gt;CancelDomainTransferToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The other account can reject the transfer. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html\&quot;&gt;RejectDomainTransferFromAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn&#39;t transfer the hosted zone that is associated with the domain. DNS resolution isn&#39;t affected if the domain and the hosted zone are owned by separate accounts, so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html\&quot;&gt;Migrating a Hosted Zone to a Different Amazon Web Services Account&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param transferDomainToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TransferDomainToAnotherAwsAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public TransferDomainToAnotherAwsAccountResponse transferDomainToAnotherAwsAccount(String xAmzTarget, TransferDomainToAnotherAwsAccountRequest transferDomainToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TransferDomainToAnotherAwsAccountResponse> localVarResp = transferDomainToAnotherAwsAccountWithHttpInfo(xAmzTarget, transferDomainToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Amazon Web Services account that you&#39;re transferring the domain to must accept the transfer. If the other account doesn&#39;t accept the transfer within 3 days, we cancel the transfer. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\&quot;&gt;AcceptDomainTransferFromAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can cancel the transfer before the other account accepts it. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html\&quot;&gt;CancelDomainTransferToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The other account can reject the transfer. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html\&quot;&gt;RejectDomainTransferFromAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn&#39;t transfer the hosted zone that is associated with the domain. DNS resolution isn&#39;t affected if the domain and the hosted zone are owned by separate accounts, so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html\&quot;&gt;Migrating a Hosted Zone to a Different Amazon Web Services Account&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param transferDomainToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TransferDomainToAnotherAwsAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransferDomainToAnotherAwsAccountResponse> transferDomainToAnotherAwsAccountWithHttpInfo(String xAmzTarget, TransferDomainToAnotherAwsAccountRequest transferDomainToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = transferDomainToAnotherAwsAccountValidateBeforeCall(xAmzTarget, transferDomainToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TransferDomainToAnotherAwsAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Amazon Web Services account that you&#39;re transferring the domain to must accept the transfer. If the other account doesn&#39;t accept the transfer within 3 days, we cancel the transfer. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\&quot;&gt;AcceptDomainTransferFromAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You can cancel the transfer before the other account accepts it. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html\&quot;&gt;CancelDomainTransferToAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The other account can reject the transfer. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html\&quot;&gt;RejectDomainTransferFromAnotherAwsAccount&lt;/a&gt;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;important&gt; &lt;p&gt;When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn&#39;t transfer the hosted zone that is associated with the domain. DNS resolution isn&#39;t affected if the domain and the hosted zone are owned by separate accounts, so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html\&quot;&gt;Migrating a Hosted Zone to a Different Amazon Web Services Account&lt;/a&gt; in the &lt;i&gt;Amazon Route 53 Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Use either &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\&quot;&gt;ListOperations&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to determine whether the operation succeeded. &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; provides additional information, for example, &lt;code&gt;Domain Transfer from Aws Account 111122223333 has been cancelled&lt;/code&gt;. &lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param transferDomainToAnotherAwsAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transferDomainToAnotherAwsAccountAsync(String xAmzTarget, TransferDomainToAnotherAwsAccountRequest transferDomainToAnotherAwsAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TransferDomainToAnotherAwsAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transferDomainToAnotherAwsAccountValidateBeforeCall(xAmzTarget, transferDomainToAnotherAwsAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TransferDomainToAnotherAwsAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDomainContact
     * @param xAmzTarget  (required)
     * @param updateDomainContactRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainContactCall(String xAmzTarget, UpdateDomainContactRequest updateDomainContactRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDomainContactRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainContactValidateBeforeCall(String xAmzTarget, UpdateDomainContactRequest updateDomainContactRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateDomainContact(Async)");
        }

        // verify the required parameter 'updateDomainContactRequest' is set
        if (updateDomainContactRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDomainContactRequest' when calling updateDomainContact(Async)");
        }

        return updateDomainContactCall(xAmzTarget, updateDomainContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation updates the contact information for a particular domain. You must specify information for at least one contact: registrant, administrator, or technical.&lt;/p&gt; &lt;p&gt;If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the operation. If the request is not completed successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainContactRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateDomainContactResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDomainContactResponse updateDomainContact(String xAmzTarget, UpdateDomainContactRequest updateDomainContactRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateDomainContactResponse> localVarResp = updateDomainContactWithHttpInfo(xAmzTarget, updateDomainContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation updates the contact information for a particular domain. You must specify information for at least one contact: registrant, administrator, or technical.&lt;/p&gt; &lt;p&gt;If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the operation. If the request is not completed successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainContactRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateDomainContactResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDomainContactResponse> updateDomainContactWithHttpInfo(String xAmzTarget, UpdateDomainContactRequest updateDomainContactRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateDomainContactValidateBeforeCall(xAmzTarget, updateDomainContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateDomainContactResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation updates the contact information for a particular domain. You must specify information for at least one contact: registrant, administrator, or technical.&lt;/p&gt; &lt;p&gt;If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the operation. If the request is not completed successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainContactRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainContactAsync(String xAmzTarget, UpdateDomainContactRequest updateDomainContactRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateDomainContactResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainContactValidateBeforeCall(xAmzTarget, updateDomainContactRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateDomainContactResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDomainContactPrivacy
     * @param xAmzTarget  (required)
     * @param updateDomainContactPrivacyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainContactPrivacyCall(String xAmzTarget, UpdateDomainContactPrivacyRequest updateDomainContactPrivacyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDomainContactPrivacyRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContactPrivacy";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainContactPrivacyValidateBeforeCall(String xAmzTarget, UpdateDomainContactPrivacyRequest updateDomainContactPrivacyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateDomainContactPrivacy(Async)");
        }

        // verify the required parameter 'updateDomainContactPrivacyRequest' is set
        if (updateDomainContactPrivacyRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDomainContactPrivacyRequest' when calling updateDomainContactPrivacy(Async)");
        }

        return updateDomainContactPrivacyCall(xAmzTarget, updateDomainContactPrivacyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation updates the specified domain contact&#39;s privacy setting. When privacy protection is enabled, your contact information is replaced with contact information for the registrar or with the phrase \&quot;REDACTED FOR PRIVACY\&quot;, or \&quot;On behalf of &amp;lt;domain name&amp;gt; owner.\&quot;&lt;/p&gt; &lt;note&gt; &lt;p&gt;While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation affects only the contact information for the specified contact type (administrative, registrant, or technical). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to track the progress and completion of the action. If the request doesn&#39;t complete successfully, the domain registrant will be notified by email.&lt;/p&gt; &lt;important&gt; &lt;p&gt;By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either &lt;code&gt;UpdateDomainContactPrivacy&lt;/code&gt; or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/privacy/\&quot;&gt;https://aws.amazon.com/privacy/&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainContactPrivacyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateDomainContactPrivacyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDomainContactPrivacyResponse updateDomainContactPrivacy(String xAmzTarget, UpdateDomainContactPrivacyRequest updateDomainContactPrivacyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateDomainContactPrivacyResponse> localVarResp = updateDomainContactPrivacyWithHttpInfo(xAmzTarget, updateDomainContactPrivacyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation updates the specified domain contact&#39;s privacy setting. When privacy protection is enabled, your contact information is replaced with contact information for the registrar or with the phrase \&quot;REDACTED FOR PRIVACY\&quot;, or \&quot;On behalf of &amp;lt;domain name&amp;gt; owner.\&quot;&lt;/p&gt; &lt;note&gt; &lt;p&gt;While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation affects only the contact information for the specified contact type (administrative, registrant, or technical). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to track the progress and completion of the action. If the request doesn&#39;t complete successfully, the domain registrant will be notified by email.&lt;/p&gt; &lt;important&gt; &lt;p&gt;By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either &lt;code&gt;UpdateDomainContactPrivacy&lt;/code&gt; or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/privacy/\&quot;&gt;https://aws.amazon.com/privacy/&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainContactPrivacyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateDomainContactPrivacyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDomainContactPrivacyResponse> updateDomainContactPrivacyWithHttpInfo(String xAmzTarget, UpdateDomainContactPrivacyRequest updateDomainContactPrivacyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateDomainContactPrivacyValidateBeforeCall(xAmzTarget, updateDomainContactPrivacyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateDomainContactPrivacyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation updates the specified domain contact&#39;s privacy setting. When privacy protection is enabled, your contact information is replaced with contact information for the registrar or with the phrase \&quot;REDACTED FOR PRIVACY\&quot;, or \&quot;On behalf of &amp;lt;domain name&amp;gt; owner.\&quot;&lt;/p&gt; &lt;note&gt; &lt;p&gt;While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;This operation affects only the contact information for the specified contact type (administrative, registrant, or technical). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\&quot;&gt;GetOperationDetail&lt;/a&gt; to track the progress and completion of the action. If the request doesn&#39;t complete successfully, the domain registrant will be notified by email.&lt;/p&gt; &lt;important&gt; &lt;p&gt;By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either &lt;code&gt;UpdateDomainContactPrivacy&lt;/code&gt; or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/privacy/\&quot;&gt;https://aws.amazon.com/privacy/&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainContactPrivacyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainContactPrivacyAsync(String xAmzTarget, UpdateDomainContactPrivacyRequest updateDomainContactPrivacyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateDomainContactPrivacyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainContactPrivacyValidateBeforeCall(xAmzTarget, updateDomainContactPrivacyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateDomainContactPrivacyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDomainNameservers
     * @param xAmzTarget  (required)
     * @param updateDomainNameserversRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainNameserversCall(String xAmzTarget, UpdateDomainNameserversRequest updateDomainNameserversRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDomainNameserversRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainNameservers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainNameserversValidateBeforeCall(String xAmzTarget, UpdateDomainNameserversRequest updateDomainNameserversRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateDomainNameservers(Async)");
        }

        // verify the required parameter 'updateDomainNameserversRequest' is set
        if (updateDomainNameserversRequest == null) {
            throw new ApiException("Missing the required parameter 'updateDomainNameserversRequest' when calling updateDomainNameservers(Async)");
        }

        return updateDomainNameserversCall(xAmzTarget, updateDomainNameserversRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.&lt;/p&gt; &lt;p&gt;If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainNameserversRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateDomainNameserversResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDomainNameserversResponse updateDomainNameservers(String xAmzTarget, UpdateDomainNameserversRequest updateDomainNameserversRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateDomainNameserversResponse> localVarResp = updateDomainNameserversWithHttpInfo(xAmzTarget, updateDomainNameserversRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.&lt;/p&gt; &lt;p&gt;If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainNameserversRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateDomainNameserversResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDomainNameserversResponse> updateDomainNameserversWithHttpInfo(String xAmzTarget, UpdateDomainNameserversRequest updateDomainNameserversRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateDomainNameserversValidateBeforeCall(xAmzTarget, updateDomainNameserversRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateDomainNameserversResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.&lt;/p&gt; &lt;p&gt;If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateDomainNameserversRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateRequest </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TLDRulesViolation </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDomainNameserversAsync(String xAmzTarget, UpdateDomainNameserversRequest updateDomainNameserversRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateDomainNameserversResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainNameserversValidateBeforeCall(xAmzTarget, updateDomainNameserversRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateDomainNameserversResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTagsForDomain
     * @param xAmzTarget  (required)
     * @param updateTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagsForDomainCall(String xAmzTarget, UpdateTagsForDomainRequest updateTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTagsForDomainRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.UpdateTagsForDomain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagsForDomainValidateBeforeCall(String xAmzTarget, UpdateTagsForDomainRequest updateTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling updateTagsForDomain(Async)");
        }

        // verify the required parameter 'updateTagsForDomainRequest' is set
        if (updateTagsForDomainRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTagsForDomainRequest' when calling updateTagsForDomain(Async)");
        }

        return updateTagsForDomainCall(xAmzTarget, updateTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;This operation adds or updates tags for a specified domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public Object updateTagsForDomain(String xAmzTarget, UpdateTagsForDomainRequest updateTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateTagsForDomainWithHttpInfo(xAmzTarget, updateTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;This operation adds or updates tags for a specified domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateTagsForDomainWithHttpInfo(String xAmzTarget, UpdateTagsForDomainRequest updateTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTagsForDomainValidateBeforeCall(xAmzTarget, updateTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;This operation adds or updates tags for a specified domain.&lt;/p&gt; &lt;p&gt;All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.&lt;/p&gt;
     * @param xAmzTarget  (required)
     * @param updateTagsForDomainRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> OperationLimitExceeded </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnsupportedTLD </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTagsForDomainAsync(String xAmzTarget, UpdateTagsForDomainRequest updateTagsForDomainRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagsForDomainValidateBeforeCall(xAmzTarget, updateTagsForDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for viewBilling
     * @param xAmzTarget  (required)
     * @param viewBillingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewBillingCall(String xAmzTarget, ViewBillingRequest viewBillingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = viewBillingRequest;

        // create path and map variables
        String localVarPath = "/#X-Amz-Target=Route53Domains_v20140515.ViewBilling";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxItems", maxItems));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzTarget != null) {
            localVarHeaderParams.put("X-Amz-Target", localVarApiClient.parameterToString(xAmzTarget));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call viewBillingValidateBeforeCall(String xAmzTarget, ViewBillingRequest viewBillingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzTarget' is set
        if (xAmzTarget == null) {
            throw new ApiException("Missing the required parameter 'xAmzTarget' when calling viewBilling(Async)");
        }

        // verify the required parameter 'viewBillingRequest' is set
        if (viewBillingRequest == null) {
            throw new ApiException("Missing the required parameter 'viewBillingRequest' when calling viewBilling(Async)");
        }

        return viewBillingCall(xAmzTarget, viewBillingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);

    }

    /**
     * 
     * Returns all the domain-related billing records for the current Amazon Web Services account for a specified period
     * @param xAmzTarget  (required)
     * @param viewBillingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ViewBillingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ViewBillingResponse viewBilling(String xAmzTarget, ViewBillingRequest viewBillingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        ApiResponse<ViewBillingResponse> localVarResp = viewBillingWithHttpInfo(xAmzTarget, viewBillingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the domain-related billing records for the current Amazon Web Services account for a specified period
     * @param xAmzTarget  (required)
     * @param viewBillingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @return ApiResponse&lt;ViewBillingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ViewBillingResponse> viewBillingWithHttpInfo(String xAmzTarget, ViewBillingRequest viewBillingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker) throws ApiException {
        okhttp3.Call localVarCall = viewBillingValidateBeforeCall(xAmzTarget, viewBillingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, null);
        Type localVarReturnType = new TypeToken<ViewBillingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the domain-related billing records for the current Amazon Web Services account for a specified period
     * @param xAmzTarget  (required)
     * @param viewBillingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxItems Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidInput </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call viewBillingAsync(String xAmzTarget, ViewBillingRequest viewBillingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxItems, String marker, final ApiCallback<ViewBillingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = viewBillingValidateBeforeCall(xAmzTarget, viewBillingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxItems, marker, _callback);
        Type localVarReturnType = new TypeToken<ViewBillingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
