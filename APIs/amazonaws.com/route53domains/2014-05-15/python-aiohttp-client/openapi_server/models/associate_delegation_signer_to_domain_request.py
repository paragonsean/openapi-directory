# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.associate_delegation_signer_to_domain_request_signing_attributes import AssociateDelegationSignerToDomainRequestSigningAttributes
from openapi_server import util


class AssociateDelegationSignerToDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, signing_attributes: AssociateDelegationSignerToDomainRequestSigningAttributes=None):
        """AssociateDelegationSignerToDomainRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this AssociateDelegationSignerToDomainRequest.
        :param signing_attributes: The signing_attributes of this AssociateDelegationSignerToDomainRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'signing_attributes': AssociateDelegationSignerToDomainRequestSigningAttributes
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'signing_attributes': 'SigningAttributes'
        }

        self._domain_name = domain_name
        self._signing_attributes = signing_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateDelegationSignerToDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateDelegationSignerToDomainRequest of this AssociateDelegationSignerToDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this AssociateDelegationSignerToDomainRequest.


        :return: The domain_name of this AssociateDelegationSignerToDomainRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this AssociateDelegationSignerToDomainRequest.


        :param domain_name: The domain_name of this AssociateDelegationSignerToDomainRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def signing_attributes(self):
        """Gets the signing_attributes of this AssociateDelegationSignerToDomainRequest.


        :return: The signing_attributes of this AssociateDelegationSignerToDomainRequest.
        :rtype: AssociateDelegationSignerToDomainRequestSigningAttributes
        """
        return self._signing_attributes

    @signing_attributes.setter
    def signing_attributes(self, signing_attributes):
        """Sets the signing_attributes of this AssociateDelegationSignerToDomainRequest.


        :param signing_attributes: The signing_attributes of this AssociateDelegationSignerToDomainRequest.
        :type signing_attributes: AssociateDelegationSignerToDomainRequestSigningAttributes
        """
        if signing_attributes is None:
            raise ValueError("Invalid value for `signing_attributes`, must not be `None`")

        self._signing_attributes = signing_attributes
