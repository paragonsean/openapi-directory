# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDomainSuggestionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, suggestion_count: int=None, only_available: bool=None):
        """GetDomainSuggestionsRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this GetDomainSuggestionsRequest.
        :param suggestion_count: The suggestion_count of this GetDomainSuggestionsRequest.
        :param only_available: The only_available of this GetDomainSuggestionsRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'suggestion_count': int,
            'only_available': bool
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'suggestion_count': 'SuggestionCount',
            'only_available': 'OnlyAvailable'
        }

        self._domain_name = domain_name
        self._suggestion_count = suggestion_count
        self._only_available = only_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDomainSuggestionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDomainSuggestionsRequest of this GetDomainSuggestionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this GetDomainSuggestionsRequest.


        :return: The domain_name of this GetDomainSuggestionsRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this GetDomainSuggestionsRequest.


        :param domain_name: The domain_name of this GetDomainSuggestionsRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def suggestion_count(self):
        """Gets the suggestion_count of this GetDomainSuggestionsRequest.


        :return: The suggestion_count of this GetDomainSuggestionsRequest.
        :rtype: int
        """
        return self._suggestion_count

    @suggestion_count.setter
    def suggestion_count(self, suggestion_count):
        """Sets the suggestion_count of this GetDomainSuggestionsRequest.


        :param suggestion_count: The suggestion_count of this GetDomainSuggestionsRequest.
        :type suggestion_count: int
        """
        if suggestion_count is None:
            raise ValueError("Invalid value for `suggestion_count`, must not be `None`")

        self._suggestion_count = suggestion_count

    @property
    def only_available(self):
        """Gets the only_available of this GetDomainSuggestionsRequest.


        :return: The only_available of this GetDomainSuggestionsRequest.
        :rtype: bool
        """
        return self._only_available

    @only_available.setter
    def only_available(self, only_available):
        """Sets the only_available of this GetDomainSuggestionsRequest.


        :param only_available: The only_available of this GetDomainSuggestionsRequest.
        :type only_available: bool
        """
        if only_available is None:
            raise ValueError("Invalid value for `only_available`, must not be `None`")

        self._only_available = only_available
