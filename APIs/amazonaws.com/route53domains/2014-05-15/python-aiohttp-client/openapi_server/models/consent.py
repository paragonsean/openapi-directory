# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Consent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_price: float=None, currency: str=None):
        """Consent - a model defined in OpenAPI

        :param max_price: The max_price of this Consent.
        :param currency: The currency of this Consent.
        """
        self.openapi_types = {
            'max_price': float,
            'currency': str
        }

        self.attribute_map = {
            'max_price': 'MaxPrice',
            'currency': 'Currency'
        }

        self._max_price = max_price
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Consent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Consent of this Consent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_price(self):
        """Gets the max_price of this Consent.


        :return: The max_price of this Consent.
        :rtype: float
        """
        return self._max_price

    @max_price.setter
    def max_price(self, max_price):
        """Sets the max_price of this Consent.


        :param max_price: The max_price of this Consent.
        :type max_price: float
        """
        if max_price is None:
            raise ValueError("Invalid value for `max_price`, must not be `None`")

        self._max_price = max_price

    @property
    def currency(self):
        """Gets the currency of this Consent.


        :return: The currency of this Consent.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Consent.


        :param currency: The currency of this Consent.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency
