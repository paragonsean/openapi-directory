# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnssecSigningAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: int=None, flags: int=None, public_key: str=None):
        """DnssecSigningAttributes - a model defined in OpenAPI

        :param algorithm: The algorithm of this DnssecSigningAttributes.
        :param flags: The flags of this DnssecSigningAttributes.
        :param public_key: The public_key of this DnssecSigningAttributes.
        """
        self.openapi_types = {
            'algorithm': int,
            'flags': int,
            'public_key': str
        }

        self.attribute_map = {
            'algorithm': 'Algorithm',
            'flags': 'Flags',
            'public_key': 'PublicKey'
        }

        self._algorithm = algorithm
        self._flags = flags
        self._public_key = public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnssecSigningAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnssecSigningAttributes of this DnssecSigningAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this DnssecSigningAttributes.


        :return: The algorithm of this DnssecSigningAttributes.
        :rtype: int
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this DnssecSigningAttributes.


        :param algorithm: The algorithm of this DnssecSigningAttributes.
        :type algorithm: int
        """

        self._algorithm = algorithm

    @property
    def flags(self):
        """Gets the flags of this DnssecSigningAttributes.


        :return: The flags of this DnssecSigningAttributes.
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this DnssecSigningAttributes.


        :param flags: The flags of this DnssecSigningAttributes.
        :type flags: int
        """

        self._flags = flags

    @property
    def public_key(self):
        """Gets the public_key of this DnssecSigningAttributes.


        :return: The public_key of this DnssecSigningAttributes.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DnssecSigningAttributes.


        :param public_key: The public_key of this DnssecSigningAttributes.
        :type public_key: str
        """

        self._public_key = public_key
