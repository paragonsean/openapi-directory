# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_domains_request_sort_condition import ListDomainsRequestSortCondition
from openapi_server import util


class ListDomainsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_conditions: List=None, sort_condition: ListDomainsRequestSortCondition=None, marker: str=None, max_items: int=None):
        """ListDomainsRequest - a model defined in OpenAPI

        :param filter_conditions: The filter_conditions of this ListDomainsRequest.
        :param sort_condition: The sort_condition of this ListDomainsRequest.
        :param marker: The marker of this ListDomainsRequest.
        :param max_items: The max_items of this ListDomainsRequest.
        """
        self.openapi_types = {
            'filter_conditions': List,
            'sort_condition': ListDomainsRequestSortCondition,
            'marker': str,
            'max_items': int
        }

        self.attribute_map = {
            'filter_conditions': 'FilterConditions',
            'sort_condition': 'SortCondition',
            'marker': 'Marker',
            'max_items': 'MaxItems'
        }

        self._filter_conditions = filter_conditions
        self._sort_condition = sort_condition
        self._marker = marker
        self._max_items = max_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDomainsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDomainsRequest of this ListDomainsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this ListDomainsRequest.


        :return: The filter_conditions of this ListDomainsRequest.
        :rtype: List
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this ListDomainsRequest.


        :param filter_conditions: The filter_conditions of this ListDomainsRequest.
        :type filter_conditions: List
        """

        self._filter_conditions = filter_conditions

    @property
    def sort_condition(self):
        """Gets the sort_condition of this ListDomainsRequest.


        :return: The sort_condition of this ListDomainsRequest.
        :rtype: ListDomainsRequestSortCondition
        """
        return self._sort_condition

    @sort_condition.setter
    def sort_condition(self, sort_condition):
        """Sets the sort_condition of this ListDomainsRequest.


        :param sort_condition: The sort_condition of this ListDomainsRequest.
        :type sort_condition: ListDomainsRequestSortCondition
        """

        self._sort_condition = sort_condition

    @property
    def marker(self):
        """Gets the marker of this ListDomainsRequest.


        :return: The marker of this ListDomainsRequest.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this ListDomainsRequest.


        :param marker: The marker of this ListDomainsRequest.
        :type marker: str
        """

        self._marker = marker

    @property
    def max_items(self):
        """Gets the max_items of this ListDomainsRequest.


        :return: The max_items of this ListDomainsRequest.
        :rtype: int
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this ListDomainsRequest.


        :param max_items: The max_items of this ListDomainsRequest.
        :type max_items: int
        """

        self._max_items = max_items
