# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RenewDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, duration_in_years: int=None, current_expiry_year: int=None):
        """RenewDomainRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this RenewDomainRequest.
        :param duration_in_years: The duration_in_years of this RenewDomainRequest.
        :param current_expiry_year: The current_expiry_year of this RenewDomainRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'duration_in_years': int,
            'current_expiry_year': int
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'duration_in_years': 'DurationInYears',
            'current_expiry_year': 'CurrentExpiryYear'
        }

        self._domain_name = domain_name
        self._duration_in_years = duration_in_years
        self._current_expiry_year = current_expiry_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenewDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenewDomainRequest of this RenewDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this RenewDomainRequest.


        :return: The domain_name of this RenewDomainRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this RenewDomainRequest.


        :param domain_name: The domain_name of this RenewDomainRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def duration_in_years(self):
        """Gets the duration_in_years of this RenewDomainRequest.


        :return: The duration_in_years of this RenewDomainRequest.
        :rtype: int
        """
        return self._duration_in_years

    @duration_in_years.setter
    def duration_in_years(self, duration_in_years):
        """Sets the duration_in_years of this RenewDomainRequest.


        :param duration_in_years: The duration_in_years of this RenewDomainRequest.
        :type duration_in_years: int
        """

        self._duration_in_years = duration_in_years

    @property
    def current_expiry_year(self):
        """Gets the current_expiry_year of this RenewDomainRequest.


        :return: The current_expiry_year of this RenewDomainRequest.
        :rtype: int
        """
        return self._current_expiry_year

    @current_expiry_year.setter
    def current_expiry_year(self, current_expiry_year):
        """Sets the current_expiry_year of this RenewDomainRequest.


        :param current_expiry_year: The current_expiry_year of this RenewDomainRequest.
        :type current_expiry_year: int
        """
        if current_expiry_year is None:
            raise ValueError("Invalid value for `current_expiry_year`, must not be `None`")

        self._current_expiry_year = current_expiry_year
