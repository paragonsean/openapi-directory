# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDomainContactPrivacyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, admin_privacy: bool=None, registrant_privacy: bool=None, tech_privacy: bool=None):
        """UpdateDomainContactPrivacyRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this UpdateDomainContactPrivacyRequest.
        :param admin_privacy: The admin_privacy of this UpdateDomainContactPrivacyRequest.
        :param registrant_privacy: The registrant_privacy of this UpdateDomainContactPrivacyRequest.
        :param tech_privacy: The tech_privacy of this UpdateDomainContactPrivacyRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'admin_privacy': bool,
            'registrant_privacy': bool,
            'tech_privacy': bool
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'admin_privacy': 'AdminPrivacy',
            'registrant_privacy': 'RegistrantPrivacy',
            'tech_privacy': 'TechPrivacy'
        }

        self._domain_name = domain_name
        self._admin_privacy = admin_privacy
        self._registrant_privacy = registrant_privacy
        self._tech_privacy = tech_privacy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDomainContactPrivacyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDomainContactPrivacyRequest of this UpdateDomainContactPrivacyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this UpdateDomainContactPrivacyRequest.


        :return: The domain_name of this UpdateDomainContactPrivacyRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this UpdateDomainContactPrivacyRequest.


        :param domain_name: The domain_name of this UpdateDomainContactPrivacyRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def admin_privacy(self):
        """Gets the admin_privacy of this UpdateDomainContactPrivacyRequest.


        :return: The admin_privacy of this UpdateDomainContactPrivacyRequest.
        :rtype: bool
        """
        return self._admin_privacy

    @admin_privacy.setter
    def admin_privacy(self, admin_privacy):
        """Sets the admin_privacy of this UpdateDomainContactPrivacyRequest.


        :param admin_privacy: The admin_privacy of this UpdateDomainContactPrivacyRequest.
        :type admin_privacy: bool
        """

        self._admin_privacy = admin_privacy

    @property
    def registrant_privacy(self):
        """Gets the registrant_privacy of this UpdateDomainContactPrivacyRequest.


        :return: The registrant_privacy of this UpdateDomainContactPrivacyRequest.
        :rtype: bool
        """
        return self._registrant_privacy

    @registrant_privacy.setter
    def registrant_privacy(self, registrant_privacy):
        """Sets the registrant_privacy of this UpdateDomainContactPrivacyRequest.


        :param registrant_privacy: The registrant_privacy of this UpdateDomainContactPrivacyRequest.
        :type registrant_privacy: bool
        """

        self._registrant_privacy = registrant_privacy

    @property
    def tech_privacy(self):
        """Gets the tech_privacy of this UpdateDomainContactPrivacyRequest.


        :return: The tech_privacy of this UpdateDomainContactPrivacyRequest.
        :rtype: bool
        """
        return self._tech_privacy

    @tech_privacy.setter
    def tech_privacy(self, tech_privacy):
        """Sets the tech_privacy of this UpdateDomainContactPrivacyRequest.


        :param tech_privacy: The tech_privacy of this UpdateDomainContactPrivacyRequest.
        :type tech_privacy: bool
        """

        self._tech_privacy = tech_privacy
