# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transfer_domain_request_admin_contact import TransferDomainRequestAdminContact
from openapi_server.models.update_domain_contact_request_consent import UpdateDomainContactRequestConsent
from openapi_server import util


class UpdateDomainContactRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, admin_contact: TransferDomainRequestAdminContact=None, registrant_contact: TransferDomainRequestAdminContact=None, tech_contact: TransferDomainRequestAdminContact=None, consent: UpdateDomainContactRequestConsent=None):
        """UpdateDomainContactRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this UpdateDomainContactRequest.
        :param admin_contact: The admin_contact of this UpdateDomainContactRequest.
        :param registrant_contact: The registrant_contact of this UpdateDomainContactRequest.
        :param tech_contact: The tech_contact of this UpdateDomainContactRequest.
        :param consent: The consent of this UpdateDomainContactRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'admin_contact': TransferDomainRequestAdminContact,
            'registrant_contact': TransferDomainRequestAdminContact,
            'tech_contact': TransferDomainRequestAdminContact,
            'consent': UpdateDomainContactRequestConsent
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'admin_contact': 'AdminContact',
            'registrant_contact': 'RegistrantContact',
            'tech_contact': 'TechContact',
            'consent': 'Consent'
        }

        self._domain_name = domain_name
        self._admin_contact = admin_contact
        self._registrant_contact = registrant_contact
        self._tech_contact = tech_contact
        self._consent = consent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDomainContactRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDomainContactRequest of this UpdateDomainContactRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this UpdateDomainContactRequest.


        :return: The domain_name of this UpdateDomainContactRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this UpdateDomainContactRequest.


        :param domain_name: The domain_name of this UpdateDomainContactRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def admin_contact(self):
        """Gets the admin_contact of this UpdateDomainContactRequest.


        :return: The admin_contact of this UpdateDomainContactRequest.
        :rtype: TransferDomainRequestAdminContact
        """
        return self._admin_contact

    @admin_contact.setter
    def admin_contact(self, admin_contact):
        """Sets the admin_contact of this UpdateDomainContactRequest.


        :param admin_contact: The admin_contact of this UpdateDomainContactRequest.
        :type admin_contact: TransferDomainRequestAdminContact
        """

        self._admin_contact = admin_contact

    @property
    def registrant_contact(self):
        """Gets the registrant_contact of this UpdateDomainContactRequest.


        :return: The registrant_contact of this UpdateDomainContactRequest.
        :rtype: TransferDomainRequestAdminContact
        """
        return self._registrant_contact

    @registrant_contact.setter
    def registrant_contact(self, registrant_contact):
        """Sets the registrant_contact of this UpdateDomainContactRequest.


        :param registrant_contact: The registrant_contact of this UpdateDomainContactRequest.
        :type registrant_contact: TransferDomainRequestAdminContact
        """

        self._registrant_contact = registrant_contact

    @property
    def tech_contact(self):
        """Gets the tech_contact of this UpdateDomainContactRequest.


        :return: The tech_contact of this UpdateDomainContactRequest.
        :rtype: TransferDomainRequestAdminContact
        """
        return self._tech_contact

    @tech_contact.setter
    def tech_contact(self, tech_contact):
        """Sets the tech_contact of this UpdateDomainContactRequest.


        :param tech_contact: The tech_contact of this UpdateDomainContactRequest.
        :type tech_contact: TransferDomainRequestAdminContact
        """

        self._tech_contact = tech_contact

    @property
    def consent(self):
        """Gets the consent of this UpdateDomainContactRequest.


        :return: The consent of this UpdateDomainContactRequest.
        :rtype: UpdateDomainContactRequestConsent
        """
        return self._consent

    @consent.setter
    def consent(self, consent):
        """Sets the consent of this UpdateDomainContactRequest.


        :param consent: The consent of this UpdateDomainContactRequest.
        :type consent: UpdateDomainContactRequestConsent
        """

        self._consent = consent
