# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDomainNameserversRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, fi_auth_key: str=None, nameservers: List=None):
        """UpdateDomainNameserversRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this UpdateDomainNameserversRequest.
        :param fi_auth_key: The fi_auth_key of this UpdateDomainNameserversRequest.
        :param nameservers: The nameservers of this UpdateDomainNameserversRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'fi_auth_key': str,
            'nameservers': List
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'fi_auth_key': 'FIAuthKey',
            'nameservers': 'Nameservers'
        }

        self._domain_name = domain_name
        self._fi_auth_key = fi_auth_key
        self._nameservers = nameservers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDomainNameserversRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDomainNameserversRequest of this UpdateDomainNameserversRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this UpdateDomainNameserversRequest.


        :return: The domain_name of this UpdateDomainNameserversRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this UpdateDomainNameserversRequest.


        :param domain_name: The domain_name of this UpdateDomainNameserversRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def fi_auth_key(self):
        """Gets the fi_auth_key of this UpdateDomainNameserversRequest.


        :return: The fi_auth_key of this UpdateDomainNameserversRequest.
        :rtype: str
        """
        return self._fi_auth_key

    @fi_auth_key.setter
    def fi_auth_key(self, fi_auth_key):
        """Sets the fi_auth_key of this UpdateDomainNameserversRequest.


        :param fi_auth_key: The fi_auth_key of this UpdateDomainNameserversRequest.
        :type fi_auth_key: str
        """

        self._fi_auth_key = fi_auth_key

    @property
    def nameservers(self):
        """Gets the nameservers of this UpdateDomainNameserversRequest.


        :return: The nameservers of this UpdateDomainNameserversRequest.
        :rtype: List
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers):
        """Sets the nameservers of this UpdateDomainNameserversRequest.


        :param nameservers: The nameservers of this UpdateDomainNameserversRequest.
        :type nameservers: List
        """
        if nameservers is None:
            raise ValueError("Invalid value for `nameservers`, must not be `None`")

        self._nameservers = nameservers
