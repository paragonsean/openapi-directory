# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transfer_domain_request_admin_contact import TransferDomainRequestAdminContact
from openapi_server import util


class TransferDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, idn_lang_code: str=None, duration_in_years: int=None, nameservers: List=None, auth_code: str=None, auto_renew: bool=None, admin_contact: TransferDomainRequestAdminContact=None, registrant_contact: TransferDomainRequestAdminContact=None, tech_contact: TransferDomainRequestAdminContact=None, privacy_protect_admin_contact: bool=None, privacy_protect_registrant_contact: bool=None, privacy_protect_tech_contact: bool=None):
        """TransferDomainRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this TransferDomainRequest.
        :param idn_lang_code: The idn_lang_code of this TransferDomainRequest.
        :param duration_in_years: The duration_in_years of this TransferDomainRequest.
        :param nameservers: The nameservers of this TransferDomainRequest.
        :param auth_code: The auth_code of this TransferDomainRequest.
        :param auto_renew: The auto_renew of this TransferDomainRequest.
        :param admin_contact: The admin_contact of this TransferDomainRequest.
        :param registrant_contact: The registrant_contact of this TransferDomainRequest.
        :param tech_contact: The tech_contact of this TransferDomainRequest.
        :param privacy_protect_admin_contact: The privacy_protect_admin_contact of this TransferDomainRequest.
        :param privacy_protect_registrant_contact: The privacy_protect_registrant_contact of this TransferDomainRequest.
        :param privacy_protect_tech_contact: The privacy_protect_tech_contact of this TransferDomainRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'idn_lang_code': str,
            'duration_in_years': int,
            'nameservers': List,
            'auth_code': str,
            'auto_renew': bool,
            'admin_contact': TransferDomainRequestAdminContact,
            'registrant_contact': TransferDomainRequestAdminContact,
            'tech_contact': TransferDomainRequestAdminContact,
            'privacy_protect_admin_contact': bool,
            'privacy_protect_registrant_contact': bool,
            'privacy_protect_tech_contact': bool
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'idn_lang_code': 'IdnLangCode',
            'duration_in_years': 'DurationInYears',
            'nameservers': 'Nameservers',
            'auth_code': 'AuthCode',
            'auto_renew': 'AutoRenew',
            'admin_contact': 'AdminContact',
            'registrant_contact': 'RegistrantContact',
            'tech_contact': 'TechContact',
            'privacy_protect_admin_contact': 'PrivacyProtectAdminContact',
            'privacy_protect_registrant_contact': 'PrivacyProtectRegistrantContact',
            'privacy_protect_tech_contact': 'PrivacyProtectTechContact'
        }

        self._domain_name = domain_name
        self._idn_lang_code = idn_lang_code
        self._duration_in_years = duration_in_years
        self._nameservers = nameservers
        self._auth_code = auth_code
        self._auto_renew = auto_renew
        self._admin_contact = admin_contact
        self._registrant_contact = registrant_contact
        self._tech_contact = tech_contact
        self._privacy_protect_admin_contact = privacy_protect_admin_contact
        self._privacy_protect_registrant_contact = privacy_protect_registrant_contact
        self._privacy_protect_tech_contact = privacy_protect_tech_contact

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferDomainRequest of this TransferDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this TransferDomainRequest.


        :return: The domain_name of this TransferDomainRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this TransferDomainRequest.


        :param domain_name: The domain_name of this TransferDomainRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def idn_lang_code(self):
        """Gets the idn_lang_code of this TransferDomainRequest.


        :return: The idn_lang_code of this TransferDomainRequest.
        :rtype: str
        """
        return self._idn_lang_code

    @idn_lang_code.setter
    def idn_lang_code(self, idn_lang_code):
        """Sets the idn_lang_code of this TransferDomainRequest.


        :param idn_lang_code: The idn_lang_code of this TransferDomainRequest.
        :type idn_lang_code: str
        """

        self._idn_lang_code = idn_lang_code

    @property
    def duration_in_years(self):
        """Gets the duration_in_years of this TransferDomainRequest.


        :return: The duration_in_years of this TransferDomainRequest.
        :rtype: int
        """
        return self._duration_in_years

    @duration_in_years.setter
    def duration_in_years(self, duration_in_years):
        """Sets the duration_in_years of this TransferDomainRequest.


        :param duration_in_years: The duration_in_years of this TransferDomainRequest.
        :type duration_in_years: int
        """
        if duration_in_years is None:
            raise ValueError("Invalid value for `duration_in_years`, must not be `None`")

        self._duration_in_years = duration_in_years

    @property
    def nameservers(self):
        """Gets the nameservers of this TransferDomainRequest.


        :return: The nameservers of this TransferDomainRequest.
        :rtype: List
        """
        return self._nameservers

    @nameservers.setter
    def nameservers(self, nameservers):
        """Sets the nameservers of this TransferDomainRequest.


        :param nameservers: The nameservers of this TransferDomainRequest.
        :type nameservers: List
        """

        self._nameservers = nameservers

    @property
    def auth_code(self):
        """Gets the auth_code of this TransferDomainRequest.


        :return: The auth_code of this TransferDomainRequest.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this TransferDomainRequest.


        :param auth_code: The auth_code of this TransferDomainRequest.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def auto_renew(self):
        """Gets the auto_renew of this TransferDomainRequest.


        :return: The auto_renew of this TransferDomainRequest.
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this TransferDomainRequest.


        :param auto_renew: The auto_renew of this TransferDomainRequest.
        :type auto_renew: bool
        """

        self._auto_renew = auto_renew

    @property
    def admin_contact(self):
        """Gets the admin_contact of this TransferDomainRequest.


        :return: The admin_contact of this TransferDomainRequest.
        :rtype: TransferDomainRequestAdminContact
        """
        return self._admin_contact

    @admin_contact.setter
    def admin_contact(self, admin_contact):
        """Sets the admin_contact of this TransferDomainRequest.


        :param admin_contact: The admin_contact of this TransferDomainRequest.
        :type admin_contact: TransferDomainRequestAdminContact
        """
        if admin_contact is None:
            raise ValueError("Invalid value for `admin_contact`, must not be `None`")

        self._admin_contact = admin_contact

    @property
    def registrant_contact(self):
        """Gets the registrant_contact of this TransferDomainRequest.


        :return: The registrant_contact of this TransferDomainRequest.
        :rtype: TransferDomainRequestAdminContact
        """
        return self._registrant_contact

    @registrant_contact.setter
    def registrant_contact(self, registrant_contact):
        """Sets the registrant_contact of this TransferDomainRequest.


        :param registrant_contact: The registrant_contact of this TransferDomainRequest.
        :type registrant_contact: TransferDomainRequestAdminContact
        """
        if registrant_contact is None:
            raise ValueError("Invalid value for `registrant_contact`, must not be `None`")

        self._registrant_contact = registrant_contact

    @property
    def tech_contact(self):
        """Gets the tech_contact of this TransferDomainRequest.


        :return: The tech_contact of this TransferDomainRequest.
        :rtype: TransferDomainRequestAdminContact
        """
        return self._tech_contact

    @tech_contact.setter
    def tech_contact(self, tech_contact):
        """Sets the tech_contact of this TransferDomainRequest.


        :param tech_contact: The tech_contact of this TransferDomainRequest.
        :type tech_contact: TransferDomainRequestAdminContact
        """
        if tech_contact is None:
            raise ValueError("Invalid value for `tech_contact`, must not be `None`")

        self._tech_contact = tech_contact

    @property
    def privacy_protect_admin_contact(self):
        """Gets the privacy_protect_admin_contact of this TransferDomainRequest.


        :return: The privacy_protect_admin_contact of this TransferDomainRequest.
        :rtype: bool
        """
        return self._privacy_protect_admin_contact

    @privacy_protect_admin_contact.setter
    def privacy_protect_admin_contact(self, privacy_protect_admin_contact):
        """Sets the privacy_protect_admin_contact of this TransferDomainRequest.


        :param privacy_protect_admin_contact: The privacy_protect_admin_contact of this TransferDomainRequest.
        :type privacy_protect_admin_contact: bool
        """

        self._privacy_protect_admin_contact = privacy_protect_admin_contact

    @property
    def privacy_protect_registrant_contact(self):
        """Gets the privacy_protect_registrant_contact of this TransferDomainRequest.


        :return: The privacy_protect_registrant_contact of this TransferDomainRequest.
        :rtype: bool
        """
        return self._privacy_protect_registrant_contact

    @privacy_protect_registrant_contact.setter
    def privacy_protect_registrant_contact(self, privacy_protect_registrant_contact):
        """Sets the privacy_protect_registrant_contact of this TransferDomainRequest.


        :param privacy_protect_registrant_contact: The privacy_protect_registrant_contact of this TransferDomainRequest.
        :type privacy_protect_registrant_contact: bool
        """

        self._privacy_protect_registrant_contact = privacy_protect_registrant_contact

    @property
    def privacy_protect_tech_contact(self):
        """Gets the privacy_protect_tech_contact of this TransferDomainRequest.


        :return: The privacy_protect_tech_contact of this TransferDomainRequest.
        :rtype: bool
        """
        return self._privacy_protect_tech_contact

    @privacy_protect_tech_contact.setter
    def privacy_protect_tech_contact(self, privacy_protect_tech_contact):
        """Sets the privacy_protect_tech_contact of this TransferDomainRequest.


        :param privacy_protect_tech_contact: The privacy_protect_tech_contact of this TransferDomainRequest.
        :type privacy_protect_tech_contact: bool
        """

        self._privacy_protect_tech_contact = privacy_protect_tech_contact
