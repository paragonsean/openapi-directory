# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_domains_attribute_name import ListDomainsAttributeName
from openapi_server.models.sort_order import SortOrder
from openapi_server import util


class ListDomainsRequestSortCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ListDomainsAttributeName=None, sort_order: SortOrder=None):
        """ListDomainsRequestSortCondition - a model defined in OpenAPI

        :param name: The name of this ListDomainsRequestSortCondition.
        :param sort_order: The sort_order of this ListDomainsRequestSortCondition.
        """
        self.openapi_types = {
            'name': ListDomainsAttributeName,
            'sort_order': SortOrder
        }

        self.attribute_map = {
            'name': 'Name',
            'sort_order': 'SortOrder'
        }

        self._name = name
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListDomainsRequestSortCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListDomainsRequest_SortCondition of this ListDomainsRequestSortCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ListDomainsRequestSortCondition.


        :return: The name of this ListDomainsRequestSortCondition.
        :rtype: ListDomainsAttributeName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ListDomainsRequestSortCondition.


        :param name: The name of this ListDomainsRequestSortCondition.
        :type name: ListDomainsAttributeName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sort_order(self):
        """Gets the sort_order of this ListDomainsRequestSortCondition.


        :return: The sort_order of this ListDomainsRequestSortCondition.
        :rtype: SortOrder
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this ListDomainsRequestSortCondition.


        :param sort_order: The sort_order of this ListDomainsRequestSortCondition.
        :type sort_order: SortOrder
        """
        if sort_order is None:
            raise ValueError("Invalid value for `sort_order`, must not be `None`")

        self._sort_order = sort_order
