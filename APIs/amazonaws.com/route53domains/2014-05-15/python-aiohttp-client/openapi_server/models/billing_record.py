# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_type import OperationType
from openapi_server import util


class BillingRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, operation: OperationType=None, invoice_id: str=None, bill_date: datetime=None, price: float=None):
        """BillingRecord - a model defined in OpenAPI

        :param domain_name: The domain_name of this BillingRecord.
        :param operation: The operation of this BillingRecord.
        :param invoice_id: The invoice_id of this BillingRecord.
        :param bill_date: The bill_date of this BillingRecord.
        :param price: The price of this BillingRecord.
        """
        self.openapi_types = {
            'domain_name': str,
            'operation': OperationType,
            'invoice_id': str,
            'bill_date': datetime,
            'price': float
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'operation': 'Operation',
            'invoice_id': 'InvoiceId',
            'bill_date': 'BillDate',
            'price': 'Price'
        }

        self._domain_name = domain_name
        self._operation = operation
        self._invoice_id = invoice_id
        self._bill_date = bill_date
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BillingRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BillingRecord of this BillingRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this BillingRecord.


        :return: The domain_name of this BillingRecord.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this BillingRecord.


        :param domain_name: The domain_name of this BillingRecord.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def operation(self):
        """Gets the operation of this BillingRecord.


        :return: The operation of this BillingRecord.
        :rtype: OperationType
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this BillingRecord.


        :param operation: The operation of this BillingRecord.
        :type operation: OperationType
        """

        self._operation = operation

    @property
    def invoice_id(self):
        """Gets the invoice_id of this BillingRecord.


        :return: The invoice_id of this BillingRecord.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this BillingRecord.


        :param invoice_id: The invoice_id of this BillingRecord.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def bill_date(self):
        """Gets the bill_date of this BillingRecord.


        :return: The bill_date of this BillingRecord.
        :rtype: datetime
        """
        return self._bill_date

    @bill_date.setter
    def bill_date(self, bill_date):
        """Sets the bill_date of this BillingRecord.


        :param bill_date: The bill_date of this BillingRecord.
        :type bill_date: datetime
        """

        self._bill_date = bill_date

    @property
    def price(self):
        """Gets the price of this BillingRecord.


        :return: The price of this BillingRecord.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this BillingRecord.


        :param price: The price of this BillingRecord.
        :type price: float
        """

        self._price = price
