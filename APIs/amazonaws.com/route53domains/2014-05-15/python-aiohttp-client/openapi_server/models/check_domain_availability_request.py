# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckDomainAvailabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, idn_lang_code: str=None):
        """CheckDomainAvailabilityRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this CheckDomainAvailabilityRequest.
        :param idn_lang_code: The idn_lang_code of this CheckDomainAvailabilityRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'idn_lang_code': str
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'idn_lang_code': 'IdnLangCode'
        }

        self._domain_name = domain_name
        self._idn_lang_code = idn_lang_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDomainAvailabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDomainAvailabilityRequest of this CheckDomainAvailabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this CheckDomainAvailabilityRequest.


        :return: The domain_name of this CheckDomainAvailabilityRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CheckDomainAvailabilityRequest.


        :param domain_name: The domain_name of this CheckDomainAvailabilityRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def idn_lang_code(self):
        """Gets the idn_lang_code of this CheckDomainAvailabilityRequest.


        :return: The idn_lang_code of this CheckDomainAvailabilityRequest.
        :rtype: str
        """
        return self._idn_lang_code

    @idn_lang_code.setter
    def idn_lang_code(self, idn_lang_code):
        """Sets the idn_lang_code of this CheckDomainAvailabilityRequest.


        :param idn_lang_code: The idn_lang_code of this CheckDomainAvailabilityRequest.
        :type idn_lang_code: str
        """

        self._idn_lang_code = idn_lang_code
