# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnssecKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: int=None, flags: int=None, public_key: str=None, digest_type: int=None, digest: str=None, key_tag: int=None, id: str=None):
        """DnssecKey - a model defined in OpenAPI

        :param algorithm: The algorithm of this DnssecKey.
        :param flags: The flags of this DnssecKey.
        :param public_key: The public_key of this DnssecKey.
        :param digest_type: The digest_type of this DnssecKey.
        :param digest: The digest of this DnssecKey.
        :param key_tag: The key_tag of this DnssecKey.
        :param id: The id of this DnssecKey.
        """
        self.openapi_types = {
            'algorithm': int,
            'flags': int,
            'public_key': str,
            'digest_type': int,
            'digest': str,
            'key_tag': int,
            'id': str
        }

        self.attribute_map = {
            'algorithm': 'Algorithm',
            'flags': 'Flags',
            'public_key': 'PublicKey',
            'digest_type': 'DigestType',
            'digest': 'Digest',
            'key_tag': 'KeyTag',
            'id': 'Id'
        }

        self._algorithm = algorithm
        self._flags = flags
        self._public_key = public_key
        self._digest_type = digest_type
        self._digest = digest
        self._key_tag = key_tag
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnssecKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnssecKey of this DnssecKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this DnssecKey.


        :return: The algorithm of this DnssecKey.
        :rtype: int
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this DnssecKey.


        :param algorithm: The algorithm of this DnssecKey.
        :type algorithm: int
        """

        self._algorithm = algorithm

    @property
    def flags(self):
        """Gets the flags of this DnssecKey.


        :return: The flags of this DnssecKey.
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this DnssecKey.


        :param flags: The flags of this DnssecKey.
        :type flags: int
        """

        self._flags = flags

    @property
    def public_key(self):
        """Gets the public_key of this DnssecKey.


        :return: The public_key of this DnssecKey.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DnssecKey.


        :param public_key: The public_key of this DnssecKey.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def digest_type(self):
        """Gets the digest_type of this DnssecKey.


        :return: The digest_type of this DnssecKey.
        :rtype: int
        """
        return self._digest_type

    @digest_type.setter
    def digest_type(self, digest_type):
        """Sets the digest_type of this DnssecKey.


        :param digest_type: The digest_type of this DnssecKey.
        :type digest_type: int
        """

        self._digest_type = digest_type

    @property
    def digest(self):
        """Gets the digest of this DnssecKey.


        :return: The digest of this DnssecKey.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest):
        """Sets the digest of this DnssecKey.


        :param digest: The digest of this DnssecKey.
        :type digest: str
        """

        self._digest = digest

    @property
    def key_tag(self):
        """Gets the key_tag of this DnssecKey.


        :return: The key_tag of this DnssecKey.
        :rtype: int
        """
        return self._key_tag

    @key_tag.setter
    def key_tag(self, key_tag):
        """Sets the key_tag of this DnssecKey.


        :param key_tag: The key_tag of this DnssecKey.
        :type key_tag: int
        """

        self._key_tag = key_tag

    @property
    def id(self):
        """Gets the id of this DnssecKey.


        :return: The id of this DnssecKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DnssecKey.


        :param id: The id of this DnssecKey.
        :type id: str
        """

        self._id = id
