/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckDomainTransferabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckDomainTransferabilityResponse::OAICheckDomainTransferabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckDomainTransferabilityResponse::OAICheckDomainTransferabilityResponse() {
    this->initializeModel();
}

OAICheckDomainTransferabilityResponse::~OAICheckDomainTransferabilityResponse() {}

void OAICheckDomainTransferabilityResponse::initializeModel() {

    m_transferability_isSet = false;
    m_transferability_isValid = false;
}

void OAICheckDomainTransferabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckDomainTransferabilityResponse::fromJsonObject(QJsonObject json) {

    m_transferability_isValid = ::OpenAPI::fromJsonValue(m_transferability, json[QString("Transferability")]);
    m_transferability_isSet = !json[QString("Transferability")].isNull() && m_transferability_isValid;
}

QString OAICheckDomainTransferabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckDomainTransferabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_transferability.isSet()) {
        obj.insert(QString("Transferability"), ::OpenAPI::toJsonValue(m_transferability));
    }
    return obj;
}

OAICheckDomainTransferabilityResponse_Transferability OAICheckDomainTransferabilityResponse::getTransferability() const {
    return m_transferability;
}
void OAICheckDomainTransferabilityResponse::setTransferability(const OAICheckDomainTransferabilityResponse_Transferability &transferability) {
    m_transferability = transferability;
    m_transferability_isSet = true;
}

bool OAICheckDomainTransferabilityResponse::is_transferability_Set() const{
    return m_transferability_isSet;
}

bool OAICheckDomainTransferabilityResponse::is_transferability_Valid() const{
    return m_transferability_isValid;
}

bool OAICheckDomainTransferabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transferability.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckDomainTransferabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
