/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainAvailability::OAIDomainAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainAvailability::OAIDomainAvailability() {
    this->initializeModel();
}

OAIDomainAvailability::~OAIDomainAvailability() {}

void OAIDomainAvailability::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDomainAvailability::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDomainAvailability::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVAILABLE_RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::AVAILABLE_RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVAILABLE_PREORDER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::AVAILABLE_PREORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::UNAVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAVAILABLE_PREMIUM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::UNAVAILABLE_PREMIUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNAVAILABLE_RESTRICTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::UNAVAILABLE_RESTRICTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESERVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::RESERVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DONT_KNOW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDomainAvailability::DONT_KNOW;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDomainAvailability::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDomainAvailability::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDomainAvailability::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIDomainAvailability::AVAILABLE_RESERVED:
            val = "AVAILABLE_RESERVED";
            break;
        case eOAIDomainAvailability::AVAILABLE_PREORDER:
            val = "AVAILABLE_PREORDER";
            break;
        case eOAIDomainAvailability::UNAVAILABLE:
            val = "UNAVAILABLE";
            break;
        case eOAIDomainAvailability::UNAVAILABLE_PREMIUM:
            val = "UNAVAILABLE_PREMIUM";
            break;
        case eOAIDomainAvailability::UNAVAILABLE_RESTRICTED:
            val = "UNAVAILABLE_RESTRICTED";
            break;
        case eOAIDomainAvailability::RESERVED:
            val = "RESERVED";
            break;
        case eOAIDomainAvailability::DONT_KNOW:
            val = "DONT_KNOW";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDomainAvailability::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDomainAvailability::eOAIDomainAvailability OAIDomainAvailability::getValue() const {
    return m_value;
}

void OAIDomainAvailability::setValue(const OAIDomainAvailability::eOAIDomainAvailability& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDomainAvailability::isSet() const {
    
    return m_value_isSet;
}

bool OAIDomainAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
