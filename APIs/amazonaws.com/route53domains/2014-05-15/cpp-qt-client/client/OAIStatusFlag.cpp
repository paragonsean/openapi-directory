/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatusFlag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatusFlag::OAIStatusFlag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatusFlag::OAIStatusFlag() {
    this->initializeModel();
}

OAIStatusFlag::~OAIStatusFlag() {}

void OAIStatusFlag::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStatusFlag::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStatusFlag::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING_ACCEPTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusFlag::ACCEPTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_CUSTOMER_ACTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusFlag::CUSTOMER_ACTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_AUTHORIZATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusFlag::AUTHORIZATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_PAYMENT_VERIFICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusFlag::PAYMENT_VERIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_SUPPORT_CASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStatusFlag::SUPPORT_CASE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStatusFlag::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStatusFlag::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStatusFlag::ACCEPTANCE:
            val = "PENDING_ACCEPTANCE";
            break;
        case eOAIStatusFlag::CUSTOMER_ACTION:
            val = "PENDING_CUSTOMER_ACTION";
            break;
        case eOAIStatusFlag::AUTHORIZATION:
            val = "PENDING_AUTHORIZATION";
            break;
        case eOAIStatusFlag::PAYMENT_VERIFICATION:
            val = "PENDING_PAYMENT_VERIFICATION";
            break;
        case eOAIStatusFlag::SUPPORT_CASE:
            val = "PENDING_SUPPORT_CASE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStatusFlag::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStatusFlag::eOAIStatusFlag OAIStatusFlag::getValue() const {
    return m_value;
}

void OAIStatusFlag::setValue(const OAIStatusFlag::eOAIStatusFlag& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStatusFlag::isSet() const {
    
    return m_value_isSet;
}

bool OAIStatusFlag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
