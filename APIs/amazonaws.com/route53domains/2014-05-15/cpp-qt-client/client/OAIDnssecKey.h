/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDnssecKey.h
 *
 * &lt;p&gt;Information about the DNSSEC key.&lt;/p&gt; &lt;p&gt;You get this from your DNS provider and then give it to RouteÂ 53 (by using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AssociateDelegationSignerToDomain.html\&quot;&gt;AssociateDelegationSignerToDomain&lt;/a&gt;) to pass it to the registry to establish the chain of trust.&lt;/p&gt;
 */

#ifndef OAIDnssecKey_H
#define OAIDnssecKey_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDnssecKey : public OAIObject {
public:
    OAIDnssecKey();
    OAIDnssecKey(QString json);
    ~OAIDnssecKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAlgorithm() const;
    void setAlgorithm(const qint32 &algorithm);
    bool is_algorithm_Set() const;
    bool is_algorithm_Valid() const;

    qint32 getFlags() const;
    void setFlags(const qint32 &flags);
    bool is_flags_Set() const;
    bool is_flags_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    qint32 getDigestType() const;
    void setDigestType(const qint32 &digest_type);
    bool is_digest_type_Set() const;
    bool is_digest_type_Valid() const;

    QString getDigest() const;
    void setDigest(const QString &digest);
    bool is_digest_Set() const;
    bool is_digest_Valid() const;

    qint32 getKeyTag() const;
    void setKeyTag(const qint32 &key_tag);
    bool is_key_tag_Set() const;
    bool is_key_tag_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_algorithm;
    bool m_algorithm_isSet;
    bool m_algorithm_isValid;

    qint32 m_flags;
    bool m_flags_isSet;
    bool m_flags_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    qint32 m_digest_type;
    bool m_digest_type_isSet;
    bool m_digest_type_isValid;

    QString m_digest;
    bool m_digest_isSet;
    bool m_digest_isValid;

    qint32 m_key_tag;
    bool m_key_tag_isSet;
    bool m_key_tag_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDnssecKey)

#endif // OAIDnssecKey_H
