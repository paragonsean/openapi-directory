/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainPrice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainPrice::OAIDomainPrice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainPrice::OAIDomainPrice() {
    this->initializeModel();
}

OAIDomainPrice::~OAIDomainPrice() {}

void OAIDomainPrice::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_price_isSet = false;
    m_registration_price_isValid = false;

    m_transfer_price_isSet = false;
    m_transfer_price_isValid = false;

    m_renewal_price_isSet = false;
    m_renewal_price_isValid = false;

    m_change_ownership_price_isSet = false;
    m_change_ownership_price_isValid = false;

    m_restoration_price_isSet = false;
    m_restoration_price_isValid = false;
}

void OAIDomainPrice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainPrice::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_registration_price_isValid = ::OpenAPI::fromJsonValue(m_registration_price, json[QString("RegistrationPrice")]);
    m_registration_price_isSet = !json[QString("RegistrationPrice")].isNull() && m_registration_price_isValid;

    m_transfer_price_isValid = ::OpenAPI::fromJsonValue(m_transfer_price, json[QString("TransferPrice")]);
    m_transfer_price_isSet = !json[QString("TransferPrice")].isNull() && m_transfer_price_isValid;

    m_renewal_price_isValid = ::OpenAPI::fromJsonValue(m_renewal_price, json[QString("RenewalPrice")]);
    m_renewal_price_isSet = !json[QString("RenewalPrice")].isNull() && m_renewal_price_isValid;

    m_change_ownership_price_isValid = ::OpenAPI::fromJsonValue(m_change_ownership_price, json[QString("ChangeOwnershipPrice")]);
    m_change_ownership_price_isSet = !json[QString("ChangeOwnershipPrice")].isNull() && m_change_ownership_price_isValid;

    m_restoration_price_isValid = ::OpenAPI::fromJsonValue(m_restoration_price, json[QString("RestorationPrice")]);
    m_restoration_price_isSet = !json[QString("RestorationPrice")].isNull() && m_restoration_price_isValid;
}

QString OAIDomainPrice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainPrice::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_price.isSet()) {
        obj.insert(QString("RegistrationPrice"), ::OpenAPI::toJsonValue(m_registration_price));
    }
    if (m_transfer_price.isSet()) {
        obj.insert(QString("TransferPrice"), ::OpenAPI::toJsonValue(m_transfer_price));
    }
    if (m_renewal_price.isSet()) {
        obj.insert(QString("RenewalPrice"), ::OpenAPI::toJsonValue(m_renewal_price));
    }
    if (m_change_ownership_price.isSet()) {
        obj.insert(QString("ChangeOwnershipPrice"), ::OpenAPI::toJsonValue(m_change_ownership_price));
    }
    if (m_restoration_price.isSet()) {
        obj.insert(QString("RestorationPrice"), ::OpenAPI::toJsonValue(m_restoration_price));
    }
    return obj;
}

QString OAIDomainPrice::getName() const {
    return m_name;
}
void OAIDomainPrice::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDomainPrice::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDomainPrice::is_name_Valid() const{
    return m_name_isValid;
}

OAIDomainPrice_RegistrationPrice OAIDomainPrice::getRegistrationPrice() const {
    return m_registration_price;
}
void OAIDomainPrice::setRegistrationPrice(const OAIDomainPrice_RegistrationPrice &registration_price) {
    m_registration_price = registration_price;
    m_registration_price_isSet = true;
}

bool OAIDomainPrice::is_registration_price_Set() const{
    return m_registration_price_isSet;
}

bool OAIDomainPrice::is_registration_price_Valid() const{
    return m_registration_price_isValid;
}

OAIDomainPrice_TransferPrice OAIDomainPrice::getTransferPrice() const {
    return m_transfer_price;
}
void OAIDomainPrice::setTransferPrice(const OAIDomainPrice_TransferPrice &transfer_price) {
    m_transfer_price = transfer_price;
    m_transfer_price_isSet = true;
}

bool OAIDomainPrice::is_transfer_price_Set() const{
    return m_transfer_price_isSet;
}

bool OAIDomainPrice::is_transfer_price_Valid() const{
    return m_transfer_price_isValid;
}

OAIDomainPrice_RenewalPrice OAIDomainPrice::getRenewalPrice() const {
    return m_renewal_price;
}
void OAIDomainPrice::setRenewalPrice(const OAIDomainPrice_RenewalPrice &renewal_price) {
    m_renewal_price = renewal_price;
    m_renewal_price_isSet = true;
}

bool OAIDomainPrice::is_renewal_price_Set() const{
    return m_renewal_price_isSet;
}

bool OAIDomainPrice::is_renewal_price_Valid() const{
    return m_renewal_price_isValid;
}

OAIDomainPrice_ChangeOwnershipPrice OAIDomainPrice::getChangeOwnershipPrice() const {
    return m_change_ownership_price;
}
void OAIDomainPrice::setChangeOwnershipPrice(const OAIDomainPrice_ChangeOwnershipPrice &change_ownership_price) {
    m_change_ownership_price = change_ownership_price;
    m_change_ownership_price_isSet = true;
}

bool OAIDomainPrice::is_change_ownership_price_Set() const{
    return m_change_ownership_price_isSet;
}

bool OAIDomainPrice::is_change_ownership_price_Valid() const{
    return m_change_ownership_price_isValid;
}

OAIDomainPrice_RestorationPrice OAIDomainPrice::getRestorationPrice() const {
    return m_restoration_price;
}
void OAIDomainPrice::setRestorationPrice(const OAIDomainPrice_RestorationPrice &restoration_price) {
    m_restoration_price = restoration_price;
    m_restoration_price_isSet = true;
}

bool OAIDomainPrice::is_restoration_price_Set() const{
    return m_restoration_price_isSet;
}

bool OAIDomainPrice::is_restoration_price_Valid() const{
    return m_restoration_price_isValid;
}

bool OAIDomainPrice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_ownership_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restoration_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainPrice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
