/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOperationDetailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOperationDetailResponse::OAIGetOperationDetailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOperationDetailResponse::OAIGetOperationDetailResponse() {
    this->initializeModel();
}

OAIGetOperationDetailResponse::~OAIGetOperationDetailResponse() {}

void OAIGetOperationDetailResponse::initializeModel() {

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_submitted_date_isSet = false;
    m_submitted_date_isValid = false;

    m_last_updated_date_isSet = false;
    m_last_updated_date_isValid = false;

    m_status_flag_isSet = false;
    m_status_flag_isValid = false;
}

void OAIGetOperationDetailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOperationDetailResponse::fromJsonObject(QJsonObject json) {

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("OperationId")]);
    m_operation_id_isSet = !json[QString("OperationId")].isNull() && m_operation_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_submitted_date_isValid = ::OpenAPI::fromJsonValue(m_submitted_date, json[QString("SubmittedDate")]);
    m_submitted_date_isSet = !json[QString("SubmittedDate")].isNull() && m_submitted_date_isValid;

    m_last_updated_date_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date, json[QString("LastUpdatedDate")]);
    m_last_updated_date_isSet = !json[QString("LastUpdatedDate")].isNull() && m_last_updated_date_isValid;

    m_status_flag_isValid = ::OpenAPI::fromJsonValue(m_status_flag, json[QString("StatusFlag")]);
    m_status_flag_isSet = !json[QString("StatusFlag")].isNull() && m_status_flag_isValid;
}

QString OAIGetOperationDetailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOperationDetailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_id_isSet) {
        obj.insert(QString("OperationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_submitted_date_isSet) {
        obj.insert(QString("SubmittedDate"), ::OpenAPI::toJsonValue(m_submitted_date));
    }
    if (m_last_updated_date_isSet) {
        obj.insert(QString("LastUpdatedDate"), ::OpenAPI::toJsonValue(m_last_updated_date));
    }
    if (m_status_flag.isSet()) {
        obj.insert(QString("StatusFlag"), ::OpenAPI::toJsonValue(m_status_flag));
    }
    return obj;
}

QString OAIGetOperationDetailResponse::getOperationId() const {
    return m_operation_id;
}
void OAIGetOperationDetailResponse::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIGetOperationDetailResponse::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIGetOperationDetailResponse::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAIOperationStatus OAIGetOperationDetailResponse::getStatus() const {
    return m_status;
}
void OAIGetOperationDetailResponse::setStatus(const OAIOperationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetOperationDetailResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetOperationDetailResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetOperationDetailResponse::getMessage() const {
    return m_message;
}
void OAIGetOperationDetailResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetOperationDetailResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetOperationDetailResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIGetOperationDetailResponse::getDomainName() const {
    return m_domain_name;
}
void OAIGetOperationDetailResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetOperationDetailResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetOperationDetailResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIOperationType OAIGetOperationDetailResponse::getType() const {
    return m_type;
}
void OAIGetOperationDetailResponse::setType(const OAIOperationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetOperationDetailResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetOperationDetailResponse::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIGetOperationDetailResponse::getSubmittedDate() const {
    return m_submitted_date;
}
void OAIGetOperationDetailResponse::setSubmittedDate(const QDateTime &submitted_date) {
    m_submitted_date = submitted_date;
    m_submitted_date_isSet = true;
}

bool OAIGetOperationDetailResponse::is_submitted_date_Set() const{
    return m_submitted_date_isSet;
}

bool OAIGetOperationDetailResponse::is_submitted_date_Valid() const{
    return m_submitted_date_isValid;
}

QDateTime OAIGetOperationDetailResponse::getLastUpdatedDate() const {
    return m_last_updated_date;
}
void OAIGetOperationDetailResponse::setLastUpdatedDate(const QDateTime &last_updated_date) {
    m_last_updated_date = last_updated_date;
    m_last_updated_date_isSet = true;
}

bool OAIGetOperationDetailResponse::is_last_updated_date_Set() const{
    return m_last_updated_date_isSet;
}

bool OAIGetOperationDetailResponse::is_last_updated_date_Valid() const{
    return m_last_updated_date_isValid;
}

OAIStatusFlag OAIGetOperationDetailResponse::getStatusFlag() const {
    return m_status_flag;
}
void OAIGetOperationDetailResponse::setStatusFlag(const OAIStatusFlag &status_flag) {
    m_status_flag = status_flag;
    m_status_flag_isSet = true;
}

bool OAIGetOperationDetailResponse::is_status_flag_Set() const{
    return m_status_flag_isSet;
}

bool OAIGetOperationDetailResponse::is_status_flag_Valid() const{
    return m_status_flag_isValid;
}

bool OAIGetOperationDetailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOperationDetailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
