/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateDelegationSignerToDomainRequest_SigningAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::OAIAssociateDelegationSignerToDomainRequest_SigningAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::OAIAssociateDelegationSignerToDomainRequest_SigningAttributes() {
    this->initializeModel();
}

OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::~OAIAssociateDelegationSignerToDomainRequest_SigningAttributes() {}

void OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;
}

void OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("Algorithm")]);
    m_algorithm_isSet = !json[QString("Algorithm")].isNull() && m_algorithm_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("Flags")]);
    m_flags_isSet = !json[QString("Flags")].isNull() && m_flags_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("PublicKey")]);
    m_public_key_isSet = !json[QString("PublicKey")].isNull() && m_public_key_isValid;
}

QString OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("Algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_flags_isSet) {
        obj.insert(QString("Flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("PublicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    return obj;
}

qint32 OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::getAlgorithm() const {
    return m_algorithm;
}
void OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::setAlgorithm(const qint32 &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

qint32 OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::getFlags() const {
    return m_flags;
}
void OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::setFlags(const qint32 &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::is_flags_Valid() const{
    return m_flags_isValid;
}

QString OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::getPublicKey() const {
    return m_public_key;
}
void OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::is_public_key_Valid() const{
    return m_public_key_isValid;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateDelegationSignerToDomainRequest_SigningAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
