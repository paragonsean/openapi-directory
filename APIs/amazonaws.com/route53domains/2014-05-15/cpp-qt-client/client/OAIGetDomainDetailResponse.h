/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDomainDetailResponse.h
 *
 * The GetDomainDetail response includes the following elements.
 */

#ifndef OAIGetDomainDetailResponse_H
#define OAIGetDomainDetailResponse_H

#include <QJsonObject>

#include "OAIGetDomainDetailResponse_AdminContact.h"
#include "OAIGetDomainDetailResponse_RegistrantContact.h"
#include "OAIGetDomainDetailResponse_TechContact.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetDomainDetailResponse_AdminContact;
class OAIGetDomainDetailResponse_RegistrantContact;
class OAIGetDomainDetailResponse_TechContact;

class OAIGetDomainDetailResponse : public OAIObject {
public:
    OAIGetDomainDetailResponse();
    OAIGetDomainDetailResponse(QString json);
    ~OAIGetDomainDetailResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDomainName() const;
    void setDomainName(const QString &domain_name);
    bool is_domain_name_Set() const;
    bool is_domain_name_Valid() const;

    QList getNameservers() const;
    void setNameservers(const QList &nameservers);
    bool is_nameservers_Set() const;
    bool is_nameservers_Valid() const;

    bool getAutoRenew() const;
    void setAutoRenew(const bool &auto_renew);
    bool is_auto_renew_Set() const;
    bool is_auto_renew_Valid() const;

    OAIGetDomainDetailResponse_AdminContact getAdminContact() const;
    void setAdminContact(const OAIGetDomainDetailResponse_AdminContact &admin_contact);
    bool is_admin_contact_Set() const;
    bool is_admin_contact_Valid() const;

    OAIGetDomainDetailResponse_RegistrantContact getRegistrantContact() const;
    void setRegistrantContact(const OAIGetDomainDetailResponse_RegistrantContact &registrant_contact);
    bool is_registrant_contact_Set() const;
    bool is_registrant_contact_Valid() const;

    OAIGetDomainDetailResponse_TechContact getTechContact() const;
    void setTechContact(const OAIGetDomainDetailResponse_TechContact &tech_contact);
    bool is_tech_contact_Set() const;
    bool is_tech_contact_Valid() const;

    bool getAdminPrivacy() const;
    void setAdminPrivacy(const bool &admin_privacy);
    bool is_admin_privacy_Set() const;
    bool is_admin_privacy_Valid() const;

    bool getRegistrantPrivacy() const;
    void setRegistrantPrivacy(const bool &registrant_privacy);
    bool is_registrant_privacy_Set() const;
    bool is_registrant_privacy_Valid() const;

    bool getTechPrivacy() const;
    void setTechPrivacy(const bool &tech_privacy);
    bool is_tech_privacy_Set() const;
    bool is_tech_privacy_Valid() const;

    QString getRegistrarName() const;
    void setRegistrarName(const QString &registrar_name);
    bool is_registrar_name_Set() const;
    bool is_registrar_name_Valid() const;

    QString getWhoIsServer() const;
    void setWhoIsServer(const QString &who_is_server);
    bool is_who_is_server_Set() const;
    bool is_who_is_server_Valid() const;

    QString getRegistrarUrl() const;
    void setRegistrarUrl(const QString &registrar_url);
    bool is_registrar_url_Set() const;
    bool is_registrar_url_Valid() const;

    QString getAbuseContactEmail() const;
    void setAbuseContactEmail(const QString &abuse_contact_email);
    bool is_abuse_contact_email_Set() const;
    bool is_abuse_contact_email_Valid() const;

    QString getAbuseContactPhone() const;
    void setAbuseContactPhone(const QString &abuse_contact_phone);
    bool is_abuse_contact_phone_Set() const;
    bool is_abuse_contact_phone_Valid() const;

    QString getRegistryDomainId() const;
    void setRegistryDomainId(const QString &registry_domain_id);
    bool is_registry_domain_id_Set() const;
    bool is_registry_domain_id_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QDateTime getUpdatedDate() const;
    void setUpdatedDate(const QDateTime &updated_date);
    bool is_updated_date_Set() const;
    bool is_updated_date_Valid() const;

    QDateTime getExpirationDate() const;
    void setExpirationDate(const QDateTime &expiration_date);
    bool is_expiration_date_Set() const;
    bool is_expiration_date_Valid() const;

    QString getReseller() const;
    void setReseller(const QString &reseller);
    bool is_reseller_Set() const;
    bool is_reseller_Valid() const;

    QString getDnsSec() const;
    void setDnsSec(const QString &dns_sec);
    bool is_dns_sec_Set() const;
    bool is_dns_sec_Valid() const;

    QList getStatusList() const;
    void setStatusList(const QList &status_list);
    bool is_status_list_Set() const;
    bool is_status_list_Valid() const;

    QList getDnssecKeys() const;
    void setDnssecKeys(const QList &dnssec_keys);
    bool is_dnssec_keys_Set() const;
    bool is_dnssec_keys_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_domain_name;
    bool m_domain_name_isSet;
    bool m_domain_name_isValid;

    QList m_nameservers;
    bool m_nameservers_isSet;
    bool m_nameservers_isValid;

    bool m_auto_renew;
    bool m_auto_renew_isSet;
    bool m_auto_renew_isValid;

    OAIGetDomainDetailResponse_AdminContact m_admin_contact;
    bool m_admin_contact_isSet;
    bool m_admin_contact_isValid;

    OAIGetDomainDetailResponse_RegistrantContact m_registrant_contact;
    bool m_registrant_contact_isSet;
    bool m_registrant_contact_isValid;

    OAIGetDomainDetailResponse_TechContact m_tech_contact;
    bool m_tech_contact_isSet;
    bool m_tech_contact_isValid;

    bool m_admin_privacy;
    bool m_admin_privacy_isSet;
    bool m_admin_privacy_isValid;

    bool m_registrant_privacy;
    bool m_registrant_privacy_isSet;
    bool m_registrant_privacy_isValid;

    bool m_tech_privacy;
    bool m_tech_privacy_isSet;
    bool m_tech_privacy_isValid;

    QString m_registrar_name;
    bool m_registrar_name_isSet;
    bool m_registrar_name_isValid;

    QString m_who_is_server;
    bool m_who_is_server_isSet;
    bool m_who_is_server_isValid;

    QString m_registrar_url;
    bool m_registrar_url_isSet;
    bool m_registrar_url_isValid;

    QString m_abuse_contact_email;
    bool m_abuse_contact_email_isSet;
    bool m_abuse_contact_email_isValid;

    QString m_abuse_contact_phone;
    bool m_abuse_contact_phone_isSet;
    bool m_abuse_contact_phone_isValid;

    QString m_registry_domain_id;
    bool m_registry_domain_id_isSet;
    bool m_registry_domain_id_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QDateTime m_updated_date;
    bool m_updated_date_isSet;
    bool m_updated_date_isValid;

    QDateTime m_expiration_date;
    bool m_expiration_date_isSet;
    bool m_expiration_date_isValid;

    QString m_reseller;
    bool m_reseller_isSet;
    bool m_reseller_isValid;

    QString m_dns_sec;
    bool m_dns_sec_isSet;
    bool m_dns_sec_isValid;

    QList m_status_list;
    bool m_status_list_isSet;
    bool m_status_list_isValid;

    QList m_dnssec_keys;
    bool m_dnssec_keys_isSet;
    bool m_dnssec_keys_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDomainDetailResponse)

#endif // OAIGetDomainDetailResponse_H
