/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDomainsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDomainsRequest::OAIListDomainsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDomainsRequest::OAIListDomainsRequest() {
    this->initializeModel();
}

OAIListDomainsRequest::~OAIListDomainsRequest() {}

void OAIListDomainsRequest::initializeModel() {

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_sort_condition_isSet = false;
    m_sort_condition_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;
}

void OAIListDomainsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDomainsRequest::fromJsonObject(QJsonObject json) {

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("FilterConditions")]);
    m_filter_conditions_isSet = !json[QString("FilterConditions")].isNull() && m_filter_conditions_isValid;

    m_sort_condition_isValid = ::OpenAPI::fromJsonValue(m_sort_condition, json[QString("SortCondition")]);
    m_sort_condition_isSet = !json[QString("SortCondition")].isNull() && m_sort_condition_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;
}

QString OAIListDomainsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDomainsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_conditions.isSet()) {
        obj.insert(QString("FilterConditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_sort_condition.isSet()) {
        obj.insert(QString("SortCondition"), ::OpenAPI::toJsonValue(m_sort_condition));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    return obj;
}

QList OAIListDomainsRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAIListDomainsRequest::setFilterConditions(const QList &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAIListDomainsRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAIListDomainsRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

OAIListDomainsRequest_SortCondition OAIListDomainsRequest::getSortCondition() const {
    return m_sort_condition;
}
void OAIListDomainsRequest::setSortCondition(const OAIListDomainsRequest_SortCondition &sort_condition) {
    m_sort_condition = sort_condition;
    m_sort_condition_isSet = true;
}

bool OAIListDomainsRequest::is_sort_condition_Set() const{
    return m_sort_condition_isSet;
}

bool OAIListDomainsRequest::is_sort_condition_Valid() const{
    return m_sort_condition_isValid;
}

QString OAIListDomainsRequest::getMarker() const {
    return m_marker;
}
void OAIListDomainsRequest::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIListDomainsRequest::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIListDomainsRequest::is_marker_Valid() const{
    return m_marker_isValid;
}

qint32 OAIListDomainsRequest::getMaxItems() const {
    return m_max_items;
}
void OAIListDomainsRequest::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListDomainsRequest::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListDomainsRequest::is_max_items_Valid() const{
    return m_max_items_isValid;
}

bool OAIListDomainsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDomainsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
