/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViewBillingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViewBillingRequest::OAIViewBillingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViewBillingRequest::OAIViewBillingRequest() {
    this->initializeModel();
}

OAIViewBillingRequest::~OAIViewBillingRequest() {}

void OAIViewBillingRequest::initializeModel() {

    m_start_isSet = false;
    m_start_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;
}

void OAIViewBillingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViewBillingRequest::fromJsonObject(QJsonObject json) {

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("Start")]);
    m_start_isSet = !json[QString("Start")].isNull() && m_start_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("End")]);
    m_end_isSet = !json[QString("End")].isNull() && m_end_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;
}

QString OAIViewBillingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViewBillingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_start_isSet) {
        obj.insert(QString("Start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_end_isSet) {
        obj.insert(QString("End"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    return obj;
}

QDateTime OAIViewBillingRequest::getStart() const {
    return m_start;
}
void OAIViewBillingRequest::setStart(const QDateTime &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIViewBillingRequest::is_start_Set() const{
    return m_start_isSet;
}

bool OAIViewBillingRequest::is_start_Valid() const{
    return m_start_isValid;
}

QDateTime OAIViewBillingRequest::getEnd() const {
    return m_end;
}
void OAIViewBillingRequest::setEnd(const QDateTime &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAIViewBillingRequest::is_end_Set() const{
    return m_end_isSet;
}

bool OAIViewBillingRequest::is_end_Valid() const{
    return m_end_isValid;
}

QString OAIViewBillingRequest::getMarker() const {
    return m_marker;
}
void OAIViewBillingRequest::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIViewBillingRequest::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIViewBillingRequest::is_marker_Valid() const{
    return m_marker_isValid;
}

qint32 OAIViewBillingRequest::getMaxItems() const {
    return m_max_items;
}
void OAIViewBillingRequest::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIViewBillingRequest::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIViewBillingRequest::is_max_items_Valid() const{
    return m_max_items_isValid;
}

bool OAIViewBillingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViewBillingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
