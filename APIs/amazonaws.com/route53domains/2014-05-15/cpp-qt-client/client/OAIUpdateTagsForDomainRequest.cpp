/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTagsForDomainRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTagsForDomainRequest::OAIUpdateTagsForDomainRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTagsForDomainRequest::OAIUpdateTagsForDomainRequest() {
    this->initializeModel();
}

OAIUpdateTagsForDomainRequest::~OAIUpdateTagsForDomainRequest() {}

void OAIUpdateTagsForDomainRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_tags_to_update_isSet = false;
    m_tags_to_update_isValid = false;
}

void OAIUpdateTagsForDomainRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTagsForDomainRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_tags_to_update_isValid = ::OpenAPI::fromJsonValue(m_tags_to_update, json[QString("TagsToUpdate")]);
    m_tags_to_update_isSet = !json[QString("TagsToUpdate")].isNull() && m_tags_to_update_isValid;
}

QString OAIUpdateTagsForDomainRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTagsForDomainRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_tags_to_update.isSet()) {
        obj.insert(QString("TagsToUpdate"), ::OpenAPI::toJsonValue(m_tags_to_update));
    }
    return obj;
}

QString OAIUpdateTagsForDomainRequest::getDomainName() const {
    return m_domain_name;
}
void OAIUpdateTagsForDomainRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIUpdateTagsForDomainRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIUpdateTagsForDomainRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIUpdateTagsForDomainRequest::getTagsToUpdate() const {
    return m_tags_to_update;
}
void OAIUpdateTagsForDomainRequest::setTagsToUpdate(const QList &tags_to_update) {
    m_tags_to_update = tags_to_update;
    m_tags_to_update_isSet = true;
}

bool OAIUpdateTagsForDomainRequest::is_tags_to_update_Set() const{
    return m_tags_to_update_isSet;
}

bool OAIUpdateTagsForDomainRequest::is_tags_to_update_Valid() const{
    return m_tags_to_update_isValid;
}

bool OAIUpdateTagsForDomainRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags_to_update.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTagsForDomainRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
