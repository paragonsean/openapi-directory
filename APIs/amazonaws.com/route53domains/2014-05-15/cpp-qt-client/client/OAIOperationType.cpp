/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationType::OAIOperationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationType::OAIOperationType() {
    this->initializeModel();
}

OAIOperationType::~OAIOperationType() {}

void OAIOperationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("REGISTER_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::REGISTER_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETE_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::DELETE_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSFER_IN_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::TRANSFER_IN_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_DOMAIN_CONTACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::UPDATE_DOMAIN_CONTACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATE_NAMESERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::UPDATE_NAMESERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHANGE_PRIVACY_PROTECTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::CHANGE_PRIVACY_PROTECTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOMAIN_LOCK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::DOMAIN_LOCK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ENABLE_AUTORENEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::ENABLE_AUTORENEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISABLE_AUTORENEW", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::DISABLE_AUTORENEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ADD_DNSSEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::ADD_DNSSEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REMOVE_DNSSEC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::REMOVE_DNSSEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRE_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::EXPIRE_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSFER_OUT_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::TRANSFER_OUT_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHANGE_DOMAIN_OWNER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::CHANGE_DOMAIN_OWNER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RENEW_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::RENEW_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PUSH_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::PUSH_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_TRANSFER_OUT_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::INTERNAL_TRANSFER_OUT_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INTERNAL_TRANSFER_IN_DOMAIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperationType::INTERNAL_TRANSFER_IN_DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperationType::REGISTER_DOMAIN:
            val = "REGISTER_DOMAIN";
            break;
        case eOAIOperationType::DELETE_DOMAIN:
            val = "DELETE_DOMAIN";
            break;
        case eOAIOperationType::TRANSFER_IN_DOMAIN:
            val = "TRANSFER_IN_DOMAIN";
            break;
        case eOAIOperationType::UPDATE_DOMAIN_CONTACT:
            val = "UPDATE_DOMAIN_CONTACT";
            break;
        case eOAIOperationType::UPDATE_NAMESERVER:
            val = "UPDATE_NAMESERVER";
            break;
        case eOAIOperationType::CHANGE_PRIVACY_PROTECTION:
            val = "CHANGE_PRIVACY_PROTECTION";
            break;
        case eOAIOperationType::DOMAIN_LOCK:
            val = "DOMAIN_LOCK";
            break;
        case eOAIOperationType::ENABLE_AUTORENEW:
            val = "ENABLE_AUTORENEW";
            break;
        case eOAIOperationType::DISABLE_AUTORENEW:
            val = "DISABLE_AUTORENEW";
            break;
        case eOAIOperationType::ADD_DNSSEC:
            val = "ADD_DNSSEC";
            break;
        case eOAIOperationType::REMOVE_DNSSEC:
            val = "REMOVE_DNSSEC";
            break;
        case eOAIOperationType::EXPIRE_DOMAIN:
            val = "EXPIRE_DOMAIN";
            break;
        case eOAIOperationType::TRANSFER_OUT_DOMAIN:
            val = "TRANSFER_OUT_DOMAIN";
            break;
        case eOAIOperationType::CHANGE_DOMAIN_OWNER:
            val = "CHANGE_DOMAIN_OWNER";
            break;
        case eOAIOperationType::RENEW_DOMAIN:
            val = "RENEW_DOMAIN";
            break;
        case eOAIOperationType::PUSH_DOMAIN:
            val = "PUSH_DOMAIN";
            break;
        case eOAIOperationType::INTERNAL_TRANSFER_OUT_DOMAIN:
            val = "INTERNAL_TRANSFER_OUT_DOMAIN";
            break;
        case eOAIOperationType::INTERNAL_TRANSFER_IN_DOMAIN:
            val = "INTERNAL_TRANSFER_IN_DOMAIN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperationType::eOAIOperationType OAIOperationType::getValue() const {
    return m_value;
}

void OAIOperationType::setValue(const OAIOperationType::eOAIOperationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
