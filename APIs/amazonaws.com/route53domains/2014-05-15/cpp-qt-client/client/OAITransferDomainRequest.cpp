/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferDomainRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferDomainRequest::OAITransferDomainRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferDomainRequest::OAITransferDomainRequest() {
    this->initializeModel();
}

OAITransferDomainRequest::~OAITransferDomainRequest() {}

void OAITransferDomainRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_idn_lang_code_isSet = false;
    m_idn_lang_code_isValid = false;

    m_duration_in_years_isSet = false;
    m_duration_in_years_isValid = false;

    m_nameservers_isSet = false;
    m_nameservers_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_auto_renew_isSet = false;
    m_auto_renew_isValid = false;

    m_admin_contact_isSet = false;
    m_admin_contact_isValid = false;

    m_registrant_contact_isSet = false;
    m_registrant_contact_isValid = false;

    m_tech_contact_isSet = false;
    m_tech_contact_isValid = false;

    m_privacy_protect_admin_contact_isSet = false;
    m_privacy_protect_admin_contact_isValid = false;

    m_privacy_protect_registrant_contact_isSet = false;
    m_privacy_protect_registrant_contact_isValid = false;

    m_privacy_protect_tech_contact_isSet = false;
    m_privacy_protect_tech_contact_isValid = false;
}

void OAITransferDomainRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferDomainRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_idn_lang_code_isValid = ::OpenAPI::fromJsonValue(m_idn_lang_code, json[QString("IdnLangCode")]);
    m_idn_lang_code_isSet = !json[QString("IdnLangCode")].isNull() && m_idn_lang_code_isValid;

    m_duration_in_years_isValid = ::OpenAPI::fromJsonValue(m_duration_in_years, json[QString("DurationInYears")]);
    m_duration_in_years_isSet = !json[QString("DurationInYears")].isNull() && m_duration_in_years_isValid;

    m_nameservers_isValid = ::OpenAPI::fromJsonValue(m_nameservers, json[QString("Nameservers")]);
    m_nameservers_isSet = !json[QString("Nameservers")].isNull() && m_nameservers_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("AuthCode")]);
    m_auth_code_isSet = !json[QString("AuthCode")].isNull() && m_auth_code_isValid;

    m_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_auto_renew, json[QString("AutoRenew")]);
    m_auto_renew_isSet = !json[QString("AutoRenew")].isNull() && m_auto_renew_isValid;

    m_admin_contact_isValid = ::OpenAPI::fromJsonValue(m_admin_contact, json[QString("AdminContact")]);
    m_admin_contact_isSet = !json[QString("AdminContact")].isNull() && m_admin_contact_isValid;

    m_registrant_contact_isValid = ::OpenAPI::fromJsonValue(m_registrant_contact, json[QString("RegistrantContact")]);
    m_registrant_contact_isSet = !json[QString("RegistrantContact")].isNull() && m_registrant_contact_isValid;

    m_tech_contact_isValid = ::OpenAPI::fromJsonValue(m_tech_contact, json[QString("TechContact")]);
    m_tech_contact_isSet = !json[QString("TechContact")].isNull() && m_tech_contact_isValid;

    m_privacy_protect_admin_contact_isValid = ::OpenAPI::fromJsonValue(m_privacy_protect_admin_contact, json[QString("PrivacyProtectAdminContact")]);
    m_privacy_protect_admin_contact_isSet = !json[QString("PrivacyProtectAdminContact")].isNull() && m_privacy_protect_admin_contact_isValid;

    m_privacy_protect_registrant_contact_isValid = ::OpenAPI::fromJsonValue(m_privacy_protect_registrant_contact, json[QString("PrivacyProtectRegistrantContact")]);
    m_privacy_protect_registrant_contact_isSet = !json[QString("PrivacyProtectRegistrantContact")].isNull() && m_privacy_protect_registrant_contact_isValid;

    m_privacy_protect_tech_contact_isValid = ::OpenAPI::fromJsonValue(m_privacy_protect_tech_contact, json[QString("PrivacyProtectTechContact")]);
    m_privacy_protect_tech_contact_isSet = !json[QString("PrivacyProtectTechContact")].isNull() && m_privacy_protect_tech_contact_isValid;
}

QString OAITransferDomainRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferDomainRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_idn_lang_code_isSet) {
        obj.insert(QString("IdnLangCode"), ::OpenAPI::toJsonValue(m_idn_lang_code));
    }
    if (m_duration_in_years_isSet) {
        obj.insert(QString("DurationInYears"), ::OpenAPI::toJsonValue(m_duration_in_years));
    }
    if (m_nameservers.isSet()) {
        obj.insert(QString("Nameservers"), ::OpenAPI::toJsonValue(m_nameservers));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("AuthCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_auto_renew_isSet) {
        obj.insert(QString("AutoRenew"), ::OpenAPI::toJsonValue(m_auto_renew));
    }
    if (m_admin_contact.isSet()) {
        obj.insert(QString("AdminContact"), ::OpenAPI::toJsonValue(m_admin_contact));
    }
    if (m_registrant_contact.isSet()) {
        obj.insert(QString("RegistrantContact"), ::OpenAPI::toJsonValue(m_registrant_contact));
    }
    if (m_tech_contact.isSet()) {
        obj.insert(QString("TechContact"), ::OpenAPI::toJsonValue(m_tech_contact));
    }
    if (m_privacy_protect_admin_contact_isSet) {
        obj.insert(QString("PrivacyProtectAdminContact"), ::OpenAPI::toJsonValue(m_privacy_protect_admin_contact));
    }
    if (m_privacy_protect_registrant_contact_isSet) {
        obj.insert(QString("PrivacyProtectRegistrantContact"), ::OpenAPI::toJsonValue(m_privacy_protect_registrant_contact));
    }
    if (m_privacy_protect_tech_contact_isSet) {
        obj.insert(QString("PrivacyProtectTechContact"), ::OpenAPI::toJsonValue(m_privacy_protect_tech_contact));
    }
    return obj;
}

QString OAITransferDomainRequest::getDomainName() const {
    return m_domain_name;
}
void OAITransferDomainRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAITransferDomainRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAITransferDomainRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAITransferDomainRequest::getIdnLangCode() const {
    return m_idn_lang_code;
}
void OAITransferDomainRequest::setIdnLangCode(const QString &idn_lang_code) {
    m_idn_lang_code = idn_lang_code;
    m_idn_lang_code_isSet = true;
}

bool OAITransferDomainRequest::is_idn_lang_code_Set() const{
    return m_idn_lang_code_isSet;
}

bool OAITransferDomainRequest::is_idn_lang_code_Valid() const{
    return m_idn_lang_code_isValid;
}

qint32 OAITransferDomainRequest::getDurationInYears() const {
    return m_duration_in_years;
}
void OAITransferDomainRequest::setDurationInYears(const qint32 &duration_in_years) {
    m_duration_in_years = duration_in_years;
    m_duration_in_years_isSet = true;
}

bool OAITransferDomainRequest::is_duration_in_years_Set() const{
    return m_duration_in_years_isSet;
}

bool OAITransferDomainRequest::is_duration_in_years_Valid() const{
    return m_duration_in_years_isValid;
}

QList OAITransferDomainRequest::getNameservers() const {
    return m_nameservers;
}
void OAITransferDomainRequest::setNameservers(const QList &nameservers) {
    m_nameservers = nameservers;
    m_nameservers_isSet = true;
}

bool OAITransferDomainRequest::is_nameservers_Set() const{
    return m_nameservers_isSet;
}

bool OAITransferDomainRequest::is_nameservers_Valid() const{
    return m_nameservers_isValid;
}

QString OAITransferDomainRequest::getAuthCode() const {
    return m_auth_code;
}
void OAITransferDomainRequest::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAITransferDomainRequest::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAITransferDomainRequest::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

bool OAITransferDomainRequest::getAutoRenew() const {
    return m_auto_renew;
}
void OAITransferDomainRequest::setAutoRenew(const bool &auto_renew) {
    m_auto_renew = auto_renew;
    m_auto_renew_isSet = true;
}

bool OAITransferDomainRequest::is_auto_renew_Set() const{
    return m_auto_renew_isSet;
}

bool OAITransferDomainRequest::is_auto_renew_Valid() const{
    return m_auto_renew_isValid;
}

OAITransferDomainRequest_AdminContact OAITransferDomainRequest::getAdminContact() const {
    return m_admin_contact;
}
void OAITransferDomainRequest::setAdminContact(const OAITransferDomainRequest_AdminContact &admin_contact) {
    m_admin_contact = admin_contact;
    m_admin_contact_isSet = true;
}

bool OAITransferDomainRequest::is_admin_contact_Set() const{
    return m_admin_contact_isSet;
}

bool OAITransferDomainRequest::is_admin_contact_Valid() const{
    return m_admin_contact_isValid;
}

OAITransferDomainRequest_AdminContact OAITransferDomainRequest::getRegistrantContact() const {
    return m_registrant_contact;
}
void OAITransferDomainRequest::setRegistrantContact(const OAITransferDomainRequest_AdminContact &registrant_contact) {
    m_registrant_contact = registrant_contact;
    m_registrant_contact_isSet = true;
}

bool OAITransferDomainRequest::is_registrant_contact_Set() const{
    return m_registrant_contact_isSet;
}

bool OAITransferDomainRequest::is_registrant_contact_Valid() const{
    return m_registrant_contact_isValid;
}

OAITransferDomainRequest_AdminContact OAITransferDomainRequest::getTechContact() const {
    return m_tech_contact;
}
void OAITransferDomainRequest::setTechContact(const OAITransferDomainRequest_AdminContact &tech_contact) {
    m_tech_contact = tech_contact;
    m_tech_contact_isSet = true;
}

bool OAITransferDomainRequest::is_tech_contact_Set() const{
    return m_tech_contact_isSet;
}

bool OAITransferDomainRequest::is_tech_contact_Valid() const{
    return m_tech_contact_isValid;
}

bool OAITransferDomainRequest::getPrivacyProtectAdminContact() const {
    return m_privacy_protect_admin_contact;
}
void OAITransferDomainRequest::setPrivacyProtectAdminContact(const bool &privacy_protect_admin_contact) {
    m_privacy_protect_admin_contact = privacy_protect_admin_contact;
    m_privacy_protect_admin_contact_isSet = true;
}

bool OAITransferDomainRequest::is_privacy_protect_admin_contact_Set() const{
    return m_privacy_protect_admin_contact_isSet;
}

bool OAITransferDomainRequest::is_privacy_protect_admin_contact_Valid() const{
    return m_privacy_protect_admin_contact_isValid;
}

bool OAITransferDomainRequest::getPrivacyProtectRegistrantContact() const {
    return m_privacy_protect_registrant_contact;
}
void OAITransferDomainRequest::setPrivacyProtectRegistrantContact(const bool &privacy_protect_registrant_contact) {
    m_privacy_protect_registrant_contact = privacy_protect_registrant_contact;
    m_privacy_protect_registrant_contact_isSet = true;
}

bool OAITransferDomainRequest::is_privacy_protect_registrant_contact_Set() const{
    return m_privacy_protect_registrant_contact_isSet;
}

bool OAITransferDomainRequest::is_privacy_protect_registrant_contact_Valid() const{
    return m_privacy_protect_registrant_contact_isValid;
}

bool OAITransferDomainRequest::getPrivacyProtectTechContact() const {
    return m_privacy_protect_tech_contact;
}
void OAITransferDomainRequest::setPrivacyProtectTechContact(const bool &privacy_protect_tech_contact) {
    m_privacy_protect_tech_contact = privacy_protect_tech_contact;
    m_privacy_protect_tech_contact_isSet = true;
}

bool OAITransferDomainRequest::is_privacy_protect_tech_contact_Set() const{
    return m_privacy_protect_tech_contact_isSet;
}

bool OAITransferDomainRequest::is_privacy_protect_tech_contact_Valid() const{
    return m_privacy_protect_tech_contact_isValid;
}

bool OAITransferDomainRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idn_lang_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_years_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nameservers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_protect_admin_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_protect_registrant_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_privacy_protect_tech_contact_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferDomainRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_duration_in_years_isValid && m_admin_contact_isValid && m_registrant_contact_isValid && m_tech_contact_isValid && true;
}

} // namespace OpenAPI
