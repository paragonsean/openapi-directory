/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDomainDetailResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDomainDetailResponse::OAIGetDomainDetailResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDomainDetailResponse::OAIGetDomainDetailResponse() {
    this->initializeModel();
}

OAIGetDomainDetailResponse::~OAIGetDomainDetailResponse() {}

void OAIGetDomainDetailResponse::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_nameservers_isSet = false;
    m_nameservers_isValid = false;

    m_auto_renew_isSet = false;
    m_auto_renew_isValid = false;

    m_admin_contact_isSet = false;
    m_admin_contact_isValid = false;

    m_registrant_contact_isSet = false;
    m_registrant_contact_isValid = false;

    m_tech_contact_isSet = false;
    m_tech_contact_isValid = false;

    m_admin_privacy_isSet = false;
    m_admin_privacy_isValid = false;

    m_registrant_privacy_isSet = false;
    m_registrant_privacy_isValid = false;

    m_tech_privacy_isSet = false;
    m_tech_privacy_isValid = false;

    m_registrar_name_isSet = false;
    m_registrar_name_isValid = false;

    m_who_is_server_isSet = false;
    m_who_is_server_isValid = false;

    m_registrar_url_isSet = false;
    m_registrar_url_isValid = false;

    m_abuse_contact_email_isSet = false;
    m_abuse_contact_email_isValid = false;

    m_abuse_contact_phone_isSet = false;
    m_abuse_contact_phone_isValid = false;

    m_registry_domain_id_isSet = false;
    m_registry_domain_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_updated_date_isSet = false;
    m_updated_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_reseller_isSet = false;
    m_reseller_isValid = false;

    m_dns_sec_isSet = false;
    m_dns_sec_isValid = false;

    m_status_list_isSet = false;
    m_status_list_isValid = false;

    m_dnssec_keys_isSet = false;
    m_dnssec_keys_isValid = false;
}

void OAIGetDomainDetailResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDomainDetailResponse::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_nameservers_isValid = ::OpenAPI::fromJsonValue(m_nameservers, json[QString("Nameservers")]);
    m_nameservers_isSet = !json[QString("Nameservers")].isNull() && m_nameservers_isValid;

    m_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_auto_renew, json[QString("AutoRenew")]);
    m_auto_renew_isSet = !json[QString("AutoRenew")].isNull() && m_auto_renew_isValid;

    m_admin_contact_isValid = ::OpenAPI::fromJsonValue(m_admin_contact, json[QString("AdminContact")]);
    m_admin_contact_isSet = !json[QString("AdminContact")].isNull() && m_admin_contact_isValid;

    m_registrant_contact_isValid = ::OpenAPI::fromJsonValue(m_registrant_contact, json[QString("RegistrantContact")]);
    m_registrant_contact_isSet = !json[QString("RegistrantContact")].isNull() && m_registrant_contact_isValid;

    m_tech_contact_isValid = ::OpenAPI::fromJsonValue(m_tech_contact, json[QString("TechContact")]);
    m_tech_contact_isSet = !json[QString("TechContact")].isNull() && m_tech_contact_isValid;

    m_admin_privacy_isValid = ::OpenAPI::fromJsonValue(m_admin_privacy, json[QString("AdminPrivacy")]);
    m_admin_privacy_isSet = !json[QString("AdminPrivacy")].isNull() && m_admin_privacy_isValid;

    m_registrant_privacy_isValid = ::OpenAPI::fromJsonValue(m_registrant_privacy, json[QString("RegistrantPrivacy")]);
    m_registrant_privacy_isSet = !json[QString("RegistrantPrivacy")].isNull() && m_registrant_privacy_isValid;

    m_tech_privacy_isValid = ::OpenAPI::fromJsonValue(m_tech_privacy, json[QString("TechPrivacy")]);
    m_tech_privacy_isSet = !json[QString("TechPrivacy")].isNull() && m_tech_privacy_isValid;

    m_registrar_name_isValid = ::OpenAPI::fromJsonValue(m_registrar_name, json[QString("RegistrarName")]);
    m_registrar_name_isSet = !json[QString("RegistrarName")].isNull() && m_registrar_name_isValid;

    m_who_is_server_isValid = ::OpenAPI::fromJsonValue(m_who_is_server, json[QString("WhoIsServer")]);
    m_who_is_server_isSet = !json[QString("WhoIsServer")].isNull() && m_who_is_server_isValid;

    m_registrar_url_isValid = ::OpenAPI::fromJsonValue(m_registrar_url, json[QString("RegistrarUrl")]);
    m_registrar_url_isSet = !json[QString("RegistrarUrl")].isNull() && m_registrar_url_isValid;

    m_abuse_contact_email_isValid = ::OpenAPI::fromJsonValue(m_abuse_contact_email, json[QString("AbuseContactEmail")]);
    m_abuse_contact_email_isSet = !json[QString("AbuseContactEmail")].isNull() && m_abuse_contact_email_isValid;

    m_abuse_contact_phone_isValid = ::OpenAPI::fromJsonValue(m_abuse_contact_phone, json[QString("AbuseContactPhone")]);
    m_abuse_contact_phone_isSet = !json[QString("AbuseContactPhone")].isNull() && m_abuse_contact_phone_isValid;

    m_registry_domain_id_isValid = ::OpenAPI::fromJsonValue(m_registry_domain_id, json[QString("RegistryDomainId")]);
    m_registry_domain_id_isSet = !json[QString("RegistryDomainId")].isNull() && m_registry_domain_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_updated_date_isValid = ::OpenAPI::fromJsonValue(m_updated_date, json[QString("UpdatedDate")]);
    m_updated_date_isSet = !json[QString("UpdatedDate")].isNull() && m_updated_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("ExpirationDate")]);
    m_expiration_date_isSet = !json[QString("ExpirationDate")].isNull() && m_expiration_date_isValid;

    m_reseller_isValid = ::OpenAPI::fromJsonValue(m_reseller, json[QString("Reseller")]);
    m_reseller_isSet = !json[QString("Reseller")].isNull() && m_reseller_isValid;

    m_dns_sec_isValid = ::OpenAPI::fromJsonValue(m_dns_sec, json[QString("DnsSec")]);
    m_dns_sec_isSet = !json[QString("DnsSec")].isNull() && m_dns_sec_isValid;

    m_status_list_isValid = ::OpenAPI::fromJsonValue(m_status_list, json[QString("StatusList")]);
    m_status_list_isSet = !json[QString("StatusList")].isNull() && m_status_list_isValid;

    m_dnssec_keys_isValid = ::OpenAPI::fromJsonValue(m_dnssec_keys, json[QString("DnssecKeys")]);
    m_dnssec_keys_isSet = !json[QString("DnssecKeys")].isNull() && m_dnssec_keys_isValid;
}

QString OAIGetDomainDetailResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDomainDetailResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_nameservers.isSet()) {
        obj.insert(QString("Nameservers"), ::OpenAPI::toJsonValue(m_nameservers));
    }
    if (m_auto_renew_isSet) {
        obj.insert(QString("AutoRenew"), ::OpenAPI::toJsonValue(m_auto_renew));
    }
    if (m_admin_contact.isSet()) {
        obj.insert(QString("AdminContact"), ::OpenAPI::toJsonValue(m_admin_contact));
    }
    if (m_registrant_contact.isSet()) {
        obj.insert(QString("RegistrantContact"), ::OpenAPI::toJsonValue(m_registrant_contact));
    }
    if (m_tech_contact.isSet()) {
        obj.insert(QString("TechContact"), ::OpenAPI::toJsonValue(m_tech_contact));
    }
    if (m_admin_privacy_isSet) {
        obj.insert(QString("AdminPrivacy"), ::OpenAPI::toJsonValue(m_admin_privacy));
    }
    if (m_registrant_privacy_isSet) {
        obj.insert(QString("RegistrantPrivacy"), ::OpenAPI::toJsonValue(m_registrant_privacy));
    }
    if (m_tech_privacy_isSet) {
        obj.insert(QString("TechPrivacy"), ::OpenAPI::toJsonValue(m_tech_privacy));
    }
    if (m_registrar_name_isSet) {
        obj.insert(QString("RegistrarName"), ::OpenAPI::toJsonValue(m_registrar_name));
    }
    if (m_who_is_server_isSet) {
        obj.insert(QString("WhoIsServer"), ::OpenAPI::toJsonValue(m_who_is_server));
    }
    if (m_registrar_url_isSet) {
        obj.insert(QString("RegistrarUrl"), ::OpenAPI::toJsonValue(m_registrar_url));
    }
    if (m_abuse_contact_email_isSet) {
        obj.insert(QString("AbuseContactEmail"), ::OpenAPI::toJsonValue(m_abuse_contact_email));
    }
    if (m_abuse_contact_phone_isSet) {
        obj.insert(QString("AbuseContactPhone"), ::OpenAPI::toJsonValue(m_abuse_contact_phone));
    }
    if (m_registry_domain_id_isSet) {
        obj.insert(QString("RegistryDomainId"), ::OpenAPI::toJsonValue(m_registry_domain_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_updated_date_isSet) {
        obj.insert(QString("UpdatedDate"), ::OpenAPI::toJsonValue(m_updated_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("ExpirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_reseller_isSet) {
        obj.insert(QString("Reseller"), ::OpenAPI::toJsonValue(m_reseller));
    }
    if (m_dns_sec_isSet) {
        obj.insert(QString("DnsSec"), ::OpenAPI::toJsonValue(m_dns_sec));
    }
    if (m_status_list.isSet()) {
        obj.insert(QString("StatusList"), ::OpenAPI::toJsonValue(m_status_list));
    }
    if (m_dnssec_keys.isSet()) {
        obj.insert(QString("DnssecKeys"), ::OpenAPI::toJsonValue(m_dnssec_keys));
    }
    return obj;
}

QString OAIGetDomainDetailResponse::getDomainName() const {
    return m_domain_name;
}
void OAIGetDomainDetailResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetDomainDetailResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetDomainDetailResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIGetDomainDetailResponse::getNameservers() const {
    return m_nameservers;
}
void OAIGetDomainDetailResponse::setNameservers(const QList &nameservers) {
    m_nameservers = nameservers;
    m_nameservers_isSet = true;
}

bool OAIGetDomainDetailResponse::is_nameservers_Set() const{
    return m_nameservers_isSet;
}

bool OAIGetDomainDetailResponse::is_nameservers_Valid() const{
    return m_nameservers_isValid;
}

bool OAIGetDomainDetailResponse::getAutoRenew() const {
    return m_auto_renew;
}
void OAIGetDomainDetailResponse::setAutoRenew(const bool &auto_renew) {
    m_auto_renew = auto_renew;
    m_auto_renew_isSet = true;
}

bool OAIGetDomainDetailResponse::is_auto_renew_Set() const{
    return m_auto_renew_isSet;
}

bool OAIGetDomainDetailResponse::is_auto_renew_Valid() const{
    return m_auto_renew_isValid;
}

OAIGetDomainDetailResponse_AdminContact OAIGetDomainDetailResponse::getAdminContact() const {
    return m_admin_contact;
}
void OAIGetDomainDetailResponse::setAdminContact(const OAIGetDomainDetailResponse_AdminContact &admin_contact) {
    m_admin_contact = admin_contact;
    m_admin_contact_isSet = true;
}

bool OAIGetDomainDetailResponse::is_admin_contact_Set() const{
    return m_admin_contact_isSet;
}

bool OAIGetDomainDetailResponse::is_admin_contact_Valid() const{
    return m_admin_contact_isValid;
}

OAIGetDomainDetailResponse_RegistrantContact OAIGetDomainDetailResponse::getRegistrantContact() const {
    return m_registrant_contact;
}
void OAIGetDomainDetailResponse::setRegistrantContact(const OAIGetDomainDetailResponse_RegistrantContact &registrant_contact) {
    m_registrant_contact = registrant_contact;
    m_registrant_contact_isSet = true;
}

bool OAIGetDomainDetailResponse::is_registrant_contact_Set() const{
    return m_registrant_contact_isSet;
}

bool OAIGetDomainDetailResponse::is_registrant_contact_Valid() const{
    return m_registrant_contact_isValid;
}

OAIGetDomainDetailResponse_TechContact OAIGetDomainDetailResponse::getTechContact() const {
    return m_tech_contact;
}
void OAIGetDomainDetailResponse::setTechContact(const OAIGetDomainDetailResponse_TechContact &tech_contact) {
    m_tech_contact = tech_contact;
    m_tech_contact_isSet = true;
}

bool OAIGetDomainDetailResponse::is_tech_contact_Set() const{
    return m_tech_contact_isSet;
}

bool OAIGetDomainDetailResponse::is_tech_contact_Valid() const{
    return m_tech_contact_isValid;
}

bool OAIGetDomainDetailResponse::getAdminPrivacy() const {
    return m_admin_privacy;
}
void OAIGetDomainDetailResponse::setAdminPrivacy(const bool &admin_privacy) {
    m_admin_privacy = admin_privacy;
    m_admin_privacy_isSet = true;
}

bool OAIGetDomainDetailResponse::is_admin_privacy_Set() const{
    return m_admin_privacy_isSet;
}

bool OAIGetDomainDetailResponse::is_admin_privacy_Valid() const{
    return m_admin_privacy_isValid;
}

bool OAIGetDomainDetailResponse::getRegistrantPrivacy() const {
    return m_registrant_privacy;
}
void OAIGetDomainDetailResponse::setRegistrantPrivacy(const bool &registrant_privacy) {
    m_registrant_privacy = registrant_privacy;
    m_registrant_privacy_isSet = true;
}

bool OAIGetDomainDetailResponse::is_registrant_privacy_Set() const{
    return m_registrant_privacy_isSet;
}

bool OAIGetDomainDetailResponse::is_registrant_privacy_Valid() const{
    return m_registrant_privacy_isValid;
}

bool OAIGetDomainDetailResponse::getTechPrivacy() const {
    return m_tech_privacy;
}
void OAIGetDomainDetailResponse::setTechPrivacy(const bool &tech_privacy) {
    m_tech_privacy = tech_privacy;
    m_tech_privacy_isSet = true;
}

bool OAIGetDomainDetailResponse::is_tech_privacy_Set() const{
    return m_tech_privacy_isSet;
}

bool OAIGetDomainDetailResponse::is_tech_privacy_Valid() const{
    return m_tech_privacy_isValid;
}

QString OAIGetDomainDetailResponse::getRegistrarName() const {
    return m_registrar_name;
}
void OAIGetDomainDetailResponse::setRegistrarName(const QString &registrar_name) {
    m_registrar_name = registrar_name;
    m_registrar_name_isSet = true;
}

bool OAIGetDomainDetailResponse::is_registrar_name_Set() const{
    return m_registrar_name_isSet;
}

bool OAIGetDomainDetailResponse::is_registrar_name_Valid() const{
    return m_registrar_name_isValid;
}

QString OAIGetDomainDetailResponse::getWhoIsServer() const {
    return m_who_is_server;
}
void OAIGetDomainDetailResponse::setWhoIsServer(const QString &who_is_server) {
    m_who_is_server = who_is_server;
    m_who_is_server_isSet = true;
}

bool OAIGetDomainDetailResponse::is_who_is_server_Set() const{
    return m_who_is_server_isSet;
}

bool OAIGetDomainDetailResponse::is_who_is_server_Valid() const{
    return m_who_is_server_isValid;
}

QString OAIGetDomainDetailResponse::getRegistrarUrl() const {
    return m_registrar_url;
}
void OAIGetDomainDetailResponse::setRegistrarUrl(const QString &registrar_url) {
    m_registrar_url = registrar_url;
    m_registrar_url_isSet = true;
}

bool OAIGetDomainDetailResponse::is_registrar_url_Set() const{
    return m_registrar_url_isSet;
}

bool OAIGetDomainDetailResponse::is_registrar_url_Valid() const{
    return m_registrar_url_isValid;
}

QString OAIGetDomainDetailResponse::getAbuseContactEmail() const {
    return m_abuse_contact_email;
}
void OAIGetDomainDetailResponse::setAbuseContactEmail(const QString &abuse_contact_email) {
    m_abuse_contact_email = abuse_contact_email;
    m_abuse_contact_email_isSet = true;
}

bool OAIGetDomainDetailResponse::is_abuse_contact_email_Set() const{
    return m_abuse_contact_email_isSet;
}

bool OAIGetDomainDetailResponse::is_abuse_contact_email_Valid() const{
    return m_abuse_contact_email_isValid;
}

QString OAIGetDomainDetailResponse::getAbuseContactPhone() const {
    return m_abuse_contact_phone;
}
void OAIGetDomainDetailResponse::setAbuseContactPhone(const QString &abuse_contact_phone) {
    m_abuse_contact_phone = abuse_contact_phone;
    m_abuse_contact_phone_isSet = true;
}

bool OAIGetDomainDetailResponse::is_abuse_contact_phone_Set() const{
    return m_abuse_contact_phone_isSet;
}

bool OAIGetDomainDetailResponse::is_abuse_contact_phone_Valid() const{
    return m_abuse_contact_phone_isValid;
}

QString OAIGetDomainDetailResponse::getRegistryDomainId() const {
    return m_registry_domain_id;
}
void OAIGetDomainDetailResponse::setRegistryDomainId(const QString &registry_domain_id) {
    m_registry_domain_id = registry_domain_id;
    m_registry_domain_id_isSet = true;
}

bool OAIGetDomainDetailResponse::is_registry_domain_id_Set() const{
    return m_registry_domain_id_isSet;
}

bool OAIGetDomainDetailResponse::is_registry_domain_id_Valid() const{
    return m_registry_domain_id_isValid;
}

QDateTime OAIGetDomainDetailResponse::getCreationDate() const {
    return m_creation_date;
}
void OAIGetDomainDetailResponse::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetDomainDetailResponse::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetDomainDetailResponse::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIGetDomainDetailResponse::getUpdatedDate() const {
    return m_updated_date;
}
void OAIGetDomainDetailResponse::setUpdatedDate(const QDateTime &updated_date) {
    m_updated_date = updated_date;
    m_updated_date_isSet = true;
}

bool OAIGetDomainDetailResponse::is_updated_date_Set() const{
    return m_updated_date_isSet;
}

bool OAIGetDomainDetailResponse::is_updated_date_Valid() const{
    return m_updated_date_isValid;
}

QDateTime OAIGetDomainDetailResponse::getExpirationDate() const {
    return m_expiration_date;
}
void OAIGetDomainDetailResponse::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIGetDomainDetailResponse::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIGetDomainDetailResponse::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIGetDomainDetailResponse::getReseller() const {
    return m_reseller;
}
void OAIGetDomainDetailResponse::setReseller(const QString &reseller) {
    m_reseller = reseller;
    m_reseller_isSet = true;
}

bool OAIGetDomainDetailResponse::is_reseller_Set() const{
    return m_reseller_isSet;
}

bool OAIGetDomainDetailResponse::is_reseller_Valid() const{
    return m_reseller_isValid;
}

QString OAIGetDomainDetailResponse::getDnsSec() const {
    return m_dns_sec;
}
void OAIGetDomainDetailResponse::setDnsSec(const QString &dns_sec) {
    m_dns_sec = dns_sec;
    m_dns_sec_isSet = true;
}

bool OAIGetDomainDetailResponse::is_dns_sec_Set() const{
    return m_dns_sec_isSet;
}

bool OAIGetDomainDetailResponse::is_dns_sec_Valid() const{
    return m_dns_sec_isValid;
}

QList OAIGetDomainDetailResponse::getStatusList() const {
    return m_status_list;
}
void OAIGetDomainDetailResponse::setStatusList(const QList &status_list) {
    m_status_list = status_list;
    m_status_list_isSet = true;
}

bool OAIGetDomainDetailResponse::is_status_list_Set() const{
    return m_status_list_isSet;
}

bool OAIGetDomainDetailResponse::is_status_list_Valid() const{
    return m_status_list_isValid;
}

QList OAIGetDomainDetailResponse::getDnssecKeys() const {
    return m_dnssec_keys;
}
void OAIGetDomainDetailResponse::setDnssecKeys(const QList &dnssec_keys) {
    m_dnssec_keys = dnssec_keys;
    m_dnssec_keys_isSet = true;
}

bool OAIGetDomainDetailResponse::is_dnssec_keys_Set() const{
    return m_dnssec_keys_isSet;
}

bool OAIGetDomainDetailResponse::is_dnssec_keys_Valid() const{
    return m_dnssec_keys_isValid;
}

bool OAIGetDomainDetailResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nameservers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_privacy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrar_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_who_is_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abuse_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abuse_contact_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_domain_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reseller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnssec_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDomainDetailResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
