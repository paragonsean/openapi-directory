/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenewDomainRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenewDomainRequest::OAIRenewDomainRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenewDomainRequest::OAIRenewDomainRequest() {
    this->initializeModel();
}

OAIRenewDomainRequest::~OAIRenewDomainRequest() {}

void OAIRenewDomainRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_duration_in_years_isSet = false;
    m_duration_in_years_isValid = false;

    m_current_expiry_year_isSet = false;
    m_current_expiry_year_isValid = false;
}

void OAIRenewDomainRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenewDomainRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_duration_in_years_isValid = ::OpenAPI::fromJsonValue(m_duration_in_years, json[QString("DurationInYears")]);
    m_duration_in_years_isSet = !json[QString("DurationInYears")].isNull() && m_duration_in_years_isValid;

    m_current_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_current_expiry_year, json[QString("CurrentExpiryYear")]);
    m_current_expiry_year_isSet = !json[QString("CurrentExpiryYear")].isNull() && m_current_expiry_year_isValid;
}

QString OAIRenewDomainRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenewDomainRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_duration_in_years_isSet) {
        obj.insert(QString("DurationInYears"), ::OpenAPI::toJsonValue(m_duration_in_years));
    }
    if (m_current_expiry_year_isSet) {
        obj.insert(QString("CurrentExpiryYear"), ::OpenAPI::toJsonValue(m_current_expiry_year));
    }
    return obj;
}

QString OAIRenewDomainRequest::getDomainName() const {
    return m_domain_name;
}
void OAIRenewDomainRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIRenewDomainRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIRenewDomainRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

qint32 OAIRenewDomainRequest::getDurationInYears() const {
    return m_duration_in_years;
}
void OAIRenewDomainRequest::setDurationInYears(const qint32 &duration_in_years) {
    m_duration_in_years = duration_in_years;
    m_duration_in_years_isSet = true;
}

bool OAIRenewDomainRequest::is_duration_in_years_Set() const{
    return m_duration_in_years_isSet;
}

bool OAIRenewDomainRequest::is_duration_in_years_Valid() const{
    return m_duration_in_years_isValid;
}

qint32 OAIRenewDomainRequest::getCurrentExpiryYear() const {
    return m_current_expiry_year;
}
void OAIRenewDomainRequest::setCurrentExpiryYear(const qint32 &current_expiry_year) {
    m_current_expiry_year = current_expiry_year;
    m_current_expiry_year_isSet = true;
}

bool OAIRenewDomainRequest::is_current_expiry_year_Set() const{
    return m_current_expiry_year_isSet;
}

bool OAIRenewDomainRequest::is_current_expiry_year_Valid() const{
    return m_current_expiry_year_isValid;
}

bool OAIRenewDomainRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_years_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenewDomainRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_current_expiry_year_isValid && true;
}

} // namespace OpenAPI
