/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainSummary::OAIDomainSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainSummary::OAIDomainSummary() {
    this->initializeModel();
}

OAIDomainSummary::~OAIDomainSummary() {}

void OAIDomainSummary::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_auto_renew_isSet = false;
    m_auto_renew_isValid = false;

    m_transfer_lock_isSet = false;
    m_transfer_lock_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;
}

void OAIDomainSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainSummary::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_auto_renew, json[QString("AutoRenew")]);
    m_auto_renew_isSet = !json[QString("AutoRenew")].isNull() && m_auto_renew_isValid;

    m_transfer_lock_isValid = ::OpenAPI::fromJsonValue(m_transfer_lock, json[QString("TransferLock")]);
    m_transfer_lock_isSet = !json[QString("TransferLock")].isNull() && m_transfer_lock_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("Expiry")]);
    m_expiry_isSet = !json[QString("Expiry")].isNull() && m_expiry_isValid;
}

QString OAIDomainSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_auto_renew_isSet) {
        obj.insert(QString("AutoRenew"), ::OpenAPI::toJsonValue(m_auto_renew));
    }
    if (m_transfer_lock_isSet) {
        obj.insert(QString("TransferLock"), ::OpenAPI::toJsonValue(m_transfer_lock));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("Expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    return obj;
}

QString OAIDomainSummary::getDomainName() const {
    return m_domain_name;
}
void OAIDomainSummary::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomainSummary::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomainSummary::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

bool OAIDomainSummary::getAutoRenew() const {
    return m_auto_renew;
}
void OAIDomainSummary::setAutoRenew(const bool &auto_renew) {
    m_auto_renew = auto_renew;
    m_auto_renew_isSet = true;
}

bool OAIDomainSummary::is_auto_renew_Set() const{
    return m_auto_renew_isSet;
}

bool OAIDomainSummary::is_auto_renew_Valid() const{
    return m_auto_renew_isValid;
}

bool OAIDomainSummary::getTransferLock() const {
    return m_transfer_lock;
}
void OAIDomainSummary::setTransferLock(const bool &transfer_lock) {
    m_transfer_lock = transfer_lock;
    m_transfer_lock_isSet = true;
}

bool OAIDomainSummary::is_transfer_lock_Set() const{
    return m_transfer_lock_isSet;
}

bool OAIDomainSummary::is_transfer_lock_Valid() const{
    return m_transfer_lock_isValid;
}

QDateTime OAIDomainSummary::getExpiry() const {
    return m_expiry;
}
void OAIDomainSummary::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIDomainSummary::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIDomainSummary::is_expiry_Valid() const{
    return m_expiry_isValid;
}

bool OAIDomainSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_lock_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
