/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPricesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPricesRequest::OAIListPricesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPricesRequest::OAIListPricesRequest() {
    this->initializeModel();
}

OAIListPricesRequest::~OAIListPricesRequest() {}

void OAIListPricesRequest::initializeModel() {

    m_tld_isSet = false;
    m_tld_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;
}

void OAIListPricesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPricesRequest::fromJsonObject(QJsonObject json) {

    m_tld_isValid = ::OpenAPI::fromJsonValue(m_tld, json[QString("Tld")]);
    m_tld_isSet = !json[QString("Tld")].isNull() && m_tld_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;
}

QString OAIListPricesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPricesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_tld_isSet) {
        obj.insert(QString("Tld"), ::OpenAPI::toJsonValue(m_tld));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    return obj;
}

QString OAIListPricesRequest::getTld() const {
    return m_tld;
}
void OAIListPricesRequest::setTld(const QString &tld) {
    m_tld = tld;
    m_tld_isSet = true;
}

bool OAIListPricesRequest::is_tld_Set() const{
    return m_tld_isSet;
}

bool OAIListPricesRequest::is_tld_Valid() const{
    return m_tld_isValid;
}

QString OAIListPricesRequest::getMarker() const {
    return m_marker;
}
void OAIListPricesRequest::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIListPricesRequest::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIListPricesRequest::is_marker_Valid() const{
    return m_marker_isValid;
}

qint32 OAIListPricesRequest::getMaxItems() const {
    return m_max_items;
}
void OAIListPricesRequest::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListPricesRequest::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListPricesRequest::is_max_items_Valid() const{
    return m_max_items_isValid;
}

bool OAIListPricesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tld_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPricesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
