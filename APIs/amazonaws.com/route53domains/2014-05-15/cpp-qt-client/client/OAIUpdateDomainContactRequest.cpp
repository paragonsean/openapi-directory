/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDomainContactRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDomainContactRequest::OAIUpdateDomainContactRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDomainContactRequest::OAIUpdateDomainContactRequest() {
    this->initializeModel();
}

OAIUpdateDomainContactRequest::~OAIUpdateDomainContactRequest() {}

void OAIUpdateDomainContactRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_admin_contact_isSet = false;
    m_admin_contact_isValid = false;

    m_registrant_contact_isSet = false;
    m_registrant_contact_isValid = false;

    m_tech_contact_isSet = false;
    m_tech_contact_isValid = false;

    m_consent_isSet = false;
    m_consent_isValid = false;
}

void OAIUpdateDomainContactRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDomainContactRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_admin_contact_isValid = ::OpenAPI::fromJsonValue(m_admin_contact, json[QString("AdminContact")]);
    m_admin_contact_isSet = !json[QString("AdminContact")].isNull() && m_admin_contact_isValid;

    m_registrant_contact_isValid = ::OpenAPI::fromJsonValue(m_registrant_contact, json[QString("RegistrantContact")]);
    m_registrant_contact_isSet = !json[QString("RegistrantContact")].isNull() && m_registrant_contact_isValid;

    m_tech_contact_isValid = ::OpenAPI::fromJsonValue(m_tech_contact, json[QString("TechContact")]);
    m_tech_contact_isSet = !json[QString("TechContact")].isNull() && m_tech_contact_isValid;

    m_consent_isValid = ::OpenAPI::fromJsonValue(m_consent, json[QString("Consent")]);
    m_consent_isSet = !json[QString("Consent")].isNull() && m_consent_isValid;
}

QString OAIUpdateDomainContactRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDomainContactRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_admin_contact.isSet()) {
        obj.insert(QString("AdminContact"), ::OpenAPI::toJsonValue(m_admin_contact));
    }
    if (m_registrant_contact.isSet()) {
        obj.insert(QString("RegistrantContact"), ::OpenAPI::toJsonValue(m_registrant_contact));
    }
    if (m_tech_contact.isSet()) {
        obj.insert(QString("TechContact"), ::OpenAPI::toJsonValue(m_tech_contact));
    }
    if (m_consent.isSet()) {
        obj.insert(QString("Consent"), ::OpenAPI::toJsonValue(m_consent));
    }
    return obj;
}

QString OAIUpdateDomainContactRequest::getDomainName() const {
    return m_domain_name;
}
void OAIUpdateDomainContactRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIUpdateDomainContactRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIUpdateDomainContactRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAITransferDomainRequest_AdminContact OAIUpdateDomainContactRequest::getAdminContact() const {
    return m_admin_contact;
}
void OAIUpdateDomainContactRequest::setAdminContact(const OAITransferDomainRequest_AdminContact &admin_contact) {
    m_admin_contact = admin_contact;
    m_admin_contact_isSet = true;
}

bool OAIUpdateDomainContactRequest::is_admin_contact_Set() const{
    return m_admin_contact_isSet;
}

bool OAIUpdateDomainContactRequest::is_admin_contact_Valid() const{
    return m_admin_contact_isValid;
}

OAITransferDomainRequest_AdminContact OAIUpdateDomainContactRequest::getRegistrantContact() const {
    return m_registrant_contact;
}
void OAIUpdateDomainContactRequest::setRegistrantContact(const OAITransferDomainRequest_AdminContact &registrant_contact) {
    m_registrant_contact = registrant_contact;
    m_registrant_contact_isSet = true;
}

bool OAIUpdateDomainContactRequest::is_registrant_contact_Set() const{
    return m_registrant_contact_isSet;
}

bool OAIUpdateDomainContactRequest::is_registrant_contact_Valid() const{
    return m_registrant_contact_isValid;
}

OAITransferDomainRequest_AdminContact OAIUpdateDomainContactRequest::getTechContact() const {
    return m_tech_contact;
}
void OAIUpdateDomainContactRequest::setTechContact(const OAITransferDomainRequest_AdminContact &tech_contact) {
    m_tech_contact = tech_contact;
    m_tech_contact_isSet = true;
}

bool OAIUpdateDomainContactRequest::is_tech_contact_Set() const{
    return m_tech_contact_isSet;
}

bool OAIUpdateDomainContactRequest::is_tech_contact_Valid() const{
    return m_tech_contact_isValid;
}

OAIUpdateDomainContactRequest_Consent OAIUpdateDomainContactRequest::getConsent() const {
    return m_consent;
}
void OAIUpdateDomainContactRequest::setConsent(const OAIUpdateDomainContactRequest_Consent &consent) {
    m_consent = consent;
    m_consent_isSet = true;
}

bool OAIUpdateDomainContactRequest::is_consent_Set() const{
    return m_consent_isSet;
}

bool OAIUpdateDomainContactRequest::is_consent_Valid() const{
    return m_consent_isValid;
}

bool OAIUpdateDomainContactRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tech_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_consent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDomainContactRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && true;
}

} // namespace OpenAPI
