/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptDomainTransferFromAnotherAwsAccountRequest.h"
#include "OAIAcceptDomainTransferFromAnotherAwsAccountResponse.h"
#include "OAIAssociateDelegationSignerToDomainRequest.h"
#include "OAIAssociateDelegationSignerToDomainResponse.h"
#include "OAICancelDomainTransferToAnotherAwsAccountRequest.h"
#include "OAICancelDomainTransferToAnotherAwsAccountResponse.h"
#include "OAICheckDomainAvailabilityRequest.h"
#include "OAICheckDomainAvailabilityResponse.h"
#include "OAICheckDomainTransferabilityRequest.h"
#include "OAICheckDomainTransferabilityResponse.h"
#include "OAIDeleteDomainRequest.h"
#include "OAIDeleteDomainResponse.h"
#include "OAIDeleteTagsForDomainRequest.h"
#include "OAIDisableDomainAutoRenewRequest.h"
#include "OAIDisableDomainTransferLockRequest.h"
#include "OAIDisableDomainTransferLockResponse.h"
#include "OAIDisassociateDelegationSignerFromDomainRequest.h"
#include "OAIDisassociateDelegationSignerFromDomainResponse.h"
#include "OAIEnableDomainAutoRenewRequest.h"
#include "OAIEnableDomainTransferLockRequest.h"
#include "OAIEnableDomainTransferLockResponse.h"
#include "OAIGetContactReachabilityStatusRequest.h"
#include "OAIGetContactReachabilityStatusResponse.h"
#include "OAIGetDomainDetailRequest.h"
#include "OAIGetDomainDetailResponse.h"
#include "OAIGetDomainSuggestionsRequest.h"
#include "OAIGetDomainSuggestionsResponse.h"
#include "OAIGetOperationDetailRequest.h"
#include "OAIGetOperationDetailResponse.h"
#include "OAIListDomainsRequest.h"
#include "OAIListDomainsResponse.h"
#include "OAIListOperationsRequest.h"
#include "OAIListOperationsResponse.h"
#include "OAIListPricesRequest.h"
#include "OAIListPricesResponse.h"
#include "OAIListTagsForDomainRequest.h"
#include "OAIListTagsForDomainResponse.h"
#include "OAIObject.h"
#include "OAIPushDomainRequest.h"
#include "OAIRegisterDomainRequest.h"
#include "OAIRegisterDomainResponse.h"
#include "OAIRejectDomainTransferFromAnotherAwsAccountRequest.h"
#include "OAIRejectDomainTransferFromAnotherAwsAccountResponse.h"
#include "OAIRenewDomainRequest.h"
#include "OAIRenewDomainResponse.h"
#include "OAIResendContactReachabilityEmailRequest.h"
#include "OAIResendContactReachabilityEmailResponse.h"
#include "OAIResendOperationAuthorizationRequest.h"
#include "OAIRetrieveDomainAuthCodeRequest.h"
#include "OAIRetrieveDomainAuthCodeResponse.h"
#include "OAITransferDomainRequest.h"
#include "OAITransferDomainResponse.h"
#include "OAITransferDomainToAnotherAwsAccountRequest.h"
#include "OAITransferDomainToAnotherAwsAccountResponse.h"
#include "OAIUpdateDomainContactPrivacyRequest.h"
#include "OAIUpdateDomainContactPrivacyResponse.h"
#include "OAIUpdateDomainContactRequest.h"
#include "OAIUpdateDomainContactResponse.h"
#include "OAIUpdateDomainNameserversRequest.h"
#include "OAIUpdateDomainNameserversResponse.h"
#include "OAIUpdateTagsForDomainRequest.h"
#include "OAIViewBillingRequest.h"
#include "OAIViewBillingResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_accept_domain_transfer_from_another_aws_account_request OAIAcceptDomainTransferFromAnotherAwsAccountRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void acceptDomainTransferFromAnotherAwsAccount(const QString &x_amz_target, const OAIAcceptDomainTransferFromAnotherAwsAccountRequest &oai_accept_domain_transfer_from_another_aws_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_delegation_signer_to_domain_request OAIAssociateDelegationSignerToDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateDelegationSignerToDomain(const QString &x_amz_target, const OAIAssociateDelegationSignerToDomainRequest &oai_associate_delegation_signer_to_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_cancel_domain_transfer_to_another_aws_account_request OAICancelDomainTransferToAnotherAwsAccountRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void cancelDomainTransferToAnotherAwsAccount(const QString &x_amz_target, const OAICancelDomainTransferToAnotherAwsAccountRequest &oai_cancel_domain_transfer_to_another_aws_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_check_domain_availability_request OAICheckDomainAvailabilityRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void checkDomainAvailability(const QString &x_amz_target, const OAICheckDomainAvailabilityRequest &oai_check_domain_availability_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_check_domain_transferability_request OAICheckDomainTransferabilityRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void checkDomainTransferability(const QString &x_amz_target, const OAICheckDomainTransferabilityRequest &oai_check_domain_transferability_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_domain_request OAIDeleteDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteDomain(const QString &x_amz_target, const OAIDeleteDomainRequest &oai_delete_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_tags_for_domain_request OAIDeleteTagsForDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTagsForDomain(const QString &x_amz_target, const OAIDeleteTagsForDomainRequest &oai_delete_tags_for_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disable_domain_auto_renew_request OAIDisableDomainAutoRenewRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disableDomainAutoRenew(const QString &x_amz_target, const OAIDisableDomainAutoRenewRequest &oai_disable_domain_auto_renew_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disable_domain_transfer_lock_request OAIDisableDomainTransferLockRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disableDomainTransferLock(const QString &x_amz_target, const OAIDisableDomainTransferLockRequest &oai_disable_domain_transfer_lock_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_delegation_signer_from_domain_request OAIDisassociateDelegationSignerFromDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateDelegationSignerFromDomain(const QString &x_amz_target, const OAIDisassociateDelegationSignerFromDomainRequest &oai_disassociate_delegation_signer_from_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_enable_domain_auto_renew_request OAIEnableDomainAutoRenewRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void enableDomainAutoRenew(const QString &x_amz_target, const OAIEnableDomainAutoRenewRequest &oai_enable_domain_auto_renew_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_enable_domain_transfer_lock_request OAIEnableDomainTransferLockRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void enableDomainTransferLock(const QString &x_amz_target, const OAIEnableDomainTransferLockRequest &oai_enable_domain_transfer_lock_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_contact_reachability_status_request OAIGetContactReachabilityStatusRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getContactReachabilityStatus(const QString &x_amz_target, const OAIGetContactReachabilityStatusRequest &oai_get_contact_reachability_status_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_domain_detail_request OAIGetDomainDetailRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDomainDetail(const QString &x_amz_target, const OAIGetDomainDetailRequest &oai_get_domain_detail_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_domain_suggestions_request OAIGetDomainSuggestionsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getDomainSuggestions(const QString &x_amz_target, const OAIGetDomainSuggestionsRequest &oai_get_domain_suggestions_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_get_operation_detail_request OAIGetOperationDetailRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getOperationDetail(const QString &x_amz_target, const OAIGetOperationDetailRequest &oai_get_operation_detail_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_domains_request OAIListDomainsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listDomains(const QString &x_amz_target, const OAIListDomainsRequest &oai_list_domains_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_operations_request OAIListOperationsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listOperations(const QString &x_amz_target, const OAIListOperationsRequest &oai_list_operations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_prices_request OAIListPricesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listPrices(const QString &x_amz_target, const OAIListPricesRequest &oai_list_prices_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_domain_request OAIListTagsForDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listTagsForDomain(const QString &x_amz_target, const OAIListTagsForDomainRequest &oai_list_tags_for_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_push_domain_request OAIPushDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pushDomain(const QString &x_amz_target, const OAIPushDomainRequest &oai_push_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_register_domain_request OAIRegisterDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void registerDomain(const QString &x_amz_target, const OAIRegisterDomainRequest &oai_register_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_reject_domain_transfer_from_another_aws_account_request OAIRejectDomainTransferFromAnotherAwsAccountRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void rejectDomainTransferFromAnotherAwsAccount(const QString &x_amz_target, const OAIRejectDomainTransferFromAnotherAwsAccountRequest &oai_reject_domain_transfer_from_another_aws_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_renew_domain_request OAIRenewDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void renewDomain(const QString &x_amz_target, const OAIRenewDomainRequest &oai_renew_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_resend_contact_reachability_email_request OAIResendContactReachabilityEmailRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void resendContactReachabilityEmail(const QString &x_amz_target, const OAIResendContactReachabilityEmailRequest &oai_resend_contact_reachability_email_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_resend_operation_authorization_request OAIResendOperationAuthorizationRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void resendOperationAuthorization(const QString &x_amz_target, const OAIResendOperationAuthorizationRequest &oai_resend_operation_authorization_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_retrieve_domain_auth_code_request OAIRetrieveDomainAuthCodeRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void retrieveDomainAuthCode(const QString &x_amz_target, const OAIRetrieveDomainAuthCodeRequest &oai_retrieve_domain_auth_code_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_transfer_domain_request OAITransferDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void transferDomain(const QString &x_amz_target, const OAITransferDomainRequest &oai_transfer_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_transfer_domain_to_another_aws_account_request OAITransferDomainToAnotherAwsAccountRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void transferDomainToAnotherAwsAccount(const QString &x_amz_target, const OAITransferDomainToAnotherAwsAccountRequest &oai_transfer_domain_to_another_aws_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_domain_contact_request OAIUpdateDomainContactRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDomainContact(const QString &x_amz_target, const OAIUpdateDomainContactRequest &oai_update_domain_contact_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_domain_contact_privacy_request OAIUpdateDomainContactPrivacyRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDomainContactPrivacy(const QString &x_amz_target, const OAIUpdateDomainContactPrivacyRequest &oai_update_domain_contact_privacy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_domain_nameservers_request OAIUpdateDomainNameserversRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateDomainNameservers(const QString &x_amz_target, const OAIUpdateDomainNameserversRequest &oai_update_domain_nameservers_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_tags_for_domain_request OAIUpdateTagsForDomainRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateTagsForDomain(const QString &x_amz_target, const OAIUpdateTagsForDomainRequest &oai_update_tags_for_domain_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_view_billing_request OAIViewBillingRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void viewBilling(const QString &x_amz_target, const OAIViewBillingRequest &oai_view_billing_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptDomainTransferFromAnotherAwsAccountCallback(OAIHttpRequestWorker *worker);
    void associateDelegationSignerToDomainCallback(OAIHttpRequestWorker *worker);
    void cancelDomainTransferToAnotherAwsAccountCallback(OAIHttpRequestWorker *worker);
    void checkDomainAvailabilityCallback(OAIHttpRequestWorker *worker);
    void checkDomainTransferabilityCallback(OAIHttpRequestWorker *worker);
    void deleteDomainCallback(OAIHttpRequestWorker *worker);
    void deleteTagsForDomainCallback(OAIHttpRequestWorker *worker);
    void disableDomainAutoRenewCallback(OAIHttpRequestWorker *worker);
    void disableDomainTransferLockCallback(OAIHttpRequestWorker *worker);
    void disassociateDelegationSignerFromDomainCallback(OAIHttpRequestWorker *worker);
    void enableDomainAutoRenewCallback(OAIHttpRequestWorker *worker);
    void enableDomainTransferLockCallback(OAIHttpRequestWorker *worker);
    void getContactReachabilityStatusCallback(OAIHttpRequestWorker *worker);
    void getDomainDetailCallback(OAIHttpRequestWorker *worker);
    void getDomainSuggestionsCallback(OAIHttpRequestWorker *worker);
    void getOperationDetailCallback(OAIHttpRequestWorker *worker);
    void listDomainsCallback(OAIHttpRequestWorker *worker);
    void listOperationsCallback(OAIHttpRequestWorker *worker);
    void listPricesCallback(OAIHttpRequestWorker *worker);
    void listTagsForDomainCallback(OAIHttpRequestWorker *worker);
    void pushDomainCallback(OAIHttpRequestWorker *worker);
    void registerDomainCallback(OAIHttpRequestWorker *worker);
    void rejectDomainTransferFromAnotherAwsAccountCallback(OAIHttpRequestWorker *worker);
    void renewDomainCallback(OAIHttpRequestWorker *worker);
    void resendContactReachabilityEmailCallback(OAIHttpRequestWorker *worker);
    void resendOperationAuthorizationCallback(OAIHttpRequestWorker *worker);
    void retrieveDomainAuthCodeCallback(OAIHttpRequestWorker *worker);
    void transferDomainCallback(OAIHttpRequestWorker *worker);
    void transferDomainToAnotherAwsAccountCallback(OAIHttpRequestWorker *worker);
    void updateDomainContactCallback(OAIHttpRequestWorker *worker);
    void updateDomainContactPrivacyCallback(OAIHttpRequestWorker *worker);
    void updateDomainNameserversCallback(OAIHttpRequestWorker *worker);
    void updateTagsForDomainCallback(OAIHttpRequestWorker *worker);
    void viewBillingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptDomainTransferFromAnotherAwsAccountSignal(OAIAcceptDomainTransferFromAnotherAwsAccountResponse summary);
    void associateDelegationSignerToDomainSignal(OAIAssociateDelegationSignerToDomainResponse summary);
    void cancelDomainTransferToAnotherAwsAccountSignal(OAICancelDomainTransferToAnotherAwsAccountResponse summary);
    void checkDomainAvailabilitySignal(OAICheckDomainAvailabilityResponse summary);
    void checkDomainTransferabilitySignal(OAICheckDomainTransferabilityResponse summary);
    void deleteDomainSignal(OAIDeleteDomainResponse summary);
    void deleteTagsForDomainSignal(OAIObject summary);
    void disableDomainAutoRenewSignal(OAIObject summary);
    void disableDomainTransferLockSignal(OAIDisableDomainTransferLockResponse summary);
    void disassociateDelegationSignerFromDomainSignal(OAIDisassociateDelegationSignerFromDomainResponse summary);
    void enableDomainAutoRenewSignal(OAIObject summary);
    void enableDomainTransferLockSignal(OAIEnableDomainTransferLockResponse summary);
    void getContactReachabilityStatusSignal(OAIGetContactReachabilityStatusResponse summary);
    void getDomainDetailSignal(OAIGetDomainDetailResponse summary);
    void getDomainSuggestionsSignal(OAIGetDomainSuggestionsResponse summary);
    void getOperationDetailSignal(OAIGetOperationDetailResponse summary);
    void listDomainsSignal(OAIListDomainsResponse summary);
    void listOperationsSignal(OAIListOperationsResponse summary);
    void listPricesSignal(OAIListPricesResponse summary);
    void listTagsForDomainSignal(OAIListTagsForDomainResponse summary);
    void pushDomainSignal();
    void registerDomainSignal(OAIRegisterDomainResponse summary);
    void rejectDomainTransferFromAnotherAwsAccountSignal(OAIRejectDomainTransferFromAnotherAwsAccountResponse summary);
    void renewDomainSignal(OAIRenewDomainResponse summary);
    void resendContactReachabilityEmailSignal(OAIResendContactReachabilityEmailResponse summary);
    void resendOperationAuthorizationSignal();
    void retrieveDomainAuthCodeSignal(OAIRetrieveDomainAuthCodeResponse summary);
    void transferDomainSignal(OAITransferDomainResponse summary);
    void transferDomainToAnotherAwsAccountSignal(OAITransferDomainToAnotherAwsAccountResponse summary);
    void updateDomainContactSignal(OAIUpdateDomainContactResponse summary);
    void updateDomainContactPrivacySignal(OAIUpdateDomainContactPrivacyResponse summary);
    void updateDomainNameserversSignal(OAIUpdateDomainNameserversResponse summary);
    void updateTagsForDomainSignal(OAIObject summary);
    void viewBillingSignal(OAIViewBillingResponse summary);


    void acceptDomainTransferFromAnotherAwsAccountSignalFull(OAIHttpRequestWorker *worker, OAIAcceptDomainTransferFromAnotherAwsAccountResponse summary);
    void associateDelegationSignerToDomainSignalFull(OAIHttpRequestWorker *worker, OAIAssociateDelegationSignerToDomainResponse summary);
    void cancelDomainTransferToAnotherAwsAccountSignalFull(OAIHttpRequestWorker *worker, OAICancelDomainTransferToAnotherAwsAccountResponse summary);
    void checkDomainAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckDomainAvailabilityResponse summary);
    void checkDomainTransferabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckDomainTransferabilityResponse summary);
    void deleteDomainSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDomainResponse summary);
    void deleteTagsForDomainSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disableDomainAutoRenewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disableDomainTransferLockSignalFull(OAIHttpRequestWorker *worker, OAIDisableDomainTransferLockResponse summary);
    void disassociateDelegationSignerFromDomainSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateDelegationSignerFromDomainResponse summary);
    void enableDomainAutoRenewSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void enableDomainTransferLockSignalFull(OAIHttpRequestWorker *worker, OAIEnableDomainTransferLockResponse summary);
    void getContactReachabilityStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetContactReachabilityStatusResponse summary);
    void getDomainDetailSignalFull(OAIHttpRequestWorker *worker, OAIGetDomainDetailResponse summary);
    void getDomainSuggestionsSignalFull(OAIHttpRequestWorker *worker, OAIGetDomainSuggestionsResponse summary);
    void getOperationDetailSignalFull(OAIHttpRequestWorker *worker, OAIGetOperationDetailResponse summary);
    void listDomainsSignalFull(OAIHttpRequestWorker *worker, OAIListDomainsResponse summary);
    void listOperationsSignalFull(OAIHttpRequestWorker *worker, OAIListOperationsResponse summary);
    void listPricesSignalFull(OAIHttpRequestWorker *worker, OAIListPricesResponse summary);
    void listTagsForDomainSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForDomainResponse summary);
    void pushDomainSignalFull(OAIHttpRequestWorker *worker);
    void registerDomainSignalFull(OAIHttpRequestWorker *worker, OAIRegisterDomainResponse summary);
    void rejectDomainTransferFromAnotherAwsAccountSignalFull(OAIHttpRequestWorker *worker, OAIRejectDomainTransferFromAnotherAwsAccountResponse summary);
    void renewDomainSignalFull(OAIHttpRequestWorker *worker, OAIRenewDomainResponse summary);
    void resendContactReachabilityEmailSignalFull(OAIHttpRequestWorker *worker, OAIResendContactReachabilityEmailResponse summary);
    void resendOperationAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void retrieveDomainAuthCodeSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveDomainAuthCodeResponse summary);
    void transferDomainSignalFull(OAIHttpRequestWorker *worker, OAITransferDomainResponse summary);
    void transferDomainToAnotherAwsAccountSignalFull(OAIHttpRequestWorker *worker, OAITransferDomainToAnotherAwsAccountResponse summary);
    void updateDomainContactSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDomainContactResponse summary);
    void updateDomainContactPrivacySignalFull(OAIHttpRequestWorker *worker, OAIUpdateDomainContactPrivacyResponse summary);
    void updateDomainNameserversSignalFull(OAIHttpRequestWorker *worker, OAIUpdateDomainNameserversResponse summary);
    void updateTagsForDomainSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void viewBillingSignalFull(OAIHttpRequestWorker *worker, OAIViewBillingResponse summary);

    Q_DECL_DEPRECATED_X("Use acceptDomainTransferFromAnotherAwsAccountSignalError() instead")
    void acceptDomainTransferFromAnotherAwsAccountSignalE(OAIAcceptDomainTransferFromAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptDomainTransferFromAnotherAwsAccountSignalError(OAIAcceptDomainTransferFromAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateDelegationSignerToDomainSignalError() instead")
    void associateDelegationSignerToDomainSignalE(OAIAssociateDelegationSignerToDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateDelegationSignerToDomainSignalError(OAIAssociateDelegationSignerToDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelDomainTransferToAnotherAwsAccountSignalError() instead")
    void cancelDomainTransferToAnotherAwsAccountSignalE(OAICancelDomainTransferToAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelDomainTransferToAnotherAwsAccountSignalError(OAICancelDomainTransferToAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkDomainAvailabilitySignalError() instead")
    void checkDomainAvailabilitySignalE(OAICheckDomainAvailabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainAvailabilitySignalError(OAICheckDomainAvailabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkDomainTransferabilitySignalError() instead")
    void checkDomainTransferabilitySignalE(OAICheckDomainTransferabilityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainTransferabilitySignalError(OAICheckDomainTransferabilityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainSignalError() instead")
    void deleteDomainSignalE(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainSignalError(OAIDeleteDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTagsForDomainSignalError() instead")
    void deleteTagsForDomainSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTagsForDomainSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableDomainAutoRenewSignalError() instead")
    void disableDomainAutoRenewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableDomainAutoRenewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableDomainTransferLockSignalError() instead")
    void disableDomainTransferLockSignalE(OAIDisableDomainTransferLockResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableDomainTransferLockSignalError(OAIDisableDomainTransferLockResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateDelegationSignerFromDomainSignalError() instead")
    void disassociateDelegationSignerFromDomainSignalE(OAIDisassociateDelegationSignerFromDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateDelegationSignerFromDomainSignalError(OAIDisassociateDelegationSignerFromDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableDomainAutoRenewSignalError() instead")
    void enableDomainAutoRenewSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableDomainAutoRenewSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableDomainTransferLockSignalError() instead")
    void enableDomainTransferLockSignalE(OAIEnableDomainTransferLockResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableDomainTransferLockSignalError(OAIEnableDomainTransferLockResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactReachabilityStatusSignalError() instead")
    void getContactReachabilityStatusSignalE(OAIGetContactReachabilityStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactReachabilityStatusSignalError(OAIGetContactReachabilityStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDetailSignalError() instead")
    void getDomainDetailSignalE(OAIGetDomainDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDetailSignalError(OAIGetDomainDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainSuggestionsSignalError() instead")
    void getDomainSuggestionsSignalE(OAIGetDomainSuggestionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainSuggestionsSignalError(OAIGetDomainSuggestionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationDetailSignalError() instead")
    void getOperationDetailSignalE(OAIGetOperationDetailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationDetailSignalError(OAIGetOperationDetailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainsSignalError() instead")
    void listDomainsSignalE(OAIListDomainsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainsSignalError(OAIListDomainsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsSignalError() instead")
    void listOperationsSignalE(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsSignalError(OAIListOperationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPricesSignalError() instead")
    void listPricesSignalE(OAIListPricesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPricesSignalError(OAIListPricesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForDomainSignalError() instead")
    void listTagsForDomainSignalE(OAIListTagsForDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForDomainSignalError(OAIListTagsForDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pushDomainSignalError() instead")
    void pushDomainSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pushDomainSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerDomainSignalError() instead")
    void registerDomainSignalE(OAIRegisterDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerDomainSignalError(OAIRegisterDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectDomainTransferFromAnotherAwsAccountSignalError() instead")
    void rejectDomainTransferFromAnotherAwsAccountSignalE(OAIRejectDomainTransferFromAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectDomainTransferFromAnotherAwsAccountSignalError(OAIRejectDomainTransferFromAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewDomainSignalError() instead")
    void renewDomainSignalE(OAIRenewDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void renewDomainSignalError(OAIRenewDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendContactReachabilityEmailSignalError() instead")
    void resendContactReachabilityEmailSignalE(OAIResendContactReachabilityEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resendContactReachabilityEmailSignalError(OAIResendContactReachabilityEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendOperationAuthorizationSignalError() instead")
    void resendOperationAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resendOperationAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveDomainAuthCodeSignalError() instead")
    void retrieveDomainAuthCodeSignalE(OAIRetrieveDomainAuthCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveDomainAuthCodeSignalError(OAIRetrieveDomainAuthCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferDomainSignalError() instead")
    void transferDomainSignalE(OAITransferDomainResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferDomainSignalError(OAITransferDomainResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferDomainToAnotherAwsAccountSignalError() instead")
    void transferDomainToAnotherAwsAccountSignalE(OAITransferDomainToAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferDomainToAnotherAwsAccountSignalError(OAITransferDomainToAnotherAwsAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainContactSignalError() instead")
    void updateDomainContactSignalE(OAIUpdateDomainContactResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainContactSignalError(OAIUpdateDomainContactResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainContactPrivacySignalError() instead")
    void updateDomainContactPrivacySignalE(OAIUpdateDomainContactPrivacyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainContactPrivacySignalError(OAIUpdateDomainContactPrivacyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainNameserversSignalError() instead")
    void updateDomainNameserversSignalE(OAIUpdateDomainNameserversResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainNameserversSignalError(OAIUpdateDomainNameserversResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagsForDomainSignalError() instead")
    void updateTagsForDomainSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagsForDomainSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewBillingSignalError() instead")
    void viewBillingSignalE(OAIViewBillingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void viewBillingSignalError(OAIViewBillingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptDomainTransferFromAnotherAwsAccountSignalErrorFull() instead")
    void acceptDomainTransferFromAnotherAwsAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptDomainTransferFromAnotherAwsAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateDelegationSignerToDomainSignalErrorFull() instead")
    void associateDelegationSignerToDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateDelegationSignerToDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelDomainTransferToAnotherAwsAccountSignalErrorFull() instead")
    void cancelDomainTransferToAnotherAwsAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelDomainTransferToAnotherAwsAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkDomainAvailabilitySignalErrorFull() instead")
    void checkDomainAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkDomainTransferabilitySignalErrorFull() instead")
    void checkDomainTransferabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkDomainTransferabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDomainSignalErrorFull() instead")
    void deleteDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTagsForDomainSignalErrorFull() instead")
    void deleteTagsForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTagsForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableDomainAutoRenewSignalErrorFull() instead")
    void disableDomainAutoRenewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableDomainAutoRenewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableDomainTransferLockSignalErrorFull() instead")
    void disableDomainTransferLockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableDomainTransferLockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateDelegationSignerFromDomainSignalErrorFull() instead")
    void disassociateDelegationSignerFromDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateDelegationSignerFromDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableDomainAutoRenewSignalErrorFull() instead")
    void enableDomainAutoRenewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableDomainAutoRenewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableDomainTransferLockSignalErrorFull() instead")
    void enableDomainTransferLockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableDomainTransferLockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContactReachabilityStatusSignalErrorFull() instead")
    void getContactReachabilityStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContactReachabilityStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainDetailSignalErrorFull() instead")
    void getDomainDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDomainSuggestionsSignalErrorFull() instead")
    void getDomainSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomainSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOperationDetailSignalErrorFull() instead")
    void getOperationDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOperationDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDomainsSignalErrorFull() instead")
    void listDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listOperationsSignalErrorFull() instead")
    void listOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPricesSignalErrorFull() instead")
    void listPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForDomainSignalErrorFull() instead")
    void listTagsForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pushDomainSignalErrorFull() instead")
    void pushDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pushDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerDomainSignalErrorFull() instead")
    void registerDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectDomainTransferFromAnotherAwsAccountSignalErrorFull() instead")
    void rejectDomainTransferFromAnotherAwsAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectDomainTransferFromAnotherAwsAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renewDomainSignalErrorFull() instead")
    void renewDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renewDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendContactReachabilityEmailSignalErrorFull() instead")
    void resendContactReachabilityEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendContactReachabilityEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resendOperationAuthorizationSignalErrorFull() instead")
    void resendOperationAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resendOperationAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveDomainAuthCodeSignalErrorFull() instead")
    void retrieveDomainAuthCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveDomainAuthCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferDomainSignalErrorFull() instead")
    void transferDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferDomainToAnotherAwsAccountSignalErrorFull() instead")
    void transferDomainToAnotherAwsAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferDomainToAnotherAwsAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainContactSignalErrorFull() instead")
    void updateDomainContactSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainContactSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainContactPrivacySignalErrorFull() instead")
    void updateDomainContactPrivacySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainContactPrivacySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDomainNameserversSignalErrorFull() instead")
    void updateDomainNameserversSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDomainNameserversSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTagsForDomainSignalErrorFull() instead")
    void updateTagsForDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTagsForDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use viewBillingSignalErrorFull() instead")
    void viewBillingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void viewBillingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
