/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainTransferability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainTransferability::OAIDomainTransferability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainTransferability::OAIDomainTransferability() {
    this->initializeModel();
}

OAIDomainTransferability::~OAIDomainTransferability() {}

void OAIDomainTransferability::initializeModel() {

    m_transferable_isSet = false;
    m_transferable_isValid = false;
}

void OAIDomainTransferability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainTransferability::fromJsonObject(QJsonObject json) {

    m_transferable_isValid = ::OpenAPI::fromJsonValue(m_transferable, json[QString("Transferable")]);
    m_transferable_isSet = !json[QString("Transferable")].isNull() && m_transferable_isValid;
}

QString OAIDomainTransferability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainTransferability::asJsonObject() const {
    QJsonObject obj;
    if (m_transferable.isSet()) {
        obj.insert(QString("Transferable"), ::OpenAPI::toJsonValue(m_transferable));
    }
    return obj;
}

OAITransferable OAIDomainTransferability::getTransferable() const {
    return m_transferable;
}
void OAIDomainTransferability::setTransferable(const OAITransferable &transferable) {
    m_transferable = transferable;
    m_transferable_isSet = true;
}

bool OAIDomainTransferability::is_transferable_Set() const{
    return m_transferable_isSet;
}

bool OAIDomainTransferability::is_transferable_Valid() const{
    return m_transferable_isValid;
}

bool OAIDomainTransferability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transferable.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainTransferability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
