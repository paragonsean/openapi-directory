/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtraParamName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtraParamName::OAIExtraParamName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtraParamName::OAIExtraParamName() {
    this->initializeModel();
}

OAIExtraParamName::~OAIExtraParamName() {}

void OAIExtraParamName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIExtraParamName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIExtraParamName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DUNS_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::DUNS_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BRAND_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::BRAND_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIRTH_DEPARTMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::BIRTH_DEPARTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIRTH_DATE_IN_YYYY_MM_DD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::BIRTH_DATE_IN_YYYY_MM_DD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIRTH_COUNTRY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::BIRTH_COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BIRTH_CITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::BIRTH_CITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOCUMENT_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::DOCUMENT_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AU_ID_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::AU_ID_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AU_ID_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::AU_ID_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA_LEGAL_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::CA_LEGAL_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA_BUSINESS_ENTITY_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::CA_BUSINESS_ENTITY_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA_LEGAL_REPRESENTATIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::CA_LEGAL_REPRESENTATIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CA_LEGAL_REPRESENTATIVE_CAPACITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::CA_LEGAL_REPRESENTATIVE_CAPACITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES_IDENTIFICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::ES_IDENTIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES_IDENTIFICATION_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::ES_IDENTIFICATION_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ES_LEGAL_FORM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::ES_LEGAL_FORM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI_BUSINESS_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::FI_BUSINESS_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI_ID_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::FI_ID_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI_NATIONALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::FI_NATIONALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FI_ORGANIZATION_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::FI_ORGANIZATION_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT_NATIONALITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::IT_NATIONALITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT_PIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::IT_PIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IT_REGISTRANT_ENTITY_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::IT_REGISTRANT_ENTITY_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RU_PASSPORT_DATA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::RU_PASSPORT_DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SE_ID_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::SE_ID_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SG_ID_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::SG_ID_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VAT_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::VAT_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UK_CONTACT_TYPE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::UK_CONTACT_TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UK_COMPANY_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::UK_COMPANY_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EU_COUNTRY_OF_CITIZENSHIP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::EU_COUNTRY_OF_CITIZENSHIP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AU_PRIORITY_TOKEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIExtraParamName::AU_PRIORITY_TOKEN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIExtraParamName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIExtraParamName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIExtraParamName::DUNS_NUMBER:
            val = "DUNS_NUMBER";
            break;
        case eOAIExtraParamName::BRAND_NUMBER:
            val = "BRAND_NUMBER";
            break;
        case eOAIExtraParamName::BIRTH_DEPARTMENT:
            val = "BIRTH_DEPARTMENT";
            break;
        case eOAIExtraParamName::BIRTH_DATE_IN_YYYY_MM_DD:
            val = "BIRTH_DATE_IN_YYYY_MM_DD";
            break;
        case eOAIExtraParamName::BIRTH_COUNTRY:
            val = "BIRTH_COUNTRY";
            break;
        case eOAIExtraParamName::BIRTH_CITY:
            val = "BIRTH_CITY";
            break;
        case eOAIExtraParamName::DOCUMENT_NUMBER:
            val = "DOCUMENT_NUMBER";
            break;
        case eOAIExtraParamName::AU_ID_NUMBER:
            val = "AU_ID_NUMBER";
            break;
        case eOAIExtraParamName::AU_ID_TYPE:
            val = "AU_ID_TYPE";
            break;
        case eOAIExtraParamName::CA_LEGAL_TYPE:
            val = "CA_LEGAL_TYPE";
            break;
        case eOAIExtraParamName::CA_BUSINESS_ENTITY_TYPE:
            val = "CA_BUSINESS_ENTITY_TYPE";
            break;
        case eOAIExtraParamName::CA_LEGAL_REPRESENTATIVE:
            val = "CA_LEGAL_REPRESENTATIVE";
            break;
        case eOAIExtraParamName::CA_LEGAL_REPRESENTATIVE_CAPACITY:
            val = "CA_LEGAL_REPRESENTATIVE_CAPACITY";
            break;
        case eOAIExtraParamName::ES_IDENTIFICATION:
            val = "ES_IDENTIFICATION";
            break;
        case eOAIExtraParamName::ES_IDENTIFICATION_TYPE:
            val = "ES_IDENTIFICATION_TYPE";
            break;
        case eOAIExtraParamName::ES_LEGAL_FORM:
            val = "ES_LEGAL_FORM";
            break;
        case eOAIExtraParamName::FI_BUSINESS_NUMBER:
            val = "FI_BUSINESS_NUMBER";
            break;
        case eOAIExtraParamName::FI_ID_NUMBER:
            val = "FI_ID_NUMBER";
            break;
        case eOAIExtraParamName::FI_NATIONALITY:
            val = "FI_NATIONALITY";
            break;
        case eOAIExtraParamName::FI_ORGANIZATION_TYPE:
            val = "FI_ORGANIZATION_TYPE";
            break;
        case eOAIExtraParamName::IT_NATIONALITY:
            val = "IT_NATIONALITY";
            break;
        case eOAIExtraParamName::IT_PIN:
            val = "IT_PIN";
            break;
        case eOAIExtraParamName::IT_REGISTRANT_ENTITY_TYPE:
            val = "IT_REGISTRANT_ENTITY_TYPE";
            break;
        case eOAIExtraParamName::RU_PASSPORT_DATA:
            val = "RU_PASSPORT_DATA";
            break;
        case eOAIExtraParamName::SE_ID_NUMBER:
            val = "SE_ID_NUMBER";
            break;
        case eOAIExtraParamName::SG_ID_NUMBER:
            val = "SG_ID_NUMBER";
            break;
        case eOAIExtraParamName::VAT_NUMBER:
            val = "VAT_NUMBER";
            break;
        case eOAIExtraParamName::UK_CONTACT_TYPE:
            val = "UK_CONTACT_TYPE";
            break;
        case eOAIExtraParamName::UK_COMPANY_NUMBER:
            val = "UK_COMPANY_NUMBER";
            break;
        case eOAIExtraParamName::EU_COUNTRY_OF_CITIZENSHIP:
            val = "EU_COUNTRY_OF_CITIZENSHIP";
            break;
        case eOAIExtraParamName::AU_PRIORITY_TOKEN:
            val = "AU_PRIORITY_TOKEN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIExtraParamName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIExtraParamName::eOAIExtraParamName OAIExtraParamName::getValue() const {
    return m_value;
}

void OAIExtraParamName::setValue(const OAIExtraParamName::eOAIExtraParamName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIExtraParamName::isSet() const {
    
    return m_value_isSet;
}

bool OAIExtraParamName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
