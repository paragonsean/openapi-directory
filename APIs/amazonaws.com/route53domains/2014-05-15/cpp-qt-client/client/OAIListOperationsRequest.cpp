/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOperationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOperationsRequest::OAIListOperationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOperationsRequest::OAIListOperationsRequest() {
    this->initializeModel();
}

OAIListOperationsRequest::~OAIListOperationsRequest() {}

void OAIListOperationsRequest::initializeModel() {

    m_submitted_since_isSet = false;
    m_submitted_since_isValid = false;

    m_marker_isSet = false;
    m_marker_isValid = false;

    m_max_items_isSet = false;
    m_max_items_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListOperationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOperationsRequest::fromJsonObject(QJsonObject json) {

    m_submitted_since_isValid = ::OpenAPI::fromJsonValue(m_submitted_since, json[QString("SubmittedSince")]);
    m_submitted_since_isSet = !json[QString("SubmittedSince")].isNull() && m_submitted_since_isValid;

    m_marker_isValid = ::OpenAPI::fromJsonValue(m_marker, json[QString("Marker")]);
    m_marker_isSet = !json[QString("Marker")].isNull() && m_marker_isValid;

    m_max_items_isValid = ::OpenAPI::fromJsonValue(m_max_items, json[QString("MaxItems")]);
    m_max_items_isSet = !json[QString("MaxItems")].isNull() && m_max_items_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListOperationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOperationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_submitted_since_isSet) {
        obj.insert(QString("SubmittedSince"), ::OpenAPI::toJsonValue(m_submitted_since));
    }
    if (m_marker_isSet) {
        obj.insert(QString("Marker"), ::OpenAPI::toJsonValue(m_marker));
    }
    if (m_max_items_isSet) {
        obj.insert(QString("MaxItems"), ::OpenAPI::toJsonValue(m_max_items));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_sort_by.isSet()) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QDateTime OAIListOperationsRequest::getSubmittedSince() const {
    return m_submitted_since;
}
void OAIListOperationsRequest::setSubmittedSince(const QDateTime &submitted_since) {
    m_submitted_since = submitted_since;
    m_submitted_since_isSet = true;
}

bool OAIListOperationsRequest::is_submitted_since_Set() const{
    return m_submitted_since_isSet;
}

bool OAIListOperationsRequest::is_submitted_since_Valid() const{
    return m_submitted_since_isValid;
}

QString OAIListOperationsRequest::getMarker() const {
    return m_marker;
}
void OAIListOperationsRequest::setMarker(const QString &marker) {
    m_marker = marker;
    m_marker_isSet = true;
}

bool OAIListOperationsRequest::is_marker_Set() const{
    return m_marker_isSet;
}

bool OAIListOperationsRequest::is_marker_Valid() const{
    return m_marker_isValid;
}

qint32 OAIListOperationsRequest::getMaxItems() const {
    return m_max_items;
}
void OAIListOperationsRequest::setMaxItems(const qint32 &max_items) {
    m_max_items = max_items;
    m_max_items_isSet = true;
}

bool OAIListOperationsRequest::is_max_items_Set() const{
    return m_max_items_isSet;
}

bool OAIListOperationsRequest::is_max_items_Valid() const{
    return m_max_items_isValid;
}

QList OAIListOperationsRequest::getStatus() const {
    return m_status;
}
void OAIListOperationsRequest::setStatus(const QList &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListOperationsRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListOperationsRequest::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIListOperationsRequest::getType() const {
    return m_type;
}
void OAIListOperationsRequest::setType(const QList &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListOperationsRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListOperationsRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIListOperationsSortAttributeName OAIListOperationsRequest::getSortBy() const {
    return m_sort_by;
}
void OAIListOperationsRequest::setSortBy(const OAIListOperationsSortAttributeName &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListOperationsRequest::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListOperationsRequest::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListOperationsRequest::getSortOrder() const {
    return m_sort_order;
}
void OAIListOperationsRequest::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListOperationsRequest::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListOperationsRequest::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListOperationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_submitted_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_marker_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOperationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
