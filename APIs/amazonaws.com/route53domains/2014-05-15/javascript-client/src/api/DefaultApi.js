/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptDomainTransferFromAnotherAwsAccountRequest from '../model/AcceptDomainTransferFromAnotherAwsAccountRequest';
import AcceptDomainTransferFromAnotherAwsAccountResponse from '../model/AcceptDomainTransferFromAnotherAwsAccountResponse';
import AssociateDelegationSignerToDomainRequest from '../model/AssociateDelegationSignerToDomainRequest';
import AssociateDelegationSignerToDomainResponse from '../model/AssociateDelegationSignerToDomainResponse';
import CancelDomainTransferToAnotherAwsAccountRequest from '../model/CancelDomainTransferToAnotherAwsAccountRequest';
import CancelDomainTransferToAnotherAwsAccountResponse from '../model/CancelDomainTransferToAnotherAwsAccountResponse';
import CheckDomainAvailabilityRequest from '../model/CheckDomainAvailabilityRequest';
import CheckDomainAvailabilityResponse from '../model/CheckDomainAvailabilityResponse';
import CheckDomainTransferabilityRequest from '../model/CheckDomainTransferabilityRequest';
import CheckDomainTransferabilityResponse from '../model/CheckDomainTransferabilityResponse';
import DeleteDomainRequest from '../model/DeleteDomainRequest';
import DeleteDomainResponse from '../model/DeleteDomainResponse';
import DeleteTagsForDomainRequest from '../model/DeleteTagsForDomainRequest';
import DisableDomainAutoRenewRequest from '../model/DisableDomainAutoRenewRequest';
import DisableDomainTransferLockRequest from '../model/DisableDomainTransferLockRequest';
import DisableDomainTransferLockResponse from '../model/DisableDomainTransferLockResponse';
import DisassociateDelegationSignerFromDomainRequest from '../model/DisassociateDelegationSignerFromDomainRequest';
import DisassociateDelegationSignerFromDomainResponse from '../model/DisassociateDelegationSignerFromDomainResponse';
import EnableDomainAutoRenewRequest from '../model/EnableDomainAutoRenewRequest';
import EnableDomainTransferLockRequest from '../model/EnableDomainTransferLockRequest';
import EnableDomainTransferLockResponse from '../model/EnableDomainTransferLockResponse';
import GetContactReachabilityStatusRequest from '../model/GetContactReachabilityStatusRequest';
import GetContactReachabilityStatusResponse from '../model/GetContactReachabilityStatusResponse';
import GetDomainDetailRequest from '../model/GetDomainDetailRequest';
import GetDomainDetailResponse from '../model/GetDomainDetailResponse';
import GetDomainSuggestionsRequest from '../model/GetDomainSuggestionsRequest';
import GetDomainSuggestionsResponse from '../model/GetDomainSuggestionsResponse';
import GetOperationDetailRequest from '../model/GetOperationDetailRequest';
import GetOperationDetailResponse from '../model/GetOperationDetailResponse';
import ListDomainsRequest from '../model/ListDomainsRequest';
import ListDomainsResponse from '../model/ListDomainsResponse';
import ListOperationsRequest from '../model/ListOperationsRequest';
import ListOperationsResponse from '../model/ListOperationsResponse';
import ListPricesRequest from '../model/ListPricesRequest';
import ListPricesResponse from '../model/ListPricesResponse';
import ListTagsForDomainRequest from '../model/ListTagsForDomainRequest';
import ListTagsForDomainResponse from '../model/ListTagsForDomainResponse';
import PushDomainRequest from '../model/PushDomainRequest';
import RegisterDomainRequest from '../model/RegisterDomainRequest';
import RegisterDomainResponse from '../model/RegisterDomainResponse';
import RejectDomainTransferFromAnotherAwsAccountRequest from '../model/RejectDomainTransferFromAnotherAwsAccountRequest';
import RejectDomainTransferFromAnotherAwsAccountResponse from '../model/RejectDomainTransferFromAnotherAwsAccountResponse';
import RenewDomainRequest from '../model/RenewDomainRequest';
import RenewDomainResponse from '../model/RenewDomainResponse';
import ResendContactReachabilityEmailRequest from '../model/ResendContactReachabilityEmailRequest';
import ResendContactReachabilityEmailResponse from '../model/ResendContactReachabilityEmailResponse';
import ResendOperationAuthorizationRequest from '../model/ResendOperationAuthorizationRequest';
import RetrieveDomainAuthCodeRequest from '../model/RetrieveDomainAuthCodeRequest';
import RetrieveDomainAuthCodeResponse from '../model/RetrieveDomainAuthCodeResponse';
import TransferDomainRequest from '../model/TransferDomainRequest';
import TransferDomainResponse from '../model/TransferDomainResponse';
import TransferDomainToAnotherAwsAccountRequest from '../model/TransferDomainToAnotherAwsAccountRequest';
import TransferDomainToAnotherAwsAccountResponse from '../model/TransferDomainToAnotherAwsAccountResponse';
import UpdateDomainContactPrivacyRequest from '../model/UpdateDomainContactPrivacyRequest';
import UpdateDomainContactPrivacyResponse from '../model/UpdateDomainContactPrivacyResponse';
import UpdateDomainContactRequest from '../model/UpdateDomainContactRequest';
import UpdateDomainContactResponse from '../model/UpdateDomainContactResponse';
import UpdateDomainNameserversRequest from '../model/UpdateDomainNameserversRequest';
import UpdateDomainNameserversResponse from '../model/UpdateDomainNameserversResponse';
import UpdateTagsForDomainRequest from '../model/UpdateTagsForDomainRequest';
import ViewBillingRequest from '../model/ViewBillingRequest';
import ViewBillingResponse from '../model/ViewBillingResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2014-05-15
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptDomainTransferFromAnotherAwsAccount operation.
     * @callback module:api/DefaultApi~acceptDomainTransferFromAnotherAwsAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptDomainTransferFromAnotherAwsAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Accepts the transfer of a domain from another Amazon Web Services account to the currentAmazon Web Services account. You initiate a transfer between Amazon Web Services accounts using <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\">TransferDomainToAnotherAwsAccount</a>.</p> <p>If you use the CLI command at <a href=\"https://docs.aws.amazon.com/cli/latest/reference/route53domains/accept-domain-transfer-from-another-aws-account.html\">accept-domain-transfer-from-another-aws-account</a>, use JSON format as input instead of text because otherwise CLI will throw an error from domain transfer input that includes single quotes.</p> <p>Use either <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\">ListOperations</a> or <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> to determine whether the operation succeeded. <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AcceptDomainTransferFromAnotherAwsAccountRequest} acceptDomainTransferFromAnotherAwsAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptDomainTransferFromAnotherAwsAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptDomainTransferFromAnotherAwsAccountResponse}
     */
    acceptDomainTransferFromAnotherAwsAccount(xAmzTarget, acceptDomainTransferFromAnotherAwsAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = acceptDomainTransferFromAnotherAwsAccountRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling acceptDomainTransferFromAnotherAwsAccount");
      }
      // verify the required parameter 'acceptDomainTransferFromAnotherAwsAccountRequest' is set
      if (acceptDomainTransferFromAnotherAwsAccountRequest === undefined || acceptDomainTransferFromAnotherAwsAccountRequest === null) {
        throw new Error("Missing the required parameter 'acceptDomainTransferFromAnotherAwsAccountRequest' when calling acceptDomainTransferFromAnotherAwsAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AcceptDomainTransferFromAnotherAwsAccountResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.AcceptDomainTransferFromAnotherAwsAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateDelegationSignerToDomain operation.
     * @callback module:api/DefaultApi~associateDelegationSignerToDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociateDelegationSignerToDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Creates a delegation signer (DS) record in the registry zone for this domain name.</p> <p>Note that creating DS record at the registry impacts DNSSEC validation of your DNS records. This action may render your domain name unavailable on the internet if the steps are completed in the wrong order, or with incorrect timing. For more information about DNSSEC signing, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html\">Configuring DNSSEC signing</a> in the <i>Route 53 developer guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AssociateDelegationSignerToDomainRequest} associateDelegationSignerToDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateDelegationSignerToDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociateDelegationSignerToDomainResponse}
     */
    associateDelegationSignerToDomain(xAmzTarget, associateDelegationSignerToDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateDelegationSignerToDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling associateDelegationSignerToDomain");
      }
      // verify the required parameter 'associateDelegationSignerToDomainRequest' is set
      if (associateDelegationSignerToDomainRequest === undefined || associateDelegationSignerToDomainRequest === null) {
        throw new Error("Missing the required parameter 'associateDelegationSignerToDomainRequest' when calling associateDelegationSignerToDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssociateDelegationSignerToDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.AssociateDelegationSignerToDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelDomainTransferToAnotherAwsAccount operation.
     * @callback module:api/DefaultApi~cancelDomainTransferToAnotherAwsAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelDomainTransferToAnotherAwsAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Cancels the transfer of a domain from the current Amazon Web Services account to another Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\">TransferDomainToAnotherAwsAccount</a>. </p> <important> <p>You must cancel the transfer before the other Amazon Web Services account accepts the transfer using <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\">AcceptDomainTransferFromAnotherAwsAccount</a>.</p> </important> <p>Use either <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\">ListOperations</a> or <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> to determine whether the operation succeeded. <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CancelDomainTransferToAnotherAwsAccountRequest} cancelDomainTransferToAnotherAwsAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelDomainTransferToAnotherAwsAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelDomainTransferToAnotherAwsAccountResponse}
     */
    cancelDomainTransferToAnotherAwsAccount(xAmzTarget, cancelDomainTransferToAnotherAwsAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelDomainTransferToAnotherAwsAccountRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling cancelDomainTransferToAnotherAwsAccount");
      }
      // verify the required parameter 'cancelDomainTransferToAnotherAwsAccountRequest' is set
      if (cancelDomainTransferToAnotherAwsAccountRequest === undefined || cancelDomainTransferToAnotherAwsAccountRequest === null) {
        throw new Error("Missing the required parameter 'cancelDomainTransferToAnotherAwsAccountRequest' when calling cancelDomainTransferToAnotherAwsAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelDomainTransferToAnotherAwsAccountResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.CancelDomainTransferToAnotherAwsAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkDomainAvailability operation.
     * @callback module:api/DefaultApi~checkDomainAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDomainAvailabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation checks the availability of one domain name. Note that if the availability status of a domain is pending, you must submit another request to determine the availability of the domain name.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CheckDomainAvailabilityRequest} checkDomainAvailabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~checkDomainAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDomainAvailabilityResponse}
     */
    checkDomainAvailability(xAmzTarget, checkDomainAvailabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = checkDomainAvailabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling checkDomainAvailability");
      }
      // verify the required parameter 'checkDomainAvailabilityRequest' is set
      if (checkDomainAvailabilityRequest === undefined || checkDomainAvailabilityRequest === null) {
        throw new Error("Missing the required parameter 'checkDomainAvailabilityRequest' when calling checkDomainAvailability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckDomainAvailabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.CheckDomainAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkDomainTransferability operation.
     * @callback module:api/DefaultApi~checkDomainTransferabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckDomainTransferabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether a domain name can be transferred to Amazon Route 53. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CheckDomainTransferabilityRequest} checkDomainTransferabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~checkDomainTransferabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckDomainTransferabilityResponse}
     */
    checkDomainTransferability(xAmzTarget, checkDomainTransferabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = checkDomainTransferabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling checkDomainTransferability");
      }
      // verify the required parameter 'checkDomainTransferabilityRequest' is set
      if (checkDomainTransferabilityRequest === undefined || checkDomainTransferabilityRequest === null) {
        throw new Error("Missing the required parameter 'checkDomainTransferabilityRequest' when calling checkDomainTransferability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckDomainTransferabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.CheckDomainTransferability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DefaultApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation deletes the specified domain. This action is permanent. For more information, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-delete.html\">Deleting a domain name registration</a>.</p> <p>To transfer the domain registration to another registrar, use the transfer process that’s provided by the registrar to which you want to transfer the registration. Otherwise, the following apply:</p> <ol> <li> <p>You can’t get a refund for the cost of a deleted domain registration.</p> </li> <li> <p>The registry for the top-level domain might hold the domain name for a brief time before releasing it for other users to register (varies by registry). </p> </li> <li> <p>When the registration has been deleted, we'll send you a confirmation to the registrant contact. The email will come from <code>noreply@domainnameverification.net</code> or <code>noreply@registrar.amazon.com</code>.</p> </li> </ol>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDomainRequest} deleteDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    deleteDomain(xAmzTarget, deleteDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDomain");
      }
      // verify the required parameter 'deleteDomainRequest' is set
      if (deleteDomainRequest === undefined || deleteDomainRequest === null) {
        throw new Error("Missing the required parameter 'deleteDomainRequest' when calling deleteDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.DeleteDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTagsForDomain operation.
     * @callback module:api/DefaultApi~deleteTagsForDomainCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation deletes the specified tags for a domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteTagsForDomainRequest} deleteTagsForDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteTagsForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteTagsForDomain(xAmzTarget, deleteTagsForDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteTagsForDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteTagsForDomain");
      }
      // verify the required parameter 'deleteTagsForDomainRequest' is set
      if (deleteTagsForDomainRequest === undefined || deleteTagsForDomainRequest === null) {
        throw new Error("Missing the required parameter 'deleteTagsForDomainRequest' when calling deleteTagsForDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.DeleteTagsForDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableDomainAutoRenew operation.
     * @callback module:api/DefaultApi~disableDomainAutoRenewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation disables automatic renewal of domain registration for the specified domain.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisableDomainAutoRenewRequest} disableDomainAutoRenewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableDomainAutoRenewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disableDomainAutoRenew(xAmzTarget, disableDomainAutoRenewRequest, opts, callback) {
      opts = opts || {};
      let postBody = disableDomainAutoRenewRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disableDomainAutoRenew");
      }
      // verify the required parameter 'disableDomainAutoRenewRequest' is set
      if (disableDomainAutoRenewRequest === undefined || disableDomainAutoRenewRequest === null) {
        throw new Error("Missing the required parameter 'disableDomainAutoRenewRequest' when calling disableDomainAutoRenew");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.DisableDomainAutoRenew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableDomainTransferLock operation.
     * @callback module:api/DefaultApi~disableDomainTransferLockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableDomainTransferLockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation removes the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to allow domain transfers. We recommend you refrain from performing this action unless you intend to transfer the domain to a different registrar. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisableDomainTransferLockRequest} disableDomainTransferLockRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disableDomainTransferLockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableDomainTransferLockResponse}
     */
    disableDomainTransferLock(xAmzTarget, disableDomainTransferLockRequest, opts, callback) {
      opts = opts || {};
      let postBody = disableDomainTransferLockRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disableDomainTransferLock");
      }
      // verify the required parameter 'disableDomainTransferLockRequest' is set
      if (disableDomainTransferLockRequest === undefined || disableDomainTransferLockRequest === null) {
        throw new Error("Missing the required parameter 'disableDomainTransferLockRequest' when calling disableDomainTransferLock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisableDomainTransferLockResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.DisableDomainTransferLock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateDelegationSignerFromDomain operation.
     * @callback module:api/DefaultApi~disassociateDelegationSignerFromDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisassociateDelegationSignerFromDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a delegation signer (DS) record in the registry zone for this domain name.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateDelegationSignerFromDomainRequest} disassociateDelegationSignerFromDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateDelegationSignerFromDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisassociateDelegationSignerFromDomainResponse}
     */
    disassociateDelegationSignerFromDomain(xAmzTarget, disassociateDelegationSignerFromDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateDelegationSignerFromDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateDelegationSignerFromDomain");
      }
      // verify the required parameter 'disassociateDelegationSignerFromDomainRequest' is set
      if (disassociateDelegationSignerFromDomainRequest === undefined || disassociateDelegationSignerFromDomainRequest === null) {
        throw new Error("Missing the required parameter 'disassociateDelegationSignerFromDomainRequest' when calling disassociateDelegationSignerFromDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisassociateDelegationSignerFromDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.DisassociateDelegationSignerFromDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableDomainAutoRenew operation.
     * @callback module:api/DefaultApi~enableDomainAutoRenewCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation configures Amazon Route 53 to automatically renew the specified domain before the domain registration expires. The cost of renewing your domain registration is billed to your Amazon Web Services account.</p> <p>The period during which you can renew a domain name varies by TLD. For a list of TLDs and their renewal policies, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar-tld-list.html\">Domains That You Can Register with Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>. Route 53 requires that you renew before the end of the renewal period so we can complete processing before the deadline.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/EnableDomainAutoRenewRequest} enableDomainAutoRenewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableDomainAutoRenewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    enableDomainAutoRenew(xAmzTarget, enableDomainAutoRenewRequest, opts, callback) {
      opts = opts || {};
      let postBody = enableDomainAutoRenewRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling enableDomainAutoRenew");
      }
      // verify the required parameter 'enableDomainAutoRenewRequest' is set
      if (enableDomainAutoRenewRequest === undefined || enableDomainAutoRenewRequest === null) {
        throw new Error("Missing the required parameter 'enableDomainAutoRenewRequest' when calling enableDomainAutoRenew");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.EnableDomainAutoRenew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableDomainTransferLock operation.
     * @callback module:api/DefaultApi~enableDomainTransferLockCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableDomainTransferLockResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation sets the transfer lock on the domain (specifically the <code>clientTransferProhibited</code> status) to prevent domain transfers. Successful submission returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/EnableDomainTransferLockRequest} enableDomainTransferLockRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~enableDomainTransferLockCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableDomainTransferLockResponse}
     */
    enableDomainTransferLock(xAmzTarget, enableDomainTransferLockRequest, opts, callback) {
      opts = opts || {};
      let postBody = enableDomainTransferLockRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling enableDomainTransferLock");
      }
      // verify the required parameter 'enableDomainTransferLockRequest' is set
      if (enableDomainTransferLockRequest === undefined || enableDomainTransferLockRequest === null) {
        throw new Error("Missing the required parameter 'enableDomainTransferLockRequest' when calling enableDomainTransferLock");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnableDomainTransferLockResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.EnableDomainTransferLock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactReachabilityStatus operation.
     * @callback module:api/DefaultApi~getContactReachabilityStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetContactReachabilityStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation returns information about whether the registrant contact has responded.</p> <p>If you want us to resend the email, use the <code>ResendContactReachabilityEmail</code> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetContactReachabilityStatusRequest} getContactReachabilityStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getContactReachabilityStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetContactReachabilityStatusResponse}
     */
    getContactReachabilityStatus(xAmzTarget, getContactReachabilityStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = getContactReachabilityStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getContactReachabilityStatus");
      }
      // verify the required parameter 'getContactReachabilityStatusRequest' is set
      if (getContactReachabilityStatusRequest === undefined || getContactReachabilityStatusRequest === null) {
        throw new Error("Missing the required parameter 'getContactReachabilityStatusRequest' when calling getContactReachabilityStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetContactReachabilityStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.GetContactReachabilityStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainDetail operation.
     * @callback module:api/DefaultApi~getDomainDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns detailed information about a specified domain that is associated with the current Amazon Web Services account. Contact information for the domain is also returned as part of the output.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDomainDetailRequest} getDomainDetailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainDetailResponse}
     */
    getDomainDetail(xAmzTarget, getDomainDetailRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDomainDetailRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDomainDetail");
      }
      // verify the required parameter 'getDomainDetailRequest' is set
      if (getDomainDetailRequest === undefined || getDomainDetailRequest === null) {
        throw new Error("Missing the required parameter 'getDomainDetailRequest' when calling getDomainDetail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDomainDetailResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.GetDomainDetail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainSuggestions operation.
     * @callback module:api/DefaultApi~getDomainSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainSuggestionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The GetDomainSuggestions operation returns a list of suggested domain names.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetDomainSuggestionsRequest} getDomainSuggestionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainSuggestionsResponse}
     */
    getDomainSuggestions(xAmzTarget, getDomainSuggestionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDomainSuggestionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getDomainSuggestions");
      }
      // verify the required parameter 'getDomainSuggestionsRequest' is set
      if (getDomainSuggestionsRequest === undefined || getDomainSuggestionsRequest === null) {
        throw new Error("Missing the required parameter 'getDomainSuggestionsRequest' when calling getDomainSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDomainSuggestionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.GetDomainSuggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperationDetail operation.
     * @callback module:api/DefaultApi~getOperationDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOperationDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns the current status of an operation that is not completed.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetOperationDetailRequest} getOperationDetailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOperationDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOperationDetailResponse}
     */
    getOperationDetail(xAmzTarget, getOperationDetailRequest, opts, callback) {
      opts = opts || {};
      let postBody = getOperationDetailRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getOperationDetail");
      }
      // verify the required parameter 'getOperationDetailRequest' is set
      if (getOperationDetailRequest === undefined || getOperationDetailRequest === null) {
        throw new Error("Missing the required parameter 'getOperationDetailRequest' when calling getOperationDetail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOperationDetailResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.GetOperationDetail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomains operation.
     * @callback module:api/DefaultApi~listDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account if no filtering conditions are used.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDomainsRequest} listDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxItems] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:api/DefaultApi~listDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsResponse}
     */
    listDomains(xAmzTarget, listDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDomainsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDomains");
      }
      // verify the required parameter 'listDomainsRequest' is set
      if (listDomainsRequest === undefined || listDomainsRequest === null) {
        throw new Error("Missing the required parameter 'listDomainsRequest' when calling listDomains");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxItems': opts['maxItems'],
        'Marker': opts['marker']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDomainsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ListDomains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOperations operation.
     * @callback module:api/DefaultApi~listOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about all of the operations that return an operation ID and that have ever been performed on domains that were registered by the current account. </p> <p>This command runs only in the us-east-1 Region.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListOperationsRequest} listOperationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxItems] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:api/DefaultApi~listOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOperationsResponse}
     */
    listOperations(xAmzTarget, listOperationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOperationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listOperations");
      }
      // verify the required parameter 'listOperationsRequest' is set
      if (listOperationsRequest === undefined || listOperationsRequest === null) {
        throw new Error("Missing the required parameter 'listOperationsRequest' when calling listOperations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxItems': opts['maxItems'],
        'Marker': opts['marker']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOperationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ListOperations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPrices operation.
     * @callback module:api/DefaultApi~listPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists the following prices for either all the TLDs supported by Route 53, or the specified TLD:</p> <ul> <li> <p>Registration</p> </li> <li> <p>Transfer</p> </li> <li> <p>Owner change</p> </li> <li> <p>Domain renewal</p> </li> <li> <p>Domain restoration</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPricesRequest} listPricesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxItems] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:api/DefaultApi~listPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPricesResponse}
     */
    listPrices(xAmzTarget, listPricesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPricesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPrices");
      }
      // verify the required parameter 'listPricesRequest' is set
      if (listPricesRequest === undefined || listPricesRequest === null) {
        throw new Error("Missing the required parameter 'listPricesRequest' when calling listPrices");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxItems': opts['maxItems'],
        'Marker': opts['marker']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPricesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ListPrices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForDomain operation.
     * @callback module:api/DefaultApi~listTagsForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation returns all of the tags that are associated with the specified domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForDomainRequest} listTagsForDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForDomainResponse}
     */
    listTagsForDomain(xAmzTarget, listTagsForDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForDomain");
      }
      // verify the required parameter 'listTagsForDomainRequest' is set
      if (listTagsForDomainRequest === undefined || listTagsForDomainRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForDomainRequest' when calling listTagsForDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ListTagsForDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pushDomain operation.
     * @callback module:api/DefaultApi~pushDomainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p> Moves a domain from Amazon Web Services to another registrar. </p> <p>Supported actions:</p> <ul> <li> <p>Changes the IPS tags of a .uk domain, and pushes it to transit. Transit means that the domain is ready to be transferred to another registrar.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PushDomainRequest} pushDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~pushDomainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pushDomain(xAmzTarget, pushDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = pushDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling pushDomain");
      }
      // verify the required parameter 'pushDomainRequest' is set
      if (pushDomainRequest === undefined || pushDomainRequest === null) {
        throw new Error("Missing the required parameter 'pushDomainRequest' when calling pushDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.PushDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerDomain operation.
     * @callback module:api/DefaultApi~registerDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation registers a domain. For some top-level domains (TLDs), this operation requires extra parameters.</p> <p>When you register a domain, Amazon Route 53 does the following:</p> <ul> <li> <p>Creates a Route 53 hosted zone that has the same name as the domain. Route 53 assigns four name servers to your hosted zone and automatically updates your domain registration with the names of these name servers.</p> </li> <li> <p>Enables auto renew, so your domain registration will renew automatically each year. We'll notify you in advance of the renewal date so you can choose whether to renew the registration.</p> </li> <li> <p>Optionally enables privacy protection, so WHOIS queries return contact for the registrar or the phrase \"REDACTED FOR PRIVACY\", or \"On behalf of &lt;domain name&gt; owner.\" If you don't enable privacy protection, WHOIS queries return the information that you entered for the administrative, registrant, and technical contacts.</p> <note> <p>While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.</p> </note> </li> <li> <p>If registration is successful, returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant is notified by email.</p> </li> <li> <p>Charges your Amazon Web Services account an amount based on the top-level domain. For more information, see <a href=\"http://aws.amazon.com/route53/pricing/\">Amazon Route 53 Pricing</a>.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RegisterDomainRequest} registerDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterDomainResponse}
     */
    registerDomain(xAmzTarget, registerDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling registerDomain");
      }
      // verify the required parameter 'registerDomainRequest' is set
      if (registerDomainRequest === undefined || registerDomainRequest === null) {
        throw new Error("Missing the required parameter 'registerDomainRequest' when calling registerDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.RegisterDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectDomainTransferFromAnotherAwsAccount operation.
     * @callback module:api/DefaultApi~rejectDomainTransferFromAnotherAwsAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RejectDomainTransferFromAnotherAwsAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Rejects the transfer of a domain from another Amazon Web Services account to the current Amazon Web Services account. You initiate a transfer betweenAmazon Web Services accounts using <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\">TransferDomainToAnotherAwsAccount</a>. </p> <p>Use either <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\">ListOperations</a> or <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> to determine whether the operation succeeded. <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RejectDomainTransferFromAnotherAwsAccountRequest} rejectDomainTransferFromAnotherAwsAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectDomainTransferFromAnotherAwsAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RejectDomainTransferFromAnotherAwsAccountResponse}
     */
    rejectDomainTransferFromAnotherAwsAccount(xAmzTarget, rejectDomainTransferFromAnotherAwsAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = rejectDomainTransferFromAnotherAwsAccountRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling rejectDomainTransferFromAnotherAwsAccount");
      }
      // verify the required parameter 'rejectDomainTransferFromAnotherAwsAccountRequest' is set
      if (rejectDomainTransferFromAnotherAwsAccountRequest === undefined || rejectDomainTransferFromAnotherAwsAccountRequest === null) {
        throw new Error("Missing the required parameter 'rejectDomainTransferFromAnotherAwsAccountRequest' when calling rejectDomainTransferFromAnotherAwsAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RejectDomainTransferFromAnotherAwsAccountResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.RejectDomainTransferFromAnotherAwsAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renewDomain operation.
     * @callback module:api/DefaultApi~renewDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenewDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation renews a domain for the specified number of years. The cost of renewing your domain is billed to your Amazon Web Services account.</p> <p>We recommend that you renew your domain several weeks before the expiration date. Some TLD registries delete domains before the expiration date if you haven't renewed far enough in advance. For more information about renewing domain registration, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-renew.html\">Renewing Registration for a Domain</a> in the <i>Amazon Route 53 Developer Guide</i>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RenewDomainRequest} renewDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~renewDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenewDomainResponse}
     */
    renewDomain(xAmzTarget, renewDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = renewDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling renewDomain");
      }
      // verify the required parameter 'renewDomainRequest' is set
      if (renewDomainRequest === undefined || renewDomainRequest === null) {
        throw new Error("Missing the required parameter 'renewDomainRequest' when calling renewDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RenewDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.RenewDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendContactReachabilityEmail operation.
     * @callback module:api/DefaultApi~resendContactReachabilityEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResendContactReachabilityEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * For operations that require confirmation that the email address for the registrant contact is valid, such as registering a new domain, this operation resends the confirmation email to the current email address for the registrant contact.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ResendContactReachabilityEmailRequest} resendContactReachabilityEmailRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resendContactReachabilityEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResendContactReachabilityEmailResponse}
     */
    resendContactReachabilityEmail(xAmzTarget, resendContactReachabilityEmailRequest, opts, callback) {
      opts = opts || {};
      let postBody = resendContactReachabilityEmailRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling resendContactReachabilityEmail");
      }
      // verify the required parameter 'resendContactReachabilityEmailRequest' is set
      if (resendContactReachabilityEmailRequest === undefined || resendContactReachabilityEmailRequest === null) {
        throw new Error("Missing the required parameter 'resendContactReachabilityEmailRequest' when calling resendContactReachabilityEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResendContactReachabilityEmailResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ResendContactReachabilityEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resendOperationAuthorization operation.
     * @callback module:api/DefaultApi~resendOperationAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Resend the form of authorization email for this operation. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ResendOperationAuthorizationRequest} resendOperationAuthorizationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resendOperationAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resendOperationAuthorization(xAmzTarget, resendOperationAuthorizationRequest, opts, callback) {
      opts = opts || {};
      let postBody = resendOperationAuthorizationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling resendOperationAuthorization");
      }
      // verify the required parameter 'resendOperationAuthorizationRequest' is set
      if (resendOperationAuthorizationRequest === undefined || resendOperationAuthorizationRequest === null) {
        throw new Error("Missing the required parameter 'resendOperationAuthorizationRequest' when calling resendOperationAuthorization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ResendOperationAuthorization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retrieveDomainAuthCode operation.
     * @callback module:api/DefaultApi~retrieveDomainAuthCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrieveDomainAuthCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns the authorization code for the domain. To transfer a domain to another registrar, you provide this value to the new registrar.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/RetrieveDomainAuthCodeRequest} retrieveDomainAuthCodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~retrieveDomainAuthCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrieveDomainAuthCodeResponse}
     */
    retrieveDomainAuthCode(xAmzTarget, retrieveDomainAuthCodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = retrieveDomainAuthCodeRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling retrieveDomainAuthCode");
      }
      // verify the required parameter 'retrieveDomainAuthCodeRequest' is set
      if (retrieveDomainAuthCodeRequest === undefined || retrieveDomainAuthCodeRequest === null) {
        throw new Error("Missing the required parameter 'retrieveDomainAuthCodeRequest' when calling retrieveDomainAuthCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RetrieveDomainAuthCodeResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.RetrieveDomainAuthCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferDomain operation.
     * @callback module:api/DefaultApi~transferDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Transfers a domain from another registrar to Amazon Route 53. </p> <p>For more information about transferring domains, see the following topics:</p> <ul> <li> <p>For transfer requirements, a detailed procedure, and information about viewing the status of a domain that you're transferring to Route 53, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-to-route-53.html\">Transferring Registration for a Domain to Amazon Route 53</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> <li> <p>For information about how to transfer a domain from one Amazon Web Services account to another, see <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_TransferDomainToAnotherAwsAccount.html\">TransferDomainToAnotherAwsAccount</a>. </p> </li> <li> <p>For information about how to transfer a domain to another domain registrar, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/domain-transfer-from-route-53.html\">Transferring a Domain from Amazon Route 53 to Another Registrar</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </li> </ul> <p>If the registrar for your domain is also the DNS service provider for the domain, we highly recommend that you transfer your DNS service to Route 53 or to another DNS service provider before you transfer your registration. Some registrars provide free DNS service when you purchase a domain registration. When you transfer the registration, the previous registrar will not renew your domain registration and could end your DNS service at any time.</p> <important> <p>If the registrar for your domain is also the DNS service provider for the domain and you don't transfer DNS service to another provider, your website, email, and the web applications associated with the domain might become unavailable.</p> </important> <p>If the transfer is successful, this method returns an operation ID that you can use to track the progress and completion of the action. If the transfer doesn't complete successfully, the domain registrant will be notified by email.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TransferDomainRequest} transferDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~transferDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferDomainResponse}
     */
    transferDomain(xAmzTarget, transferDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = transferDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling transferDomain");
      }
      // verify the required parameter 'transferDomainRequest' is set
      if (transferDomainRequest === undefined || transferDomainRequest === null) {
        throw new Error("Missing the required parameter 'transferDomainRequest' when calling transferDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferDomainResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.TransferDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferDomainToAnotherAwsAccount operation.
     * @callback module:api/DefaultApi~transferDomainToAnotherAwsAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferDomainToAnotherAwsAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Transfers a domain from the current Amazon Web Services account to another Amazon Web Services account. Note the following:</p> <ul> <li> <p>The Amazon Web Services account that you're transferring the domain to must accept the transfer. If the other account doesn't accept the transfer within 3 days, we cancel the transfer. See <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_AcceptDomainTransferFromAnotherAwsAccount.html\">AcceptDomainTransferFromAnotherAwsAccount</a>. </p> </li> <li> <p>You can cancel the transfer before the other account accepts it. See <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_CancelDomainTransferToAnotherAwsAccount.html\">CancelDomainTransferToAnotherAwsAccount</a>. </p> </li> <li> <p>The other account can reject the transfer. See <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_RejectDomainTransferFromAnotherAwsAccount.html\">RejectDomainTransferFromAnotherAwsAccount</a>. </p> </li> </ul> <important> <p>When you transfer a domain from one Amazon Web Services account to another, Route 53 doesn't transfer the hosted zone that is associated with the domain. DNS resolution isn't affected if the domain and the hosted zone are owned by separate accounts, so transferring the hosted zone is optional. For information about transferring the hosted zone to another Amazon Web Services account, see <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-migrating.html\">Migrating a Hosted Zone to a Different Amazon Web Services Account</a> in the <i>Amazon Route 53 Developer Guide</i>.</p> </important> <p>Use either <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_ListOperations.html\">ListOperations</a> or <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> to determine whether the operation succeeded. <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> provides additional information, for example, <code>Domain Transfer from Aws Account 111122223333 has been cancelled</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TransferDomainToAnotherAwsAccountRequest} transferDomainToAnotherAwsAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~transferDomainToAnotherAwsAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferDomainToAnotherAwsAccountResponse}
     */
    transferDomainToAnotherAwsAccount(xAmzTarget, transferDomainToAnotherAwsAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = transferDomainToAnotherAwsAccountRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling transferDomainToAnotherAwsAccount");
      }
      // verify the required parameter 'transferDomainToAnotherAwsAccountRequest' is set
      if (transferDomainToAnotherAwsAccountRequest === undefined || transferDomainToAnotherAwsAccountRequest === null) {
        throw new Error("Missing the required parameter 'transferDomainToAnotherAwsAccountRequest' when calling transferDomainToAnotherAwsAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferDomainToAnotherAwsAccountResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.TransferDomainToAnotherAwsAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainContact operation.
     * @callback module:api/DefaultApi~updateDomainContactCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainContactResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation updates the contact information for a particular domain. You must specify information for at least one contact: registrant, administrator, or technical.</p> <p>If the update is successful, this method returns an operation ID that you can use to track the progress and completion of the operation. If the request is not completed successfully, the domain registrant will be notified by email.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDomainContactRequest} updateDomainContactRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainContactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainContactResponse}
     */
    updateDomainContact(xAmzTarget, updateDomainContactRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainContactRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDomainContact");
      }
      // verify the required parameter 'updateDomainContactRequest' is set
      if (updateDomainContactRequest === undefined || updateDomainContactRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainContactRequest' when calling updateDomainContact");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainContactResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContact', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainContactPrivacy operation.
     * @callback module:api/DefaultApi~updateDomainContactPrivacyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainContactPrivacyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation updates the specified domain contact's privacy setting. When privacy protection is enabled, your contact information is replaced with contact information for the registrar or with the phrase \"REDACTED FOR PRIVACY\", or \"On behalf of &lt;domain name&gt; owner.\"</p> <note> <p>While some domains may allow different privacy settings per contact, we recommend specifying the same privacy setting for all contacts.</p> </note> <p>This operation affects only the contact information for the specified contact type (administrative, registrant, or technical). If the request succeeds, Amazon Route 53 returns an operation ID that you can use with <a href=\"https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_GetOperationDetail.html\">GetOperationDetail</a> to track the progress and completion of the action. If the request doesn't complete successfully, the domain registrant will be notified by email.</p> <important> <p>By disabling the privacy service via API, you consent to the publication of the contact information provided for this domain via the public WHOIS database. You certify that you are the registrant of this domain name and have the authority to make this decision. You may withdraw your consent at any time by enabling privacy protection using either <code>UpdateDomainContactPrivacy</code> or the Route 53 console. Enabling privacy protection removes the contact information provided for this domain from the WHOIS database. For more information on our privacy practices, see <a href=\"https://aws.amazon.com/privacy/\">https://aws.amazon.com/privacy/</a>.</p> </important>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDomainContactPrivacyRequest} updateDomainContactPrivacyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainContactPrivacyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainContactPrivacyResponse}
     */
    updateDomainContactPrivacy(xAmzTarget, updateDomainContactPrivacyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainContactPrivacyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDomainContactPrivacy");
      }
      // verify the required parameter 'updateDomainContactPrivacyRequest' is set
      if (updateDomainContactPrivacyRequest === undefined || updateDomainContactPrivacyRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainContactPrivacyRequest' when calling updateDomainContactPrivacy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainContactPrivacyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainContactPrivacy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainNameservers operation.
     * @callback module:api/DefaultApi~updateDomainNameserversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainNameserversResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.</p> <p>If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDomainNameserversRequest} updateDomainNameserversRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainNameserversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainNameserversResponse}
     */
    updateDomainNameservers(xAmzTarget, updateDomainNameserversRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainNameserversRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDomainNameservers");
      }
      // verify the required parameter 'updateDomainNameserversRequest' is set
      if (updateDomainNameserversRequest === undefined || updateDomainNameserversRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainNameserversRequest' when calling updateDomainNameservers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainNameserversResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.UpdateDomainNameservers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTagsForDomain operation.
     * @callback module:api/DefaultApi~updateTagsForDomainCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation adds or updates tags for a specified domain.</p> <p>All tag operations are eventually consistent; subsequent operations might not immediately represent all issued operations.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateTagsForDomainRequest} updateTagsForDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTagsForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTagsForDomain(xAmzTarget, updateTagsForDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTagsForDomainRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateTagsForDomain");
      }
      // verify the required parameter 'updateTagsForDomainRequest' is set
      if (updateTagsForDomainRequest === undefined || updateTagsForDomainRequest === null) {
        throw new Error("Missing the required parameter 'updateTagsForDomainRequest' when calling updateTagsForDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.UpdateTagsForDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the viewBilling operation.
     * @callback module:api/DefaultApi~viewBillingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewBillingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the domain-related billing records for the current Amazon Web Services account for a specified period
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ViewBillingRequest} viewBillingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxItems] Pagination limit
     * @param {String} [marker] Pagination token
     * @param {module:api/DefaultApi~viewBillingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewBillingResponse}
     */
    viewBilling(xAmzTarget, viewBillingRequest, opts, callback) {
      opts = opts || {};
      let postBody = viewBillingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling viewBilling");
      }
      // verify the required parameter 'viewBillingRequest' is set
      if (viewBillingRequest === undefined || viewBillingRequest === null) {
        throw new Error("Missing the required parameter 'viewBillingRequest' when calling viewBilling");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxItems': opts['maxItems'],
        'Marker': opts['marker']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ViewBillingResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=Route53Domains_v20140515.ViewBilling', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
