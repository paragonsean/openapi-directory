/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateDomainNameserversRequest model module.
 * @module model/UpdateDomainNameserversRequest
 * @version 2014-05-15
 */
class UpdateDomainNameserversRequest {
    /**
     * Constructs a new <code>UpdateDomainNameserversRequest</code>.
     * &lt;p&gt;Replaces the current set of name servers for the domain with the specified set of name servers. If you use Amazon Route 53 as your DNS service, specify the four name servers in the delegation set for the hosted zone for the domain.&lt;/p&gt; &lt;p&gt;If successful, this operation returns an operation ID that you can use to track the progress and completion of the action. If the request is not completed successfully, the domain registrant will be notified by email. &lt;/p&gt;
     * @alias module:model/UpdateDomainNameserversRequest
     * @param domainName {String} 
     * @param nameservers {Array} 
     */
    constructor(domainName, nameservers) { 
        
        UpdateDomainNameserversRequest.initialize(this, domainName, nameservers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName, nameservers) { 
        obj['DomainName'] = domainName;
        obj['Nameservers'] = nameservers;
    }

    /**
     * Constructs a <code>UpdateDomainNameserversRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateDomainNameserversRequest} obj Optional instance to populate.
     * @return {module:model/UpdateDomainNameserversRequest} The populated <code>UpdateDomainNameserversRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateDomainNameserversRequest();

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('FIAuthKey')) {
                obj['FIAuthKey'] = ApiClient.convertToType(data['FIAuthKey'], 'String');
            }
            if (data.hasOwnProperty('Nameservers')) {
                obj['Nameservers'] = ApiClient.convertToType(data['Nameservers'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateDomainNameserversRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateDomainNameserversRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateDomainNameserversRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `FIAuthKey`
        if (data['FIAuthKey']) { // data not null
          String.validateJSON(data['FIAuthKey']);
        }
        // validate the optional field `Nameservers`
        if (data['Nameservers']) { // data not null
          Array.validateJSON(data['Nameservers']);
        }

        return true;
    }


}

UpdateDomainNameserversRequest.RequiredProperties = ["DomainName", "Nameservers"];

/**
 * @member {String} DomainName
 */
UpdateDomainNameserversRequest.prototype['DomainName'] = undefined;

/**
 * @member {String} FIAuthKey
 */
UpdateDomainNameserversRequest.prototype['FIAuthKey'] = undefined;

/**
 * @member {Array} Nameservers
 */
UpdateDomainNameserversRequest.prototype['Nameservers'] = undefined;






export default UpdateDomainNameserversRequest;

