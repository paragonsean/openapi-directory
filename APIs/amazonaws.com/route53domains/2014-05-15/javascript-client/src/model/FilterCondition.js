/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ListDomainsAttributeName from './ListDomainsAttributeName';
import Operator from './Operator';

/**
 * The FilterCondition model module.
 * @module model/FilterCondition
 * @version 2014-05-15
 */
class FilterCondition {
    /**
     * Constructs a new <code>FilterCondition</code>.
     * Information for the filtering of a list of domains returned by &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains__ListDomains.html\&quot;&gt;ListDomains&lt;/a&gt;.
     * @alias module:model/FilterCondition
     * @param name {module:model/ListDomainsAttributeName} 
     * @param operator {module:model/Operator} 
     * @param values {Array} 
     */
    constructor(name, operator, values) { 
        
        FilterCondition.initialize(this, name, operator, values);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, operator, values) { 
        obj['Name'] = name;
        obj['Operator'] = operator;
        obj['Values'] = values;
    }

    /**
     * Constructs a <code>FilterCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FilterCondition} obj Optional instance to populate.
     * @return {module:model/FilterCondition} The populated <code>FilterCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FilterCondition();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], ListDomainsAttributeName);
            }
            if (data.hasOwnProperty('Operator')) {
                obj['Operator'] = ApiClient.convertToType(data['Operator'], Operator);
            }
            if (data.hasOwnProperty('Values')) {
                obj['Values'] = ApiClient.convertToType(data['Values'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FilterCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FilterCondition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FilterCondition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          ListDomainsAttributeName.validateJSON(data['Name']);
        }
        // validate the optional field `Operator`
        if (data['Operator']) { // data not null
          Operator.validateJSON(data['Operator']);
        }
        // validate the optional field `Values`
        if (data['Values']) { // data not null
          Array.validateJSON(data['Values']);
        }

        return true;
    }


}

FilterCondition.RequiredProperties = ["Name", "Operator", "Values"];

/**
 * @member {module:model/ListDomainsAttributeName} Name
 */
FilterCondition.prototype['Name'] = undefined;

/**
 * @member {module:model/Operator} Operator
 */
FilterCondition.prototype['Operator'] = undefined;

/**
 * @member {Array} Values
 */
FilterCondition.prototype['Values'] = undefined;






export default FilterCondition;

