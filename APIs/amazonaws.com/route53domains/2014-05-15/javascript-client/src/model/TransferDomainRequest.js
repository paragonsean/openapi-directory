/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferDomainRequestAdminContact from './TransferDomainRequestAdminContact';

/**
 * The TransferDomainRequest model module.
 * @module model/TransferDomainRequest
 * @version 2014-05-15
 */
class TransferDomainRequest {
    /**
     * Constructs a new <code>TransferDomainRequest</code>.
     * The TransferDomain request includes the following elements.
     * @alias module:model/TransferDomainRequest
     * @param domainName {String} 
     * @param durationInYears {Number} 
     * @param adminContact {module:model/TransferDomainRequestAdminContact} 
     * @param registrantContact {module:model/TransferDomainRequestAdminContact} 
     * @param techContact {module:model/TransferDomainRequestAdminContact} 
     */
    constructor(domainName, durationInYears, adminContact, registrantContact, techContact) { 
        
        TransferDomainRequest.initialize(this, domainName, durationInYears, adminContact, registrantContact, techContact);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, domainName, durationInYears, adminContact, registrantContact, techContact) { 
        obj['DomainName'] = domainName;
        obj['DurationInYears'] = durationInYears;
        obj['AdminContact'] = adminContact;
        obj['RegistrantContact'] = registrantContact;
        obj['TechContact'] = techContact;
    }

    /**
     * Constructs a <code>TransferDomainRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferDomainRequest} obj Optional instance to populate.
     * @return {module:model/TransferDomainRequest} The populated <code>TransferDomainRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferDomainRequest();

            if (data.hasOwnProperty('DomainName')) {
                obj['DomainName'] = ApiClient.convertToType(data['DomainName'], 'String');
            }
            if (data.hasOwnProperty('IdnLangCode')) {
                obj['IdnLangCode'] = ApiClient.convertToType(data['IdnLangCode'], 'String');
            }
            if (data.hasOwnProperty('DurationInYears')) {
                obj['DurationInYears'] = ApiClient.convertToType(data['DurationInYears'], 'Number');
            }
            if (data.hasOwnProperty('Nameservers')) {
                obj['Nameservers'] = ApiClient.convertToType(data['Nameservers'], Array);
            }
            if (data.hasOwnProperty('AuthCode')) {
                obj['AuthCode'] = ApiClient.convertToType(data['AuthCode'], 'String');
            }
            if (data.hasOwnProperty('AutoRenew')) {
                obj['AutoRenew'] = ApiClient.convertToType(data['AutoRenew'], 'Boolean');
            }
            if (data.hasOwnProperty('AdminContact')) {
                obj['AdminContact'] = TransferDomainRequestAdminContact.constructFromObject(data['AdminContact']);
            }
            if (data.hasOwnProperty('RegistrantContact')) {
                obj['RegistrantContact'] = TransferDomainRequestAdminContact.constructFromObject(data['RegistrantContact']);
            }
            if (data.hasOwnProperty('TechContact')) {
                obj['TechContact'] = TransferDomainRequestAdminContact.constructFromObject(data['TechContact']);
            }
            if (data.hasOwnProperty('PrivacyProtectAdminContact')) {
                obj['PrivacyProtectAdminContact'] = ApiClient.convertToType(data['PrivacyProtectAdminContact'], 'Boolean');
            }
            if (data.hasOwnProperty('PrivacyProtectRegistrantContact')) {
                obj['PrivacyProtectRegistrantContact'] = ApiClient.convertToType(data['PrivacyProtectRegistrantContact'], 'Boolean');
            }
            if (data.hasOwnProperty('PrivacyProtectTechContact')) {
                obj['PrivacyProtectTechContact'] = ApiClient.convertToType(data['PrivacyProtectTechContact'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferDomainRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferDomainRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransferDomainRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DomainName`
        if (data['DomainName']) { // data not null
          String.validateJSON(data['DomainName']);
        }
        // validate the optional field `IdnLangCode`
        if (data['IdnLangCode']) { // data not null
          String.validateJSON(data['IdnLangCode']);
        }
        // validate the optional field `DurationInYears`
        if (data['DurationInYears']) { // data not null
          Number.validateJSON(data['DurationInYears']);
        }
        // validate the optional field `Nameservers`
        if (data['Nameservers']) { // data not null
          Array.validateJSON(data['Nameservers']);
        }
        // validate the optional field `AuthCode`
        if (data['AuthCode']) { // data not null
          String.validateJSON(data['AuthCode']);
        }
        // validate the optional field `AutoRenew`
        if (data['AutoRenew']) { // data not null
          Boolean.validateJSON(data['AutoRenew']);
        }
        // validate the optional field `AdminContact`
        if (data['AdminContact']) { // data not null
          TransferDomainRequestAdminContact.validateJSON(data['AdminContact']);
        }
        // validate the optional field `RegistrantContact`
        if (data['RegistrantContact']) { // data not null
          TransferDomainRequestAdminContact.validateJSON(data['RegistrantContact']);
        }
        // validate the optional field `TechContact`
        if (data['TechContact']) { // data not null
          TransferDomainRequestAdminContact.validateJSON(data['TechContact']);
        }
        // validate the optional field `PrivacyProtectAdminContact`
        if (data['PrivacyProtectAdminContact']) { // data not null
          Boolean.validateJSON(data['PrivacyProtectAdminContact']);
        }
        // validate the optional field `PrivacyProtectRegistrantContact`
        if (data['PrivacyProtectRegistrantContact']) { // data not null
          Boolean.validateJSON(data['PrivacyProtectRegistrantContact']);
        }
        // validate the optional field `PrivacyProtectTechContact`
        if (data['PrivacyProtectTechContact']) { // data not null
          Boolean.validateJSON(data['PrivacyProtectTechContact']);
        }

        return true;
    }


}

TransferDomainRequest.RequiredProperties = ["DomainName", "DurationInYears", "AdminContact", "RegistrantContact", "TechContact"];

/**
 * @member {String} DomainName
 */
TransferDomainRequest.prototype['DomainName'] = undefined;

/**
 * @member {String} IdnLangCode
 */
TransferDomainRequest.prototype['IdnLangCode'] = undefined;

/**
 * @member {Number} DurationInYears
 */
TransferDomainRequest.prototype['DurationInYears'] = undefined;

/**
 * @member {Array} Nameservers
 */
TransferDomainRequest.prototype['Nameservers'] = undefined;

/**
 * @member {String} AuthCode
 */
TransferDomainRequest.prototype['AuthCode'] = undefined;

/**
 * @member {Boolean} AutoRenew
 */
TransferDomainRequest.prototype['AutoRenew'] = undefined;

/**
 * @member {module:model/TransferDomainRequestAdminContact} AdminContact
 */
TransferDomainRequest.prototype['AdminContact'] = undefined;

/**
 * @member {module:model/TransferDomainRequestAdminContact} RegistrantContact
 */
TransferDomainRequest.prototype['RegistrantContact'] = undefined;

/**
 * @member {module:model/TransferDomainRequestAdminContact} TechContact
 */
TransferDomainRequest.prototype['TechContact'] = undefined;

/**
 * @member {Boolean} PrivacyProtectAdminContact
 */
TransferDomainRequest.prototype['PrivacyProtectAdminContact'] = undefined;

/**
 * @member {Boolean} PrivacyProtectRegistrantContact
 */
TransferDomainRequest.prototype['PrivacyProtectRegistrantContact'] = undefined;

/**
 * @member {Boolean} PrivacyProtectTechContact
 */
TransferDomainRequest.prototype['PrivacyProtectTechContact'] = undefined;






export default TransferDomainRequest;

