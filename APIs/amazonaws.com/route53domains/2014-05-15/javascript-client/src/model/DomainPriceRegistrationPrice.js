/**
 * Amazon Route 53 Domains
 * Amazon Route 53 API actions let you register domain names and perform related operations.
 *
 * The version of the OpenAPI document: 2014-05-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PriceWithCurrency from './PriceWithCurrency';

/**
 * The DomainPriceRegistrationPrice model module.
 * @module model/DomainPriceRegistrationPrice
 * @version 2014-05-15
 */
class DomainPriceRegistrationPrice {
    /**
     * Constructs a new <code>DomainPriceRegistrationPrice</code>.
     * @alias module:model/DomainPriceRegistrationPrice
     * @implements module:model/PriceWithCurrency
     * @param price {Number} 
     * @param currency {String} 
     */
    constructor(price, currency) { 
        PriceWithCurrency.initialize(this, price, currency);
        DomainPriceRegistrationPrice.initialize(this, price, currency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, price, currency) { 
        obj['Price'] = price;
        obj['Currency'] = currency;
    }

    /**
     * Constructs a <code>DomainPriceRegistrationPrice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainPriceRegistrationPrice} obj Optional instance to populate.
     * @return {module:model/DomainPriceRegistrationPrice} The populated <code>DomainPriceRegistrationPrice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainPriceRegistrationPrice();
            PriceWithCurrency.constructFromObject(data, obj);

            if (data.hasOwnProperty('Price')) {
                obj['Price'] = ApiClient.convertToType(data['Price'], 'Number');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainPriceRegistrationPrice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainPriceRegistrationPrice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DomainPriceRegistrationPrice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Price`
        if (data['Price']) { // data not null
          Number.validateJSON(data['Price']);
        }
        // validate the optional field `Currency`
        if (data['Currency']) { // data not null
          String.validateJSON(data['Currency']);
        }

        return true;
    }


}

DomainPriceRegistrationPrice.RequiredProperties = ["Price", "Currency"];

/**
 * @member {Number} Price
 */
DomainPriceRegistrationPrice.prototype['Price'] = undefined;

/**
 * @member {String} Currency
 */
DomainPriceRegistrationPrice.prototype['Currency'] = undefined;


// Implement PriceWithCurrency interface:
/**
 * @member {Number} Price
 */
PriceWithCurrency.prototype['Price'] = undefined;
/**
 * @member {String} Currency
 */
PriceWithCurrency.prototype['Currency'] = undefined;




export default DomainPriceRegistrationPrice;

