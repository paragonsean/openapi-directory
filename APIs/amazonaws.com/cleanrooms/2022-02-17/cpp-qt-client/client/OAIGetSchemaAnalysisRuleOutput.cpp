/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSchemaAnalysisRuleOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSchemaAnalysisRuleOutput::OAIGetSchemaAnalysisRuleOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSchemaAnalysisRuleOutput::OAIGetSchemaAnalysisRuleOutput() {
    this->initializeModel();
}

OAIGetSchemaAnalysisRuleOutput::~OAIGetSchemaAnalysisRuleOutput() {}

void OAIGetSchemaAnalysisRuleOutput::initializeModel() {

    m_analysis_rule_isSet = false;
    m_analysis_rule_isValid = false;
}

void OAIGetSchemaAnalysisRuleOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSchemaAnalysisRuleOutput::fromJsonObject(QJsonObject json) {

    m_analysis_rule_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule, json[QString("analysisRule")]);
    m_analysis_rule_isSet = !json[QString("analysisRule")].isNull() && m_analysis_rule_isValid;
}

QString OAIGetSchemaAnalysisRuleOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSchemaAnalysisRuleOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_rule.isSet()) {
        obj.insert(QString("analysisRule"), ::OpenAPI::toJsonValue(m_analysis_rule));
    }
    return obj;
}

OAIGetSchemaAnalysisRuleOutput_analysisRule OAIGetSchemaAnalysisRuleOutput::getAnalysisRule() const {
    return m_analysis_rule;
}
void OAIGetSchemaAnalysisRuleOutput::setAnalysisRule(const OAIGetSchemaAnalysisRuleOutput_analysisRule &analysis_rule) {
    m_analysis_rule = analysis_rule;
    m_analysis_rule_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput::is_analysis_rule_Set() const{
    return m_analysis_rule_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput::is_analysis_rule_Valid() const{
    return m_analysis_rule_isValid;
}

bool OAIGetSchemaAnalysisRuleOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSchemaAnalysisRuleOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_rule_isValid && true;
}

} // namespace OpenAPI
