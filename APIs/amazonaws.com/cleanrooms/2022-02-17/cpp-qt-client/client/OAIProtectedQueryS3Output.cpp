/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQueryS3Output.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQueryS3Output::OAIProtectedQueryS3Output(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQueryS3Output::OAIProtectedQueryS3Output() {
    this->initializeModel();
}

OAIProtectedQueryS3Output::~OAIProtectedQueryS3Output() {}

void OAIProtectedQueryS3Output::initializeModel() {

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIProtectedQueryS3Output::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQueryS3Output::fromJsonObject(QJsonObject json) {

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;
}

QString OAIProtectedQueryS3Output::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQueryS3Output::asJsonObject() const {
    QJsonObject obj;
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

QString OAIProtectedQueryS3Output::getLocation() const {
    return m_location;
}
void OAIProtectedQueryS3Output::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProtectedQueryS3Output::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProtectedQueryS3Output::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIProtectedQueryS3Output::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQueryS3Output::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && true;
}

} // namespace OpenAPI
