/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMembershipInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMembershipInput::OAICreateMembershipInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMembershipInput::OAICreateMembershipInput() {
    this->initializeModel();
}

OAICreateMembershipInput::~OAICreateMembershipInput() {}

void OAICreateMembershipInput::initializeModel() {

    m_collaboration_identifier_isSet = false;
    m_collaboration_identifier_isValid = false;

    m_query_log_status_isSet = false;
    m_query_log_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMembershipInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMembershipInput::fromJsonObject(QJsonObject json) {

    m_collaboration_identifier_isValid = ::OpenAPI::fromJsonValue(m_collaboration_identifier, json[QString("collaborationIdentifier")]);
    m_collaboration_identifier_isSet = !json[QString("collaborationIdentifier")].isNull() && m_collaboration_identifier_isValid;

    m_query_log_status_isValid = ::OpenAPI::fromJsonValue(m_query_log_status, json[QString("queryLogStatus")]);
    m_query_log_status_isSet = !json[QString("queryLogStatus")].isNull() && m_query_log_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateMembershipInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMembershipInput::asJsonObject() const {
    QJsonObject obj;
    if (m_collaboration_identifier_isSet) {
        obj.insert(QString("collaborationIdentifier"), ::OpenAPI::toJsonValue(m_collaboration_identifier));
    }
    if (m_query_log_status.isSet()) {
        obj.insert(QString("queryLogStatus"), ::OpenAPI::toJsonValue(m_query_log_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateMembershipInput::getCollaborationIdentifier() const {
    return m_collaboration_identifier;
}
void OAICreateMembershipInput::setCollaborationIdentifier(const QString &collaboration_identifier) {
    m_collaboration_identifier = collaboration_identifier;
    m_collaboration_identifier_isSet = true;
}

bool OAICreateMembershipInput::is_collaboration_identifier_Set() const{
    return m_collaboration_identifier_isSet;
}

bool OAICreateMembershipInput::is_collaboration_identifier_Valid() const{
    return m_collaboration_identifier_isValid;
}

OAIMembershipQueryLogStatus OAICreateMembershipInput::getQueryLogStatus() const {
    return m_query_log_status;
}
void OAICreateMembershipInput::setQueryLogStatus(const OAIMembershipQueryLogStatus &query_log_status) {
    m_query_log_status = query_log_status;
    m_query_log_status_isSet = true;
}

bool OAICreateMembershipInput::is_query_log_status_Set() const{
    return m_query_log_status_isSet;
}

bool OAICreateMembershipInput::is_query_log_status_Valid() const{
    return m_query_log_status_isValid;
}

QMap OAICreateMembershipInput::getTags() const {
    return m_tags;
}
void OAICreateMembershipInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMembershipInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMembershipInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMembershipInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaboration_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_log_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMembershipInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaboration_identifier_isValid && m_query_log_status_isValid && true;
}

} // namespace OpenAPI
