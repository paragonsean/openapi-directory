/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMembership_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMembership_request::OAICreateMembership_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMembership_request::OAICreateMembership_request() {
    this->initializeModel();
}

OAICreateMembership_request::~OAICreateMembership_request() {}

void OAICreateMembership_request::initializeModel() {

    m_collaboration_identifier_isSet = false;
    m_collaboration_identifier_isValid = false;

    m_query_log_status_isSet = false;
    m_query_log_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateMembership_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMembership_request::fromJsonObject(QJsonObject json) {

    m_collaboration_identifier_isValid = ::OpenAPI::fromJsonValue(m_collaboration_identifier, json[QString("collaborationIdentifier")]);
    m_collaboration_identifier_isSet = !json[QString("collaborationIdentifier")].isNull() && m_collaboration_identifier_isValid;

    m_query_log_status_isValid = ::OpenAPI::fromJsonValue(m_query_log_status, json[QString("queryLogStatus")]);
    m_query_log_status_isSet = !json[QString("queryLogStatus")].isNull() && m_query_log_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateMembership_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMembership_request::asJsonObject() const {
    QJsonObject obj;
    if (m_collaboration_identifier_isSet) {
        obj.insert(QString("collaborationIdentifier"), ::OpenAPI::toJsonValue(m_collaboration_identifier));
    }
    if (m_query_log_status_isSet) {
        obj.insert(QString("queryLogStatus"), ::OpenAPI::toJsonValue(m_query_log_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateMembership_request::getCollaborationIdentifier() const {
    return m_collaboration_identifier;
}
void OAICreateMembership_request::setCollaborationIdentifier(const QString &collaboration_identifier) {
    m_collaboration_identifier = collaboration_identifier;
    m_collaboration_identifier_isSet = true;
}

bool OAICreateMembership_request::is_collaboration_identifier_Set() const{
    return m_collaboration_identifier_isSet;
}

bool OAICreateMembership_request::is_collaboration_identifier_Valid() const{
    return m_collaboration_identifier_isValid;
}

QString OAICreateMembership_request::getQueryLogStatus() const {
    return m_query_log_status;
}
void OAICreateMembership_request::setQueryLogStatus(const QString &query_log_status) {
    m_query_log_status = query_log_status;
    m_query_log_status_isSet = true;
}

bool OAICreateMembership_request::is_query_log_status_Set() const{
    return m_query_log_status_isSet;
}

bool OAICreateMembership_request::is_query_log_status_Valid() const{
    return m_query_log_status_isValid;
}

QMap<QString, QString> OAICreateMembership_request::getTags() const {
    return m_tags;
}
void OAICreateMembership_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateMembership_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateMembership_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateMembership_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaboration_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_log_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMembership_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaboration_identifier_isValid && m_query_log_status_isValid && true;
}

} // namespace OpenAPI
