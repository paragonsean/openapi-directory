/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaSummary::OAISchemaSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaSummary::OAISchemaSummary() {
    this->initializeModel();
}

OAISchemaSummary::~OAISchemaSummary() {}

void OAISchemaSummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_creator_account_id_isSet = false;
    m_creator_account_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_collaboration_id_isSet = false;
    m_collaboration_id_isValid = false;

    m_collaboration_arn_isSet = false;
    m_collaboration_arn_isValid = false;

    m_analysis_rule_types_isSet = false;
    m_analysis_rule_types_isValid = false;

    m_analysis_method_isSet = false;
    m_analysis_method_isValid = false;
}

void OAISchemaSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaSummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_creator_account_id_isValid = ::OpenAPI::fromJsonValue(m_creator_account_id, json[QString("creatorAccountId")]);
    m_creator_account_id_isSet = !json[QString("creatorAccountId")].isNull() && m_creator_account_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_collaboration_id_isValid = ::OpenAPI::fromJsonValue(m_collaboration_id, json[QString("collaborationId")]);
    m_collaboration_id_isSet = !json[QString("collaborationId")].isNull() && m_collaboration_id_isValid;

    m_collaboration_arn_isValid = ::OpenAPI::fromJsonValue(m_collaboration_arn, json[QString("collaborationArn")]);
    m_collaboration_arn_isSet = !json[QString("collaborationArn")].isNull() && m_collaboration_arn_isValid;

    m_analysis_rule_types_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule_types, json[QString("analysisRuleTypes")]);
    m_analysis_rule_types_isSet = !json[QString("analysisRuleTypes")].isNull() && m_analysis_rule_types_isValid;

    m_analysis_method_isValid = ::OpenAPI::fromJsonValue(m_analysis_method, json[QString("analysisMethod")]);
    m_analysis_method_isSet = !json[QString("analysisMethod")].isNull() && m_analysis_method_isValid;
}

QString OAISchemaSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_creator_account_id_isSet) {
        obj.insert(QString("creatorAccountId"), ::OpenAPI::toJsonValue(m_creator_account_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_collaboration_id_isSet) {
        obj.insert(QString("collaborationId"), ::OpenAPI::toJsonValue(m_collaboration_id));
    }
    if (m_collaboration_arn_isSet) {
        obj.insert(QString("collaborationArn"), ::OpenAPI::toJsonValue(m_collaboration_arn));
    }
    if (m_analysis_rule_types.isSet()) {
        obj.insert(QString("analysisRuleTypes"), ::OpenAPI::toJsonValue(m_analysis_rule_types));
    }
    if (m_analysis_method.isSet()) {
        obj.insert(QString("analysisMethod"), ::OpenAPI::toJsonValue(m_analysis_method));
    }
    return obj;
}

QString OAISchemaSummary::getName() const {
    return m_name;
}
void OAISchemaSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISchemaSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAISchemaSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAISchemaType OAISchemaSummary::getType() const {
    return m_type;
}
void OAISchemaSummary::setType(const OAISchemaType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchemaSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchemaSummary::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISchemaSummary::getCreatorAccountId() const {
    return m_creator_account_id;
}
void OAISchemaSummary::setCreatorAccountId(const QString &creator_account_id) {
    m_creator_account_id = creator_account_id;
    m_creator_account_id_isSet = true;
}

bool OAISchemaSummary::is_creator_account_id_Set() const{
    return m_creator_account_id_isSet;
}

bool OAISchemaSummary::is_creator_account_id_Valid() const{
    return m_creator_account_id_isValid;
}

QDateTime OAISchemaSummary::getCreateTime() const {
    return m_create_time;
}
void OAISchemaSummary::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISchemaSummary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISchemaSummary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAISchemaSummary::getUpdateTime() const {
    return m_update_time;
}
void OAISchemaSummary::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISchemaSummary::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISchemaSummary::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAISchemaSummary::getCollaborationId() const {
    return m_collaboration_id;
}
void OAISchemaSummary::setCollaborationId(const QString &collaboration_id) {
    m_collaboration_id = collaboration_id;
    m_collaboration_id_isSet = true;
}

bool OAISchemaSummary::is_collaboration_id_Set() const{
    return m_collaboration_id_isSet;
}

bool OAISchemaSummary::is_collaboration_id_Valid() const{
    return m_collaboration_id_isValid;
}

QString OAISchemaSummary::getCollaborationArn() const {
    return m_collaboration_arn;
}
void OAISchemaSummary::setCollaborationArn(const QString &collaboration_arn) {
    m_collaboration_arn = collaboration_arn;
    m_collaboration_arn_isSet = true;
}

bool OAISchemaSummary::is_collaboration_arn_Set() const{
    return m_collaboration_arn_isSet;
}

bool OAISchemaSummary::is_collaboration_arn_Valid() const{
    return m_collaboration_arn_isValid;
}

QList OAISchemaSummary::getAnalysisRuleTypes() const {
    return m_analysis_rule_types;
}
void OAISchemaSummary::setAnalysisRuleTypes(const QList &analysis_rule_types) {
    m_analysis_rule_types = analysis_rule_types;
    m_analysis_rule_types_isSet = true;
}

bool OAISchemaSummary::is_analysis_rule_types_Set() const{
    return m_analysis_rule_types_isSet;
}

bool OAISchemaSummary::is_analysis_rule_types_Valid() const{
    return m_analysis_rule_types_isValid;
}

OAIAnalysisMethod OAISchemaSummary::getAnalysisMethod() const {
    return m_analysis_method;
}
void OAISchemaSummary::setAnalysisMethod(const OAIAnalysisMethod &analysis_method) {
    m_analysis_method = analysis_method;
    m_analysis_method_isSet = true;
}

bool OAISchemaSummary::is_analysis_method_Set() const{
    return m_analysis_method_isSet;
}

bool OAISchemaSummary::is_analysis_method_Valid() const{
    return m_analysis_method_isValid;
}

bool OAISchemaSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_rule_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_creator_account_id_isValid && m_create_time_isValid && m_update_time_isValid && m_collaboration_id_isValid && m_collaboration_arn_isValid && m_analysis_rule_types_isValid && true;
}

} // namespace OpenAPI
