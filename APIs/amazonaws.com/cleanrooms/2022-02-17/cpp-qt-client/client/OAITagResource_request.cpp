/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagResource_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagResource_request::OAITagResource_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagResource_request::OAITagResource_request() {
    this->initializeModel();
}

OAITagResource_request::~OAITagResource_request() {}

void OAITagResource_request::initializeModel() {

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITagResource_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagResource_request::fromJsonObject(QJsonObject json) {

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAITagResource_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagResource_request::asJsonObject() const {
    QJsonObject obj;
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QMap<QString, QString> OAITagResource_request::getTags() const {
    return m_tags;
}
void OAITagResource_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITagResource_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITagResource_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITagResource_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagResource_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tags_isValid && true;
}

} // namespace OpenAPI
