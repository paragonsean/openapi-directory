/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisSchema::OAIAnalysisSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisSchema::OAIAnalysisSchema() {
    this->initializeModel();
}

OAIAnalysisSchema::~OAIAnalysisSchema() {}

void OAIAnalysisSchema::initializeModel() {

    m_referenced_tables_isSet = false;
    m_referenced_tables_isValid = false;
}

void OAIAnalysisSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisSchema::fromJsonObject(QJsonObject json) {

    m_referenced_tables_isValid = ::OpenAPI::fromJsonValue(m_referenced_tables, json[QString("referencedTables")]);
    m_referenced_tables_isSet = !json[QString("referencedTables")].isNull() && m_referenced_tables_isValid;
}

QString OAIAnalysisSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_referenced_tables.isSet()) {
        obj.insert(QString("referencedTables"), ::OpenAPI::toJsonValue(m_referenced_tables));
    }
    return obj;
}

QList OAIAnalysisSchema::getReferencedTables() const {
    return m_referenced_tables;
}
void OAIAnalysisSchema::setReferencedTables(const QList &referenced_tables) {
    m_referenced_tables = referenced_tables;
    m_referenced_tables_isSet = true;
}

bool OAIAnalysisSchema::is_referenced_tables_Set() const{
    return m_referenced_tables_isSet;
}

bool OAIAnalysisSchema::is_referenced_tables_Valid() const{
    return m_referenced_tables_isValid;
}

bool OAIAnalysisSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_referenced_tables.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
