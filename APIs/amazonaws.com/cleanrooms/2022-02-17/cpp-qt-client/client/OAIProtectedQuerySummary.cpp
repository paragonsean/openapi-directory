/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQuerySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQuerySummary::OAIProtectedQuerySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQuerySummary::OAIProtectedQuerySummary() {
    this->initializeModel();
}

OAIProtectedQuerySummary::~OAIProtectedQuerySummary() {}

void OAIProtectedQuerySummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_arn_isSet = false;
    m_membership_arn_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIProtectedQuerySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQuerySummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_membership_arn_isValid = ::OpenAPI::fromJsonValue(m_membership_arn, json[QString("membershipArn")]);
    m_membership_arn_isSet = !json[QString("membershipArn")].isNull() && m_membership_arn_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIProtectedQuerySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQuerySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_arn_isSet) {
        obj.insert(QString("membershipArn"), ::OpenAPI::toJsonValue(m_membership_arn));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIProtectedQuerySummary::getId() const {
    return m_id;
}
void OAIProtectedQuerySummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProtectedQuerySummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProtectedQuerySummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProtectedQuerySummary::getMembershipId() const {
    return m_membership_id;
}
void OAIProtectedQuerySummary::setMembershipId(const QString &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIProtectedQuerySummary::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIProtectedQuerySummary::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

QString OAIProtectedQuerySummary::getMembershipArn() const {
    return m_membership_arn;
}
void OAIProtectedQuerySummary::setMembershipArn(const QString &membership_arn) {
    m_membership_arn = membership_arn;
    m_membership_arn_isSet = true;
}

bool OAIProtectedQuerySummary::is_membership_arn_Set() const{
    return m_membership_arn_isSet;
}

bool OAIProtectedQuerySummary::is_membership_arn_Valid() const{
    return m_membership_arn_isValid;
}

QDateTime OAIProtectedQuerySummary::getCreateTime() const {
    return m_create_time;
}
void OAIProtectedQuerySummary::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIProtectedQuerySummary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIProtectedQuerySummary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIProtectedQueryStatus OAIProtectedQuerySummary::getStatus() const {
    return m_status;
}
void OAIProtectedQuerySummary::setStatus(const OAIProtectedQueryStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProtectedQuerySummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProtectedQuerySummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIProtectedQuerySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQuerySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_membership_id_isValid && m_membership_arn_isValid && m_create_time_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
