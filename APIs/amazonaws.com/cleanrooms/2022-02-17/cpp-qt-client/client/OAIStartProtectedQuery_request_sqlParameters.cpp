/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartProtectedQuery_request_sqlParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartProtectedQuery_request_sqlParameters::OAIStartProtectedQuery_request_sqlParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartProtectedQuery_request_sqlParameters::OAIStartProtectedQuery_request_sqlParameters() {
    this->initializeModel();
}

OAIStartProtectedQuery_request_sqlParameters::~OAIStartProtectedQuery_request_sqlParameters() {}

void OAIStartProtectedQuery_request_sqlParameters::initializeModel() {

    m_query_string_isSet = false;
    m_query_string_isValid = false;

    m_analysis_template_arn_isSet = false;
    m_analysis_template_arn_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIStartProtectedQuery_request_sqlParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartProtectedQuery_request_sqlParameters::fromJsonObject(QJsonObject json) {

    m_query_string_isValid = ::OpenAPI::fromJsonValue(m_query_string, json[QString("queryString")]);
    m_query_string_isSet = !json[QString("queryString")].isNull() && m_query_string_isValid;

    m_analysis_template_arn_isValid = ::OpenAPI::fromJsonValue(m_analysis_template_arn, json[QString("analysisTemplateArn")]);
    m_analysis_template_arn_isSet = !json[QString("analysisTemplateArn")].isNull() && m_analysis_template_arn_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIStartProtectedQuery_request_sqlParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartProtectedQuery_request_sqlParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_query_string_isSet) {
        obj.insert(QString("queryString"), ::OpenAPI::toJsonValue(m_query_string));
    }
    if (m_analysis_template_arn_isSet) {
        obj.insert(QString("analysisTemplateArn"), ::OpenAPI::toJsonValue(m_analysis_template_arn));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIStartProtectedQuery_request_sqlParameters::getQueryString() const {
    return m_query_string;
}
void OAIStartProtectedQuery_request_sqlParameters::setQueryString(const QString &query_string) {
    m_query_string = query_string;
    m_query_string_isSet = true;
}

bool OAIStartProtectedQuery_request_sqlParameters::is_query_string_Set() const{
    return m_query_string_isSet;
}

bool OAIStartProtectedQuery_request_sqlParameters::is_query_string_Valid() const{
    return m_query_string_isValid;
}

QString OAIStartProtectedQuery_request_sqlParameters::getAnalysisTemplateArn() const {
    return m_analysis_template_arn;
}
void OAIStartProtectedQuery_request_sqlParameters::setAnalysisTemplateArn(const QString &analysis_template_arn) {
    m_analysis_template_arn = analysis_template_arn;
    m_analysis_template_arn_isSet = true;
}

bool OAIStartProtectedQuery_request_sqlParameters::is_analysis_template_arn_Set() const{
    return m_analysis_template_arn_isSet;
}

bool OAIStartProtectedQuery_request_sqlParameters::is_analysis_template_arn_Valid() const{
    return m_analysis_template_arn_isValid;
}

QMap OAIStartProtectedQuery_request_sqlParameters::getParameters() const {
    return m_parameters;
}
void OAIStartProtectedQuery_request_sqlParameters::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIStartProtectedQuery_request_sqlParameters::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIStartProtectedQuery_request_sqlParameters::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIStartProtectedQuery_request_sqlParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_template_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartProtectedQuery_request_sqlParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
