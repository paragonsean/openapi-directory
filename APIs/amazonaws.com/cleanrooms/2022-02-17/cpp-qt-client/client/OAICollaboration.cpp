/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollaboration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollaboration::OAICollaboration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollaboration::OAICollaboration() {
    this->initializeModel();
}

OAICollaboration::~OAICollaboration() {}

void OAICollaboration::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creator_account_id_isSet = false;
    m_creator_account_id_isValid = false;

    m_creator_display_name_isSet = false;
    m_creator_display_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_member_status_isSet = false;
    m_member_status_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_arn_isSet = false;
    m_membership_arn_isValid = false;

    m_data_encryption_metadata_isSet = false;
    m_data_encryption_metadata_isValid = false;

    m_query_log_status_isSet = false;
    m_query_log_status_isValid = false;
}

void OAICollaboration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollaboration::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_creator_account_id_isValid = ::OpenAPI::fromJsonValue(m_creator_account_id, json[QString("creatorAccountId")]);
    m_creator_account_id_isSet = !json[QString("creatorAccountId")].isNull() && m_creator_account_id_isValid;

    m_creator_display_name_isValid = ::OpenAPI::fromJsonValue(m_creator_display_name, json[QString("creatorDisplayName")]);
    m_creator_display_name_isSet = !json[QString("creatorDisplayName")].isNull() && m_creator_display_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_member_status_isValid = ::OpenAPI::fromJsonValue(m_member_status, json[QString("memberStatus")]);
    m_member_status_isSet = !json[QString("memberStatus")].isNull() && m_member_status_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_membership_arn_isValid = ::OpenAPI::fromJsonValue(m_membership_arn, json[QString("membershipArn")]);
    m_membership_arn_isSet = !json[QString("membershipArn")].isNull() && m_membership_arn_isValid;

    m_data_encryption_metadata_isValid = ::OpenAPI::fromJsonValue(m_data_encryption_metadata, json[QString("dataEncryptionMetadata")]);
    m_data_encryption_metadata_isSet = !json[QString("dataEncryptionMetadata")].isNull() && m_data_encryption_metadata_isValid;

    m_query_log_status_isValid = ::OpenAPI::fromJsonValue(m_query_log_status, json[QString("queryLogStatus")]);
    m_query_log_status_isSet = !json[QString("queryLogStatus")].isNull() && m_query_log_status_isValid;
}

QString OAICollaboration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollaboration::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creator_account_id_isSet) {
        obj.insert(QString("creatorAccountId"), ::OpenAPI::toJsonValue(m_creator_account_id));
    }
    if (m_creator_display_name_isSet) {
        obj.insert(QString("creatorDisplayName"), ::OpenAPI::toJsonValue(m_creator_display_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_member_status.isSet()) {
        obj.insert(QString("memberStatus"), ::OpenAPI::toJsonValue(m_member_status));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_arn_isSet) {
        obj.insert(QString("membershipArn"), ::OpenAPI::toJsonValue(m_membership_arn));
    }
    if (m_data_encryption_metadata.isSet()) {
        obj.insert(QString("dataEncryptionMetadata"), ::OpenAPI::toJsonValue(m_data_encryption_metadata));
    }
    if (m_query_log_status.isSet()) {
        obj.insert(QString("queryLogStatus"), ::OpenAPI::toJsonValue(m_query_log_status));
    }
    return obj;
}

QString OAICollaboration::getId() const {
    return m_id;
}
void OAICollaboration::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollaboration::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollaboration::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollaboration::getArn() const {
    return m_arn;
}
void OAICollaboration::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICollaboration::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICollaboration::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICollaboration::getName() const {
    return m_name;
}
void OAICollaboration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollaboration::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollaboration::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICollaboration::getDescription() const {
    return m_description;
}
void OAICollaboration::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICollaboration::is_description_Set() const{
    return m_description_isSet;
}

bool OAICollaboration::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICollaboration::getCreatorAccountId() const {
    return m_creator_account_id;
}
void OAICollaboration::setCreatorAccountId(const QString &creator_account_id) {
    m_creator_account_id = creator_account_id;
    m_creator_account_id_isSet = true;
}

bool OAICollaboration::is_creator_account_id_Set() const{
    return m_creator_account_id_isSet;
}

bool OAICollaboration::is_creator_account_id_Valid() const{
    return m_creator_account_id_isValid;
}

QString OAICollaboration::getCreatorDisplayName() const {
    return m_creator_display_name;
}
void OAICollaboration::setCreatorDisplayName(const QString &creator_display_name) {
    m_creator_display_name = creator_display_name;
    m_creator_display_name_isSet = true;
}

bool OAICollaboration::is_creator_display_name_Set() const{
    return m_creator_display_name_isSet;
}

bool OAICollaboration::is_creator_display_name_Valid() const{
    return m_creator_display_name_isValid;
}

QDateTime OAICollaboration::getCreateTime() const {
    return m_create_time;
}
void OAICollaboration::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICollaboration::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICollaboration::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAICollaboration::getUpdateTime() const {
    return m_update_time;
}
void OAICollaboration::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICollaboration::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICollaboration::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIMemberStatus OAICollaboration::getMemberStatus() const {
    return m_member_status;
}
void OAICollaboration::setMemberStatus(const OAIMemberStatus &member_status) {
    m_member_status = member_status;
    m_member_status_isSet = true;
}

bool OAICollaboration::is_member_status_Set() const{
    return m_member_status_isSet;
}

bool OAICollaboration::is_member_status_Valid() const{
    return m_member_status_isValid;
}

QString OAICollaboration::getMembershipId() const {
    return m_membership_id;
}
void OAICollaboration::setMembershipId(const QString &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAICollaboration::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAICollaboration::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

QString OAICollaboration::getMembershipArn() const {
    return m_membership_arn;
}
void OAICollaboration::setMembershipArn(const QString &membership_arn) {
    m_membership_arn = membership_arn;
    m_membership_arn_isSet = true;
}

bool OAICollaboration::is_membership_arn_Set() const{
    return m_membership_arn_isSet;
}

bool OAICollaboration::is_membership_arn_Valid() const{
    return m_membership_arn_isValid;
}

OAICollaboration_dataEncryptionMetadata OAICollaboration::getDataEncryptionMetadata() const {
    return m_data_encryption_metadata;
}
void OAICollaboration::setDataEncryptionMetadata(const OAICollaboration_dataEncryptionMetadata &data_encryption_metadata) {
    m_data_encryption_metadata = data_encryption_metadata;
    m_data_encryption_metadata_isSet = true;
}

bool OAICollaboration::is_data_encryption_metadata_Set() const{
    return m_data_encryption_metadata_isSet;
}

bool OAICollaboration::is_data_encryption_metadata_Valid() const{
    return m_data_encryption_metadata_isValid;
}

OAICollaborationQueryLogStatus OAICollaboration::getQueryLogStatus() const {
    return m_query_log_status;
}
void OAICollaboration::setQueryLogStatus(const OAICollaborationQueryLogStatus &query_log_status) {
    m_query_log_status = query_log_status;
    m_query_log_status_isSet = true;
}

bool OAICollaboration::is_query_log_status_Set() const{
    return m_query_log_status_isSet;
}

bool OAICollaboration::is_query_log_status_Valid() const{
    return m_query_log_status_isValid;
}

bool OAICollaboration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_encryption_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_log_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollaboration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_arn_isValid && m_name_isValid && m_creator_account_id_isValid && m_creator_display_name_isValid && m_create_time_isValid && m_update_time_isValid && m_member_status_isValid && m_query_log_status_isValid && true;
}

} // namespace OpenAPI
