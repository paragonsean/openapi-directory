/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregateColumn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregateColumn::OAIAggregateColumn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregateColumn::OAIAggregateColumn() {
    this->initializeModel();
}

OAIAggregateColumn::~OAIAggregateColumn() {}

void OAIAggregateColumn::initializeModel() {

    m_column_names_isSet = false;
    m_column_names_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;
}

void OAIAggregateColumn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregateColumn::fromJsonObject(QJsonObject json) {

    m_column_names_isValid = ::OpenAPI::fromJsonValue(m_column_names, json[QString("columnNames")]);
    m_column_names_isSet = !json[QString("columnNames")].isNull() && m_column_names_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;
}

QString OAIAggregateColumn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregateColumn::asJsonObject() const {
    QJsonObject obj;
    if (m_column_names.isSet()) {
        obj.insert(QString("columnNames"), ::OpenAPI::toJsonValue(m_column_names));
    }
    if (m_function.isSet()) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    return obj;
}

QList OAIAggregateColumn::getColumnNames() const {
    return m_column_names;
}
void OAIAggregateColumn::setColumnNames(const QList &column_names) {
    m_column_names = column_names;
    m_column_names_isSet = true;
}

bool OAIAggregateColumn::is_column_names_Set() const{
    return m_column_names_isSet;
}

bool OAIAggregateColumn::is_column_names_Valid() const{
    return m_column_names_isValid;
}

OAIAggregateFunctionName OAIAggregateColumn::getFunction() const {
    return m_function;
}
void OAIAggregateColumn::setFunction(const OAIAggregateFunctionName &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIAggregateColumn::is_function_Set() const{
    return m_function_isSet;
}

bool OAIAggregateColumn::is_function_Valid() const{
    return m_function_isValid;
}

bool OAIAggregateColumn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_function.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregateColumn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_names_isValid && m_function_isValid && true;
}

} // namespace OpenAPI
