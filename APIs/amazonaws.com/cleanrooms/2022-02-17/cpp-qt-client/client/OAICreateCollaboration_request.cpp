/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCollaboration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCollaboration_request::OAICreateCollaboration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCollaboration_request::OAICreateCollaboration_request() {
    this->initializeModel();
}

OAICreateCollaboration_request::~OAICreateCollaboration_request() {}

void OAICreateCollaboration_request::initializeModel() {

    m_members_isSet = false;
    m_members_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_creator_member_abilities_isSet = false;
    m_creator_member_abilities_isValid = false;

    m_creator_display_name_isSet = false;
    m_creator_display_name_isValid = false;

    m_data_encryption_metadata_isSet = false;
    m_data_encryption_metadata_isValid = false;

    m_query_log_status_isSet = false;
    m_query_log_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateCollaboration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCollaboration_request::fromJsonObject(QJsonObject json) {

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_creator_member_abilities_isValid = ::OpenAPI::fromJsonValue(m_creator_member_abilities, json[QString("creatorMemberAbilities")]);
    m_creator_member_abilities_isSet = !json[QString("creatorMemberAbilities")].isNull() && m_creator_member_abilities_isValid;

    m_creator_display_name_isValid = ::OpenAPI::fromJsonValue(m_creator_display_name, json[QString("creatorDisplayName")]);
    m_creator_display_name_isSet = !json[QString("creatorDisplayName")].isNull() && m_creator_display_name_isValid;

    m_data_encryption_metadata_isValid = ::OpenAPI::fromJsonValue(m_data_encryption_metadata, json[QString("dataEncryptionMetadata")]);
    m_data_encryption_metadata_isSet = !json[QString("dataEncryptionMetadata")].isNull() && m_data_encryption_metadata_isValid;

    m_query_log_status_isValid = ::OpenAPI::fromJsonValue(m_query_log_status, json[QString("queryLogStatus")]);
    m_query_log_status_isSet = !json[QString("queryLogStatus")].isNull() && m_query_log_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateCollaboration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCollaboration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_creator_member_abilities.size() > 0) {
        obj.insert(QString("creatorMemberAbilities"), ::OpenAPI::toJsonValue(m_creator_member_abilities));
    }
    if (m_creator_display_name_isSet) {
        obj.insert(QString("creatorDisplayName"), ::OpenAPI::toJsonValue(m_creator_display_name));
    }
    if (m_data_encryption_metadata.isSet()) {
        obj.insert(QString("dataEncryptionMetadata"), ::OpenAPI::toJsonValue(m_data_encryption_metadata));
    }
    if (m_query_log_status_isSet) {
        obj.insert(QString("queryLogStatus"), ::OpenAPI::toJsonValue(m_query_log_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QList<OAIMemberSpecification> OAICreateCollaboration_request::getMembers() const {
    return m_members;
}
void OAICreateCollaboration_request::setMembers(const QList<OAIMemberSpecification> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAICreateCollaboration_request::is_members_Set() const{
    return m_members_isSet;
}

bool OAICreateCollaboration_request::is_members_Valid() const{
    return m_members_isValid;
}

QString OAICreateCollaboration_request::getName() const {
    return m_name;
}
void OAICreateCollaboration_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateCollaboration_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateCollaboration_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateCollaboration_request::getDescription() const {
    return m_description;
}
void OAICreateCollaboration_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateCollaboration_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateCollaboration_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIMemberAbility> OAICreateCollaboration_request::getCreatorMemberAbilities() const {
    return m_creator_member_abilities;
}
void OAICreateCollaboration_request::setCreatorMemberAbilities(const QList<OAIMemberAbility> &creator_member_abilities) {
    m_creator_member_abilities = creator_member_abilities;
    m_creator_member_abilities_isSet = true;
}

bool OAICreateCollaboration_request::is_creator_member_abilities_Set() const{
    return m_creator_member_abilities_isSet;
}

bool OAICreateCollaboration_request::is_creator_member_abilities_Valid() const{
    return m_creator_member_abilities_isValid;
}

QString OAICreateCollaboration_request::getCreatorDisplayName() const {
    return m_creator_display_name;
}
void OAICreateCollaboration_request::setCreatorDisplayName(const QString &creator_display_name) {
    m_creator_display_name = creator_display_name;
    m_creator_display_name_isSet = true;
}

bool OAICreateCollaboration_request::is_creator_display_name_Set() const{
    return m_creator_display_name_isSet;
}

bool OAICreateCollaboration_request::is_creator_display_name_Valid() const{
    return m_creator_display_name_isValid;
}

OAICreateCollaboration_request_dataEncryptionMetadata OAICreateCollaboration_request::getDataEncryptionMetadata() const {
    return m_data_encryption_metadata;
}
void OAICreateCollaboration_request::setDataEncryptionMetadata(const OAICreateCollaboration_request_dataEncryptionMetadata &data_encryption_metadata) {
    m_data_encryption_metadata = data_encryption_metadata;
    m_data_encryption_metadata_isSet = true;
}

bool OAICreateCollaboration_request::is_data_encryption_metadata_Set() const{
    return m_data_encryption_metadata_isSet;
}

bool OAICreateCollaboration_request::is_data_encryption_metadata_Valid() const{
    return m_data_encryption_metadata_isValid;
}

QString OAICreateCollaboration_request::getQueryLogStatus() const {
    return m_query_log_status;
}
void OAICreateCollaboration_request::setQueryLogStatus(const QString &query_log_status) {
    m_query_log_status = query_log_status;
    m_query_log_status_isSet = true;
}

bool OAICreateCollaboration_request::is_query_log_status_Set() const{
    return m_query_log_status_isSet;
}

bool OAICreateCollaboration_request::is_query_log_status_Valid() const{
    return m_query_log_status_isValid;
}

QMap<QString, QString> OAICreateCollaboration_request::getTags() const {
    return m_tags;
}
void OAICreateCollaboration_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCollaboration_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCollaboration_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateCollaboration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_member_abilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_encryption_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_log_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCollaboration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_members_isValid && m_name_isValid && m_description_isValid && m_creator_member_abilities_isValid && m_creator_display_name_isValid && m_query_log_status_isValid && true;
}

} // namespace OpenAPI
