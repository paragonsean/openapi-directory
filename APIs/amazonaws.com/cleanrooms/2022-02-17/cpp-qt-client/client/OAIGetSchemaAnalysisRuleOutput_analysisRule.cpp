/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSchemaAnalysisRuleOutput_analysisRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSchemaAnalysisRuleOutput_analysisRule::OAIGetSchemaAnalysisRuleOutput_analysisRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSchemaAnalysisRuleOutput_analysisRule::OAIGetSchemaAnalysisRuleOutput_analysisRule() {
    this->initializeModel();
}

OAIGetSchemaAnalysisRuleOutput_analysisRule::~OAIGetSchemaAnalysisRuleOutput_analysisRule() {}

void OAIGetSchemaAnalysisRuleOutput_analysisRule::initializeModel() {

    m_collaboration_id_isSet = false;
    m_collaboration_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIGetSchemaAnalysisRuleOutput_analysisRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSchemaAnalysisRuleOutput_analysisRule::fromJsonObject(QJsonObject json) {

    m_collaboration_id_isValid = ::OpenAPI::fromJsonValue(m_collaboration_id, json[QString("collaborationId")]);
    m_collaboration_id_isSet = !json[QString("collaborationId")].isNull() && m_collaboration_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;
}

QString OAIGetSchemaAnalysisRuleOutput_analysisRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSchemaAnalysisRuleOutput_analysisRule::asJsonObject() const {
    QJsonObject obj;
    if (m_collaboration_id_isSet) {
        obj.insert(QString("collaborationId"), ::OpenAPI::toJsonValue(m_collaboration_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIGetSchemaAnalysisRuleOutput_analysisRule::getCollaborationId() const {
    return m_collaboration_id;
}
void OAIGetSchemaAnalysisRuleOutput_analysisRule::setCollaborationId(const QString &collaboration_id) {
    m_collaboration_id = collaboration_id;
    m_collaboration_id_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_collaboration_id_Set() const{
    return m_collaboration_id_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_collaboration_id_Valid() const{
    return m_collaboration_id_isValid;
}

OAIAnalysisRuleType OAIGetSchemaAnalysisRuleOutput_analysisRule::getType() const {
    return m_type;
}
void OAIGetSchemaAnalysisRuleOutput_analysisRule::setType(const OAIAnalysisRuleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetSchemaAnalysisRuleOutput_analysisRule::getName() const {
    return m_name;
}
void OAIGetSchemaAnalysisRuleOutput_analysisRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIGetSchemaAnalysisRuleOutput_analysisRule::getCreateTime() const {
    return m_create_time;
}
void OAIGetSchemaAnalysisRuleOutput_analysisRule::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIGetSchemaAnalysisRuleOutput_analysisRule::getUpdateTime() const {
    return m_update_time;
}
void OAIGetSchemaAnalysisRuleOutput_analysisRule::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIAnalysisRule_policy OAIGetSchemaAnalysisRuleOutput_analysisRule::getPolicy() const {
    return m_policy;
}
void OAIGetSchemaAnalysisRuleOutput_analysisRule::setPolicy(const OAIAnalysisRule_policy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaboration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSchemaAnalysisRuleOutput_analysisRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaboration_id_isValid && m_type_isValid && m_name_isValid && m_create_time_isValid && m_update_time_isValid && m_policy_isValid && true;
}

} // namespace OpenAPI
