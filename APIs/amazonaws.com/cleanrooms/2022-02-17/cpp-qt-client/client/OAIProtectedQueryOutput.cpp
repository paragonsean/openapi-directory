/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQueryOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQueryOutput::OAIProtectedQueryOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQueryOutput::OAIProtectedQueryOutput() {
    this->initializeModel();
}

OAIProtectedQueryOutput::~OAIProtectedQueryOutput() {}

void OAIProtectedQueryOutput::initializeModel() {

    m_s3_isSet = false;
    m_s3_isValid = false;
}

void OAIProtectedQueryOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQueryOutput::fromJsonObject(QJsonObject json) {

    m_s3_isValid = ::OpenAPI::fromJsonValue(m_s3, json[QString("s3")]);
    m_s3_isSet = !json[QString("s3")].isNull() && m_s3_isValid;
}

QString OAIProtectedQueryOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQueryOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_s3.isSet()) {
        obj.insert(QString("s3"), ::OpenAPI::toJsonValue(m_s3));
    }
    return obj;
}

OAIProtectedQueryOutput_s3 OAIProtectedQueryOutput::getS3() const {
    return m_s3;
}
void OAIProtectedQueryOutput::setS3(const OAIProtectedQueryOutput_s3 &s3) {
    m_s3 = s3;
    m_s3_isSet = true;
}

bool OAIProtectedQueryOutput::is_s3_Set() const{
    return m_s3_isSet;
}

bool OAIProtectedQueryOutput::is_s3_Valid() const{
    return m_s3_isValid;
}

bool OAIProtectedQueryOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQueryOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
