/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguredTableAnalysisRulePolicyV1_aggregation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguredTableAnalysisRulePolicyV1_aggregation::OAIConfiguredTableAnalysisRulePolicyV1_aggregation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguredTableAnalysisRulePolicyV1_aggregation::OAIConfiguredTableAnalysisRulePolicyV1_aggregation() {
    this->initializeModel();
}

OAIConfiguredTableAnalysisRulePolicyV1_aggregation::~OAIConfiguredTableAnalysisRulePolicyV1_aggregation() {}

void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::initializeModel() {

    m_aggregate_columns_isSet = false;
    m_aggregate_columns_isValid = false;

    m_join_columns_isSet = false;
    m_join_columns_isValid = false;

    m_join_required_isSet = false;
    m_join_required_isValid = false;

    m_allowed_join_operators_isSet = false;
    m_allowed_join_operators_isValid = false;

    m_dimension_columns_isSet = false;
    m_dimension_columns_isValid = false;

    m_scalar_functions_isSet = false;
    m_scalar_functions_isValid = false;

    m_output_constraints_isSet = false;
    m_output_constraints_isValid = false;
}

void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::fromJsonObject(QJsonObject json) {

    m_aggregate_columns_isValid = ::OpenAPI::fromJsonValue(m_aggregate_columns, json[QString("aggregateColumns")]);
    m_aggregate_columns_isSet = !json[QString("aggregateColumns")].isNull() && m_aggregate_columns_isValid;

    m_join_columns_isValid = ::OpenAPI::fromJsonValue(m_join_columns, json[QString("joinColumns")]);
    m_join_columns_isSet = !json[QString("joinColumns")].isNull() && m_join_columns_isValid;

    m_join_required_isValid = ::OpenAPI::fromJsonValue(m_join_required, json[QString("joinRequired")]);
    m_join_required_isSet = !json[QString("joinRequired")].isNull() && m_join_required_isValid;

    m_allowed_join_operators_isValid = ::OpenAPI::fromJsonValue(m_allowed_join_operators, json[QString("allowedJoinOperators")]);
    m_allowed_join_operators_isSet = !json[QString("allowedJoinOperators")].isNull() && m_allowed_join_operators_isValid;

    m_dimension_columns_isValid = ::OpenAPI::fromJsonValue(m_dimension_columns, json[QString("dimensionColumns")]);
    m_dimension_columns_isSet = !json[QString("dimensionColumns")].isNull() && m_dimension_columns_isValid;

    m_scalar_functions_isValid = ::OpenAPI::fromJsonValue(m_scalar_functions, json[QString("scalarFunctions")]);
    m_scalar_functions_isSet = !json[QString("scalarFunctions")].isNull() && m_scalar_functions_isValid;

    m_output_constraints_isValid = ::OpenAPI::fromJsonValue(m_output_constraints, json[QString("outputConstraints")]);
    m_output_constraints_isSet = !json[QString("outputConstraints")].isNull() && m_output_constraints_isValid;
}

QString OAIConfiguredTableAnalysisRulePolicyV1_aggregation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguredTableAnalysisRulePolicyV1_aggregation::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregate_columns.isSet()) {
        obj.insert(QString("aggregateColumns"), ::OpenAPI::toJsonValue(m_aggregate_columns));
    }
    if (m_join_columns.isSet()) {
        obj.insert(QString("joinColumns"), ::OpenAPI::toJsonValue(m_join_columns));
    }
    if (m_join_required.isSet()) {
        obj.insert(QString("joinRequired"), ::OpenAPI::toJsonValue(m_join_required));
    }
    if (m_allowed_join_operators.isSet()) {
        obj.insert(QString("allowedJoinOperators"), ::OpenAPI::toJsonValue(m_allowed_join_operators));
    }
    if (m_dimension_columns.isSet()) {
        obj.insert(QString("dimensionColumns"), ::OpenAPI::toJsonValue(m_dimension_columns));
    }
    if (m_scalar_functions.isSet()) {
        obj.insert(QString("scalarFunctions"), ::OpenAPI::toJsonValue(m_scalar_functions));
    }
    if (m_output_constraints.isSet()) {
        obj.insert(QString("outputConstraints"), ::OpenAPI::toJsonValue(m_output_constraints));
    }
    return obj;
}

QList OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getAggregateColumns() const {
    return m_aggregate_columns;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setAggregateColumns(const QList &aggregate_columns) {
    m_aggregate_columns = aggregate_columns;
    m_aggregate_columns_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_aggregate_columns_Set() const{
    return m_aggregate_columns_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_aggregate_columns_Valid() const{
    return m_aggregate_columns_isValid;
}

QList OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getJoinColumns() const {
    return m_join_columns;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setJoinColumns(const QList &join_columns) {
    m_join_columns = join_columns;
    m_join_columns_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_join_columns_Set() const{
    return m_join_columns_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_join_columns_Valid() const{
    return m_join_columns_isValid;
}

OAIJoinRequiredOption OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getJoinRequired() const {
    return m_join_required;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setJoinRequired(const OAIJoinRequiredOption &join_required) {
    m_join_required = join_required;
    m_join_required_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_join_required_Set() const{
    return m_join_required_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_join_required_Valid() const{
    return m_join_required_isValid;
}

QList OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getAllowedJoinOperators() const {
    return m_allowed_join_operators;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setAllowedJoinOperators(const QList &allowed_join_operators) {
    m_allowed_join_operators = allowed_join_operators;
    m_allowed_join_operators_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_allowed_join_operators_Set() const{
    return m_allowed_join_operators_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_allowed_join_operators_Valid() const{
    return m_allowed_join_operators_isValid;
}

QList OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getDimensionColumns() const {
    return m_dimension_columns;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setDimensionColumns(const QList &dimension_columns) {
    m_dimension_columns = dimension_columns;
    m_dimension_columns_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_dimension_columns_Set() const{
    return m_dimension_columns_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_dimension_columns_Valid() const{
    return m_dimension_columns_isValid;
}

QList OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getScalarFunctions() const {
    return m_scalar_functions;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setScalarFunctions(const QList &scalar_functions) {
    m_scalar_functions = scalar_functions;
    m_scalar_functions_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_scalar_functions_Set() const{
    return m_scalar_functions_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_scalar_functions_Valid() const{
    return m_scalar_functions_isValid;
}

QList OAIConfiguredTableAnalysisRulePolicyV1_aggregation::getOutputConstraints() const {
    return m_output_constraints;
}
void OAIConfiguredTableAnalysisRulePolicyV1_aggregation::setOutputConstraints(const QList &output_constraints) {
    m_output_constraints = output_constraints;
    m_output_constraints_isSet = true;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_output_constraints_Set() const{
    return m_output_constraints_isSet;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::is_output_constraints_Valid() const{
    return m_output_constraints_isValid;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregate_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_required.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_join_operators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scalar_functions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguredTableAnalysisRulePolicyV1_aggregation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggregate_columns_isValid && m_join_columns_isValid && m_dimension_columns_isValid && m_scalar_functions_isValid && m_output_constraints_isValid && true;
}

} // namespace OpenAPI
