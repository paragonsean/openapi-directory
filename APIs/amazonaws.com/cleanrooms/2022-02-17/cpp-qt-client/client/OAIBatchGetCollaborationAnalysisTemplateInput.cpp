/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetCollaborationAnalysisTemplateInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetCollaborationAnalysisTemplateInput::OAIBatchGetCollaborationAnalysisTemplateInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetCollaborationAnalysisTemplateInput::OAIBatchGetCollaborationAnalysisTemplateInput() {
    this->initializeModel();
}

OAIBatchGetCollaborationAnalysisTemplateInput::~OAIBatchGetCollaborationAnalysisTemplateInput() {}

void OAIBatchGetCollaborationAnalysisTemplateInput::initializeModel() {

    m_analysis_template_arns_isSet = false;
    m_analysis_template_arns_isValid = false;
}

void OAIBatchGetCollaborationAnalysisTemplateInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetCollaborationAnalysisTemplateInput::fromJsonObject(QJsonObject json) {

    m_analysis_template_arns_isValid = ::OpenAPI::fromJsonValue(m_analysis_template_arns, json[QString("analysisTemplateArns")]);
    m_analysis_template_arns_isSet = !json[QString("analysisTemplateArns")].isNull() && m_analysis_template_arns_isValid;
}

QString OAIBatchGetCollaborationAnalysisTemplateInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetCollaborationAnalysisTemplateInput::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_template_arns.isSet()) {
        obj.insert(QString("analysisTemplateArns"), ::OpenAPI::toJsonValue(m_analysis_template_arns));
    }
    return obj;
}

QList OAIBatchGetCollaborationAnalysisTemplateInput::getAnalysisTemplateArns() const {
    return m_analysis_template_arns;
}
void OAIBatchGetCollaborationAnalysisTemplateInput::setAnalysisTemplateArns(const QList &analysis_template_arns) {
    m_analysis_template_arns = analysis_template_arns;
    m_analysis_template_arns_isSet = true;
}

bool OAIBatchGetCollaborationAnalysisTemplateInput::is_analysis_template_arns_Set() const{
    return m_analysis_template_arns_isSet;
}

bool OAIBatchGetCollaborationAnalysisTemplateInput::is_analysis_template_arns_Valid() const{
    return m_analysis_template_arns_isValid;
}

bool OAIBatchGetCollaborationAnalysisTemplateInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_template_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetCollaborationAnalysisTemplateInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_analysis_template_arns_isValid && true;
}

} // namespace OpenAPI
