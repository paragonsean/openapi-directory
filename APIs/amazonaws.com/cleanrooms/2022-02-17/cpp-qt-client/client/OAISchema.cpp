/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchema::OAISchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchema::OAISchema() {
    this->initializeModel();
}

OAISchema::~OAISchema() {}

void OAISchema::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_partition_keys_isSet = false;
    m_partition_keys_isValid = false;

    m_analysis_rule_types_isSet = false;
    m_analysis_rule_types_isValid = false;

    m_analysis_method_isSet = false;
    m_analysis_method_isValid = false;

    m_creator_account_id_isSet = false;
    m_creator_account_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_collaboration_id_isSet = false;
    m_collaboration_id_isValid = false;

    m_collaboration_arn_isSet = false;
    m_collaboration_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchema::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_partition_keys_isValid = ::OpenAPI::fromJsonValue(m_partition_keys, json[QString("partitionKeys")]);
    m_partition_keys_isSet = !json[QString("partitionKeys")].isNull() && m_partition_keys_isValid;

    m_analysis_rule_types_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule_types, json[QString("analysisRuleTypes")]);
    m_analysis_rule_types_isSet = !json[QString("analysisRuleTypes")].isNull() && m_analysis_rule_types_isValid;

    m_analysis_method_isValid = ::OpenAPI::fromJsonValue(m_analysis_method, json[QString("analysisMethod")]);
    m_analysis_method_isSet = !json[QString("analysisMethod")].isNull() && m_analysis_method_isValid;

    m_creator_account_id_isValid = ::OpenAPI::fromJsonValue(m_creator_account_id, json[QString("creatorAccountId")]);
    m_creator_account_id_isSet = !json[QString("creatorAccountId")].isNull() && m_creator_account_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_collaboration_id_isValid = ::OpenAPI::fromJsonValue(m_collaboration_id, json[QString("collaborationId")]);
    m_collaboration_id_isSet = !json[QString("collaborationId")].isNull() && m_collaboration_id_isValid;

    m_collaboration_arn_isValid = ::OpenAPI::fromJsonValue(m_collaboration_arn, json[QString("collaborationArn")]);
    m_collaboration_arn_isSet = !json[QString("collaborationArn")].isNull() && m_collaboration_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchema::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.isSet()) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_partition_keys.isSet()) {
        obj.insert(QString("partitionKeys"), ::OpenAPI::toJsonValue(m_partition_keys));
    }
    if (m_analysis_rule_types.isSet()) {
        obj.insert(QString("analysisRuleTypes"), ::OpenAPI::toJsonValue(m_analysis_rule_types));
    }
    if (m_analysis_method.isSet()) {
        obj.insert(QString("analysisMethod"), ::OpenAPI::toJsonValue(m_analysis_method));
    }
    if (m_creator_account_id_isSet) {
        obj.insert(QString("creatorAccountId"), ::OpenAPI::toJsonValue(m_creator_account_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_collaboration_id_isSet) {
        obj.insert(QString("collaborationId"), ::OpenAPI::toJsonValue(m_collaboration_id));
    }
    if (m_collaboration_arn_isSet) {
        obj.insert(QString("collaborationArn"), ::OpenAPI::toJsonValue(m_collaboration_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList OAISchema::getColumns() const {
    return m_columns;
}
void OAISchema::setColumns(const QList &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAISchema::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAISchema::is_columns_Valid() const{
    return m_columns_isValid;
}

QList OAISchema::getPartitionKeys() const {
    return m_partition_keys;
}
void OAISchema::setPartitionKeys(const QList &partition_keys) {
    m_partition_keys = partition_keys;
    m_partition_keys_isSet = true;
}

bool OAISchema::is_partition_keys_Set() const{
    return m_partition_keys_isSet;
}

bool OAISchema::is_partition_keys_Valid() const{
    return m_partition_keys_isValid;
}

QList OAISchema::getAnalysisRuleTypes() const {
    return m_analysis_rule_types;
}
void OAISchema::setAnalysisRuleTypes(const QList &analysis_rule_types) {
    m_analysis_rule_types = analysis_rule_types;
    m_analysis_rule_types_isSet = true;
}

bool OAISchema::is_analysis_rule_types_Set() const{
    return m_analysis_rule_types_isSet;
}

bool OAISchema::is_analysis_rule_types_Valid() const{
    return m_analysis_rule_types_isValid;
}

OAIAnalysisMethod OAISchema::getAnalysisMethod() const {
    return m_analysis_method;
}
void OAISchema::setAnalysisMethod(const OAIAnalysisMethod &analysis_method) {
    m_analysis_method = analysis_method;
    m_analysis_method_isSet = true;
}

bool OAISchema::is_analysis_method_Set() const{
    return m_analysis_method_isSet;
}

bool OAISchema::is_analysis_method_Valid() const{
    return m_analysis_method_isValid;
}

QString OAISchema::getCreatorAccountId() const {
    return m_creator_account_id;
}
void OAISchema::setCreatorAccountId(const QString &creator_account_id) {
    m_creator_account_id = creator_account_id;
    m_creator_account_id_isSet = true;
}

bool OAISchema::is_creator_account_id_Set() const{
    return m_creator_account_id_isSet;
}

bool OAISchema::is_creator_account_id_Valid() const{
    return m_creator_account_id_isValid;
}

QString OAISchema::getName() const {
    return m_name;
}
void OAISchema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISchema::is_name_Set() const{
    return m_name_isSet;
}

bool OAISchema::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISchema::getCollaborationId() const {
    return m_collaboration_id;
}
void OAISchema::setCollaborationId(const QString &collaboration_id) {
    m_collaboration_id = collaboration_id;
    m_collaboration_id_isSet = true;
}

bool OAISchema::is_collaboration_id_Set() const{
    return m_collaboration_id_isSet;
}

bool OAISchema::is_collaboration_id_Valid() const{
    return m_collaboration_id_isValid;
}

QString OAISchema::getCollaborationArn() const {
    return m_collaboration_arn;
}
void OAISchema::setCollaborationArn(const QString &collaboration_arn) {
    m_collaboration_arn = collaboration_arn;
    m_collaboration_arn_isSet = true;
}

bool OAISchema::is_collaboration_arn_Set() const{
    return m_collaboration_arn_isSet;
}

bool OAISchema::is_collaboration_arn_Valid() const{
    return m_collaboration_arn_isValid;
}

QString OAISchema::getDescription() const {
    return m_description;
}
void OAISchema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISchema::is_description_Set() const{
    return m_description_isSet;
}

bool OAISchema::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAISchema::getCreateTime() const {
    return m_create_time;
}
void OAISchema::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISchema::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISchema::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAISchema::getUpdateTime() const {
    return m_update_time;
}
void OAISchema::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISchema::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISchema::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAISchemaType OAISchema::getType() const {
    return m_type;
}
void OAISchema::setType(const OAISchemaType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAISchema::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_rule_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_columns_isValid && m_partition_keys_isValid && m_analysis_rule_types_isValid && m_creator_account_id_isValid && m_name_isValid && m_collaboration_id_isValid && m_collaboration_arn_isValid && m_description_isValid && m_create_time_isValid && m_update_time_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
