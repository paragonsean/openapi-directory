/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartProtectedQuery_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartProtectedQuery_request::OAIStartProtectedQuery_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartProtectedQuery_request::OAIStartProtectedQuery_request() {
    this->initializeModel();
}

OAIStartProtectedQuery_request::~OAIStartProtectedQuery_request() {}

void OAIStartProtectedQuery_request::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_sql_parameters_isSet = false;
    m_sql_parameters_isValid = false;

    m_result_configuration_isSet = false;
    m_result_configuration_isValid = false;
}

void OAIStartProtectedQuery_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartProtectedQuery_request::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_sql_parameters_isValid = ::OpenAPI::fromJsonValue(m_sql_parameters, json[QString("sqlParameters")]);
    m_sql_parameters_isSet = !json[QString("sqlParameters")].isNull() && m_sql_parameters_isValid;

    m_result_configuration_isValid = ::OpenAPI::fromJsonValue(m_result_configuration, json[QString("resultConfiguration")]);
    m_result_configuration_isSet = !json[QString("resultConfiguration")].isNull() && m_result_configuration_isValid;
}

QString OAIStartProtectedQuery_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartProtectedQuery_request::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_sql_parameters.isSet()) {
        obj.insert(QString("sqlParameters"), ::OpenAPI::toJsonValue(m_sql_parameters));
    }
    if (m_result_configuration.isSet()) {
        obj.insert(QString("resultConfiguration"), ::OpenAPI::toJsonValue(m_result_configuration));
    }
    return obj;
}

QString OAIStartProtectedQuery_request::getType() const {
    return m_type;
}
void OAIStartProtectedQuery_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStartProtectedQuery_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStartProtectedQuery_request::is_type_Valid() const{
    return m_type_isValid;
}

OAIStartProtectedQuery_request_sqlParameters OAIStartProtectedQuery_request::getSqlParameters() const {
    return m_sql_parameters;
}
void OAIStartProtectedQuery_request::setSqlParameters(const OAIStartProtectedQuery_request_sqlParameters &sql_parameters) {
    m_sql_parameters = sql_parameters;
    m_sql_parameters_isSet = true;
}

bool OAIStartProtectedQuery_request::is_sql_parameters_Set() const{
    return m_sql_parameters_isSet;
}

bool OAIStartProtectedQuery_request::is_sql_parameters_Valid() const{
    return m_sql_parameters_isValid;
}

OAIStartProtectedQuery_request_resultConfiguration OAIStartProtectedQuery_request::getResultConfiguration() const {
    return m_result_configuration;
}
void OAIStartProtectedQuery_request::setResultConfiguration(const OAIStartProtectedQuery_request_resultConfiguration &result_configuration) {
    m_result_configuration = result_configuration;
    m_result_configuration_isSet = true;
}

bool OAIStartProtectedQuery_request::is_result_configuration_Set() const{
    return m_result_configuration_isSet;
}

bool OAIStartProtectedQuery_request::is_result_configuration_Valid() const{
    return m_result_configuration_isValid;
}

bool OAIStartProtectedQuery_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartProtectedQuery_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_sql_parameters_isValid && m_result_configuration_isValid && true;
}

} // namespace OpenAPI
