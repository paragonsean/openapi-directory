/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCollaborationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCollaborationOutput::OAICreateCollaborationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCollaborationOutput::OAICreateCollaborationOutput() {
    this->initializeModel();
}

OAICreateCollaborationOutput::~OAICreateCollaborationOutput() {}

void OAICreateCollaborationOutput::initializeModel() {

    m_collaboration_isSet = false;
    m_collaboration_isValid = false;
}

void OAICreateCollaborationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCollaborationOutput::fromJsonObject(QJsonObject json) {

    m_collaboration_isValid = ::OpenAPI::fromJsonValue(m_collaboration, json[QString("collaboration")]);
    m_collaboration_isSet = !json[QString("collaboration")].isNull() && m_collaboration_isValid;
}

QString OAICreateCollaborationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCollaborationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_collaboration.isSet()) {
        obj.insert(QString("collaboration"), ::OpenAPI::toJsonValue(m_collaboration));
    }
    return obj;
}

OAICreateCollaborationOutput_collaboration OAICreateCollaborationOutput::getCollaboration() const {
    return m_collaboration;
}
void OAICreateCollaborationOutput::setCollaboration(const OAICreateCollaborationOutput_collaboration &collaboration) {
    m_collaboration = collaboration;
    m_collaboration_isSet = true;
}

bool OAICreateCollaborationOutput::is_collaboration_Set() const{
    return m_collaboration_isSet;
}

bool OAICreateCollaborationOutput::is_collaboration_Valid() const{
    return m_collaboration_isValid;
}

bool OAICreateCollaborationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaboration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCollaborationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaboration_isValid && true;
}

} // namespace OpenAPI
