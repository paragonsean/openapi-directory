/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnalysisTemplate_request_source.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnalysisTemplate_request_source::OAICreateAnalysisTemplate_request_source(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnalysisTemplate_request_source::OAICreateAnalysisTemplate_request_source() {
    this->initializeModel();
}

OAICreateAnalysisTemplate_request_source::~OAICreateAnalysisTemplate_request_source() {}

void OAICreateAnalysisTemplate_request_source::initializeModel() {

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAICreateAnalysisTemplate_request_source::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnalysisTemplate_request_source::fromJsonObject(QJsonObject json) {

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAICreateAnalysisTemplate_request_source::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnalysisTemplate_request_source::asJsonObject() const {
    QJsonObject obj;
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAICreateAnalysisTemplate_request_source::getText() const {
    return m_text;
}
void OAICreateAnalysisTemplate_request_source::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICreateAnalysisTemplate_request_source::is_text_Set() const{
    return m_text_isSet;
}

bool OAICreateAnalysisTemplate_request_source::is_text_Valid() const{
    return m_text_isValid;
}

bool OAICreateAnalysisTemplate_request_source::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnalysisTemplate_request_source::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
