/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListProtectedQueriesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListProtectedQueriesOutput::OAIListProtectedQueriesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListProtectedQueriesOutput::OAIListProtectedQueriesOutput() {
    this->initializeModel();
}

OAIListProtectedQueriesOutput::~OAIListProtectedQueriesOutput() {}

void OAIListProtectedQueriesOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_protected_queries_isSet = false;
    m_protected_queries_isValid = false;
}

void OAIListProtectedQueriesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListProtectedQueriesOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_protected_queries_isValid = ::OpenAPI::fromJsonValue(m_protected_queries, json[QString("protectedQueries")]);
    m_protected_queries_isSet = !json[QString("protectedQueries")].isNull() && m_protected_queries_isValid;
}

QString OAIListProtectedQueriesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListProtectedQueriesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_protected_queries.isSet()) {
        obj.insert(QString("protectedQueries"), ::OpenAPI::toJsonValue(m_protected_queries));
    }
    return obj;
}

QString OAIListProtectedQueriesOutput::getNextToken() const {
    return m_next_token;
}
void OAIListProtectedQueriesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListProtectedQueriesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListProtectedQueriesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListProtectedQueriesOutput::getProtectedQueries() const {
    return m_protected_queries;
}
void OAIListProtectedQueriesOutput::setProtectedQueries(const QList &protected_queries) {
    m_protected_queries = protected_queries;
    m_protected_queries_isSet = true;
}

bool OAIListProtectedQueriesOutput::is_protected_queries_Set() const{
    return m_protected_queries_isSet;
}

bool OAIListProtectedQueriesOutput::is_protected_queries_Valid() const{
    return m_protected_queries_isValid;
}

bool OAIListProtectedQueriesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListProtectedQueriesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_protected_queries_isValid && true;
}

} // namespace OpenAPI
