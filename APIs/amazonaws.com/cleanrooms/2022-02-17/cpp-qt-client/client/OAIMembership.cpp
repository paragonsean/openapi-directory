/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembership::OAIMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembership::OAIMembership() {
    this->initializeModel();
}

OAIMembership::~OAIMembership() {}

void OAIMembership::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_collaboration_arn_isSet = false;
    m_collaboration_arn_isValid = false;

    m_collaboration_id_isSet = false;
    m_collaboration_id_isValid = false;

    m_collaboration_creator_account_id_isSet = false;
    m_collaboration_creator_account_id_isValid = false;

    m_collaboration_creator_display_name_isSet = false;
    m_collaboration_creator_display_name_isValid = false;

    m_collaboration_name_isSet = false;
    m_collaboration_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_member_abilities_isSet = false;
    m_member_abilities_isValid = false;

    m_query_log_status_isSet = false;
    m_query_log_status_isValid = false;
}

void OAIMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembership::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_collaboration_arn_isValid = ::OpenAPI::fromJsonValue(m_collaboration_arn, json[QString("collaborationArn")]);
    m_collaboration_arn_isSet = !json[QString("collaborationArn")].isNull() && m_collaboration_arn_isValid;

    m_collaboration_id_isValid = ::OpenAPI::fromJsonValue(m_collaboration_id, json[QString("collaborationId")]);
    m_collaboration_id_isSet = !json[QString("collaborationId")].isNull() && m_collaboration_id_isValid;

    m_collaboration_creator_account_id_isValid = ::OpenAPI::fromJsonValue(m_collaboration_creator_account_id, json[QString("collaborationCreatorAccountId")]);
    m_collaboration_creator_account_id_isSet = !json[QString("collaborationCreatorAccountId")].isNull() && m_collaboration_creator_account_id_isValid;

    m_collaboration_creator_display_name_isValid = ::OpenAPI::fromJsonValue(m_collaboration_creator_display_name, json[QString("collaborationCreatorDisplayName")]);
    m_collaboration_creator_display_name_isSet = !json[QString("collaborationCreatorDisplayName")].isNull() && m_collaboration_creator_display_name_isValid;

    m_collaboration_name_isValid = ::OpenAPI::fromJsonValue(m_collaboration_name, json[QString("collaborationName")]);
    m_collaboration_name_isSet = !json[QString("collaborationName")].isNull() && m_collaboration_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_member_abilities_isValid = ::OpenAPI::fromJsonValue(m_member_abilities, json[QString("memberAbilities")]);
    m_member_abilities_isSet = !json[QString("memberAbilities")].isNull() && m_member_abilities_isValid;

    m_query_log_status_isValid = ::OpenAPI::fromJsonValue(m_query_log_status, json[QString("queryLogStatus")]);
    m_query_log_status_isSet = !json[QString("queryLogStatus")].isNull() && m_query_log_status_isValid;
}

QString OAIMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_collaboration_arn_isSet) {
        obj.insert(QString("collaborationArn"), ::OpenAPI::toJsonValue(m_collaboration_arn));
    }
    if (m_collaboration_id_isSet) {
        obj.insert(QString("collaborationId"), ::OpenAPI::toJsonValue(m_collaboration_id));
    }
    if (m_collaboration_creator_account_id_isSet) {
        obj.insert(QString("collaborationCreatorAccountId"), ::OpenAPI::toJsonValue(m_collaboration_creator_account_id));
    }
    if (m_collaboration_creator_display_name_isSet) {
        obj.insert(QString("collaborationCreatorDisplayName"), ::OpenAPI::toJsonValue(m_collaboration_creator_display_name));
    }
    if (m_collaboration_name_isSet) {
        obj.insert(QString("collaborationName"), ::OpenAPI::toJsonValue(m_collaboration_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_member_abilities.isSet()) {
        obj.insert(QString("memberAbilities"), ::OpenAPI::toJsonValue(m_member_abilities));
    }
    if (m_query_log_status.isSet()) {
        obj.insert(QString("queryLogStatus"), ::OpenAPI::toJsonValue(m_query_log_status));
    }
    return obj;
}

QString OAIMembership::getId() const {
    return m_id;
}
void OAIMembership::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMembership::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMembership::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMembership::getArn() const {
    return m_arn;
}
void OAIMembership::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIMembership::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIMembership::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIMembership::getCollaborationArn() const {
    return m_collaboration_arn;
}
void OAIMembership::setCollaborationArn(const QString &collaboration_arn) {
    m_collaboration_arn = collaboration_arn;
    m_collaboration_arn_isSet = true;
}

bool OAIMembership::is_collaboration_arn_Set() const{
    return m_collaboration_arn_isSet;
}

bool OAIMembership::is_collaboration_arn_Valid() const{
    return m_collaboration_arn_isValid;
}

QString OAIMembership::getCollaborationId() const {
    return m_collaboration_id;
}
void OAIMembership::setCollaborationId(const QString &collaboration_id) {
    m_collaboration_id = collaboration_id;
    m_collaboration_id_isSet = true;
}

bool OAIMembership::is_collaboration_id_Set() const{
    return m_collaboration_id_isSet;
}

bool OAIMembership::is_collaboration_id_Valid() const{
    return m_collaboration_id_isValid;
}

QString OAIMembership::getCollaborationCreatorAccountId() const {
    return m_collaboration_creator_account_id;
}
void OAIMembership::setCollaborationCreatorAccountId(const QString &collaboration_creator_account_id) {
    m_collaboration_creator_account_id = collaboration_creator_account_id;
    m_collaboration_creator_account_id_isSet = true;
}

bool OAIMembership::is_collaboration_creator_account_id_Set() const{
    return m_collaboration_creator_account_id_isSet;
}

bool OAIMembership::is_collaboration_creator_account_id_Valid() const{
    return m_collaboration_creator_account_id_isValid;
}

QString OAIMembership::getCollaborationCreatorDisplayName() const {
    return m_collaboration_creator_display_name;
}
void OAIMembership::setCollaborationCreatorDisplayName(const QString &collaboration_creator_display_name) {
    m_collaboration_creator_display_name = collaboration_creator_display_name;
    m_collaboration_creator_display_name_isSet = true;
}

bool OAIMembership::is_collaboration_creator_display_name_Set() const{
    return m_collaboration_creator_display_name_isSet;
}

bool OAIMembership::is_collaboration_creator_display_name_Valid() const{
    return m_collaboration_creator_display_name_isValid;
}

QString OAIMembership::getCollaborationName() const {
    return m_collaboration_name;
}
void OAIMembership::setCollaborationName(const QString &collaboration_name) {
    m_collaboration_name = collaboration_name;
    m_collaboration_name_isSet = true;
}

bool OAIMembership::is_collaboration_name_Set() const{
    return m_collaboration_name_isSet;
}

bool OAIMembership::is_collaboration_name_Valid() const{
    return m_collaboration_name_isValid;
}

QDateTime OAIMembership::getCreateTime() const {
    return m_create_time;
}
void OAIMembership::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMembership::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMembership::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIMembership::getUpdateTime() const {
    return m_update_time;
}
void OAIMembership::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMembership::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMembership::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIMembershipStatus OAIMembership::getStatus() const {
    return m_status;
}
void OAIMembership::setStatus(const OAIMembershipStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMembership::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMembership::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIMembership::getMemberAbilities() const {
    return m_member_abilities;
}
void OAIMembership::setMemberAbilities(const QList &member_abilities) {
    m_member_abilities = member_abilities;
    m_member_abilities_isSet = true;
}

bool OAIMembership::is_member_abilities_Set() const{
    return m_member_abilities_isSet;
}

bool OAIMembership::is_member_abilities_Valid() const{
    return m_member_abilities_isValid;
}

OAIMembershipQueryLogStatus OAIMembership::getQueryLogStatus() const {
    return m_query_log_status;
}
void OAIMembership::setQueryLogStatus(const OAIMembershipQueryLogStatus &query_log_status) {
    m_query_log_status = query_log_status;
    m_query_log_status_isSet = true;
}

bool OAIMembership::is_query_log_status_Set() const{
    return m_query_log_status_isSet;
}

bool OAIMembership::is_query_log_status_Valid() const{
    return m_query_log_status_isValid;
}

bool OAIMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_creator_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_creator_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_abilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_log_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_arn_isValid && m_collaboration_arn_isValid && m_collaboration_id_isValid && m_collaboration_creator_account_id_isValid && m_collaboration_creator_display_name_isValid && m_collaboration_name_isValid && m_create_time_isValid && m_update_time_isValid && m_status_isValid && m_member_abilities_isValid && m_query_log_status_isValid && true;
}

} // namespace OpenAPI
