/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisParameter::OAIAnalysisParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisParameter::OAIAnalysisParameter() {
    this->initializeModel();
}

OAIAnalysisParameter::~OAIAnalysisParameter() {}

void OAIAnalysisParameter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;
}

void OAIAnalysisParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisParameter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("defaultValue")]);
    m_default_value_isSet = !json[QString("defaultValue")].isNull() && m_default_value_isValid;
}

QString OAIAnalysisParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_default_value_isSet) {
        obj.insert(QString("defaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    return obj;
}

QString OAIAnalysisParameter::getName() const {
    return m_name;
}
void OAIAnalysisParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysisParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysisParameter::is_name_Valid() const{
    return m_name_isValid;
}

OAIParameterType OAIAnalysisParameter::getType() const {
    return m_type;
}
void OAIAnalysisParameter::setType(const OAIParameterType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAnalysisParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAnalysisParameter::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAnalysisParameter::getDefaultValue() const {
    return m_default_value;
}
void OAIAnalysisParameter::setDefaultValue(const QString &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAIAnalysisParameter::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAIAnalysisParameter::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAIAnalysisParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
