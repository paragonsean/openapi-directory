/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetSchemaOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetSchemaOutput::OAIBatchGetSchemaOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetSchemaOutput::OAIBatchGetSchemaOutput() {
    this->initializeModel();
}

OAIBatchGetSchemaOutput::~OAIBatchGetSchemaOutput() {}

void OAIBatchGetSchemaOutput::initializeModel() {

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIBatchGetSchemaOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetSchemaOutput::fromJsonObject(QJsonObject json) {

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAIBatchGetSchemaOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetSchemaOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_schemas.isSet()) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QList OAIBatchGetSchemaOutput::getSchemas() const {
    return m_schemas;
}
void OAIBatchGetSchemaOutput::setSchemas(const QList &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIBatchGetSchemaOutput::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIBatchGetSchemaOutput::is_schemas_Valid() const{
    return m_schemas_isValid;
}

QList OAIBatchGetSchemaOutput::getErrors() const {
    return m_errors;
}
void OAIBatchGetSchemaOutput::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchGetSchemaOutput::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchGetSchemaOutput::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIBatchGetSchemaOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schemas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetSchemaOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schemas_isValid && m_errors_isValid && true;
}

} // namespace OpenAPI
