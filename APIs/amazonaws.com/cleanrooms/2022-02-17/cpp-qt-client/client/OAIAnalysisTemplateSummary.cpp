/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisTemplateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisTemplateSummary::OAIAnalysisTemplateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisTemplateSummary::OAIAnalysisTemplateSummary() {
    this->initializeModel();
}

OAIAnalysisTemplateSummary::~OAIAnalysisTemplateSummary() {}

void OAIAnalysisTemplateSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_membership_arn_isSet = false;
    m_membership_arn_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_collaboration_arn_isSet = false;
    m_collaboration_arn_isValid = false;

    m_collaboration_id_isSet = false;
    m_collaboration_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIAnalysisTemplateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisTemplateSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_membership_arn_isValid = ::OpenAPI::fromJsonValue(m_membership_arn, json[QString("membershipArn")]);
    m_membership_arn_isSet = !json[QString("membershipArn")].isNull() && m_membership_arn_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_collaboration_arn_isValid = ::OpenAPI::fromJsonValue(m_collaboration_arn, json[QString("collaborationArn")]);
    m_collaboration_arn_isSet = !json[QString("collaborationArn")].isNull() && m_collaboration_arn_isValid;

    m_collaboration_id_isValid = ::OpenAPI::fromJsonValue(m_collaboration_id, json[QString("collaborationId")]);
    m_collaboration_id_isSet = !json[QString("collaborationId")].isNull() && m_collaboration_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIAnalysisTemplateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisTemplateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_membership_arn_isSet) {
        obj.insert(QString("membershipArn"), ::OpenAPI::toJsonValue(m_membership_arn));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_collaboration_arn_isSet) {
        obj.insert(QString("collaborationArn"), ::OpenAPI::toJsonValue(m_collaboration_arn));
    }
    if (m_collaboration_id_isSet) {
        obj.insert(QString("collaborationId"), ::OpenAPI::toJsonValue(m_collaboration_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIAnalysisTemplateSummary::getArn() const {
    return m_arn;
}
void OAIAnalysisTemplateSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAnalysisTemplateSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIAnalysisTemplateSummary::getCreateTime() const {
    return m_create_time;
}
void OAIAnalysisTemplateSummary::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAnalysisTemplateSummary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAnalysisTemplateSummary::getId() const {
    return m_id;
}
void OAIAnalysisTemplateSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnalysisTemplateSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAnalysisTemplateSummary::getName() const {
    return m_name;
}
void OAIAnalysisTemplateSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAnalysisTemplateSummary::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIAnalysisTemplateSummary::getUpdateTime() const {
    return m_update_time;
}
void OAIAnalysisTemplateSummary::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAnalysisTemplateSummary::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIAnalysisTemplateSummary::getMembershipArn() const {
    return m_membership_arn;
}
void OAIAnalysisTemplateSummary::setMembershipArn(const QString &membership_arn) {
    m_membership_arn = membership_arn;
    m_membership_arn_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_membership_arn_Set() const{
    return m_membership_arn_isSet;
}

bool OAIAnalysisTemplateSummary::is_membership_arn_Valid() const{
    return m_membership_arn_isValid;
}

QString OAIAnalysisTemplateSummary::getMembershipId() const {
    return m_membership_id;
}
void OAIAnalysisTemplateSummary::setMembershipId(const QString &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIAnalysisTemplateSummary::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

QString OAIAnalysisTemplateSummary::getCollaborationArn() const {
    return m_collaboration_arn;
}
void OAIAnalysisTemplateSummary::setCollaborationArn(const QString &collaboration_arn) {
    m_collaboration_arn = collaboration_arn;
    m_collaboration_arn_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_collaboration_arn_Set() const{
    return m_collaboration_arn_isSet;
}

bool OAIAnalysisTemplateSummary::is_collaboration_arn_Valid() const{
    return m_collaboration_arn_isValid;
}

QString OAIAnalysisTemplateSummary::getCollaborationId() const {
    return m_collaboration_id;
}
void OAIAnalysisTemplateSummary::setCollaborationId(const QString &collaboration_id) {
    m_collaboration_id = collaboration_id;
    m_collaboration_id_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_collaboration_id_Set() const{
    return m_collaboration_id_isSet;
}

bool OAIAnalysisTemplateSummary::is_collaboration_id_Valid() const{
    return m_collaboration_id_isValid;
}

QString OAIAnalysisTemplateSummary::getDescription() const {
    return m_description;
}
void OAIAnalysisTemplateSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAnalysisTemplateSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAnalysisTemplateSummary::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIAnalysisTemplateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisTemplateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_create_time_isValid && m_id_isValid && m_name_isValid && m_update_time_isValid && m_membership_arn_isValid && m_membership_id_isValid && m_collaboration_arn_isValid && m_collaboration_id_isValid && true;
}

} // namespace OpenAPI
