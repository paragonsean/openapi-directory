/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProtectedQuery_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProtectedQuery_request::OAIUpdateProtectedQuery_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProtectedQuery_request::OAIUpdateProtectedQuery_request() {
    this->initializeModel();
}

OAIUpdateProtectedQuery_request::~OAIUpdateProtectedQuery_request() {}

void OAIUpdateProtectedQuery_request::initializeModel() {

    m_target_status_isSet = false;
    m_target_status_isValid = false;
}

void OAIUpdateProtectedQuery_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProtectedQuery_request::fromJsonObject(QJsonObject json) {

    m_target_status_isValid = ::OpenAPI::fromJsonValue(m_target_status, json[QString("targetStatus")]);
    m_target_status_isSet = !json[QString("targetStatus")].isNull() && m_target_status_isValid;
}

QString OAIUpdateProtectedQuery_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProtectedQuery_request::asJsonObject() const {
    QJsonObject obj;
    if (m_target_status_isSet) {
        obj.insert(QString("targetStatus"), ::OpenAPI::toJsonValue(m_target_status));
    }
    return obj;
}

QString OAIUpdateProtectedQuery_request::getTargetStatus() const {
    return m_target_status;
}
void OAIUpdateProtectedQuery_request::setTargetStatus(const QString &target_status) {
    m_target_status = target_status;
    m_target_status_isSet = true;
}

bool OAIUpdateProtectedQuery_request::is_target_status_Set() const{
    return m_target_status_isSet;
}

bool OAIUpdateProtectedQuery_request::is_target_status_Valid() const{
    return m_target_status_isValid;
}

bool OAIUpdateProtectedQuery_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProtectedQuery_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_status_isValid && true;
}

} // namespace OpenAPI
