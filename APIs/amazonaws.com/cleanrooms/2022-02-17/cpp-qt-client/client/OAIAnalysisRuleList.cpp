/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisRuleList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisRuleList::OAIAnalysisRuleList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisRuleList::OAIAnalysisRuleList() {
    this->initializeModel();
}

OAIAnalysisRuleList::~OAIAnalysisRuleList() {}

void OAIAnalysisRuleList::initializeModel() {

    m_join_columns_isSet = false;
    m_join_columns_isValid = false;

    m_allowed_join_operators_isSet = false;
    m_allowed_join_operators_isValid = false;

    m_list_columns_isSet = false;
    m_list_columns_isValid = false;
}

void OAIAnalysisRuleList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisRuleList::fromJsonObject(QJsonObject json) {

    m_join_columns_isValid = ::OpenAPI::fromJsonValue(m_join_columns, json[QString("joinColumns")]);
    m_join_columns_isSet = !json[QString("joinColumns")].isNull() && m_join_columns_isValid;

    m_allowed_join_operators_isValid = ::OpenAPI::fromJsonValue(m_allowed_join_operators, json[QString("allowedJoinOperators")]);
    m_allowed_join_operators_isSet = !json[QString("allowedJoinOperators")].isNull() && m_allowed_join_operators_isValid;

    m_list_columns_isValid = ::OpenAPI::fromJsonValue(m_list_columns, json[QString("listColumns")]);
    m_list_columns_isSet = !json[QString("listColumns")].isNull() && m_list_columns_isValid;
}

QString OAIAnalysisRuleList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisRuleList::asJsonObject() const {
    QJsonObject obj;
    if (m_join_columns.isSet()) {
        obj.insert(QString("joinColumns"), ::OpenAPI::toJsonValue(m_join_columns));
    }
    if (m_allowed_join_operators.isSet()) {
        obj.insert(QString("allowedJoinOperators"), ::OpenAPI::toJsonValue(m_allowed_join_operators));
    }
    if (m_list_columns.isSet()) {
        obj.insert(QString("listColumns"), ::OpenAPI::toJsonValue(m_list_columns));
    }
    return obj;
}

QList OAIAnalysisRuleList::getJoinColumns() const {
    return m_join_columns;
}
void OAIAnalysisRuleList::setJoinColumns(const QList &join_columns) {
    m_join_columns = join_columns;
    m_join_columns_isSet = true;
}

bool OAIAnalysisRuleList::is_join_columns_Set() const{
    return m_join_columns_isSet;
}

bool OAIAnalysisRuleList::is_join_columns_Valid() const{
    return m_join_columns_isValid;
}

QList OAIAnalysisRuleList::getAllowedJoinOperators() const {
    return m_allowed_join_operators;
}
void OAIAnalysisRuleList::setAllowedJoinOperators(const QList &allowed_join_operators) {
    m_allowed_join_operators = allowed_join_operators;
    m_allowed_join_operators_isSet = true;
}

bool OAIAnalysisRuleList::is_allowed_join_operators_Set() const{
    return m_allowed_join_operators_isSet;
}

bool OAIAnalysisRuleList::is_allowed_join_operators_Valid() const{
    return m_allowed_join_operators_isValid;
}

QList OAIAnalysisRuleList::getListColumns() const {
    return m_list_columns;
}
void OAIAnalysisRuleList::setListColumns(const QList &list_columns) {
    m_list_columns = list_columns;
    m_list_columns_isSet = true;
}

bool OAIAnalysisRuleList::is_list_columns_Set() const{
    return m_list_columns_isSet;
}

bool OAIAnalysisRuleList::is_list_columns_Valid() const{
    return m_list_columns_isValid;
}

bool OAIAnalysisRuleList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_join_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_join_operators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisRuleList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_join_columns_isValid && m_list_columns_isValid && true;
}

} // namespace OpenAPI
