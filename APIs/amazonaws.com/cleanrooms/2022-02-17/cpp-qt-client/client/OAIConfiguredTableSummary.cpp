/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguredTableSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguredTableSummary::OAIConfiguredTableSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguredTableSummary::OAIConfiguredTableSummary() {
    this->initializeModel();
}

OAIConfiguredTableSummary::~OAIConfiguredTableSummary() {}

void OAIConfiguredTableSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_analysis_rule_types_isSet = false;
    m_analysis_rule_types_isValid = false;

    m_analysis_method_isSet = false;
    m_analysis_method_isValid = false;
}

void OAIConfiguredTableSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguredTableSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_analysis_rule_types_isValid = ::OpenAPI::fromJsonValue(m_analysis_rule_types, json[QString("analysisRuleTypes")]);
    m_analysis_rule_types_isSet = !json[QString("analysisRuleTypes")].isNull() && m_analysis_rule_types_isValid;

    m_analysis_method_isValid = ::OpenAPI::fromJsonValue(m_analysis_method, json[QString("analysisMethod")]);
    m_analysis_method_isSet = !json[QString("analysisMethod")].isNull() && m_analysis_method_isValid;
}

QString OAIConfiguredTableSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguredTableSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_analysis_rule_types.isSet()) {
        obj.insert(QString("analysisRuleTypes"), ::OpenAPI::toJsonValue(m_analysis_rule_types));
    }
    if (m_analysis_method.isSet()) {
        obj.insert(QString("analysisMethod"), ::OpenAPI::toJsonValue(m_analysis_method));
    }
    return obj;
}

QString OAIConfiguredTableSummary::getId() const {
    return m_id;
}
void OAIConfiguredTableSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIConfiguredTableSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConfiguredTableSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConfiguredTableSummary::getArn() const {
    return m_arn;
}
void OAIConfiguredTableSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIConfiguredTableSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIConfiguredTableSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIConfiguredTableSummary::getName() const {
    return m_name;
}
void OAIConfiguredTableSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIConfiguredTableSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConfiguredTableSummary::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIConfiguredTableSummary::getCreateTime() const {
    return m_create_time;
}
void OAIConfiguredTableSummary::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIConfiguredTableSummary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIConfiguredTableSummary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIConfiguredTableSummary::getUpdateTime() const {
    return m_update_time;
}
void OAIConfiguredTableSummary::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConfiguredTableSummary::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConfiguredTableSummary::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList OAIConfiguredTableSummary::getAnalysisRuleTypes() const {
    return m_analysis_rule_types;
}
void OAIConfiguredTableSummary::setAnalysisRuleTypes(const QList &analysis_rule_types) {
    m_analysis_rule_types = analysis_rule_types;
    m_analysis_rule_types_isSet = true;
}

bool OAIConfiguredTableSummary::is_analysis_rule_types_Set() const{
    return m_analysis_rule_types_isSet;
}

bool OAIConfiguredTableSummary::is_analysis_rule_types_Valid() const{
    return m_analysis_rule_types_isValid;
}

OAIAnalysisMethod OAIConfiguredTableSummary::getAnalysisMethod() const {
    return m_analysis_method;
}
void OAIConfiguredTableSummary::setAnalysisMethod(const OAIAnalysisMethod &analysis_method) {
    m_analysis_method = analysis_method;
    m_analysis_method_isSet = true;
}

bool OAIConfiguredTableSummary::is_analysis_method_Set() const{
    return m_analysis_method_isSet;
}

bool OAIConfiguredTableSummary::is_analysis_method_Valid() const{
    return m_analysis_method_isValid;
}

bool OAIConfiguredTableSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_rule_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguredTableSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_arn_isValid && m_name_isValid && m_create_time_isValid && m_update_time_isValid && m_analysis_rule_types_isValid && m_analysis_method_isValid && true;
}

} // namespace OpenAPI
