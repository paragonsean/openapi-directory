/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMemberSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMemberSummary::OAIMemberSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMemberSummary::OAIMemberSummary() {
    this->initializeModel();
}

OAIMemberSummary::~OAIMemberSummary() {}

void OAIMemberSummary::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_abilities_isSet = false;
    m_abilities_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_membership_id_isSet = false;
    m_membership_id_isValid = false;

    m_membership_arn_isSet = false;
    m_membership_arn_isValid = false;
}

void OAIMemberSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMemberSummary::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_abilities_isValid = ::OpenAPI::fromJsonValue(m_abilities, json[QString("abilities")]);
    m_abilities_isSet = !json[QString("abilities")].isNull() && m_abilities_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_membership_id_isValid = ::OpenAPI::fromJsonValue(m_membership_id, json[QString("membershipId")]);
    m_membership_id_isSet = !json[QString("membershipId")].isNull() && m_membership_id_isValid;

    m_membership_arn_isValid = ::OpenAPI::fromJsonValue(m_membership_arn, json[QString("membershipArn")]);
    m_membership_arn_isSet = !json[QString("membershipArn")].isNull() && m_membership_arn_isValid;
}

QString OAIMemberSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMemberSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_abilities.isSet()) {
        obj.insert(QString("abilities"), ::OpenAPI::toJsonValue(m_abilities));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_membership_id_isSet) {
        obj.insert(QString("membershipId"), ::OpenAPI::toJsonValue(m_membership_id));
    }
    if (m_membership_arn_isSet) {
        obj.insert(QString("membershipArn"), ::OpenAPI::toJsonValue(m_membership_arn));
    }
    return obj;
}

QString OAIMemberSummary::getAccountId() const {
    return m_account_id;
}
void OAIMemberSummary::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIMemberSummary::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIMemberSummary::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIMemberStatus OAIMemberSummary::getStatus() const {
    return m_status;
}
void OAIMemberSummary::setStatus(const OAIMemberStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMemberSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMemberSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMemberSummary::getDisplayName() const {
    return m_display_name;
}
void OAIMemberSummary::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMemberSummary::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMemberSummary::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList OAIMemberSummary::getAbilities() const {
    return m_abilities;
}
void OAIMemberSummary::setAbilities(const QList &abilities) {
    m_abilities = abilities;
    m_abilities_isSet = true;
}

bool OAIMemberSummary::is_abilities_Set() const{
    return m_abilities_isSet;
}

bool OAIMemberSummary::is_abilities_Valid() const{
    return m_abilities_isValid;
}

QDateTime OAIMemberSummary::getCreateTime() const {
    return m_create_time;
}
void OAIMemberSummary::setCreateTime(const QDateTime &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMemberSummary::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMemberSummary::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QDateTime OAIMemberSummary::getUpdateTime() const {
    return m_update_time;
}
void OAIMemberSummary::setUpdateTime(const QDateTime &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMemberSummary::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMemberSummary::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIMemberSummary::getMembershipId() const {
    return m_membership_id;
}
void OAIMemberSummary::setMembershipId(const QString &membership_id) {
    m_membership_id = membership_id;
    m_membership_id_isSet = true;
}

bool OAIMemberSummary::is_membership_id_Set() const{
    return m_membership_id_isSet;
}

bool OAIMemberSummary::is_membership_id_Valid() const{
    return m_membership_id_isValid;
}

QString OAIMemberSummary::getMembershipArn() const {
    return m_membership_arn;
}
void OAIMemberSummary::setMembershipArn(const QString &membership_arn) {
    m_membership_arn = membership_arn;
    m_membership_arn_isSet = true;
}

bool OAIMemberSummary::is_membership_arn_Set() const{
    return m_membership_arn_isSet;
}

bool OAIMemberSummary::is_membership_arn_Valid() const{
    return m_membership_arn_isValid;
}

bool OAIMemberSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_abilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMemberSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_id_isValid && m_status_isValid && m_display_name_isValid && m_abilities_isValid && m_create_time_isValid && m_update_time_isValid && true;
}

} // namespace OpenAPI
