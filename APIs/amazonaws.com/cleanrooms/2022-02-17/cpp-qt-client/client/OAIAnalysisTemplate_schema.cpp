/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisTemplate_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisTemplate_schema::OAIAnalysisTemplate_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisTemplate_schema::OAIAnalysisTemplate_schema() {
    this->initializeModel();
}

OAIAnalysisTemplate_schema::~OAIAnalysisTemplate_schema() {}

void OAIAnalysisTemplate_schema::initializeModel() {

    m_referenced_tables_isSet = false;
    m_referenced_tables_isValid = false;
}

void OAIAnalysisTemplate_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisTemplate_schema::fromJsonObject(QJsonObject json) {

    m_referenced_tables_isValid = ::OpenAPI::fromJsonValue(m_referenced_tables, json[QString("referencedTables")]);
    m_referenced_tables_isSet = !json[QString("referencedTables")].isNull() && m_referenced_tables_isValid;
}

QString OAIAnalysisTemplate_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisTemplate_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_referenced_tables.isSet()) {
        obj.insert(QString("referencedTables"), ::OpenAPI::toJsonValue(m_referenced_tables));
    }
    return obj;
}

QList OAIAnalysisTemplate_schema::getReferencedTables() const {
    return m_referenced_tables;
}
void OAIAnalysisTemplate_schema::setReferencedTables(const QList &referenced_tables) {
    m_referenced_tables = referenced_tables;
    m_referenced_tables_isSet = true;
}

bool OAIAnalysisTemplate_schema::is_referenced_tables_Set() const{
    return m_referenced_tables_isSet;
}

bool OAIAnalysisTemplate_schema::is_referenced_tables_Valid() const{
    return m_referenced_tables_isValid;
}

bool OAIAnalysisTemplate_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_referenced_tables.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisTemplate_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
