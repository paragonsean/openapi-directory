/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQueryS3OutputConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQueryS3OutputConfiguration::OAIProtectedQueryS3OutputConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQueryS3OutputConfiguration::OAIProtectedQueryS3OutputConfiguration() {
    this->initializeModel();
}

OAIProtectedQueryS3OutputConfiguration::~OAIProtectedQueryS3OutputConfiguration() {}

void OAIProtectedQueryS3OutputConfiguration::initializeModel() {

    m_result_format_isSet = false;
    m_result_format_isValid = false;

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_key_prefix_isSet = false;
    m_key_prefix_isValid = false;
}

void OAIProtectedQueryS3OutputConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQueryS3OutputConfiguration::fromJsonObject(QJsonObject json) {

    m_result_format_isValid = ::OpenAPI::fromJsonValue(m_result_format, json[QString("resultFormat")]);
    m_result_format_isSet = !json[QString("resultFormat")].isNull() && m_result_format_isValid;

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_key_prefix_isValid = ::OpenAPI::fromJsonValue(m_key_prefix, json[QString("keyPrefix")]);
    m_key_prefix_isSet = !json[QString("keyPrefix")].isNull() && m_key_prefix_isValid;
}

QString OAIProtectedQueryS3OutputConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQueryS3OutputConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_result_format.isSet()) {
        obj.insert(QString("resultFormat"), ::OpenAPI::toJsonValue(m_result_format));
    }
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_key_prefix_isSet) {
        obj.insert(QString("keyPrefix"), ::OpenAPI::toJsonValue(m_key_prefix));
    }
    return obj;
}

OAIResultFormat OAIProtectedQueryS3OutputConfiguration::getResultFormat() const {
    return m_result_format;
}
void OAIProtectedQueryS3OutputConfiguration::setResultFormat(const OAIResultFormat &result_format) {
    m_result_format = result_format;
    m_result_format_isSet = true;
}

bool OAIProtectedQueryS3OutputConfiguration::is_result_format_Set() const{
    return m_result_format_isSet;
}

bool OAIProtectedQueryS3OutputConfiguration::is_result_format_Valid() const{
    return m_result_format_isValid;
}

QString OAIProtectedQueryS3OutputConfiguration::getBucket() const {
    return m_bucket;
}
void OAIProtectedQueryS3OutputConfiguration::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAIProtectedQueryS3OutputConfiguration::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAIProtectedQueryS3OutputConfiguration::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAIProtectedQueryS3OutputConfiguration::getKeyPrefix() const {
    return m_key_prefix;
}
void OAIProtectedQueryS3OutputConfiguration::setKeyPrefix(const QString &key_prefix) {
    m_key_prefix = key_prefix;
    m_key_prefix_isSet = true;
}

bool OAIProtectedQueryS3OutputConfiguration::is_key_prefix_Set() const{
    return m_key_prefix_isSet;
}

bool OAIProtectedQueryS3OutputConfiguration::is_key_prefix_Valid() const{
    return m_key_prefix_isValid;
}

bool OAIProtectedQueryS3OutputConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQueryS3OutputConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_result_format_isValid && m_bucket_isValid && true;
}

} // namespace OpenAPI
