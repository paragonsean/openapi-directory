/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetSchemaInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetSchemaInput::OAIBatchGetSchemaInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetSchemaInput::OAIBatchGetSchemaInput() {
    this->initializeModel();
}

OAIBatchGetSchemaInput::~OAIBatchGetSchemaInput() {}

void OAIBatchGetSchemaInput::initializeModel() {

    m_names_isSet = false;
    m_names_isValid = false;
}

void OAIBatchGetSchemaInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetSchemaInput::fromJsonObject(QJsonObject json) {

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;
}

QString OAIBatchGetSchemaInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetSchemaInput::asJsonObject() const {
    QJsonObject obj;
    if (m_names.isSet()) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    return obj;
}

QList OAIBatchGetSchemaInput::getNames() const {
    return m_names;
}
void OAIBatchGetSchemaInput::setNames(const QList &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIBatchGetSchemaInput::is_names_Set() const{
    return m_names_isSet;
}

bool OAIBatchGetSchemaInput::is_names_Valid() const{
    return m_names_isValid;
}

bool OAIBatchGetSchemaInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetSchemaInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_names_isValid && true;
}

} // namespace OpenAPI
