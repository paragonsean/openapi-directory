/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisRulePolicyV1_custom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisRulePolicyV1_custom::OAIAnalysisRulePolicyV1_custom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisRulePolicyV1_custom::OAIAnalysisRulePolicyV1_custom() {
    this->initializeModel();
}

OAIAnalysisRulePolicyV1_custom::~OAIAnalysisRulePolicyV1_custom() {}

void OAIAnalysisRulePolicyV1_custom::initializeModel() {

    m_allowed_analyses_isSet = false;
    m_allowed_analyses_isValid = false;

    m_allowed_analysis_providers_isSet = false;
    m_allowed_analysis_providers_isValid = false;
}

void OAIAnalysisRulePolicyV1_custom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisRulePolicyV1_custom::fromJsonObject(QJsonObject json) {

    m_allowed_analyses_isValid = ::OpenAPI::fromJsonValue(m_allowed_analyses, json[QString("allowedAnalyses")]);
    m_allowed_analyses_isSet = !json[QString("allowedAnalyses")].isNull() && m_allowed_analyses_isValid;

    m_allowed_analysis_providers_isValid = ::OpenAPI::fromJsonValue(m_allowed_analysis_providers, json[QString("allowedAnalysisProviders")]);
    m_allowed_analysis_providers_isSet = !json[QString("allowedAnalysisProviders")].isNull() && m_allowed_analysis_providers_isValid;
}

QString OAIAnalysisRulePolicyV1_custom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisRulePolicyV1_custom::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_analyses.isSet()) {
        obj.insert(QString("allowedAnalyses"), ::OpenAPI::toJsonValue(m_allowed_analyses));
    }
    if (m_allowed_analysis_providers.isSet()) {
        obj.insert(QString("allowedAnalysisProviders"), ::OpenAPI::toJsonValue(m_allowed_analysis_providers));
    }
    return obj;
}

QList OAIAnalysisRulePolicyV1_custom::getAllowedAnalyses() const {
    return m_allowed_analyses;
}
void OAIAnalysisRulePolicyV1_custom::setAllowedAnalyses(const QList &allowed_analyses) {
    m_allowed_analyses = allowed_analyses;
    m_allowed_analyses_isSet = true;
}

bool OAIAnalysisRulePolicyV1_custom::is_allowed_analyses_Set() const{
    return m_allowed_analyses_isSet;
}

bool OAIAnalysisRulePolicyV1_custom::is_allowed_analyses_Valid() const{
    return m_allowed_analyses_isValid;
}

QList OAIAnalysisRulePolicyV1_custom::getAllowedAnalysisProviders() const {
    return m_allowed_analysis_providers;
}
void OAIAnalysisRulePolicyV1_custom::setAllowedAnalysisProviders(const QList &allowed_analysis_providers) {
    m_allowed_analysis_providers = allowed_analysis_providers;
    m_allowed_analysis_providers_isSet = true;
}

bool OAIAnalysisRulePolicyV1_custom::is_allowed_analysis_providers_Set() const{
    return m_allowed_analysis_providers_isSet;
}

bool OAIAnalysisRulePolicyV1_custom::is_allowed_analysis_providers_Valid() const{
    return m_allowed_analysis_providers_isValid;
}

bool OAIAnalysisRulePolicyV1_custom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_analyses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_analysis_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisRulePolicyV1_custom::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_analyses_isValid && true;
}

} // namespace OpenAPI
