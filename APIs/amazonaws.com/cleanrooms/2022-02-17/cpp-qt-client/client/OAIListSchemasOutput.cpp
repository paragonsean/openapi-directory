/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSchemasOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSchemasOutput::OAIListSchemasOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSchemasOutput::OAIListSchemasOutput() {
    this->initializeModel();
}

OAIListSchemasOutput::~OAIListSchemasOutput() {}

void OAIListSchemasOutput::initializeModel() {

    m_schema_summaries_isSet = false;
    m_schema_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListSchemasOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSchemasOutput::fromJsonObject(QJsonObject json) {

    m_schema_summaries_isValid = ::OpenAPI::fromJsonValue(m_schema_summaries, json[QString("schemaSummaries")]);
    m_schema_summaries_isSet = !json[QString("schemaSummaries")].isNull() && m_schema_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListSchemasOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSchemasOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_summaries.isSet()) {
        obj.insert(QString("schemaSummaries"), ::OpenAPI::toJsonValue(m_schema_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListSchemasOutput::getSchemaSummaries() const {
    return m_schema_summaries;
}
void OAIListSchemasOutput::setSchemaSummaries(const QList &schema_summaries) {
    m_schema_summaries = schema_summaries;
    m_schema_summaries_isSet = true;
}

bool OAIListSchemasOutput::is_schema_summaries_Set() const{
    return m_schema_summaries_isSet;
}

bool OAIListSchemasOutput::is_schema_summaries_Valid() const{
    return m_schema_summaries_isValid;
}

QString OAIListSchemasOutput::getNextToken() const {
    return m_next_token;
}
void OAIListSchemasOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSchemasOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSchemasOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListSchemasOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSchemasOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_summaries_isValid && true;
}

} // namespace OpenAPI
