/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetSchema_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetSchema_request::OAIBatchGetSchema_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetSchema_request::OAIBatchGetSchema_request() {
    this->initializeModel();
}

OAIBatchGetSchema_request::~OAIBatchGetSchema_request() {}

void OAIBatchGetSchema_request::initializeModel() {

    m_names_isSet = false;
    m_names_isValid = false;
}

void OAIBatchGetSchema_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetSchema_request::fromJsonObject(QJsonObject json) {

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;
}

QString OAIBatchGetSchema_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetSchema_request::asJsonObject() const {
    QJsonObject obj;
    if (m_names.size() > 0) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    return obj;
}

QList<QString> OAIBatchGetSchema_request::getNames() const {
    return m_names;
}
void OAIBatchGetSchema_request::setNames(const QList<QString> &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIBatchGetSchema_request::is_names_Set() const{
    return m_names_isSet;
}

bool OAIBatchGetSchema_request::is_names_Valid() const{
    return m_names_isValid;
}

bool OAIBatchGetSchema_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetSchema_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_names_isValid && true;
}

} // namespace OpenAPI
