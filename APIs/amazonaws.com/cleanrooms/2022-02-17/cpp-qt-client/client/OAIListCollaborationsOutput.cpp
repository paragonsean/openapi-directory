/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCollaborationsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCollaborationsOutput::OAIListCollaborationsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCollaborationsOutput::OAIListCollaborationsOutput() {
    this->initializeModel();
}

OAIListCollaborationsOutput::~OAIListCollaborationsOutput() {}

void OAIListCollaborationsOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_collaboration_list_isSet = false;
    m_collaboration_list_isValid = false;
}

void OAIListCollaborationsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCollaborationsOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_collaboration_list_isValid = ::OpenAPI::fromJsonValue(m_collaboration_list, json[QString("collaborationList")]);
    m_collaboration_list_isSet = !json[QString("collaborationList")].isNull() && m_collaboration_list_isValid;
}

QString OAIListCollaborationsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCollaborationsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_collaboration_list.isSet()) {
        obj.insert(QString("collaborationList"), ::OpenAPI::toJsonValue(m_collaboration_list));
    }
    return obj;
}

QString OAIListCollaborationsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListCollaborationsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCollaborationsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCollaborationsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListCollaborationsOutput::getCollaborationList() const {
    return m_collaboration_list;
}
void OAIListCollaborationsOutput::setCollaborationList(const QList &collaboration_list) {
    m_collaboration_list = collaboration_list;
    m_collaboration_list_isSet = true;
}

bool OAIListCollaborationsOutput::is_collaboration_list_Set() const{
    return m_collaboration_list_isSet;
}

bool OAIListCollaborationsOutput::is_collaboration_list_Valid() const{
    return m_collaboration_list_isValid;
}

bool OAIListCollaborationsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collaboration_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCollaborationsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaboration_list_isValid && true;
}

} // namespace OpenAPI
