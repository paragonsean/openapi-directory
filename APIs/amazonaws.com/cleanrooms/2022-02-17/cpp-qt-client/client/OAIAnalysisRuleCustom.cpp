/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisRuleCustom.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisRuleCustom::OAIAnalysisRuleCustom(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisRuleCustom::OAIAnalysisRuleCustom() {
    this->initializeModel();
}

OAIAnalysisRuleCustom::~OAIAnalysisRuleCustom() {}

void OAIAnalysisRuleCustom::initializeModel() {

    m_allowed_analyses_isSet = false;
    m_allowed_analyses_isValid = false;

    m_allowed_analysis_providers_isSet = false;
    m_allowed_analysis_providers_isValid = false;
}

void OAIAnalysisRuleCustom::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisRuleCustom::fromJsonObject(QJsonObject json) {

    m_allowed_analyses_isValid = ::OpenAPI::fromJsonValue(m_allowed_analyses, json[QString("allowedAnalyses")]);
    m_allowed_analyses_isSet = !json[QString("allowedAnalyses")].isNull() && m_allowed_analyses_isValid;

    m_allowed_analysis_providers_isValid = ::OpenAPI::fromJsonValue(m_allowed_analysis_providers, json[QString("allowedAnalysisProviders")]);
    m_allowed_analysis_providers_isSet = !json[QString("allowedAnalysisProviders")].isNull() && m_allowed_analysis_providers_isValid;
}

QString OAIAnalysisRuleCustom::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisRuleCustom::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_analyses.isSet()) {
        obj.insert(QString("allowedAnalyses"), ::OpenAPI::toJsonValue(m_allowed_analyses));
    }
    if (m_allowed_analysis_providers.isSet()) {
        obj.insert(QString("allowedAnalysisProviders"), ::OpenAPI::toJsonValue(m_allowed_analysis_providers));
    }
    return obj;
}

QList OAIAnalysisRuleCustom::getAllowedAnalyses() const {
    return m_allowed_analyses;
}
void OAIAnalysisRuleCustom::setAllowedAnalyses(const QList &allowed_analyses) {
    m_allowed_analyses = allowed_analyses;
    m_allowed_analyses_isSet = true;
}

bool OAIAnalysisRuleCustom::is_allowed_analyses_Set() const{
    return m_allowed_analyses_isSet;
}

bool OAIAnalysisRuleCustom::is_allowed_analyses_Valid() const{
    return m_allowed_analyses_isValid;
}

QList OAIAnalysisRuleCustom::getAllowedAnalysisProviders() const {
    return m_allowed_analysis_providers;
}
void OAIAnalysisRuleCustom::setAllowedAnalysisProviders(const QList &allowed_analysis_providers) {
    m_allowed_analysis_providers = allowed_analysis_providers;
    m_allowed_analysis_providers_isSet = true;
}

bool OAIAnalysisRuleCustom::is_allowed_analysis_providers_Set() const{
    return m_allowed_analysis_providers_isSet;
}

bool OAIAnalysisRuleCustom::is_allowed_analysis_providers_Valid() const{
    return m_allowed_analysis_providers_isValid;
}

bool OAIAnalysisRuleCustom::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_analyses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_analysis_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisRuleCustom::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_analyses_isValid && true;
}

} // namespace OpenAPI
