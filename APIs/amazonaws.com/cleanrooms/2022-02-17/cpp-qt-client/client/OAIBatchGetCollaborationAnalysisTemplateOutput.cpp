/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetCollaborationAnalysisTemplateOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetCollaborationAnalysisTemplateOutput::OAIBatchGetCollaborationAnalysisTemplateOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetCollaborationAnalysisTemplateOutput::OAIBatchGetCollaborationAnalysisTemplateOutput() {
    this->initializeModel();
}

OAIBatchGetCollaborationAnalysisTemplateOutput::~OAIBatchGetCollaborationAnalysisTemplateOutput() {}

void OAIBatchGetCollaborationAnalysisTemplateOutput::initializeModel() {

    m_collaboration_analysis_templates_isSet = false;
    m_collaboration_analysis_templates_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIBatchGetCollaborationAnalysisTemplateOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetCollaborationAnalysisTemplateOutput::fromJsonObject(QJsonObject json) {

    m_collaboration_analysis_templates_isValid = ::OpenAPI::fromJsonValue(m_collaboration_analysis_templates, json[QString("collaborationAnalysisTemplates")]);
    m_collaboration_analysis_templates_isSet = !json[QString("collaborationAnalysisTemplates")].isNull() && m_collaboration_analysis_templates_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAIBatchGetCollaborationAnalysisTemplateOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetCollaborationAnalysisTemplateOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_collaboration_analysis_templates.isSet()) {
        obj.insert(QString("collaborationAnalysisTemplates"), ::OpenAPI::toJsonValue(m_collaboration_analysis_templates));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

QList OAIBatchGetCollaborationAnalysisTemplateOutput::getCollaborationAnalysisTemplates() const {
    return m_collaboration_analysis_templates;
}
void OAIBatchGetCollaborationAnalysisTemplateOutput::setCollaborationAnalysisTemplates(const QList &collaboration_analysis_templates) {
    m_collaboration_analysis_templates = collaboration_analysis_templates;
    m_collaboration_analysis_templates_isSet = true;
}

bool OAIBatchGetCollaborationAnalysisTemplateOutput::is_collaboration_analysis_templates_Set() const{
    return m_collaboration_analysis_templates_isSet;
}

bool OAIBatchGetCollaborationAnalysisTemplateOutput::is_collaboration_analysis_templates_Valid() const{
    return m_collaboration_analysis_templates_isValid;
}

QList OAIBatchGetCollaborationAnalysisTemplateOutput::getErrors() const {
    return m_errors;
}
void OAIBatchGetCollaborationAnalysisTemplateOutput::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchGetCollaborationAnalysisTemplateOutput::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchGetCollaborationAnalysisTemplateOutput::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIBatchGetCollaborationAnalysisTemplateOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaboration_analysis_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetCollaborationAnalysisTemplateOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collaboration_analysis_templates_isValid && m_errors_isValid && true;
}

} // namespace OpenAPI
