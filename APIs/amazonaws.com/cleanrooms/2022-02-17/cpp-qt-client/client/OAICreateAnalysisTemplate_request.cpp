/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAnalysisTemplate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAnalysisTemplate_request::OAICreateAnalysisTemplate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAnalysisTemplate_request::OAICreateAnalysisTemplate_request() {
    this->initializeModel();
}

OAICreateAnalysisTemplate_request::~OAICreateAnalysisTemplate_request() {}

void OAICreateAnalysisTemplate_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_analysis_parameters_isSet = false;
    m_analysis_parameters_isValid = false;
}

void OAICreateAnalysisTemplate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAnalysisTemplate_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_analysis_parameters_isValid = ::OpenAPI::fromJsonValue(m_analysis_parameters, json[QString("analysisParameters")]);
    m_analysis_parameters_isSet = !json[QString("analysisParameters")].isNull() && m_analysis_parameters_isValid;
}

QString OAICreateAnalysisTemplate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAnalysisTemplate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_analysis_parameters.size() > 0) {
        obj.insert(QString("analysisParameters"), ::OpenAPI::toJsonValue(m_analysis_parameters));
    }
    return obj;
}

QString OAICreateAnalysisTemplate_request::getDescription() const {
    return m_description;
}
void OAICreateAnalysisTemplate_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAnalysisTemplate_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAnalysisTemplate_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAnalysisTemplate_request::getName() const {
    return m_name;
}
void OAICreateAnalysisTemplate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAnalysisTemplate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAnalysisTemplate_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAnalysisTemplate_request::getFormat() const {
    return m_format;
}
void OAICreateAnalysisTemplate_request::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICreateAnalysisTemplate_request::is_format_Set() const{
    return m_format_isSet;
}

bool OAICreateAnalysisTemplate_request::is_format_Valid() const{
    return m_format_isValid;
}

OAICreateAnalysisTemplate_request_source OAICreateAnalysisTemplate_request::getSource() const {
    return m_source;
}
void OAICreateAnalysisTemplate_request::setSource(const OAICreateAnalysisTemplate_request_source &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAICreateAnalysisTemplate_request::is_source_Set() const{
    return m_source_isSet;
}

bool OAICreateAnalysisTemplate_request::is_source_Valid() const{
    return m_source_isValid;
}

QMap<QString, QString> OAICreateAnalysisTemplate_request::getTags() const {
    return m_tags;
}
void OAICreateAnalysisTemplate_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAnalysisTemplate_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAnalysisTemplate_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIAnalysisParameter> OAICreateAnalysisTemplate_request::getAnalysisParameters() const {
    return m_analysis_parameters;
}
void OAICreateAnalysisTemplate_request::setAnalysisParameters(const QList<OAIAnalysisParameter> &analysis_parameters) {
    m_analysis_parameters = analysis_parameters;
    m_analysis_parameters_isSet = true;
}

bool OAICreateAnalysisTemplate_request::is_analysis_parameters_Set() const{
    return m_analysis_parameters_isSet;
}

bool OAICreateAnalysisTemplate_request::is_analysis_parameters_Valid() const{
    return m_analysis_parameters_isValid;
}

bool OAICreateAnalysisTemplate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAnalysisTemplate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_format_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
