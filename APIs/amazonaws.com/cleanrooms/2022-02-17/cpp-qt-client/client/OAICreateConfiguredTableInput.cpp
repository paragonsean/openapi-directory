/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateConfiguredTableInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateConfiguredTableInput::OAICreateConfiguredTableInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateConfiguredTableInput::OAICreateConfiguredTableInput() {
    this->initializeModel();
}

OAICreateConfiguredTableInput::~OAICreateConfiguredTableInput() {}

void OAICreateConfiguredTableInput::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_table_reference_isSet = false;
    m_table_reference_isValid = false;

    m_allowed_columns_isSet = false;
    m_allowed_columns_isValid = false;

    m_analysis_method_isSet = false;
    m_analysis_method_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateConfiguredTableInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateConfiguredTableInput::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_table_reference_isValid = ::OpenAPI::fromJsonValue(m_table_reference, json[QString("tableReference")]);
    m_table_reference_isSet = !json[QString("tableReference")].isNull() && m_table_reference_isValid;

    m_allowed_columns_isValid = ::OpenAPI::fromJsonValue(m_allowed_columns, json[QString("allowedColumns")]);
    m_allowed_columns_isSet = !json[QString("allowedColumns")].isNull() && m_allowed_columns_isValid;

    m_analysis_method_isValid = ::OpenAPI::fromJsonValue(m_analysis_method, json[QString("analysisMethod")]);
    m_analysis_method_isSet = !json[QString("analysisMethod")].isNull() && m_analysis_method_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateConfiguredTableInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateConfiguredTableInput::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_table_reference.isSet()) {
        obj.insert(QString("tableReference"), ::OpenAPI::toJsonValue(m_table_reference));
    }
    if (m_allowed_columns.isSet()) {
        obj.insert(QString("allowedColumns"), ::OpenAPI::toJsonValue(m_allowed_columns));
    }
    if (m_analysis_method.isSet()) {
        obj.insert(QString("analysisMethod"), ::OpenAPI::toJsonValue(m_analysis_method));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateConfiguredTableInput::getName() const {
    return m_name;
}
void OAICreateConfiguredTableInput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateConfiguredTableInput::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateConfiguredTableInput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateConfiguredTableInput::getDescription() const {
    return m_description;
}
void OAICreateConfiguredTableInput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateConfiguredTableInput::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateConfiguredTableInput::is_description_Valid() const{
    return m_description_isValid;
}

OAICreateConfiguredTableInput_tableReference OAICreateConfiguredTableInput::getTableReference() const {
    return m_table_reference;
}
void OAICreateConfiguredTableInput::setTableReference(const OAICreateConfiguredTableInput_tableReference &table_reference) {
    m_table_reference = table_reference;
    m_table_reference_isSet = true;
}

bool OAICreateConfiguredTableInput::is_table_reference_Set() const{
    return m_table_reference_isSet;
}

bool OAICreateConfiguredTableInput::is_table_reference_Valid() const{
    return m_table_reference_isValid;
}

QList OAICreateConfiguredTableInput::getAllowedColumns() const {
    return m_allowed_columns;
}
void OAICreateConfiguredTableInput::setAllowedColumns(const QList &allowed_columns) {
    m_allowed_columns = allowed_columns;
    m_allowed_columns_isSet = true;
}

bool OAICreateConfiguredTableInput::is_allowed_columns_Set() const{
    return m_allowed_columns_isSet;
}

bool OAICreateConfiguredTableInput::is_allowed_columns_Valid() const{
    return m_allowed_columns_isValid;
}

OAIAnalysisMethod OAICreateConfiguredTableInput::getAnalysisMethod() const {
    return m_analysis_method;
}
void OAICreateConfiguredTableInput::setAnalysisMethod(const OAIAnalysisMethod &analysis_method) {
    m_analysis_method = analysis_method;
    m_analysis_method_isSet = true;
}

bool OAICreateConfiguredTableInput::is_analysis_method_Set() const{
    return m_analysis_method_isSet;
}

bool OAICreateConfiguredTableInput::is_analysis_method_Valid() const{
    return m_analysis_method_isValid;
}

QMap OAICreateConfiguredTableInput::getTags() const {
    return m_tags;
}
void OAICreateConfiguredTableInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateConfiguredTableInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateConfiguredTableInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateConfiguredTableInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_analysis_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateConfiguredTableInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_table_reference_isValid && m_allowed_columns_isValid && m_analysis_method_isValid && true;
}

} // namespace OpenAPI
