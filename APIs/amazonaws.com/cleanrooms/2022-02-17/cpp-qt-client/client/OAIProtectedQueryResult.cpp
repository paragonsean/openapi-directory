/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQueryResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQueryResult::OAIProtectedQueryResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQueryResult::OAIProtectedQueryResult() {
    this->initializeModel();
}

OAIProtectedQueryResult::~OAIProtectedQueryResult() {}

void OAIProtectedQueryResult::initializeModel() {

    m_output_isSet = false;
    m_output_isValid = false;
}

void OAIProtectedQueryResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQueryResult::fromJsonObject(QJsonObject json) {

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;
}

QString OAIProtectedQueryResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQueryResult::asJsonObject() const {
    QJsonObject obj;
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    return obj;
}

OAIProtectedQueryResult_output OAIProtectedQueryResult::getOutput() const {
    return m_output;
}
void OAIProtectedQueryResult::setOutput(const OAIProtectedQueryResult_output &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIProtectedQueryResult::is_output_Set() const{
    return m_output_isSet;
}

bool OAIProtectedQueryResult::is_output_Valid() const{
    return m_output_isValid;
}

bool OAIProtectedQueryResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQueryResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_isValid && true;
}

} // namespace OpenAPI
