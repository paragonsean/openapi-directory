/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQuery_result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQuery_result::OAIProtectedQuery_result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQuery_result::OAIProtectedQuery_result() {
    this->initializeModel();
}

OAIProtectedQuery_result::~OAIProtectedQuery_result() {}

void OAIProtectedQuery_result::initializeModel() {

    m_output_isSet = false;
    m_output_isValid = false;
}

void OAIProtectedQuery_result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQuery_result::fromJsonObject(QJsonObject json) {

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;
}

QString OAIProtectedQuery_result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQuery_result::asJsonObject() const {
    QJsonObject obj;
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    return obj;
}

OAIProtectedQueryResult_output OAIProtectedQuery_result::getOutput() const {
    return m_output;
}
void OAIProtectedQuery_result::setOutput(const OAIProtectedQueryResult_output &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIProtectedQuery_result::is_output_Set() const{
    return m_output_isSet;
}

bool OAIProtectedQuery_result::is_output_Valid() const{
    return m_output_isValid;
}

bool OAIProtectedQuery_result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQuery_result::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_isValid && true;
}

} // namespace OpenAPI
