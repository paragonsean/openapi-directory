/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregationConstraint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregationConstraint::OAIAggregationConstraint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregationConstraint::OAIAggregationConstraint() {
    this->initializeModel();
}

OAIAggregationConstraint::~OAIAggregationConstraint() {}

void OAIAggregationConstraint::initializeModel() {

    m_column_name_isSet = false;
    m_column_name_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAggregationConstraint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregationConstraint::fromJsonObject(QJsonObject json) {

    m_column_name_isValid = ::OpenAPI::fromJsonValue(m_column_name, json[QString("columnName")]);
    m_column_name_isSet = !json[QString("columnName")].isNull() && m_column_name_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAggregationConstraint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregationConstraint::asJsonObject() const {
    QJsonObject obj;
    if (m_column_name_isSet) {
        obj.insert(QString("columnName"), ::OpenAPI::toJsonValue(m_column_name));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAggregationConstraint::getColumnName() const {
    return m_column_name;
}
void OAIAggregationConstraint::setColumnName(const QString &column_name) {
    m_column_name = column_name;
    m_column_name_isSet = true;
}

bool OAIAggregationConstraint::is_column_name_Set() const{
    return m_column_name_isSet;
}

bool OAIAggregationConstraint::is_column_name_Valid() const{
    return m_column_name_isValid;
}

qint32 OAIAggregationConstraint::getMinimum() const {
    return m_minimum;
}
void OAIAggregationConstraint::setMinimum(const qint32 &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIAggregationConstraint::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIAggregationConstraint::is_minimum_Valid() const{
    return m_minimum_isValid;
}

OAIAggregationType OAIAggregationConstraint::getType() const {
    return m_type;
}
void OAIAggregationConstraint::setType(const OAIAggregationType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAggregationConstraint::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAggregationConstraint::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAggregationConstraint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregationConstraint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_column_name_isValid && m_minimum_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
