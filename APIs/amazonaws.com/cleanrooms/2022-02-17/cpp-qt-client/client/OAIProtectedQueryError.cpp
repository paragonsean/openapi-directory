/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProtectedQueryError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProtectedQueryError::OAIProtectedQueryError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProtectedQueryError::OAIProtectedQueryError() {
    this->initializeModel();
}

OAIProtectedQueryError::~OAIProtectedQueryError() {}

void OAIProtectedQueryError::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;
}

void OAIProtectedQueryError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProtectedQueryError::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;
}

QString OAIProtectedQueryError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProtectedQueryError::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    return obj;
}

QString OAIProtectedQueryError::getMessage() const {
    return m_message;
}
void OAIProtectedQueryError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIProtectedQueryError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIProtectedQueryError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIProtectedQueryError::getCode() const {
    return m_code;
}
void OAIProtectedQueryError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProtectedQueryError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProtectedQueryError::is_code_Valid() const{
    return m_code_isValid;
}

bool OAIProtectedQueryError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProtectedQueryError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_code_isValid && true;
}

} // namespace OpenAPI
