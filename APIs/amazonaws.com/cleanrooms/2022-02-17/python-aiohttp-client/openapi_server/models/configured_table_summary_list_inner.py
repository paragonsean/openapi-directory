# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_method import AnalysisMethod
from openapi_server import util


class ConfiguredTableSummaryListInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, name: str=None, create_time: datetime=None, update_time: datetime=None, analysis_rule_types: List=None, analysis_method: AnalysisMethod=None):
        """ConfiguredTableSummaryListInner - a model defined in OpenAPI

        :param id: The id of this ConfiguredTableSummaryListInner.
        :param arn: The arn of this ConfiguredTableSummaryListInner.
        :param name: The name of this ConfiguredTableSummaryListInner.
        :param create_time: The create_time of this ConfiguredTableSummaryListInner.
        :param update_time: The update_time of this ConfiguredTableSummaryListInner.
        :param analysis_rule_types: The analysis_rule_types of this ConfiguredTableSummaryListInner.
        :param analysis_method: The analysis_method of this ConfiguredTableSummaryListInner.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'name': str,
            'create_time': datetime,
            'update_time': datetime,
            'analysis_rule_types': List,
            'analysis_method': AnalysisMethod
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'name': 'name',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'analysis_rule_types': 'analysisRuleTypes',
            'analysis_method': 'analysisMethod'
        }

        self._id = id
        self._arn = arn
        self._name = name
        self._create_time = create_time
        self._update_time = update_time
        self._analysis_rule_types = analysis_rule_types
        self._analysis_method = analysis_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfiguredTableSummaryListInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfiguredTableSummaryList_inner of this ConfiguredTableSummaryListInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ConfiguredTableSummaryListInner.


        :return: The id of this ConfiguredTableSummaryListInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfiguredTableSummaryListInner.


        :param id: The id of this ConfiguredTableSummaryListInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this ConfiguredTableSummaryListInner.


        :return: The arn of this ConfiguredTableSummaryListInner.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this ConfiguredTableSummaryListInner.


        :param arn: The arn of this ConfiguredTableSummaryListInner.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this ConfiguredTableSummaryListInner.


        :return: The name of this ConfiguredTableSummaryListInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfiguredTableSummaryListInner.


        :param name: The name of this ConfiguredTableSummaryListInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def create_time(self):
        """Gets the create_time of this ConfiguredTableSummaryListInner.


        :return: The create_time of this ConfiguredTableSummaryListInner.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConfiguredTableSummaryListInner.


        :param create_time: The create_time of this ConfiguredTableSummaryListInner.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ConfiguredTableSummaryListInner.


        :return: The update_time of this ConfiguredTableSummaryListInner.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConfiguredTableSummaryListInner.


        :param update_time: The update_time of this ConfiguredTableSummaryListInner.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def analysis_rule_types(self):
        """Gets the analysis_rule_types of this ConfiguredTableSummaryListInner.


        :return: The analysis_rule_types of this ConfiguredTableSummaryListInner.
        :rtype: List
        """
        return self._analysis_rule_types

    @analysis_rule_types.setter
    def analysis_rule_types(self, analysis_rule_types):
        """Sets the analysis_rule_types of this ConfiguredTableSummaryListInner.


        :param analysis_rule_types: The analysis_rule_types of this ConfiguredTableSummaryListInner.
        :type analysis_rule_types: List
        """
        if analysis_rule_types is None:
            raise ValueError("Invalid value for `analysis_rule_types`, must not be `None`")

        self._analysis_rule_types = analysis_rule_types

    @property
    def analysis_method(self):
        """Gets the analysis_method of this ConfiguredTableSummaryListInner.


        :return: The analysis_method of this ConfiguredTableSummaryListInner.
        :rtype: AnalysisMethod
        """
        return self._analysis_method

    @analysis_method.setter
    def analysis_method(self, analysis_method):
        """Sets the analysis_method of this ConfiguredTableSummaryListInner.


        :param analysis_method: The analysis_method of this ConfiguredTableSummaryListInner.
        :type analysis_method: AnalysisMethod
        """
        if analysis_method is None:
            raise ValueError("Invalid value for `analysis_method`, must not be `None`")

        self._analysis_method = analysis_method
