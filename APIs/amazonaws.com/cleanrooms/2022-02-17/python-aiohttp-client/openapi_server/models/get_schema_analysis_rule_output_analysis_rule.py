# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_rule_policy import AnalysisRulePolicy
from openapi_server.models.analysis_rule_type import AnalysisRuleType
from openapi_server import util


class GetSchemaAnalysisRuleOutputAnalysisRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaboration_id: str=None, type: AnalysisRuleType=None, name: str=None, create_time: datetime=None, update_time: datetime=None, policy: AnalysisRulePolicy=None):
        """GetSchemaAnalysisRuleOutputAnalysisRule - a model defined in OpenAPI

        :param collaboration_id: The collaboration_id of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :param type: The type of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :param name: The name of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :param create_time: The create_time of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :param update_time: The update_time of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :param policy: The policy of this GetSchemaAnalysisRuleOutputAnalysisRule.
        """
        self.openapi_types = {
            'collaboration_id': str,
            'type': AnalysisRuleType,
            'name': str,
            'create_time': datetime,
            'update_time': datetime,
            'policy': AnalysisRulePolicy
        }

        self.attribute_map = {
            'collaboration_id': 'collaborationId',
            'type': 'type',
            'name': 'name',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'policy': 'policy'
        }

        self._collaboration_id = collaboration_id
        self._type = type
        self._name = name
        self._create_time = create_time
        self._update_time = update_time
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSchemaAnalysisRuleOutputAnalysisRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSchemaAnalysisRuleOutput_analysisRule of this GetSchemaAnalysisRuleOutputAnalysisRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaboration_id(self):
        """Gets the collaboration_id of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :return: The collaboration_id of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :rtype: str
        """
        return self._collaboration_id

    @collaboration_id.setter
    def collaboration_id(self, collaboration_id):
        """Sets the collaboration_id of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :param collaboration_id: The collaboration_id of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :type collaboration_id: str
        """
        if collaboration_id is None:
            raise ValueError("Invalid value for `collaboration_id`, must not be `None`")

        self._collaboration_id = collaboration_id

    @property
    def type(self):
        """Gets the type of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :return: The type of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :rtype: AnalysisRuleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :param type: The type of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :type type: AnalysisRuleType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def name(self):
        """Gets the name of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :return: The name of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :param name: The name of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def create_time(self):
        """Gets the create_time of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :return: The create_time of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :param create_time: The create_time of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :return: The update_time of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :param update_time: The update_time of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def policy(self):
        """Gets the policy of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :return: The policy of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :rtype: AnalysisRulePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this GetSchemaAnalysisRuleOutputAnalysisRule.


        :param policy: The policy of this GetSchemaAnalysisRuleOutputAnalysisRule.
        :type policy: AnalysisRulePolicy
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy
