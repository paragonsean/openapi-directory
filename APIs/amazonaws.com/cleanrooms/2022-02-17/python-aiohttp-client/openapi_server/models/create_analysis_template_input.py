# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_format import AnalysisFormat
from openapi_server.models.create_analysis_template_input_source import CreateAnalysisTemplateInputSource
from openapi_server import util


class CreateAnalysisTemplateInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, format: AnalysisFormat=None, source: CreateAnalysisTemplateInputSource=None, tags: Dict=None, analysis_parameters: List=None):
        """CreateAnalysisTemplateInput - a model defined in OpenAPI

        :param description: The description of this CreateAnalysisTemplateInput.
        :param name: The name of this CreateAnalysisTemplateInput.
        :param format: The format of this CreateAnalysisTemplateInput.
        :param source: The source of this CreateAnalysisTemplateInput.
        :param tags: The tags of this CreateAnalysisTemplateInput.
        :param analysis_parameters: The analysis_parameters of this CreateAnalysisTemplateInput.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'format': AnalysisFormat,
            'source': CreateAnalysisTemplateInputSource,
            'tags': Dict,
            'analysis_parameters': List
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'format': 'format',
            'source': 'source',
            'tags': 'tags',
            'analysis_parameters': 'analysisParameters'
        }

        self._description = description
        self._name = name
        self._format = format
        self._source = source
        self._tags = tags
        self._analysis_parameters = analysis_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnalysisTemplateInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAnalysisTemplateInput of this CreateAnalysisTemplateInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateAnalysisTemplateInput.


        :return: The description of this CreateAnalysisTemplateInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAnalysisTemplateInput.


        :param description: The description of this CreateAnalysisTemplateInput.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateAnalysisTemplateInput.


        :return: The name of this CreateAnalysisTemplateInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnalysisTemplateInput.


        :param name: The name of this CreateAnalysisTemplateInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def format(self):
        """Gets the format of this CreateAnalysisTemplateInput.


        :return: The format of this CreateAnalysisTemplateInput.
        :rtype: AnalysisFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateAnalysisTemplateInput.


        :param format: The format of this CreateAnalysisTemplateInput.
        :type format: AnalysisFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def source(self):
        """Gets the source of this CreateAnalysisTemplateInput.


        :return: The source of this CreateAnalysisTemplateInput.
        :rtype: CreateAnalysisTemplateInputSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateAnalysisTemplateInput.


        :param source: The source of this CreateAnalysisTemplateInput.
        :type source: CreateAnalysisTemplateInputSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this CreateAnalysisTemplateInput.


        :return: The tags of this CreateAnalysisTemplateInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAnalysisTemplateInput.


        :param tags: The tags of this CreateAnalysisTemplateInput.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def analysis_parameters(self):
        """Gets the analysis_parameters of this CreateAnalysisTemplateInput.


        :return: The analysis_parameters of this CreateAnalysisTemplateInput.
        :rtype: List
        """
        return self._analysis_parameters

    @analysis_parameters.setter
    def analysis_parameters(self, analysis_parameters):
        """Sets the analysis_parameters of this CreateAnalysisTemplateInput.


        :param analysis_parameters: The analysis_parameters of this CreateAnalysisTemplateInput.
        :type analysis_parameters: List
        """

        self._analysis_parameters = analysis_parameters
