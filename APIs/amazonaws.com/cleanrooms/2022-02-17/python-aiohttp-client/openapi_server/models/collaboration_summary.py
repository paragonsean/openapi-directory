# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_status import MemberStatus
from openapi_server import util


class CollaborationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, name: str=None, creator_account_id: str=None, creator_display_name: str=None, create_time: datetime=None, update_time: datetime=None, member_status: MemberStatus=None, membership_id: str=None, membership_arn: str=None):
        """CollaborationSummary - a model defined in OpenAPI

        :param id: The id of this CollaborationSummary.
        :param arn: The arn of this CollaborationSummary.
        :param name: The name of this CollaborationSummary.
        :param creator_account_id: The creator_account_id of this CollaborationSummary.
        :param creator_display_name: The creator_display_name of this CollaborationSummary.
        :param create_time: The create_time of this CollaborationSummary.
        :param update_time: The update_time of this CollaborationSummary.
        :param member_status: The member_status of this CollaborationSummary.
        :param membership_id: The membership_id of this CollaborationSummary.
        :param membership_arn: The membership_arn of this CollaborationSummary.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'name': str,
            'creator_account_id': str,
            'creator_display_name': str,
            'create_time': datetime,
            'update_time': datetime,
            'member_status': MemberStatus,
            'membership_id': str,
            'membership_arn': str
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'name': 'name',
            'creator_account_id': 'creatorAccountId',
            'creator_display_name': 'creatorDisplayName',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'member_status': 'memberStatus',
            'membership_id': 'membershipId',
            'membership_arn': 'membershipArn'
        }

        self._id = id
        self._arn = arn
        self._name = name
        self._creator_account_id = creator_account_id
        self._creator_display_name = creator_display_name
        self._create_time = create_time
        self._update_time = update_time
        self._member_status = member_status
        self._membership_id = membership_id
        self._membership_arn = membership_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaborationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaborationSummary of this CollaborationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CollaborationSummary.


        :return: The id of this CollaborationSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollaborationSummary.


        :param id: The id of this CollaborationSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this CollaborationSummary.


        :return: The arn of this CollaborationSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CollaborationSummary.


        :param arn: The arn of this CollaborationSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this CollaborationSummary.


        :return: The name of this CollaborationSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollaborationSummary.


        :param name: The name of this CollaborationSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def creator_account_id(self):
        """Gets the creator_account_id of this CollaborationSummary.


        :return: The creator_account_id of this CollaborationSummary.
        :rtype: str
        """
        return self._creator_account_id

    @creator_account_id.setter
    def creator_account_id(self, creator_account_id):
        """Sets the creator_account_id of this CollaborationSummary.


        :param creator_account_id: The creator_account_id of this CollaborationSummary.
        :type creator_account_id: str
        """
        if creator_account_id is None:
            raise ValueError("Invalid value for `creator_account_id`, must not be `None`")

        self._creator_account_id = creator_account_id

    @property
    def creator_display_name(self):
        """Gets the creator_display_name of this CollaborationSummary.


        :return: The creator_display_name of this CollaborationSummary.
        :rtype: str
        """
        return self._creator_display_name

    @creator_display_name.setter
    def creator_display_name(self, creator_display_name):
        """Sets the creator_display_name of this CollaborationSummary.


        :param creator_display_name: The creator_display_name of this CollaborationSummary.
        :type creator_display_name: str
        """
        if creator_display_name is None:
            raise ValueError("Invalid value for `creator_display_name`, must not be `None`")

        self._creator_display_name = creator_display_name

    @property
    def create_time(self):
        """Gets the create_time of this CollaborationSummary.


        :return: The create_time of this CollaborationSummary.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CollaborationSummary.


        :param create_time: The create_time of this CollaborationSummary.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this CollaborationSummary.


        :return: The update_time of this CollaborationSummary.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CollaborationSummary.


        :param update_time: The update_time of this CollaborationSummary.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def member_status(self):
        """Gets the member_status of this CollaborationSummary.


        :return: The member_status of this CollaborationSummary.
        :rtype: MemberStatus
        """
        return self._member_status

    @member_status.setter
    def member_status(self, member_status):
        """Sets the member_status of this CollaborationSummary.


        :param member_status: The member_status of this CollaborationSummary.
        :type member_status: MemberStatus
        """
        if member_status is None:
            raise ValueError("Invalid value for `member_status`, must not be `None`")

        self._member_status = member_status

    @property
    def membership_id(self):
        """Gets the membership_id of this CollaborationSummary.


        :return: The membership_id of this CollaborationSummary.
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this CollaborationSummary.


        :param membership_id: The membership_id of this CollaborationSummary.
        :type membership_id: str
        """

        self._membership_id = membership_id

    @property
    def membership_arn(self):
        """Gets the membership_arn of this CollaborationSummary.


        :return: The membership_arn of this CollaborationSummary.
        :rtype: str
        """
        return self._membership_arn

    @membership_arn.setter
    def membership_arn(self, membership_arn):
        """Sets the membership_arn of this CollaborationSummary.


        :param membership_arn: The membership_arn of this CollaborationSummary.
        :type membership_arn: str
        """

        self._membership_arn = membership_arn
