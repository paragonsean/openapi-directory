# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_rule_policy_v1_custom import AnalysisRulePolicyV1Custom
from openapi_server.models.configured_table_analysis_rule_policy_v1_aggregation import ConfiguredTableAnalysisRulePolicyV1Aggregation
from openapi_server.models.configured_table_analysis_rule_policy_v1_list import ConfiguredTableAnalysisRulePolicyV1List
from openapi_server import util


class AnalysisRulePolicyV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, list: ConfiguredTableAnalysisRulePolicyV1List=None, aggregation: ConfiguredTableAnalysisRulePolicyV1Aggregation=None, custom: AnalysisRulePolicyV1Custom=None):
        """AnalysisRulePolicyV1 - a model defined in OpenAPI

        :param list: The list of this AnalysisRulePolicyV1.
        :param aggregation: The aggregation of this AnalysisRulePolicyV1.
        :param custom: The custom of this AnalysisRulePolicyV1.
        """
        self.openapi_types = {
            'list': ConfiguredTableAnalysisRulePolicyV1List,
            'aggregation': ConfiguredTableAnalysisRulePolicyV1Aggregation,
            'custom': AnalysisRulePolicyV1Custom
        }

        self.attribute_map = {
            'list': 'list',
            'aggregation': 'aggregation',
            'custom': 'custom'
        }

        self._list = list
        self._aggregation = aggregation
        self._custom = custom

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisRulePolicyV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisRulePolicy_v1 of this AnalysisRulePolicyV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def list(self):
        """Gets the list of this AnalysisRulePolicyV1.


        :return: The list of this AnalysisRulePolicyV1.
        :rtype: ConfiguredTableAnalysisRulePolicyV1List
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this AnalysisRulePolicyV1.


        :param list: The list of this AnalysisRulePolicyV1.
        :type list: ConfiguredTableAnalysisRulePolicyV1List
        """

        self._list = list

    @property
    def aggregation(self):
        """Gets the aggregation of this AnalysisRulePolicyV1.


        :return: The aggregation of this AnalysisRulePolicyV1.
        :rtype: ConfiguredTableAnalysisRulePolicyV1Aggregation
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this AnalysisRulePolicyV1.


        :param aggregation: The aggregation of this AnalysisRulePolicyV1.
        :type aggregation: ConfiguredTableAnalysisRulePolicyV1Aggregation
        """

        self._aggregation = aggregation

    @property
    def custom(self):
        """Gets the custom of this AnalysisRulePolicyV1.


        :return: The custom of this AnalysisRulePolicyV1.
        :rtype: AnalysisRulePolicyV1Custom
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this AnalysisRulePolicyV1.


        :param custom: The custom of this AnalysisRulePolicyV1.
        :type custom: AnalysisRulePolicyV1Custom
        """

        self._custom = custom
