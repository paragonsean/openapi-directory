# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAnalysisTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None):
        """UpdateAnalysisTemplateRequest - a model defined in OpenAPI

        :param description: The description of this UpdateAnalysisTemplateRequest.
        """
        self.openapi_types = {
            'description': str
        }

        self.attribute_map = {
            'description': 'description'
        }

        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAnalysisTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAnalysisTemplate_request of this UpdateAnalysisTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateAnalysisTemplateRequest.

        A new description for the analysis template.

        :return: The description of this UpdateAnalysisTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAnalysisTemplateRequest.

        A new description for the analysis template.

        :param description: The description of this UpdateAnalysisTemplateRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*/`")

        self._description = description
