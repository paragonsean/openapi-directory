# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protected_query_error import ProtectedQueryError
from openapi_server.models.protected_query_result import ProtectedQueryResult
from openapi_server.models.protected_query_result_configuration import ProtectedQueryResultConfiguration
from openapi_server.models.protected_query_sql_parameters import ProtectedQuerySqlParameters
from openapi_server.models.protected_query_statistics import ProtectedQueryStatistics
from openapi_server.models.protected_query_status import ProtectedQueryStatus
from openapi_server import util


class ProtectedQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, membership_id: str=None, membership_arn: str=None, create_time: datetime=None, sql_parameters: ProtectedQuerySqlParameters=None, status: ProtectedQueryStatus=None, result_configuration: ProtectedQueryResultConfiguration=None, statistics: ProtectedQueryStatistics=None, result: ProtectedQueryResult=None, error: ProtectedQueryError=None):
        """ProtectedQuery - a model defined in OpenAPI

        :param id: The id of this ProtectedQuery.
        :param membership_id: The membership_id of this ProtectedQuery.
        :param membership_arn: The membership_arn of this ProtectedQuery.
        :param create_time: The create_time of this ProtectedQuery.
        :param sql_parameters: The sql_parameters of this ProtectedQuery.
        :param status: The status of this ProtectedQuery.
        :param result_configuration: The result_configuration of this ProtectedQuery.
        :param statistics: The statistics of this ProtectedQuery.
        :param result: The result of this ProtectedQuery.
        :param error: The error of this ProtectedQuery.
        """
        self.openapi_types = {
            'id': str,
            'membership_id': str,
            'membership_arn': str,
            'create_time': datetime,
            'sql_parameters': ProtectedQuerySqlParameters,
            'status': ProtectedQueryStatus,
            'result_configuration': ProtectedQueryResultConfiguration,
            'statistics': ProtectedQueryStatistics,
            'result': ProtectedQueryResult,
            'error': ProtectedQueryError
        }

        self.attribute_map = {
            'id': 'id',
            'membership_id': 'membershipId',
            'membership_arn': 'membershipArn',
            'create_time': 'createTime',
            'sql_parameters': 'sqlParameters',
            'status': 'status',
            'result_configuration': 'resultConfiguration',
            'statistics': 'statistics',
            'result': 'result',
            'error': 'error'
        }

        self._id = id
        self._membership_id = membership_id
        self._membership_arn = membership_arn
        self._create_time = create_time
        self._sql_parameters = sql_parameters
        self._status = status
        self._result_configuration = result_configuration
        self._statistics = statistics
        self._result = result
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectedQuery of this ProtectedQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProtectedQuery.


        :return: The id of this ProtectedQuery.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProtectedQuery.


        :param id: The id of this ProtectedQuery.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def membership_id(self):
        """Gets the membership_id of this ProtectedQuery.


        :return: The membership_id of this ProtectedQuery.
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this ProtectedQuery.


        :param membership_id: The membership_id of this ProtectedQuery.
        :type membership_id: str
        """
        if membership_id is None:
            raise ValueError("Invalid value for `membership_id`, must not be `None`")

        self._membership_id = membership_id

    @property
    def membership_arn(self):
        """Gets the membership_arn of this ProtectedQuery.


        :return: The membership_arn of this ProtectedQuery.
        :rtype: str
        """
        return self._membership_arn

    @membership_arn.setter
    def membership_arn(self, membership_arn):
        """Sets the membership_arn of this ProtectedQuery.


        :param membership_arn: The membership_arn of this ProtectedQuery.
        :type membership_arn: str
        """
        if membership_arn is None:
            raise ValueError("Invalid value for `membership_arn`, must not be `None`")

        self._membership_arn = membership_arn

    @property
    def create_time(self):
        """Gets the create_time of this ProtectedQuery.


        :return: The create_time of this ProtectedQuery.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ProtectedQuery.


        :param create_time: The create_time of this ProtectedQuery.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def sql_parameters(self):
        """Gets the sql_parameters of this ProtectedQuery.


        :return: The sql_parameters of this ProtectedQuery.
        :rtype: ProtectedQuerySqlParameters
        """
        return self._sql_parameters

    @sql_parameters.setter
    def sql_parameters(self, sql_parameters):
        """Sets the sql_parameters of this ProtectedQuery.


        :param sql_parameters: The sql_parameters of this ProtectedQuery.
        :type sql_parameters: ProtectedQuerySqlParameters
        """
        if sql_parameters is None:
            raise ValueError("Invalid value for `sql_parameters`, must not be `None`")

        self._sql_parameters = sql_parameters

    @property
    def status(self):
        """Gets the status of this ProtectedQuery.


        :return: The status of this ProtectedQuery.
        :rtype: ProtectedQueryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProtectedQuery.


        :param status: The status of this ProtectedQuery.
        :type status: ProtectedQueryStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def result_configuration(self):
        """Gets the result_configuration of this ProtectedQuery.


        :return: The result_configuration of this ProtectedQuery.
        :rtype: ProtectedQueryResultConfiguration
        """
        return self._result_configuration

    @result_configuration.setter
    def result_configuration(self, result_configuration):
        """Sets the result_configuration of this ProtectedQuery.


        :param result_configuration: The result_configuration of this ProtectedQuery.
        :type result_configuration: ProtectedQueryResultConfiguration
        """
        if result_configuration is None:
            raise ValueError("Invalid value for `result_configuration`, must not be `None`")

        self._result_configuration = result_configuration

    @property
    def statistics(self):
        """Gets the statistics of this ProtectedQuery.


        :return: The statistics of this ProtectedQuery.
        :rtype: ProtectedQueryStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this ProtectedQuery.


        :param statistics: The statistics of this ProtectedQuery.
        :type statistics: ProtectedQueryStatistics
        """

        self._statistics = statistics

    @property
    def result(self):
        """Gets the result of this ProtectedQuery.


        :return: The result of this ProtectedQuery.
        :rtype: ProtectedQueryResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ProtectedQuery.


        :param result: The result of this ProtectedQuery.
        :type result: ProtectedQueryResult
        """

        self._result = result

    @property
    def error(self):
        """Gets the error of this ProtectedQuery.


        :return: The error of this ProtectedQuery.
        :rtype: ProtectedQueryError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProtectedQuery.


        :param error: The error of this ProtectedQuery.
        :type error: ProtectedQueryError
        """

        self._error = error
