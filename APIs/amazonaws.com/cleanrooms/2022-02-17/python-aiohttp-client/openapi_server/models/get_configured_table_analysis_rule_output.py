# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_configured_table_analysis_rule_output_analysis_rule import GetConfiguredTableAnalysisRuleOutputAnalysisRule
from openapi_server import util


class GetConfiguredTableAnalysisRuleOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_rule: GetConfiguredTableAnalysisRuleOutputAnalysisRule=None):
        """GetConfiguredTableAnalysisRuleOutput - a model defined in OpenAPI

        :param analysis_rule: The analysis_rule of this GetConfiguredTableAnalysisRuleOutput.
        """
        self.openapi_types = {
            'analysis_rule': GetConfiguredTableAnalysisRuleOutputAnalysisRule
        }

        self.attribute_map = {
            'analysis_rule': 'analysisRule'
        }

        self._analysis_rule = analysis_rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetConfiguredTableAnalysisRuleOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetConfiguredTableAnalysisRuleOutput of this GetConfiguredTableAnalysisRuleOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_rule(self):
        """Gets the analysis_rule of this GetConfiguredTableAnalysisRuleOutput.


        :return: The analysis_rule of this GetConfiguredTableAnalysisRuleOutput.
        :rtype: GetConfiguredTableAnalysisRuleOutputAnalysisRule
        """
        return self._analysis_rule

    @analysis_rule.setter
    def analysis_rule(self, analysis_rule):
        """Sets the analysis_rule of this GetConfiguredTableAnalysisRuleOutput.


        :param analysis_rule: The analysis_rule of this GetConfiguredTableAnalysisRuleOutput.
        :type analysis_rule: GetConfiguredTableAnalysisRuleOutputAnalysisRule
        """
        if analysis_rule is None:
            raise ValueError("Invalid value for `analysis_rule`, must not be `None`")

        self._analysis_rule = analysis_rule
