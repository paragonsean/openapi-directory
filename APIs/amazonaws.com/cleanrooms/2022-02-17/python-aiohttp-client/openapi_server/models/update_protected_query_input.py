# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_protected_query_status import TargetProtectedQueryStatus
from openapi_server import util


class UpdateProtectedQueryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_status: TargetProtectedQueryStatus=None):
        """UpdateProtectedQueryInput - a model defined in OpenAPI

        :param target_status: The target_status of this UpdateProtectedQueryInput.
        """
        self.openapi_types = {
            'target_status': TargetProtectedQueryStatus
        }

        self.attribute_map = {
            'target_status': 'targetStatus'
        }

        self._target_status = target_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateProtectedQueryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateProtectedQueryInput of this UpdateProtectedQueryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_status(self):
        """Gets the target_status of this UpdateProtectedQueryInput.


        :return: The target_status of this UpdateProtectedQueryInput.
        :rtype: TargetProtectedQueryStatus
        """
        return self._target_status

    @target_status.setter
    def target_status(self, target_status):
        """Sets the target_status of this UpdateProtectedQueryInput.


        :param target_status: The target_status of this UpdateProtectedQueryInput.
        :type target_status: TargetProtectedQueryStatus
        """
        if target_status is None:
            raise ValueError("Invalid value for `target_status`, must not be `None`")

        self._target_status = target_status
