# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MemberSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, member_abilities: List=None, display_name: str=None):
        """MemberSpecification - a model defined in OpenAPI

        :param account_id: The account_id of this MemberSpecification.
        :param member_abilities: The member_abilities of this MemberSpecification.
        :param display_name: The display_name of this MemberSpecification.
        """
        self.openapi_types = {
            'account_id': str,
            'member_abilities': List,
            'display_name': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'member_abilities': 'memberAbilities',
            'display_name': 'displayName'
        }

        self._account_id = account_id
        self._member_abilities = member_abilities
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberSpecification of this MemberSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MemberSpecification.


        :return: The account_id of this MemberSpecification.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MemberSpecification.


        :param account_id: The account_id of this MemberSpecification.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def member_abilities(self):
        """Gets the member_abilities of this MemberSpecification.


        :return: The member_abilities of this MemberSpecification.
        :rtype: List
        """
        return self._member_abilities

    @member_abilities.setter
    def member_abilities(self, member_abilities):
        """Sets the member_abilities of this MemberSpecification.


        :param member_abilities: The member_abilities of this MemberSpecification.
        :type member_abilities: List
        """
        if member_abilities is None:
            raise ValueError("Invalid value for `member_abilities`, must not be `None`")

        self._member_abilities = member_abilities

    @property
    def display_name(self):
        """Gets the display_name of this MemberSpecification.


        :return: The display_name of this MemberSpecification.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MemberSpecification.


        :param display_name: The display_name of this MemberSpecification.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name
