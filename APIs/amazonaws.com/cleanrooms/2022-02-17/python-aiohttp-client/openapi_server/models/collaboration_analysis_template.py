# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_format import AnalysisFormat
from openapi_server.models.analysis_template_schema import AnalysisTemplateSchema
from openapi_server.models.collaboration_analysis_template_source import CollaborationAnalysisTemplateSource
from openapi_server import util


class CollaborationAnalysisTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, collaboration_id: str=None, collaboration_arn: str=None, description: str=None, creator_account_id: str=None, name: str=None, create_time: datetime=None, update_time: datetime=None, _schema: AnalysisTemplateSchema=None, format: AnalysisFormat=None, source: CollaborationAnalysisTemplateSource=None, analysis_parameters: List=None):
        """CollaborationAnalysisTemplate - a model defined in OpenAPI

        :param id: The id of this CollaborationAnalysisTemplate.
        :param arn: The arn of this CollaborationAnalysisTemplate.
        :param collaboration_id: The collaboration_id of this CollaborationAnalysisTemplate.
        :param collaboration_arn: The collaboration_arn of this CollaborationAnalysisTemplate.
        :param description: The description of this CollaborationAnalysisTemplate.
        :param creator_account_id: The creator_account_id of this CollaborationAnalysisTemplate.
        :param name: The name of this CollaborationAnalysisTemplate.
        :param create_time: The create_time of this CollaborationAnalysisTemplate.
        :param update_time: The update_time of this CollaborationAnalysisTemplate.
        :param _schema: The _schema of this CollaborationAnalysisTemplate.
        :param format: The format of this CollaborationAnalysisTemplate.
        :param source: The source of this CollaborationAnalysisTemplate.
        :param analysis_parameters: The analysis_parameters of this CollaborationAnalysisTemplate.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'collaboration_id': str,
            'collaboration_arn': str,
            'description': str,
            'creator_account_id': str,
            'name': str,
            'create_time': datetime,
            'update_time': datetime,
            '_schema': AnalysisTemplateSchema,
            'format': AnalysisFormat,
            'source': CollaborationAnalysisTemplateSource,
            'analysis_parameters': List
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'collaboration_id': 'collaborationId',
            'collaboration_arn': 'collaborationArn',
            'description': 'description',
            'creator_account_id': 'creatorAccountId',
            'name': 'name',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            '_schema': 'schema',
            'format': 'format',
            'source': 'source',
            'analysis_parameters': 'analysisParameters'
        }

        self._id = id
        self._arn = arn
        self._collaboration_id = collaboration_id
        self._collaboration_arn = collaboration_arn
        self._description = description
        self._creator_account_id = creator_account_id
        self._name = name
        self._create_time = create_time
        self._update_time = update_time
        self.__schema = _schema
        self._format = format
        self._source = source
        self._analysis_parameters = analysis_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollaborationAnalysisTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollaborationAnalysisTemplate of this CollaborationAnalysisTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CollaborationAnalysisTemplate.


        :return: The id of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollaborationAnalysisTemplate.


        :param id: The id of this CollaborationAnalysisTemplate.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this CollaborationAnalysisTemplate.


        :return: The arn of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CollaborationAnalysisTemplate.


        :param arn: The arn of this CollaborationAnalysisTemplate.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def collaboration_id(self):
        """Gets the collaboration_id of this CollaborationAnalysisTemplate.


        :return: The collaboration_id of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._collaboration_id

    @collaboration_id.setter
    def collaboration_id(self, collaboration_id):
        """Sets the collaboration_id of this CollaborationAnalysisTemplate.


        :param collaboration_id: The collaboration_id of this CollaborationAnalysisTemplate.
        :type collaboration_id: str
        """
        if collaboration_id is None:
            raise ValueError("Invalid value for `collaboration_id`, must not be `None`")

        self._collaboration_id = collaboration_id

    @property
    def collaboration_arn(self):
        """Gets the collaboration_arn of this CollaborationAnalysisTemplate.


        :return: The collaboration_arn of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._collaboration_arn

    @collaboration_arn.setter
    def collaboration_arn(self, collaboration_arn):
        """Sets the collaboration_arn of this CollaborationAnalysisTemplate.


        :param collaboration_arn: The collaboration_arn of this CollaborationAnalysisTemplate.
        :type collaboration_arn: str
        """
        if collaboration_arn is None:
            raise ValueError("Invalid value for `collaboration_arn`, must not be `None`")

        self._collaboration_arn = collaboration_arn

    @property
    def description(self):
        """Gets the description of this CollaborationAnalysisTemplate.


        :return: The description of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollaborationAnalysisTemplate.


        :param description: The description of this CollaborationAnalysisTemplate.
        :type description: str
        """

        self._description = description

    @property
    def creator_account_id(self):
        """Gets the creator_account_id of this CollaborationAnalysisTemplate.


        :return: The creator_account_id of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._creator_account_id

    @creator_account_id.setter
    def creator_account_id(self, creator_account_id):
        """Sets the creator_account_id of this CollaborationAnalysisTemplate.


        :param creator_account_id: The creator_account_id of this CollaborationAnalysisTemplate.
        :type creator_account_id: str
        """
        if creator_account_id is None:
            raise ValueError("Invalid value for `creator_account_id`, must not be `None`")

        self._creator_account_id = creator_account_id

    @property
    def name(self):
        """Gets the name of this CollaborationAnalysisTemplate.


        :return: The name of this CollaborationAnalysisTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollaborationAnalysisTemplate.


        :param name: The name of this CollaborationAnalysisTemplate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def create_time(self):
        """Gets the create_time of this CollaborationAnalysisTemplate.


        :return: The create_time of this CollaborationAnalysisTemplate.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CollaborationAnalysisTemplate.


        :param create_time: The create_time of this CollaborationAnalysisTemplate.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this CollaborationAnalysisTemplate.


        :return: The update_time of this CollaborationAnalysisTemplate.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CollaborationAnalysisTemplate.


        :param update_time: The update_time of this CollaborationAnalysisTemplate.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def _schema(self):
        """Gets the _schema of this CollaborationAnalysisTemplate.


        :return: The _schema of this CollaborationAnalysisTemplate.
        :rtype: AnalysisTemplateSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this CollaborationAnalysisTemplate.


        :param _schema: The _schema of this CollaborationAnalysisTemplate.
        :type _schema: AnalysisTemplateSchema
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")

        self.__schema = _schema

    @property
    def format(self):
        """Gets the format of this CollaborationAnalysisTemplate.


        :return: The format of this CollaborationAnalysisTemplate.
        :rtype: AnalysisFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CollaborationAnalysisTemplate.


        :param format: The format of this CollaborationAnalysisTemplate.
        :type format: AnalysisFormat
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def source(self):
        """Gets the source of this CollaborationAnalysisTemplate.


        :return: The source of this CollaborationAnalysisTemplate.
        :rtype: CollaborationAnalysisTemplateSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CollaborationAnalysisTemplate.


        :param source: The source of this CollaborationAnalysisTemplate.
        :type source: CollaborationAnalysisTemplateSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def analysis_parameters(self):
        """Gets the analysis_parameters of this CollaborationAnalysisTemplate.


        :return: The analysis_parameters of this CollaborationAnalysisTemplate.
        :rtype: List
        """
        return self._analysis_parameters

    @analysis_parameters.setter
    def analysis_parameters(self, analysis_parameters):
        """Sets the analysis_parameters of this CollaborationAnalysisTemplate.


        :param analysis_parameters: The analysis_parameters of this CollaborationAnalysisTemplate.
        :type analysis_parameters: List
        """

        self._analysis_parameters = analysis_parameters
