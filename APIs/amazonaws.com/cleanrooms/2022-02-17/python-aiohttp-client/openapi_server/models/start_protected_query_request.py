# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_protected_query_request_result_configuration import StartProtectedQueryRequestResultConfiguration
from openapi_server.models.start_protected_query_request_sql_parameters import StartProtectedQueryRequestSqlParameters
from openapi_server import util


class StartProtectedQueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, sql_parameters: StartProtectedQueryRequestSqlParameters=None, result_configuration: StartProtectedQueryRequestResultConfiguration=None):
        """StartProtectedQueryRequest - a model defined in OpenAPI

        :param type: The type of this StartProtectedQueryRequest.
        :param sql_parameters: The sql_parameters of this StartProtectedQueryRequest.
        :param result_configuration: The result_configuration of this StartProtectedQueryRequest.
        """
        self.openapi_types = {
            'type': str,
            'sql_parameters': StartProtectedQueryRequestSqlParameters,
            'result_configuration': StartProtectedQueryRequestResultConfiguration
        }

        self.attribute_map = {
            'type': 'type',
            'sql_parameters': 'sqlParameters',
            'result_configuration': 'resultConfiguration'
        }

        self._type = type
        self._sql_parameters = sql_parameters
        self._result_configuration = result_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartProtectedQueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartProtectedQuery_request of this StartProtectedQueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this StartProtectedQueryRequest.

        The type of the protected query to be started.

        :return: The type of this StartProtectedQueryRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StartProtectedQueryRequest.

        The type of the protected query to be started.

        :param type: The type of this StartProtectedQueryRequest.
        :type type: str
        """
        allowed_values = ["SQL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sql_parameters(self):
        """Gets the sql_parameters of this StartProtectedQueryRequest.


        :return: The sql_parameters of this StartProtectedQueryRequest.
        :rtype: StartProtectedQueryRequestSqlParameters
        """
        return self._sql_parameters

    @sql_parameters.setter
    def sql_parameters(self, sql_parameters):
        """Sets the sql_parameters of this StartProtectedQueryRequest.


        :param sql_parameters: The sql_parameters of this StartProtectedQueryRequest.
        :type sql_parameters: StartProtectedQueryRequestSqlParameters
        """
        if sql_parameters is None:
            raise ValueError("Invalid value for `sql_parameters`, must not be `None`")

        self._sql_parameters = sql_parameters

    @property
    def result_configuration(self):
        """Gets the result_configuration of this StartProtectedQueryRequest.


        :return: The result_configuration of this StartProtectedQueryRequest.
        :rtype: StartProtectedQueryRequestResultConfiguration
        """
        return self._result_configuration

    @result_configuration.setter
    def result_configuration(self, result_configuration):
        """Sets the result_configuration of this StartProtectedQueryRequest.


        :param result_configuration: The result_configuration of this StartProtectedQueryRequest.
        :type result_configuration: StartProtectedQueryRequestResultConfiguration
        """
        if result_configuration is None:
            raise ValueError("Invalid value for `result_configuration`, must not be `None`")

        self._result_configuration = result_configuration
