# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_collaboration_analysis_template_output_collaboration_analysis_template import GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate
from openapi_server import util


class GetCollaborationAnalysisTemplateOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaboration_analysis_template: GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate=None):
        """GetCollaborationAnalysisTemplateOutput - a model defined in OpenAPI

        :param collaboration_analysis_template: The collaboration_analysis_template of this GetCollaborationAnalysisTemplateOutput.
        """
        self.openapi_types = {
            'collaboration_analysis_template': GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate
        }

        self.attribute_map = {
            'collaboration_analysis_template': 'collaborationAnalysisTemplate'
        }

        self._collaboration_analysis_template = collaboration_analysis_template

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCollaborationAnalysisTemplateOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCollaborationAnalysisTemplateOutput of this GetCollaborationAnalysisTemplateOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaboration_analysis_template(self):
        """Gets the collaboration_analysis_template of this GetCollaborationAnalysisTemplateOutput.


        :return: The collaboration_analysis_template of this GetCollaborationAnalysisTemplateOutput.
        :rtype: GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate
        """
        return self._collaboration_analysis_template

    @collaboration_analysis_template.setter
    def collaboration_analysis_template(self, collaboration_analysis_template):
        """Sets the collaboration_analysis_template of this GetCollaborationAnalysisTemplateOutput.


        :param collaboration_analysis_template: The collaboration_analysis_template of this GetCollaborationAnalysisTemplateOutput.
        :type collaboration_analysis_template: GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate
        """
        if collaboration_analysis_template is None:
            raise ValueError("Invalid value for `collaboration_analysis_template`, must not be `None`")

        self._collaboration_analysis_template = collaboration_analysis_template
