# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnalysisRulePolicyV1Custom(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_analyses: List=None, allowed_analysis_providers: List=None):
        """AnalysisRulePolicyV1Custom - a model defined in OpenAPI

        :param allowed_analyses: The allowed_analyses of this AnalysisRulePolicyV1Custom.
        :param allowed_analysis_providers: The allowed_analysis_providers of this AnalysisRulePolicyV1Custom.
        """
        self.openapi_types = {
            'allowed_analyses': List,
            'allowed_analysis_providers': List
        }

        self.attribute_map = {
            'allowed_analyses': 'allowedAnalyses',
            'allowed_analysis_providers': 'allowedAnalysisProviders'
        }

        self._allowed_analyses = allowed_analyses
        self._allowed_analysis_providers = allowed_analysis_providers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisRulePolicyV1Custom':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisRulePolicyV1_custom of this AnalysisRulePolicyV1Custom.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_analyses(self):
        """Gets the allowed_analyses of this AnalysisRulePolicyV1Custom.


        :return: The allowed_analyses of this AnalysisRulePolicyV1Custom.
        :rtype: List
        """
        return self._allowed_analyses

    @allowed_analyses.setter
    def allowed_analyses(self, allowed_analyses):
        """Sets the allowed_analyses of this AnalysisRulePolicyV1Custom.


        :param allowed_analyses: The allowed_analyses of this AnalysisRulePolicyV1Custom.
        :type allowed_analyses: List
        """
        if allowed_analyses is None:
            raise ValueError("Invalid value for `allowed_analyses`, must not be `None`")

        self._allowed_analyses = allowed_analyses

    @property
    def allowed_analysis_providers(self):
        """Gets the allowed_analysis_providers of this AnalysisRulePolicyV1Custom.


        :return: The allowed_analysis_providers of this AnalysisRulePolicyV1Custom.
        :rtype: List
        """
        return self._allowed_analysis_providers

    @allowed_analysis_providers.setter
    def allowed_analysis_providers(self, allowed_analysis_providers):
        """Sets the allowed_analysis_providers of this AnalysisRulePolicyV1Custom.


        :param allowed_analysis_providers: The allowed_analysis_providers of this AnalysisRulePolicyV1Custom.
        :type allowed_analysis_providers: List
        """

        self._allowed_analysis_providers = allowed_analysis_providers
