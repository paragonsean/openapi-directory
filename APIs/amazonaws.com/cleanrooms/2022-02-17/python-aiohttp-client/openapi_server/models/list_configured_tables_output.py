# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListConfiguredTablesOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_table_summaries: List=None, next_token: str=None):
        """ListConfiguredTablesOutput - a model defined in OpenAPI

        :param configured_table_summaries: The configured_table_summaries of this ListConfiguredTablesOutput.
        :param next_token: The next_token of this ListConfiguredTablesOutput.
        """
        self.openapi_types = {
            'configured_table_summaries': List,
            'next_token': str
        }

        self.attribute_map = {
            'configured_table_summaries': 'configuredTableSummaries',
            'next_token': 'nextToken'
        }

        self._configured_table_summaries = configured_table_summaries
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListConfiguredTablesOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListConfiguredTablesOutput of this ListConfiguredTablesOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_table_summaries(self):
        """Gets the configured_table_summaries of this ListConfiguredTablesOutput.


        :return: The configured_table_summaries of this ListConfiguredTablesOutput.
        :rtype: List
        """
        return self._configured_table_summaries

    @configured_table_summaries.setter
    def configured_table_summaries(self, configured_table_summaries):
        """Sets the configured_table_summaries of this ListConfiguredTablesOutput.


        :param configured_table_summaries: The configured_table_summaries of this ListConfiguredTablesOutput.
        :type configured_table_summaries: List
        """
        if configured_table_summaries is None:
            raise ValueError("Invalid value for `configured_table_summaries`, must not be `None`")

        self._configured_table_summaries = configured_table_summaries

    @property
    def next_token(self):
        """Gets the next_token of this ListConfiguredTablesOutput.


        :return: The next_token of this ListConfiguredTablesOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListConfiguredTablesOutput.


        :param next_token: The next_token of this ListConfiguredTablesOutput.
        :type next_token: str
        """

        self._next_token = next_token
