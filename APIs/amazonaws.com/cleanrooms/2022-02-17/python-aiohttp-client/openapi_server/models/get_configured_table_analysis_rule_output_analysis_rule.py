# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configured_table_analysis_rule_policy import ConfiguredTableAnalysisRulePolicy
from openapi_server.models.configured_table_analysis_rule_type import ConfiguredTableAnalysisRuleType
from openapi_server import util


class GetConfiguredTableAnalysisRuleOutputAnalysisRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configured_table_id: str=None, configured_table_arn: str=None, policy: ConfiguredTableAnalysisRulePolicy=None, type: ConfiguredTableAnalysisRuleType=None, create_time: datetime=None, update_time: datetime=None):
        """GetConfiguredTableAnalysisRuleOutputAnalysisRule - a model defined in OpenAPI

        :param configured_table_id: The configured_table_id of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :param configured_table_arn: The configured_table_arn of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :param policy: The policy of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :param type: The type of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :param create_time: The create_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :param update_time: The update_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        """
        self.openapi_types = {
            'configured_table_id': str,
            'configured_table_arn': str,
            'policy': ConfiguredTableAnalysisRulePolicy,
            'type': ConfiguredTableAnalysisRuleType,
            'create_time': datetime,
            'update_time': datetime
        }

        self.attribute_map = {
            'configured_table_id': 'configuredTableId',
            'configured_table_arn': 'configuredTableArn',
            'policy': 'policy',
            'type': 'type',
            'create_time': 'createTime',
            'update_time': 'updateTime'
        }

        self._configured_table_id = configured_table_id
        self._configured_table_arn = configured_table_arn
        self._policy = policy
        self._type = type
        self._create_time = create_time
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetConfiguredTableAnalysisRuleOutputAnalysisRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetConfiguredTableAnalysisRuleOutput_analysisRule of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configured_table_id(self):
        """Gets the configured_table_id of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :return: The configured_table_id of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :rtype: str
        """
        return self._configured_table_id

    @configured_table_id.setter
    def configured_table_id(self, configured_table_id):
        """Sets the configured_table_id of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :param configured_table_id: The configured_table_id of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :type configured_table_id: str
        """
        if configured_table_id is None:
            raise ValueError("Invalid value for `configured_table_id`, must not be `None`")

        self._configured_table_id = configured_table_id

    @property
    def configured_table_arn(self):
        """Gets the configured_table_arn of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :return: The configured_table_arn of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :rtype: str
        """
        return self._configured_table_arn

    @configured_table_arn.setter
    def configured_table_arn(self, configured_table_arn):
        """Sets the configured_table_arn of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :param configured_table_arn: The configured_table_arn of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :type configured_table_arn: str
        """
        if configured_table_arn is None:
            raise ValueError("Invalid value for `configured_table_arn`, must not be `None`")

        self._configured_table_arn = configured_table_arn

    @property
    def policy(self):
        """Gets the policy of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :return: The policy of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :rtype: ConfiguredTableAnalysisRulePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :param policy: The policy of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :type policy: ConfiguredTableAnalysisRulePolicy
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy

    @property
    def type(self):
        """Gets the type of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :return: The type of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :rtype: ConfiguredTableAnalysisRuleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :param type: The type of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :type type: ConfiguredTableAnalysisRuleType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def create_time(self):
        """Gets the create_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :return: The create_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :param create_time: The create_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :return: The update_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.


        :param update_time: The update_time of this GetConfiguredTableAnalysisRuleOutputAnalysisRule.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time
