# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_configured_table_analysis_rule_request_analysis_rule_policy import CreateConfiguredTableAnalysisRuleRequestAnalysisRulePolicy
from openapi_server import util


class CreateConfiguredTableAnalysisRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_rule_type: str=None, analysis_rule_policy: CreateConfiguredTableAnalysisRuleRequestAnalysisRulePolicy=None):
        """CreateConfiguredTableAnalysisRuleRequest - a model defined in OpenAPI

        :param analysis_rule_type: The analysis_rule_type of this CreateConfiguredTableAnalysisRuleRequest.
        :param analysis_rule_policy: The analysis_rule_policy of this CreateConfiguredTableAnalysisRuleRequest.
        """
        self.openapi_types = {
            'analysis_rule_type': str,
            'analysis_rule_policy': CreateConfiguredTableAnalysisRuleRequestAnalysisRulePolicy
        }

        self.attribute_map = {
            'analysis_rule_type': 'analysisRuleType',
            'analysis_rule_policy': 'analysisRulePolicy'
        }

        self._analysis_rule_type = analysis_rule_type
        self._analysis_rule_policy = analysis_rule_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfiguredTableAnalysisRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguredTableAnalysisRule_request of this CreateConfiguredTableAnalysisRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_rule_type(self):
        """Gets the analysis_rule_type of this CreateConfiguredTableAnalysisRuleRequest.

        The type of analysis rule.

        :return: The analysis_rule_type of this CreateConfiguredTableAnalysisRuleRequest.
        :rtype: str
        """
        return self._analysis_rule_type

    @analysis_rule_type.setter
    def analysis_rule_type(self, analysis_rule_type):
        """Sets the analysis_rule_type of this CreateConfiguredTableAnalysisRuleRequest.

        The type of analysis rule.

        :param analysis_rule_type: The analysis_rule_type of this CreateConfiguredTableAnalysisRuleRequest.
        :type analysis_rule_type: str
        """
        allowed_values = ["AGGREGATION", "LIST", "CUSTOM"]  # noqa: E501
        if analysis_rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_rule_type` ({0}), must be one of {1}"
                .format(analysis_rule_type, allowed_values)
            )

        self._analysis_rule_type = analysis_rule_type

    @property
    def analysis_rule_policy(self):
        """Gets the analysis_rule_policy of this CreateConfiguredTableAnalysisRuleRequest.


        :return: The analysis_rule_policy of this CreateConfiguredTableAnalysisRuleRequest.
        :rtype: CreateConfiguredTableAnalysisRuleRequestAnalysisRulePolicy
        """
        return self._analysis_rule_policy

    @analysis_rule_policy.setter
    def analysis_rule_policy(self, analysis_rule_policy):
        """Sets the analysis_rule_policy of this CreateConfiguredTableAnalysisRuleRequest.


        :param analysis_rule_policy: The analysis_rule_policy of this CreateConfiguredTableAnalysisRuleRequest.
        :type analysis_rule_policy: CreateConfiguredTableAnalysisRuleRequestAnalysisRulePolicy
        """
        if analysis_rule_policy is None:
            raise ValueError("Invalid value for `analysis_rule_policy`, must not be `None`")

        self._analysis_rule_policy = analysis_rule_policy
