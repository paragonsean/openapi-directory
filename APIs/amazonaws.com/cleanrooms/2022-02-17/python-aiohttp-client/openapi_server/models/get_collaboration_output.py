# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_collaboration_output_collaboration import GetCollaborationOutputCollaboration
from openapi_server import util


class GetCollaborationOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaboration: GetCollaborationOutputCollaboration=None):
        """GetCollaborationOutput - a model defined in OpenAPI

        :param collaboration: The collaboration of this GetCollaborationOutput.
        """
        self.openapi_types = {
            'collaboration': GetCollaborationOutputCollaboration
        }

        self.attribute_map = {
            'collaboration': 'collaboration'
        }

        self._collaboration = collaboration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetCollaborationOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetCollaborationOutput of this GetCollaborationOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaboration(self):
        """Gets the collaboration of this GetCollaborationOutput.


        :return: The collaboration of this GetCollaborationOutput.
        :rtype: GetCollaborationOutputCollaboration
        """
        return self._collaboration

    @collaboration.setter
    def collaboration(self, collaboration):
        """Sets the collaboration of this GetCollaborationOutput.


        :param collaboration: The collaboration of this GetCollaborationOutput.
        :type collaboration: GetCollaborationOutputCollaboration
        """
        if collaboration is None:
            raise ValueError("Invalid value for `collaboration`, must not be `None`")

        self._collaboration = collaboration
