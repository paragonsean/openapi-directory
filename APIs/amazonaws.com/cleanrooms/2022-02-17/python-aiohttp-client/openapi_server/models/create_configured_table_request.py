# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_configured_table_request_table_reference import CreateConfiguredTableRequestTableReference
import re
from openapi_server import util


class CreateConfiguredTableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, table_reference: CreateConfiguredTableRequestTableReference=None, allowed_columns: List[str]=None, analysis_method: str=None, tags: Dict[str, str]=None):
        """CreateConfiguredTableRequest - a model defined in OpenAPI

        :param name: The name of this CreateConfiguredTableRequest.
        :param description: The description of this CreateConfiguredTableRequest.
        :param table_reference: The table_reference of this CreateConfiguredTableRequest.
        :param allowed_columns: The allowed_columns of this CreateConfiguredTableRequest.
        :param analysis_method: The analysis_method of this CreateConfiguredTableRequest.
        :param tags: The tags of this CreateConfiguredTableRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'table_reference': CreateConfiguredTableRequestTableReference,
            'allowed_columns': List[str],
            'analysis_method': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'table_reference': 'tableReference',
            'allowed_columns': 'allowedColumns',
            'analysis_method': 'analysisMethod',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._table_reference = table_reference
        self._allowed_columns = allowed_columns
        self._analysis_method = analysis_method
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfiguredTableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguredTable_request of this CreateConfiguredTableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateConfiguredTableRequest.

        The name of the configured table.

        :return: The name of this CreateConfiguredTableRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfiguredTableRequest.

        The name of the configured table.

        :param name: The name of this CreateConfiguredTableRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'(?!\s*$)[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/(?!\s*$)[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t]*/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateConfiguredTableRequest.

        A description for the configured table.

        :return: The description of this CreateConfiguredTableRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfiguredTableRequest.

        A description for the configured table.

        :param description: The description of this CreateConfiguredTableRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*/`")

        self._description = description

    @property
    def table_reference(self):
        """Gets the table_reference of this CreateConfiguredTableRequest.


        :return: The table_reference of this CreateConfiguredTableRequest.
        :rtype: CreateConfiguredTableRequestTableReference
        """
        return self._table_reference

    @table_reference.setter
    def table_reference(self, table_reference):
        """Sets the table_reference of this CreateConfiguredTableRequest.


        :param table_reference: The table_reference of this CreateConfiguredTableRequest.
        :type table_reference: CreateConfiguredTableRequestTableReference
        """
        if table_reference is None:
            raise ValueError("Invalid value for `table_reference`, must not be `None`")

        self._table_reference = table_reference

    @property
    def allowed_columns(self):
        """Gets the allowed_columns of this CreateConfiguredTableRequest.

        The columns of the underlying table that can be used by collaborations or analysis rules.

        :return: The allowed_columns of this CreateConfiguredTableRequest.
        :rtype: List[str]
        """
        return self._allowed_columns

    @allowed_columns.setter
    def allowed_columns(self, allowed_columns):
        """Sets the allowed_columns of this CreateConfiguredTableRequest.

        The columns of the underlying table that can be used by collaborations or analysis rules.

        :param allowed_columns: The allowed_columns of this CreateConfiguredTableRequest.
        :type allowed_columns: List[str]
        """
        if allowed_columns is None:
            raise ValueError("Invalid value for `allowed_columns`, must not be `None`")
        if allowed_columns is not None and len(allowed_columns) > 100:
            raise ValueError("Invalid value for `allowed_columns`, number of items must be less than or equal to `100`")
        if allowed_columns is not None and len(allowed_columns) < 1:
            raise ValueError("Invalid value for `allowed_columns`, number of items must be greater than or equal to `1`")

        self._allowed_columns = allowed_columns

    @property
    def analysis_method(self):
        """Gets the analysis_method of this CreateConfiguredTableRequest.

        The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.

        :return: The analysis_method of this CreateConfiguredTableRequest.
        :rtype: str
        """
        return self._analysis_method

    @analysis_method.setter
    def analysis_method(self, analysis_method):
        """Sets the analysis_method of this CreateConfiguredTableRequest.

        The analysis method for the configured tables. The only valid value is currently `DIRECT_QUERY`.

        :param analysis_method: The analysis_method of this CreateConfiguredTableRequest.
        :type analysis_method: str
        """
        allowed_values = ["DIRECT_QUERY"]  # noqa: E501
        if analysis_method not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_method` ({0}), must be one of {1}"
                .format(analysis_method, allowed_values)
            )

        self._analysis_method = analysis_method

    @property
    def tags(self):
        """Gets the tags of this CreateConfiguredTableRequest.

        Map of tags assigned to a resource

        :return: The tags of this CreateConfiguredTableRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfiguredTableRequest.

        Map of tags assigned to a resource

        :param tags: The tags of this CreateConfiguredTableRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
