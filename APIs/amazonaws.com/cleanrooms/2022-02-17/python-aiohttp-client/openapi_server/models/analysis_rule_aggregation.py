# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.join_required_option import JoinRequiredOption
from openapi_server import util


class AnalysisRuleAggregation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_columns: List=None, join_columns: List=None, join_required: JoinRequiredOption=None, allowed_join_operators: List=None, dimension_columns: List=None, scalar_functions: List=None, output_constraints: List=None):
        """AnalysisRuleAggregation - a model defined in OpenAPI

        :param aggregate_columns: The aggregate_columns of this AnalysisRuleAggregation.
        :param join_columns: The join_columns of this AnalysisRuleAggregation.
        :param join_required: The join_required of this AnalysisRuleAggregation.
        :param allowed_join_operators: The allowed_join_operators of this AnalysisRuleAggregation.
        :param dimension_columns: The dimension_columns of this AnalysisRuleAggregation.
        :param scalar_functions: The scalar_functions of this AnalysisRuleAggregation.
        :param output_constraints: The output_constraints of this AnalysisRuleAggregation.
        """
        self.openapi_types = {
            'aggregate_columns': List,
            'join_columns': List,
            'join_required': JoinRequiredOption,
            'allowed_join_operators': List,
            'dimension_columns': List,
            'scalar_functions': List,
            'output_constraints': List
        }

        self.attribute_map = {
            'aggregate_columns': 'aggregateColumns',
            'join_columns': 'joinColumns',
            'join_required': 'joinRequired',
            'allowed_join_operators': 'allowedJoinOperators',
            'dimension_columns': 'dimensionColumns',
            'scalar_functions': 'scalarFunctions',
            'output_constraints': 'outputConstraints'
        }

        self._aggregate_columns = aggregate_columns
        self._join_columns = join_columns
        self._join_required = join_required
        self._allowed_join_operators = allowed_join_operators
        self._dimension_columns = dimension_columns
        self._scalar_functions = scalar_functions
        self._output_constraints = output_constraints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnalysisRuleAggregation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnalysisRuleAggregation of this AnalysisRuleAggregation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_columns(self):
        """Gets the aggregate_columns of this AnalysisRuleAggregation.


        :return: The aggregate_columns of this AnalysisRuleAggregation.
        :rtype: List
        """
        return self._aggregate_columns

    @aggregate_columns.setter
    def aggregate_columns(self, aggregate_columns):
        """Sets the aggregate_columns of this AnalysisRuleAggregation.


        :param aggregate_columns: The aggregate_columns of this AnalysisRuleAggregation.
        :type aggregate_columns: List
        """
        if aggregate_columns is None:
            raise ValueError("Invalid value for `aggregate_columns`, must not be `None`")

        self._aggregate_columns = aggregate_columns

    @property
    def join_columns(self):
        """Gets the join_columns of this AnalysisRuleAggregation.


        :return: The join_columns of this AnalysisRuleAggregation.
        :rtype: List
        """
        return self._join_columns

    @join_columns.setter
    def join_columns(self, join_columns):
        """Sets the join_columns of this AnalysisRuleAggregation.


        :param join_columns: The join_columns of this AnalysisRuleAggregation.
        :type join_columns: List
        """
        if join_columns is None:
            raise ValueError("Invalid value for `join_columns`, must not be `None`")

        self._join_columns = join_columns

    @property
    def join_required(self):
        """Gets the join_required of this AnalysisRuleAggregation.


        :return: The join_required of this AnalysisRuleAggregation.
        :rtype: JoinRequiredOption
        """
        return self._join_required

    @join_required.setter
    def join_required(self, join_required):
        """Sets the join_required of this AnalysisRuleAggregation.


        :param join_required: The join_required of this AnalysisRuleAggregation.
        :type join_required: JoinRequiredOption
        """

        self._join_required = join_required

    @property
    def allowed_join_operators(self):
        """Gets the allowed_join_operators of this AnalysisRuleAggregation.


        :return: The allowed_join_operators of this AnalysisRuleAggregation.
        :rtype: List
        """
        return self._allowed_join_operators

    @allowed_join_operators.setter
    def allowed_join_operators(self, allowed_join_operators):
        """Sets the allowed_join_operators of this AnalysisRuleAggregation.


        :param allowed_join_operators: The allowed_join_operators of this AnalysisRuleAggregation.
        :type allowed_join_operators: List
        """

        self._allowed_join_operators = allowed_join_operators

    @property
    def dimension_columns(self):
        """Gets the dimension_columns of this AnalysisRuleAggregation.


        :return: The dimension_columns of this AnalysisRuleAggregation.
        :rtype: List
        """
        return self._dimension_columns

    @dimension_columns.setter
    def dimension_columns(self, dimension_columns):
        """Sets the dimension_columns of this AnalysisRuleAggregation.


        :param dimension_columns: The dimension_columns of this AnalysisRuleAggregation.
        :type dimension_columns: List
        """
        if dimension_columns is None:
            raise ValueError("Invalid value for `dimension_columns`, must not be `None`")

        self._dimension_columns = dimension_columns

    @property
    def scalar_functions(self):
        """Gets the scalar_functions of this AnalysisRuleAggregation.


        :return: The scalar_functions of this AnalysisRuleAggregation.
        :rtype: List
        """
        return self._scalar_functions

    @scalar_functions.setter
    def scalar_functions(self, scalar_functions):
        """Sets the scalar_functions of this AnalysisRuleAggregation.


        :param scalar_functions: The scalar_functions of this AnalysisRuleAggregation.
        :type scalar_functions: List
        """
        if scalar_functions is None:
            raise ValueError("Invalid value for `scalar_functions`, must not be `None`")

        self._scalar_functions = scalar_functions

    @property
    def output_constraints(self):
        """Gets the output_constraints of this AnalysisRuleAggregation.


        :return: The output_constraints of this AnalysisRuleAggregation.
        :rtype: List
        """
        return self._output_constraints

    @output_constraints.setter
    def output_constraints(self, output_constraints):
        """Sets the output_constraints of this AnalysisRuleAggregation.


        :param output_constraints: The output_constraints of this AnalysisRuleAggregation.
        :type output_constraints: List
        """
        if output_constraints is None:
            raise ValueError("Invalid value for `output_constraints`, must not be `None`")

        self._output_constraints = output_constraints
