# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfiguredTableAnalysisRulePolicyV1List(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, join_columns: List=None, allowed_join_operators: List=None, list_columns: List=None):
        """ConfiguredTableAnalysisRulePolicyV1List - a model defined in OpenAPI

        :param join_columns: The join_columns of this ConfiguredTableAnalysisRulePolicyV1List.
        :param allowed_join_operators: The allowed_join_operators of this ConfiguredTableAnalysisRulePolicyV1List.
        :param list_columns: The list_columns of this ConfiguredTableAnalysisRulePolicyV1List.
        """
        self.openapi_types = {
            'join_columns': List,
            'allowed_join_operators': List,
            'list_columns': List
        }

        self.attribute_map = {
            'join_columns': 'joinColumns',
            'allowed_join_operators': 'allowedJoinOperators',
            'list_columns': 'listColumns'
        }

        self._join_columns = join_columns
        self._allowed_join_operators = allowed_join_operators
        self._list_columns = list_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfiguredTableAnalysisRulePolicyV1List':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfiguredTableAnalysisRulePolicyV1_list of this ConfiguredTableAnalysisRulePolicyV1List.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def join_columns(self):
        """Gets the join_columns of this ConfiguredTableAnalysisRulePolicyV1List.


        :return: The join_columns of this ConfiguredTableAnalysisRulePolicyV1List.
        :rtype: List
        """
        return self._join_columns

    @join_columns.setter
    def join_columns(self, join_columns):
        """Sets the join_columns of this ConfiguredTableAnalysisRulePolicyV1List.


        :param join_columns: The join_columns of this ConfiguredTableAnalysisRulePolicyV1List.
        :type join_columns: List
        """
        if join_columns is None:
            raise ValueError("Invalid value for `join_columns`, must not be `None`")

        self._join_columns = join_columns

    @property
    def allowed_join_operators(self):
        """Gets the allowed_join_operators of this ConfiguredTableAnalysisRulePolicyV1List.


        :return: The allowed_join_operators of this ConfiguredTableAnalysisRulePolicyV1List.
        :rtype: List
        """
        return self._allowed_join_operators

    @allowed_join_operators.setter
    def allowed_join_operators(self, allowed_join_operators):
        """Sets the allowed_join_operators of this ConfiguredTableAnalysisRulePolicyV1List.


        :param allowed_join_operators: The allowed_join_operators of this ConfiguredTableAnalysisRulePolicyV1List.
        :type allowed_join_operators: List
        """

        self._allowed_join_operators = allowed_join_operators

    @property
    def list_columns(self):
        """Gets the list_columns of this ConfiguredTableAnalysisRulePolicyV1List.


        :return: The list_columns of this ConfiguredTableAnalysisRulePolicyV1List.
        :rtype: List
        """
        return self._list_columns

    @list_columns.setter
    def list_columns(self, list_columns):
        """Sets the list_columns of this ConfiguredTableAnalysisRulePolicyV1List.


        :param list_columns: The list_columns of this ConfiguredTableAnalysisRulePolicyV1List.
        :type list_columns: List
        """
        if list_columns is None:
            raise ValueError("Invalid value for `list_columns`, must not be `None`")

        self._list_columns = list_columns
