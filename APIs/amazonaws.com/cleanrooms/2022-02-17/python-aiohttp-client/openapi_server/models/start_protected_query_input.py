# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protected_query_type import ProtectedQueryType
from openapi_server.models.start_protected_query_input_result_configuration import StartProtectedQueryInputResultConfiguration
from openapi_server.models.start_protected_query_input_sql_parameters import StartProtectedQueryInputSqlParameters
from openapi_server import util


class StartProtectedQueryInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: ProtectedQueryType=None, sql_parameters: StartProtectedQueryInputSqlParameters=None, result_configuration: StartProtectedQueryInputResultConfiguration=None):
        """StartProtectedQueryInput - a model defined in OpenAPI

        :param type: The type of this StartProtectedQueryInput.
        :param sql_parameters: The sql_parameters of this StartProtectedQueryInput.
        :param result_configuration: The result_configuration of this StartProtectedQueryInput.
        """
        self.openapi_types = {
            'type': ProtectedQueryType,
            'sql_parameters': StartProtectedQueryInputSqlParameters,
            'result_configuration': StartProtectedQueryInputResultConfiguration
        }

        self.attribute_map = {
            'type': 'type',
            'sql_parameters': 'sqlParameters',
            'result_configuration': 'resultConfiguration'
        }

        self._type = type
        self._sql_parameters = sql_parameters
        self._result_configuration = result_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartProtectedQueryInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartProtectedQueryInput of this StartProtectedQueryInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this StartProtectedQueryInput.


        :return: The type of this StartProtectedQueryInput.
        :rtype: ProtectedQueryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StartProtectedQueryInput.


        :param type: The type of this StartProtectedQueryInput.
        :type type: ProtectedQueryType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def sql_parameters(self):
        """Gets the sql_parameters of this StartProtectedQueryInput.


        :return: The sql_parameters of this StartProtectedQueryInput.
        :rtype: StartProtectedQueryInputSqlParameters
        """
        return self._sql_parameters

    @sql_parameters.setter
    def sql_parameters(self, sql_parameters):
        """Sets the sql_parameters of this StartProtectedQueryInput.


        :param sql_parameters: The sql_parameters of this StartProtectedQueryInput.
        :type sql_parameters: StartProtectedQueryInputSqlParameters
        """
        if sql_parameters is None:
            raise ValueError("Invalid value for `sql_parameters`, must not be `None`")

        self._sql_parameters = sql_parameters

    @property
    def result_configuration(self):
        """Gets the result_configuration of this StartProtectedQueryInput.


        :return: The result_configuration of this StartProtectedQueryInput.
        :rtype: StartProtectedQueryInputResultConfiguration
        """
        return self._result_configuration

    @result_configuration.setter
    def result_configuration(self, result_configuration):
        """Sets the result_configuration of this StartProtectedQueryInput.


        :param result_configuration: The result_configuration of this StartProtectedQueryInput.
        :type result_configuration: StartProtectedQueryInputResultConfiguration
        """
        if result_configuration is None:
            raise ValueError("Invalid value for `result_configuration`, must not be `None`")

        self._result_configuration = result_configuration
