# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataEncryptionMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_cleartext: bool=None, allow_duplicates: bool=None, allow_joins_on_columns_with_different_names: bool=None, preserve_nulls: bool=None):
        """DataEncryptionMetadata - a model defined in OpenAPI

        :param allow_cleartext: The allow_cleartext of this DataEncryptionMetadata.
        :param allow_duplicates: The allow_duplicates of this DataEncryptionMetadata.
        :param allow_joins_on_columns_with_different_names: The allow_joins_on_columns_with_different_names of this DataEncryptionMetadata.
        :param preserve_nulls: The preserve_nulls of this DataEncryptionMetadata.
        """
        self.openapi_types = {
            'allow_cleartext': bool,
            'allow_duplicates': bool,
            'allow_joins_on_columns_with_different_names': bool,
            'preserve_nulls': bool
        }

        self.attribute_map = {
            'allow_cleartext': 'allowCleartext',
            'allow_duplicates': 'allowDuplicates',
            'allow_joins_on_columns_with_different_names': 'allowJoinsOnColumnsWithDifferentNames',
            'preserve_nulls': 'preserveNulls'
        }

        self._allow_cleartext = allow_cleartext
        self._allow_duplicates = allow_duplicates
        self._allow_joins_on_columns_with_different_names = allow_joins_on_columns_with_different_names
        self._preserve_nulls = preserve_nulls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataEncryptionMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataEncryptionMetadata of this DataEncryptionMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_cleartext(self):
        """Gets the allow_cleartext of this DataEncryptionMetadata.


        :return: The allow_cleartext of this DataEncryptionMetadata.
        :rtype: bool
        """
        return self._allow_cleartext

    @allow_cleartext.setter
    def allow_cleartext(self, allow_cleartext):
        """Sets the allow_cleartext of this DataEncryptionMetadata.


        :param allow_cleartext: The allow_cleartext of this DataEncryptionMetadata.
        :type allow_cleartext: bool
        """
        if allow_cleartext is None:
            raise ValueError("Invalid value for `allow_cleartext`, must not be `None`")

        self._allow_cleartext = allow_cleartext

    @property
    def allow_duplicates(self):
        """Gets the allow_duplicates of this DataEncryptionMetadata.


        :return: The allow_duplicates of this DataEncryptionMetadata.
        :rtype: bool
        """
        return self._allow_duplicates

    @allow_duplicates.setter
    def allow_duplicates(self, allow_duplicates):
        """Sets the allow_duplicates of this DataEncryptionMetadata.


        :param allow_duplicates: The allow_duplicates of this DataEncryptionMetadata.
        :type allow_duplicates: bool
        """
        if allow_duplicates is None:
            raise ValueError("Invalid value for `allow_duplicates`, must not be `None`")

        self._allow_duplicates = allow_duplicates

    @property
    def allow_joins_on_columns_with_different_names(self):
        """Gets the allow_joins_on_columns_with_different_names of this DataEncryptionMetadata.


        :return: The allow_joins_on_columns_with_different_names of this DataEncryptionMetadata.
        :rtype: bool
        """
        return self._allow_joins_on_columns_with_different_names

    @allow_joins_on_columns_with_different_names.setter
    def allow_joins_on_columns_with_different_names(self, allow_joins_on_columns_with_different_names):
        """Sets the allow_joins_on_columns_with_different_names of this DataEncryptionMetadata.


        :param allow_joins_on_columns_with_different_names: The allow_joins_on_columns_with_different_names of this DataEncryptionMetadata.
        :type allow_joins_on_columns_with_different_names: bool
        """
        if allow_joins_on_columns_with_different_names is None:
            raise ValueError("Invalid value for `allow_joins_on_columns_with_different_names`, must not be `None`")

        self._allow_joins_on_columns_with_different_names = allow_joins_on_columns_with_different_names

    @property
    def preserve_nulls(self):
        """Gets the preserve_nulls of this DataEncryptionMetadata.


        :return: The preserve_nulls of this DataEncryptionMetadata.
        :rtype: bool
        """
        return self._preserve_nulls

    @preserve_nulls.setter
    def preserve_nulls(self, preserve_nulls):
        """Sets the preserve_nulls of this DataEncryptionMetadata.


        :param preserve_nulls: The preserve_nulls of this DataEncryptionMetadata.
        :type preserve_nulls: bool
        """
        if preserve_nulls is None:
            raise ValueError("Invalid value for `preserve_nulls`, must not be `None`")

        self._preserve_nulls = preserve_nulls
