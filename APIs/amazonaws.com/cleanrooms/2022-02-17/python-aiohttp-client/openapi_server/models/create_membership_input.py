# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.membership_query_log_status import MembershipQueryLogStatus
from openapi_server import util


class CreateMembershipInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaboration_identifier: str=None, query_log_status: MembershipQueryLogStatus=None, tags: Dict=None):
        """CreateMembershipInput - a model defined in OpenAPI

        :param collaboration_identifier: The collaboration_identifier of this CreateMembershipInput.
        :param query_log_status: The query_log_status of this CreateMembershipInput.
        :param tags: The tags of this CreateMembershipInput.
        """
        self.openapi_types = {
            'collaboration_identifier': str,
            'query_log_status': MembershipQueryLogStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'collaboration_identifier': 'collaborationIdentifier',
            'query_log_status': 'queryLogStatus',
            'tags': 'tags'
        }

        self._collaboration_identifier = collaboration_identifier
        self._query_log_status = query_log_status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMembershipInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMembershipInput of this CreateMembershipInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaboration_identifier(self):
        """Gets the collaboration_identifier of this CreateMembershipInput.


        :return: The collaboration_identifier of this CreateMembershipInput.
        :rtype: str
        """
        return self._collaboration_identifier

    @collaboration_identifier.setter
    def collaboration_identifier(self, collaboration_identifier):
        """Sets the collaboration_identifier of this CreateMembershipInput.


        :param collaboration_identifier: The collaboration_identifier of this CreateMembershipInput.
        :type collaboration_identifier: str
        """
        if collaboration_identifier is None:
            raise ValueError("Invalid value for `collaboration_identifier`, must not be `None`")

        self._collaboration_identifier = collaboration_identifier

    @property
    def query_log_status(self):
        """Gets the query_log_status of this CreateMembershipInput.


        :return: The query_log_status of this CreateMembershipInput.
        :rtype: MembershipQueryLogStatus
        """
        return self._query_log_status

    @query_log_status.setter
    def query_log_status(self, query_log_status):
        """Sets the query_log_status of this CreateMembershipInput.


        :param query_log_status: The query_log_status of this CreateMembershipInput.
        :type query_log_status: MembershipQueryLogStatus
        """
        if query_log_status is None:
            raise ValueError("Invalid value for `query_log_status`, must not be `None`")

        self._query_log_status = query_log_status

    @property
    def tags(self):
        """Gets the tags of this CreateMembershipInput.


        :return: The tags of this CreateMembershipInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMembershipInput.


        :param tags: The tags of this CreateMembershipInput.
        :type tags: Dict
        """

        self._tags = tags
