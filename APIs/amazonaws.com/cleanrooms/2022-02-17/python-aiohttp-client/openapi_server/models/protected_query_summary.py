# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.protected_query_status import ProtectedQueryStatus
from openapi_server import util


class ProtectedQuerySummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, membership_id: str=None, membership_arn: str=None, create_time: datetime=None, status: ProtectedQueryStatus=None):
        """ProtectedQuerySummary - a model defined in OpenAPI

        :param id: The id of this ProtectedQuerySummary.
        :param membership_id: The membership_id of this ProtectedQuerySummary.
        :param membership_arn: The membership_arn of this ProtectedQuerySummary.
        :param create_time: The create_time of this ProtectedQuerySummary.
        :param status: The status of this ProtectedQuerySummary.
        """
        self.openapi_types = {
            'id': str,
            'membership_id': str,
            'membership_arn': str,
            'create_time': datetime,
            'status': ProtectedQueryStatus
        }

        self.attribute_map = {
            'id': 'id',
            'membership_id': 'membershipId',
            'membership_arn': 'membershipArn',
            'create_time': 'createTime',
            'status': 'status'
        }

        self._id = id
        self._membership_id = membership_id
        self._membership_arn = membership_arn
        self._create_time = create_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProtectedQuerySummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProtectedQuerySummary of this ProtectedQuerySummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProtectedQuerySummary.


        :return: The id of this ProtectedQuerySummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProtectedQuerySummary.


        :param id: The id of this ProtectedQuerySummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def membership_id(self):
        """Gets the membership_id of this ProtectedQuerySummary.


        :return: The membership_id of this ProtectedQuerySummary.
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this ProtectedQuerySummary.


        :param membership_id: The membership_id of this ProtectedQuerySummary.
        :type membership_id: str
        """
        if membership_id is None:
            raise ValueError("Invalid value for `membership_id`, must not be `None`")

        self._membership_id = membership_id

    @property
    def membership_arn(self):
        """Gets the membership_arn of this ProtectedQuerySummary.


        :return: The membership_arn of this ProtectedQuerySummary.
        :rtype: str
        """
        return self._membership_arn

    @membership_arn.setter
    def membership_arn(self, membership_arn):
        """Sets the membership_arn of this ProtectedQuerySummary.


        :param membership_arn: The membership_arn of this ProtectedQuerySummary.
        :type membership_arn: str
        """
        if membership_arn is None:
            raise ValueError("Invalid value for `membership_arn`, must not be `None`")

        self._membership_arn = membership_arn

    @property
    def create_time(self):
        """Gets the create_time of this ProtectedQuerySummary.


        :return: The create_time of this ProtectedQuerySummary.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ProtectedQuerySummary.


        :param create_time: The create_time of this ProtectedQuerySummary.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def status(self):
        """Gets the status of this ProtectedQuerySummary.


        :return: The status of this ProtectedQuerySummary.
        :rtype: ProtectedQueryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProtectedQuerySummary.


        :param status: The status of this ProtectedQuerySummary.
        :type status: ProtectedQueryStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
