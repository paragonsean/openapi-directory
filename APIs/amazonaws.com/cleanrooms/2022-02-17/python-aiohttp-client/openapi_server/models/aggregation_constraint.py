# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregation_type import AggregationType
from openapi_server import util


class AggregationConstraint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_name: str=None, minimum: int=None, type: AggregationType=None):
        """AggregationConstraint - a model defined in OpenAPI

        :param column_name: The column_name of this AggregationConstraint.
        :param minimum: The minimum of this AggregationConstraint.
        :param type: The type of this AggregationConstraint.
        """
        self.openapi_types = {
            'column_name': str,
            'minimum': int,
            'type': AggregationType
        }

        self.attribute_map = {
            'column_name': 'columnName',
            'minimum': 'minimum',
            'type': 'type'
        }

        self._column_name = column_name
        self._minimum = minimum
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregationConstraint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregationConstraint of this AggregationConstraint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_name(self):
        """Gets the column_name of this AggregationConstraint.


        :return: The column_name of this AggregationConstraint.
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this AggregationConstraint.


        :param column_name: The column_name of this AggregationConstraint.
        :type column_name: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")

        self._column_name = column_name

    @property
    def minimum(self):
        """Gets the minimum of this AggregationConstraint.


        :return: The minimum of this AggregationConstraint.
        :rtype: int
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this AggregationConstraint.


        :param minimum: The minimum of this AggregationConstraint.
        :type minimum: int
        """
        if minimum is None:
            raise ValueError("Invalid value for `minimum`, must not be `None`")

        self._minimum = minimum

    @property
    def type(self):
        """Gets the type of this AggregationConstraint.


        :return: The type of this AggregationConstraint.
        :rtype: AggregationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AggregationConstraint.


        :param type: The type of this AggregationConstraint.
        :type type: AggregationType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
