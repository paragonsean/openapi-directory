# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.member_status import MemberStatus
from openapi_server import util


class MemberSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, status: MemberStatus=None, display_name: str=None, abilities: List=None, create_time: datetime=None, update_time: datetime=None, membership_id: str=None, membership_arn: str=None):
        """MemberSummary - a model defined in OpenAPI

        :param account_id: The account_id of this MemberSummary.
        :param status: The status of this MemberSummary.
        :param display_name: The display_name of this MemberSummary.
        :param abilities: The abilities of this MemberSummary.
        :param create_time: The create_time of this MemberSummary.
        :param update_time: The update_time of this MemberSummary.
        :param membership_id: The membership_id of this MemberSummary.
        :param membership_arn: The membership_arn of this MemberSummary.
        """
        self.openapi_types = {
            'account_id': str,
            'status': MemberStatus,
            'display_name': str,
            'abilities': List,
            'create_time': datetime,
            'update_time': datetime,
            'membership_id': str,
            'membership_arn': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'status': 'status',
            'display_name': 'displayName',
            'abilities': 'abilities',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'membership_id': 'membershipId',
            'membership_arn': 'membershipArn'
        }

        self._account_id = account_id
        self._status = status
        self._display_name = display_name
        self._abilities = abilities
        self._create_time = create_time
        self._update_time = update_time
        self._membership_id = membership_id
        self._membership_arn = membership_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MemberSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MemberSummary of this MemberSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MemberSummary.


        :return: The account_id of this MemberSummary.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MemberSummary.


        :param account_id: The account_id of this MemberSummary.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def status(self):
        """Gets the status of this MemberSummary.


        :return: The status of this MemberSummary.
        :rtype: MemberStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MemberSummary.


        :param status: The status of this MemberSummary.
        :type status: MemberStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def display_name(self):
        """Gets the display_name of this MemberSummary.


        :return: The display_name of this MemberSummary.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MemberSummary.


        :param display_name: The display_name of this MemberSummary.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def abilities(self):
        """Gets the abilities of this MemberSummary.


        :return: The abilities of this MemberSummary.
        :rtype: List
        """
        return self._abilities

    @abilities.setter
    def abilities(self, abilities):
        """Sets the abilities of this MemberSummary.


        :param abilities: The abilities of this MemberSummary.
        :type abilities: List
        """
        if abilities is None:
            raise ValueError("Invalid value for `abilities`, must not be `None`")

        self._abilities = abilities

    @property
    def create_time(self):
        """Gets the create_time of this MemberSummary.


        :return: The create_time of this MemberSummary.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MemberSummary.


        :param create_time: The create_time of this MemberSummary.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this MemberSummary.


        :return: The update_time of this MemberSummary.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MemberSummary.


        :param update_time: The update_time of this MemberSummary.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def membership_id(self):
        """Gets the membership_id of this MemberSummary.


        :return: The membership_id of this MemberSummary.
        :rtype: str
        """
        return self._membership_id

    @membership_id.setter
    def membership_id(self, membership_id):
        """Sets the membership_id of this MemberSummary.


        :param membership_id: The membership_id of this MemberSummary.
        :type membership_id: str
        """

        self._membership_id = membership_id

    @property
    def membership_arn(self):
        """Gets the membership_arn of this MemberSummary.


        :return: The membership_arn of this MemberSummary.
        :rtype: str
        """
        return self._membership_arn

    @membership_arn.setter
    def membership_arn(self, membership_arn):
        """Sets the membership_arn of this MemberSummary.


        :param membership_arn: The membership_arn of this MemberSummary.
        :type membership_arn: str
        """

        self._membership_arn = membership_arn
