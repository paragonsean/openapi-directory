# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateConfiguredTableAssociationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, configured_table_identifier: str=None, role_arn: str=None, tags: Dict=None):
        """CreateConfiguredTableAssociationInput - a model defined in OpenAPI

        :param name: The name of this CreateConfiguredTableAssociationInput.
        :param description: The description of this CreateConfiguredTableAssociationInput.
        :param configured_table_identifier: The configured_table_identifier of this CreateConfiguredTableAssociationInput.
        :param role_arn: The role_arn of this CreateConfiguredTableAssociationInput.
        :param tags: The tags of this CreateConfiguredTableAssociationInput.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'configured_table_identifier': str,
            'role_arn': str,
            'tags': Dict
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'configured_table_identifier': 'configuredTableIdentifier',
            'role_arn': 'roleArn',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._configured_table_identifier = configured_table_identifier
        self._role_arn = role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfiguredTableAssociationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguredTableAssociationInput of this CreateConfiguredTableAssociationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateConfiguredTableAssociationInput.


        :return: The name of this CreateConfiguredTableAssociationInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfiguredTableAssociationInput.


        :param name: The name of this CreateConfiguredTableAssociationInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateConfiguredTableAssociationInput.


        :return: The description of this CreateConfiguredTableAssociationInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfiguredTableAssociationInput.


        :param description: The description of this CreateConfiguredTableAssociationInput.
        :type description: str
        """

        self._description = description

    @property
    def configured_table_identifier(self):
        """Gets the configured_table_identifier of this CreateConfiguredTableAssociationInput.


        :return: The configured_table_identifier of this CreateConfiguredTableAssociationInput.
        :rtype: str
        """
        return self._configured_table_identifier

    @configured_table_identifier.setter
    def configured_table_identifier(self, configured_table_identifier):
        """Sets the configured_table_identifier of this CreateConfiguredTableAssociationInput.


        :param configured_table_identifier: The configured_table_identifier of this CreateConfiguredTableAssociationInput.
        :type configured_table_identifier: str
        """
        if configured_table_identifier is None:
            raise ValueError("Invalid value for `configured_table_identifier`, must not be `None`")

        self._configured_table_identifier = configured_table_identifier

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateConfiguredTableAssociationInput.


        :return: The role_arn of this CreateConfiguredTableAssociationInput.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateConfiguredTableAssociationInput.


        :param role_arn: The role_arn of this CreateConfiguredTableAssociationInput.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateConfiguredTableAssociationInput.


        :return: The tags of this CreateConfiguredTableAssociationInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfiguredTableAssociationInput.


        :param tags: The tags of this CreateConfiguredTableAssociationInput.
        :type tags: Dict
        """

        self._tags = tags
