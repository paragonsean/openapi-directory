# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateConfiguredTableAssociationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, configured_table_identifier: str=None, role_arn: str=None, tags: Dict[str, str]=None):
        """CreateConfiguredTableAssociationRequest - a model defined in OpenAPI

        :param name: The name of this CreateConfiguredTableAssociationRequest.
        :param description: The description of this CreateConfiguredTableAssociationRequest.
        :param configured_table_identifier: The configured_table_identifier of this CreateConfiguredTableAssociationRequest.
        :param role_arn: The role_arn of this CreateConfiguredTableAssociationRequest.
        :param tags: The tags of this CreateConfiguredTableAssociationRequest.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'configured_table_identifier': str,
            'role_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'configured_table_identifier': 'configuredTableIdentifier',
            'role_arn': 'roleArn',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._configured_table_identifier = configured_table_identifier
        self._role_arn = role_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfiguredTableAssociationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguredTableAssociation_request of this CreateConfiguredTableAssociationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateConfiguredTableAssociationRequest.

        The name of the configured table association. This name is used to query the underlying configured table.

        :return: The name of this CreateConfiguredTableAssociationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfiguredTableAssociationRequest.

        The name of the configured table association. This name is used to query the underlying configured table.

        :param name: The name of this CreateConfiguredTableAssociationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?/`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateConfiguredTableAssociationRequest.

        A description for the configured table association.

        :return: The description of this CreateConfiguredTableAssociationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfiguredTableAssociationRequest.

        A description for the configured table association.

        :param description: The description of this CreateConfiguredTableAssociationRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*/`")

        self._description = description

    @property
    def configured_table_identifier(self):
        """Gets the configured_table_identifier of this CreateConfiguredTableAssociationRequest.

        A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.

        :return: The configured_table_identifier of this CreateConfiguredTableAssociationRequest.
        :rtype: str
        """
        return self._configured_table_identifier

    @configured_table_identifier.setter
    def configured_table_identifier(self, configured_table_identifier):
        """Sets the configured_table_identifier of this CreateConfiguredTableAssociationRequest.

        A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.

        :param configured_table_identifier: The configured_table_identifier of this CreateConfiguredTableAssociationRequest.
        :type configured_table_identifier: str
        """
        if configured_table_identifier is None:
            raise ValueError("Invalid value for `configured_table_identifier`, must not be `None`")
        if configured_table_identifier is not None and len(configured_table_identifier) > 36:
            raise ValueError("Invalid value for `configured_table_identifier`, length must be less than or equal to `36`")
        if configured_table_identifier is not None and len(configured_table_identifier) < 36:
            raise ValueError("Invalid value for `configured_table_identifier`, length must be greater than or equal to `36`")
        if configured_table_identifier is not None and not re.search(r'.*[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}.*', configured_table_identifier):
            raise ValueError("Invalid value for `configured_table_identifier`, must be a follow pattern or equal to `/.*[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}.*/`")

        self._configured_table_identifier = configured_table_identifier

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateConfiguredTableAssociationRequest.

        The service will assume this role to access catalog metadata and query the table.

        :return: The role_arn of this CreateConfiguredTableAssociationRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateConfiguredTableAssociationRequest.

        The service will assume this role to access catalog metadata and query the table.

        :param role_arn: The role_arn of this CreateConfiguredTableAssociationRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 512:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `512`")
        if role_arn is not None and len(role_arn) < 32:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `32`")
        if role_arn is not None and not re.search(r'arn:aws:iam::[\w]+:role\/[\w+=,.\/@-]+', role_arn):
            raise ValueError("Invalid value for `role_arn`, must be a follow pattern or equal to `/arn:aws:iam::[\w]+:role\/[\w+=,.\/@-]+/`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateConfiguredTableAssociationRequest.

        Map of tags assigned to a resource

        :return: The tags of this CreateConfiguredTableAssociationRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfiguredTableAssociationRequest.

        Map of tags assigned to a resource

        :param tags: The tags of this CreateConfiguredTableAssociationRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
