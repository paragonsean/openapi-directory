# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_method import AnalysisMethod
from openapi_server.models.create_configured_table_input_table_reference import CreateConfiguredTableInputTableReference
from openapi_server import util


class CreateConfiguredTableInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, table_reference: CreateConfiguredTableInputTableReference=None, allowed_columns: List=None, analysis_method: AnalysisMethod=None, tags: Dict=None):
        """CreateConfiguredTableInput - a model defined in OpenAPI

        :param name: The name of this CreateConfiguredTableInput.
        :param description: The description of this CreateConfiguredTableInput.
        :param table_reference: The table_reference of this CreateConfiguredTableInput.
        :param allowed_columns: The allowed_columns of this CreateConfiguredTableInput.
        :param analysis_method: The analysis_method of this CreateConfiguredTableInput.
        :param tags: The tags of this CreateConfiguredTableInput.
        """
        self.openapi_types = {
            'name': str,
            'description': str,
            'table_reference': CreateConfiguredTableInputTableReference,
            'allowed_columns': List,
            'analysis_method': AnalysisMethod,
            'tags': Dict
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'table_reference': 'tableReference',
            'allowed_columns': 'allowedColumns',
            'analysis_method': 'analysisMethod',
            'tags': 'tags'
        }

        self._name = name
        self._description = description
        self._table_reference = table_reference
        self._allowed_columns = allowed_columns
        self._analysis_method = analysis_method
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfiguredTableInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfiguredTableInput of this CreateConfiguredTableInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateConfiguredTableInput.


        :return: The name of this CreateConfiguredTableInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateConfiguredTableInput.


        :param name: The name of this CreateConfiguredTableInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateConfiguredTableInput.


        :return: The description of this CreateConfiguredTableInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateConfiguredTableInput.


        :param description: The description of this CreateConfiguredTableInput.
        :type description: str
        """

        self._description = description

    @property
    def table_reference(self):
        """Gets the table_reference of this CreateConfiguredTableInput.


        :return: The table_reference of this CreateConfiguredTableInput.
        :rtype: CreateConfiguredTableInputTableReference
        """
        return self._table_reference

    @table_reference.setter
    def table_reference(self, table_reference):
        """Sets the table_reference of this CreateConfiguredTableInput.


        :param table_reference: The table_reference of this CreateConfiguredTableInput.
        :type table_reference: CreateConfiguredTableInputTableReference
        """
        if table_reference is None:
            raise ValueError("Invalid value for `table_reference`, must not be `None`")

        self._table_reference = table_reference

    @property
    def allowed_columns(self):
        """Gets the allowed_columns of this CreateConfiguredTableInput.


        :return: The allowed_columns of this CreateConfiguredTableInput.
        :rtype: List
        """
        return self._allowed_columns

    @allowed_columns.setter
    def allowed_columns(self, allowed_columns):
        """Sets the allowed_columns of this CreateConfiguredTableInput.


        :param allowed_columns: The allowed_columns of this CreateConfiguredTableInput.
        :type allowed_columns: List
        """
        if allowed_columns is None:
            raise ValueError("Invalid value for `allowed_columns`, must not be `None`")

        self._allowed_columns = allowed_columns

    @property
    def analysis_method(self):
        """Gets the analysis_method of this CreateConfiguredTableInput.


        :return: The analysis_method of this CreateConfiguredTableInput.
        :rtype: AnalysisMethod
        """
        return self._analysis_method

    @analysis_method.setter
    def analysis_method(self, analysis_method):
        """Sets the analysis_method of this CreateConfiguredTableInput.


        :param analysis_method: The analysis_method of this CreateConfiguredTableInput.
        :type analysis_method: AnalysisMethod
        """
        if analysis_method is None:
            raise ValueError("Invalid value for `analysis_method`, must not be `None`")

        self._analysis_method = analysis_method

    @property
    def tags(self):
        """Gets the tags of this CreateConfiguredTableInput.


        :return: The tags of this CreateConfiguredTableInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateConfiguredTableInput.


        :param tags: The tags of this CreateConfiguredTableInput.
        :type tags: Dict
        """

        self._tags = tags
