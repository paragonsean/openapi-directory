# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.analysis_parameter import AnalysisParameter
from openapi_server.models.create_analysis_template_request_source import CreateAnalysisTemplateRequestSource
import re
from openapi_server import util


class CreateAnalysisTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, format: str=None, source: CreateAnalysisTemplateRequestSource=None, tags: Dict[str, str]=None, analysis_parameters: List[AnalysisParameter]=None):
        """CreateAnalysisTemplateRequest - a model defined in OpenAPI

        :param description: The description of this CreateAnalysisTemplateRequest.
        :param name: The name of this CreateAnalysisTemplateRequest.
        :param format: The format of this CreateAnalysisTemplateRequest.
        :param source: The source of this CreateAnalysisTemplateRequest.
        :param tags: The tags of this CreateAnalysisTemplateRequest.
        :param analysis_parameters: The analysis_parameters of this CreateAnalysisTemplateRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'format': str,
            'source': CreateAnalysisTemplateRequestSource,
            'tags': Dict[str, str],
            'analysis_parameters': List[AnalysisParameter]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'format': 'format',
            'source': 'source',
            'tags': 'tags',
            'analysis_parameters': 'analysisParameters'
        }

        self._description = description
        self._name = name
        self._format = format
        self._source = source
        self._tags = tags
        self._analysis_parameters = analysis_parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAnalysisTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAnalysisTemplate_request of this CreateAnalysisTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateAnalysisTemplateRequest.

        The description of the analysis template.

        :return: The description of this CreateAnalysisTemplateRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAnalysisTemplateRequest.

        The description of the analysis template.

        :param description: The description of this CreateAnalysisTemplateRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDBFF-\uDC00\uDFFF\t\r\n]*/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateAnalysisTemplateRequest.

        The name of the analysis template.

        :return: The name of this CreateAnalysisTemplateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAnalysisTemplateRequest.

        The name of the analysis template.

        :param name: The name of this CreateAnalysisTemplateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[a-zA-Z0-9_](([a-zA-Z0-9_ ]+-)*([a-zA-Z0-9_ ]+))?/`")

        self._name = name

    @property
    def format(self):
        """Gets the format of this CreateAnalysisTemplateRequest.

        The format of the analysis template.

        :return: The format of this CreateAnalysisTemplateRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateAnalysisTemplateRequest.

        The format of the analysis template.

        :param format: The format of this CreateAnalysisTemplateRequest.
        :type format: str
        """
        allowed_values = ["SQL"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def source(self):
        """Gets the source of this CreateAnalysisTemplateRequest.


        :return: The source of this CreateAnalysisTemplateRequest.
        :rtype: CreateAnalysisTemplateRequestSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreateAnalysisTemplateRequest.


        :param source: The source of this CreateAnalysisTemplateRequest.
        :type source: CreateAnalysisTemplateRequestSource
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this CreateAnalysisTemplateRequest.

        Map of tags assigned to a resource

        :return: The tags of this CreateAnalysisTemplateRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAnalysisTemplateRequest.

        Map of tags assigned to a resource

        :param tags: The tags of this CreateAnalysisTemplateRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def analysis_parameters(self):
        """Gets the analysis_parameters of this CreateAnalysisTemplateRequest.

        The parameters of the analysis template.

        :return: The analysis_parameters of this CreateAnalysisTemplateRequest.
        :rtype: List[AnalysisParameter]
        """
        return self._analysis_parameters

    @analysis_parameters.setter
    def analysis_parameters(self, analysis_parameters):
        """Sets the analysis_parameters of this CreateAnalysisTemplateRequest.

        The parameters of the analysis template.

        :param analysis_parameters: The analysis_parameters of this CreateAnalysisTemplateRequest.
        :type analysis_parameters: List[AnalysisParameter]
        """
        if analysis_parameters is not None and len(analysis_parameters) > 10:
            raise ValueError("Invalid value for `analysis_parameters`, number of items must be less than or equal to `10`")
        if analysis_parameters is not None and len(analysis_parameters) < 0:
            raise ValueError("Invalid value for `analysis_parameters`, number of items must be greater than or equal to `0`")

        self._analysis_parameters = analysis_parameters
