# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateMembershipRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collaboration_identifier: str=None, query_log_status: str=None, tags: Dict[str, str]=None):
        """CreateMembershipRequest - a model defined in OpenAPI

        :param collaboration_identifier: The collaboration_identifier of this CreateMembershipRequest.
        :param query_log_status: The query_log_status of this CreateMembershipRequest.
        :param tags: The tags of this CreateMembershipRequest.
        """
        self.openapi_types = {
            'collaboration_identifier': str,
            'query_log_status': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'collaboration_identifier': 'collaborationIdentifier',
            'query_log_status': 'queryLogStatus',
            'tags': 'tags'
        }

        self._collaboration_identifier = collaboration_identifier
        self._query_log_status = query_log_status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMembershipRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMembership_request of this CreateMembershipRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collaboration_identifier(self):
        """Gets the collaboration_identifier of this CreateMembershipRequest.

        The unique ID for the associated collaboration.

        :return: The collaboration_identifier of this CreateMembershipRequest.
        :rtype: str
        """
        return self._collaboration_identifier

    @collaboration_identifier.setter
    def collaboration_identifier(self, collaboration_identifier):
        """Sets the collaboration_identifier of this CreateMembershipRequest.

        The unique ID for the associated collaboration.

        :param collaboration_identifier: The collaboration_identifier of this CreateMembershipRequest.
        :type collaboration_identifier: str
        """
        if collaboration_identifier is None:
            raise ValueError("Invalid value for `collaboration_identifier`, must not be `None`")
        if collaboration_identifier is not None and len(collaboration_identifier) > 36:
            raise ValueError("Invalid value for `collaboration_identifier`, length must be less than or equal to `36`")
        if collaboration_identifier is not None and len(collaboration_identifier) < 36:
            raise ValueError("Invalid value for `collaboration_identifier`, length must be greater than or equal to `36`")
        if collaboration_identifier is not None and not re.search(r'.*[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}.*', collaboration_identifier):
            raise ValueError("Invalid value for `collaboration_identifier`, must be a follow pattern or equal to `/.*[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}.*/`")

        self._collaboration_identifier = collaboration_identifier

    @property
    def query_log_status(self):
        """Gets the query_log_status of this CreateMembershipRequest.

        An indicator as to whether query logging has been enabled or disabled for the collaboration.

        :return: The query_log_status of this CreateMembershipRequest.
        :rtype: str
        """
        return self._query_log_status

    @query_log_status.setter
    def query_log_status(self, query_log_status):
        """Sets the query_log_status of this CreateMembershipRequest.

        An indicator as to whether query logging has been enabled or disabled for the collaboration.

        :param query_log_status: The query_log_status of this CreateMembershipRequest.
        :type query_log_status: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if query_log_status not in allowed_values:
            raise ValueError(
                "Invalid value for `query_log_status` ({0}), must be one of {1}"
                .format(query_log_status, allowed_values)
            )

        self._query_log_status = query_log_status

    @property
    def tags(self):
        """Gets the tags of this CreateMembershipRequest.

        Map of tags assigned to a resource

        :return: The tags of this CreateMembershipRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMembershipRequest.

        Map of tags assigned to a resource

        :param tags: The tags of this CreateMembershipRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
