# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.membership_query_log_status import MembershipQueryLogStatus
from openapi_server.models.membership_status import MembershipStatus
from openapi_server import util


class CreateMembershipOutputMembership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, arn: str=None, collaboration_arn: str=None, collaboration_id: str=None, collaboration_creator_account_id: str=None, collaboration_creator_display_name: str=None, collaboration_name: str=None, create_time: datetime=None, update_time: datetime=None, status: MembershipStatus=None, member_abilities: List=None, query_log_status: MembershipQueryLogStatus=None):
        """CreateMembershipOutputMembership - a model defined in OpenAPI

        :param id: The id of this CreateMembershipOutputMembership.
        :param arn: The arn of this CreateMembershipOutputMembership.
        :param collaboration_arn: The collaboration_arn of this CreateMembershipOutputMembership.
        :param collaboration_id: The collaboration_id of this CreateMembershipOutputMembership.
        :param collaboration_creator_account_id: The collaboration_creator_account_id of this CreateMembershipOutputMembership.
        :param collaboration_creator_display_name: The collaboration_creator_display_name of this CreateMembershipOutputMembership.
        :param collaboration_name: The collaboration_name of this CreateMembershipOutputMembership.
        :param create_time: The create_time of this CreateMembershipOutputMembership.
        :param update_time: The update_time of this CreateMembershipOutputMembership.
        :param status: The status of this CreateMembershipOutputMembership.
        :param member_abilities: The member_abilities of this CreateMembershipOutputMembership.
        :param query_log_status: The query_log_status of this CreateMembershipOutputMembership.
        """
        self.openapi_types = {
            'id': str,
            'arn': str,
            'collaboration_arn': str,
            'collaboration_id': str,
            'collaboration_creator_account_id': str,
            'collaboration_creator_display_name': str,
            'collaboration_name': str,
            'create_time': datetime,
            'update_time': datetime,
            'status': MembershipStatus,
            'member_abilities': List,
            'query_log_status': MembershipQueryLogStatus
        }

        self.attribute_map = {
            'id': 'id',
            'arn': 'arn',
            'collaboration_arn': 'collaborationArn',
            'collaboration_id': 'collaborationId',
            'collaboration_creator_account_id': 'collaborationCreatorAccountId',
            'collaboration_creator_display_name': 'collaborationCreatorDisplayName',
            'collaboration_name': 'collaborationName',
            'create_time': 'createTime',
            'update_time': 'updateTime',
            'status': 'status',
            'member_abilities': 'memberAbilities',
            'query_log_status': 'queryLogStatus'
        }

        self._id = id
        self._arn = arn
        self._collaboration_arn = collaboration_arn
        self._collaboration_id = collaboration_id
        self._collaboration_creator_account_id = collaboration_creator_account_id
        self._collaboration_creator_display_name = collaboration_creator_display_name
        self._collaboration_name = collaboration_name
        self._create_time = create_time
        self._update_time = update_time
        self._status = status
        self._member_abilities = member_abilities
        self._query_log_status = query_log_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMembershipOutputMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMembershipOutput_membership of this CreateMembershipOutputMembership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateMembershipOutputMembership.


        :return: The id of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateMembershipOutputMembership.


        :param id: The id of this CreateMembershipOutputMembership.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def arn(self):
        """Gets the arn of this CreateMembershipOutputMembership.


        :return: The arn of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateMembershipOutputMembership.


        :param arn: The arn of this CreateMembershipOutputMembership.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def collaboration_arn(self):
        """Gets the collaboration_arn of this CreateMembershipOutputMembership.


        :return: The collaboration_arn of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._collaboration_arn

    @collaboration_arn.setter
    def collaboration_arn(self, collaboration_arn):
        """Sets the collaboration_arn of this CreateMembershipOutputMembership.


        :param collaboration_arn: The collaboration_arn of this CreateMembershipOutputMembership.
        :type collaboration_arn: str
        """
        if collaboration_arn is None:
            raise ValueError("Invalid value for `collaboration_arn`, must not be `None`")

        self._collaboration_arn = collaboration_arn

    @property
    def collaboration_id(self):
        """Gets the collaboration_id of this CreateMembershipOutputMembership.


        :return: The collaboration_id of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._collaboration_id

    @collaboration_id.setter
    def collaboration_id(self, collaboration_id):
        """Sets the collaboration_id of this CreateMembershipOutputMembership.


        :param collaboration_id: The collaboration_id of this CreateMembershipOutputMembership.
        :type collaboration_id: str
        """
        if collaboration_id is None:
            raise ValueError("Invalid value for `collaboration_id`, must not be `None`")

        self._collaboration_id = collaboration_id

    @property
    def collaboration_creator_account_id(self):
        """Gets the collaboration_creator_account_id of this CreateMembershipOutputMembership.


        :return: The collaboration_creator_account_id of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._collaboration_creator_account_id

    @collaboration_creator_account_id.setter
    def collaboration_creator_account_id(self, collaboration_creator_account_id):
        """Sets the collaboration_creator_account_id of this CreateMembershipOutputMembership.


        :param collaboration_creator_account_id: The collaboration_creator_account_id of this CreateMembershipOutputMembership.
        :type collaboration_creator_account_id: str
        """
        if collaboration_creator_account_id is None:
            raise ValueError("Invalid value for `collaboration_creator_account_id`, must not be `None`")

        self._collaboration_creator_account_id = collaboration_creator_account_id

    @property
    def collaboration_creator_display_name(self):
        """Gets the collaboration_creator_display_name of this CreateMembershipOutputMembership.


        :return: The collaboration_creator_display_name of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._collaboration_creator_display_name

    @collaboration_creator_display_name.setter
    def collaboration_creator_display_name(self, collaboration_creator_display_name):
        """Sets the collaboration_creator_display_name of this CreateMembershipOutputMembership.


        :param collaboration_creator_display_name: The collaboration_creator_display_name of this CreateMembershipOutputMembership.
        :type collaboration_creator_display_name: str
        """
        if collaboration_creator_display_name is None:
            raise ValueError("Invalid value for `collaboration_creator_display_name`, must not be `None`")

        self._collaboration_creator_display_name = collaboration_creator_display_name

    @property
    def collaboration_name(self):
        """Gets the collaboration_name of this CreateMembershipOutputMembership.


        :return: The collaboration_name of this CreateMembershipOutputMembership.
        :rtype: str
        """
        return self._collaboration_name

    @collaboration_name.setter
    def collaboration_name(self, collaboration_name):
        """Sets the collaboration_name of this CreateMembershipOutputMembership.


        :param collaboration_name: The collaboration_name of this CreateMembershipOutputMembership.
        :type collaboration_name: str
        """
        if collaboration_name is None:
            raise ValueError("Invalid value for `collaboration_name`, must not be `None`")

        self._collaboration_name = collaboration_name

    @property
    def create_time(self):
        """Gets the create_time of this CreateMembershipOutputMembership.


        :return: The create_time of this CreateMembershipOutputMembership.
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CreateMembershipOutputMembership.


        :param create_time: The create_time of this CreateMembershipOutputMembership.
        :type create_time: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this CreateMembershipOutputMembership.


        :return: The update_time of this CreateMembershipOutputMembership.
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CreateMembershipOutputMembership.


        :param update_time: The update_time of this CreateMembershipOutputMembership.
        :type update_time: datetime
        """
        if update_time is None:
            raise ValueError("Invalid value for `update_time`, must not be `None`")

        self._update_time = update_time

    @property
    def status(self):
        """Gets the status of this CreateMembershipOutputMembership.


        :return: The status of this CreateMembershipOutputMembership.
        :rtype: MembershipStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateMembershipOutputMembership.


        :param status: The status of this CreateMembershipOutputMembership.
        :type status: MembershipStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def member_abilities(self):
        """Gets the member_abilities of this CreateMembershipOutputMembership.


        :return: The member_abilities of this CreateMembershipOutputMembership.
        :rtype: List
        """
        return self._member_abilities

    @member_abilities.setter
    def member_abilities(self, member_abilities):
        """Sets the member_abilities of this CreateMembershipOutputMembership.


        :param member_abilities: The member_abilities of this CreateMembershipOutputMembership.
        :type member_abilities: List
        """
        if member_abilities is None:
            raise ValueError("Invalid value for `member_abilities`, must not be `None`")

        self._member_abilities = member_abilities

    @property
    def query_log_status(self):
        """Gets the query_log_status of this CreateMembershipOutputMembership.


        :return: The query_log_status of this CreateMembershipOutputMembership.
        :rtype: MembershipQueryLogStatus
        """
        return self._query_log_status

    @query_log_status.setter
    def query_log_status(self, query_log_status):
        """Sets the query_log_status of this CreateMembershipOutputMembership.


        :param query_log_status: The query_log_status of this CreateMembershipOutputMembership.
        :type query_log_status: MembershipQueryLogStatus
        """
        if query_log_status is None:
            raise ValueError("Invalid value for `query_log_status`, must not be `None`")

        self._query_log_status = query_log_status
