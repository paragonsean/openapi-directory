# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.collaboration_query_log_status import CollaborationQueryLogStatus
from openapi_server.models.create_collaboration_input_data_encryption_metadata import CreateCollaborationInputDataEncryptionMetadata
from openapi_server import util


class CreateCollaborationInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, members: List=None, name: str=None, description: str=None, creator_member_abilities: List=None, creator_display_name: str=None, data_encryption_metadata: CreateCollaborationInputDataEncryptionMetadata=None, query_log_status: CollaborationQueryLogStatus=None, tags: Dict=None):
        """CreateCollaborationInput - a model defined in OpenAPI

        :param members: The members of this CreateCollaborationInput.
        :param name: The name of this CreateCollaborationInput.
        :param description: The description of this CreateCollaborationInput.
        :param creator_member_abilities: The creator_member_abilities of this CreateCollaborationInput.
        :param creator_display_name: The creator_display_name of this CreateCollaborationInput.
        :param data_encryption_metadata: The data_encryption_metadata of this CreateCollaborationInput.
        :param query_log_status: The query_log_status of this CreateCollaborationInput.
        :param tags: The tags of this CreateCollaborationInput.
        """
        self.openapi_types = {
            'members': List,
            'name': str,
            'description': str,
            'creator_member_abilities': List,
            'creator_display_name': str,
            'data_encryption_metadata': CreateCollaborationInputDataEncryptionMetadata,
            'query_log_status': CollaborationQueryLogStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'members': 'members',
            'name': 'name',
            'description': 'description',
            'creator_member_abilities': 'creatorMemberAbilities',
            'creator_display_name': 'creatorDisplayName',
            'data_encryption_metadata': 'dataEncryptionMetadata',
            'query_log_status': 'queryLogStatus',
            'tags': 'tags'
        }

        self._members = members
        self._name = name
        self._description = description
        self._creator_member_abilities = creator_member_abilities
        self._creator_display_name = creator_display_name
        self._data_encryption_metadata = data_encryption_metadata
        self._query_log_status = query_log_status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCollaborationInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCollaborationInput of this CreateCollaborationInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def members(self):
        """Gets the members of this CreateCollaborationInput.


        :return: The members of this CreateCollaborationInput.
        :rtype: List
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this CreateCollaborationInput.


        :param members: The members of this CreateCollaborationInput.
        :type members: List
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")

        self._members = members

    @property
    def name(self):
        """Gets the name of this CreateCollaborationInput.


        :return: The name of this CreateCollaborationInput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCollaborationInput.


        :param name: The name of this CreateCollaborationInput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateCollaborationInput.


        :return: The description of this CreateCollaborationInput.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCollaborationInput.


        :param description: The description of this CreateCollaborationInput.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def creator_member_abilities(self):
        """Gets the creator_member_abilities of this CreateCollaborationInput.


        :return: The creator_member_abilities of this CreateCollaborationInput.
        :rtype: List
        """
        return self._creator_member_abilities

    @creator_member_abilities.setter
    def creator_member_abilities(self, creator_member_abilities):
        """Sets the creator_member_abilities of this CreateCollaborationInput.


        :param creator_member_abilities: The creator_member_abilities of this CreateCollaborationInput.
        :type creator_member_abilities: List
        """
        if creator_member_abilities is None:
            raise ValueError("Invalid value for `creator_member_abilities`, must not be `None`")

        self._creator_member_abilities = creator_member_abilities

    @property
    def creator_display_name(self):
        """Gets the creator_display_name of this CreateCollaborationInput.


        :return: The creator_display_name of this CreateCollaborationInput.
        :rtype: str
        """
        return self._creator_display_name

    @creator_display_name.setter
    def creator_display_name(self, creator_display_name):
        """Sets the creator_display_name of this CreateCollaborationInput.


        :param creator_display_name: The creator_display_name of this CreateCollaborationInput.
        :type creator_display_name: str
        """
        if creator_display_name is None:
            raise ValueError("Invalid value for `creator_display_name`, must not be `None`")

        self._creator_display_name = creator_display_name

    @property
    def data_encryption_metadata(self):
        """Gets the data_encryption_metadata of this CreateCollaborationInput.


        :return: The data_encryption_metadata of this CreateCollaborationInput.
        :rtype: CreateCollaborationInputDataEncryptionMetadata
        """
        return self._data_encryption_metadata

    @data_encryption_metadata.setter
    def data_encryption_metadata(self, data_encryption_metadata):
        """Sets the data_encryption_metadata of this CreateCollaborationInput.


        :param data_encryption_metadata: The data_encryption_metadata of this CreateCollaborationInput.
        :type data_encryption_metadata: CreateCollaborationInputDataEncryptionMetadata
        """

        self._data_encryption_metadata = data_encryption_metadata

    @property
    def query_log_status(self):
        """Gets the query_log_status of this CreateCollaborationInput.


        :return: The query_log_status of this CreateCollaborationInput.
        :rtype: CollaborationQueryLogStatus
        """
        return self._query_log_status

    @query_log_status.setter
    def query_log_status(self, query_log_status):
        """Sets the query_log_status of this CreateCollaborationInput.


        :param query_log_status: The query_log_status of this CreateCollaborationInput.
        :type query_log_status: CollaborationQueryLogStatus
        """
        if query_log_status is None:
            raise ValueError("Invalid value for `query_log_status`, must not be `None`")

        self._query_log_status = query_log_status

    @property
    def tags(self):
        """Gets the tags of this CreateCollaborationInput.


        :return: The tags of this CreateCollaborationInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCollaborationInput.


        :param tags: The tags of this CreateCollaborationInput.
        :type tags: Dict
        """

        self._tags = tags
