/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnalysisMethod from './AnalysisMethod';
import ConfiguredTableTableReference from './ConfiguredTableTableReference';

/**
 * The ConfiguredTable model module.
 * @module model/ConfiguredTable
 * @version 2022-02-17
 */
class ConfiguredTable {
    /**
     * Constructs a new <code>ConfiguredTable</code>.
     * A table that has been configured for use in a collaboration.
     * @alias module:model/ConfiguredTable
     * @param id {String} 
     * @param arn {String} 
     * @param name {String} 
     * @param tableReference {module:model/ConfiguredTableTableReference} 
     * @param createTime {Date} 
     * @param updateTime {Date} 
     * @param analysisRuleTypes {Array} 
     * @param analysisMethod {module:model/AnalysisMethod} 
     * @param allowedColumns {Array} 
     */
    constructor(id, arn, name, tableReference, createTime, updateTime, analysisRuleTypes, analysisMethod, allowedColumns) { 
        
        ConfiguredTable.initialize(this, id, arn, name, tableReference, createTime, updateTime, analysisRuleTypes, analysisMethod, allowedColumns);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, arn, name, tableReference, createTime, updateTime, analysisRuleTypes, analysisMethod, allowedColumns) { 
        obj['id'] = id;
        obj['arn'] = arn;
        obj['name'] = name;
        obj['tableReference'] = tableReference;
        obj['createTime'] = createTime;
        obj['updateTime'] = updateTime;
        obj['analysisRuleTypes'] = analysisRuleTypes;
        obj['analysisMethod'] = analysisMethod;
        obj['allowedColumns'] = allowedColumns;
    }

    /**
     * Constructs a <code>ConfiguredTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfiguredTable} obj Optional instance to populate.
     * @return {module:model/ConfiguredTable} The populated <code>ConfiguredTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfiguredTable();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('tableReference')) {
                obj['tableReference'] = ConfiguredTableTableReference.constructFromObject(data['tableReference']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'Date');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
            if (data.hasOwnProperty('analysisRuleTypes')) {
                obj['analysisRuleTypes'] = ApiClient.convertToType(data['analysisRuleTypes'], Array);
            }
            if (data.hasOwnProperty('analysisMethod')) {
                obj['analysisMethod'] = ApiClient.convertToType(data['analysisMethod'], AnalysisMethod);
            }
            if (data.hasOwnProperty('allowedColumns')) {
                obj['allowedColumns'] = ApiClient.convertToType(data['allowedColumns'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfiguredTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfiguredTable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConfiguredTable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          String.validateJSON(data['id']);
        }
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `tableReference`
        if (data['tableReference']) { // data not null
          ConfiguredTableTableReference.validateJSON(data['tableReference']);
        }
        // validate the optional field `createTime`
        if (data['createTime']) { // data not null
          Date.validateJSON(data['createTime']);
        }
        // validate the optional field `updateTime`
        if (data['updateTime']) { // data not null
          Date.validateJSON(data['updateTime']);
        }
        // validate the optional field `analysisRuleTypes`
        if (data['analysisRuleTypes']) { // data not null
          Array.validateJSON(data['analysisRuleTypes']);
        }
        // validate the optional field `analysisMethod`
        if (data['analysisMethod']) { // data not null
          AnalysisMethod.validateJSON(data['analysisMethod']);
        }
        // validate the optional field `allowedColumns`
        if (data['allowedColumns']) { // data not null
          Array.validateJSON(data['allowedColumns']);
        }

        return true;
    }


}

ConfiguredTable.RequiredProperties = ["id", "arn", "name", "tableReference", "createTime", "updateTime", "analysisRuleTypes", "analysisMethod", "allowedColumns"];

/**
 * @member {String} id
 */
ConfiguredTable.prototype['id'] = undefined;

/**
 * @member {String} arn
 */
ConfiguredTable.prototype['arn'] = undefined;

/**
 * @member {String} name
 */
ConfiguredTable.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ConfiguredTable.prototype['description'] = undefined;

/**
 * @member {module:model/ConfiguredTableTableReference} tableReference
 */
ConfiguredTable.prototype['tableReference'] = undefined;

/**
 * @member {Date} createTime
 */
ConfiguredTable.prototype['createTime'] = undefined;

/**
 * @member {Date} updateTime
 */
ConfiguredTable.prototype['updateTime'] = undefined;

/**
 * @member {Array} analysisRuleTypes
 */
ConfiguredTable.prototype['analysisRuleTypes'] = undefined;

/**
 * @member {module:model/AnalysisMethod} analysisMethod
 */
ConfiguredTable.prototype['analysisMethod'] = undefined;

/**
 * @member {Array} allowedColumns
 */
ConfiguredTable.prototype['allowedColumns'] = undefined;






export default ConfiguredTable;

