/**
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchGetCollaborationAnalysisTemplateOutput from '../model/BatchGetCollaborationAnalysisTemplateOutput';
import BatchGetCollaborationAnalysisTemplateRequest from '../model/BatchGetCollaborationAnalysisTemplateRequest';
import BatchGetSchemaOutput from '../model/BatchGetSchemaOutput';
import BatchGetSchemaRequest from '../model/BatchGetSchemaRequest';
import CreateAnalysisTemplateOutput from '../model/CreateAnalysisTemplateOutput';
import CreateAnalysisTemplateRequest from '../model/CreateAnalysisTemplateRequest';
import CreateCollaborationOutput from '../model/CreateCollaborationOutput';
import CreateCollaborationRequest from '../model/CreateCollaborationRequest';
import CreateConfiguredTableAnalysisRuleOutput from '../model/CreateConfiguredTableAnalysisRuleOutput';
import CreateConfiguredTableAnalysisRuleRequest from '../model/CreateConfiguredTableAnalysisRuleRequest';
import CreateConfiguredTableAssociationOutput from '../model/CreateConfiguredTableAssociationOutput';
import CreateConfiguredTableAssociationRequest from '../model/CreateConfiguredTableAssociationRequest';
import CreateConfiguredTableOutput from '../model/CreateConfiguredTableOutput';
import CreateConfiguredTableRequest from '../model/CreateConfiguredTableRequest';
import CreateMembershipOutput from '../model/CreateMembershipOutput';
import CreateMembershipRequest from '../model/CreateMembershipRequest';
import GetAnalysisTemplateOutput from '../model/GetAnalysisTemplateOutput';
import GetCollaborationAnalysisTemplateOutput from '../model/GetCollaborationAnalysisTemplateOutput';
import GetCollaborationOutput from '../model/GetCollaborationOutput';
import GetConfiguredTableAnalysisRuleOutput from '../model/GetConfiguredTableAnalysisRuleOutput';
import GetConfiguredTableAssociationOutput from '../model/GetConfiguredTableAssociationOutput';
import GetConfiguredTableOutput from '../model/GetConfiguredTableOutput';
import GetMembershipOutput from '../model/GetMembershipOutput';
import GetProtectedQueryOutput from '../model/GetProtectedQueryOutput';
import GetSchemaAnalysisRuleOutput from '../model/GetSchemaAnalysisRuleOutput';
import GetSchemaOutput from '../model/GetSchemaOutput';
import ListAnalysisTemplatesOutput from '../model/ListAnalysisTemplatesOutput';
import ListCollaborationAnalysisTemplatesOutput from '../model/ListCollaborationAnalysisTemplatesOutput';
import ListCollaborationsOutput from '../model/ListCollaborationsOutput';
import ListConfiguredTableAssociationsOutput from '../model/ListConfiguredTableAssociationsOutput';
import ListConfiguredTablesOutput from '../model/ListConfiguredTablesOutput';
import ListMembersOutput from '../model/ListMembersOutput';
import ListMembershipsOutput from '../model/ListMembershipsOutput';
import ListProtectedQueriesOutput from '../model/ListProtectedQueriesOutput';
import ListSchemasOutput from '../model/ListSchemasOutput';
import ListTagsForResourceOutput from '../model/ListTagsForResourceOutput';
import StartProtectedQueryOutput from '../model/StartProtectedQueryOutput';
import StartProtectedQueryRequest from '../model/StartProtectedQueryRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAnalysisTemplateOutput from '../model/UpdateAnalysisTemplateOutput';
import UpdateAnalysisTemplateRequest from '../model/UpdateAnalysisTemplateRequest';
import UpdateCollaborationOutput from '../model/UpdateCollaborationOutput';
import UpdateCollaborationRequest from '../model/UpdateCollaborationRequest';
import UpdateConfiguredTableAnalysisRuleOutput from '../model/UpdateConfiguredTableAnalysisRuleOutput';
import UpdateConfiguredTableAnalysisRuleRequest from '../model/UpdateConfiguredTableAnalysisRuleRequest';
import UpdateConfiguredTableAssociationOutput from '../model/UpdateConfiguredTableAssociationOutput';
import UpdateConfiguredTableAssociationRequest from '../model/UpdateConfiguredTableAssociationRequest';
import UpdateConfiguredTableOutput from '../model/UpdateConfiguredTableOutput';
import UpdateConfiguredTableRequest from '../model/UpdateConfiguredTableRequest';
import UpdateMembershipOutput from '../model/UpdateMembershipOutput';
import UpdateMembershipRequest from '../model/UpdateMembershipRequest';
import UpdateProtectedQueryOutput from '../model/UpdateProtectedQueryOutput';
import UpdateProtectedQueryRequest from '../model/UpdateProtectedQueryRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2022-02-17
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetCollaborationAnalysisTemplate operation.
     * @callback module:api/DefaultApi~batchGetCollaborationAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetCollaborationAnalysisTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves multiple analysis templates within a collaboration by their Amazon Resource Names (ARNs).
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the analysis templates belong to. Currently accepts collaboration ID.
     * @param {module:model/BatchGetCollaborationAnalysisTemplateRequest} batchGetCollaborationAnalysisTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetCollaborationAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetCollaborationAnalysisTemplateOutput}
     */
    batchGetCollaborationAnalysisTemplate(collaborationIdentifier, batchGetCollaborationAnalysisTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetCollaborationAnalysisTemplateRequest;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling batchGetCollaborationAnalysisTemplate");
      }
      // verify the required parameter 'batchGetCollaborationAnalysisTemplateRequest' is set
      if (batchGetCollaborationAnalysisTemplateRequest === undefined || batchGetCollaborationAnalysisTemplateRequest === null) {
        throw new Error("Missing the required parameter 'batchGetCollaborationAnalysisTemplateRequest' when calling batchGetCollaborationAnalysisTemplate");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetCollaborationAnalysisTemplateOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/batch-analysistemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetSchema operation.
     * @callback module:api/DefaultApi~batchGetSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetSchemaOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves multiple schemas by their identifiers.
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the schemas belong to. Currently accepts collaboration ID.
     * @param {module:model/BatchGetSchemaRequest} batchGetSchemaRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetSchemaOutput}
     */
    batchGetSchema(collaborationIdentifier, batchGetSchemaRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetSchemaRequest;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling batchGetSchema");
      }
      // verify the required parameter 'batchGetSchemaRequest' is set
      if (batchGetSchemaRequest === undefined || batchGetSchemaRequest === null) {
        throw new Error("Missing the required parameter 'batchGetSchemaRequest' when calling batchGetSchema");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetSchemaOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/batch-schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAnalysisTemplate operation.
     * @callback module:api/DefaultApi~createAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAnalysisTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new analysis template.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {module:model/CreateAnalysisTemplateRequest} createAnalysisTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAnalysisTemplateOutput}
     */
    createAnalysisTemplate(membershipIdentifier, createAnalysisTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAnalysisTemplateRequest;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling createAnalysisTemplate");
      }
      // verify the required parameter 'createAnalysisTemplateRequest' is set
      if (createAnalysisTemplateRequest === undefined || createAnalysisTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createAnalysisTemplateRequest' when calling createAnalysisTemplate");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAnalysisTemplateOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/analysistemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollaboration operation.
     * @callback module:api/DefaultApi~createCollaborationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCollaborationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new collaboration.
     * @param {module:model/CreateCollaborationRequest} createCollaborationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCollaborationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCollaborationOutput}
     */
    createCollaboration(createCollaborationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCollaborationRequest;
      // verify the required parameter 'createCollaborationRequest' is set
      if (createCollaborationRequest === undefined || createCollaborationRequest === null) {
        throw new Error("Missing the required parameter 'createCollaborationRequest' when calling createCollaboration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCollaborationOutput;
      return this.apiClient.callApi(
        '/collaborations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfiguredTable operation.
     * @callback module:api/DefaultApi~createConfiguredTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConfiguredTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new configured table resource.
     * @param {module:model/CreateConfiguredTableRequest} createConfiguredTableRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfiguredTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConfiguredTableOutput}
     */
    createConfiguredTable(createConfiguredTableRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfiguredTableRequest;
      // verify the required parameter 'createConfiguredTableRequest' is set
      if (createConfiguredTableRequest === undefined || createConfiguredTableRequest === null) {
        throw new Error("Missing the required parameter 'createConfiguredTableRequest' when calling createConfiguredTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConfiguredTableOutput;
      return this.apiClient.callApi(
        '/configuredTables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfiguredTableAnalysisRule operation.
     * @callback module:api/DefaultApi~createConfiguredTableAnalysisRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConfiguredTableAnalysisRuleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new analysis rule for a configured table. Currently, only one analysis rule can be created for a given configured table.
     * @param {String} configuredTableIdentifier The identifier for the configured table to create the analysis rule for. Currently accepts the configured table ID. 
     * @param {module:model/CreateConfiguredTableAnalysisRuleRequest} createConfiguredTableAnalysisRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfiguredTableAnalysisRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConfiguredTableAnalysisRuleOutput}
     */
    createConfiguredTableAnalysisRule(configuredTableIdentifier, createConfiguredTableAnalysisRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfiguredTableAnalysisRuleRequest;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling createConfiguredTableAnalysisRule");
      }
      // verify the required parameter 'createConfiguredTableAnalysisRuleRequest' is set
      if (createConfiguredTableAnalysisRuleRequest === undefined || createConfiguredTableAnalysisRuleRequest === null) {
        throw new Error("Missing the required parameter 'createConfiguredTableAnalysisRuleRequest' when calling createConfiguredTableAnalysisRule");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConfiguredTableAnalysisRuleOutput;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}/analysisRule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createConfiguredTableAssociation operation.
     * @callback module:api/DefaultApi~createConfiguredTableAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateConfiguredTableAssociationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a configured table association. A configured table association links a configured table with a collaboration.
     * @param {String} membershipIdentifier A unique identifier for one of your memberships for a collaboration. The configured table is associated to the collaboration that this membership belongs to. Currently accepts a membership ID.
     * @param {module:model/CreateConfiguredTableAssociationRequest} createConfiguredTableAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createConfiguredTableAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateConfiguredTableAssociationOutput}
     */
    createConfiguredTableAssociation(membershipIdentifier, createConfiguredTableAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createConfiguredTableAssociationRequest;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling createConfiguredTableAssociation");
      }
      // verify the required parameter 'createConfiguredTableAssociationRequest' is set
      if (createConfiguredTableAssociationRequest === undefined || createConfiguredTableAssociationRequest === null) {
        throw new Error("Missing the required parameter 'createConfiguredTableAssociationRequest' when calling createConfiguredTableAssociation");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateConfiguredTableAssociationOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/configuredTableAssociations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMembership operation.
     * @callback module:api/DefaultApi~createMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMembershipOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a membership for a specific collaboration identifier and joins the collaboration.
     * @param {module:model/CreateMembershipRequest} createMembershipRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMembershipOutput}
     */
    createMembership(createMembershipRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMembershipRequest;
      // verify the required parameter 'createMembershipRequest' is set
      if (createMembershipRequest === undefined || createMembershipRequest === null) {
        throw new Error("Missing the required parameter 'createMembershipRequest' when calling createMembership");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMembershipOutput;
      return this.apiClient.callApi(
        '/memberships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAnalysisTemplate operation.
     * @callback module:api/DefaultApi~deleteAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an analysis template.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {String} analysisTemplateIdentifier The identifier for the analysis template resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAnalysisTemplate(membershipIdentifier, analysisTemplateIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling deleteAnalysisTemplate");
      }
      // verify the required parameter 'analysisTemplateIdentifier' is set
      if (analysisTemplateIdentifier === undefined || analysisTemplateIdentifier === null) {
        throw new Error("Missing the required parameter 'analysisTemplateIdentifier' when calling deleteAnalysisTemplate");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier,
        'analysisTemplateIdentifier': analysisTemplateIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/analysistemplates/{analysisTemplateIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollaboration operation.
     * @callback module:api/DefaultApi~deleteCollaborationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a collaboration. It can only be called by the collaboration owner.
     * @param {String} collaborationIdentifier The identifier for the collaboration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCollaborationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCollaboration(collaborationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling deleteCollaboration");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfiguredTable operation.
     * @callback module:api/DefaultApi~deleteConfiguredTableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a configured table.
     * @param {String} configuredTableIdentifier The unique ID for the configured table to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfiguredTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfiguredTable(configuredTableIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling deleteConfiguredTable");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfiguredTableAnalysisRule operation.
     * @callback module:api/DefaultApi~deleteConfiguredTableAnalysisRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a configured table analysis rule.
     * @param {String} configuredTableIdentifier The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.
     * @param {module:model/String} analysisRuleType The analysis rule type to be deleted. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfiguredTableAnalysisRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfiguredTableAnalysisRule(configuredTableIdentifier, analysisRuleType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling deleteConfiguredTableAnalysisRule");
      }
      // verify the required parameter 'analysisRuleType' is set
      if (analysisRuleType === undefined || analysisRuleType === null) {
        throw new Error("Missing the required parameter 'analysisRuleType' when calling deleteConfiguredTableAnalysisRule");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier,
        'analysisRuleType': analysisRuleType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}/analysisRule/{analysisRuleType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteConfiguredTableAssociation operation.
     * @callback module:api/DefaultApi~deleteConfiguredTableAssociationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a configured table association.
     * @param {String} configuredTableAssociationIdentifier The unique ID for the configured table association to be deleted. Currently accepts the configured table ID.
     * @param {String} membershipIdentifier A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteConfiguredTableAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteConfiguredTableAssociation(configuredTableAssociationIdentifier, membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configuredTableAssociationIdentifier' is set
      if (configuredTableAssociationIdentifier === undefined || configuredTableAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableAssociationIdentifier' when calling deleteConfiguredTableAssociation");
      }
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling deleteConfiguredTableAssociation");
      }

      let pathParams = {
        'configuredTableAssociationIdentifier': configuredTableAssociationIdentifier,
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/configuredTableAssociations/{configuredTableAssociationIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMember operation.
     * @callback module:api/DefaultApi~deleteMemberCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified member from a collaboration. The removed member is placed in the Removed status and can't interact with the collaboration. The removed member's data is inaccessible to active members of the collaboration.
     * @param {String} collaborationIdentifier The unique identifier for the associated collaboration.
     * @param {String} accountId The account ID of the member to remove.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMember(collaborationIdentifier, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling deleteMember");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling deleteMember");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier,
        'accountId': accountId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/member/{accountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMembership operation.
     * @callback module:api/DefaultApi~deleteMembershipCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specified membership. All resources under a membership must be deleted.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteMembership(membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling deleteMembership");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnalysisTemplate operation.
     * @callback module:api/DefaultApi~getAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnalysisTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an analysis template.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {String} analysisTemplateIdentifier The identifier for the analysis template resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnalysisTemplateOutput}
     */
    getAnalysisTemplate(membershipIdentifier, analysisTemplateIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling getAnalysisTemplate");
      }
      // verify the required parameter 'analysisTemplateIdentifier' is set
      if (analysisTemplateIdentifier === undefined || analysisTemplateIdentifier === null) {
        throw new Error("Missing the required parameter 'analysisTemplateIdentifier' when calling getAnalysisTemplate");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier,
        'analysisTemplateIdentifier': analysisTemplateIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnalysisTemplateOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/analysistemplates/{analysisTemplateIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollaboration operation.
     * @callback module:api/DefaultApi~getCollaborationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCollaborationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata about a collaboration.
     * @param {String} collaborationIdentifier The identifier for the collaboration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCollaborationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCollaborationOutput}
     */
    getCollaboration(collaborationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling getCollaboration");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCollaborationOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollaborationAnalysisTemplate operation.
     * @callback module:api/DefaultApi~getCollaborationAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCollaborationAnalysisTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves an analysis template within a collaboration.
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the analysis templates belong to. Currently accepts collaboration ID.
     * @param {String} analysisTemplateArn The Amazon Resource Name (ARN) associated with the analysis template within a collaboration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCollaborationAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCollaborationAnalysisTemplateOutput}
     */
    getCollaborationAnalysisTemplate(collaborationIdentifier, analysisTemplateArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling getCollaborationAnalysisTemplate");
      }
      // verify the required parameter 'analysisTemplateArn' is set
      if (analysisTemplateArn === undefined || analysisTemplateArn === null) {
        throw new Error("Missing the required parameter 'analysisTemplateArn' when calling getCollaborationAnalysisTemplate");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier,
        'analysisTemplateArn': analysisTemplateArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCollaborationAnalysisTemplateOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/analysistemplates/{analysisTemplateArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguredTable operation.
     * @callback module:api/DefaultApi~getConfiguredTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfiguredTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a configured table.
     * @param {String} configuredTableIdentifier The unique ID for the configured table to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfiguredTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfiguredTableOutput}
     */
    getConfiguredTable(configuredTableIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling getConfiguredTable");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfiguredTableOutput;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguredTableAnalysisRule operation.
     * @callback module:api/DefaultApi~getConfiguredTableAnalysisRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfiguredTableAnalysisRuleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a configured table analysis rule.
     * @param {String} configuredTableIdentifier The unique identifier for the configured table to retrieve. Currently accepts the configured table ID.
     * @param {module:model/String} analysisRuleType The analysis rule to be retrieved. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfiguredTableAnalysisRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfiguredTableAnalysisRuleOutput}
     */
    getConfiguredTableAnalysisRule(configuredTableIdentifier, analysisRuleType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling getConfiguredTableAnalysisRule");
      }
      // verify the required parameter 'analysisRuleType' is set
      if (analysisRuleType === undefined || analysisRuleType === null) {
        throw new Error("Missing the required parameter 'analysisRuleType' when calling getConfiguredTableAnalysisRule");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier,
        'analysisRuleType': analysisRuleType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfiguredTableAnalysisRuleOutput;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}/analysisRule/{analysisRuleType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguredTableAssociation operation.
     * @callback module:api/DefaultApi~getConfiguredTableAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConfiguredTableAssociationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a configured table association.
     * @param {String} configuredTableAssociationIdentifier The unique ID for the configured table association to retrieve. Currently accepts the configured table ID.
     * @param {String} membershipIdentifier A unique identifier for the membership that the configured table association belongs to. Currently accepts the membership ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getConfiguredTableAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConfiguredTableAssociationOutput}
     */
    getConfiguredTableAssociation(configuredTableAssociationIdentifier, membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'configuredTableAssociationIdentifier' is set
      if (configuredTableAssociationIdentifier === undefined || configuredTableAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableAssociationIdentifier' when calling getConfiguredTableAssociation");
      }
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling getConfiguredTableAssociation");
      }

      let pathParams = {
        'configuredTableAssociationIdentifier': configuredTableAssociationIdentifier,
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConfiguredTableAssociationOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/configuredTableAssociations/{configuredTableAssociationIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMembership operation.
     * @callback module:api/DefaultApi~getMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMembershipOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specified membership for an identifier.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMembershipOutput}
     */
    getMembership(membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling getMembership");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMembershipOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProtectedQuery operation.
     * @callback module:api/DefaultApi~getProtectedQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProtectedQueryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns query processing metadata.
     * @param {String} membershipIdentifier The identifier for a membership in a protected query instance.
     * @param {String} protectedQueryIdentifier The identifier for a protected query instance.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getProtectedQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProtectedQueryOutput}
     */
    getProtectedQuery(membershipIdentifier, protectedQueryIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling getProtectedQuery");
      }
      // verify the required parameter 'protectedQueryIdentifier' is set
      if (protectedQueryIdentifier === undefined || protectedQueryIdentifier === null) {
        throw new Error("Missing the required parameter 'protectedQueryIdentifier' when calling getProtectedQuery");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier,
        'protectedQueryIdentifier': protectedQueryIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProtectedQueryOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/protectedQueries/{protectedQueryIdentifier}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchema operation.
     * @callback module:api/DefaultApi~getSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSchemaOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the schema for a relation within a collaboration.
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
     * @param {String} name The name of the relation to retrieve the schema for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSchemaOutput}
     */
    getSchema(collaborationIdentifier, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling getSchema");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSchema");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSchemaOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/schemas/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSchemaAnalysisRule operation.
     * @callback module:api/DefaultApi~getSchemaAnalysisRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSchemaAnalysisRuleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a schema analysis rule.
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
     * @param {String} name The name of the schema to retrieve the analysis rule for.
     * @param {module:model/String} type The type of the schema analysis rule to retrieve. Schema analysis rules are uniquely identified by a combination of the collaboration, the schema name, and their type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSchemaAnalysisRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSchemaAnalysisRuleOutput}
     */
    getSchemaAnalysisRule(collaborationIdentifier, name, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling getSchemaAnalysisRule");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSchemaAnalysisRule");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getSchemaAnalysisRule");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier,
        'name': name,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSchemaAnalysisRuleOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/schemas/{name}/analysisRule/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnalysisTemplates operation.
     * @callback module:api/DefaultApi~listAnalysisTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnalysisTemplatesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists analysis templates that the caller owns.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:api/DefaultApi~listAnalysisTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnalysisTemplatesOutput}
     */
    listAnalysisTemplates(membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling listAnalysisTemplates");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAnalysisTemplatesOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/analysistemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollaborationAnalysisTemplates operation.
     * @callback module:api/DefaultApi~listCollaborationAnalysisTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCollaborationAnalysisTemplatesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists analysis templates within a collaboration.
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the analysis templates belong to. Currently accepts collaboration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:api/DefaultApi~listCollaborationAnalysisTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCollaborationAnalysisTemplatesOutput}
     */
    listCollaborationAnalysisTemplates(collaborationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling listCollaborationAnalysisTemplates");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCollaborationAnalysisTemplatesOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/analysistemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollaborations operation.
     * @callback module:api/DefaultApi~listCollaborationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCollaborationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists collaborations the caller owns, is active in, or has been invited to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service may return a nextToken even if the maximum results has not been met.
     * @param {module:model/String} [memberStatus] The caller's status in a collaboration.
     * @param {module:api/DefaultApi~listCollaborationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCollaborationsOutput}
     */
    listCollaborations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'memberStatus': opts['memberStatus']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCollaborationsOutput;
      return this.apiClient.callApi(
        '/collaborations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfiguredTableAssociations operation.
     * @callback module:api/DefaultApi~listConfiguredTableAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfiguredTableAssociationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists configured table associations for a membership.
     * @param {String} membershipIdentifier A unique identifier for the membership to list configured table associations for. Currently accepts the membership ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:api/DefaultApi~listConfiguredTableAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfiguredTableAssociationsOutput}
     */
    listConfiguredTableAssociations(membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling listConfiguredTableAssociations");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfiguredTableAssociationsOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/configuredTableAssociations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listConfiguredTables operation.
     * @callback module:api/DefaultApi~listConfiguredTablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListConfiguredTablesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists configured tables.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:api/DefaultApi~listConfiguredTablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListConfiguredTablesOutput}
     */
    listConfiguredTables(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListConfiguredTablesOutput;
      return this.apiClient.callApi(
        '/configuredTables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMembers operation.
     * @callback module:api/DefaultApi~listMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMembersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all members within a collaboration.
     * @param {String} collaborationIdentifier The identifier of the collaboration in which the members are listed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:api/DefaultApi~listMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMembersOutput}
     */
    listMembers(collaborationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling listMembers");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMembersOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMemberships operation.
     * @callback module:api/DefaultApi~listMembershipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMembershipsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all memberships resources within the caller's account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:model/String} [status] A filter which will return only memberships in the specified status.
     * @param {module:api/DefaultApi~listMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMembershipsOutput}
     */
    listMemberships(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMembershipsOutput;
      return this.apiClient.callApi(
        '/memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProtectedQueries operation.
     * @callback module:api/DefaultApi~listProtectedQueriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProtectedQueriesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists protected queries, sorted by the most recent query.
     * @param {String} membershipIdentifier The identifier for the membership in the collaboration.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [status] A filter on the status of the protected query.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call. Service chooses a default if it has not been set. Service can return a nextToken even if the maximum results has not been met. 
     * @param {module:api/DefaultApi~listProtectedQueriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProtectedQueriesOutput}
     */
    listProtectedQueries(membershipIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling listProtectedQueries");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
        'status': opts['status'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProtectedQueriesOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/protectedQueries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSchemas operation.
     * @callback module:api/DefaultApi~listSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSchemasOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the schemas for relations within a collaboration.
     * @param {String} collaborationIdentifier A unique identifier for the collaboration that the schema belongs to. Currently accepts a collaboration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [schemaType] If present, filter schemas by schema type. The only valid schema type is currently `TABLE`.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {Number} [maxResults] The maximum size of the results that is returned per call.
     * @param {module:api/DefaultApi~listSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSchemasOutput}
     */
    listSchemas(collaborationIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling listSchemas");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
        'schemaType': opts['schemaType'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSchemasOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the tags that have been added to a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) associated with the resource you want to list tags on.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceOutput}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceOutput;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startProtectedQuery operation.
     * @callback module:api/DefaultApi~startProtectedQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartProtectedQueryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a protected query that is started by Clean Rooms .
     * @param {String} membershipIdentifier A unique identifier for the membership to run this query against. Currently accepts a membership ID.
     * @param {module:model/StartProtectedQueryRequest} startProtectedQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startProtectedQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartProtectedQueryOutput}
     */
    startProtectedQuery(membershipIdentifier, startProtectedQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = startProtectedQueryRequest;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling startProtectedQuery");
      }
      // verify the required parameter 'startProtectedQueryRequest' is set
      if (startProtectedQueryRequest === undefined || startProtectedQueryRequest === null) {
        throw new Error("Missing the required parameter 'startProtectedQueryRequest' when calling startProtectedQuery");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartProtectedQueryOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/protectedQueries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tags a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) associated with the resource you want to tag.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag or list of tags from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) associated with the resource you want to remove the tag from.
     * @param {Array.<String>} tagKeys A list of key names of tags to be removed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnalysisTemplate operation.
     * @callback module:api/DefaultApi~updateAnalysisTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAnalysisTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the analysis template metadata.
     * @param {String} membershipIdentifier The identifier for a membership resource.
     * @param {String} analysisTemplateIdentifier The identifier for the analysis template resource.
     * @param {module:model/UpdateAnalysisTemplateRequest} updateAnalysisTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAnalysisTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAnalysisTemplateOutput}
     */
    updateAnalysisTemplate(membershipIdentifier, analysisTemplateIdentifier, updateAnalysisTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAnalysisTemplateRequest;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling updateAnalysisTemplate");
      }
      // verify the required parameter 'analysisTemplateIdentifier' is set
      if (analysisTemplateIdentifier === undefined || analysisTemplateIdentifier === null) {
        throw new Error("Missing the required parameter 'analysisTemplateIdentifier' when calling updateAnalysisTemplate");
      }
      // verify the required parameter 'updateAnalysisTemplateRequest' is set
      if (updateAnalysisTemplateRequest === undefined || updateAnalysisTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateAnalysisTemplateRequest' when calling updateAnalysisTemplate");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier,
        'analysisTemplateIdentifier': analysisTemplateIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAnalysisTemplateOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/analysistemplates/{analysisTemplateIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollaboration operation.
     * @callback module:api/DefaultApi~updateCollaborationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCollaborationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates collaboration metadata and can only be called by the collaboration owner.
     * @param {String} collaborationIdentifier The identifier for the collaboration.
     * @param {module:model/UpdateCollaborationRequest} updateCollaborationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCollaborationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCollaborationOutput}
     */
    updateCollaboration(collaborationIdentifier, updateCollaborationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCollaborationRequest;
      // verify the required parameter 'collaborationIdentifier' is set
      if (collaborationIdentifier === undefined || collaborationIdentifier === null) {
        throw new Error("Missing the required parameter 'collaborationIdentifier' when calling updateCollaboration");
      }
      // verify the required parameter 'updateCollaborationRequest' is set
      if (updateCollaborationRequest === undefined || updateCollaborationRequest === null) {
        throw new Error("Missing the required parameter 'updateCollaborationRequest' when calling updateCollaboration");
      }

      let pathParams = {
        'collaborationIdentifier': collaborationIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCollaborationOutput;
      return this.apiClient.callApi(
        '/collaborations/{collaborationIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguredTable operation.
     * @callback module:api/DefaultApi~updateConfiguredTableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConfiguredTableOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a configured table.
     * @param {String} configuredTableIdentifier The identifier for the configured table to update. Currently accepts the configured table ID.
     * @param {module:model/UpdateConfiguredTableRequest} updateConfiguredTableRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfiguredTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConfiguredTableOutput}
     */
    updateConfiguredTable(configuredTableIdentifier, updateConfiguredTableRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfiguredTableRequest;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling updateConfiguredTable");
      }
      // verify the required parameter 'updateConfiguredTableRequest' is set
      if (updateConfiguredTableRequest === undefined || updateConfiguredTableRequest === null) {
        throw new Error("Missing the required parameter 'updateConfiguredTableRequest' when calling updateConfiguredTable");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConfiguredTableOutput;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguredTableAnalysisRule operation.
     * @callback module:api/DefaultApi~updateConfiguredTableAnalysisRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConfiguredTableAnalysisRuleOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a configured table analysis rule.
     * @param {String} configuredTableIdentifier The unique identifier for the configured table that the analysis rule applies to. Currently accepts the configured table ID.
     * @param {module:model/String} analysisRuleType The analysis rule type to be updated. Configured table analysis rules are uniquely identified by their configured table identifier and analysis rule type.
     * @param {module:model/UpdateConfiguredTableAnalysisRuleRequest} updateConfiguredTableAnalysisRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfiguredTableAnalysisRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConfiguredTableAnalysisRuleOutput}
     */
    updateConfiguredTableAnalysisRule(configuredTableIdentifier, analysisRuleType, updateConfiguredTableAnalysisRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfiguredTableAnalysisRuleRequest;
      // verify the required parameter 'configuredTableIdentifier' is set
      if (configuredTableIdentifier === undefined || configuredTableIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableIdentifier' when calling updateConfiguredTableAnalysisRule");
      }
      // verify the required parameter 'analysisRuleType' is set
      if (analysisRuleType === undefined || analysisRuleType === null) {
        throw new Error("Missing the required parameter 'analysisRuleType' when calling updateConfiguredTableAnalysisRule");
      }
      // verify the required parameter 'updateConfiguredTableAnalysisRuleRequest' is set
      if (updateConfiguredTableAnalysisRuleRequest === undefined || updateConfiguredTableAnalysisRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateConfiguredTableAnalysisRuleRequest' when calling updateConfiguredTableAnalysisRule");
      }

      let pathParams = {
        'configuredTableIdentifier': configuredTableIdentifier,
        'analysisRuleType': analysisRuleType
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConfiguredTableAnalysisRuleOutput;
      return this.apiClient.callApi(
        '/configuredTables/{configuredTableIdentifier}/analysisRule/{analysisRuleType}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConfiguredTableAssociation operation.
     * @callback module:api/DefaultApi~updateConfiguredTableAssociationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateConfiguredTableAssociationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a configured table association.
     * @param {String} configuredTableAssociationIdentifier The unique identifier for the configured table association to update. Currently accepts the configured table association ID.
     * @param {String} membershipIdentifier The unique ID for the membership that the configured table association belongs to.
     * @param {module:model/UpdateConfiguredTableAssociationRequest} updateConfiguredTableAssociationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateConfiguredTableAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateConfiguredTableAssociationOutput}
     */
    updateConfiguredTableAssociation(configuredTableAssociationIdentifier, membershipIdentifier, updateConfiguredTableAssociationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateConfiguredTableAssociationRequest;
      // verify the required parameter 'configuredTableAssociationIdentifier' is set
      if (configuredTableAssociationIdentifier === undefined || configuredTableAssociationIdentifier === null) {
        throw new Error("Missing the required parameter 'configuredTableAssociationIdentifier' when calling updateConfiguredTableAssociation");
      }
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling updateConfiguredTableAssociation");
      }
      // verify the required parameter 'updateConfiguredTableAssociationRequest' is set
      if (updateConfiguredTableAssociationRequest === undefined || updateConfiguredTableAssociationRequest === null) {
        throw new Error("Missing the required parameter 'updateConfiguredTableAssociationRequest' when calling updateConfiguredTableAssociation");
      }

      let pathParams = {
        'configuredTableAssociationIdentifier': configuredTableAssociationIdentifier,
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateConfiguredTableAssociationOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/configuredTableAssociations/{configuredTableAssociationIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMembership operation.
     * @callback module:api/DefaultApi~updateMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMembershipOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a membership.
     * @param {String} membershipIdentifier The unique identifier of the membership.
     * @param {module:model/UpdateMembershipRequest} updateMembershipRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMembershipOutput}
     */
    updateMembership(membershipIdentifier, updateMembershipRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateMembershipRequest;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling updateMembership");
      }
      // verify the required parameter 'updateMembershipRequest' is set
      if (updateMembershipRequest === undefined || updateMembershipRequest === null) {
        throw new Error("Missing the required parameter 'updateMembershipRequest' when calling updateMembership");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateMembershipOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProtectedQuery operation.
     * @callback module:api/DefaultApi~updateProtectedQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProtectedQueryOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the processing of a currently running query.
     * @param {String} membershipIdentifier The identifier for a member of a protected query instance.
     * @param {String} protectedQueryIdentifier The identifier for a protected query instance.
     * @param {module:model/UpdateProtectedQueryRequest} updateProtectedQueryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProtectedQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProtectedQueryOutput}
     */
    updateProtectedQuery(membershipIdentifier, protectedQueryIdentifier, updateProtectedQueryRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProtectedQueryRequest;
      // verify the required parameter 'membershipIdentifier' is set
      if (membershipIdentifier === undefined || membershipIdentifier === null) {
        throw new Error("Missing the required parameter 'membershipIdentifier' when calling updateProtectedQuery");
      }
      // verify the required parameter 'protectedQueryIdentifier' is set
      if (protectedQueryIdentifier === undefined || protectedQueryIdentifier === null) {
        throw new Error("Missing the required parameter 'protectedQueryIdentifier' when calling updateProtectedQuery");
      }
      // verify the required parameter 'updateProtectedQueryRequest' is set
      if (updateProtectedQueryRequest === undefined || updateProtectedQueryRequest === null) {
        throw new Error("Missing the required parameter 'updateProtectedQueryRequest' when calling updateProtectedQuery");
      }

      let pathParams = {
        'membershipIdentifier': membershipIdentifier,
        'protectedQueryIdentifier': protectedQueryIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProtectedQueryOutput;
      return this.apiClient.callApi(
        '/memberships/{membershipIdentifier}/protectedQueries/{protectedQueryIdentifier}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
