/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartProtectedQueryRequestResultConfiguration;
import org.openapitools.client.model.StartProtectedQueryRequestSqlParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartProtectedQueryRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartProtectedQueryRequest {
  /**
   * The type of the protected query to be started.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SQL("SQL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SQL_PARAMETERS = "sqlParameters";
  @SerializedName(SERIALIZED_NAME_SQL_PARAMETERS)
  private StartProtectedQueryRequestSqlParameters sqlParameters;

  public static final String SERIALIZED_NAME_RESULT_CONFIGURATION = "resultConfiguration";
  @SerializedName(SERIALIZED_NAME_RESULT_CONFIGURATION)
  private StartProtectedQueryRequestResultConfiguration resultConfiguration;

  public StartProtectedQueryRequest() {
  }

  public StartProtectedQueryRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the protected query to be started.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public StartProtectedQueryRequest sqlParameters(StartProtectedQueryRequestSqlParameters sqlParameters) {
    this.sqlParameters = sqlParameters;
    return this;
  }

  /**
   * Get sqlParameters
   * @return sqlParameters
   */
  @javax.annotation.Nonnull
  public StartProtectedQueryRequestSqlParameters getSqlParameters() {
    return sqlParameters;
  }

  public void setSqlParameters(StartProtectedQueryRequestSqlParameters sqlParameters) {
    this.sqlParameters = sqlParameters;
  }


  public StartProtectedQueryRequest resultConfiguration(StartProtectedQueryRequestResultConfiguration resultConfiguration) {
    this.resultConfiguration = resultConfiguration;
    return this;
  }

  /**
   * Get resultConfiguration
   * @return resultConfiguration
   */
  @javax.annotation.Nonnull
  public StartProtectedQueryRequestResultConfiguration getResultConfiguration() {
    return resultConfiguration;
  }

  public void setResultConfiguration(StartProtectedQueryRequestResultConfiguration resultConfiguration) {
    this.resultConfiguration = resultConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartProtectedQueryRequest startProtectedQueryRequest = (StartProtectedQueryRequest) o;
    return Objects.equals(this.type, startProtectedQueryRequest.type) &&
        Objects.equals(this.sqlParameters, startProtectedQueryRequest.sqlParameters) &&
        Objects.equals(this.resultConfiguration, startProtectedQueryRequest.resultConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, sqlParameters, resultConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartProtectedQueryRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sqlParameters: ").append(toIndentedString(sqlParameters)).append("\n");
    sb.append("    resultConfiguration: ").append(toIndentedString(resultConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("sqlParameters");
    openapiFields.add("resultConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("sqlParameters");
    openapiRequiredFields.add("resultConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartProtectedQueryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartProtectedQueryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartProtectedQueryRequest is not found in the empty JSON string", StartProtectedQueryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartProtectedQueryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartProtectedQueryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartProtectedQueryRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the required field `sqlParameters`
      StartProtectedQueryRequestSqlParameters.validateJsonElement(jsonObj.get("sqlParameters"));
      // validate the required field `resultConfiguration`
      StartProtectedQueryRequestResultConfiguration.validateJsonElement(jsonObj.get("resultConfiguration"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartProtectedQueryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartProtectedQueryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartProtectedQueryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartProtectedQueryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartProtectedQueryRequest>() {
           @Override
           public void write(JsonWriter out, StartProtectedQueryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartProtectedQueryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartProtectedQueryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartProtectedQueryRequest
   * @throws IOException if the JSON string is invalid with respect to StartProtectedQueryRequest
   */
  public static StartProtectedQueryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartProtectedQueryRequest.class);
  }

  /**
   * Convert an instance of StartProtectedQueryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

