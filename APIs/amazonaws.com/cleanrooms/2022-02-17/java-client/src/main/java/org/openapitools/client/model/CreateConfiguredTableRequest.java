/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateConfiguredTableRequestTableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfiguredTableRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfiguredTableRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private CreateConfiguredTableRequestTableReference tableReference;

  public static final String SERIALIZED_NAME_ALLOWED_COLUMNS = "allowedColumns";
  @SerializedName(SERIALIZED_NAME_ALLOWED_COLUMNS)
  private List<String> allowedColumns = new ArrayList<>();

  /**
   * The analysis method for the configured tables. The only valid value is currently &#x60;DIRECT_QUERY&#x60;.
   */
  @JsonAdapter(AnalysisMethodEnum.Adapter.class)
  public enum AnalysisMethodEnum {
    DIRECT_QUERY("DIRECT_QUERY");

    private String value;

    AnalysisMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnalysisMethodEnum fromValue(String value) {
      for (AnalysisMethodEnum b : AnalysisMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnalysisMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnalysisMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnalysisMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnalysisMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnalysisMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANALYSIS_METHOD = "analysisMethod";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_METHOD)
  private AnalysisMethodEnum analysisMethod;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateConfiguredTableRequest() {
  }

  public CreateConfiguredTableRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the configured table.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConfiguredTableRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the configured table.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateConfiguredTableRequest tableReference(CreateConfiguredTableRequestTableReference tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nonnull
  public CreateConfiguredTableRequestTableReference getTableReference() {
    return tableReference;
  }

  public void setTableReference(CreateConfiguredTableRequestTableReference tableReference) {
    this.tableReference = tableReference;
  }


  public CreateConfiguredTableRequest allowedColumns(List<String> allowedColumns) {
    this.allowedColumns = allowedColumns;
    return this;
  }

  public CreateConfiguredTableRequest addAllowedColumnsItem(String allowedColumnsItem) {
    if (this.allowedColumns == null) {
      this.allowedColumns = new ArrayList<>();
    }
    this.allowedColumns.add(allowedColumnsItem);
    return this;
  }

  /**
   * The columns of the underlying table that can be used by collaborations or analysis rules.
   * @return allowedColumns
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedColumns() {
    return allowedColumns;
  }

  public void setAllowedColumns(List<String> allowedColumns) {
    this.allowedColumns = allowedColumns;
  }


  public CreateConfiguredTableRequest analysisMethod(AnalysisMethodEnum analysisMethod) {
    this.analysisMethod = analysisMethod;
    return this;
  }

  /**
   * The analysis method for the configured tables. The only valid value is currently &#x60;DIRECT_QUERY&#x60;.
   * @return analysisMethod
   */
  @javax.annotation.Nonnull
  public AnalysisMethodEnum getAnalysisMethod() {
    return analysisMethod;
  }

  public void setAnalysisMethod(AnalysisMethodEnum analysisMethod) {
    this.analysisMethod = analysisMethod;
  }


  public CreateConfiguredTableRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateConfiguredTableRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Map of tags assigned to a resource
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfiguredTableRequest createConfiguredTableRequest = (CreateConfiguredTableRequest) o;
    return Objects.equals(this.name, createConfiguredTableRequest.name) &&
        Objects.equals(this.description, createConfiguredTableRequest.description) &&
        Objects.equals(this.tableReference, createConfiguredTableRequest.tableReference) &&
        Objects.equals(this.allowedColumns, createConfiguredTableRequest.allowedColumns) &&
        Objects.equals(this.analysisMethod, createConfiguredTableRequest.analysisMethod) &&
        Objects.equals(this.tags, createConfiguredTableRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, tableReference, allowedColumns, analysisMethod, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfiguredTableRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("    allowedColumns: ").append(toIndentedString(allowedColumns)).append("\n");
    sb.append("    analysisMethod: ").append(toIndentedString(analysisMethod)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("tableReference");
    openapiFields.add("allowedColumns");
    openapiFields.add("analysisMethod");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tableReference");
    openapiRequiredFields.add("allowedColumns");
    openapiRequiredFields.add("analysisMethod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfiguredTableRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfiguredTableRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfiguredTableRequest is not found in the empty JSON string", CreateConfiguredTableRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfiguredTableRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfiguredTableRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfiguredTableRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `tableReference`
      CreateConfiguredTableRequestTableReference.validateJsonElement(jsonObj.get("tableReference"));
      // ensure the required json array is present
      if (jsonObj.get("allowedColumns") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowedColumns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedColumns` to be an array in the JSON string but got `%s`", jsonObj.get("allowedColumns").toString()));
      }
      if (!jsonObj.get("analysisMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analysisMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analysisMethod").toString()));
      }
      // validate the required field `analysisMethod`
      AnalysisMethodEnum.validateJsonElement(jsonObj.get("analysisMethod"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfiguredTableRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfiguredTableRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfiguredTableRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfiguredTableRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfiguredTableRequest>() {
           @Override
           public void write(JsonWriter out, CreateConfiguredTableRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfiguredTableRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfiguredTableRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfiguredTableRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConfiguredTableRequest
   */
  public static CreateConfiguredTableRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfiguredTableRequest.class);
  }

  /**
   * Convert an instance of CreateConfiguredTableRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

