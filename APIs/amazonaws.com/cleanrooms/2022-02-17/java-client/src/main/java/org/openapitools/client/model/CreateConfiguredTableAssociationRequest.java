/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfiguredTableAssociationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfiguredTableAssociationRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CONFIGURED_TABLE_IDENTIFIER = "configuredTableIdentifier";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_TABLE_IDENTIFIER)
  private String configuredTableIdentifier;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateConfiguredTableAssociationRequest() {
  }

  public CreateConfiguredTableAssociationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the configured table association. This name is used to query the underlying configured table.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConfiguredTableAssociationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for the configured table association.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateConfiguredTableAssociationRequest configuredTableIdentifier(String configuredTableIdentifier) {
    this.configuredTableIdentifier = configuredTableIdentifier;
    return this;
  }

  /**
   * A unique identifier for the configured table to be associated to. Currently accepts a configured table ID.
   * @return configuredTableIdentifier
   */
  @javax.annotation.Nonnull
  public String getConfiguredTableIdentifier() {
    return configuredTableIdentifier;
  }

  public void setConfiguredTableIdentifier(String configuredTableIdentifier) {
    this.configuredTableIdentifier = configuredTableIdentifier;
  }


  public CreateConfiguredTableAssociationRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The service will assume this role to access catalog metadata and query the table.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateConfiguredTableAssociationRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateConfiguredTableAssociationRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Map of tags assigned to a resource
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfiguredTableAssociationRequest createConfiguredTableAssociationRequest = (CreateConfiguredTableAssociationRequest) o;
    return Objects.equals(this.name, createConfiguredTableAssociationRequest.name) &&
        Objects.equals(this.description, createConfiguredTableAssociationRequest.description) &&
        Objects.equals(this.configuredTableIdentifier, createConfiguredTableAssociationRequest.configuredTableIdentifier) &&
        Objects.equals(this.roleArn, createConfiguredTableAssociationRequest.roleArn) &&
        Objects.equals(this.tags, createConfiguredTableAssociationRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, configuredTableIdentifier, roleArn, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfiguredTableAssociationRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    configuredTableIdentifier: ").append(toIndentedString(configuredTableIdentifier)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("configuredTableIdentifier");
    openapiFields.add("roleArn");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("configuredTableIdentifier");
    openapiRequiredFields.add("roleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfiguredTableAssociationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfiguredTableAssociationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfiguredTableAssociationRequest is not found in the empty JSON string", CreateConfiguredTableAssociationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfiguredTableAssociationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfiguredTableAssociationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfiguredTableAssociationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("configuredTableIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuredTableIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configuredTableIdentifier").toString()));
      }
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfiguredTableAssociationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfiguredTableAssociationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfiguredTableAssociationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfiguredTableAssociationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfiguredTableAssociationRequest>() {
           @Override
           public void write(JsonWriter out, CreateConfiguredTableAssociationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfiguredTableAssociationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfiguredTableAssociationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfiguredTableAssociationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateConfiguredTableAssociationRequest
   */
  public static CreateConfiguredTableAssociationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfiguredTableAssociationRequest.class);
  }

  /**
   * Convert an instance of CreateConfiguredTableAssociationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

