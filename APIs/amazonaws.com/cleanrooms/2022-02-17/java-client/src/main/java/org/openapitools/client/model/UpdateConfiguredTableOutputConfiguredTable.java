/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalysisMethod;
import org.openapitools.client.model.ConfiguredTableTableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateConfiguredTableOutputConfiguredTable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConfiguredTableOutputConfiguredTable {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private ConfiguredTableTableReference tableReference;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_ANALYSIS_RULE_TYPES = "analysisRuleTypes";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_RULE_TYPES)
  private List analysisRuleTypes;

  public static final String SERIALIZED_NAME_ANALYSIS_METHOD = "analysisMethod";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_METHOD)
  private AnalysisMethod analysisMethod;

  public static final String SERIALIZED_NAME_ALLOWED_COLUMNS = "allowedColumns";
  @SerializedName(SERIALIZED_NAME_ALLOWED_COLUMNS)
  private List allowedColumns;

  public UpdateConfiguredTableOutputConfiguredTable() {
  }

  public UpdateConfiguredTableOutputConfiguredTable id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateConfiguredTableOutputConfiguredTable arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UpdateConfiguredTableOutputConfiguredTable name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateConfiguredTableOutputConfiguredTable description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateConfiguredTableOutputConfiguredTable tableReference(ConfiguredTableTableReference tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nonnull
  public ConfiguredTableTableReference getTableReference() {
    return tableReference;
  }

  public void setTableReference(ConfiguredTableTableReference tableReference) {
    this.tableReference = tableReference;
  }


  public UpdateConfiguredTableOutputConfiguredTable createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public UpdateConfiguredTableOutputConfiguredTable updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public UpdateConfiguredTableOutputConfiguredTable analysisRuleTypes(List analysisRuleTypes) {
    this.analysisRuleTypes = analysisRuleTypes;
    return this;
  }

  /**
   * Get analysisRuleTypes
   * @return analysisRuleTypes
   */
  @javax.annotation.Nonnull
  public List getAnalysisRuleTypes() {
    return analysisRuleTypes;
  }

  public void setAnalysisRuleTypes(List analysisRuleTypes) {
    this.analysisRuleTypes = analysisRuleTypes;
  }


  public UpdateConfiguredTableOutputConfiguredTable analysisMethod(AnalysisMethod analysisMethod) {
    this.analysisMethod = analysisMethod;
    return this;
  }

  /**
   * Get analysisMethod
   * @return analysisMethod
   */
  @javax.annotation.Nonnull
  public AnalysisMethod getAnalysisMethod() {
    return analysisMethod;
  }

  public void setAnalysisMethod(AnalysisMethod analysisMethod) {
    this.analysisMethod = analysisMethod;
  }


  public UpdateConfiguredTableOutputConfiguredTable allowedColumns(List allowedColumns) {
    this.allowedColumns = allowedColumns;
    return this;
  }

  /**
   * Get allowedColumns
   * @return allowedColumns
   */
  @javax.annotation.Nonnull
  public List getAllowedColumns() {
    return allowedColumns;
  }

  public void setAllowedColumns(List allowedColumns) {
    this.allowedColumns = allowedColumns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConfiguredTableOutputConfiguredTable updateConfiguredTableOutputConfiguredTable = (UpdateConfiguredTableOutputConfiguredTable) o;
    return Objects.equals(this.id, updateConfiguredTableOutputConfiguredTable.id) &&
        Objects.equals(this.arn, updateConfiguredTableOutputConfiguredTable.arn) &&
        Objects.equals(this.name, updateConfiguredTableOutputConfiguredTable.name) &&
        Objects.equals(this.description, updateConfiguredTableOutputConfiguredTable.description) &&
        Objects.equals(this.tableReference, updateConfiguredTableOutputConfiguredTable.tableReference) &&
        Objects.equals(this.createTime, updateConfiguredTableOutputConfiguredTable.createTime) &&
        Objects.equals(this.updateTime, updateConfiguredTableOutputConfiguredTable.updateTime) &&
        Objects.equals(this.analysisRuleTypes, updateConfiguredTableOutputConfiguredTable.analysisRuleTypes) &&
        Objects.equals(this.analysisMethod, updateConfiguredTableOutputConfiguredTable.analysisMethod) &&
        Objects.equals(this.allowedColumns, updateConfiguredTableOutputConfiguredTable.allowedColumns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, arn, name, description, tableReference, createTime, updateTime, analysisRuleTypes, analysisMethod, allowedColumns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConfiguredTableOutputConfiguredTable {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    analysisRuleTypes: ").append(toIndentedString(analysisRuleTypes)).append("\n");
    sb.append("    analysisMethod: ").append(toIndentedString(analysisMethod)).append("\n");
    sb.append("    allowedColumns: ").append(toIndentedString(allowedColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("arn");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("tableReference");
    openapiFields.add("createTime");
    openapiFields.add("updateTime");
    openapiFields.add("analysisRuleTypes");
    openapiFields.add("analysisMethod");
    openapiFields.add("allowedColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tableReference");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("updateTime");
    openapiRequiredFields.add("analysisRuleTypes");
    openapiRequiredFields.add("analysisMethod");
    openapiRequiredFields.add("allowedColumns");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConfiguredTableOutputConfiguredTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConfiguredTableOutputConfiguredTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConfiguredTableOutputConfiguredTable is not found in the empty JSON string", UpdateConfiguredTableOutputConfiguredTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConfiguredTableOutputConfiguredTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConfiguredTableOutputConfiguredTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateConfiguredTableOutputConfiguredTable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `tableReference`
      ConfiguredTableTableReference.validateJsonElement(jsonObj.get("tableReference"));
      // validate the required field `createTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
      // validate the required field `analysisRuleTypes`
      List.validateJsonElement(jsonObj.get("analysisRuleTypes"));
      // validate the required field `analysisMethod`
      AnalysisMethod.validateJsonElement(jsonObj.get("analysisMethod"));
      // validate the required field `allowedColumns`
      List.validateJsonElement(jsonObj.get("allowedColumns"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConfiguredTableOutputConfiguredTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConfiguredTableOutputConfiguredTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConfiguredTableOutputConfiguredTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConfiguredTableOutputConfiguredTable.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConfiguredTableOutputConfiguredTable>() {
           @Override
           public void write(JsonWriter out, UpdateConfiguredTableOutputConfiguredTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConfiguredTableOutputConfiguredTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConfiguredTableOutputConfiguredTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConfiguredTableOutputConfiguredTable
   * @throws IOException if the JSON string is invalid with respect to UpdateConfiguredTableOutputConfiguredTable
   */
  public static UpdateConfiguredTableOutputConfiguredTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConfiguredTableOutputConfiguredTable.class);
  }

  /**
   * Convert an instance of UpdateConfiguredTableOutputConfiguredTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

