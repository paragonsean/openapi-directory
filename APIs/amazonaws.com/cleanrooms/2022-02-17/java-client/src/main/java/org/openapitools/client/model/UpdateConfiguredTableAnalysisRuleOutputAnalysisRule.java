/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ConfiguredTableAnalysisRulePolicy;
import org.openapitools.client.model.ConfiguredTableAnalysisRuleType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateConfiguredTableAnalysisRuleOutputAnalysisRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateConfiguredTableAnalysisRuleOutputAnalysisRule {
  public static final String SERIALIZED_NAME_CONFIGURED_TABLE_ID = "configuredTableId";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_TABLE_ID)
  private String configuredTableId;

  public static final String SERIALIZED_NAME_CONFIGURED_TABLE_ARN = "configuredTableArn";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_TABLE_ARN)
  private String configuredTableArn;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private ConfiguredTableAnalysisRulePolicy policy;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ConfiguredTableAnalysisRuleType type;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule() {
  }

  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule configuredTableId(String configuredTableId) {
    this.configuredTableId = configuredTableId;
    return this;
  }

  /**
   * Get configuredTableId
   * @return configuredTableId
   */
  @javax.annotation.Nonnull
  public String getConfiguredTableId() {
    return configuredTableId;
  }

  public void setConfiguredTableId(String configuredTableId) {
    this.configuredTableId = configuredTableId;
  }


  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule configuredTableArn(String configuredTableArn) {
    this.configuredTableArn = configuredTableArn;
    return this;
  }

  /**
   * Get configuredTableArn
   * @return configuredTableArn
   */
  @javax.annotation.Nonnull
  public String getConfiguredTableArn() {
    return configuredTableArn;
  }

  public void setConfiguredTableArn(String configuredTableArn) {
    this.configuredTableArn = configuredTableArn;
  }


  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule policy(ConfiguredTableAnalysisRulePolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nonnull
  public ConfiguredTableAnalysisRulePolicy getPolicy() {
    return policy;
  }

  public void setPolicy(ConfiguredTableAnalysisRulePolicy policy) {
    this.policy = policy;
  }


  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule type(ConfiguredTableAnalysisRuleType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ConfiguredTableAnalysisRuleType getType() {
    return type;
  }

  public void setType(ConfiguredTableAnalysisRuleType type) {
    this.type = type;
  }


  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateConfiguredTableAnalysisRuleOutputAnalysisRule updateConfiguredTableAnalysisRuleOutputAnalysisRule = (UpdateConfiguredTableAnalysisRuleOutputAnalysisRule) o;
    return Objects.equals(this.configuredTableId, updateConfiguredTableAnalysisRuleOutputAnalysisRule.configuredTableId) &&
        Objects.equals(this.configuredTableArn, updateConfiguredTableAnalysisRuleOutputAnalysisRule.configuredTableArn) &&
        Objects.equals(this.policy, updateConfiguredTableAnalysisRuleOutputAnalysisRule.policy) &&
        Objects.equals(this.type, updateConfiguredTableAnalysisRuleOutputAnalysisRule.type) &&
        Objects.equals(this.createTime, updateConfiguredTableAnalysisRuleOutputAnalysisRule.createTime) &&
        Objects.equals(this.updateTime, updateConfiguredTableAnalysisRuleOutputAnalysisRule.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configuredTableId, configuredTableArn, policy, type, createTime, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateConfiguredTableAnalysisRuleOutputAnalysisRule {\n");
    sb.append("    configuredTableId: ").append(toIndentedString(configuredTableId)).append("\n");
    sb.append("    configuredTableArn: ").append(toIndentedString(configuredTableArn)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuredTableId");
    openapiFields.add("configuredTableArn");
    openapiFields.add("policy");
    openapiFields.add("type");
    openapiFields.add("createTime");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configuredTableId");
    openapiRequiredFields.add("configuredTableArn");
    openapiRequiredFields.add("policy");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("updateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateConfiguredTableAnalysisRuleOutputAnalysisRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateConfiguredTableAnalysisRuleOutputAnalysisRule is not found in the empty JSON string", UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateConfiguredTableAnalysisRuleOutputAnalysisRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `configuredTableId`
      String.validateJsonElement(jsonObj.get("configuredTableId"));
      // validate the required field `configuredTableArn`
      String.validateJsonElement(jsonObj.get("configuredTableArn"));
      // validate the required field `policy`
      ConfiguredTableAnalysisRulePolicy.validateJsonElement(jsonObj.get("policy"));
      // validate the required field `type`
      ConfiguredTableAnalysisRuleType.validateJsonElement(jsonObj.get("type"));
      // validate the required field `createTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateConfiguredTableAnalysisRuleOutputAnalysisRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateConfiguredTableAnalysisRuleOutputAnalysisRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateConfiguredTableAnalysisRuleOutputAnalysisRule>() {
           @Override
           public void write(JsonWriter out, UpdateConfiguredTableAnalysisRuleOutputAnalysisRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateConfiguredTableAnalysisRuleOutputAnalysisRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateConfiguredTableAnalysisRuleOutputAnalysisRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateConfiguredTableAnalysisRuleOutputAnalysisRule
   * @throws IOException if the JSON string is invalid with respect to UpdateConfiguredTableAnalysisRuleOutputAnalysisRule
   */
  public static UpdateConfiguredTableAnalysisRuleOutputAnalysisRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateConfiguredTableAnalysisRuleOutputAnalysisRule.class);
  }

  /**
   * Convert an instance of UpdateConfiguredTableAnalysisRuleOutputAnalysisRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

