/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MemberStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The member object listed by the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MemberSummary {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private MemberStatus status;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ABILITIES = "abilities";
  @SerializedName(SERIALIZED_NAME_ABILITIES)
  private List abilities;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private String membershipId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ARN = "membershipArn";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ARN)
  private String membershipArn;

  public MemberSummary() {
  }

  public MemberSummary accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public MemberSummary status(MemberStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public MemberStatus getStatus() {
    return status;
  }

  public void setStatus(MemberStatus status) {
    this.status = status;
  }


  public MemberSummary displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MemberSummary abilities(List abilities) {
    this.abilities = abilities;
    return this;
  }

  /**
   * Get abilities
   * @return abilities
   */
  @javax.annotation.Nonnull
  public List getAbilities() {
    return abilities;
  }

  public void setAbilities(List abilities) {
    this.abilities = abilities;
  }


  public MemberSummary createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public MemberSummary updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public MemberSummary membershipId(String membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Get membershipId
   * @return membershipId
   */
  @javax.annotation.Nullable
  public String getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(String membershipId) {
    this.membershipId = membershipId;
  }


  public MemberSummary membershipArn(String membershipArn) {
    this.membershipArn = membershipArn;
    return this;
  }

  /**
   * Get membershipArn
   * @return membershipArn
   */
  @javax.annotation.Nullable
  public String getMembershipArn() {
    return membershipArn;
  }

  public void setMembershipArn(String membershipArn) {
    this.membershipArn = membershipArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MemberSummary memberSummary = (MemberSummary) o;
    return Objects.equals(this.accountId, memberSummary.accountId) &&
        Objects.equals(this.status, memberSummary.status) &&
        Objects.equals(this.displayName, memberSummary.displayName) &&
        Objects.equals(this.abilities, memberSummary.abilities) &&
        Objects.equals(this.createTime, memberSummary.createTime) &&
        Objects.equals(this.updateTime, memberSummary.updateTime) &&
        Objects.equals(this.membershipId, memberSummary.membershipId) &&
        Objects.equals(this.membershipArn, memberSummary.membershipArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, status, displayName, abilities, createTime, updateTime, membershipId, membershipArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MemberSummary {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    abilities: ").append(toIndentedString(abilities)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipArn: ").append(toIndentedString(membershipArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("status");
    openapiFields.add("displayName");
    openapiFields.add("abilities");
    openapiFields.add("createTime");
    openapiFields.add("updateTime");
    openapiFields.add("membershipId");
    openapiFields.add("membershipArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("abilities");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("updateTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MemberSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MemberSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MemberSummary is not found in the empty JSON string", MemberSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MemberSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MemberSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MemberSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `accountId`
      String.validateJsonElement(jsonObj.get("accountId"));
      // validate the required field `status`
      MemberStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `displayName`
      String.validateJsonElement(jsonObj.get("displayName"));
      // validate the required field `abilities`
      List.validateJsonElement(jsonObj.get("abilities"));
      // validate the required field `createTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
      // validate the optional field `membershipId`
      if (jsonObj.get("membershipId") != null && !jsonObj.get("membershipId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("membershipId"));
      }
      // validate the optional field `membershipArn`
      if (jsonObj.get("membershipArn") != null && !jsonObj.get("membershipArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("membershipArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MemberSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MemberSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MemberSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MemberSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<MemberSummary>() {
           @Override
           public void write(JsonWriter out, MemberSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MemberSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MemberSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MemberSummary
   * @throws IOException if the JSON string is invalid with respect to MemberSummary
   */
  public static MemberSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MemberSummary.class);
  }

  /**
   * Convert an instance of MemberSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

