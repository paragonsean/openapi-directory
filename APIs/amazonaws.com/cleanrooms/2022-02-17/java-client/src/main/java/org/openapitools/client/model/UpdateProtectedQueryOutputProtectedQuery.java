/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ProtectedQueryError;
import org.openapitools.client.model.ProtectedQueryResult;
import org.openapitools.client.model.ProtectedQueryResultConfiguration;
import org.openapitools.client.model.ProtectedQuerySqlParameters;
import org.openapitools.client.model.ProtectedQueryStatistics;
import org.openapitools.client.model.ProtectedQueryStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateProtectedQueryOutputProtectedQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateProtectedQueryOutputProtectedQuery {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private String membershipId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ARN = "membershipArn";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ARN)
  private String membershipArn;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_SQL_PARAMETERS = "sqlParameters";
  @SerializedName(SERIALIZED_NAME_SQL_PARAMETERS)
  private ProtectedQuerySqlParameters sqlParameters;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ProtectedQueryStatus status;

  public static final String SERIALIZED_NAME_RESULT_CONFIGURATION = "resultConfiguration";
  @SerializedName(SERIALIZED_NAME_RESULT_CONFIGURATION)
  private ProtectedQueryResultConfiguration resultConfiguration;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private ProtectedQueryStatistics statistics;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private ProtectedQueryResult result;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ProtectedQueryError error;

  public UpdateProtectedQueryOutputProtectedQuery() {
  }

  public UpdateProtectedQueryOutputProtectedQuery id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateProtectedQueryOutputProtectedQuery membershipId(String membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Get membershipId
   * @return membershipId
   */
  @javax.annotation.Nonnull
  public String getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(String membershipId) {
    this.membershipId = membershipId;
  }


  public UpdateProtectedQueryOutputProtectedQuery membershipArn(String membershipArn) {
    this.membershipArn = membershipArn;
    return this;
  }

  /**
   * Get membershipArn
   * @return membershipArn
   */
  @javax.annotation.Nonnull
  public String getMembershipArn() {
    return membershipArn;
  }

  public void setMembershipArn(String membershipArn) {
    this.membershipArn = membershipArn;
  }


  public UpdateProtectedQueryOutputProtectedQuery createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public UpdateProtectedQueryOutputProtectedQuery sqlParameters(ProtectedQuerySqlParameters sqlParameters) {
    this.sqlParameters = sqlParameters;
    return this;
  }

  /**
   * Get sqlParameters
   * @return sqlParameters
   */
  @javax.annotation.Nonnull
  public ProtectedQuerySqlParameters getSqlParameters() {
    return sqlParameters;
  }

  public void setSqlParameters(ProtectedQuerySqlParameters sqlParameters) {
    this.sqlParameters = sqlParameters;
  }


  public UpdateProtectedQueryOutputProtectedQuery status(ProtectedQueryStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ProtectedQueryStatus getStatus() {
    return status;
  }

  public void setStatus(ProtectedQueryStatus status) {
    this.status = status;
  }


  public UpdateProtectedQueryOutputProtectedQuery resultConfiguration(ProtectedQueryResultConfiguration resultConfiguration) {
    this.resultConfiguration = resultConfiguration;
    return this;
  }

  /**
   * Get resultConfiguration
   * @return resultConfiguration
   */
  @javax.annotation.Nonnull
  public ProtectedQueryResultConfiguration getResultConfiguration() {
    return resultConfiguration;
  }

  public void setResultConfiguration(ProtectedQueryResultConfiguration resultConfiguration) {
    this.resultConfiguration = resultConfiguration;
  }


  public UpdateProtectedQueryOutputProtectedQuery statistics(ProtectedQueryStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public ProtectedQueryStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(ProtectedQueryStatistics statistics) {
    this.statistics = statistics;
  }


  public UpdateProtectedQueryOutputProtectedQuery result(ProtectedQueryResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public ProtectedQueryResult getResult() {
    return result;
  }

  public void setResult(ProtectedQueryResult result) {
    this.result = result;
  }


  public UpdateProtectedQueryOutputProtectedQuery error(ProtectedQueryError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ProtectedQueryError getError() {
    return error;
  }

  public void setError(ProtectedQueryError error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProtectedQueryOutputProtectedQuery updateProtectedQueryOutputProtectedQuery = (UpdateProtectedQueryOutputProtectedQuery) o;
    return Objects.equals(this.id, updateProtectedQueryOutputProtectedQuery.id) &&
        Objects.equals(this.membershipId, updateProtectedQueryOutputProtectedQuery.membershipId) &&
        Objects.equals(this.membershipArn, updateProtectedQueryOutputProtectedQuery.membershipArn) &&
        Objects.equals(this.createTime, updateProtectedQueryOutputProtectedQuery.createTime) &&
        Objects.equals(this.sqlParameters, updateProtectedQueryOutputProtectedQuery.sqlParameters) &&
        Objects.equals(this.status, updateProtectedQueryOutputProtectedQuery.status) &&
        Objects.equals(this.resultConfiguration, updateProtectedQueryOutputProtectedQuery.resultConfiguration) &&
        Objects.equals(this.statistics, updateProtectedQueryOutputProtectedQuery.statistics) &&
        Objects.equals(this.result, updateProtectedQueryOutputProtectedQuery.result) &&
        Objects.equals(this.error, updateProtectedQueryOutputProtectedQuery.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, membershipId, membershipArn, createTime, sqlParameters, status, resultConfiguration, statistics, result, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProtectedQueryOutputProtectedQuery {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipArn: ").append(toIndentedString(membershipArn)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    sqlParameters: ").append(toIndentedString(sqlParameters)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    resultConfiguration: ").append(toIndentedString(resultConfiguration)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("membershipId");
    openapiFields.add("membershipArn");
    openapiFields.add("createTime");
    openapiFields.add("sqlParameters");
    openapiFields.add("status");
    openapiFields.add("resultConfiguration");
    openapiFields.add("statistics");
    openapiFields.add("result");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("membershipId");
    openapiRequiredFields.add("membershipArn");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("sqlParameters");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("resultConfiguration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProtectedQueryOutputProtectedQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProtectedQueryOutputProtectedQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProtectedQueryOutputProtectedQuery is not found in the empty JSON string", UpdateProtectedQueryOutputProtectedQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProtectedQueryOutputProtectedQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProtectedQueryOutputProtectedQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateProtectedQueryOutputProtectedQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `membershipId`
      String.validateJsonElement(jsonObj.get("membershipId"));
      // validate the required field `membershipArn`
      String.validateJsonElement(jsonObj.get("membershipArn"));
      // validate the required field `createTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createTime"));
      // validate the required field `sqlParameters`
      ProtectedQuerySqlParameters.validateJsonElement(jsonObj.get("sqlParameters"));
      // validate the required field `status`
      ProtectedQueryStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `resultConfiguration`
      ProtectedQueryResultConfiguration.validateJsonElement(jsonObj.get("resultConfiguration"));
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        ProtectedQueryStatistics.validateJsonElement(jsonObj.get("statistics"));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        ProtectedQueryResult.validateJsonElement(jsonObj.get("result"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ProtectedQueryError.validateJsonElement(jsonObj.get("error"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProtectedQueryOutputProtectedQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProtectedQueryOutputProtectedQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProtectedQueryOutputProtectedQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProtectedQueryOutputProtectedQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProtectedQueryOutputProtectedQuery>() {
           @Override
           public void write(JsonWriter out, UpdateProtectedQueryOutputProtectedQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProtectedQueryOutputProtectedQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProtectedQueryOutputProtectedQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProtectedQueryOutputProtectedQuery
   * @throws IOException if the JSON string is invalid with respect to UpdateProtectedQueryOutputProtectedQuery
   */
  public static UpdateProtectedQueryOutputProtectedQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProtectedQueryOutputProtectedQuery.class);
  }

  /**
   * Convert an instance of UpdateProtectedQueryOutputProtectedQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

