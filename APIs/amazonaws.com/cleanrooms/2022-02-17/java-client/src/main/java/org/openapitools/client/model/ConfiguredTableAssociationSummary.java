/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configured table association summary for the objects listed by the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfiguredTableAssociationSummary {
  public static final String SERIALIZED_NAME_CONFIGURED_TABLE_ID = "configuredTableId";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_TABLE_ID)
  private String configuredTableId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ID = "membershipId";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ID)
  private String membershipId;

  public static final String SERIALIZED_NAME_MEMBERSHIP_ARN = "membershipArn";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_ARN)
  private String membershipArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public ConfiguredTableAssociationSummary() {
  }

  public ConfiguredTableAssociationSummary configuredTableId(String configuredTableId) {
    this.configuredTableId = configuredTableId;
    return this;
  }

  /**
   * Get configuredTableId
   * @return configuredTableId
   */
  @javax.annotation.Nonnull
  public String getConfiguredTableId() {
    return configuredTableId;
  }

  public void setConfiguredTableId(String configuredTableId) {
    this.configuredTableId = configuredTableId;
  }


  public ConfiguredTableAssociationSummary membershipId(String membershipId) {
    this.membershipId = membershipId;
    return this;
  }

  /**
   * Get membershipId
   * @return membershipId
   */
  @javax.annotation.Nonnull
  public String getMembershipId() {
    return membershipId;
  }

  public void setMembershipId(String membershipId) {
    this.membershipId = membershipId;
  }


  public ConfiguredTableAssociationSummary membershipArn(String membershipArn) {
    this.membershipArn = membershipArn;
    return this;
  }

  /**
   * Get membershipArn
   * @return membershipArn
   */
  @javax.annotation.Nonnull
  public String getMembershipArn() {
    return membershipArn;
  }

  public void setMembershipArn(String membershipArn) {
    this.membershipArn = membershipArn;
  }


  public ConfiguredTableAssociationSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConfiguredTableAssociationSummary createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public ConfiguredTableAssociationSummary updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public ConfiguredTableAssociationSummary id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ConfiguredTableAssociationSummary arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfiguredTableAssociationSummary configuredTableAssociationSummary = (ConfiguredTableAssociationSummary) o;
    return Objects.equals(this.configuredTableId, configuredTableAssociationSummary.configuredTableId) &&
        Objects.equals(this.membershipId, configuredTableAssociationSummary.membershipId) &&
        Objects.equals(this.membershipArn, configuredTableAssociationSummary.membershipArn) &&
        Objects.equals(this.name, configuredTableAssociationSummary.name) &&
        Objects.equals(this.createTime, configuredTableAssociationSummary.createTime) &&
        Objects.equals(this.updateTime, configuredTableAssociationSummary.updateTime) &&
        Objects.equals(this.id, configuredTableAssociationSummary.id) &&
        Objects.equals(this.arn, configuredTableAssociationSummary.arn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configuredTableId, membershipId, membershipArn, name, createTime, updateTime, id, arn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfiguredTableAssociationSummary {\n");
    sb.append("    configuredTableId: ").append(toIndentedString(configuredTableId)).append("\n");
    sb.append("    membershipId: ").append(toIndentedString(membershipId)).append("\n");
    sb.append("    membershipArn: ").append(toIndentedString(membershipArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configuredTableId");
    openapiFields.add("membershipId");
    openapiFields.add("membershipArn");
    openapiFields.add("name");
    openapiFields.add("createTime");
    openapiFields.add("updateTime");
    openapiFields.add("id");
    openapiFields.add("arn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("configuredTableId");
    openapiRequiredFields.add("membershipId");
    openapiRequiredFields.add("membershipArn");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("updateTime");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("arn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfiguredTableAssociationSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfiguredTableAssociationSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfiguredTableAssociationSummary is not found in the empty JSON string", ConfiguredTableAssociationSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfiguredTableAssociationSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfiguredTableAssociationSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfiguredTableAssociationSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `configuredTableId`
      String.validateJsonElement(jsonObj.get("configuredTableId"));
      // validate the required field `membershipId`
      String.validateJsonElement(jsonObj.get("membershipId"));
      // validate the required field `membershipArn`
      String.validateJsonElement(jsonObj.get("membershipArn"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `createTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfiguredTableAssociationSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfiguredTableAssociationSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfiguredTableAssociationSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfiguredTableAssociationSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfiguredTableAssociationSummary>() {
           @Override
           public void write(JsonWriter out, ConfiguredTableAssociationSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfiguredTableAssociationSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfiguredTableAssociationSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfiguredTableAssociationSummary
   * @throws IOException if the JSON string is invalid with respect to ConfiguredTableAssociationSummary
   */
  public static ConfiguredTableAssociationSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfiguredTableAssociationSummary.class);
  }

  /**
   * Convert an instance of ConfiguredTableAssociationSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

