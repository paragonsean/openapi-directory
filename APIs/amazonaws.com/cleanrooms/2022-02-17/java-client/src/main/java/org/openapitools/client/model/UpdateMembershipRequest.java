/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateMembershipRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateMembershipRequest {
  /**
   * An indicator as to whether query logging has been enabled or disabled for the collaboration.
   */
  @JsonAdapter(QueryLogStatusEnum.Adapter.class)
  public enum QueryLogStatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    QueryLogStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QueryLogStatusEnum fromValue(String value) {
      for (QueryLogStatusEnum b : QueryLogStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QueryLogStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QueryLogStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QueryLogStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QueryLogStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QueryLogStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERY_LOG_STATUS = "queryLogStatus";
  @SerializedName(SERIALIZED_NAME_QUERY_LOG_STATUS)
  private QueryLogStatusEnum queryLogStatus;

  public UpdateMembershipRequest() {
  }

  public UpdateMembershipRequest queryLogStatus(QueryLogStatusEnum queryLogStatus) {
    this.queryLogStatus = queryLogStatus;
    return this;
  }

  /**
   * An indicator as to whether query logging has been enabled or disabled for the collaboration.
   * @return queryLogStatus
   */
  @javax.annotation.Nullable
  public QueryLogStatusEnum getQueryLogStatus() {
    return queryLogStatus;
  }

  public void setQueryLogStatus(QueryLogStatusEnum queryLogStatus) {
    this.queryLogStatus = queryLogStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateMembershipRequest updateMembershipRequest = (UpdateMembershipRequest) o;
    return Objects.equals(this.queryLogStatus, updateMembershipRequest.queryLogStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryLogStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateMembershipRequest {\n");
    sb.append("    queryLogStatus: ").append(toIndentedString(queryLogStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryLogStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateMembershipRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateMembershipRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateMembershipRequest is not found in the empty JSON string", UpdateMembershipRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateMembershipRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateMembershipRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("queryLogStatus") != null && !jsonObj.get("queryLogStatus").isJsonNull()) && !jsonObj.get("queryLogStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queryLogStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queryLogStatus").toString()));
      }
      // validate the optional field `queryLogStatus`
      if (jsonObj.get("queryLogStatus") != null && !jsonObj.get("queryLogStatus").isJsonNull()) {
        QueryLogStatusEnum.validateJsonElement(jsonObj.get("queryLogStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateMembershipRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateMembershipRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateMembershipRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateMembershipRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateMembershipRequest>() {
           @Override
           public void write(JsonWriter out, UpdateMembershipRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateMembershipRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateMembershipRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateMembershipRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateMembershipRequest
   */
  public static UpdateMembershipRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateMembershipRequest.class);
  }

  /**
   * Convert an instance of UpdateMembershipRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

