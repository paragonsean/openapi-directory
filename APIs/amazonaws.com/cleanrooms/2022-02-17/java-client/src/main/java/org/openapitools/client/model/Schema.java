/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnalysisMethod;
import org.openapitools.client.model.SchemaType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A schema is a relation within a collaboration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schema {
  public static final String SERIALIZED_NAME_COLUMNS = "columns";
  @SerializedName(SERIALIZED_NAME_COLUMNS)
  private List columns;

  public static final String SERIALIZED_NAME_PARTITION_KEYS = "partitionKeys";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEYS)
  private List partitionKeys;

  public static final String SERIALIZED_NAME_ANALYSIS_RULE_TYPES = "analysisRuleTypes";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_RULE_TYPES)
  private List analysisRuleTypes;

  public static final String SERIALIZED_NAME_ANALYSIS_METHOD = "analysisMethod";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_METHOD)
  private AnalysisMethod analysisMethod;

  public static final String SERIALIZED_NAME_CREATOR_ACCOUNT_ID = "creatorAccountId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ACCOUNT_ID)
  private String creatorAccountId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COLLABORATION_ID = "collaborationId";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_ID)
  private String collaborationId;

  public static final String SERIALIZED_NAME_COLLABORATION_ARN = "collaborationArn";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_ARN)
  private String collaborationArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private OffsetDateTime createTime;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SchemaType type;

  public Schema() {
  }

  public Schema columns(List columns) {
    this.columns = columns;
    return this;
  }

  /**
   * Get columns
   * @return columns
   */
  @javax.annotation.Nonnull
  public List getColumns() {
    return columns;
  }

  public void setColumns(List columns) {
    this.columns = columns;
  }


  public Schema partitionKeys(List partitionKeys) {
    this.partitionKeys = partitionKeys;
    return this;
  }

  /**
   * Get partitionKeys
   * @return partitionKeys
   */
  @javax.annotation.Nonnull
  public List getPartitionKeys() {
    return partitionKeys;
  }

  public void setPartitionKeys(List partitionKeys) {
    this.partitionKeys = partitionKeys;
  }


  public Schema analysisRuleTypes(List analysisRuleTypes) {
    this.analysisRuleTypes = analysisRuleTypes;
    return this;
  }

  /**
   * Get analysisRuleTypes
   * @return analysisRuleTypes
   */
  @javax.annotation.Nonnull
  public List getAnalysisRuleTypes() {
    return analysisRuleTypes;
  }

  public void setAnalysisRuleTypes(List analysisRuleTypes) {
    this.analysisRuleTypes = analysisRuleTypes;
  }


  public Schema analysisMethod(AnalysisMethod analysisMethod) {
    this.analysisMethod = analysisMethod;
    return this;
  }

  /**
   * Get analysisMethod
   * @return analysisMethod
   */
  @javax.annotation.Nullable
  public AnalysisMethod getAnalysisMethod() {
    return analysisMethod;
  }

  public void setAnalysisMethod(AnalysisMethod analysisMethod) {
    this.analysisMethod = analysisMethod;
  }


  public Schema creatorAccountId(String creatorAccountId) {
    this.creatorAccountId = creatorAccountId;
    return this;
  }

  /**
   * Get creatorAccountId
   * @return creatorAccountId
   */
  @javax.annotation.Nonnull
  public String getCreatorAccountId() {
    return creatorAccountId;
  }

  public void setCreatorAccountId(String creatorAccountId) {
    this.creatorAccountId = creatorAccountId;
  }


  public Schema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Schema collaborationId(String collaborationId) {
    this.collaborationId = collaborationId;
    return this;
  }

  /**
   * Get collaborationId
   * @return collaborationId
   */
  @javax.annotation.Nonnull
  public String getCollaborationId() {
    return collaborationId;
  }

  public void setCollaborationId(String collaborationId) {
    this.collaborationId = collaborationId;
  }


  public Schema collaborationArn(String collaborationArn) {
    this.collaborationArn = collaborationArn;
    return this;
  }

  /**
   * Get collaborationArn
   * @return collaborationArn
   */
  @javax.annotation.Nonnull
  public String getCollaborationArn() {
    return collaborationArn;
  }

  public void setCollaborationArn(String collaborationArn) {
    this.collaborationArn = collaborationArn;
  }


  public Schema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Schema createTime(OffsetDateTime createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Get createTime
   * @return createTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreateTime() {
    return createTime;
  }

  public void setCreateTime(OffsetDateTime createTime) {
    this.createTime = createTime;
  }


  public Schema updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Get updateTime
   * @return updateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }


  public Schema type(SchemaType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public SchemaType getType() {
    return type;
  }

  public void setType(SchemaType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schema schema = (Schema) o;
    return Objects.equals(this.columns, schema.columns) &&
        Objects.equals(this.partitionKeys, schema.partitionKeys) &&
        Objects.equals(this.analysisRuleTypes, schema.analysisRuleTypes) &&
        Objects.equals(this.analysisMethod, schema.analysisMethod) &&
        Objects.equals(this.creatorAccountId, schema.creatorAccountId) &&
        Objects.equals(this.name, schema.name) &&
        Objects.equals(this.collaborationId, schema.collaborationId) &&
        Objects.equals(this.collaborationArn, schema.collaborationArn) &&
        Objects.equals(this.description, schema.description) &&
        Objects.equals(this.createTime, schema.createTime) &&
        Objects.equals(this.updateTime, schema.updateTime) &&
        Objects.equals(this.type, schema.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columns, partitionKeys, analysisRuleTypes, analysisMethod, creatorAccountId, name, collaborationId, collaborationArn, description, createTime, updateTime, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schema {\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    partitionKeys: ").append(toIndentedString(partitionKeys)).append("\n");
    sb.append("    analysisRuleTypes: ").append(toIndentedString(analysisRuleTypes)).append("\n");
    sb.append("    analysisMethod: ").append(toIndentedString(analysisMethod)).append("\n");
    sb.append("    creatorAccountId: ").append(toIndentedString(creatorAccountId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    collaborationId: ").append(toIndentedString(collaborationId)).append("\n");
    sb.append("    collaborationArn: ").append(toIndentedString(collaborationArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columns");
    openapiFields.add("partitionKeys");
    openapiFields.add("analysisRuleTypes");
    openapiFields.add("analysisMethod");
    openapiFields.add("creatorAccountId");
    openapiFields.add("name");
    openapiFields.add("collaborationId");
    openapiFields.add("collaborationArn");
    openapiFields.add("description");
    openapiFields.add("createTime");
    openapiFields.add("updateTime");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("columns");
    openapiRequiredFields.add("partitionKeys");
    openapiRequiredFields.add("analysisRuleTypes");
    openapiRequiredFields.add("creatorAccountId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("collaborationId");
    openapiRequiredFields.add("collaborationArn");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("createTime");
    openapiRequiredFields.add("updateTime");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schema is not found in the empty JSON string", Schema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Schema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `columns`
      List.validateJsonElement(jsonObj.get("columns"));
      // validate the required field `partitionKeys`
      List.validateJsonElement(jsonObj.get("partitionKeys"));
      // validate the required field `analysisRuleTypes`
      List.validateJsonElement(jsonObj.get("analysisRuleTypes"));
      // validate the optional field `analysisMethod`
      if (jsonObj.get("analysisMethod") != null && !jsonObj.get("analysisMethod").isJsonNull()) {
        AnalysisMethod.validateJsonElement(jsonObj.get("analysisMethod"));
      }
      // validate the required field `creatorAccountId`
      String.validateJsonElement(jsonObj.get("creatorAccountId"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `collaborationId`
      String.validateJsonElement(jsonObj.get("collaborationId"));
      // validate the required field `collaborationArn`
      String.validateJsonElement(jsonObj.get("collaborationArn"));
      // validate the required field `description`
      String.validateJsonElement(jsonObj.get("description"));
      // validate the required field `createTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createTime"));
      // validate the required field `updateTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("updateTime"));
      // validate the required field `type`
      SchemaType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schema.class));

       return (TypeAdapter<T>) new TypeAdapter<Schema>() {
           @Override
           public void write(JsonWriter out, Schema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schema
   * @throws IOException if the JSON string is invalid with respect to Schema
   */
  public static Schema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schema.class);
  }

  /**
   * Convert an instance of Schema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

