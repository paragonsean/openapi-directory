/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateCollaborationInputDataEncryptionMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateCollaborationInputDataEncryptionMetadata {
  public static final String SERIALIZED_NAME_ALLOW_CLEARTEXT = "allowCleartext";
  @SerializedName(SERIALIZED_NAME_ALLOW_CLEARTEXT)
  private Boolean allowCleartext;

  public static final String SERIALIZED_NAME_ALLOW_DUPLICATES = "allowDuplicates";
  @SerializedName(SERIALIZED_NAME_ALLOW_DUPLICATES)
  private Boolean allowDuplicates;

  public static final String SERIALIZED_NAME_ALLOW_JOINS_ON_COLUMNS_WITH_DIFFERENT_NAMES = "allowJoinsOnColumnsWithDifferentNames";
  @SerializedName(SERIALIZED_NAME_ALLOW_JOINS_ON_COLUMNS_WITH_DIFFERENT_NAMES)
  private Boolean allowJoinsOnColumnsWithDifferentNames;

  public static final String SERIALIZED_NAME_PRESERVE_NULLS = "preserveNulls";
  @SerializedName(SERIALIZED_NAME_PRESERVE_NULLS)
  private Boolean preserveNulls;

  public CreateCollaborationInputDataEncryptionMetadata() {
  }

  public CreateCollaborationInputDataEncryptionMetadata allowCleartext(Boolean allowCleartext) {
    this.allowCleartext = allowCleartext;
    return this;
  }

  /**
   * Get allowCleartext
   * @return allowCleartext
   */
  @javax.annotation.Nonnull
  public Boolean getAllowCleartext() {
    return allowCleartext;
  }

  public void setAllowCleartext(Boolean allowCleartext) {
    this.allowCleartext = allowCleartext;
  }


  public CreateCollaborationInputDataEncryptionMetadata allowDuplicates(Boolean allowDuplicates) {
    this.allowDuplicates = allowDuplicates;
    return this;
  }

  /**
   * Get allowDuplicates
   * @return allowDuplicates
   */
  @javax.annotation.Nonnull
  public Boolean getAllowDuplicates() {
    return allowDuplicates;
  }

  public void setAllowDuplicates(Boolean allowDuplicates) {
    this.allowDuplicates = allowDuplicates;
  }


  public CreateCollaborationInputDataEncryptionMetadata allowJoinsOnColumnsWithDifferentNames(Boolean allowJoinsOnColumnsWithDifferentNames) {
    this.allowJoinsOnColumnsWithDifferentNames = allowJoinsOnColumnsWithDifferentNames;
    return this;
  }

  /**
   * Get allowJoinsOnColumnsWithDifferentNames
   * @return allowJoinsOnColumnsWithDifferentNames
   */
  @javax.annotation.Nonnull
  public Boolean getAllowJoinsOnColumnsWithDifferentNames() {
    return allowJoinsOnColumnsWithDifferentNames;
  }

  public void setAllowJoinsOnColumnsWithDifferentNames(Boolean allowJoinsOnColumnsWithDifferentNames) {
    this.allowJoinsOnColumnsWithDifferentNames = allowJoinsOnColumnsWithDifferentNames;
  }


  public CreateCollaborationInputDataEncryptionMetadata preserveNulls(Boolean preserveNulls) {
    this.preserveNulls = preserveNulls;
    return this;
  }

  /**
   * Get preserveNulls
   * @return preserveNulls
   */
  @javax.annotation.Nonnull
  public Boolean getPreserveNulls() {
    return preserveNulls;
  }

  public void setPreserveNulls(Boolean preserveNulls) {
    this.preserveNulls = preserveNulls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCollaborationInputDataEncryptionMetadata createCollaborationInputDataEncryptionMetadata = (CreateCollaborationInputDataEncryptionMetadata) o;
    return Objects.equals(this.allowCleartext, createCollaborationInputDataEncryptionMetadata.allowCleartext) &&
        Objects.equals(this.allowDuplicates, createCollaborationInputDataEncryptionMetadata.allowDuplicates) &&
        Objects.equals(this.allowJoinsOnColumnsWithDifferentNames, createCollaborationInputDataEncryptionMetadata.allowJoinsOnColumnsWithDifferentNames) &&
        Objects.equals(this.preserveNulls, createCollaborationInputDataEncryptionMetadata.preserveNulls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowCleartext, allowDuplicates, allowJoinsOnColumnsWithDifferentNames, preserveNulls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCollaborationInputDataEncryptionMetadata {\n");
    sb.append("    allowCleartext: ").append(toIndentedString(allowCleartext)).append("\n");
    sb.append("    allowDuplicates: ").append(toIndentedString(allowDuplicates)).append("\n");
    sb.append("    allowJoinsOnColumnsWithDifferentNames: ").append(toIndentedString(allowJoinsOnColumnsWithDifferentNames)).append("\n");
    sb.append("    preserveNulls: ").append(toIndentedString(preserveNulls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowCleartext");
    openapiFields.add("allowDuplicates");
    openapiFields.add("allowJoinsOnColumnsWithDifferentNames");
    openapiFields.add("preserveNulls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowCleartext");
    openapiRequiredFields.add("allowDuplicates");
    openapiRequiredFields.add("allowJoinsOnColumnsWithDifferentNames");
    openapiRequiredFields.add("preserveNulls");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateCollaborationInputDataEncryptionMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateCollaborationInputDataEncryptionMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCollaborationInputDataEncryptionMetadata is not found in the empty JSON string", CreateCollaborationInputDataEncryptionMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateCollaborationInputDataEncryptionMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCollaborationInputDataEncryptionMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCollaborationInputDataEncryptionMetadata.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `allowCleartext`
      Boolean.validateJsonElement(jsonObj.get("allowCleartext"));
      // validate the required field `allowDuplicates`
      Boolean.validateJsonElement(jsonObj.get("allowDuplicates"));
      // validate the required field `allowJoinsOnColumnsWithDifferentNames`
      Boolean.validateJsonElement(jsonObj.get("allowJoinsOnColumnsWithDifferentNames"));
      // validate the required field `preserveNulls`
      Boolean.validateJsonElement(jsonObj.get("preserveNulls"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCollaborationInputDataEncryptionMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCollaborationInputDataEncryptionMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCollaborationInputDataEncryptionMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCollaborationInputDataEncryptionMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCollaborationInputDataEncryptionMetadata>() {
           @Override
           public void write(JsonWriter out, CreateCollaborationInputDataEncryptionMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCollaborationInputDataEncryptionMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateCollaborationInputDataEncryptionMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateCollaborationInputDataEncryptionMetadata
   * @throws IOException if the JSON string is invalid with respect to CreateCollaborationInputDataEncryptionMetadata
   */
  public static CreateCollaborationInputDataEncryptionMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCollaborationInputDataEncryptionMetadata.class);
  }

  /**
   * Convert an instance of CreateCollaborationInputDataEncryptionMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

