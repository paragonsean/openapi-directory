/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetCollaborationAnalysisTemplateOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetCollaborationAnalysisTemplateOutput {
  public static final String SERIALIZED_NAME_COLLABORATION_ANALYSIS_TEMPLATE = "collaborationAnalysisTemplate";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_ANALYSIS_TEMPLATE)
  private GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate collaborationAnalysisTemplate;

  public GetCollaborationAnalysisTemplateOutput() {
  }

  public GetCollaborationAnalysisTemplateOutput collaborationAnalysisTemplate(GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate collaborationAnalysisTemplate) {
    this.collaborationAnalysisTemplate = collaborationAnalysisTemplate;
    return this;
  }

  /**
   * Get collaborationAnalysisTemplate
   * @return collaborationAnalysisTemplate
   */
  @javax.annotation.Nonnull
  public GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate getCollaborationAnalysisTemplate() {
    return collaborationAnalysisTemplate;
  }

  public void setCollaborationAnalysisTemplate(GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate collaborationAnalysisTemplate) {
    this.collaborationAnalysisTemplate = collaborationAnalysisTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetCollaborationAnalysisTemplateOutput getCollaborationAnalysisTemplateOutput = (GetCollaborationAnalysisTemplateOutput) o;
    return Objects.equals(this.collaborationAnalysisTemplate, getCollaborationAnalysisTemplateOutput.collaborationAnalysisTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collaborationAnalysisTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetCollaborationAnalysisTemplateOutput {\n");
    sb.append("    collaborationAnalysisTemplate: ").append(toIndentedString(collaborationAnalysisTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collaborationAnalysisTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("collaborationAnalysisTemplate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetCollaborationAnalysisTemplateOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetCollaborationAnalysisTemplateOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetCollaborationAnalysisTemplateOutput is not found in the empty JSON string", GetCollaborationAnalysisTemplateOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetCollaborationAnalysisTemplateOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetCollaborationAnalysisTemplateOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetCollaborationAnalysisTemplateOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `collaborationAnalysisTemplate`
      GetCollaborationAnalysisTemplateOutputCollaborationAnalysisTemplate.validateJsonElement(jsonObj.get("collaborationAnalysisTemplate"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetCollaborationAnalysisTemplateOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetCollaborationAnalysisTemplateOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetCollaborationAnalysisTemplateOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetCollaborationAnalysisTemplateOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetCollaborationAnalysisTemplateOutput>() {
           @Override
           public void write(JsonWriter out, GetCollaborationAnalysisTemplateOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetCollaborationAnalysisTemplateOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetCollaborationAnalysisTemplateOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetCollaborationAnalysisTemplateOutput
   * @throws IOException if the JSON string is invalid with respect to GetCollaborationAnalysisTemplateOutput
   */
  public static GetCollaborationAnalysisTemplateOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetCollaborationAnalysisTemplateOutput.class);
  }

  /**
   * Convert an instance of GetCollaborationAnalysisTemplateOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

