/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JoinRequiredOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfiguredTableAnalysisRulePolicyV1Aggregation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfiguredTableAnalysisRulePolicyV1Aggregation {
  public static final String SERIALIZED_NAME_AGGREGATE_COLUMNS = "aggregateColumns";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_COLUMNS)
  private List aggregateColumns;

  public static final String SERIALIZED_NAME_JOIN_COLUMNS = "joinColumns";
  @SerializedName(SERIALIZED_NAME_JOIN_COLUMNS)
  private List joinColumns;

  public static final String SERIALIZED_NAME_JOIN_REQUIRED = "joinRequired";
  @SerializedName(SERIALIZED_NAME_JOIN_REQUIRED)
  private JoinRequiredOption joinRequired;

  public static final String SERIALIZED_NAME_ALLOWED_JOIN_OPERATORS = "allowedJoinOperators";
  @SerializedName(SERIALIZED_NAME_ALLOWED_JOIN_OPERATORS)
  private List allowedJoinOperators;

  public static final String SERIALIZED_NAME_DIMENSION_COLUMNS = "dimensionColumns";
  @SerializedName(SERIALIZED_NAME_DIMENSION_COLUMNS)
  private List dimensionColumns;

  public static final String SERIALIZED_NAME_SCALAR_FUNCTIONS = "scalarFunctions";
  @SerializedName(SERIALIZED_NAME_SCALAR_FUNCTIONS)
  private List scalarFunctions;

  public static final String SERIALIZED_NAME_OUTPUT_CONSTRAINTS = "outputConstraints";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONSTRAINTS)
  private List outputConstraints;

  public ConfiguredTableAnalysisRulePolicyV1Aggregation() {
  }

  public ConfiguredTableAnalysisRulePolicyV1Aggregation aggregateColumns(List aggregateColumns) {
    this.aggregateColumns = aggregateColumns;
    return this;
  }

  /**
   * Get aggregateColumns
   * @return aggregateColumns
   */
  @javax.annotation.Nonnull
  public List getAggregateColumns() {
    return aggregateColumns;
  }

  public void setAggregateColumns(List aggregateColumns) {
    this.aggregateColumns = aggregateColumns;
  }


  public ConfiguredTableAnalysisRulePolicyV1Aggregation joinColumns(List joinColumns) {
    this.joinColumns = joinColumns;
    return this;
  }

  /**
   * Get joinColumns
   * @return joinColumns
   */
  @javax.annotation.Nonnull
  public List getJoinColumns() {
    return joinColumns;
  }

  public void setJoinColumns(List joinColumns) {
    this.joinColumns = joinColumns;
  }


  public ConfiguredTableAnalysisRulePolicyV1Aggregation joinRequired(JoinRequiredOption joinRequired) {
    this.joinRequired = joinRequired;
    return this;
  }

  /**
   * Get joinRequired
   * @return joinRequired
   */
  @javax.annotation.Nullable
  public JoinRequiredOption getJoinRequired() {
    return joinRequired;
  }

  public void setJoinRequired(JoinRequiredOption joinRequired) {
    this.joinRequired = joinRequired;
  }


  public ConfiguredTableAnalysisRulePolicyV1Aggregation allowedJoinOperators(List allowedJoinOperators) {
    this.allowedJoinOperators = allowedJoinOperators;
    return this;
  }

  /**
   * Get allowedJoinOperators
   * @return allowedJoinOperators
   */
  @javax.annotation.Nullable
  public List getAllowedJoinOperators() {
    return allowedJoinOperators;
  }

  public void setAllowedJoinOperators(List allowedJoinOperators) {
    this.allowedJoinOperators = allowedJoinOperators;
  }


  public ConfiguredTableAnalysisRulePolicyV1Aggregation dimensionColumns(List dimensionColumns) {
    this.dimensionColumns = dimensionColumns;
    return this;
  }

  /**
   * Get dimensionColumns
   * @return dimensionColumns
   */
  @javax.annotation.Nonnull
  public List getDimensionColumns() {
    return dimensionColumns;
  }

  public void setDimensionColumns(List dimensionColumns) {
    this.dimensionColumns = dimensionColumns;
  }


  public ConfiguredTableAnalysisRulePolicyV1Aggregation scalarFunctions(List scalarFunctions) {
    this.scalarFunctions = scalarFunctions;
    return this;
  }

  /**
   * Get scalarFunctions
   * @return scalarFunctions
   */
  @javax.annotation.Nonnull
  public List getScalarFunctions() {
    return scalarFunctions;
  }

  public void setScalarFunctions(List scalarFunctions) {
    this.scalarFunctions = scalarFunctions;
  }


  public ConfiguredTableAnalysisRulePolicyV1Aggregation outputConstraints(List outputConstraints) {
    this.outputConstraints = outputConstraints;
    return this;
  }

  /**
   * Get outputConstraints
   * @return outputConstraints
   */
  @javax.annotation.Nonnull
  public List getOutputConstraints() {
    return outputConstraints;
  }

  public void setOutputConstraints(List outputConstraints) {
    this.outputConstraints = outputConstraints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfiguredTableAnalysisRulePolicyV1Aggregation configuredTableAnalysisRulePolicyV1Aggregation = (ConfiguredTableAnalysisRulePolicyV1Aggregation) o;
    return Objects.equals(this.aggregateColumns, configuredTableAnalysisRulePolicyV1Aggregation.aggregateColumns) &&
        Objects.equals(this.joinColumns, configuredTableAnalysisRulePolicyV1Aggregation.joinColumns) &&
        Objects.equals(this.joinRequired, configuredTableAnalysisRulePolicyV1Aggregation.joinRequired) &&
        Objects.equals(this.allowedJoinOperators, configuredTableAnalysisRulePolicyV1Aggregation.allowedJoinOperators) &&
        Objects.equals(this.dimensionColumns, configuredTableAnalysisRulePolicyV1Aggregation.dimensionColumns) &&
        Objects.equals(this.scalarFunctions, configuredTableAnalysisRulePolicyV1Aggregation.scalarFunctions) &&
        Objects.equals(this.outputConstraints, configuredTableAnalysisRulePolicyV1Aggregation.outputConstraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateColumns, joinColumns, joinRequired, allowedJoinOperators, dimensionColumns, scalarFunctions, outputConstraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfiguredTableAnalysisRulePolicyV1Aggregation {\n");
    sb.append("    aggregateColumns: ").append(toIndentedString(aggregateColumns)).append("\n");
    sb.append("    joinColumns: ").append(toIndentedString(joinColumns)).append("\n");
    sb.append("    joinRequired: ").append(toIndentedString(joinRequired)).append("\n");
    sb.append("    allowedJoinOperators: ").append(toIndentedString(allowedJoinOperators)).append("\n");
    sb.append("    dimensionColumns: ").append(toIndentedString(dimensionColumns)).append("\n");
    sb.append("    scalarFunctions: ").append(toIndentedString(scalarFunctions)).append("\n");
    sb.append("    outputConstraints: ").append(toIndentedString(outputConstraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregateColumns");
    openapiFields.add("joinColumns");
    openapiFields.add("joinRequired");
    openapiFields.add("allowedJoinOperators");
    openapiFields.add("dimensionColumns");
    openapiFields.add("scalarFunctions");
    openapiFields.add("outputConstraints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggregateColumns");
    openapiRequiredFields.add("joinColumns");
    openapiRequiredFields.add("dimensionColumns");
    openapiRequiredFields.add("scalarFunctions");
    openapiRequiredFields.add("outputConstraints");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfiguredTableAnalysisRulePolicyV1Aggregation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfiguredTableAnalysisRulePolicyV1Aggregation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfiguredTableAnalysisRulePolicyV1Aggregation is not found in the empty JSON string", ConfiguredTableAnalysisRulePolicyV1Aggregation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfiguredTableAnalysisRulePolicyV1Aggregation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfiguredTableAnalysisRulePolicyV1Aggregation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfiguredTableAnalysisRulePolicyV1Aggregation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `aggregateColumns`
      List.validateJsonElement(jsonObj.get("aggregateColumns"));
      // validate the required field `joinColumns`
      List.validateJsonElement(jsonObj.get("joinColumns"));
      // validate the optional field `joinRequired`
      if (jsonObj.get("joinRequired") != null && !jsonObj.get("joinRequired").isJsonNull()) {
        JoinRequiredOption.validateJsonElement(jsonObj.get("joinRequired"));
      }
      // validate the optional field `allowedJoinOperators`
      if (jsonObj.get("allowedJoinOperators") != null && !jsonObj.get("allowedJoinOperators").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("allowedJoinOperators"));
      }
      // validate the required field `dimensionColumns`
      List.validateJsonElement(jsonObj.get("dimensionColumns"));
      // validate the required field `scalarFunctions`
      List.validateJsonElement(jsonObj.get("scalarFunctions"));
      // validate the required field `outputConstraints`
      List.validateJsonElement(jsonObj.get("outputConstraints"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfiguredTableAnalysisRulePolicyV1Aggregation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfiguredTableAnalysisRulePolicyV1Aggregation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfiguredTableAnalysisRulePolicyV1Aggregation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfiguredTableAnalysisRulePolicyV1Aggregation.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfiguredTableAnalysisRulePolicyV1Aggregation>() {
           @Override
           public void write(JsonWriter out, ConfiguredTableAnalysisRulePolicyV1Aggregation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfiguredTableAnalysisRulePolicyV1Aggregation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfiguredTableAnalysisRulePolicyV1Aggregation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfiguredTableAnalysisRulePolicyV1Aggregation
   * @throws IOException if the JSON string is invalid with respect to ConfiguredTableAnalysisRulePolicyV1Aggregation
   */
  public static ConfiguredTableAnalysisRulePolicyV1Aggregation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfiguredTableAnalysisRulePolicyV1Aggregation.class);
  }

  /**
   * Convert an instance of ConfiguredTableAnalysisRulePolicyV1Aggregation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

