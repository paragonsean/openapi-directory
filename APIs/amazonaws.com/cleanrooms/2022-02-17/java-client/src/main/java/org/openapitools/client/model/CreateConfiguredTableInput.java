/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AnalysisMethod;
import org.openapitools.client.model.CreateConfiguredTableInputTableReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfiguredTableInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfiguredTableInput {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TABLE_REFERENCE = "tableReference";
  @SerializedName(SERIALIZED_NAME_TABLE_REFERENCE)
  private CreateConfiguredTableInputTableReference tableReference;

  public static final String SERIALIZED_NAME_ALLOWED_COLUMNS = "allowedColumns";
  @SerializedName(SERIALIZED_NAME_ALLOWED_COLUMNS)
  private List allowedColumns;

  public static final String SERIALIZED_NAME_ANALYSIS_METHOD = "analysisMethod";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_METHOD)
  private AnalysisMethod analysisMethod;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public CreateConfiguredTableInput() {
  }

  public CreateConfiguredTableInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConfiguredTableInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateConfiguredTableInput tableReference(CreateConfiguredTableInputTableReference tableReference) {
    this.tableReference = tableReference;
    return this;
  }

  /**
   * Get tableReference
   * @return tableReference
   */
  @javax.annotation.Nonnull
  public CreateConfiguredTableInputTableReference getTableReference() {
    return tableReference;
  }

  public void setTableReference(CreateConfiguredTableInputTableReference tableReference) {
    this.tableReference = tableReference;
  }


  public CreateConfiguredTableInput allowedColumns(List allowedColumns) {
    this.allowedColumns = allowedColumns;
    return this;
  }

  /**
   * Get allowedColumns
   * @return allowedColumns
   */
  @javax.annotation.Nonnull
  public List getAllowedColumns() {
    return allowedColumns;
  }

  public void setAllowedColumns(List allowedColumns) {
    this.allowedColumns = allowedColumns;
  }


  public CreateConfiguredTableInput analysisMethod(AnalysisMethod analysisMethod) {
    this.analysisMethod = analysisMethod;
    return this;
  }

  /**
   * Get analysisMethod
   * @return analysisMethod
   */
  @javax.annotation.Nonnull
  public AnalysisMethod getAnalysisMethod() {
    return analysisMethod;
  }

  public void setAnalysisMethod(AnalysisMethod analysisMethod) {
    this.analysisMethod = analysisMethod;
  }


  public CreateConfiguredTableInput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfiguredTableInput createConfiguredTableInput = (CreateConfiguredTableInput) o;
    return Objects.equals(this.name, createConfiguredTableInput.name) &&
        Objects.equals(this.description, createConfiguredTableInput.description) &&
        Objects.equals(this.tableReference, createConfiguredTableInput.tableReference) &&
        Objects.equals(this.allowedColumns, createConfiguredTableInput.allowedColumns) &&
        Objects.equals(this.analysisMethod, createConfiguredTableInput.analysisMethod) &&
        Objects.equals(this.tags, createConfiguredTableInput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, tableReference, allowedColumns, analysisMethod, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfiguredTableInput {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tableReference: ").append(toIndentedString(tableReference)).append("\n");
    sb.append("    allowedColumns: ").append(toIndentedString(allowedColumns)).append("\n");
    sb.append("    analysisMethod: ").append(toIndentedString(analysisMethod)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("tableReference");
    openapiFields.add("allowedColumns");
    openapiFields.add("analysisMethod");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("tableReference");
    openapiRequiredFields.add("allowedColumns");
    openapiRequiredFields.add("analysisMethod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfiguredTableInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfiguredTableInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfiguredTableInput is not found in the empty JSON string", CreateConfiguredTableInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfiguredTableInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfiguredTableInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfiguredTableInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the required field `tableReference`
      CreateConfiguredTableInputTableReference.validateJsonElement(jsonObj.get("tableReference"));
      // validate the required field `allowedColumns`
      List.validateJsonElement(jsonObj.get("allowedColumns"));
      // validate the required field `analysisMethod`
      AnalysisMethod.validateJsonElement(jsonObj.get("analysisMethod"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfiguredTableInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfiguredTableInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfiguredTableInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfiguredTableInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfiguredTableInput>() {
           @Override
           public void write(JsonWriter out, CreateConfiguredTableInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfiguredTableInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfiguredTableInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfiguredTableInput
   * @throws IOException if the JSON string is invalid with respect to CreateConfiguredTableInput
   */
  public static CreateConfiguredTableInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfiguredTableInput.class);
  }

  /**
   * Convert an instance of CreateConfiguredTableInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

