/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AnalysisParameter;
import org.openapitools.client.model.CreateAnalysisTemplateRequestSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAnalysisTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:09.594695-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAnalysisTemplateRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The format of the analysis template.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    SQL("SQL");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private CreateAnalysisTemplateRequestSource source;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_ANALYSIS_PARAMETERS = "analysisParameters";
  @SerializedName(SERIALIZED_NAME_ANALYSIS_PARAMETERS)
  private List<AnalysisParameter> analysisParameters = new ArrayList<>();

  public CreateAnalysisTemplateRequest() {
  }

  public CreateAnalysisTemplateRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the analysis template.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateAnalysisTemplateRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the analysis template.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateAnalysisTemplateRequest format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * The format of the analysis template.
   * @return format
   */
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public CreateAnalysisTemplateRequest source(CreateAnalysisTemplateRequestSource source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public CreateAnalysisTemplateRequestSource getSource() {
    return source;
  }

  public void setSource(CreateAnalysisTemplateRequestSource source) {
    this.source = source;
  }


  public CreateAnalysisTemplateRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateAnalysisTemplateRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Map of tags assigned to a resource
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateAnalysisTemplateRequest analysisParameters(List<AnalysisParameter> analysisParameters) {
    this.analysisParameters = analysisParameters;
    return this;
  }

  public CreateAnalysisTemplateRequest addAnalysisParametersItem(AnalysisParameter analysisParametersItem) {
    if (this.analysisParameters == null) {
      this.analysisParameters = new ArrayList<>();
    }
    this.analysisParameters.add(analysisParametersItem);
    return this;
  }

  /**
   * The parameters of the analysis template.
   * @return analysisParameters
   */
  @javax.annotation.Nullable
  public List<AnalysisParameter> getAnalysisParameters() {
    return analysisParameters;
  }

  public void setAnalysisParameters(List<AnalysisParameter> analysisParameters) {
    this.analysisParameters = analysisParameters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAnalysisTemplateRequest createAnalysisTemplateRequest = (CreateAnalysisTemplateRequest) o;
    return Objects.equals(this.description, createAnalysisTemplateRequest.description) &&
        Objects.equals(this.name, createAnalysisTemplateRequest.name) &&
        Objects.equals(this.format, createAnalysisTemplateRequest.format) &&
        Objects.equals(this.source, createAnalysisTemplateRequest.source) &&
        Objects.equals(this.tags, createAnalysisTemplateRequest.tags) &&
        Objects.equals(this.analysisParameters, createAnalysisTemplateRequest.analysisParameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, format, source, tags, analysisParameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAnalysisTemplateRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    analysisParameters: ").append(toIndentedString(analysisParameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("format");
    openapiFields.add("source");
    openapiFields.add("tags");
    openapiFields.add("analysisParameters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("format");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAnalysisTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAnalysisTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAnalysisTemplateRequest is not found in the empty JSON string", CreateAnalysisTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAnalysisTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAnalysisTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAnalysisTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the required field `format`
      FormatEnum.validateJsonElement(jsonObj.get("format"));
      // validate the required field `source`
      CreateAnalysisTemplateRequestSource.validateJsonElement(jsonObj.get("source"));
      if (jsonObj.get("analysisParameters") != null && !jsonObj.get("analysisParameters").isJsonNull()) {
        JsonArray jsonArrayanalysisParameters = jsonObj.getAsJsonArray("analysisParameters");
        if (jsonArrayanalysisParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("analysisParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `analysisParameters` to be an array in the JSON string but got `%s`", jsonObj.get("analysisParameters").toString()));
          }

          // validate the optional field `analysisParameters` (array)
          for (int i = 0; i < jsonArrayanalysisParameters.size(); i++) {
            AnalysisParameter.validateJsonElement(jsonArrayanalysisParameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAnalysisTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAnalysisTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAnalysisTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAnalysisTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAnalysisTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateAnalysisTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAnalysisTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAnalysisTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAnalysisTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAnalysisTemplateRequest
   */
  public static CreateAnalysisTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAnalysisTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateAnalysisTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

