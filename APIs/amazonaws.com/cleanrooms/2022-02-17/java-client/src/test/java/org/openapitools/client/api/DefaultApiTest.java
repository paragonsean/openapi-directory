/*
 * AWS Clean Rooms Service
 * <p>Welcome to the <i>Clean Rooms API Reference</i>.</p> <p>Clean Rooms is an Amazon Web Services service that helps multiple parties to join their data together in a secure collaboration workspace. In the collaboration, members who can query and receive results can get insights into the collective datasets without either party getting access to the other party's raw data.</p> <p>To learn more about Clean Rooms concepts, procedures, and best practices, see the <a href=\"https://docs.aws.amazon.com/clean-rooms/latest/userguide/what-is.html\">Clean Rooms User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2022-02-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchGetCollaborationAnalysisTemplateOutput;
import org.openapitools.client.model.BatchGetCollaborationAnalysisTemplateRequest;
import org.openapitools.client.model.BatchGetSchemaOutput;
import org.openapitools.client.model.BatchGetSchemaRequest;
import org.openapitools.client.model.CreateAnalysisTemplateOutput;
import org.openapitools.client.model.CreateAnalysisTemplateRequest;
import org.openapitools.client.model.CreateCollaborationOutput;
import org.openapitools.client.model.CreateCollaborationRequest;
import org.openapitools.client.model.CreateConfiguredTableAnalysisRuleOutput;
import org.openapitools.client.model.CreateConfiguredTableAnalysisRuleRequest;
import org.openapitools.client.model.CreateConfiguredTableAssociationOutput;
import org.openapitools.client.model.CreateConfiguredTableAssociationRequest;
import org.openapitools.client.model.CreateConfiguredTableOutput;
import org.openapitools.client.model.CreateConfiguredTableRequest;
import org.openapitools.client.model.CreateMembershipOutput;
import org.openapitools.client.model.CreateMembershipRequest;
import org.openapitools.client.model.GetAnalysisTemplateOutput;
import org.openapitools.client.model.GetCollaborationAnalysisTemplateOutput;
import org.openapitools.client.model.GetCollaborationOutput;
import org.openapitools.client.model.GetConfiguredTableAnalysisRuleOutput;
import org.openapitools.client.model.GetConfiguredTableAssociationOutput;
import org.openapitools.client.model.GetConfiguredTableOutput;
import org.openapitools.client.model.GetMembershipOutput;
import org.openapitools.client.model.GetProtectedQueryOutput;
import org.openapitools.client.model.GetSchemaAnalysisRuleOutput;
import org.openapitools.client.model.GetSchemaOutput;
import org.openapitools.client.model.ListAnalysisTemplatesOutput;
import org.openapitools.client.model.ListCollaborationAnalysisTemplatesOutput;
import org.openapitools.client.model.ListCollaborationsOutput;
import org.openapitools.client.model.ListConfiguredTableAssociationsOutput;
import org.openapitools.client.model.ListConfiguredTablesOutput;
import org.openapitools.client.model.ListMembersOutput;
import org.openapitools.client.model.ListMembershipsOutput;
import org.openapitools.client.model.ListProtectedQueriesOutput;
import org.openapitools.client.model.ListSchemasOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.StartProtectedQueryOutput;
import org.openapitools.client.model.StartProtectedQueryRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAnalysisTemplateOutput;
import org.openapitools.client.model.UpdateAnalysisTemplateRequest;
import org.openapitools.client.model.UpdateCollaborationOutput;
import org.openapitools.client.model.UpdateCollaborationRequest;
import org.openapitools.client.model.UpdateConfiguredTableAnalysisRuleOutput;
import org.openapitools.client.model.UpdateConfiguredTableAnalysisRuleRequest;
import org.openapitools.client.model.UpdateConfiguredTableAssociationOutput;
import org.openapitools.client.model.UpdateConfiguredTableAssociationRequest;
import org.openapitools.client.model.UpdateConfiguredTableOutput;
import org.openapitools.client.model.UpdateConfiguredTableRequest;
import org.openapitools.client.model.UpdateMembershipOutput;
import org.openapitools.client.model.UpdateMembershipRequest;
import org.openapitools.client.model.UpdateProtectedQueryOutput;
import org.openapitools.client.model.UpdateProtectedQueryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Retrieves multiple analysis templates within a collaboration by their Amazon Resource Names (ARNs).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetCollaborationAnalysisTemplateTest() throws ApiException {
        String collaborationIdentifier = null;
        BatchGetCollaborationAnalysisTemplateRequest batchGetCollaborationAnalysisTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetCollaborationAnalysisTemplateOutput response = api.batchGetCollaborationAnalysisTemplate(collaborationIdentifier, batchGetCollaborationAnalysisTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves multiple schemas by their identifiers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetSchemaTest() throws ApiException {
        String collaborationIdentifier = null;
        BatchGetSchemaRequest batchGetSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetSchemaOutput response = api.batchGetSchema(collaborationIdentifier, batchGetSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAnalysisTemplateTest() throws ApiException {
        String membershipIdentifier = null;
        CreateAnalysisTemplateRequest createAnalysisTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAnalysisTemplateOutput response = api.createAnalysisTemplate(membershipIdentifier, createAnalysisTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollaborationTest() throws ApiException {
        CreateCollaborationRequest createCollaborationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateCollaborationOutput response = api.createCollaboration(createCollaborationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new configured table resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfiguredTableTest() throws ApiException {
        CreateConfiguredTableRequest createConfiguredTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConfiguredTableOutput response = api.createConfiguredTable(createConfiguredTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new analysis rule for a configured table. Currently, only one analysis rule can be created for a given configured table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfiguredTableAnalysisRuleTest() throws ApiException {
        String configuredTableIdentifier = null;
        CreateConfiguredTableAnalysisRuleRequest createConfiguredTableAnalysisRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConfiguredTableAnalysisRuleOutput response = api.createConfiguredTableAnalysisRule(configuredTableIdentifier, createConfiguredTableAnalysisRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a configured table association. A configured table association links a configured table with a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConfiguredTableAssociationTest() throws ApiException {
        String membershipIdentifier = null;
        CreateConfiguredTableAssociationRequest createConfiguredTableAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateConfiguredTableAssociationOutput response = api.createConfiguredTableAssociation(membershipIdentifier, createConfiguredTableAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a membership for a specific collaboration identifier and joins the collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMembershipTest() throws ApiException {
        CreateMembershipRequest createMembershipRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMembershipOutput response = api.createMembership(createMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAnalysisTemplateTest() throws ApiException {
        String membershipIdentifier = null;
        String analysisTemplateIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAnalysisTemplate(membershipIdentifier, analysisTemplateIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a collaboration. It can only be called by the collaboration owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollaborationTest() throws ApiException {
        String collaborationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteCollaboration(collaborationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a configured table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfiguredTableTest() throws ApiException {
        String configuredTableIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConfiguredTable(configuredTableIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a configured table analysis rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfiguredTableAnalysisRuleTest() throws ApiException {
        String configuredTableIdentifier = null;
        String analysisRuleType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConfiguredTableAnalysisRule(configuredTableIdentifier, analysisRuleType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a configured table association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConfiguredTableAssociationTest() throws ApiException {
        String configuredTableAssociationIdentifier = null;
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteConfiguredTableAssociation(configuredTableAssociationIdentifier, membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified member from a collaboration. The removed member is placed in the Removed status and can&#39;t interact with the collaboration. The removed member&#39;s data is inaccessible to active members of the collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        String collaborationIdentifier = null;
        String accountId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMember(collaborationIdentifier, accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a specified membership. All resources under a membership must be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembershipTest() throws ApiException {
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMembership(membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves an analysis template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalysisTemplateTest() throws ApiException {
        String membershipIdentifier = null;
        String analysisTemplateIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAnalysisTemplateOutput response = api.getAnalysisTemplate(membershipIdentifier, analysisTemplateIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns metadata about a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollaborationTest() throws ApiException {
        String collaborationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCollaborationOutput response = api.getCollaboration(collaborationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves an analysis template within a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollaborationAnalysisTemplateTest() throws ApiException {
        String collaborationIdentifier = null;
        String analysisTemplateArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCollaborationAnalysisTemplateOutput response = api.getCollaborationAnalysisTemplate(collaborationIdentifier, analysisTemplateArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a configured table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfiguredTableTest() throws ApiException {
        String configuredTableIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfiguredTableOutput response = api.getConfiguredTable(configuredTableIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a configured table analysis rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfiguredTableAnalysisRuleTest() throws ApiException {
        String configuredTableIdentifier = null;
        String analysisRuleType = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfiguredTableAnalysisRuleOutput response = api.getConfiguredTableAnalysisRule(configuredTableIdentifier, analysisRuleType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a configured table association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfiguredTableAssociationTest() throws ApiException {
        String configuredTableAssociationIdentifier = null;
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetConfiguredTableAssociationOutput response = api.getConfiguredTableAssociation(configuredTableAssociationIdentifier, membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a specified membership for an identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembershipTest() throws ApiException {
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMembershipOutput response = api.getMembership(membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns query processing metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProtectedQueryTest() throws ApiException {
        String membershipIdentifier = null;
        String protectedQueryIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProtectedQueryOutput response = api.getProtectedQuery(membershipIdentifier, protectedQueryIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the schema for a relation within a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaTest() throws ApiException {
        String collaborationIdentifier = null;
        String name = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaOutput response = api.getSchema(collaborationIdentifier, name, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves a schema analysis rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaAnalysisRuleTest() throws ApiException {
        String collaborationIdentifier = null;
        String name = null;
        String type = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaAnalysisRuleOutput response = api.getSchemaAnalysisRule(collaborationIdentifier, name, type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists analysis templates that the caller owns.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnalysisTemplatesTest() throws ApiException {
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAnalysisTemplatesOutput response = api.listAnalysisTemplates(membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists analysis templates within a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollaborationAnalysisTemplatesTest() throws ApiException {
        String collaborationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListCollaborationAnalysisTemplatesOutput response = api.listCollaborationAnalysisTemplates(collaborationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists collaborations the caller owns, is active in, or has been invited to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCollaborationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String memberStatus = null;
        ListCollaborationsOutput response = api.listCollaborations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, memberStatus);
        // TODO: test validations
    }

    /**
     * Lists configured table associations for a membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfiguredTableAssociationsTest() throws ApiException {
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListConfiguredTableAssociationsOutput response = api.listConfiguredTableAssociations(membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists configured tables.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConfiguredTablesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListConfiguredTablesOutput response = api.listConfiguredTables(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all members within a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersTest() throws ApiException {
        String collaborationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListMembersOutput response = api.listMembers(collaborationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all memberships resources within the caller&#39;s account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembershipsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String status = null;
        ListMembershipsOutput response = api.listMemberships(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, status);
        // TODO: test validations
    }

    /**
     * Lists protected queries, sorted by the most recent query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProtectedQueriesTest() throws ApiException {
        String membershipIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String status = null;
        String nextToken = null;
        Integer maxResults = null;
        ListProtectedQueriesOutput response = api.listProtectedQueries(membershipIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists the schemas for relations within a collaboration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemasTest() throws ApiException {
        String collaborationIdentifier = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String schemaType = null;
        String nextToken = null;
        Integer maxResults = null;
        ListSchemasOutput response = api.listSchemas(collaborationIdentifier, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, schemaType, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all of the tags that have been added to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a protected query that is started by Clean Rooms .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startProtectedQueryTest() throws ApiException {
        String membershipIdentifier = null;
        StartProtectedQueryRequest startProtectedQueryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartProtectedQueryOutput response = api.startProtectedQuery(membershipIdentifier, startProtectedQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tags a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a tag or list of tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the analysis template metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnalysisTemplateTest() throws ApiException {
        String membershipIdentifier = null;
        String analysisTemplateIdentifier = null;
        UpdateAnalysisTemplateRequest updateAnalysisTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAnalysisTemplateOutput response = api.updateAnalysisTemplate(membershipIdentifier, analysisTemplateIdentifier, updateAnalysisTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates collaboration metadata and can only be called by the collaboration owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollaborationTest() throws ApiException {
        String collaborationIdentifier = null;
        UpdateCollaborationRequest updateCollaborationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateCollaborationOutput response = api.updateCollaboration(collaborationIdentifier, updateCollaborationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a configured table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfiguredTableTest() throws ApiException {
        String configuredTableIdentifier = null;
        UpdateConfiguredTableRequest updateConfiguredTableRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConfiguredTableOutput response = api.updateConfiguredTable(configuredTableIdentifier, updateConfiguredTableRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a configured table analysis rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfiguredTableAnalysisRuleTest() throws ApiException {
        String configuredTableIdentifier = null;
        String analysisRuleType = null;
        UpdateConfiguredTableAnalysisRuleRequest updateConfiguredTableAnalysisRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConfiguredTableAnalysisRuleOutput response = api.updateConfiguredTableAnalysisRule(configuredTableIdentifier, analysisRuleType, updateConfiguredTableAnalysisRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a configured table association.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConfiguredTableAssociationTest() throws ApiException {
        String configuredTableAssociationIdentifier = null;
        String membershipIdentifier = null;
        UpdateConfiguredTableAssociationRequest updateConfiguredTableAssociationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateConfiguredTableAssociationOutput response = api.updateConfiguredTableAssociation(configuredTableAssociationIdentifier, membershipIdentifier, updateConfiguredTableAssociationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a membership.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMembershipTest() throws ApiException {
        String membershipIdentifier = null;
        UpdateMembershipRequest updateMembershipRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateMembershipOutput response = api.updateMembership(membershipIdentifier, updateMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the processing of a currently running query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProtectedQueryTest() throws ApiException {
        String membershipIdentifier = null;
        String protectedQueryIdentifier = null;
        UpdateProtectedQueryRequest updateProtectedQueryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProtectedQueryOutput response = api.updateProtectedQuery(membershipIdentifier, protectedQueryIdentifier, updateProtectedQueryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
