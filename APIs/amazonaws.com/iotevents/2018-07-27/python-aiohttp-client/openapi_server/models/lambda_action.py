# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lambda_action_payload import LambdaActionPayload
from openapi_server import util


class LambdaAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, function_arn: str=None, payload: LambdaActionPayload=None):
        """LambdaAction - a model defined in OpenAPI

        :param function_arn: The function_arn of this LambdaAction.
        :param payload: The payload of this LambdaAction.
        """
        self.openapi_types = {
            'function_arn': str,
            'payload': LambdaActionPayload
        }

        self.attribute_map = {
            'function_arn': 'functionArn',
            'payload': 'payload'
        }

        self._function_arn = function_arn
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LambdaAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LambdaAction of this LambdaAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def function_arn(self):
        """Gets the function_arn of this LambdaAction.


        :return: The function_arn of this LambdaAction.
        :rtype: str
        """
        return self._function_arn

    @function_arn.setter
    def function_arn(self, function_arn):
        """Sets the function_arn of this LambdaAction.


        :param function_arn: The function_arn of this LambdaAction.
        :type function_arn: str
        """
        if function_arn is None:
            raise ValueError("Invalid value for `function_arn`, must not be `None`")

        self._function_arn = function_arn

    @property
    def payload(self):
        """Gets the payload of this LambdaAction.


        :return: The payload of this LambdaAction.
        :rtype: LambdaActionPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this LambdaAction.


        :param payload: The payload of this LambdaAction.
        :type payload: LambdaActionPayload
        """

        self._payload = payload
