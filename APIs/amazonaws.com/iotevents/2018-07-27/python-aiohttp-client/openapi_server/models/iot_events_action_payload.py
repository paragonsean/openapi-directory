# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payload_type import PayloadType
from openapi_server import util


class IotEventsActionPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_expression: str=None, type: PayloadType=None):
        """IotEventsActionPayload - a model defined in OpenAPI

        :param content_expression: The content_expression of this IotEventsActionPayload.
        :param type: The type of this IotEventsActionPayload.
        """
        self.openapi_types = {
            'content_expression': str,
            'type': PayloadType
        }

        self.attribute_map = {
            'content_expression': 'contentExpression',
            'type': 'type'
        }

        self._content_expression = content_expression
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotEventsActionPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotEventsAction_payload of this IotEventsActionPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_expression(self):
        """Gets the content_expression of this IotEventsActionPayload.


        :return: The content_expression of this IotEventsActionPayload.
        :rtype: str
        """
        return self._content_expression

    @content_expression.setter
    def content_expression(self, content_expression):
        """Sets the content_expression of this IotEventsActionPayload.


        :param content_expression: The content_expression of this IotEventsActionPayload.
        :type content_expression: str
        """
        if content_expression is None:
            raise ValueError("Invalid value for `content_expression`, must not be `None`")

        self._content_expression = content_expression

    @property
    def type(self):
        """Gets the type of this IotEventsActionPayload.


        :return: The type of this IotEventsActionPayload.
        :rtype: PayloadType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IotEventsActionPayload.


        :param type: The type of this IotEventsActionPayload.
        :type type: PayloadType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
