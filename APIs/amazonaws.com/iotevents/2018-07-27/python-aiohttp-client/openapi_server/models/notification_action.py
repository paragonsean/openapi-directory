# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_action_action import NotificationActionAction
from openapi_server import util


class NotificationAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: NotificationActionAction=None, sms_configurations: List=None, email_configurations: List=None):
        """NotificationAction - a model defined in OpenAPI

        :param action: The action of this NotificationAction.
        :param sms_configurations: The sms_configurations of this NotificationAction.
        :param email_configurations: The email_configurations of this NotificationAction.
        """
        self.openapi_types = {
            'action': NotificationActionAction,
            'sms_configurations': List,
            'email_configurations': List
        }

        self.attribute_map = {
            'action': 'action',
            'sms_configurations': 'smsConfigurations',
            'email_configurations': 'emailConfigurations'
        }

        self._action = action
        self._sms_configurations = sms_configurations
        self._email_configurations = email_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationAction of this NotificationAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this NotificationAction.


        :return: The action of this NotificationAction.
        :rtype: NotificationActionAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this NotificationAction.


        :param action: The action of this NotificationAction.
        :type action: NotificationActionAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def sms_configurations(self):
        """Gets the sms_configurations of this NotificationAction.


        :return: The sms_configurations of this NotificationAction.
        :rtype: List
        """
        return self._sms_configurations

    @sms_configurations.setter
    def sms_configurations(self, sms_configurations):
        """Sets the sms_configurations of this NotificationAction.


        :param sms_configurations: The sms_configurations of this NotificationAction.
        :type sms_configurations: List
        """

        self._sms_configurations = sms_configurations

    @property
    def email_configurations(self):
        """Gets the email_configurations of this NotificationAction.


        :return: The email_configurations of this NotificationAction.
        :rtype: List
        """
        return self._email_configurations

    @email_configurations.setter
    def email_configurations(self, email_configurations):
        """Sets the email_configurations of this NotificationAction.


        :param email_configurations: The email_configurations of this NotificationAction.
        :type email_configurations: List
        """

        self._email_configurations = email_configurations
