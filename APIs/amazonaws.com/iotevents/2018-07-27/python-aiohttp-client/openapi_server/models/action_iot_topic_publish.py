# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iot_topic_publish_action_payload import IotTopicPublishActionPayload
from openapi_server import util


class ActionIotTopicPublish(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mqtt_topic: str=None, payload: IotTopicPublishActionPayload=None):
        """ActionIotTopicPublish - a model defined in OpenAPI

        :param mqtt_topic: The mqtt_topic of this ActionIotTopicPublish.
        :param payload: The payload of this ActionIotTopicPublish.
        """
        self.openapi_types = {
            'mqtt_topic': str,
            'payload': IotTopicPublishActionPayload
        }

        self.attribute_map = {
            'mqtt_topic': 'mqttTopic',
            'payload': 'payload'
        }

        self._mqtt_topic = mqtt_topic
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionIotTopicPublish':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action_iotTopicPublish of this ActionIotTopicPublish.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mqtt_topic(self):
        """Gets the mqtt_topic of this ActionIotTopicPublish.


        :return: The mqtt_topic of this ActionIotTopicPublish.
        :rtype: str
        """
        return self._mqtt_topic

    @mqtt_topic.setter
    def mqtt_topic(self, mqtt_topic):
        """Sets the mqtt_topic of this ActionIotTopicPublish.


        :param mqtt_topic: The mqtt_topic of this ActionIotTopicPublish.
        :type mqtt_topic: str
        """
        if mqtt_topic is None:
            raise ValueError("Invalid value for `mqtt_topic`, must not be `None`")

        self._mqtt_topic = mqtt_topic

    @property
    def payload(self):
        """Gets the payload of this ActionIotTopicPublish.


        :return: The payload of this ActionIotTopicPublish.
        :rtype: IotTopicPublishActionPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ActionIotTopicPublish.


        :param payload: The payload of this ActionIotTopicPublish.
        :type payload: IotTopicPublishActionPayload
        """

        self._payload = payload
