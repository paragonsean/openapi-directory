# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectorModelDetectorModelDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, states: List=None, initial_state_name: str=None):
        """DetectorModelDetectorModelDefinition - a model defined in OpenAPI

        :param states: The states of this DetectorModelDetectorModelDefinition.
        :param initial_state_name: The initial_state_name of this DetectorModelDetectorModelDefinition.
        """
        self.openapi_types = {
            'states': List,
            'initial_state_name': str
        }

        self.attribute_map = {
            'states': 'states',
            'initial_state_name': 'initialStateName'
        }

        self._states = states
        self._initial_state_name = initial_state_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectorModelDetectorModelDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectorModel_detectorModelDefinition of this DetectorModelDetectorModelDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def states(self):
        """Gets the states of this DetectorModelDetectorModelDefinition.


        :return: The states of this DetectorModelDetectorModelDefinition.
        :rtype: List
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this DetectorModelDetectorModelDefinition.


        :param states: The states of this DetectorModelDetectorModelDefinition.
        :type states: List
        """
        if states is None:
            raise ValueError("Invalid value for `states`, must not be `None`")

        self._states = states

    @property
    def initial_state_name(self):
        """Gets the initial_state_name of this DetectorModelDetectorModelDefinition.


        :return: The initial_state_name of this DetectorModelDetectorModelDefinition.
        :rtype: str
        """
        return self._initial_state_name

    @initial_state_name.setter
    def initial_state_name(self, initial_state_name):
        """Sets the initial_state_name of this DetectorModelDetectorModelDefinition.


        :param initial_state_name: The initial_state_name of this DetectorModelDetectorModelDefinition.
        :type initial_state_name: str
        """
        if initial_state_name is None:
            raise ValueError("Invalid value for `initial_state_name`, must not be `None`")

        self._initial_state_name = initial_state_name
