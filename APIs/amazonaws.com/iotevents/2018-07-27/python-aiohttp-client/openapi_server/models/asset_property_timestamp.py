# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetPropertyTimestamp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_in_seconds: str=None, offset_in_nanos: str=None):
        """AssetPropertyTimestamp - a model defined in OpenAPI

        :param time_in_seconds: The time_in_seconds of this AssetPropertyTimestamp.
        :param offset_in_nanos: The offset_in_nanos of this AssetPropertyTimestamp.
        """
        self.openapi_types = {
            'time_in_seconds': str,
            'offset_in_nanos': str
        }

        self.attribute_map = {
            'time_in_seconds': 'timeInSeconds',
            'offset_in_nanos': 'offsetInNanos'
        }

        self._time_in_seconds = time_in_seconds
        self._offset_in_nanos = offset_in_nanos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetPropertyTimestamp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetPropertyTimestamp of this AssetPropertyTimestamp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_in_seconds(self):
        """Gets the time_in_seconds of this AssetPropertyTimestamp.


        :return: The time_in_seconds of this AssetPropertyTimestamp.
        :rtype: str
        """
        return self._time_in_seconds

    @time_in_seconds.setter
    def time_in_seconds(self, time_in_seconds):
        """Sets the time_in_seconds of this AssetPropertyTimestamp.


        :param time_in_seconds: The time_in_seconds of this AssetPropertyTimestamp.
        :type time_in_seconds: str
        """
        if time_in_seconds is None:
            raise ValueError("Invalid value for `time_in_seconds`, must not be `None`")

        self._time_in_seconds = time_in_seconds

    @property
    def offset_in_nanos(self):
        """Gets the offset_in_nanos of this AssetPropertyTimestamp.


        :return: The offset_in_nanos of this AssetPropertyTimestamp.
        :rtype: str
        """
        return self._offset_in_nanos

    @offset_in_nanos.setter
    def offset_in_nanos(self, offset_in_nanos):
        """Sets the offset_in_nanos of this AssetPropertyTimestamp.


        :param offset_in_nanos: The offset_in_nanos of this AssetPropertyTimestamp.
        :type offset_in_nanos: str
        """

        self._offset_in_nanos = offset_in_nanos
