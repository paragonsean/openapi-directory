# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_detector_model_request_detector_model_definition import CreateDetectorModelRequestDetectorModelDefinition
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateDetectorModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_model_name: str=None, detector_model_definition: CreateDetectorModelRequestDetectorModelDefinition=None, detector_model_description: str=None, key: str=None, role_arn: str=None, tags: List[Tag]=None, evaluation_method: str=None):
        """CreateDetectorModelRequest - a model defined in OpenAPI

        :param detector_model_name: The detector_model_name of this CreateDetectorModelRequest.
        :param detector_model_definition: The detector_model_definition of this CreateDetectorModelRequest.
        :param detector_model_description: The detector_model_description of this CreateDetectorModelRequest.
        :param key: The key of this CreateDetectorModelRequest.
        :param role_arn: The role_arn of this CreateDetectorModelRequest.
        :param tags: The tags of this CreateDetectorModelRequest.
        :param evaluation_method: The evaluation_method of this CreateDetectorModelRequest.
        """
        self.openapi_types = {
            'detector_model_name': str,
            'detector_model_definition': CreateDetectorModelRequestDetectorModelDefinition,
            'detector_model_description': str,
            'key': str,
            'role_arn': str,
            'tags': List[Tag],
            'evaluation_method': str
        }

        self.attribute_map = {
            'detector_model_name': 'detectorModelName',
            'detector_model_definition': 'detectorModelDefinition',
            'detector_model_description': 'detectorModelDescription',
            'key': 'key',
            'role_arn': 'roleArn',
            'tags': 'tags',
            'evaluation_method': 'evaluationMethod'
        }

        self._detector_model_name = detector_model_name
        self._detector_model_definition = detector_model_definition
        self._detector_model_description = detector_model_description
        self._key = key
        self._role_arn = role_arn
        self._tags = tags
        self._evaluation_method = evaluation_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDetectorModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDetectorModel_request of this CreateDetectorModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_model_name(self):
        """Gets the detector_model_name of this CreateDetectorModelRequest.

        The name of the detector model.

        :return: The detector_model_name of this CreateDetectorModelRequest.
        :rtype: str
        """
        return self._detector_model_name

    @detector_model_name.setter
    def detector_model_name(self, detector_model_name):
        """Sets the detector_model_name of this CreateDetectorModelRequest.

        The name of the detector model.

        :param detector_model_name: The detector_model_name of this CreateDetectorModelRequest.
        :type detector_model_name: str
        """
        if detector_model_name is None:
            raise ValueError("Invalid value for `detector_model_name`, must not be `None`")
        if detector_model_name is not None and len(detector_model_name) > 128:
            raise ValueError("Invalid value for `detector_model_name`, length must be less than or equal to `128`")
        if detector_model_name is not None and len(detector_model_name) < 1:
            raise ValueError("Invalid value for `detector_model_name`, length must be greater than or equal to `1`")
        if detector_model_name is not None and not re.search(r'^[a-zA-Z0-9_-]+$', detector_model_name):
            raise ValueError("Invalid value for `detector_model_name`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")

        self._detector_model_name = detector_model_name

    @property
    def detector_model_definition(self):
        """Gets the detector_model_definition of this CreateDetectorModelRequest.


        :return: The detector_model_definition of this CreateDetectorModelRequest.
        :rtype: CreateDetectorModelRequestDetectorModelDefinition
        """
        return self._detector_model_definition

    @detector_model_definition.setter
    def detector_model_definition(self, detector_model_definition):
        """Sets the detector_model_definition of this CreateDetectorModelRequest.


        :param detector_model_definition: The detector_model_definition of this CreateDetectorModelRequest.
        :type detector_model_definition: CreateDetectorModelRequestDetectorModelDefinition
        """
        if detector_model_definition is None:
            raise ValueError("Invalid value for `detector_model_definition`, must not be `None`")

        self._detector_model_definition = detector_model_definition

    @property
    def detector_model_description(self):
        """Gets the detector_model_description of this CreateDetectorModelRequest.

        A brief description of the detector model.

        :return: The detector_model_description of this CreateDetectorModelRequest.
        :rtype: str
        """
        return self._detector_model_description

    @detector_model_description.setter
    def detector_model_description(self, detector_model_description):
        """Sets the detector_model_description of this CreateDetectorModelRequest.

        A brief description of the detector model.

        :param detector_model_description: The detector_model_description of this CreateDetectorModelRequest.
        :type detector_model_description: str
        """
        if detector_model_description is not None and len(detector_model_description) > 128:
            raise ValueError("Invalid value for `detector_model_description`, length must be less than or equal to `128`")

        self._detector_model_description = detector_model_description

    @property
    def key(self):
        """Gets the key of this CreateDetectorModelRequest.

        The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.

        :return: The key of this CreateDetectorModelRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateDetectorModelRequest.

        The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.

        :param key: The key of this CreateDetectorModelRequest.
        :type key: str
        """
        if key is not None and len(key) > 128:
            raise ValueError("Invalid value for `key`, length must be less than or equal to `128`")
        if key is not None and len(key) < 1:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")
        if key is not None and not re.search(r'^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$', key):
            raise ValueError("Invalid value for `key`, must be a follow pattern or equal to `/^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$/`")

        self._key = key

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateDetectorModelRequest.

        The ARN of the role that grants permission to AWS IoT Events to perform its operations.

        :return: The role_arn of this CreateDetectorModelRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateDetectorModelRequest.

        The ARN of the role that grants permission to AWS IoT Events to perform its operations.

        :param role_arn: The role_arn of this CreateDetectorModelRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 1:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `1`")

        self._role_arn = role_arn

    @property
    def tags(self):
        """Gets the tags of this CreateDetectorModelRequest.

        Metadata that can be used to manage the detector model.

        :return: The tags of this CreateDetectorModelRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDetectorModelRequest.

        Metadata that can be used to manage the detector model.

        :param tags: The tags of this CreateDetectorModelRequest.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def evaluation_method(self):
        """Gets the evaluation_method of this CreateDetectorModelRequest.

        Information about the order in which events are evaluated and how actions are executed. 

        :return: The evaluation_method of this CreateDetectorModelRequest.
        :rtype: str
        """
        return self._evaluation_method

    @evaluation_method.setter
    def evaluation_method(self, evaluation_method):
        """Sets the evaluation_method of this CreateDetectorModelRequest.

        Information about the order in which events are evaluated and how actions are executed. 

        :param evaluation_method: The evaluation_method of this CreateDetectorModelRequest.
        :type evaluation_method: str
        """
        allowed_values = ["BATCH", "SERIAL"]  # noqa: E501
        if evaluation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_method` ({0}), must be one of {1}"
                .format(evaluation_method, allowed_values)
            )

        self._evaluation_method = evaluation_method
