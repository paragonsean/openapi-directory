# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sqs_action_payload import SqsActionPayload
from openapi_server import util


class ActionSqs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, queue_url: str=None, use_base64: bool=None, payload: SqsActionPayload=None):
        """ActionSqs - a model defined in OpenAPI

        :param queue_url: The queue_url of this ActionSqs.
        :param use_base64: The use_base64 of this ActionSqs.
        :param payload: The payload of this ActionSqs.
        """
        self.openapi_types = {
            'queue_url': str,
            'use_base64': bool,
            'payload': SqsActionPayload
        }

        self.attribute_map = {
            'queue_url': 'queueUrl',
            'use_base64': 'useBase64',
            'payload': 'payload'
        }

        self._queue_url = queue_url
        self._use_base64 = use_base64
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionSqs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action_sqs of this ActionSqs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_url(self):
        """Gets the queue_url of this ActionSqs.


        :return: The queue_url of this ActionSqs.
        :rtype: str
        """
        return self._queue_url

    @queue_url.setter
    def queue_url(self, queue_url):
        """Sets the queue_url of this ActionSqs.


        :param queue_url: The queue_url of this ActionSqs.
        :type queue_url: str
        """
        if queue_url is None:
            raise ValueError("Invalid value for `queue_url`, must not be `None`")

        self._queue_url = queue_url

    @property
    def use_base64(self):
        """Gets the use_base64 of this ActionSqs.


        :return: The use_base64 of this ActionSqs.
        :rtype: bool
        """
        return self._use_base64

    @use_base64.setter
    def use_base64(self, use_base64):
        """Sets the use_base64 of this ActionSqs.


        :param use_base64: The use_base64 of this ActionSqs.
        :type use_base64: bool
        """

        self._use_base64 = use_base64

    @property
    def payload(self):
        """Gets the payload of this ActionSqs.


        :return: The payload of this ActionSqs.
        :rtype: SqsActionPayload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ActionSqs.


        :param payload: The payload of this ActionSqs.
        :type payload: SqsActionPayload
        """

        self._payload = payload
