# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logging_level import LoggingLevel
from openapi_server import util


class LoggingOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role_arn: str=None, level: LoggingLevel=None, enabled: bool=None, detector_debug_options: List=None):
        """LoggingOptions - a model defined in OpenAPI

        :param role_arn: The role_arn of this LoggingOptions.
        :param level: The level of this LoggingOptions.
        :param enabled: The enabled of this LoggingOptions.
        :param detector_debug_options: The detector_debug_options of this LoggingOptions.
        """
        self.openapi_types = {
            'role_arn': str,
            'level': LoggingLevel,
            'enabled': bool,
            'detector_debug_options': List
        }

        self.attribute_map = {
            'role_arn': 'roleArn',
            'level': 'level',
            'enabled': 'enabled',
            'detector_debug_options': 'detectorDebugOptions'
        }

        self._role_arn = role_arn
        self._level = level
        self._enabled = enabled
        self._detector_debug_options = detector_debug_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingOptions of this LoggingOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role_arn(self):
        """Gets the role_arn of this LoggingOptions.


        :return: The role_arn of this LoggingOptions.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this LoggingOptions.


        :param role_arn: The role_arn of this LoggingOptions.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def level(self):
        """Gets the level of this LoggingOptions.


        :return: The level of this LoggingOptions.
        :rtype: LoggingLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this LoggingOptions.


        :param level: The level of this LoggingOptions.
        :type level: LoggingLevel
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")

        self._level = level

    @property
    def enabled(self):
        """Gets the enabled of this LoggingOptions.


        :return: The enabled of this LoggingOptions.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this LoggingOptions.


        :param enabled: The enabled of this LoggingOptions.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def detector_debug_options(self):
        """Gets the detector_debug_options of this LoggingOptions.


        :return: The detector_debug_options of this LoggingOptions.
        :rtype: List
        """
        return self._detector_debug_options

    @detector_debug_options.setter
    def detector_debug_options(self, detector_debug_options):
        """Sets the detector_debug_options of this LoggingOptions.


        :param detector_debug_options: The detector_debug_options of this LoggingOptions.
        :type detector_debug_options: List
        """

        self._detector_debug_options = detector_debug_options
