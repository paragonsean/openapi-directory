# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SMSConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sender_id: str=None, additional_message: str=None, recipients: List=None):
        """SMSConfiguration - a model defined in OpenAPI

        :param sender_id: The sender_id of this SMSConfiguration.
        :param additional_message: The additional_message of this SMSConfiguration.
        :param recipients: The recipients of this SMSConfiguration.
        """
        self.openapi_types = {
            'sender_id': str,
            'additional_message': str,
            'recipients': List
        }

        self.attribute_map = {
            'sender_id': 'senderId',
            'additional_message': 'additionalMessage',
            'recipients': 'recipients'
        }

        self._sender_id = sender_id
        self._additional_message = additional_message
        self._recipients = recipients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SMSConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SMSConfiguration of this SMSConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sender_id(self):
        """Gets the sender_id of this SMSConfiguration.


        :return: The sender_id of this SMSConfiguration.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this SMSConfiguration.


        :param sender_id: The sender_id of this SMSConfiguration.
        :type sender_id: str
        """

        self._sender_id = sender_id

    @property
    def additional_message(self):
        """Gets the additional_message of this SMSConfiguration.


        :return: The additional_message of this SMSConfiguration.
        :rtype: str
        """
        return self._additional_message

    @additional_message.setter
    def additional_message(self, additional_message):
        """Sets the additional_message of this SMSConfiguration.


        :param additional_message: The additional_message of this SMSConfiguration.
        :type additional_message: str
        """

        self._additional_message = additional_message

    @property
    def recipients(self):
        """Gets the recipients of this SMSConfiguration.


        :return: The recipients of this SMSConfiguration.
        :rtype: List
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this SMSConfiguration.


        :param recipients: The recipients of this SMSConfiguration.
        :type recipients: List
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients
