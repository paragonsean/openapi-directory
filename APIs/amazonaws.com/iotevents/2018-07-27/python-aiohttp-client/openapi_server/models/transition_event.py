# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransitionEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_name: str=None, condition: str=None, actions: List=None, next_state: str=None):
        """TransitionEvent - a model defined in OpenAPI

        :param event_name: The event_name of this TransitionEvent.
        :param condition: The condition of this TransitionEvent.
        :param actions: The actions of this TransitionEvent.
        :param next_state: The next_state of this TransitionEvent.
        """
        self.openapi_types = {
            'event_name': str,
            'condition': str,
            'actions': List,
            'next_state': str
        }

        self.attribute_map = {
            'event_name': 'eventName',
            'condition': 'condition',
            'actions': 'actions',
            'next_state': 'nextState'
        }

        self._event_name = event_name
        self._condition = condition
        self._actions = actions
        self._next_state = next_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransitionEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransitionEvent of this TransitionEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_name(self):
        """Gets the event_name of this TransitionEvent.


        :return: The event_name of this TransitionEvent.
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this TransitionEvent.


        :param event_name: The event_name of this TransitionEvent.
        :type event_name: str
        """
        if event_name is None:
            raise ValueError("Invalid value for `event_name`, must not be `None`")

        self._event_name = event_name

    @property
    def condition(self):
        """Gets the condition of this TransitionEvent.


        :return: The condition of this TransitionEvent.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this TransitionEvent.


        :param condition: The condition of this TransitionEvent.
        :type condition: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition

    @property
    def actions(self):
        """Gets the actions of this TransitionEvent.


        :return: The actions of this TransitionEvent.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this TransitionEvent.


        :param actions: The actions of this TransitionEvent.
        :type actions: List
        """

        self._actions = actions

    @property
    def next_state(self):
        """Gets the next_state of this TransitionEvent.


        :return: The next_state of this TransitionEvent.
        :rtype: str
        """
        return self._next_state

    @next_state.setter
    def next_state(self, next_state):
        """Sets the next_state of this TransitionEvent.


        :param next_state: The next_state of this TransitionEvent.
        :type next_state: str
        """
        if next_state is None:
            raise ValueError("Invalid value for `next_state`, must not be `None`")

        self._next_state = next_state
