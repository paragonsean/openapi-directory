# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_configuration_content import EmailConfigurationContent
from openapi_server.models.email_configuration_recipients import EmailConfigurationRecipients
from openapi_server import util


class EmailConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _from: str=None, content: EmailConfigurationContent=None, recipients: EmailConfigurationRecipients=None):
        """EmailConfiguration - a model defined in OpenAPI

        :param _from: The _from of this EmailConfiguration.
        :param content: The content of this EmailConfiguration.
        :param recipients: The recipients of this EmailConfiguration.
        """
        self.openapi_types = {
            '_from': str,
            'content': EmailConfigurationContent,
            'recipients': EmailConfigurationRecipients
        }

        self.attribute_map = {
            '_from': 'from',
            'content': 'content',
            'recipients': 'recipients'
        }

        self.__from = _from
        self._content = content
        self._recipients = recipients

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailConfiguration of this EmailConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _from(self):
        """Gets the _from of this EmailConfiguration.


        :return: The _from of this EmailConfiguration.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailConfiguration.


        :param _from: The _from of this EmailConfiguration.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")

        self.__from = _from

    @property
    def content(self):
        """Gets the content of this EmailConfiguration.


        :return: The content of this EmailConfiguration.
        :rtype: EmailConfigurationContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this EmailConfiguration.


        :param content: The content of this EmailConfiguration.
        :type content: EmailConfigurationContent
        """

        self._content = content

    @property
    def recipients(self):
        """Gets the recipients of this EmailConfiguration.


        :return: The recipients of this EmailConfiguration.
        :rtype: EmailConfigurationRecipients
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this EmailConfiguration.


        :param recipients: The recipients of this EmailConfiguration.
        :type recipients: EmailConfigurationRecipients
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients
