# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_detector_model_request_detector_model_definition import CreateDetectorModelRequestDetectorModelDefinition
from openapi_server import util


class UpdateDetectorModelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_model_definition: CreateDetectorModelRequestDetectorModelDefinition=None, detector_model_description: str=None, role_arn: str=None, evaluation_method: str=None):
        """UpdateDetectorModelRequest - a model defined in OpenAPI

        :param detector_model_definition: The detector_model_definition of this UpdateDetectorModelRequest.
        :param detector_model_description: The detector_model_description of this UpdateDetectorModelRequest.
        :param role_arn: The role_arn of this UpdateDetectorModelRequest.
        :param evaluation_method: The evaluation_method of this UpdateDetectorModelRequest.
        """
        self.openapi_types = {
            'detector_model_definition': CreateDetectorModelRequestDetectorModelDefinition,
            'detector_model_description': str,
            'role_arn': str,
            'evaluation_method': str
        }

        self.attribute_map = {
            'detector_model_definition': 'detectorModelDefinition',
            'detector_model_description': 'detectorModelDescription',
            'role_arn': 'roleArn',
            'evaluation_method': 'evaluationMethod'
        }

        self._detector_model_definition = detector_model_definition
        self._detector_model_description = detector_model_description
        self._role_arn = role_arn
        self._evaluation_method = evaluation_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDetectorModelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDetectorModel_request of this UpdateDetectorModelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_model_definition(self):
        """Gets the detector_model_definition of this UpdateDetectorModelRequest.


        :return: The detector_model_definition of this UpdateDetectorModelRequest.
        :rtype: CreateDetectorModelRequestDetectorModelDefinition
        """
        return self._detector_model_definition

    @detector_model_definition.setter
    def detector_model_definition(self, detector_model_definition):
        """Sets the detector_model_definition of this UpdateDetectorModelRequest.


        :param detector_model_definition: The detector_model_definition of this UpdateDetectorModelRequest.
        :type detector_model_definition: CreateDetectorModelRequestDetectorModelDefinition
        """
        if detector_model_definition is None:
            raise ValueError("Invalid value for `detector_model_definition`, must not be `None`")

        self._detector_model_definition = detector_model_definition

    @property
    def detector_model_description(self):
        """Gets the detector_model_description of this UpdateDetectorModelRequest.

        A brief description of the detector model.

        :return: The detector_model_description of this UpdateDetectorModelRequest.
        :rtype: str
        """
        return self._detector_model_description

    @detector_model_description.setter
    def detector_model_description(self, detector_model_description):
        """Sets the detector_model_description of this UpdateDetectorModelRequest.

        A brief description of the detector model.

        :param detector_model_description: The detector_model_description of this UpdateDetectorModelRequest.
        :type detector_model_description: str
        """
        if detector_model_description is not None and len(detector_model_description) > 128:
            raise ValueError("Invalid value for `detector_model_description`, length must be less than or equal to `128`")

        self._detector_model_description = detector_model_description

    @property
    def role_arn(self):
        """Gets the role_arn of this UpdateDetectorModelRequest.

        The ARN of the role that grants permission to AWS IoT Events to perform its operations.

        :return: The role_arn of this UpdateDetectorModelRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this UpdateDetectorModelRequest.

        The ARN of the role that grants permission to AWS IoT Events to perform its operations.

        :param role_arn: The role_arn of this UpdateDetectorModelRequest.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")
        if role_arn is not None and len(role_arn) > 2048:
            raise ValueError("Invalid value for `role_arn`, length must be less than or equal to `2048`")
        if role_arn is not None and len(role_arn) < 1:
            raise ValueError("Invalid value for `role_arn`, length must be greater than or equal to `1`")

        self._role_arn = role_arn

    @property
    def evaluation_method(self):
        """Gets the evaluation_method of this UpdateDetectorModelRequest.

        Information about the order in which events are evaluated and how actions are executed. 

        :return: The evaluation_method of this UpdateDetectorModelRequest.
        :rtype: str
        """
        return self._evaluation_method

    @evaluation_method.setter
    def evaluation_method(self, evaluation_method):
        """Sets the evaluation_method of this UpdateDetectorModelRequest.

        Information about the order in which events are evaluated and how actions are executed. 

        :param evaluation_method: The evaluation_method of this UpdateDetectorModelRequest.
        :type evaluation_method: str
        """
        allowed_values = ["BATCH", "SERIAL"]  # noqa: E501
        if evaluation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_method` ({0}), must be one of {1}"
                .format(evaluation_method, allowed_values)
            )

        self._evaluation_method = evaluation_method
