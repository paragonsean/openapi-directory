# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_input_routings_request_input_identifier import ListInputRoutingsRequestInputIdentifier
from openapi_server import util


class ListInputRoutingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_identifier: ListInputRoutingsRequestInputIdentifier=None, max_results: int=None, next_token: str=None):
        """ListInputRoutingsRequest - a model defined in OpenAPI

        :param input_identifier: The input_identifier of this ListInputRoutingsRequest.
        :param max_results: The max_results of this ListInputRoutingsRequest.
        :param next_token: The next_token of this ListInputRoutingsRequest.
        """
        self.openapi_types = {
            'input_identifier': ListInputRoutingsRequestInputIdentifier,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'input_identifier': 'inputIdentifier',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._input_identifier = input_identifier
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListInputRoutingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListInputRoutings_request of this ListInputRoutingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_identifier(self):
        """Gets the input_identifier of this ListInputRoutingsRequest.


        :return: The input_identifier of this ListInputRoutingsRequest.
        :rtype: ListInputRoutingsRequestInputIdentifier
        """
        return self._input_identifier

    @input_identifier.setter
    def input_identifier(self, input_identifier):
        """Sets the input_identifier of this ListInputRoutingsRequest.


        :param input_identifier: The input_identifier of this ListInputRoutingsRequest.
        :type input_identifier: ListInputRoutingsRequestInputIdentifier
        """
        if input_identifier is None:
            raise ValueError("Invalid value for `input_identifier`, must not be `None`")

        self._input_identifier = input_identifier

    @property
    def max_results(self):
        """Gets the max_results of this ListInputRoutingsRequest.

         The maximum number of results to be returned per request. 

        :return: The max_results of this ListInputRoutingsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListInputRoutingsRequest.

         The maximum number of results to be returned per request. 

        :param max_results: The max_results of this ListInputRoutingsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 250:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `250`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListInputRoutingsRequest.

         The token that you can use to return the next set of results. 

        :return: The next_token of this ListInputRoutingsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListInputRoutingsRequest.

         The token that you can use to return the next set of results. 

        :param next_token: The next_token of this ListInputRoutingsRequest.
        :type next_token: str
        """

        self._next_token = next_token
