# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.state_on_enter import StateOnEnter
from openapi_server.models.state_on_exit import StateOnExit
from openapi_server.models.state_on_input import StateOnInput
from openapi_server import util


class State(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_name: str=None, on_input: StateOnInput=None, on_enter: StateOnEnter=None, on_exit: StateOnExit=None):
        """State - a model defined in OpenAPI

        :param state_name: The state_name of this State.
        :param on_input: The on_input of this State.
        :param on_enter: The on_enter of this State.
        :param on_exit: The on_exit of this State.
        """
        self.openapi_types = {
            'state_name': str,
            'on_input': StateOnInput,
            'on_enter': StateOnEnter,
            'on_exit': StateOnExit
        }

        self.attribute_map = {
            'state_name': 'stateName',
            'on_input': 'onInput',
            'on_enter': 'onEnter',
            'on_exit': 'onExit'
        }

        self._state_name = state_name
        self._on_input = on_input
        self._on_enter = on_enter
        self._on_exit = on_exit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'State':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The State of this State.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_name(self):
        """Gets the state_name of this State.


        :return: The state_name of this State.
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this State.


        :param state_name: The state_name of this State.
        :type state_name: str
        """
        if state_name is None:
            raise ValueError("Invalid value for `state_name`, must not be `None`")

        self._state_name = state_name

    @property
    def on_input(self):
        """Gets the on_input of this State.


        :return: The on_input of this State.
        :rtype: StateOnInput
        """
        return self._on_input

    @on_input.setter
    def on_input(self, on_input):
        """Sets the on_input of this State.


        :param on_input: The on_input of this State.
        :type on_input: StateOnInput
        """

        self._on_input = on_input

    @property
    def on_enter(self):
        """Gets the on_enter of this State.


        :return: The on_enter of this State.
        :rtype: StateOnEnter
        """
        return self._on_enter

    @on_enter.setter
    def on_enter(self, on_enter):
        """Sets the on_enter of this State.


        :param on_enter: The on_enter of this State.
        :type on_enter: StateOnEnter
        """

        self._on_enter = on_enter

    @property
    def on_exit(self):
        """Gets the on_exit of this State.


        :return: The on_exit of this State.
        :rtype: StateOnExit
        """
        return self._on_exit

    @on_exit.setter
    def on_exit(self, on_exit):
        """Sets the on_exit of this State.


        :param on_exit: The on_exit of this State.
        :type on_exit: StateOnExit
        """

        self._on_exit = on_exit
