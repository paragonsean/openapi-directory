# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payload import Payload
from openapi_server import util


class ActionDynamoDB(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hash_key_type: str=None, hash_key_field: str=None, hash_key_value: str=None, range_key_type: str=None, range_key_field: str=None, range_key_value: str=None, operation: str=None, payload_field: str=None, table_name: str=None, payload: Payload=None):
        """ActionDynamoDB - a model defined in OpenAPI

        :param hash_key_type: The hash_key_type of this ActionDynamoDB.
        :param hash_key_field: The hash_key_field of this ActionDynamoDB.
        :param hash_key_value: The hash_key_value of this ActionDynamoDB.
        :param range_key_type: The range_key_type of this ActionDynamoDB.
        :param range_key_field: The range_key_field of this ActionDynamoDB.
        :param range_key_value: The range_key_value of this ActionDynamoDB.
        :param operation: The operation of this ActionDynamoDB.
        :param payload_field: The payload_field of this ActionDynamoDB.
        :param table_name: The table_name of this ActionDynamoDB.
        :param payload: The payload of this ActionDynamoDB.
        """
        self.openapi_types = {
            'hash_key_type': str,
            'hash_key_field': str,
            'hash_key_value': str,
            'range_key_type': str,
            'range_key_field': str,
            'range_key_value': str,
            'operation': str,
            'payload_field': str,
            'table_name': str,
            'payload': Payload
        }

        self.attribute_map = {
            'hash_key_type': 'hashKeyType',
            'hash_key_field': 'hashKeyField',
            'hash_key_value': 'hashKeyValue',
            'range_key_type': 'rangeKeyType',
            'range_key_field': 'rangeKeyField',
            'range_key_value': 'rangeKeyValue',
            'operation': 'operation',
            'payload_field': 'payloadField',
            'table_name': 'tableName',
            'payload': 'payload'
        }

        self._hash_key_type = hash_key_type
        self._hash_key_field = hash_key_field
        self._hash_key_value = hash_key_value
        self._range_key_type = range_key_type
        self._range_key_field = range_key_field
        self._range_key_value = range_key_value
        self._operation = operation
        self._payload_field = payload_field
        self._table_name = table_name
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionDynamoDB':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action_dynamoDB of this ActionDynamoDB.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash_key_type(self):
        """Gets the hash_key_type of this ActionDynamoDB.


        :return: The hash_key_type of this ActionDynamoDB.
        :rtype: str
        """
        return self._hash_key_type

    @hash_key_type.setter
    def hash_key_type(self, hash_key_type):
        """Sets the hash_key_type of this ActionDynamoDB.


        :param hash_key_type: The hash_key_type of this ActionDynamoDB.
        :type hash_key_type: str
        """

        self._hash_key_type = hash_key_type

    @property
    def hash_key_field(self):
        """Gets the hash_key_field of this ActionDynamoDB.


        :return: The hash_key_field of this ActionDynamoDB.
        :rtype: str
        """
        return self._hash_key_field

    @hash_key_field.setter
    def hash_key_field(self, hash_key_field):
        """Sets the hash_key_field of this ActionDynamoDB.


        :param hash_key_field: The hash_key_field of this ActionDynamoDB.
        :type hash_key_field: str
        """
        if hash_key_field is None:
            raise ValueError("Invalid value for `hash_key_field`, must not be `None`")

        self._hash_key_field = hash_key_field

    @property
    def hash_key_value(self):
        """Gets the hash_key_value of this ActionDynamoDB.


        :return: The hash_key_value of this ActionDynamoDB.
        :rtype: str
        """
        return self._hash_key_value

    @hash_key_value.setter
    def hash_key_value(self, hash_key_value):
        """Sets the hash_key_value of this ActionDynamoDB.


        :param hash_key_value: The hash_key_value of this ActionDynamoDB.
        :type hash_key_value: str
        """
        if hash_key_value is None:
            raise ValueError("Invalid value for `hash_key_value`, must not be `None`")

        self._hash_key_value = hash_key_value

    @property
    def range_key_type(self):
        """Gets the range_key_type of this ActionDynamoDB.


        :return: The range_key_type of this ActionDynamoDB.
        :rtype: str
        """
        return self._range_key_type

    @range_key_type.setter
    def range_key_type(self, range_key_type):
        """Sets the range_key_type of this ActionDynamoDB.


        :param range_key_type: The range_key_type of this ActionDynamoDB.
        :type range_key_type: str
        """

        self._range_key_type = range_key_type

    @property
    def range_key_field(self):
        """Gets the range_key_field of this ActionDynamoDB.


        :return: The range_key_field of this ActionDynamoDB.
        :rtype: str
        """
        return self._range_key_field

    @range_key_field.setter
    def range_key_field(self, range_key_field):
        """Sets the range_key_field of this ActionDynamoDB.


        :param range_key_field: The range_key_field of this ActionDynamoDB.
        :type range_key_field: str
        """

        self._range_key_field = range_key_field

    @property
    def range_key_value(self):
        """Gets the range_key_value of this ActionDynamoDB.


        :return: The range_key_value of this ActionDynamoDB.
        :rtype: str
        """
        return self._range_key_value

    @range_key_value.setter
    def range_key_value(self, range_key_value):
        """Sets the range_key_value of this ActionDynamoDB.


        :param range_key_value: The range_key_value of this ActionDynamoDB.
        :type range_key_value: str
        """

        self._range_key_value = range_key_value

    @property
    def operation(self):
        """Gets the operation of this ActionDynamoDB.


        :return: The operation of this ActionDynamoDB.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ActionDynamoDB.


        :param operation: The operation of this ActionDynamoDB.
        :type operation: str
        """

        self._operation = operation

    @property
    def payload_field(self):
        """Gets the payload_field of this ActionDynamoDB.


        :return: The payload_field of this ActionDynamoDB.
        :rtype: str
        """
        return self._payload_field

    @payload_field.setter
    def payload_field(self, payload_field):
        """Sets the payload_field of this ActionDynamoDB.


        :param payload_field: The payload_field of this ActionDynamoDB.
        :type payload_field: str
        """

        self._payload_field = payload_field

    @property
    def table_name(self):
        """Gets the table_name of this ActionDynamoDB.


        :return: The table_name of this ActionDynamoDB.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ActionDynamoDB.


        :param table_name: The table_name of this ActionDynamoDB.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name

    @property
    def payload(self):
        """Gets the payload of this ActionDynamoDB.


        :return: The payload of this ActionDynamoDB.
        :rtype: Payload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ActionDynamoDB.


        :param payload: The payload of this ActionDynamoDB.
        :type payload: Payload
        """

        self._payload = payload
