# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_input_request_input_definition import CreateInputRequestInputDefinition
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateInputRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_name: str=None, input_description: str=None, input_definition: CreateInputRequestInputDefinition=None, tags: List[Tag]=None):
        """CreateInputRequest - a model defined in OpenAPI

        :param input_name: The input_name of this CreateInputRequest.
        :param input_description: The input_description of this CreateInputRequest.
        :param input_definition: The input_definition of this CreateInputRequest.
        :param tags: The tags of this CreateInputRequest.
        """
        self.openapi_types = {
            'input_name': str,
            'input_description': str,
            'input_definition': CreateInputRequestInputDefinition,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'input_name': 'inputName',
            'input_description': 'inputDescription',
            'input_definition': 'inputDefinition',
            'tags': 'tags'
        }

        self._input_name = input_name
        self._input_description = input_description
        self._input_definition = input_definition
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateInputRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateInput_request of this CreateInputRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_name(self):
        """Gets the input_name of this CreateInputRequest.

        The name you want to give to the input.

        :return: The input_name of this CreateInputRequest.
        :rtype: str
        """
        return self._input_name

    @input_name.setter
    def input_name(self, input_name):
        """Sets the input_name of this CreateInputRequest.

        The name you want to give to the input.

        :param input_name: The input_name of this CreateInputRequest.
        :type input_name: str
        """
        if input_name is None:
            raise ValueError("Invalid value for `input_name`, must not be `None`")
        if input_name is not None and len(input_name) > 128:
            raise ValueError("Invalid value for `input_name`, length must be less than or equal to `128`")
        if input_name is not None and len(input_name) < 1:
            raise ValueError("Invalid value for `input_name`, length must be greater than or equal to `1`")
        if input_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', input_name):
            raise ValueError("Invalid value for `input_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_]*$/`")

        self._input_name = input_name

    @property
    def input_description(self):
        """Gets the input_description of this CreateInputRequest.

        A brief description of the input.

        :return: The input_description of this CreateInputRequest.
        :rtype: str
        """
        return self._input_description

    @input_description.setter
    def input_description(self, input_description):
        """Sets the input_description of this CreateInputRequest.

        A brief description of the input.

        :param input_description: The input_description of this CreateInputRequest.
        :type input_description: str
        """
        if input_description is not None and len(input_description) > 128:
            raise ValueError("Invalid value for `input_description`, length must be less than or equal to `128`")

        self._input_description = input_description

    @property
    def input_definition(self):
        """Gets the input_definition of this CreateInputRequest.


        :return: The input_definition of this CreateInputRequest.
        :rtype: CreateInputRequestInputDefinition
        """
        return self._input_definition

    @input_definition.setter
    def input_definition(self, input_definition):
        """Sets the input_definition of this CreateInputRequest.


        :param input_definition: The input_definition of this CreateInputRequest.
        :type input_definition: CreateInputRequestInputDefinition
        """
        if input_definition is None:
            raise ValueError("Invalid value for `input_definition`, must not be `None`")

        self._input_definition = input_definition

    @property
    def tags(self):
        """Gets the tags of this CreateInputRequest.

        Metadata that can be used to manage the input.

        :return: The tags of this CreateInputRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateInputRequest.

        Metadata that can be used to manage the input.

        :param tags: The tags of this CreateInputRequest.
        :type tags: List[Tag]
        """

        self._tags = tags
