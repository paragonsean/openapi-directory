# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator import ComparisonOperator
from openapi_server import util


class SimpleRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_property: str=None, comparison_operator: ComparisonOperator=None, threshold: str=None):
        """SimpleRule - a model defined in OpenAPI

        :param input_property: The input_property of this SimpleRule.
        :param comparison_operator: The comparison_operator of this SimpleRule.
        :param threshold: The threshold of this SimpleRule.
        """
        self.openapi_types = {
            'input_property': str,
            'comparison_operator': ComparisonOperator,
            'threshold': str
        }

        self.attribute_map = {
            'input_property': 'inputProperty',
            'comparison_operator': 'comparisonOperator',
            'threshold': 'threshold'
        }

        self._input_property = input_property
        self._comparison_operator = comparison_operator
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimpleRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimpleRule of this SimpleRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_property(self):
        """Gets the input_property of this SimpleRule.


        :return: The input_property of this SimpleRule.
        :rtype: str
        """
        return self._input_property

    @input_property.setter
    def input_property(self, input_property):
        """Sets the input_property of this SimpleRule.


        :param input_property: The input_property of this SimpleRule.
        :type input_property: str
        """
        if input_property is None:
            raise ValueError("Invalid value for `input_property`, must not be `None`")

        self._input_property = input_property

    @property
    def comparison_operator(self):
        """Gets the comparison_operator of this SimpleRule.


        :return: The comparison_operator of this SimpleRule.
        :rtype: ComparisonOperator
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator):
        """Sets the comparison_operator of this SimpleRule.


        :param comparison_operator: The comparison_operator of this SimpleRule.
        :type comparison_operator: ComparisonOperator
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")

        self._comparison_operator = comparison_operator

    @property
    def threshold(self):
        """Gets the threshold of this SimpleRule.


        :return: The threshold of this SimpleRule.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this SimpleRule.


        :param threshold: The threshold of this SimpleRule.
        :type threshold: str
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold
