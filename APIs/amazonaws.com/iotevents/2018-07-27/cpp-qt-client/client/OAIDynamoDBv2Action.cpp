/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamoDBv2Action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamoDBv2Action::OAIDynamoDBv2Action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamoDBv2Action::OAIDynamoDBv2Action() {
    this->initializeModel();
}

OAIDynamoDBv2Action::~OAIDynamoDBv2Action() {}

void OAIDynamoDBv2Action::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIDynamoDBv2Action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamoDBv2Action::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIDynamoDBv2Action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamoDBv2Action::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIDynamoDBv2Action::getTableName() const {
    return m_table_name;
}
void OAIDynamoDBv2Action::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDynamoDBv2Action::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDynamoDBv2Action::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIPayload OAIDynamoDBv2Action::getPayload() const {
    return m_payload;
}
void OAIDynamoDBv2Action::setPayload(const OAIPayload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIDynamoDBv2Action::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIDynamoDBv2Action::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIDynamoDBv2Action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamoDBv2Action::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && true;
}

} // namespace OpenAPI
