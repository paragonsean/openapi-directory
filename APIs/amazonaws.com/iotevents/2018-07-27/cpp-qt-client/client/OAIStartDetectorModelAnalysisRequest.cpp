/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDetectorModelAnalysisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDetectorModelAnalysisRequest::OAIStartDetectorModelAnalysisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDetectorModelAnalysisRequest::OAIStartDetectorModelAnalysisRequest() {
    this->initializeModel();
}

OAIStartDetectorModelAnalysisRequest::~OAIStartDetectorModelAnalysisRequest() {}

void OAIStartDetectorModelAnalysisRequest::initializeModel() {

    m_detector_model_definition_isSet = false;
    m_detector_model_definition_isValid = false;
}

void OAIStartDetectorModelAnalysisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDetectorModelAnalysisRequest::fromJsonObject(QJsonObject json) {

    m_detector_model_definition_isValid = ::OpenAPI::fromJsonValue(m_detector_model_definition, json[QString("detectorModelDefinition")]);
    m_detector_model_definition_isSet = !json[QString("detectorModelDefinition")].isNull() && m_detector_model_definition_isValid;
}

QString OAIStartDetectorModelAnalysisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDetectorModelAnalysisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_definition.isSet()) {
        obj.insert(QString("detectorModelDefinition"), ::OpenAPI::toJsonValue(m_detector_model_definition));
    }
    return obj;
}

OAIDetectorModelDefinition OAIStartDetectorModelAnalysisRequest::getDetectorModelDefinition() const {
    return m_detector_model_definition;
}
void OAIStartDetectorModelAnalysisRequest::setDetectorModelDefinition(const OAIDetectorModelDefinition &detector_model_definition) {
    m_detector_model_definition = detector_model_definition;
    m_detector_model_definition_isSet = true;
}

bool OAIStartDetectorModelAnalysisRequest::is_detector_model_definition_Set() const{
    return m_detector_model_definition_isSet;
}

bool OAIStartDetectorModelAnalysisRequest::is_detector_model_definition_Valid() const{
    return m_detector_model_definition_isValid;
}

bool OAIStartDetectorModelAnalysisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDetectorModelAnalysisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detector_model_definition_isValid && true;
}

} // namespace OpenAPI
