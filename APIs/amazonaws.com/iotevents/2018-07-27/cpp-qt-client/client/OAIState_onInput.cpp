/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIState_onInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIState_onInput::OAIState_onInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIState_onInput::OAIState_onInput() {
    this->initializeModel();
}

OAIState_onInput::~OAIState_onInput() {}

void OAIState_onInput::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_transition_events_isSet = false;
    m_transition_events_isValid = false;
}

void OAIState_onInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIState_onInput::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_transition_events_isValid = ::OpenAPI::fromJsonValue(m_transition_events, json[QString("transitionEvents")]);
    m_transition_events_isSet = !json[QString("transitionEvents")].isNull() && m_transition_events_isValid;
}

QString OAIState_onInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIState_onInput::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_transition_events.isSet()) {
        obj.insert(QString("transitionEvents"), ::OpenAPI::toJsonValue(m_transition_events));
    }
    return obj;
}

QList OAIState_onInput::getEvents() const {
    return m_events;
}
void OAIState_onInput::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIState_onInput::is_events_Set() const{
    return m_events_isSet;
}

bool OAIState_onInput::is_events_Valid() const{
    return m_events_isValid;
}

QList OAIState_onInput::getTransitionEvents() const {
    return m_transition_events;
}
void OAIState_onInput::setTransitionEvents(const QList &transition_events) {
    m_transition_events = transition_events;
    m_transition_events_isSet = true;
}

bool OAIState_onInput::is_transition_events_Set() const{
    return m_transition_events_isSet;
}

bool OAIState_onInput::is_transition_events_Valid() const{
    return m_transition_events_isValid;
}

bool OAIState_onInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIState_onInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
