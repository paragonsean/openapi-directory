/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailContent::OAIEmailContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailContent::OAIEmailContent() {
    this->initializeModel();
}

OAIEmailContent::~OAIEmailContent() {}

void OAIEmailContent::initializeModel() {

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_additional_message_isSet = false;
    m_additional_message_isValid = false;
}

void OAIEmailContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailContent::fromJsonObject(QJsonObject json) {

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_additional_message_isValid = ::OpenAPI::fromJsonValue(m_additional_message, json[QString("additionalMessage")]);
    m_additional_message_isSet = !json[QString("additionalMessage")].isNull() && m_additional_message_isValid;
}

QString OAIEmailContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailContent::asJsonObject() const {
    QJsonObject obj;
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_additional_message_isSet) {
        obj.insert(QString("additionalMessage"), ::OpenAPI::toJsonValue(m_additional_message));
    }
    return obj;
}

QString OAIEmailContent::getSubject() const {
    return m_subject;
}
void OAIEmailContent::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEmailContent::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEmailContent::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIEmailContent::getAdditionalMessage() const {
    return m_additional_message;
}
void OAIEmailContent::setAdditionalMessage(const QString &additional_message) {
    m_additional_message = additional_message;
    m_additional_message_isSet = true;
}

bool OAIEmailContent::is_additional_message_Set() const{
    return m_additional_message_isSet;
}

bool OAIEmailContent::is_additional_message_Valid() const{
    return m_additional_message_isValid;
}

bool OAIEmailContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
