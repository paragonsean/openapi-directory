/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssetPropertyTimestamp.h
 *
 * &lt;p&gt;A structure that contains timestamp information. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html\&quot;&gt;TimeInNanos&lt;/a&gt; in the &lt;i&gt;AWS IoT SiteWise API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;AssetPropertyTimestamp&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;timeInSeconds&lt;/code&gt; parameter can be &lt;code&gt;&#39;1586400675&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;offsetInNanos&lt;/code&gt; parameter can be &lt;code&gt;$variable.time&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;timeInSeconds&lt;/code&gt; parameter uses a substitution template.&lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;${$input.TemperatureInput.sensorData.timestamp / 1000}&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIAssetPropertyTimestamp_H
#define OAIAssetPropertyTimestamp_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssetPropertyTimestamp : public OAIObject {
public:
    OAIAssetPropertyTimestamp();
    OAIAssetPropertyTimestamp(QString json);
    ~OAIAssetPropertyTimestamp() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTimeInSeconds() const;
    void setTimeInSeconds(const QString &time_in_seconds);
    bool is_time_in_seconds_Set() const;
    bool is_time_in_seconds_Valid() const;

    QString getOffsetInNanos() const;
    void setOffsetInNanos(const QString &offset_in_nanos);
    bool is_offset_in_nanos_Set() const;
    bool is_offset_in_nanos_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_time_in_seconds;
    bool m_time_in_seconds_isSet;
    bool m_time_in_seconds_isValid;

    QString m_offset_in_nanos;
    bool m_offset_in_nanos_isSet;
    bool m_offset_in_nanos_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssetPropertyTimestamp)

#endif // OAIAssetPropertyTimestamp_H
