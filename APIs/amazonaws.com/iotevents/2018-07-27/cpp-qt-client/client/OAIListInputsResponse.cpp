/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInputsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInputsResponse::OAIListInputsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInputsResponse::OAIListInputsResponse() {
    this->initializeModel();
}

OAIListInputsResponse::~OAIListInputsResponse() {}

void OAIListInputsResponse::initializeModel() {

    m_input_summaries_isSet = false;
    m_input_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListInputsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInputsResponse::fromJsonObject(QJsonObject json) {

    m_input_summaries_isValid = ::OpenAPI::fromJsonValue(m_input_summaries, json[QString("inputSummaries")]);
    m_input_summaries_isSet = !json[QString("inputSummaries")].isNull() && m_input_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListInputsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInputsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_input_summaries.isSet()) {
        obj.insert(QString("inputSummaries"), ::OpenAPI::toJsonValue(m_input_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListInputsResponse::getInputSummaries() const {
    return m_input_summaries;
}
void OAIListInputsResponse::setInputSummaries(const QList &input_summaries) {
    m_input_summaries = input_summaries;
    m_input_summaries_isSet = true;
}

bool OAIListInputsResponse::is_input_summaries_Set() const{
    return m_input_summaries_isSet;
}

bool OAIListInputsResponse::is_input_summaries_Valid() const{
    return m_input_summaries_isValid;
}

QString OAIListInputsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListInputsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInputsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInputsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListInputsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInputsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
