/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailConfiguration_content.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailConfiguration_content::OAIEmailConfiguration_content(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailConfiguration_content::OAIEmailConfiguration_content() {
    this->initializeModel();
}

OAIEmailConfiguration_content::~OAIEmailConfiguration_content() {}

void OAIEmailConfiguration_content::initializeModel() {

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_additional_message_isSet = false;
    m_additional_message_isValid = false;
}

void OAIEmailConfiguration_content::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailConfiguration_content::fromJsonObject(QJsonObject json) {

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_additional_message_isValid = ::OpenAPI::fromJsonValue(m_additional_message, json[QString("additionalMessage")]);
    m_additional_message_isSet = !json[QString("additionalMessage")].isNull() && m_additional_message_isValid;
}

QString OAIEmailConfiguration_content::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailConfiguration_content::asJsonObject() const {
    QJsonObject obj;
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_additional_message_isSet) {
        obj.insert(QString("additionalMessage"), ::OpenAPI::toJsonValue(m_additional_message));
    }
    return obj;
}

QString OAIEmailConfiguration_content::getSubject() const {
    return m_subject;
}
void OAIEmailConfiguration_content::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEmailConfiguration_content::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEmailConfiguration_content::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIEmailConfiguration_content::getAdditionalMessage() const {
    return m_additional_message;
}
void OAIEmailConfiguration_content::setAdditionalMessage(const QString &additional_message) {
    m_additional_message = additional_message;
    m_additional_message_isSet = true;
}

bool OAIEmailConfiguration_content::is_additional_message_Set() const{
    return m_additional_message_isSet;
}

bool OAIEmailConfiguration_content::is_additional_message_Valid() const{
    return m_additional_message_isValid;
}

bool OAIEmailConfiguration_content::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailConfiguration_content::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
