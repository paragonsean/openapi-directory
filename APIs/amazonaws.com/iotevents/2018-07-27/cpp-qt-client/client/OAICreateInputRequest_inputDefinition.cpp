/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInputRequest_inputDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInputRequest_inputDefinition::OAICreateInputRequest_inputDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInputRequest_inputDefinition::OAICreateInputRequest_inputDefinition() {
    this->initializeModel();
}

OAICreateInputRequest_inputDefinition::~OAICreateInputRequest_inputDefinition() {}

void OAICreateInputRequest_inputDefinition::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAICreateInputRequest_inputDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInputRequest_inputDefinition::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAICreateInputRequest_inputDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInputRequest_inputDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QList OAICreateInputRequest_inputDefinition::getAttributes() const {
    return m_attributes;
}
void OAICreateInputRequest_inputDefinition::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICreateInputRequest_inputDefinition::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICreateInputRequest_inputDefinition::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAICreateInputRequest_inputDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInputRequest_inputDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attributes_isValid && true;
}

} // namespace OpenAPI
