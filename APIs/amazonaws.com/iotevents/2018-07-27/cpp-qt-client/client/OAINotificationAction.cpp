/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationAction::OAINotificationAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationAction::OAINotificationAction() {
    this->initializeModel();
}

OAINotificationAction::~OAINotificationAction() {}

void OAINotificationAction::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_sms_configurations_isSet = false;
    m_sms_configurations_isValid = false;

    m_email_configurations_isSet = false;
    m_email_configurations_isValid = false;
}

void OAINotificationAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationAction::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_sms_configurations_isValid = ::OpenAPI::fromJsonValue(m_sms_configurations, json[QString("smsConfigurations")]);
    m_sms_configurations_isSet = !json[QString("smsConfigurations")].isNull() && m_sms_configurations_isValid;

    m_email_configurations_isValid = ::OpenAPI::fromJsonValue(m_email_configurations, json[QString("emailConfigurations")]);
    m_email_configurations_isSet = !json[QString("emailConfigurations")].isNull() && m_email_configurations_isValid;
}

QString OAINotificationAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_sms_configurations.isSet()) {
        obj.insert(QString("smsConfigurations"), ::OpenAPI::toJsonValue(m_sms_configurations));
    }
    if (m_email_configurations.isSet()) {
        obj.insert(QString("emailConfigurations"), ::OpenAPI::toJsonValue(m_email_configurations));
    }
    return obj;
}

OAINotificationAction_action OAINotificationAction::getAction() const {
    return m_action;
}
void OAINotificationAction::setAction(const OAINotificationAction_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAINotificationAction::is_action_Set() const{
    return m_action_isSet;
}

bool OAINotificationAction::is_action_Valid() const{
    return m_action_isValid;
}

QList OAINotificationAction::getSmsConfigurations() const {
    return m_sms_configurations;
}
void OAINotificationAction::setSmsConfigurations(const QList &sms_configurations) {
    m_sms_configurations = sms_configurations;
    m_sms_configurations_isSet = true;
}

bool OAINotificationAction::is_sms_configurations_Set() const{
    return m_sms_configurations_isSet;
}

bool OAINotificationAction::is_sms_configurations_Valid() const{
    return m_sms_configurations_isValid;
}

QList OAINotificationAction::getEmailConfigurations() const {
    return m_email_configurations;
}
void OAINotificationAction::setEmailConfigurations(const QList &email_configurations) {
    m_email_configurations = email_configurations;
    m_email_configurations_isSet = true;
}

bool OAINotificationAction::is_email_configurations_Set() const{
    return m_email_configurations_isSet;
}

bool OAINotificationAction::is_email_configurations_Valid() const{
    return m_email_configurations_isValid;
}

bool OAINotificationAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && true;
}

} // namespace OpenAPI
