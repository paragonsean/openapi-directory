/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_iotTopicPublish.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_iotTopicPublish::OAIAction_iotTopicPublish(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_iotTopicPublish::OAIAction_iotTopicPublish() {
    this->initializeModel();
}

OAIAction_iotTopicPublish::~OAIAction_iotTopicPublish() {}

void OAIAction_iotTopicPublish::initializeModel() {

    m_mqtt_topic_isSet = false;
    m_mqtt_topic_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIAction_iotTopicPublish::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_iotTopicPublish::fromJsonObject(QJsonObject json) {

    m_mqtt_topic_isValid = ::OpenAPI::fromJsonValue(m_mqtt_topic, json[QString("mqttTopic")]);
    m_mqtt_topic_isSet = !json[QString("mqttTopic")].isNull() && m_mqtt_topic_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIAction_iotTopicPublish::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_iotTopicPublish::asJsonObject() const {
    QJsonObject obj;
    if (m_mqtt_topic_isSet) {
        obj.insert(QString("mqttTopic"), ::OpenAPI::toJsonValue(m_mqtt_topic));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIAction_iotTopicPublish::getMqttTopic() const {
    return m_mqtt_topic;
}
void OAIAction_iotTopicPublish::setMqttTopic(const QString &mqtt_topic) {
    m_mqtt_topic = mqtt_topic;
    m_mqtt_topic_isSet = true;
}

bool OAIAction_iotTopicPublish::is_mqtt_topic_Set() const{
    return m_mqtt_topic_isSet;
}

bool OAIAction_iotTopicPublish::is_mqtt_topic_Valid() const{
    return m_mqtt_topic_isValid;
}

OAIIotTopicPublishAction_payload OAIAction_iotTopicPublish::getPayload() const {
    return m_payload;
}
void OAIAction_iotTopicPublish::setPayload(const OAIIotTopicPublishAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAction_iotTopicPublish::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAction_iotTopicPublish::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIAction_iotTopicPublish::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mqtt_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_iotTopicPublish::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mqtt_topic_isValid && true;
}

} // namespace OpenAPI
