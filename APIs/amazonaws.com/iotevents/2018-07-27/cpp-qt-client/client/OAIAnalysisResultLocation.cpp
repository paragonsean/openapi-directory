/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisResultLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisResultLocation::OAIAnalysisResultLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisResultLocation::OAIAnalysisResultLocation() {
    this->initializeModel();
}

OAIAnalysisResultLocation::~OAIAnalysisResultLocation() {}

void OAIAnalysisResultLocation::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIAnalysisResultLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisResultLocation::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIAnalysisResultLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisResultLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIAnalysisResultLocation::getPath() const {
    return m_path;
}
void OAIAnalysisResultLocation::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAnalysisResultLocation::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAnalysisResultLocation::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIAnalysisResultLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisResultLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
