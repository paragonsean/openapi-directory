/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInput_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInput_request::OAICreateInput_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInput_request::OAICreateInput_request() {
    this->initializeModel();
}

OAICreateInput_request::~OAICreateInput_request() {}

void OAICreateInput_request::initializeModel() {

    m_input_name_isSet = false;
    m_input_name_isValid = false;

    m_input_description_isSet = false;
    m_input_description_isValid = false;

    m_input_definition_isSet = false;
    m_input_definition_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateInput_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInput_request::fromJsonObject(QJsonObject json) {

    m_input_name_isValid = ::OpenAPI::fromJsonValue(m_input_name, json[QString("inputName")]);
    m_input_name_isSet = !json[QString("inputName")].isNull() && m_input_name_isValid;

    m_input_description_isValid = ::OpenAPI::fromJsonValue(m_input_description, json[QString("inputDescription")]);
    m_input_description_isSet = !json[QString("inputDescription")].isNull() && m_input_description_isValid;

    m_input_definition_isValid = ::OpenAPI::fromJsonValue(m_input_definition, json[QString("inputDefinition")]);
    m_input_definition_isSet = !json[QString("inputDefinition")].isNull() && m_input_definition_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateInput_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInput_request::asJsonObject() const {
    QJsonObject obj;
    if (m_input_name_isSet) {
        obj.insert(QString("inputName"), ::OpenAPI::toJsonValue(m_input_name));
    }
    if (m_input_description_isSet) {
        obj.insert(QString("inputDescription"), ::OpenAPI::toJsonValue(m_input_description));
    }
    if (m_input_definition.isSet()) {
        obj.insert(QString("inputDefinition"), ::OpenAPI::toJsonValue(m_input_definition));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateInput_request::getInputName() const {
    return m_input_name;
}
void OAICreateInput_request::setInputName(const QString &input_name) {
    m_input_name = input_name;
    m_input_name_isSet = true;
}

bool OAICreateInput_request::is_input_name_Set() const{
    return m_input_name_isSet;
}

bool OAICreateInput_request::is_input_name_Valid() const{
    return m_input_name_isValid;
}

QString OAICreateInput_request::getInputDescription() const {
    return m_input_description;
}
void OAICreateInput_request::setInputDescription(const QString &input_description) {
    m_input_description = input_description;
    m_input_description_isSet = true;
}

bool OAICreateInput_request::is_input_description_Set() const{
    return m_input_description_isSet;
}

bool OAICreateInput_request::is_input_description_Valid() const{
    return m_input_description_isValid;
}

OAICreateInput_request_inputDefinition OAICreateInput_request::getInputDefinition() const {
    return m_input_definition;
}
void OAICreateInput_request::setInputDefinition(const OAICreateInput_request_inputDefinition &input_definition) {
    m_input_definition = input_definition;
    m_input_definition_isSet = true;
}

bool OAICreateInput_request::is_input_definition_Set() const{
    return m_input_definition_isSet;
}

bool OAICreateInput_request::is_input_definition_Valid() const{
    return m_input_definition_isValid;
}

QList<OAITag> OAICreateInput_request::getTags() const {
    return m_tags;
}
void OAICreateInput_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateInput_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateInput_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateInput_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInput_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_name_isValid && m_input_definition_isValid && true;
}

} // namespace OpenAPI
