/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationTargetActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationTargetActions::OAINotificationTargetActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationTargetActions::OAINotificationTargetActions() {
    this->initializeModel();
}

OAINotificationTargetActions::~OAINotificationTargetActions() {}

void OAINotificationTargetActions::initializeModel() {

    m_lambda_action_isSet = false;
    m_lambda_action_isValid = false;
}

void OAINotificationTargetActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationTargetActions::fromJsonObject(QJsonObject json) {

    m_lambda_action_isValid = ::OpenAPI::fromJsonValue(m_lambda_action, json[QString("lambdaAction")]);
    m_lambda_action_isSet = !json[QString("lambdaAction")].isNull() && m_lambda_action_isValid;
}

QString OAINotificationTargetActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationTargetActions::asJsonObject() const {
    QJsonObject obj;
    if (m_lambda_action.isSet()) {
        obj.insert(QString("lambdaAction"), ::OpenAPI::toJsonValue(m_lambda_action));
    }
    return obj;
}

OAILambdaAction OAINotificationTargetActions::getLambdaAction() const {
    return m_lambda_action;
}
void OAINotificationTargetActions::setLambdaAction(const OAILambdaAction &lambda_action) {
    m_lambda_action = lambda_action;
    m_lambda_action_isSet = true;
}

bool OAINotificationTargetActions::is_lambda_action_Set() const{
    return m_lambda_action_isSet;
}

bool OAINotificationTargetActions::is_lambda_action_Valid() const{
    return m_lambda_action_isValid;
}

bool OAINotificationTargetActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lambda_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationTargetActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
