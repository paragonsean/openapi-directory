/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDetectorModelRequest_detectorModelDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDetectorModelRequest_detectorModelDefinition::OAICreateDetectorModelRequest_detectorModelDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDetectorModelRequest_detectorModelDefinition::OAICreateDetectorModelRequest_detectorModelDefinition() {
    this->initializeModel();
}

OAICreateDetectorModelRequest_detectorModelDefinition::~OAICreateDetectorModelRequest_detectorModelDefinition() {}

void OAICreateDetectorModelRequest_detectorModelDefinition::initializeModel() {

    m_states_isSet = false;
    m_states_isValid = false;

    m_initial_state_name_isSet = false;
    m_initial_state_name_isValid = false;
}

void OAICreateDetectorModelRequest_detectorModelDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDetectorModelRequest_detectorModelDefinition::fromJsonObject(QJsonObject json) {

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;

    m_initial_state_name_isValid = ::OpenAPI::fromJsonValue(m_initial_state_name, json[QString("initialStateName")]);
    m_initial_state_name_isSet = !json[QString("initialStateName")].isNull() && m_initial_state_name_isValid;
}

QString OAICreateDetectorModelRequest_detectorModelDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDetectorModelRequest_detectorModelDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_states.isSet()) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    if (m_initial_state_name_isSet) {
        obj.insert(QString("initialStateName"), ::OpenAPI::toJsonValue(m_initial_state_name));
    }
    return obj;
}

QList OAICreateDetectorModelRequest_detectorModelDefinition::getStates() const {
    return m_states;
}
void OAICreateDetectorModelRequest_detectorModelDefinition::setStates(const QList &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAICreateDetectorModelRequest_detectorModelDefinition::is_states_Set() const{
    return m_states_isSet;
}

bool OAICreateDetectorModelRequest_detectorModelDefinition::is_states_Valid() const{
    return m_states_isValid;
}

QString OAICreateDetectorModelRequest_detectorModelDefinition::getInitialStateName() const {
    return m_initial_state_name;
}
void OAICreateDetectorModelRequest_detectorModelDefinition::setInitialStateName(const QString &initial_state_name) {
    m_initial_state_name = initial_state_name;
    m_initial_state_name_isSet = true;
}

bool OAICreateDetectorModelRequest_detectorModelDefinition::is_initial_state_name_Set() const{
    return m_initial_state_name_isSet;
}

bool OAICreateDetectorModelRequest_detectorModelDefinition::is_initial_state_name_Valid() const{
    return m_initial_state_name_isValid;
}

bool OAICreateDetectorModelRequest_detectorModelDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDetectorModelRequest_detectorModelDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_states_isValid && m_initial_state_name_isValid && true;
}

} // namespace OpenAPI
