/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDetectorModelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDetectorModelResponse::OAIUpdateDetectorModelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDetectorModelResponse::OAIUpdateDetectorModelResponse() {
    this->initializeModel();
}

OAIUpdateDetectorModelResponse::~OAIUpdateDetectorModelResponse() {}

void OAIUpdateDetectorModelResponse::initializeModel() {

    m_detector_model_configuration_isSet = false;
    m_detector_model_configuration_isValid = false;
}

void OAIUpdateDetectorModelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDetectorModelResponse::fromJsonObject(QJsonObject json) {

    m_detector_model_configuration_isValid = ::OpenAPI::fromJsonValue(m_detector_model_configuration, json[QString("detectorModelConfiguration")]);
    m_detector_model_configuration_isSet = !json[QString("detectorModelConfiguration")].isNull() && m_detector_model_configuration_isValid;
}

QString OAIUpdateDetectorModelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDetectorModelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_configuration.isSet()) {
        obj.insert(QString("detectorModelConfiguration"), ::OpenAPI::toJsonValue(m_detector_model_configuration));
    }
    return obj;
}

OAICreateDetectorModelResponse_detectorModelConfiguration OAIUpdateDetectorModelResponse::getDetectorModelConfiguration() const {
    return m_detector_model_configuration;
}
void OAIUpdateDetectorModelResponse::setDetectorModelConfiguration(const OAICreateDetectorModelResponse_detectorModelConfiguration &detector_model_configuration) {
    m_detector_model_configuration = detector_model_configuration;
    m_detector_model_configuration_isSet = true;
}

bool OAIUpdateDetectorModelResponse::is_detector_model_configuration_Set() const{
    return m_detector_model_configuration_isSet;
}

bool OAIUpdateDetectorModelResponse::is_detector_model_configuration_Valid() const{
    return m_detector_model_configuration_isValid;
}

bool OAIUpdateDetectorModelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDetectorModelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
