/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnExitLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnExitLifecycle::OAIOnExitLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnExitLifecycle::OAIOnExitLifecycle() {
    this->initializeModel();
}

OAIOnExitLifecycle::~OAIOnExitLifecycle() {}

void OAIOnExitLifecycle::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIOnExitLifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnExitLifecycle::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;
}

QString OAIOnExitLifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnExitLifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

QList OAIOnExitLifecycle::getEvents() const {
    return m_events;
}
void OAIOnExitLifecycle::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIOnExitLifecycle::is_events_Set() const{
    return m_events_isSet;
}

bool OAIOnExitLifecycle::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIOnExitLifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnExitLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
