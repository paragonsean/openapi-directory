/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISMSConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISMSConfiguration::OAISMSConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISMSConfiguration::OAISMSConfiguration() {
    this->initializeModel();
}

OAISMSConfiguration::~OAISMSConfiguration() {}

void OAISMSConfiguration::initializeModel() {

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_additional_message_isSet = false;
    m_additional_message_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;
}

void OAISMSConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISMSConfiguration::fromJsonObject(QJsonObject json) {

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("senderId")]);
    m_sender_id_isSet = !json[QString("senderId")].isNull() && m_sender_id_isValid;

    m_additional_message_isValid = ::OpenAPI::fromJsonValue(m_additional_message, json[QString("additionalMessage")]);
    m_additional_message_isSet = !json[QString("additionalMessage")].isNull() && m_additional_message_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;
}

QString OAISMSConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISMSConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_sender_id_isSet) {
        obj.insert(QString("senderId"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_additional_message_isSet) {
        obj.insert(QString("additionalMessage"), ::OpenAPI::toJsonValue(m_additional_message));
    }
    if (m_recipients.isSet()) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    return obj;
}

QString OAISMSConfiguration::getSenderId() const {
    return m_sender_id;
}
void OAISMSConfiguration::setSenderId(const QString &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAISMSConfiguration::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAISMSConfiguration::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

QString OAISMSConfiguration::getAdditionalMessage() const {
    return m_additional_message;
}
void OAISMSConfiguration::setAdditionalMessage(const QString &additional_message) {
    m_additional_message = additional_message;
    m_additional_message_isSet = true;
}

bool OAISMSConfiguration::is_additional_message_Set() const{
    return m_additional_message_isSet;
}

bool OAISMSConfiguration::is_additional_message_Valid() const{
    return m_additional_message_isValid;
}

QList OAISMSConfiguration::getRecipients() const {
    return m_recipients;
}
void OAISMSConfiguration::setRecipients(const QList &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAISMSConfiguration::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAISMSConfiguration::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAISMSConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISMSConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recipients_isValid && true;
}

} // namespace OpenAPI
