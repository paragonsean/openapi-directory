/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleRule::OAISimpleRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleRule::OAISimpleRule() {
    this->initializeModel();
}

OAISimpleRule::~OAISimpleRule() {}

void OAISimpleRule::initializeModel() {

    m_input_property_isSet = false;
    m_input_property_isValid = false;

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAISimpleRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleRule::fromJsonObject(QJsonObject json) {

    m_input_property_isValid = ::OpenAPI::fromJsonValue(m_input_property, json[QString("inputProperty")]);
    m_input_property_isSet = !json[QString("inputProperty")].isNull() && m_input_property_isValid;

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("comparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("comparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAISimpleRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleRule::asJsonObject() const {
    QJsonObject obj;
    if (m_input_property_isSet) {
        obj.insert(QString("inputProperty"), ::OpenAPI::toJsonValue(m_input_property));
    }
    if (m_comparison_operator.isSet()) {
        obj.insert(QString("comparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

QString OAISimpleRule::getInputProperty() const {
    return m_input_property;
}
void OAISimpleRule::setInputProperty(const QString &input_property) {
    m_input_property = input_property;
    m_input_property_isSet = true;
}

bool OAISimpleRule::is_input_property_Set() const{
    return m_input_property_isSet;
}

bool OAISimpleRule::is_input_property_Valid() const{
    return m_input_property_isValid;
}

OAIComparisonOperator OAISimpleRule::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAISimpleRule::setComparisonOperator(const OAIComparisonOperator &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAISimpleRule::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAISimpleRule::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

QString OAISimpleRule::getThreshold() const {
    return m_threshold;
}
void OAISimpleRule::setThreshold(const QString &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAISimpleRule::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAISimpleRule::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAISimpleRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_property_isValid && m_comparison_operator_isValid && m_threshold_isValid && true;
}

} // namespace OpenAPI
