/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssetPropertyValue.h
 *
 * &lt;p&gt;A structure that contains value information. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html\&quot;&gt;AssetPropertyValue&lt;/a&gt; in the &lt;i&gt;AWS IoT SiteWise API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;AssetPropertyValue&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;quality&lt;/code&gt; parameter can be &lt;code&gt;&#39;GOOD&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;quality&lt;/code&gt; parameter can be &lt;code&gt;$input.TemperatureInput.sensorData.quality&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIAssetPropertyValue_H
#define OAIAssetPropertyValue_H

#include <QJsonObject>

#include "OAIAssetPropertyValue_timestamp.h"
#include "OAIAssetPropertyValue_value.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssetPropertyValue_value;
class OAIAssetPropertyValue_timestamp;

class OAIAssetPropertyValue : public OAIObject {
public:
    OAIAssetPropertyValue();
    OAIAssetPropertyValue(QString json);
    ~OAIAssetPropertyValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAssetPropertyValue_value getValue() const;
    void setValue(const OAIAssetPropertyValue_value &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    OAIAssetPropertyValue_timestamp getTimestamp() const;
    void setTimestamp(const OAIAssetPropertyValue_timestamp &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getQuality() const;
    void setQuality(const QString &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAssetPropertyValue_value m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    OAIAssetPropertyValue_timestamp m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssetPropertyValue)

#endif // OAIAssetPropertyValue_H
