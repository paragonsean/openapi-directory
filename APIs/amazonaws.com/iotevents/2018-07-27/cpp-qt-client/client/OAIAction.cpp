/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction::OAIAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction::OAIAction() {
    this->initializeModel();
}

OAIAction::~OAIAction() {}

void OAIAction::initializeModel() {

    m_set_variable_isSet = false;
    m_set_variable_isValid = false;

    m_sns_isSet = false;
    m_sns_isValid = false;

    m_iot_topic_publish_isSet = false;
    m_iot_topic_publish_isValid = false;

    m_set_timer_isSet = false;
    m_set_timer_isValid = false;

    m_clear_timer_isSet = false;
    m_clear_timer_isValid = false;

    m_reset_timer_isSet = false;
    m_reset_timer_isValid = false;

    m_lambda_isSet = false;
    m_lambda_isValid = false;

    m_iot_events_isSet = false;
    m_iot_events_isValid = false;

    m_sqs_isSet = false;
    m_sqs_isValid = false;

    m_firehose_isSet = false;
    m_firehose_isValid = false;

    m_dynamo_db_isSet = false;
    m_dynamo_db_isValid = false;

    m_dynamo_dbv2_isSet = false;
    m_dynamo_dbv2_isValid = false;

    m_iot_site_wise_isSet = false;
    m_iot_site_wise_isValid = false;
}

void OAIAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction::fromJsonObject(QJsonObject json) {

    m_set_variable_isValid = ::OpenAPI::fromJsonValue(m_set_variable, json[QString("setVariable")]);
    m_set_variable_isSet = !json[QString("setVariable")].isNull() && m_set_variable_isValid;

    m_sns_isValid = ::OpenAPI::fromJsonValue(m_sns, json[QString("sns")]);
    m_sns_isSet = !json[QString("sns")].isNull() && m_sns_isValid;

    m_iot_topic_publish_isValid = ::OpenAPI::fromJsonValue(m_iot_topic_publish, json[QString("iotTopicPublish")]);
    m_iot_topic_publish_isSet = !json[QString("iotTopicPublish")].isNull() && m_iot_topic_publish_isValid;

    m_set_timer_isValid = ::OpenAPI::fromJsonValue(m_set_timer, json[QString("setTimer")]);
    m_set_timer_isSet = !json[QString("setTimer")].isNull() && m_set_timer_isValid;

    m_clear_timer_isValid = ::OpenAPI::fromJsonValue(m_clear_timer, json[QString("clearTimer")]);
    m_clear_timer_isSet = !json[QString("clearTimer")].isNull() && m_clear_timer_isValid;

    m_reset_timer_isValid = ::OpenAPI::fromJsonValue(m_reset_timer, json[QString("resetTimer")]);
    m_reset_timer_isSet = !json[QString("resetTimer")].isNull() && m_reset_timer_isValid;

    m_lambda_isValid = ::OpenAPI::fromJsonValue(m_lambda, json[QString("lambda")]);
    m_lambda_isSet = !json[QString("lambda")].isNull() && m_lambda_isValid;

    m_iot_events_isValid = ::OpenAPI::fromJsonValue(m_iot_events, json[QString("iotEvents")]);
    m_iot_events_isSet = !json[QString("iotEvents")].isNull() && m_iot_events_isValid;

    m_sqs_isValid = ::OpenAPI::fromJsonValue(m_sqs, json[QString("sqs")]);
    m_sqs_isSet = !json[QString("sqs")].isNull() && m_sqs_isValid;

    m_firehose_isValid = ::OpenAPI::fromJsonValue(m_firehose, json[QString("firehose")]);
    m_firehose_isSet = !json[QString("firehose")].isNull() && m_firehose_isValid;

    m_dynamo_db_isValid = ::OpenAPI::fromJsonValue(m_dynamo_db, json[QString("dynamoDB")]);
    m_dynamo_db_isSet = !json[QString("dynamoDB")].isNull() && m_dynamo_db_isValid;

    m_dynamo_dbv2_isValid = ::OpenAPI::fromJsonValue(m_dynamo_dbv2, json[QString("dynamoDBv2")]);
    m_dynamo_dbv2_isSet = !json[QString("dynamoDBv2")].isNull() && m_dynamo_dbv2_isValid;

    m_iot_site_wise_isValid = ::OpenAPI::fromJsonValue(m_iot_site_wise, json[QString("iotSiteWise")]);
    m_iot_site_wise_isSet = !json[QString("iotSiteWise")].isNull() && m_iot_site_wise_isValid;
}

QString OAIAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction::asJsonObject() const {
    QJsonObject obj;
    if (m_set_variable.isSet()) {
        obj.insert(QString("setVariable"), ::OpenAPI::toJsonValue(m_set_variable));
    }
    if (m_sns.isSet()) {
        obj.insert(QString("sns"), ::OpenAPI::toJsonValue(m_sns));
    }
    if (m_iot_topic_publish.isSet()) {
        obj.insert(QString("iotTopicPublish"), ::OpenAPI::toJsonValue(m_iot_topic_publish));
    }
    if (m_set_timer.isSet()) {
        obj.insert(QString("setTimer"), ::OpenAPI::toJsonValue(m_set_timer));
    }
    if (m_clear_timer.isSet()) {
        obj.insert(QString("clearTimer"), ::OpenAPI::toJsonValue(m_clear_timer));
    }
    if (m_reset_timer.isSet()) {
        obj.insert(QString("resetTimer"), ::OpenAPI::toJsonValue(m_reset_timer));
    }
    if (m_lambda.isSet()) {
        obj.insert(QString("lambda"), ::OpenAPI::toJsonValue(m_lambda));
    }
    if (m_iot_events.isSet()) {
        obj.insert(QString("iotEvents"), ::OpenAPI::toJsonValue(m_iot_events));
    }
    if (m_sqs.isSet()) {
        obj.insert(QString("sqs"), ::OpenAPI::toJsonValue(m_sqs));
    }
    if (m_firehose.isSet()) {
        obj.insert(QString("firehose"), ::OpenAPI::toJsonValue(m_firehose));
    }
    if (m_dynamo_db.isSet()) {
        obj.insert(QString("dynamoDB"), ::OpenAPI::toJsonValue(m_dynamo_db));
    }
    if (m_dynamo_dbv2.isSet()) {
        obj.insert(QString("dynamoDBv2"), ::OpenAPI::toJsonValue(m_dynamo_dbv2));
    }
    if (m_iot_site_wise.isSet()) {
        obj.insert(QString("iotSiteWise"), ::OpenAPI::toJsonValue(m_iot_site_wise));
    }
    return obj;
}

OAIAction_setVariable OAIAction::getSetVariable() const {
    return m_set_variable;
}
void OAIAction::setSetVariable(const OAIAction_setVariable &set_variable) {
    m_set_variable = set_variable;
    m_set_variable_isSet = true;
}

bool OAIAction::is_set_variable_Set() const{
    return m_set_variable_isSet;
}

bool OAIAction::is_set_variable_Valid() const{
    return m_set_variable_isValid;
}

OAIAction_sns OAIAction::getSns() const {
    return m_sns;
}
void OAIAction::setSns(const OAIAction_sns &sns) {
    m_sns = sns;
    m_sns_isSet = true;
}

bool OAIAction::is_sns_Set() const{
    return m_sns_isSet;
}

bool OAIAction::is_sns_Valid() const{
    return m_sns_isValid;
}

OAIAction_iotTopicPublish OAIAction::getIotTopicPublish() const {
    return m_iot_topic_publish;
}
void OAIAction::setIotTopicPublish(const OAIAction_iotTopicPublish &iot_topic_publish) {
    m_iot_topic_publish = iot_topic_publish;
    m_iot_topic_publish_isSet = true;
}

bool OAIAction::is_iot_topic_publish_Set() const{
    return m_iot_topic_publish_isSet;
}

bool OAIAction::is_iot_topic_publish_Valid() const{
    return m_iot_topic_publish_isValid;
}

OAIAction_setTimer OAIAction::getSetTimer() const {
    return m_set_timer;
}
void OAIAction::setSetTimer(const OAIAction_setTimer &set_timer) {
    m_set_timer = set_timer;
    m_set_timer_isSet = true;
}

bool OAIAction::is_set_timer_Set() const{
    return m_set_timer_isSet;
}

bool OAIAction::is_set_timer_Valid() const{
    return m_set_timer_isValid;
}

OAIAction_clearTimer OAIAction::getClearTimer() const {
    return m_clear_timer;
}
void OAIAction::setClearTimer(const OAIAction_clearTimer &clear_timer) {
    m_clear_timer = clear_timer;
    m_clear_timer_isSet = true;
}

bool OAIAction::is_clear_timer_Set() const{
    return m_clear_timer_isSet;
}

bool OAIAction::is_clear_timer_Valid() const{
    return m_clear_timer_isValid;
}

OAIAction_resetTimer OAIAction::getResetTimer() const {
    return m_reset_timer;
}
void OAIAction::setResetTimer(const OAIAction_resetTimer &reset_timer) {
    m_reset_timer = reset_timer;
    m_reset_timer_isSet = true;
}

bool OAIAction::is_reset_timer_Set() const{
    return m_reset_timer_isSet;
}

bool OAIAction::is_reset_timer_Valid() const{
    return m_reset_timer_isValid;
}

OAIAction_lambda OAIAction::getLambda() const {
    return m_lambda;
}
void OAIAction::setLambda(const OAIAction_lambda &lambda) {
    m_lambda = lambda;
    m_lambda_isSet = true;
}

bool OAIAction::is_lambda_Set() const{
    return m_lambda_isSet;
}

bool OAIAction::is_lambda_Valid() const{
    return m_lambda_isValid;
}

OAIAction_iotEvents OAIAction::getIotEvents() const {
    return m_iot_events;
}
void OAIAction::setIotEvents(const OAIAction_iotEvents &iot_events) {
    m_iot_events = iot_events;
    m_iot_events_isSet = true;
}

bool OAIAction::is_iot_events_Set() const{
    return m_iot_events_isSet;
}

bool OAIAction::is_iot_events_Valid() const{
    return m_iot_events_isValid;
}

OAIAction_sqs OAIAction::getSqs() const {
    return m_sqs;
}
void OAIAction::setSqs(const OAIAction_sqs &sqs) {
    m_sqs = sqs;
    m_sqs_isSet = true;
}

bool OAIAction::is_sqs_Set() const{
    return m_sqs_isSet;
}

bool OAIAction::is_sqs_Valid() const{
    return m_sqs_isValid;
}

OAIAction_firehose OAIAction::getFirehose() const {
    return m_firehose;
}
void OAIAction::setFirehose(const OAIAction_firehose &firehose) {
    m_firehose = firehose;
    m_firehose_isSet = true;
}

bool OAIAction::is_firehose_Set() const{
    return m_firehose_isSet;
}

bool OAIAction::is_firehose_Valid() const{
    return m_firehose_isValid;
}

OAIAction_dynamoDB OAIAction::getDynamoDb() const {
    return m_dynamo_db;
}
void OAIAction::setDynamoDb(const OAIAction_dynamoDB &dynamo_db) {
    m_dynamo_db = dynamo_db;
    m_dynamo_db_isSet = true;
}

bool OAIAction::is_dynamo_db_Set() const{
    return m_dynamo_db_isSet;
}

bool OAIAction::is_dynamo_db_Valid() const{
    return m_dynamo_db_isValid;
}

OAIAction_dynamoDBv2 OAIAction::getDynamoDbv2() const {
    return m_dynamo_dbv2;
}
void OAIAction::setDynamoDbv2(const OAIAction_dynamoDBv2 &dynamo_dbv2) {
    m_dynamo_dbv2 = dynamo_dbv2;
    m_dynamo_dbv2_isSet = true;
}

bool OAIAction::is_dynamo_dbv2_Set() const{
    return m_dynamo_dbv2_isSet;
}

bool OAIAction::is_dynamo_dbv2_Valid() const{
    return m_dynamo_dbv2_isValid;
}

OAIAction_iotSiteWise OAIAction::getIotSiteWise() const {
    return m_iot_site_wise;
}
void OAIAction::setIotSiteWise(const OAIAction_iotSiteWise &iot_site_wise) {
    m_iot_site_wise = iot_site_wise;
    m_iot_site_wise_isSet = true;
}

bool OAIAction::is_iot_site_wise_Set() const{
    return m_iot_site_wise_isSet;
}

bool OAIAction::is_iot_site_wise_Valid() const{
    return m_iot_site_wise_isValid;
}

bool OAIAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_set_variable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_topic_publish.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_timer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_timer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_timer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firehose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_db.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_dbv2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_site_wise.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
