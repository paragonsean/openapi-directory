/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingOptions::OAILoggingOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingOptions::OAILoggingOptions() {
    this->initializeModel();
}

OAILoggingOptions::~OAILoggingOptions() {}

void OAILoggingOptions::initializeModel() {

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_detector_debug_options_isSet = false;
    m_detector_debug_options_isValid = false;
}

void OAILoggingOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoggingOptions::fromJsonObject(QJsonObject json) {

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_detector_debug_options_isValid = ::OpenAPI::fromJsonValue(m_detector_debug_options, json[QString("detectorDebugOptions")]);
    m_detector_debug_options_isSet = !json[QString("detectorDebugOptions")].isNull() && m_detector_debug_options_isValid;
}

QString OAILoggingOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoggingOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_detector_debug_options.isSet()) {
        obj.insert(QString("detectorDebugOptions"), ::OpenAPI::toJsonValue(m_detector_debug_options));
    }
    return obj;
}

QString OAILoggingOptions::getRoleArn() const {
    return m_role_arn;
}
void OAILoggingOptions::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAILoggingOptions::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAILoggingOptions::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAILoggingLevel OAILoggingOptions::getLevel() const {
    return m_level;
}
void OAILoggingOptions::setLevel(const OAILoggingLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAILoggingOptions::is_level_Set() const{
    return m_level_isSet;
}

bool OAILoggingOptions::is_level_Valid() const{
    return m_level_isValid;
}

bool OAILoggingOptions::getEnabled() const {
    return m_enabled;
}
void OAILoggingOptions::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAILoggingOptions::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAILoggingOptions::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList OAILoggingOptions::getDetectorDebugOptions() const {
    return m_detector_debug_options;
}
void OAILoggingOptions::setDetectorDebugOptions(const QList &detector_debug_options) {
    m_detector_debug_options = detector_debug_options;
    m_detector_debug_options_isSet = true;
}

bool OAILoggingOptions::is_detector_debug_options_Set() const{
    return m_detector_debug_options_isSet;
}

bool OAILoggingOptions::is_detector_debug_options_Valid() const{
    return m_detector_debug_options_isValid;
}

bool OAILoggingOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_debug_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoggingOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_level_isValid && m_enabled_isValid && true;
}

} // namespace OpenAPI
