/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutLoggingOptions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutLoggingOptions_request::OAIPutLoggingOptions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutLoggingOptions_request::OAIPutLoggingOptions_request() {
    this->initializeModel();
}

OAIPutLoggingOptions_request::~OAIPutLoggingOptions_request() {}

void OAIPutLoggingOptions_request::initializeModel() {

    m_logging_options_isSet = false;
    m_logging_options_isValid = false;
}

void OAIPutLoggingOptions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutLoggingOptions_request::fromJsonObject(QJsonObject json) {

    m_logging_options_isValid = ::OpenAPI::fromJsonValue(m_logging_options, json[QString("loggingOptions")]);
    m_logging_options_isSet = !json[QString("loggingOptions")].isNull() && m_logging_options_isValid;
}

QString OAIPutLoggingOptions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutLoggingOptions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_logging_options.isSet()) {
        obj.insert(QString("loggingOptions"), ::OpenAPI::toJsonValue(m_logging_options));
    }
    return obj;
}

OAIPutLoggingOptions_request_loggingOptions OAIPutLoggingOptions_request::getLoggingOptions() const {
    return m_logging_options;
}
void OAIPutLoggingOptions_request::setLoggingOptions(const OAIPutLoggingOptions_request_loggingOptions &logging_options) {
    m_logging_options = logging_options;
    m_logging_options_isSet = true;
}

bool OAIPutLoggingOptions_request::is_logging_options_Set() const{
    return m_logging_options_isSet;
}

bool OAIPutLoggingOptions_request::is_logging_options_Valid() const{
    return m_logging_options_isValid;
}

bool OAIPutLoggingOptions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutLoggingOptions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logging_options_isValid && true;
}

} // namespace OpenAPI
