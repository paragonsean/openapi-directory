/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInputRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInputRequest::OAIUpdateInputRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInputRequest::OAIUpdateInputRequest() {
    this->initializeModel();
}

OAIUpdateInputRequest::~OAIUpdateInputRequest() {}

void OAIUpdateInputRequest::initializeModel() {

    m_input_description_isSet = false;
    m_input_description_isValid = false;

    m_input_definition_isSet = false;
    m_input_definition_isValid = false;
}

void OAIUpdateInputRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInputRequest::fromJsonObject(QJsonObject json) {

    m_input_description_isValid = ::OpenAPI::fromJsonValue(m_input_description, json[QString("inputDescription")]);
    m_input_description_isSet = !json[QString("inputDescription")].isNull() && m_input_description_isValid;

    m_input_definition_isValid = ::OpenAPI::fromJsonValue(m_input_definition, json[QString("inputDefinition")]);
    m_input_definition_isSet = !json[QString("inputDefinition")].isNull() && m_input_definition_isValid;
}

QString OAIUpdateInputRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInputRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_input_description_isSet) {
        obj.insert(QString("inputDescription"), ::OpenAPI::toJsonValue(m_input_description));
    }
    if (m_input_definition.isSet()) {
        obj.insert(QString("inputDefinition"), ::OpenAPI::toJsonValue(m_input_definition));
    }
    return obj;
}

QString OAIUpdateInputRequest::getInputDescription() const {
    return m_input_description;
}
void OAIUpdateInputRequest::setInputDescription(const QString &input_description) {
    m_input_description = input_description;
    m_input_description_isSet = true;
}

bool OAIUpdateInputRequest::is_input_description_Set() const{
    return m_input_description_isSet;
}

bool OAIUpdateInputRequest::is_input_description_Valid() const{
    return m_input_description_isValid;
}

OAICreateInputRequest_inputDefinition OAIUpdateInputRequest::getInputDefinition() const {
    return m_input_definition;
}
void OAIUpdateInputRequest::setInputDefinition(const OAICreateInputRequest_inputDefinition &input_definition) {
    m_input_definition = input_definition;
    m_input_definition_isSet = true;
}

bool OAIUpdateInputRequest::is_input_definition_Set() const{
    return m_input_definition_isSet;
}

bool OAIUpdateInputRequest::is_input_definition_Valid() const{
    return m_input_definition_isValid;
}

bool OAIUpdateInputRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInputRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_definition_isValid && true;
}

} // namespace OpenAPI
