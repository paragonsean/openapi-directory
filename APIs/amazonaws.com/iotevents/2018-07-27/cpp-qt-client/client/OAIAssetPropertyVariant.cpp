/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetPropertyVariant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetPropertyVariant::OAIAssetPropertyVariant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetPropertyVariant::OAIAssetPropertyVariant() {
    this->initializeModel();
}

OAIAssetPropertyVariant::~OAIAssetPropertyVariant() {}

void OAIAssetPropertyVariant::initializeModel() {

    m_string_value_isSet = false;
    m_string_value_isValid = false;

    m_integer_value_isSet = false;
    m_integer_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_boolean_value_isSet = false;
    m_boolean_value_isValid = false;
}

void OAIAssetPropertyVariant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetPropertyVariant::fromJsonObject(QJsonObject json) {

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;

    m_integer_value_isValid = ::OpenAPI::fromJsonValue(m_integer_value, json[QString("integerValue")]);
    m_integer_value_isSet = !json[QString("integerValue")].isNull() && m_integer_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_boolean_value_isValid = ::OpenAPI::fromJsonValue(m_boolean_value, json[QString("booleanValue")]);
    m_boolean_value_isSet = !json[QString("booleanValue")].isNull() && m_boolean_value_isValid;
}

QString OAIAssetPropertyVariant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetPropertyVariant::asJsonObject() const {
    QJsonObject obj;
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    if (m_integer_value_isSet) {
        obj.insert(QString("integerValue"), ::OpenAPI::toJsonValue(m_integer_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_boolean_value_isSet) {
        obj.insert(QString("booleanValue"), ::OpenAPI::toJsonValue(m_boolean_value));
    }
    return obj;
}

QString OAIAssetPropertyVariant::getStringValue() const {
    return m_string_value;
}
void OAIAssetPropertyVariant::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIAssetPropertyVariant::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIAssetPropertyVariant::is_string_value_Valid() const{
    return m_string_value_isValid;
}

QString OAIAssetPropertyVariant::getIntegerValue() const {
    return m_integer_value;
}
void OAIAssetPropertyVariant::setIntegerValue(const QString &integer_value) {
    m_integer_value = integer_value;
    m_integer_value_isSet = true;
}

bool OAIAssetPropertyVariant::is_integer_value_Set() const{
    return m_integer_value_isSet;
}

bool OAIAssetPropertyVariant::is_integer_value_Valid() const{
    return m_integer_value_isValid;
}

QString OAIAssetPropertyVariant::getDoubleValue() const {
    return m_double_value;
}
void OAIAssetPropertyVariant::setDoubleValue(const QString &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIAssetPropertyVariant::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIAssetPropertyVariant::is_double_value_Valid() const{
    return m_double_value_isValid;
}

QString OAIAssetPropertyVariant::getBooleanValue() const {
    return m_boolean_value;
}
void OAIAssetPropertyVariant::setBooleanValue(const QString &boolean_value) {
    m_boolean_value = boolean_value;
    m_boolean_value_isSet = true;
}

bool OAIAssetPropertyVariant::is_boolean_value_Set() const{
    return m_boolean_value_isSet;
}

bool OAIAssetPropertyVariant::is_boolean_value_Valid() const{
    return m_boolean_value_isValid;
}

bool OAIAssetPropertyVariant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boolean_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetPropertyVariant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
