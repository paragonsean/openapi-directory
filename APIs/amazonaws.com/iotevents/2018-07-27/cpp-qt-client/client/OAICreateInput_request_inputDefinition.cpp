/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInput_request_inputDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInput_request_inputDefinition::OAICreateInput_request_inputDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInput_request_inputDefinition::OAICreateInput_request_inputDefinition() {
    this->initializeModel();
}

OAICreateInput_request_inputDefinition::~OAICreateInput_request_inputDefinition() {}

void OAICreateInput_request_inputDefinition::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAICreateInput_request_inputDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInput_request_inputDefinition::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAICreateInput_request_inputDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInput_request_inputDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

QList OAICreateInput_request_inputDefinition::getAttributes() const {
    return m_attributes;
}
void OAICreateInput_request_inputDefinition::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICreateInput_request_inputDefinition::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICreateInput_request_inputDefinition::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAICreateInput_request_inputDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInput_request_inputDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
