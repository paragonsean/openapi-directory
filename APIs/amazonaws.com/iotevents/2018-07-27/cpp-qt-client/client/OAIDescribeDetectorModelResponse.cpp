/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDetectorModelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDetectorModelResponse::OAIDescribeDetectorModelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDetectorModelResponse::OAIDescribeDetectorModelResponse() {
    this->initializeModel();
}

OAIDescribeDetectorModelResponse::~OAIDescribeDetectorModelResponse() {}

void OAIDescribeDetectorModelResponse::initializeModel() {

    m_detector_model_isSet = false;
    m_detector_model_isValid = false;
}

void OAIDescribeDetectorModelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDetectorModelResponse::fromJsonObject(QJsonObject json) {

    m_detector_model_isValid = ::OpenAPI::fromJsonValue(m_detector_model, json[QString("detectorModel")]);
    m_detector_model_isSet = !json[QString("detectorModel")].isNull() && m_detector_model_isValid;
}

QString OAIDescribeDetectorModelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDetectorModelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model.isSet()) {
        obj.insert(QString("detectorModel"), ::OpenAPI::toJsonValue(m_detector_model));
    }
    return obj;
}

OAIDescribeDetectorModelResponse_detectorModel OAIDescribeDetectorModelResponse::getDetectorModel() const {
    return m_detector_model;
}
void OAIDescribeDetectorModelResponse::setDetectorModel(const OAIDescribeDetectorModelResponse_detectorModel &detector_model) {
    m_detector_model = detector_model;
    m_detector_model_isSet = true;
}

bool OAIDescribeDetectorModelResponse::is_detector_model_Set() const{
    return m_detector_model_isSet;
}

bool OAIDescribeDetectorModelResponse::is_detector_model_Valid() const{
    return m_detector_model_isValid;
}

bool OAIDescribeDetectorModelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDetectorModelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
