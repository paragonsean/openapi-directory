/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotEventsAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotEventsAction::OAIIotEventsAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotEventsAction::OAIIotEventsAction() {
    this->initializeModel();
}

OAIIotEventsAction::~OAIIotEventsAction() {}

void OAIIotEventsAction::initializeModel() {

    m_input_name_isSet = false;
    m_input_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIIotEventsAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotEventsAction::fromJsonObject(QJsonObject json) {

    m_input_name_isValid = ::OpenAPI::fromJsonValue(m_input_name, json[QString("inputName")]);
    m_input_name_isSet = !json[QString("inputName")].isNull() && m_input_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIIotEventsAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotEventsAction::asJsonObject() const {
    QJsonObject obj;
    if (m_input_name_isSet) {
        obj.insert(QString("inputName"), ::OpenAPI::toJsonValue(m_input_name));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIIotEventsAction::getInputName() const {
    return m_input_name;
}
void OAIIotEventsAction::setInputName(const QString &input_name) {
    m_input_name = input_name;
    m_input_name_isSet = true;
}

bool OAIIotEventsAction::is_input_name_Set() const{
    return m_input_name_isSet;
}

bool OAIIotEventsAction::is_input_name_Valid() const{
    return m_input_name_isValid;
}

OAIIotEventsAction_payload OAIIotEventsAction::getPayload() const {
    return m_payload;
}
void OAIIotEventsAction::setPayload(const OAIIotEventsAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIIotEventsAction::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIIotEventsAction::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIIotEventsAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotEventsAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_name_isValid && true;
}

} // namespace OpenAPI
