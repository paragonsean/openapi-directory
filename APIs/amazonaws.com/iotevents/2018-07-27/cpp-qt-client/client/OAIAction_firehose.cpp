/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_firehose.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_firehose::OAIAction_firehose(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_firehose::OAIAction_firehose() {
    this->initializeModel();
}

OAIAction_firehose::~OAIAction_firehose() {}

void OAIAction_firehose::initializeModel() {

    m_delivery_stream_name_isSet = false;
    m_delivery_stream_name_isValid = false;

    m_separator_isSet = false;
    m_separator_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIAction_firehose::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_firehose::fromJsonObject(QJsonObject json) {

    m_delivery_stream_name_isValid = ::OpenAPI::fromJsonValue(m_delivery_stream_name, json[QString("deliveryStreamName")]);
    m_delivery_stream_name_isSet = !json[QString("deliveryStreamName")].isNull() && m_delivery_stream_name_isValid;

    m_separator_isValid = ::OpenAPI::fromJsonValue(m_separator, json[QString("separator")]);
    m_separator_isSet = !json[QString("separator")].isNull() && m_separator_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIAction_firehose::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_firehose::asJsonObject() const {
    QJsonObject obj;
    if (m_delivery_stream_name_isSet) {
        obj.insert(QString("deliveryStreamName"), ::OpenAPI::toJsonValue(m_delivery_stream_name));
    }
    if (m_separator_isSet) {
        obj.insert(QString("separator"), ::OpenAPI::toJsonValue(m_separator));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIAction_firehose::getDeliveryStreamName() const {
    return m_delivery_stream_name;
}
void OAIAction_firehose::setDeliveryStreamName(const QString &delivery_stream_name) {
    m_delivery_stream_name = delivery_stream_name;
    m_delivery_stream_name_isSet = true;
}

bool OAIAction_firehose::is_delivery_stream_name_Set() const{
    return m_delivery_stream_name_isSet;
}

bool OAIAction_firehose::is_delivery_stream_name_Valid() const{
    return m_delivery_stream_name_isValid;
}

QString OAIAction_firehose::getSeparator() const {
    return m_separator;
}
void OAIAction_firehose::setSeparator(const QString &separator) {
    m_separator = separator;
    m_separator_isSet = true;
}

bool OAIAction_firehose::is_separator_Set() const{
    return m_separator_isSet;
}

bool OAIAction_firehose::is_separator_Valid() const{
    return m_separator_isValid;
}

OAIFirehoseAction_payload OAIAction_firehose::getPayload() const {
    return m_payload;
}
void OAIAction_firehose::setPayload(const OAIFirehoseAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAction_firehose::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAction_firehose::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIAction_firehose::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivery_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_firehose::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_delivery_stream_name_isValid && true;
}

} // namespace OpenAPI
