/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotSiteWiseAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotSiteWiseAction::OAIIotSiteWiseAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotSiteWiseAction::OAIIotSiteWiseAction() {
    this->initializeModel();
}

OAIIotSiteWiseAction::~OAIIotSiteWiseAction() {}

void OAIIotSiteWiseAction::initializeModel() {

    m_entry_id_isSet = false;
    m_entry_id_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_property_id_isSet = false;
    m_property_id_isValid = false;

    m_property_alias_isSet = false;
    m_property_alias_isValid = false;

    m_property_value_isSet = false;
    m_property_value_isValid = false;
}

void OAIIotSiteWiseAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotSiteWiseAction::fromJsonObject(QJsonObject json) {

    m_entry_id_isValid = ::OpenAPI::fromJsonValue(m_entry_id, json[QString("entryId")]);
    m_entry_id_isSet = !json[QString("entryId")].isNull() && m_entry_id_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_property_id_isValid = ::OpenAPI::fromJsonValue(m_property_id, json[QString("propertyId")]);
    m_property_id_isSet = !json[QString("propertyId")].isNull() && m_property_id_isValid;

    m_property_alias_isValid = ::OpenAPI::fromJsonValue(m_property_alias, json[QString("propertyAlias")]);
    m_property_alias_isSet = !json[QString("propertyAlias")].isNull() && m_property_alias_isValid;

    m_property_value_isValid = ::OpenAPI::fromJsonValue(m_property_value, json[QString("propertyValue")]);
    m_property_value_isSet = !json[QString("propertyValue")].isNull() && m_property_value_isValid;
}

QString OAIIotSiteWiseAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotSiteWiseAction::asJsonObject() const {
    QJsonObject obj;
    if (m_entry_id_isSet) {
        obj.insert(QString("entryId"), ::OpenAPI::toJsonValue(m_entry_id));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_property_id_isSet) {
        obj.insert(QString("propertyId"), ::OpenAPI::toJsonValue(m_property_id));
    }
    if (m_property_alias_isSet) {
        obj.insert(QString("propertyAlias"), ::OpenAPI::toJsonValue(m_property_alias));
    }
    if (m_property_value.isSet()) {
        obj.insert(QString("propertyValue"), ::OpenAPI::toJsonValue(m_property_value));
    }
    return obj;
}

QString OAIIotSiteWiseAction::getEntryId() const {
    return m_entry_id;
}
void OAIIotSiteWiseAction::setEntryId(const QString &entry_id) {
    m_entry_id = entry_id;
    m_entry_id_isSet = true;
}

bool OAIIotSiteWiseAction::is_entry_id_Set() const{
    return m_entry_id_isSet;
}

bool OAIIotSiteWiseAction::is_entry_id_Valid() const{
    return m_entry_id_isValid;
}

QString OAIIotSiteWiseAction::getAssetId() const {
    return m_asset_id;
}
void OAIIotSiteWiseAction::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIIotSiteWiseAction::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIIotSiteWiseAction::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIIotSiteWiseAction::getPropertyId() const {
    return m_property_id;
}
void OAIIotSiteWiseAction::setPropertyId(const QString &property_id) {
    m_property_id = property_id;
    m_property_id_isSet = true;
}

bool OAIIotSiteWiseAction::is_property_id_Set() const{
    return m_property_id_isSet;
}

bool OAIIotSiteWiseAction::is_property_id_Valid() const{
    return m_property_id_isValid;
}

QString OAIIotSiteWiseAction::getPropertyAlias() const {
    return m_property_alias;
}
void OAIIotSiteWiseAction::setPropertyAlias(const QString &property_alias) {
    m_property_alias = property_alias;
    m_property_alias_isSet = true;
}

bool OAIIotSiteWiseAction::is_property_alias_Set() const{
    return m_property_alias_isSet;
}

bool OAIIotSiteWiseAction::is_property_alias_Valid() const{
    return m_property_alias_isValid;
}

OAIIotSiteWiseAction_propertyValue OAIIotSiteWiseAction::getPropertyValue() const {
    return m_property_value;
}
void OAIIotSiteWiseAction::setPropertyValue(const OAIIotSiteWiseAction_propertyValue &property_value) {
    m_property_value = property_value;
    m_property_value_isSet = true;
}

bool OAIIotSiteWiseAction::is_property_value_Set() const{
    return m_property_value_isSet;
}

bool OAIIotSiteWiseAction::is_property_value_Valid() const{
    return m_property_value_isValid;
}

bool OAIIotSiteWiseAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entry_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_value.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotSiteWiseAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
