/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSOIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSOIdentity::OAISSOIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSOIdentity::OAISSOIdentity() {
    this->initializeModel();
}

OAISSOIdentity::~OAISSOIdentity() {}

void OAISSOIdentity::initializeModel() {

    m_identity_store_id_isSet = false;
    m_identity_store_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISSOIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSOIdentity::fromJsonObject(QJsonObject json) {

    m_identity_store_id_isValid = ::OpenAPI::fromJsonValue(m_identity_store_id, json[QString("identityStoreId")]);
    m_identity_store_id_isSet = !json[QString("identityStoreId")].isNull() && m_identity_store_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAISSOIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSOIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_store_id_isSet) {
        obj.insert(QString("identityStoreId"), ::OpenAPI::toJsonValue(m_identity_store_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAISSOIdentity::getIdentityStoreId() const {
    return m_identity_store_id;
}
void OAISSOIdentity::setIdentityStoreId(const QString &identity_store_id) {
    m_identity_store_id = identity_store_id;
    m_identity_store_id_isSet = true;
}

bool OAISSOIdentity::is_identity_store_id_Set() const{
    return m_identity_store_id_isSet;
}

bool OAISSOIdentity::is_identity_store_id_Valid() const{
    return m_identity_store_id_isValid;
}

QString OAISSOIdentity::getUserId() const {
    return m_user_id;
}
void OAISSOIdentity::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISSOIdentity::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISSOIdentity::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISSOIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSOIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identity_store_id_isValid && true;
}

} // namespace OpenAPI
