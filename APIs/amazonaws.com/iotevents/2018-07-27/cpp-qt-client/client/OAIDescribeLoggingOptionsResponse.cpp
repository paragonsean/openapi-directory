/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeLoggingOptionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeLoggingOptionsResponse::OAIDescribeLoggingOptionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeLoggingOptionsResponse::OAIDescribeLoggingOptionsResponse() {
    this->initializeModel();
}

OAIDescribeLoggingOptionsResponse::~OAIDescribeLoggingOptionsResponse() {}

void OAIDescribeLoggingOptionsResponse::initializeModel() {

    m_logging_options_isSet = false;
    m_logging_options_isValid = false;
}

void OAIDescribeLoggingOptionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeLoggingOptionsResponse::fromJsonObject(QJsonObject json) {

    m_logging_options_isValid = ::OpenAPI::fromJsonValue(m_logging_options, json[QString("loggingOptions")]);
    m_logging_options_isSet = !json[QString("loggingOptions")].isNull() && m_logging_options_isValid;
}

QString OAIDescribeLoggingOptionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeLoggingOptionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_logging_options.isSet()) {
        obj.insert(QString("loggingOptions"), ::OpenAPI::toJsonValue(m_logging_options));
    }
    return obj;
}

OAIDescribeLoggingOptionsResponse_loggingOptions OAIDescribeLoggingOptionsResponse::getLoggingOptions() const {
    return m_logging_options;
}
void OAIDescribeLoggingOptionsResponse::setLoggingOptions(const OAIDescribeLoggingOptionsResponse_loggingOptions &logging_options) {
    m_logging_options = logging_options;
    m_logging_options_isSet = true;
}

bool OAIDescribeLoggingOptionsResponse::is_logging_options_Set() const{
    return m_logging_options_isSet;
}

bool OAIDescribeLoggingOptionsResponse::is_logging_options_Valid() const{
    return m_logging_options_isValid;
}

bool OAIDescribeLoggingOptionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logging_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeLoggingOptionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
