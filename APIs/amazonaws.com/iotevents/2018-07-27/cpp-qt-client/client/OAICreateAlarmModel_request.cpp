/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAlarmModel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAlarmModel_request::OAICreateAlarmModel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAlarmModel_request::OAICreateAlarmModel_request() {
    this->initializeModel();
}

OAICreateAlarmModel_request::~OAICreateAlarmModel_request() {}

void OAICreateAlarmModel_request::initializeModel() {

    m_alarm_model_name_isSet = false;
    m_alarm_model_name_isValid = false;

    m_alarm_model_description_isSet = false;
    m_alarm_model_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_alarm_rule_isSet = false;
    m_alarm_rule_isValid = false;

    m_alarm_notification_isSet = false;
    m_alarm_notification_isValid = false;

    m_alarm_event_actions_isSet = false;
    m_alarm_event_actions_isValid = false;

    m_alarm_capabilities_isSet = false;
    m_alarm_capabilities_isValid = false;
}

void OAICreateAlarmModel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAlarmModel_request::fromJsonObject(QJsonObject json) {

    m_alarm_model_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_name, json[QString("alarmModelName")]);
    m_alarm_model_name_isSet = !json[QString("alarmModelName")].isNull() && m_alarm_model_name_isValid;

    m_alarm_model_description_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_description, json[QString("alarmModelDescription")]);
    m_alarm_model_description_isSet = !json[QString("alarmModelDescription")].isNull() && m_alarm_model_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_alarm_rule_isValid = ::OpenAPI::fromJsonValue(m_alarm_rule, json[QString("alarmRule")]);
    m_alarm_rule_isSet = !json[QString("alarmRule")].isNull() && m_alarm_rule_isValid;

    m_alarm_notification_isValid = ::OpenAPI::fromJsonValue(m_alarm_notification, json[QString("alarmNotification")]);
    m_alarm_notification_isSet = !json[QString("alarmNotification")].isNull() && m_alarm_notification_isValid;

    m_alarm_event_actions_isValid = ::OpenAPI::fromJsonValue(m_alarm_event_actions, json[QString("alarmEventActions")]);
    m_alarm_event_actions_isSet = !json[QString("alarmEventActions")].isNull() && m_alarm_event_actions_isValid;

    m_alarm_capabilities_isValid = ::OpenAPI::fromJsonValue(m_alarm_capabilities, json[QString("alarmCapabilities")]);
    m_alarm_capabilities_isSet = !json[QString("alarmCapabilities")].isNull() && m_alarm_capabilities_isValid;
}

QString OAICreateAlarmModel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAlarmModel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_model_name_isSet) {
        obj.insert(QString("alarmModelName"), ::OpenAPI::toJsonValue(m_alarm_model_name));
    }
    if (m_alarm_model_description_isSet) {
        obj.insert(QString("alarmModelDescription"), ::OpenAPI::toJsonValue(m_alarm_model_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_alarm_rule.isSet()) {
        obj.insert(QString("alarmRule"), ::OpenAPI::toJsonValue(m_alarm_rule));
    }
    if (m_alarm_notification.isSet()) {
        obj.insert(QString("alarmNotification"), ::OpenAPI::toJsonValue(m_alarm_notification));
    }
    if (m_alarm_event_actions.isSet()) {
        obj.insert(QString("alarmEventActions"), ::OpenAPI::toJsonValue(m_alarm_event_actions));
    }
    if (m_alarm_capabilities.isSet()) {
        obj.insert(QString("alarmCapabilities"), ::OpenAPI::toJsonValue(m_alarm_capabilities));
    }
    return obj;
}

QString OAICreateAlarmModel_request::getAlarmModelName() const {
    return m_alarm_model_name;
}
void OAICreateAlarmModel_request::setAlarmModelName(const QString &alarm_model_name) {
    m_alarm_model_name = alarm_model_name;
    m_alarm_model_name_isSet = true;
}

bool OAICreateAlarmModel_request::is_alarm_model_name_Set() const{
    return m_alarm_model_name_isSet;
}

bool OAICreateAlarmModel_request::is_alarm_model_name_Valid() const{
    return m_alarm_model_name_isValid;
}

QString OAICreateAlarmModel_request::getAlarmModelDescription() const {
    return m_alarm_model_description;
}
void OAICreateAlarmModel_request::setAlarmModelDescription(const QString &alarm_model_description) {
    m_alarm_model_description = alarm_model_description;
    m_alarm_model_description_isSet = true;
}

bool OAICreateAlarmModel_request::is_alarm_model_description_Set() const{
    return m_alarm_model_description_isSet;
}

bool OAICreateAlarmModel_request::is_alarm_model_description_Valid() const{
    return m_alarm_model_description_isValid;
}

QString OAICreateAlarmModel_request::getRoleArn() const {
    return m_role_arn;
}
void OAICreateAlarmModel_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateAlarmModel_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateAlarmModel_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList<OAITag> OAICreateAlarmModel_request::getTags() const {
    return m_tags;
}
void OAICreateAlarmModel_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAlarmModel_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAlarmModel_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateAlarmModel_request::getKey() const {
    return m_key;
}
void OAICreateAlarmModel_request::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICreateAlarmModel_request::is_key_Set() const{
    return m_key_isSet;
}

bool OAICreateAlarmModel_request::is_key_Valid() const{
    return m_key_isValid;
}

qint32 OAICreateAlarmModel_request::getSeverity() const {
    return m_severity;
}
void OAICreateAlarmModel_request::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAICreateAlarmModel_request::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAICreateAlarmModel_request::is_severity_Valid() const{
    return m_severity_isValid;
}

OAICreateAlarmModel_request_alarmRule OAICreateAlarmModel_request::getAlarmRule() const {
    return m_alarm_rule;
}
void OAICreateAlarmModel_request::setAlarmRule(const OAICreateAlarmModel_request_alarmRule &alarm_rule) {
    m_alarm_rule = alarm_rule;
    m_alarm_rule_isSet = true;
}

bool OAICreateAlarmModel_request::is_alarm_rule_Set() const{
    return m_alarm_rule_isSet;
}

bool OAICreateAlarmModel_request::is_alarm_rule_Valid() const{
    return m_alarm_rule_isValid;
}

OAICreateAlarmModel_request_alarmNotification OAICreateAlarmModel_request::getAlarmNotification() const {
    return m_alarm_notification;
}
void OAICreateAlarmModel_request::setAlarmNotification(const OAICreateAlarmModel_request_alarmNotification &alarm_notification) {
    m_alarm_notification = alarm_notification;
    m_alarm_notification_isSet = true;
}

bool OAICreateAlarmModel_request::is_alarm_notification_Set() const{
    return m_alarm_notification_isSet;
}

bool OAICreateAlarmModel_request::is_alarm_notification_Valid() const{
    return m_alarm_notification_isValid;
}

OAICreateAlarmModel_request_alarmEventActions OAICreateAlarmModel_request::getAlarmEventActions() const {
    return m_alarm_event_actions;
}
void OAICreateAlarmModel_request::setAlarmEventActions(const OAICreateAlarmModel_request_alarmEventActions &alarm_event_actions) {
    m_alarm_event_actions = alarm_event_actions;
    m_alarm_event_actions_isSet = true;
}

bool OAICreateAlarmModel_request::is_alarm_event_actions_Set() const{
    return m_alarm_event_actions_isSet;
}

bool OAICreateAlarmModel_request::is_alarm_event_actions_Valid() const{
    return m_alarm_event_actions_isValid;
}

OAICreateAlarmModel_request_alarmCapabilities OAICreateAlarmModel_request::getAlarmCapabilities() const {
    return m_alarm_capabilities;
}
void OAICreateAlarmModel_request::setAlarmCapabilities(const OAICreateAlarmModel_request_alarmCapabilities &alarm_capabilities) {
    m_alarm_capabilities = alarm_capabilities;
    m_alarm_capabilities_isSet = true;
}

bool OAICreateAlarmModel_request::is_alarm_capabilities_Set() const{
    return m_alarm_capabilities_isSet;
}

bool OAICreateAlarmModel_request::is_alarm_capabilities_Valid() const{
    return m_alarm_capabilities_isValid;
}

bool OAICreateAlarmModel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_event_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAlarmModel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_alarm_model_name_isValid && m_role_arn_isValid && m_alarm_rule_isValid && true;
}

} // namespace OpenAPI
