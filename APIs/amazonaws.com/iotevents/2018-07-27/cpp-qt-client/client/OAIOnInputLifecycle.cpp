/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnInputLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnInputLifecycle::OAIOnInputLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnInputLifecycle::OAIOnInputLifecycle() {
    this->initializeModel();
}

OAIOnInputLifecycle::~OAIOnInputLifecycle() {}

void OAIOnInputLifecycle::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_transition_events_isSet = false;
    m_transition_events_isValid = false;
}

void OAIOnInputLifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnInputLifecycle::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_transition_events_isValid = ::OpenAPI::fromJsonValue(m_transition_events, json[QString("transitionEvents")]);
    m_transition_events_isSet = !json[QString("transitionEvents")].isNull() && m_transition_events_isValid;
}

QString OAIOnInputLifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnInputLifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_transition_events.isSet()) {
        obj.insert(QString("transitionEvents"), ::OpenAPI::toJsonValue(m_transition_events));
    }
    return obj;
}

QList OAIOnInputLifecycle::getEvents() const {
    return m_events;
}
void OAIOnInputLifecycle::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIOnInputLifecycle::is_events_Set() const{
    return m_events_isSet;
}

bool OAIOnInputLifecycle::is_events_Valid() const{
    return m_events_isValid;
}

QList OAIOnInputLifecycle::getTransitionEvents() const {
    return m_transition_events;
}
void OAIOnInputLifecycle::setTransitionEvents(const QList &transition_events) {
    m_transition_events = transition_events;
    m_transition_events_isSet = true;
}

bool OAIOnInputLifecycle::is_transition_events_Set() const{
    return m_transition_events_isSet;
}

bool OAIOnInputLifecycle::is_transition_events_Valid() const{
    return m_transition_events_isValid;
}

bool OAIOnInputLifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnInputLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
