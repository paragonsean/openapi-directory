/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInputResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInputResponse::OAIDescribeInputResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInputResponse::OAIDescribeInputResponse() {
    this->initializeModel();
}

OAIDescribeInputResponse::~OAIDescribeInputResponse() {}

void OAIDescribeInputResponse::initializeModel() {

    m_input_isSet = false;
    m_input_isValid = false;
}

void OAIDescribeInputResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInputResponse::fromJsonObject(QJsonObject json) {

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;
}

QString OAIDescribeInputResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInputResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    return obj;
}

OAIDescribeInputResponse_input OAIDescribeInputResponse::getInput() const {
    return m_input;
}
void OAIDescribeInputResponse::setInput(const OAIDescribeInputResponse_input &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIDescribeInputResponse::is_input_Set() const{
    return m_input_isSet;
}

bool OAIDescribeInputResponse::is_input_Valid() const{
    return m_input_isValid;
}

bool OAIDescribeInputResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInputResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
