/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqsAction_payload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqsAction_payload::OAISqsAction_payload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqsAction_payload::OAISqsAction_payload() {
    this->initializeModel();
}

OAISqsAction_payload::~OAISqsAction_payload() {}

void OAISqsAction_payload::initializeModel() {

    m_content_expression_isSet = false;
    m_content_expression_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISqsAction_payload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqsAction_payload::fromJsonObject(QJsonObject json) {

    m_content_expression_isValid = ::OpenAPI::fromJsonValue(m_content_expression, json[QString("contentExpression")]);
    m_content_expression_isSet = !json[QString("contentExpression")].isNull() && m_content_expression_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISqsAction_payload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqsAction_payload::asJsonObject() const {
    QJsonObject obj;
    if (m_content_expression_isSet) {
        obj.insert(QString("contentExpression"), ::OpenAPI::toJsonValue(m_content_expression));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISqsAction_payload::getContentExpression() const {
    return m_content_expression;
}
void OAISqsAction_payload::setContentExpression(const QString &content_expression) {
    m_content_expression = content_expression;
    m_content_expression_isSet = true;
}

bool OAISqsAction_payload::is_content_expression_Set() const{
    return m_content_expression_isSet;
}

bool OAISqsAction_payload::is_content_expression_Valid() const{
    return m_content_expression_isValid;
}

OAIPayloadType OAISqsAction_payload::getType() const {
    return m_type;
}
void OAISqsAction_payload::setType(const OAIPayloadType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISqsAction_payload::is_type_Set() const{
    return m_type_isSet;
}

bool OAISqsAction_payload::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISqsAction_payload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqsAction_payload::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_expression_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
