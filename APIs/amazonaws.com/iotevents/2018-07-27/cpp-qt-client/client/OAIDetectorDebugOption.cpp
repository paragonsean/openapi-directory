/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectorDebugOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectorDebugOption::OAIDetectorDebugOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectorDebugOption::OAIDetectorDebugOption() {
    this->initializeModel();
}

OAIDetectorDebugOption::~OAIDetectorDebugOption() {}

void OAIDetectorDebugOption::initializeModel() {

    m_detector_model_name_isSet = false;
    m_detector_model_name_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;
}

void OAIDetectorDebugOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectorDebugOption::fromJsonObject(QJsonObject json) {

    m_detector_model_name_isValid = ::OpenAPI::fromJsonValue(m_detector_model_name, json[QString("detectorModelName")]);
    m_detector_model_name_isSet = !json[QString("detectorModelName")].isNull() && m_detector_model_name_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;
}

QString OAIDetectorDebugOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectorDebugOption::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_name_isSet) {
        obj.insert(QString("detectorModelName"), ::OpenAPI::toJsonValue(m_detector_model_name));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    return obj;
}

QString OAIDetectorDebugOption::getDetectorModelName() const {
    return m_detector_model_name;
}
void OAIDetectorDebugOption::setDetectorModelName(const QString &detector_model_name) {
    m_detector_model_name = detector_model_name;
    m_detector_model_name_isSet = true;
}

bool OAIDetectorDebugOption::is_detector_model_name_Set() const{
    return m_detector_model_name_isSet;
}

bool OAIDetectorDebugOption::is_detector_model_name_Valid() const{
    return m_detector_model_name_isValid;
}

QString OAIDetectorDebugOption::getKeyValue() const {
    return m_key_value;
}
void OAIDetectorDebugOption::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIDetectorDebugOption::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIDetectorDebugOption::is_key_value_Valid() const{
    return m_key_value_isValid;
}

bool OAIDetectorDebugOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectorDebugOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detector_model_name_isValid && true;
}

} // namespace OpenAPI
