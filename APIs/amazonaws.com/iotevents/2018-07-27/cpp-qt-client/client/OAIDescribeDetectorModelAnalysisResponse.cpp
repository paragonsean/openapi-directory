/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDetectorModelAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDetectorModelAnalysisResponse::OAIDescribeDetectorModelAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDetectorModelAnalysisResponse::OAIDescribeDetectorModelAnalysisResponse() {
    this->initializeModel();
}

OAIDescribeDetectorModelAnalysisResponse::~OAIDescribeDetectorModelAnalysisResponse() {}

void OAIDescribeDetectorModelAnalysisResponse::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeDetectorModelAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDetectorModelAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDescribeDetectorModelAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDetectorModelAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAnalysisStatus OAIDescribeDetectorModelAnalysisResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDetectorModelAnalysisResponse::setStatus(const OAIAnalysisStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDetectorModelAnalysisResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDetectorModelAnalysisResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeDetectorModelAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDetectorModelAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
