/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResetTimerAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResetTimerAction::OAIResetTimerAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResetTimerAction::OAIResetTimerAction() {
    this->initializeModel();
}

OAIResetTimerAction::~OAIResetTimerAction() {}

void OAIResetTimerAction::initializeModel() {

    m_timer_name_isSet = false;
    m_timer_name_isValid = false;
}

void OAIResetTimerAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResetTimerAction::fromJsonObject(QJsonObject json) {

    m_timer_name_isValid = ::OpenAPI::fromJsonValue(m_timer_name, json[QString("timerName")]);
    m_timer_name_isSet = !json[QString("timerName")].isNull() && m_timer_name_isValid;
}

QString OAIResetTimerAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResetTimerAction::asJsonObject() const {
    QJsonObject obj;
    if (m_timer_name_isSet) {
        obj.insert(QString("timerName"), ::OpenAPI::toJsonValue(m_timer_name));
    }
    return obj;
}

QString OAIResetTimerAction::getTimerName() const {
    return m_timer_name;
}
void OAIResetTimerAction::setTimerName(const QString &timer_name) {
    m_timer_name = timer_name;
    m_timer_name_isSet = true;
}

bool OAIResetTimerAction::is_timer_name_Set() const{
    return m_timer_name_isSet;
}

bool OAIResetTimerAction::is_timer_name_Valid() const{
    return m_timer_name_isValid;
}

bool OAIResetTimerAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timer_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResetTimerAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timer_name_isValid && true;
}

} // namespace OpenAPI
