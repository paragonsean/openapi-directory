/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_sqs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_sqs::OAIAction_sqs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_sqs::OAIAction_sqs() {
    this->initializeModel();
}

OAIAction_sqs::~OAIAction_sqs() {}

void OAIAction_sqs::initializeModel() {

    m_queue_url_isSet = false;
    m_queue_url_isValid = false;

    m_use_base64_isSet = false;
    m_use_base64_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIAction_sqs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_sqs::fromJsonObject(QJsonObject json) {

    m_queue_url_isValid = ::OpenAPI::fromJsonValue(m_queue_url, json[QString("queueUrl")]);
    m_queue_url_isSet = !json[QString("queueUrl")].isNull() && m_queue_url_isValid;

    m_use_base64_isValid = ::OpenAPI::fromJsonValue(m_use_base64, json[QString("useBase64")]);
    m_use_base64_isSet = !json[QString("useBase64")].isNull() && m_use_base64_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIAction_sqs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_sqs::asJsonObject() const {
    QJsonObject obj;
    if (m_queue_url_isSet) {
        obj.insert(QString("queueUrl"), ::OpenAPI::toJsonValue(m_queue_url));
    }
    if (m_use_base64_isSet) {
        obj.insert(QString("useBase64"), ::OpenAPI::toJsonValue(m_use_base64));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIAction_sqs::getQueueUrl() const {
    return m_queue_url;
}
void OAIAction_sqs::setQueueUrl(const QString &queue_url) {
    m_queue_url = queue_url;
    m_queue_url_isSet = true;
}

bool OAIAction_sqs::is_queue_url_Set() const{
    return m_queue_url_isSet;
}

bool OAIAction_sqs::is_queue_url_Valid() const{
    return m_queue_url_isValid;
}

bool OAIAction_sqs::getUseBase64() const {
    return m_use_base64;
}
void OAIAction_sqs::setUseBase64(const bool &use_base64) {
    m_use_base64 = use_base64;
    m_use_base64_isSet = true;
}

bool OAIAction_sqs::is_use_base64_Set() const{
    return m_use_base64_isSet;
}

bool OAIAction_sqs::is_use_base64_Valid() const{
    return m_use_base64_isValid;
}

OAISqsAction_payload OAIAction_sqs::getPayload() const {
    return m_payload;
}
void OAIAction_sqs::setPayload(const OAISqsAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAction_sqs::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAction_sqs::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIAction_sqs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_queue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_sqs::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_queue_url_isValid && true;
}

} // namespace OpenAPI
