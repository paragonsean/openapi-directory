/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDetectorModel_request_detectorModelDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDetectorModel_request_detectorModelDefinition::OAICreateDetectorModel_request_detectorModelDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDetectorModel_request_detectorModelDefinition::OAICreateDetectorModel_request_detectorModelDefinition() {
    this->initializeModel();
}

OAICreateDetectorModel_request_detectorModelDefinition::~OAICreateDetectorModel_request_detectorModelDefinition() {}

void OAICreateDetectorModel_request_detectorModelDefinition::initializeModel() {

    m_states_isSet = false;
    m_states_isValid = false;

    m_initial_state_name_isSet = false;
    m_initial_state_name_isValid = false;
}

void OAICreateDetectorModel_request_detectorModelDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDetectorModel_request_detectorModelDefinition::fromJsonObject(QJsonObject json) {

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;

    m_initial_state_name_isValid = ::OpenAPI::fromJsonValue(m_initial_state_name, json[QString("initialStateName")]);
    m_initial_state_name_isSet = !json[QString("initialStateName")].isNull() && m_initial_state_name_isValid;
}

QString OAICreateDetectorModel_request_detectorModelDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDetectorModel_request_detectorModelDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_states.isSet()) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    if (m_initial_state_name_isSet) {
        obj.insert(QString("initialStateName"), ::OpenAPI::toJsonValue(m_initial_state_name));
    }
    return obj;
}

QList OAICreateDetectorModel_request_detectorModelDefinition::getStates() const {
    return m_states;
}
void OAICreateDetectorModel_request_detectorModelDefinition::setStates(const QList &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAICreateDetectorModel_request_detectorModelDefinition::is_states_Set() const{
    return m_states_isSet;
}

bool OAICreateDetectorModel_request_detectorModelDefinition::is_states_Valid() const{
    return m_states_isValid;
}

QString OAICreateDetectorModel_request_detectorModelDefinition::getInitialStateName() const {
    return m_initial_state_name;
}
void OAICreateDetectorModel_request_detectorModelDefinition::setInitialStateName(const QString &initial_state_name) {
    m_initial_state_name = initial_state_name;
    m_initial_state_name_isSet = true;
}

bool OAICreateDetectorModel_request_detectorModelDefinition::is_initial_state_name_Set() const{
    return m_initial_state_name_isSet;
}

bool OAICreateDetectorModel_request_detectorModelDefinition::is_initial_state_name_Valid() const{
    return m_initial_state_name_isValid;
}

bool OAICreateDetectorModel_request_detectorModelDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDetectorModel_request_detectorModelDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
