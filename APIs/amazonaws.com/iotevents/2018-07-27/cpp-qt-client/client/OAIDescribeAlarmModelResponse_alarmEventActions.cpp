/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlarmModelResponse_alarmEventActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlarmModelResponse_alarmEventActions::OAIDescribeAlarmModelResponse_alarmEventActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlarmModelResponse_alarmEventActions::OAIDescribeAlarmModelResponse_alarmEventActions() {
    this->initializeModel();
}

OAIDescribeAlarmModelResponse_alarmEventActions::~OAIDescribeAlarmModelResponse_alarmEventActions() {}

void OAIDescribeAlarmModelResponse_alarmEventActions::initializeModel() {

    m_alarm_actions_isSet = false;
    m_alarm_actions_isValid = false;
}

void OAIDescribeAlarmModelResponse_alarmEventActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlarmModelResponse_alarmEventActions::fromJsonObject(QJsonObject json) {

    m_alarm_actions_isValid = ::OpenAPI::fromJsonValue(m_alarm_actions, json[QString("alarmActions")]);
    m_alarm_actions_isSet = !json[QString("alarmActions")].isNull() && m_alarm_actions_isValid;
}

QString OAIDescribeAlarmModelResponse_alarmEventActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlarmModelResponse_alarmEventActions::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_actions.isSet()) {
        obj.insert(QString("alarmActions"), ::OpenAPI::toJsonValue(m_alarm_actions));
    }
    return obj;
}

QList OAIDescribeAlarmModelResponse_alarmEventActions::getAlarmActions() const {
    return m_alarm_actions;
}
void OAIDescribeAlarmModelResponse_alarmEventActions::setAlarmActions(const QList &alarm_actions) {
    m_alarm_actions = alarm_actions;
    m_alarm_actions_isSet = true;
}

bool OAIDescribeAlarmModelResponse_alarmEventActions::is_alarm_actions_Set() const{
    return m_alarm_actions_isSet;
}

bool OAIDescribeAlarmModelResponse_alarmEventActions::is_alarm_actions_Valid() const{
    return m_alarm_actions_isValid;
}

bool OAIDescribeAlarmModelResponse_alarmEventActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlarmModelResponse_alarmEventActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
