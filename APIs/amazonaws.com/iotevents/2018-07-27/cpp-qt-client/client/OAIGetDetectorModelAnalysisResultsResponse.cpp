/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDetectorModelAnalysisResultsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDetectorModelAnalysisResultsResponse::OAIGetDetectorModelAnalysisResultsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDetectorModelAnalysisResultsResponse::OAIGetDetectorModelAnalysisResultsResponse() {
    this->initializeModel();
}

OAIGetDetectorModelAnalysisResultsResponse::~OAIGetDetectorModelAnalysisResultsResponse() {}

void OAIGetDetectorModelAnalysisResultsResponse::initializeModel() {

    m_analysis_results_isSet = false;
    m_analysis_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetDetectorModelAnalysisResultsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDetectorModelAnalysisResultsResponse::fromJsonObject(QJsonObject json) {

    m_analysis_results_isValid = ::OpenAPI::fromJsonValue(m_analysis_results, json[QString("analysisResults")]);
    m_analysis_results_isSet = !json[QString("analysisResults")].isNull() && m_analysis_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetDetectorModelAnalysisResultsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDetectorModelAnalysisResultsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_results.isSet()) {
        obj.insert(QString("analysisResults"), ::OpenAPI::toJsonValue(m_analysis_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetDetectorModelAnalysisResultsResponse::getAnalysisResults() const {
    return m_analysis_results;
}
void OAIGetDetectorModelAnalysisResultsResponse::setAnalysisResults(const QList &analysis_results) {
    m_analysis_results = analysis_results;
    m_analysis_results_isSet = true;
}

bool OAIGetDetectorModelAnalysisResultsResponse::is_analysis_results_Set() const{
    return m_analysis_results_isSet;
}

bool OAIGetDetectorModelAnalysisResultsResponse::is_analysis_results_Valid() const{
    return m_analysis_results_isValid;
}

QString OAIGetDetectorModelAnalysisResultsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetDetectorModelAnalysisResultsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetDetectorModelAnalysisResultsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetDetectorModelAnalysisResultsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetDetectorModelAnalysisResultsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDetectorModelAnalysisResultsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
