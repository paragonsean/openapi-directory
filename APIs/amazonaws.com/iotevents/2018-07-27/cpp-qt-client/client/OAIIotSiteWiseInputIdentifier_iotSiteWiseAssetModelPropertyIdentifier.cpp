/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier() {
    this->initializeModel();
}

OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::~OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier() {}

void OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::initializeModel() {

    m_asset_model_id_isSet = false;
    m_asset_model_id_isValid = false;

    m_property_id_isSet = false;
    m_property_id_isValid = false;
}

void OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::fromJsonObject(QJsonObject json) {

    m_asset_model_id_isValid = ::OpenAPI::fromJsonValue(m_asset_model_id, json[QString("assetModelId")]);
    m_asset_model_id_isSet = !json[QString("assetModelId")].isNull() && m_asset_model_id_isValid;

    m_property_id_isValid = ::OpenAPI::fromJsonValue(m_property_id, json[QString("propertyId")]);
    m_property_id_isSet = !json[QString("propertyId")].isNull() && m_property_id_isValid;
}

QString OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_model_id_isSet) {
        obj.insert(QString("assetModelId"), ::OpenAPI::toJsonValue(m_asset_model_id));
    }
    if (m_property_id_isSet) {
        obj.insert(QString("propertyId"), ::OpenAPI::toJsonValue(m_property_id));
    }
    return obj;
}

QString OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::getAssetModelId() const {
    return m_asset_model_id;
}
void OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::setAssetModelId(const QString &asset_model_id) {
    m_asset_model_id = asset_model_id;
    m_asset_model_id_isSet = true;
}

bool OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::is_asset_model_id_Set() const{
    return m_asset_model_id_isSet;
}

bool OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::is_asset_model_id_Valid() const{
    return m_asset_model_id_isValid;
}

QString OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::getPropertyId() const {
    return m_property_id;
}
void OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::setPropertyId(const QString &property_id) {
    m_property_id = property_id;
    m_property_id_isSet = true;
}

bool OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::is_property_id_Set() const{
    return m_property_id_isSet;
}

bool OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::is_property_id_Valid() const{
    return m_property_id_isValid;
}

bool OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotSiteWiseInputIdentifier_iotSiteWiseAssetModelPropertyIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_model_id_isValid && m_property_id_isValid && true;
}

} // namespace OpenAPI
