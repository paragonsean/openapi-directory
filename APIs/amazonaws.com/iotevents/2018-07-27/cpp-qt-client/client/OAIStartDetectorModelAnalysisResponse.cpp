/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartDetectorModelAnalysisResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartDetectorModelAnalysisResponse::OAIStartDetectorModelAnalysisResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartDetectorModelAnalysisResponse::OAIStartDetectorModelAnalysisResponse() {
    this->initializeModel();
}

OAIStartDetectorModelAnalysisResponse::~OAIStartDetectorModelAnalysisResponse() {}

void OAIStartDetectorModelAnalysisResponse::initializeModel() {

    m_analysis_id_isSet = false;
    m_analysis_id_isValid = false;
}

void OAIStartDetectorModelAnalysisResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartDetectorModelAnalysisResponse::fromJsonObject(QJsonObject json) {

    m_analysis_id_isValid = ::OpenAPI::fromJsonValue(m_analysis_id, json[QString("analysisId")]);
    m_analysis_id_isSet = !json[QString("analysisId")].isNull() && m_analysis_id_isValid;
}

QString OAIStartDetectorModelAnalysisResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartDetectorModelAnalysisResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_id_isSet) {
        obj.insert(QString("analysisId"), ::OpenAPI::toJsonValue(m_analysis_id));
    }
    return obj;
}

QString OAIStartDetectorModelAnalysisResponse::getAnalysisId() const {
    return m_analysis_id;
}
void OAIStartDetectorModelAnalysisResponse::setAnalysisId(const QString &analysis_id) {
    m_analysis_id = analysis_id;
    m_analysis_id_isSet = true;
}

bool OAIStartDetectorModelAnalysisResponse::is_analysis_id_Set() const{
    return m_analysis_id_isSet;
}

bool OAIStartDetectorModelAnalysisResponse::is_analysis_id_Valid() const{
    return m_analysis_id_isValid;
}

bool OAIStartDetectorModelAnalysisResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartDetectorModelAnalysisResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
