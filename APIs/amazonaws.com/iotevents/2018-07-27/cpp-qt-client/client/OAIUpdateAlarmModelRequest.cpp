/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAlarmModelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAlarmModelRequest::OAIUpdateAlarmModelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAlarmModelRequest::OAIUpdateAlarmModelRequest() {
    this->initializeModel();
}

OAIUpdateAlarmModelRequest::~OAIUpdateAlarmModelRequest() {}

void OAIUpdateAlarmModelRequest::initializeModel() {

    m_alarm_model_description_isSet = false;
    m_alarm_model_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_alarm_rule_isSet = false;
    m_alarm_rule_isValid = false;

    m_alarm_notification_isSet = false;
    m_alarm_notification_isValid = false;

    m_alarm_event_actions_isSet = false;
    m_alarm_event_actions_isValid = false;

    m_alarm_capabilities_isSet = false;
    m_alarm_capabilities_isValid = false;
}

void OAIUpdateAlarmModelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAlarmModelRequest::fromJsonObject(QJsonObject json) {

    m_alarm_model_description_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_description, json[QString("alarmModelDescription")]);
    m_alarm_model_description_isSet = !json[QString("alarmModelDescription")].isNull() && m_alarm_model_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_alarm_rule_isValid = ::OpenAPI::fromJsonValue(m_alarm_rule, json[QString("alarmRule")]);
    m_alarm_rule_isSet = !json[QString("alarmRule")].isNull() && m_alarm_rule_isValid;

    m_alarm_notification_isValid = ::OpenAPI::fromJsonValue(m_alarm_notification, json[QString("alarmNotification")]);
    m_alarm_notification_isSet = !json[QString("alarmNotification")].isNull() && m_alarm_notification_isValid;

    m_alarm_event_actions_isValid = ::OpenAPI::fromJsonValue(m_alarm_event_actions, json[QString("alarmEventActions")]);
    m_alarm_event_actions_isSet = !json[QString("alarmEventActions")].isNull() && m_alarm_event_actions_isValid;

    m_alarm_capabilities_isValid = ::OpenAPI::fromJsonValue(m_alarm_capabilities, json[QString("alarmCapabilities")]);
    m_alarm_capabilities_isSet = !json[QString("alarmCapabilities")].isNull() && m_alarm_capabilities_isValid;
}

QString OAIUpdateAlarmModelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAlarmModelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_model_description_isSet) {
        obj.insert(QString("alarmModelDescription"), ::OpenAPI::toJsonValue(m_alarm_model_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_alarm_rule.isSet()) {
        obj.insert(QString("alarmRule"), ::OpenAPI::toJsonValue(m_alarm_rule));
    }
    if (m_alarm_notification.isSet()) {
        obj.insert(QString("alarmNotification"), ::OpenAPI::toJsonValue(m_alarm_notification));
    }
    if (m_alarm_event_actions.isSet()) {
        obj.insert(QString("alarmEventActions"), ::OpenAPI::toJsonValue(m_alarm_event_actions));
    }
    if (m_alarm_capabilities.isSet()) {
        obj.insert(QString("alarmCapabilities"), ::OpenAPI::toJsonValue(m_alarm_capabilities));
    }
    return obj;
}

QString OAIUpdateAlarmModelRequest::getAlarmModelDescription() const {
    return m_alarm_model_description;
}
void OAIUpdateAlarmModelRequest::setAlarmModelDescription(const QString &alarm_model_description) {
    m_alarm_model_description = alarm_model_description;
    m_alarm_model_description_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_alarm_model_description_Set() const{
    return m_alarm_model_description_isSet;
}

bool OAIUpdateAlarmModelRequest::is_alarm_model_description_Valid() const{
    return m_alarm_model_description_isValid;
}

QString OAIUpdateAlarmModelRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateAlarmModelRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateAlarmModelRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

qint32 OAIUpdateAlarmModelRequest::getSeverity() const {
    return m_severity;
}
void OAIUpdateAlarmModelRequest::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIUpdateAlarmModelRequest::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIDescribeAlarmModelResponse_alarmRule OAIUpdateAlarmModelRequest::getAlarmRule() const {
    return m_alarm_rule;
}
void OAIUpdateAlarmModelRequest::setAlarmRule(const OAIDescribeAlarmModelResponse_alarmRule &alarm_rule) {
    m_alarm_rule = alarm_rule;
    m_alarm_rule_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_alarm_rule_Set() const{
    return m_alarm_rule_isSet;
}

bool OAIUpdateAlarmModelRequest::is_alarm_rule_Valid() const{
    return m_alarm_rule_isValid;
}

OAIDescribeAlarmModelResponse_alarmNotification OAIUpdateAlarmModelRequest::getAlarmNotification() const {
    return m_alarm_notification;
}
void OAIUpdateAlarmModelRequest::setAlarmNotification(const OAIDescribeAlarmModelResponse_alarmNotification &alarm_notification) {
    m_alarm_notification = alarm_notification;
    m_alarm_notification_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_alarm_notification_Set() const{
    return m_alarm_notification_isSet;
}

bool OAIUpdateAlarmModelRequest::is_alarm_notification_Valid() const{
    return m_alarm_notification_isValid;
}

OAIDescribeAlarmModelResponse_alarmEventActions OAIUpdateAlarmModelRequest::getAlarmEventActions() const {
    return m_alarm_event_actions;
}
void OAIUpdateAlarmModelRequest::setAlarmEventActions(const OAIDescribeAlarmModelResponse_alarmEventActions &alarm_event_actions) {
    m_alarm_event_actions = alarm_event_actions;
    m_alarm_event_actions_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_alarm_event_actions_Set() const{
    return m_alarm_event_actions_isSet;
}

bool OAIUpdateAlarmModelRequest::is_alarm_event_actions_Valid() const{
    return m_alarm_event_actions_isValid;
}

OAIDescribeAlarmModelResponse_alarmCapabilities OAIUpdateAlarmModelRequest::getAlarmCapabilities() const {
    return m_alarm_capabilities;
}
void OAIUpdateAlarmModelRequest::setAlarmCapabilities(const OAIDescribeAlarmModelResponse_alarmCapabilities &alarm_capabilities) {
    m_alarm_capabilities = alarm_capabilities;
    m_alarm_capabilities_isSet = true;
}

bool OAIUpdateAlarmModelRequest::is_alarm_capabilities_Set() const{
    return m_alarm_capabilities_isSet;
}

bool OAIUpdateAlarmModelRequest::is_alarm_capabilities_Valid() const{
    return m_alarm_capabilities_isValid;
}

bool OAIUpdateAlarmModelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_event_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAlarmModelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_role_arn_isValid && m_alarm_rule_isValid && true;
}

} // namespace OpenAPI
