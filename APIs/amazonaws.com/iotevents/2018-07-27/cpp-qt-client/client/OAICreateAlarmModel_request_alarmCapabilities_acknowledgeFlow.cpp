/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow() {
    this->initializeModel();
}

OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::~OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow() {}

void OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;
}

QString OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

bool OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::getEnabled() const {
    return m_enabled;
}
void OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAlarmModel_request_alarmCapabilities_acknowledgeFlow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
