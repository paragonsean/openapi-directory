/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_dynamoDBv2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_dynamoDBv2::OAIAction_dynamoDBv2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_dynamoDBv2::OAIAction_dynamoDBv2() {
    this->initializeModel();
}

OAIAction_dynamoDBv2::~OAIAction_dynamoDBv2() {}

void OAIAction_dynamoDBv2::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIAction_dynamoDBv2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_dynamoDBv2::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIAction_dynamoDBv2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_dynamoDBv2::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIAction_dynamoDBv2::getTableName() const {
    return m_table_name;
}
void OAIAction_dynamoDBv2::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIAction_dynamoDBv2::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIAction_dynamoDBv2::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIPayload OAIAction_dynamoDBv2::getPayload() const {
    return m_payload;
}
void OAIAction_dynamoDBv2::setPayload(const OAIPayload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAction_dynamoDBv2::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAction_dynamoDBv2::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIAction_dynamoDBv2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_dynamoDBv2::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_name_isValid && true;
}

} // namespace OpenAPI
