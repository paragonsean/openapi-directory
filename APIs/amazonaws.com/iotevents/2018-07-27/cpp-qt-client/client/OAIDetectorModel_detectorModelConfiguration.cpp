/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectorModel_detectorModelConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectorModel_detectorModelConfiguration::OAIDetectorModel_detectorModelConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectorModel_detectorModelConfiguration::OAIDetectorModel_detectorModelConfiguration() {
    this->initializeModel();
}

OAIDetectorModel_detectorModelConfiguration::~OAIDetectorModel_detectorModelConfiguration() {}

void OAIDetectorModel_detectorModelConfiguration::initializeModel() {

    m_detector_model_name_isSet = false;
    m_detector_model_name_isValid = false;

    m_detector_model_version_isSet = false;
    m_detector_model_version_isValid = false;

    m_detector_model_description_isSet = false;
    m_detector_model_description_isValid = false;

    m_detector_model_arn_isSet = false;
    m_detector_model_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_evaluation_method_isSet = false;
    m_evaluation_method_isValid = false;
}

void OAIDetectorModel_detectorModelConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectorModel_detectorModelConfiguration::fromJsonObject(QJsonObject json) {

    m_detector_model_name_isValid = ::OpenAPI::fromJsonValue(m_detector_model_name, json[QString("detectorModelName")]);
    m_detector_model_name_isSet = !json[QString("detectorModelName")].isNull() && m_detector_model_name_isValid;

    m_detector_model_version_isValid = ::OpenAPI::fromJsonValue(m_detector_model_version, json[QString("detectorModelVersion")]);
    m_detector_model_version_isSet = !json[QString("detectorModelVersion")].isNull() && m_detector_model_version_isValid;

    m_detector_model_description_isValid = ::OpenAPI::fromJsonValue(m_detector_model_description, json[QString("detectorModelDescription")]);
    m_detector_model_description_isSet = !json[QString("detectorModelDescription")].isNull() && m_detector_model_description_isValid;

    m_detector_model_arn_isValid = ::OpenAPI::fromJsonValue(m_detector_model_arn, json[QString("detectorModelArn")]);
    m_detector_model_arn_isSet = !json[QString("detectorModelArn")].isNull() && m_detector_model_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_evaluation_method_isValid = ::OpenAPI::fromJsonValue(m_evaluation_method, json[QString("evaluationMethod")]);
    m_evaluation_method_isSet = !json[QString("evaluationMethod")].isNull() && m_evaluation_method_isValid;
}

QString OAIDetectorModel_detectorModelConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectorModel_detectorModelConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_name_isSet) {
        obj.insert(QString("detectorModelName"), ::OpenAPI::toJsonValue(m_detector_model_name));
    }
    if (m_detector_model_version_isSet) {
        obj.insert(QString("detectorModelVersion"), ::OpenAPI::toJsonValue(m_detector_model_version));
    }
    if (m_detector_model_description_isSet) {
        obj.insert(QString("detectorModelDescription"), ::OpenAPI::toJsonValue(m_detector_model_description));
    }
    if (m_detector_model_arn_isSet) {
        obj.insert(QString("detectorModelArn"), ::OpenAPI::toJsonValue(m_detector_model_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_evaluation_method.isSet()) {
        obj.insert(QString("evaluationMethod"), ::OpenAPI::toJsonValue(m_evaluation_method));
    }
    return obj;
}

QString OAIDetectorModel_detectorModelConfiguration::getDetectorModelName() const {
    return m_detector_model_name;
}
void OAIDetectorModel_detectorModelConfiguration::setDetectorModelName(const QString &detector_model_name) {
    m_detector_model_name = detector_model_name;
    m_detector_model_name_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_name_Set() const{
    return m_detector_model_name_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_name_Valid() const{
    return m_detector_model_name_isValid;
}

QString OAIDetectorModel_detectorModelConfiguration::getDetectorModelVersion() const {
    return m_detector_model_version;
}
void OAIDetectorModel_detectorModelConfiguration::setDetectorModelVersion(const QString &detector_model_version) {
    m_detector_model_version = detector_model_version;
    m_detector_model_version_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_version_Set() const{
    return m_detector_model_version_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_version_Valid() const{
    return m_detector_model_version_isValid;
}

QString OAIDetectorModel_detectorModelConfiguration::getDetectorModelDescription() const {
    return m_detector_model_description;
}
void OAIDetectorModel_detectorModelConfiguration::setDetectorModelDescription(const QString &detector_model_description) {
    m_detector_model_description = detector_model_description;
    m_detector_model_description_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_description_Set() const{
    return m_detector_model_description_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_description_Valid() const{
    return m_detector_model_description_isValid;
}

QString OAIDetectorModel_detectorModelConfiguration::getDetectorModelArn() const {
    return m_detector_model_arn;
}
void OAIDetectorModel_detectorModelConfiguration::setDetectorModelArn(const QString &detector_model_arn) {
    m_detector_model_arn = detector_model_arn;
    m_detector_model_arn_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_arn_Set() const{
    return m_detector_model_arn_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_detector_model_arn_Valid() const{
    return m_detector_model_arn_isValid;
}

QString OAIDetectorModel_detectorModelConfiguration::getRoleArn() const {
    return m_role_arn;
}
void OAIDetectorModel_detectorModelConfiguration::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QDateTime OAIDetectorModel_detectorModelConfiguration::getCreationTime() const {
    return m_creation_time;
}
void OAIDetectorModel_detectorModelConfiguration::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDetectorModel_detectorModelConfiguration::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIDetectorModel_detectorModelConfiguration::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

OAIDetectorModelVersionStatus OAIDetectorModel_detectorModelConfiguration::getStatus() const {
    return m_status;
}
void OAIDetectorModel_detectorModelConfiguration::setStatus(const OAIDetectorModelVersionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDetectorModel_detectorModelConfiguration::getKey() const {
    return m_key;
}
void OAIDetectorModel_detectorModelConfiguration::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_key_Set() const{
    return m_key_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_key_Valid() const{
    return m_key_isValid;
}

OAIEvaluationMethod OAIDetectorModel_detectorModelConfiguration::getEvaluationMethod() const {
    return m_evaluation_method;
}
void OAIDetectorModel_detectorModelConfiguration::setEvaluationMethod(const OAIEvaluationMethod &evaluation_method) {
    m_evaluation_method = evaluation_method;
    m_evaluation_method_isSet = true;
}

bool OAIDetectorModel_detectorModelConfiguration::is_evaluation_method_Set() const{
    return m_evaluation_method_isSet;
}

bool OAIDetectorModel_detectorModelConfiguration::is_evaluation_method_Valid() const{
    return m_evaluation_method_isValid;
}

bool OAIDetectorModel_detectorModelConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectorModel_detectorModelConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
