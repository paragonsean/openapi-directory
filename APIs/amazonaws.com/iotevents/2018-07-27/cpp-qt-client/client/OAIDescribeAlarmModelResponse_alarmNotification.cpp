/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlarmModelResponse_alarmNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlarmModelResponse_alarmNotification::OAIDescribeAlarmModelResponse_alarmNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlarmModelResponse_alarmNotification::OAIDescribeAlarmModelResponse_alarmNotification() {
    this->initializeModel();
}

OAIDescribeAlarmModelResponse_alarmNotification::~OAIDescribeAlarmModelResponse_alarmNotification() {}

void OAIDescribeAlarmModelResponse_alarmNotification::initializeModel() {

    m_notification_actions_isSet = false;
    m_notification_actions_isValid = false;
}

void OAIDescribeAlarmModelResponse_alarmNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlarmModelResponse_alarmNotification::fromJsonObject(QJsonObject json) {

    m_notification_actions_isValid = ::OpenAPI::fromJsonValue(m_notification_actions, json[QString("notificationActions")]);
    m_notification_actions_isSet = !json[QString("notificationActions")].isNull() && m_notification_actions_isValid;
}

QString OAIDescribeAlarmModelResponse_alarmNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlarmModelResponse_alarmNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_notification_actions.isSet()) {
        obj.insert(QString("notificationActions"), ::OpenAPI::toJsonValue(m_notification_actions));
    }
    return obj;
}

QList OAIDescribeAlarmModelResponse_alarmNotification::getNotificationActions() const {
    return m_notification_actions;
}
void OAIDescribeAlarmModelResponse_alarmNotification::setNotificationActions(const QList &notification_actions) {
    m_notification_actions = notification_actions;
    m_notification_actions_isSet = true;
}

bool OAIDescribeAlarmModelResponse_alarmNotification::is_notification_actions_Set() const{
    return m_notification_actions_isSet;
}

bool OAIDescribeAlarmModelResponse_alarmNotification::is_notification_actions_Valid() const{
    return m_notification_actions_isValid;
}

bool OAIDescribeAlarmModelResponse_alarmNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notification_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlarmModelResponse_alarmNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
