/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotSiteWiseAction_propertyValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotSiteWiseAction_propertyValue::OAIIotSiteWiseAction_propertyValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotSiteWiseAction_propertyValue::OAIIotSiteWiseAction_propertyValue() {
    this->initializeModel();
}

OAIIotSiteWiseAction_propertyValue::~OAIIotSiteWiseAction_propertyValue() {}

void OAIIotSiteWiseAction_propertyValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;
}

void OAIIotSiteWiseAction_propertyValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotSiteWiseAction_propertyValue::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;
}

QString OAIIotSiteWiseAction_propertyValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotSiteWiseAction_propertyValue::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    return obj;
}

OAIAssetPropertyValue_value OAIIotSiteWiseAction_propertyValue::getValue() const {
    return m_value;
}
void OAIIotSiteWiseAction_propertyValue::setValue(const OAIAssetPropertyValue_value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIIotSiteWiseAction_propertyValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIIotSiteWiseAction_propertyValue::is_value_Valid() const{
    return m_value_isValid;
}

OAIAssetPropertyValue_timestamp OAIIotSiteWiseAction_propertyValue::getTimestamp() const {
    return m_timestamp;
}
void OAIIotSiteWiseAction_propertyValue::setTimestamp(const OAIAssetPropertyValue_timestamp &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIIotSiteWiseAction_propertyValue::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIIotSiteWiseAction_propertyValue::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIIotSiteWiseAction_propertyValue::getQuality() const {
    return m_quality;
}
void OAIIotSiteWiseAction_propertyValue::setQuality(const QString &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIIotSiteWiseAction_propertyValue::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIIotSiteWiseAction_propertyValue::is_quality_Valid() const{
    return m_quality_isValid;
}

bool OAIIotSiteWiseAction_propertyValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotSiteWiseAction_propertyValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
