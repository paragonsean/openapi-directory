/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISNSTopicPublishAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISNSTopicPublishAction::OAISNSTopicPublishAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISNSTopicPublishAction::OAISNSTopicPublishAction() {
    this->initializeModel();
}

OAISNSTopicPublishAction::~OAISNSTopicPublishAction() {}

void OAISNSTopicPublishAction::initializeModel() {

    m_target_arn_isSet = false;
    m_target_arn_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAISNSTopicPublishAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISNSTopicPublishAction::fromJsonObject(QJsonObject json) {

    m_target_arn_isValid = ::OpenAPI::fromJsonValue(m_target_arn, json[QString("targetArn")]);
    m_target_arn_isSet = !json[QString("targetArn")].isNull() && m_target_arn_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAISNSTopicPublishAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISNSTopicPublishAction::asJsonObject() const {
    QJsonObject obj;
    if (m_target_arn_isSet) {
        obj.insert(QString("targetArn"), ::OpenAPI::toJsonValue(m_target_arn));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAISNSTopicPublishAction::getTargetArn() const {
    return m_target_arn;
}
void OAISNSTopicPublishAction::setTargetArn(const QString &target_arn) {
    m_target_arn = target_arn;
    m_target_arn_isSet = true;
}

bool OAISNSTopicPublishAction::is_target_arn_Set() const{
    return m_target_arn_isSet;
}

bool OAISNSTopicPublishAction::is_target_arn_Valid() const{
    return m_target_arn_isValid;
}

OAISNSTopicPublishAction_payload OAISNSTopicPublishAction::getPayload() const {
    return m_payload;
}
void OAISNSTopicPublishAction::setPayload(const OAISNSTopicPublishAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAISNSTopicPublishAction::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAISNSTopicPublishAction::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAISNSTopicPublishAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISNSTopicPublishAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_arn_isValid && true;
}

} // namespace OpenAPI
