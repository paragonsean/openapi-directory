/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInputRoutingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInputRoutingsRequest::OAIListInputRoutingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInputRoutingsRequest::OAIListInputRoutingsRequest() {
    this->initializeModel();
}

OAIListInputRoutingsRequest::~OAIListInputRoutingsRequest() {}

void OAIListInputRoutingsRequest::initializeModel() {

    m_input_identifier_isSet = false;
    m_input_identifier_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListInputRoutingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInputRoutingsRequest::fromJsonObject(QJsonObject json) {

    m_input_identifier_isValid = ::OpenAPI::fromJsonValue(m_input_identifier, json[QString("inputIdentifier")]);
    m_input_identifier_isSet = !json[QString("inputIdentifier")].isNull() && m_input_identifier_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListInputRoutingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInputRoutingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_input_identifier.isSet()) {
        obj.insert(QString("inputIdentifier"), ::OpenAPI::toJsonValue(m_input_identifier));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIListInputRoutingsRequest_inputIdentifier OAIListInputRoutingsRequest::getInputIdentifier() const {
    return m_input_identifier;
}
void OAIListInputRoutingsRequest::setInputIdentifier(const OAIListInputRoutingsRequest_inputIdentifier &input_identifier) {
    m_input_identifier = input_identifier;
    m_input_identifier_isSet = true;
}

bool OAIListInputRoutingsRequest::is_input_identifier_Set() const{
    return m_input_identifier_isSet;
}

bool OAIListInputRoutingsRequest::is_input_identifier_Valid() const{
    return m_input_identifier_isValid;
}

qint32 OAIListInputRoutingsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListInputRoutingsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListInputRoutingsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListInputRoutingsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListInputRoutingsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListInputRoutingsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInputRoutingsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInputRoutingsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListInputRoutingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInputRoutingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_identifier_isValid && true;
}

} // namespace OpenAPI
