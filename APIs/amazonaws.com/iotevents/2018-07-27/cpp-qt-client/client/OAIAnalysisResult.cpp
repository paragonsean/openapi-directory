/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisResult::OAIAnalysisResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisResult::OAIAnalysisResult() {
    this->initializeModel();
}

OAIAnalysisResult::~OAIAnalysisResult() {}

void OAIAnalysisResult::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;
}

void OAIAnalysisResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisResult::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;
}

QString OAIAnalysisResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisResult::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_level.isSet()) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_locations.isSet()) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    return obj;
}

QString OAIAnalysisResult::getType() const {
    return m_type;
}
void OAIAnalysisResult::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAnalysisResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAnalysisResult::is_type_Valid() const{
    return m_type_isValid;
}

OAIAnalysisResultLevel OAIAnalysisResult::getLevel() const {
    return m_level;
}
void OAIAnalysisResult::setLevel(const OAIAnalysisResultLevel &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIAnalysisResult::is_level_Set() const{
    return m_level_isSet;
}

bool OAIAnalysisResult::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIAnalysisResult::getMessage() const {
    return m_message;
}
void OAIAnalysisResult::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAnalysisResult::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAnalysisResult::is_message_Valid() const{
    return m_message_isValid;
}

QList OAIAnalysisResult::getLocations() const {
    return m_locations;
}
void OAIAnalysisResult::setLocations(const QList &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIAnalysisResult::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIAnalysisResult::is_locations_Valid() const{
    return m_locations_isValid;
}

bool OAIAnalysisResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
