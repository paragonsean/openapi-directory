/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInputRoutingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInputRoutingsResponse::OAIListInputRoutingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInputRoutingsResponse::OAIListInputRoutingsResponse() {
    this->initializeModel();
}

OAIListInputRoutingsResponse::~OAIListInputRoutingsResponse() {}

void OAIListInputRoutingsResponse::initializeModel() {

    m_routed_resources_isSet = false;
    m_routed_resources_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListInputRoutingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInputRoutingsResponse::fromJsonObject(QJsonObject json) {

    m_routed_resources_isValid = ::OpenAPI::fromJsonValue(m_routed_resources, json[QString("routedResources")]);
    m_routed_resources_isSet = !json[QString("routedResources")].isNull() && m_routed_resources_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListInputRoutingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInputRoutingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_routed_resources.isSet()) {
        obj.insert(QString("routedResources"), ::OpenAPI::toJsonValue(m_routed_resources));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListInputRoutingsResponse::getRoutedResources() const {
    return m_routed_resources;
}
void OAIListInputRoutingsResponse::setRoutedResources(const QList &routed_resources) {
    m_routed_resources = routed_resources;
    m_routed_resources_isSet = true;
}

bool OAIListInputRoutingsResponse::is_routed_resources_Set() const{
    return m_routed_resources_isSet;
}

bool OAIListInputRoutingsResponse::is_routed_resources_Valid() const{
    return m_routed_resources_isValid;
}

QString OAIListInputRoutingsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListInputRoutingsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListInputRoutingsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListInputRoutingsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListInputRoutingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_routed_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInputRoutingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
