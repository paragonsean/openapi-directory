/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListInputRoutings_request_inputIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListInputRoutings_request_inputIdentifier::OAIListInputRoutings_request_inputIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListInputRoutings_request_inputIdentifier::OAIListInputRoutings_request_inputIdentifier() {
    this->initializeModel();
}

OAIListInputRoutings_request_inputIdentifier::~OAIListInputRoutings_request_inputIdentifier() {}

void OAIListInputRoutings_request_inputIdentifier::initializeModel() {

    m_iot_events_input_identifier_isSet = false;
    m_iot_events_input_identifier_isValid = false;

    m_iot_site_wise_input_identifier_isSet = false;
    m_iot_site_wise_input_identifier_isValid = false;
}

void OAIListInputRoutings_request_inputIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListInputRoutings_request_inputIdentifier::fromJsonObject(QJsonObject json) {

    m_iot_events_input_identifier_isValid = ::OpenAPI::fromJsonValue(m_iot_events_input_identifier, json[QString("iotEventsInputIdentifier")]);
    m_iot_events_input_identifier_isSet = !json[QString("iotEventsInputIdentifier")].isNull() && m_iot_events_input_identifier_isValid;

    m_iot_site_wise_input_identifier_isValid = ::OpenAPI::fromJsonValue(m_iot_site_wise_input_identifier, json[QString("iotSiteWiseInputIdentifier")]);
    m_iot_site_wise_input_identifier_isSet = !json[QString("iotSiteWiseInputIdentifier")].isNull() && m_iot_site_wise_input_identifier_isValid;
}

QString OAIListInputRoutings_request_inputIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListInputRoutings_request_inputIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_iot_events_input_identifier.isSet()) {
        obj.insert(QString("iotEventsInputIdentifier"), ::OpenAPI::toJsonValue(m_iot_events_input_identifier));
    }
    if (m_iot_site_wise_input_identifier.isSet()) {
        obj.insert(QString("iotSiteWiseInputIdentifier"), ::OpenAPI::toJsonValue(m_iot_site_wise_input_identifier));
    }
    return obj;
}

OAIListInputRoutings_request_inputIdentifier_iotEventsInputIdentifier OAIListInputRoutings_request_inputIdentifier::getIotEventsInputIdentifier() const {
    return m_iot_events_input_identifier;
}
void OAIListInputRoutings_request_inputIdentifier::setIotEventsInputIdentifier(const OAIListInputRoutings_request_inputIdentifier_iotEventsInputIdentifier &iot_events_input_identifier) {
    m_iot_events_input_identifier = iot_events_input_identifier;
    m_iot_events_input_identifier_isSet = true;
}

bool OAIListInputRoutings_request_inputIdentifier::is_iot_events_input_identifier_Set() const{
    return m_iot_events_input_identifier_isSet;
}

bool OAIListInputRoutings_request_inputIdentifier::is_iot_events_input_identifier_Valid() const{
    return m_iot_events_input_identifier_isValid;
}

OAIListInputRoutings_request_inputIdentifier_iotSiteWiseInputIdentifier OAIListInputRoutings_request_inputIdentifier::getIotSiteWiseInputIdentifier() const {
    return m_iot_site_wise_input_identifier;
}
void OAIListInputRoutings_request_inputIdentifier::setIotSiteWiseInputIdentifier(const OAIListInputRoutings_request_inputIdentifier_iotSiteWiseInputIdentifier &iot_site_wise_input_identifier) {
    m_iot_site_wise_input_identifier = iot_site_wise_input_identifier;
    m_iot_site_wise_input_identifier_isSet = true;
}

bool OAIListInputRoutings_request_inputIdentifier::is_iot_site_wise_input_identifier_Set() const{
    return m_iot_site_wise_input_identifier_isSet;
}

bool OAIListInputRoutings_request_inputIdentifier::is_iot_site_wise_input_identifier_Valid() const{
    return m_iot_site_wise_input_identifier_isValid;
}

bool OAIListInputRoutings_request_inputIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iot_events_input_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_site_wise_input_identifier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListInputRoutings_request_inputIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
