/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDetectorModel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDetectorModel_request::OAIUpdateDetectorModel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDetectorModel_request::OAIUpdateDetectorModel_request() {
    this->initializeModel();
}

OAIUpdateDetectorModel_request::~OAIUpdateDetectorModel_request() {}

void OAIUpdateDetectorModel_request::initializeModel() {

    m_detector_model_definition_isSet = false;
    m_detector_model_definition_isValid = false;

    m_detector_model_description_isSet = false;
    m_detector_model_description_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_evaluation_method_isSet = false;
    m_evaluation_method_isValid = false;
}

void OAIUpdateDetectorModel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDetectorModel_request::fromJsonObject(QJsonObject json) {

    m_detector_model_definition_isValid = ::OpenAPI::fromJsonValue(m_detector_model_definition, json[QString("detectorModelDefinition")]);
    m_detector_model_definition_isSet = !json[QString("detectorModelDefinition")].isNull() && m_detector_model_definition_isValid;

    m_detector_model_description_isValid = ::OpenAPI::fromJsonValue(m_detector_model_description, json[QString("detectorModelDescription")]);
    m_detector_model_description_isSet = !json[QString("detectorModelDescription")].isNull() && m_detector_model_description_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_evaluation_method_isValid = ::OpenAPI::fromJsonValue(m_evaluation_method, json[QString("evaluationMethod")]);
    m_evaluation_method_isSet = !json[QString("evaluationMethod")].isNull() && m_evaluation_method_isValid;
}

QString OAIUpdateDetectorModel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDetectorModel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_definition.isSet()) {
        obj.insert(QString("detectorModelDefinition"), ::OpenAPI::toJsonValue(m_detector_model_definition));
    }
    if (m_detector_model_description_isSet) {
        obj.insert(QString("detectorModelDescription"), ::OpenAPI::toJsonValue(m_detector_model_description));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_evaluation_method_isSet) {
        obj.insert(QString("evaluationMethod"), ::OpenAPI::toJsonValue(m_evaluation_method));
    }
    return obj;
}

OAICreateDetectorModel_request_detectorModelDefinition OAIUpdateDetectorModel_request::getDetectorModelDefinition() const {
    return m_detector_model_definition;
}
void OAIUpdateDetectorModel_request::setDetectorModelDefinition(const OAICreateDetectorModel_request_detectorModelDefinition &detector_model_definition) {
    m_detector_model_definition = detector_model_definition;
    m_detector_model_definition_isSet = true;
}

bool OAIUpdateDetectorModel_request::is_detector_model_definition_Set() const{
    return m_detector_model_definition_isSet;
}

bool OAIUpdateDetectorModel_request::is_detector_model_definition_Valid() const{
    return m_detector_model_definition_isValid;
}

QString OAIUpdateDetectorModel_request::getDetectorModelDescription() const {
    return m_detector_model_description;
}
void OAIUpdateDetectorModel_request::setDetectorModelDescription(const QString &detector_model_description) {
    m_detector_model_description = detector_model_description;
    m_detector_model_description_isSet = true;
}

bool OAIUpdateDetectorModel_request::is_detector_model_description_Set() const{
    return m_detector_model_description_isSet;
}

bool OAIUpdateDetectorModel_request::is_detector_model_description_Valid() const{
    return m_detector_model_description_isValid;
}

QString OAIUpdateDetectorModel_request::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateDetectorModel_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateDetectorModel_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateDetectorModel_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIUpdateDetectorModel_request::getEvaluationMethod() const {
    return m_evaluation_method;
}
void OAIUpdateDetectorModel_request::setEvaluationMethod(const QString &evaluation_method) {
    m_evaluation_method = evaluation_method;
    m_evaluation_method_isSet = true;
}

bool OAIUpdateDetectorModel_request::is_evaluation_method_Set() const{
    return m_evaluation_method_isSet;
}

bool OAIUpdateDetectorModel_request::is_evaluation_method_Valid() const{
    return m_evaluation_method_isValid;
}

bool OAIUpdateDetectorModel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDetectorModel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detector_model_definition_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
