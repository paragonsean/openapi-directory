/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateInput_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateInput_request::OAIUpdateInput_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateInput_request::OAIUpdateInput_request() {
    this->initializeModel();
}

OAIUpdateInput_request::~OAIUpdateInput_request() {}

void OAIUpdateInput_request::initializeModel() {

    m_input_description_isSet = false;
    m_input_description_isValid = false;

    m_input_definition_isSet = false;
    m_input_definition_isValid = false;
}

void OAIUpdateInput_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateInput_request::fromJsonObject(QJsonObject json) {

    m_input_description_isValid = ::OpenAPI::fromJsonValue(m_input_description, json[QString("inputDescription")]);
    m_input_description_isSet = !json[QString("inputDescription")].isNull() && m_input_description_isValid;

    m_input_definition_isValid = ::OpenAPI::fromJsonValue(m_input_definition, json[QString("inputDefinition")]);
    m_input_definition_isSet = !json[QString("inputDefinition")].isNull() && m_input_definition_isValid;
}

QString OAIUpdateInput_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateInput_request::asJsonObject() const {
    QJsonObject obj;
    if (m_input_description_isSet) {
        obj.insert(QString("inputDescription"), ::OpenAPI::toJsonValue(m_input_description));
    }
    if (m_input_definition.isSet()) {
        obj.insert(QString("inputDefinition"), ::OpenAPI::toJsonValue(m_input_definition));
    }
    return obj;
}

QString OAIUpdateInput_request::getInputDescription() const {
    return m_input_description;
}
void OAIUpdateInput_request::setInputDescription(const QString &input_description) {
    m_input_description = input_description;
    m_input_description_isSet = true;
}

bool OAIUpdateInput_request::is_input_description_Set() const{
    return m_input_description_isSet;
}

bool OAIUpdateInput_request::is_input_description_Valid() const{
    return m_input_description_isValid;
}

OAICreateInput_request_inputDefinition OAIUpdateInput_request::getInputDefinition() const {
    return m_input_definition;
}
void OAIUpdateInput_request::setInputDefinition(const OAICreateInput_request_inputDefinition &input_definition) {
    m_input_definition = input_definition;
    m_input_definition_isSet = true;
}

bool OAIUpdateInput_request::is_input_definition_Set() const{
    return m_input_definition_isSet;
}

bool OAIUpdateInput_request::is_input_definition_Valid() const{
    return m_input_definition_isValid;
}

bool OAIUpdateInput_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateInput_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_definition_isValid && true;
}

} // namespace OpenAPI
