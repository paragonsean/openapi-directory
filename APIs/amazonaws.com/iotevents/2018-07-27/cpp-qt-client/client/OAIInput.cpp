/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput::OAIInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput::OAIInput() {
    this->initializeModel();
}

OAIInput::~OAIInput() {}

void OAIInput::initializeModel() {

    m_input_configuration_isSet = false;
    m_input_configuration_isValid = false;

    m_input_definition_isSet = false;
    m_input_definition_isValid = false;
}

void OAIInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput::fromJsonObject(QJsonObject json) {

    m_input_configuration_isValid = ::OpenAPI::fromJsonValue(m_input_configuration, json[QString("inputConfiguration")]);
    m_input_configuration_isSet = !json[QString("inputConfiguration")].isNull() && m_input_configuration_isValid;

    m_input_definition_isValid = ::OpenAPI::fromJsonValue(m_input_definition, json[QString("inputDefinition")]);
    m_input_definition_isSet = !json[QString("inputDefinition")].isNull() && m_input_definition_isValid;
}

QString OAIInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput::asJsonObject() const {
    QJsonObject obj;
    if (m_input_configuration.isSet()) {
        obj.insert(QString("inputConfiguration"), ::OpenAPI::toJsonValue(m_input_configuration));
    }
    if (m_input_definition.isSet()) {
        obj.insert(QString("inputDefinition"), ::OpenAPI::toJsonValue(m_input_definition));
    }
    return obj;
}

OAIInput_inputConfiguration OAIInput::getInputConfiguration() const {
    return m_input_configuration;
}
void OAIInput::setInputConfiguration(const OAIInput_inputConfiguration &input_configuration) {
    m_input_configuration = input_configuration;
    m_input_configuration_isSet = true;
}

bool OAIInput::is_input_configuration_Set() const{
    return m_input_configuration_isSet;
}

bool OAIInput::is_input_configuration_Valid() const{
    return m_input_configuration_isValid;
}

OAICreateInputRequest_inputDefinition OAIInput::getInputDefinition() const {
    return m_input_definition;
}
void OAIInput::setInputDefinition(const OAICreateInputRequest_inputDefinition &input_definition) {
    m_input_definition = input_definition;
    m_input_definition_isSet = true;
}

bool OAIInput::is_input_definition_Set() const{
    return m_input_definition_isSet;
}

bool OAIInput::is_input_definition_Valid() const{
    return m_input_definition_isValid;
}

bool OAIInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
