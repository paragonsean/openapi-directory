/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAlarmModelsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAlarmModelsResponse::OAIListAlarmModelsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAlarmModelsResponse::OAIListAlarmModelsResponse() {
    this->initializeModel();
}

OAIListAlarmModelsResponse::~OAIListAlarmModelsResponse() {}

void OAIListAlarmModelsResponse::initializeModel() {

    m_alarm_model_summaries_isSet = false;
    m_alarm_model_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAlarmModelsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAlarmModelsResponse::fromJsonObject(QJsonObject json) {

    m_alarm_model_summaries_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_summaries, json[QString("alarmModelSummaries")]);
    m_alarm_model_summaries_isSet = !json[QString("alarmModelSummaries")].isNull() && m_alarm_model_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAlarmModelsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAlarmModelsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_model_summaries.isSet()) {
        obj.insert(QString("alarmModelSummaries"), ::OpenAPI::toJsonValue(m_alarm_model_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAlarmModelsResponse::getAlarmModelSummaries() const {
    return m_alarm_model_summaries;
}
void OAIListAlarmModelsResponse::setAlarmModelSummaries(const QList &alarm_model_summaries) {
    m_alarm_model_summaries = alarm_model_summaries;
    m_alarm_model_summaries_isSet = true;
}

bool OAIListAlarmModelsResponse::is_alarm_model_summaries_Set() const{
    return m_alarm_model_summaries_isSet;
}

bool OAIListAlarmModelsResponse::is_alarm_model_summaries_Valid() const{
    return m_alarm_model_summaries_isValid;
}

QString OAIListAlarmModelsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAlarmModelsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAlarmModelsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAlarmModelsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAlarmModelsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_model_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAlarmModelsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
