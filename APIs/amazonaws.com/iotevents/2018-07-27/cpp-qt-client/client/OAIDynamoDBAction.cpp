/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamoDBAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamoDBAction::OAIDynamoDBAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamoDBAction::OAIDynamoDBAction() {
    this->initializeModel();
}

OAIDynamoDBAction::~OAIDynamoDBAction() {}

void OAIDynamoDBAction::initializeModel() {

    m_hash_key_type_isSet = false;
    m_hash_key_type_isValid = false;

    m_hash_key_field_isSet = false;
    m_hash_key_field_isValid = false;

    m_hash_key_value_isSet = false;
    m_hash_key_value_isValid = false;

    m_range_key_type_isSet = false;
    m_range_key_type_isValid = false;

    m_range_key_field_isSet = false;
    m_range_key_field_isValid = false;

    m_range_key_value_isSet = false;
    m_range_key_value_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_payload_field_isSet = false;
    m_payload_field_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIDynamoDBAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamoDBAction::fromJsonObject(QJsonObject json) {

    m_hash_key_type_isValid = ::OpenAPI::fromJsonValue(m_hash_key_type, json[QString("hashKeyType")]);
    m_hash_key_type_isSet = !json[QString("hashKeyType")].isNull() && m_hash_key_type_isValid;

    m_hash_key_field_isValid = ::OpenAPI::fromJsonValue(m_hash_key_field, json[QString("hashKeyField")]);
    m_hash_key_field_isSet = !json[QString("hashKeyField")].isNull() && m_hash_key_field_isValid;

    m_hash_key_value_isValid = ::OpenAPI::fromJsonValue(m_hash_key_value, json[QString("hashKeyValue")]);
    m_hash_key_value_isSet = !json[QString("hashKeyValue")].isNull() && m_hash_key_value_isValid;

    m_range_key_type_isValid = ::OpenAPI::fromJsonValue(m_range_key_type, json[QString("rangeKeyType")]);
    m_range_key_type_isSet = !json[QString("rangeKeyType")].isNull() && m_range_key_type_isValid;

    m_range_key_field_isValid = ::OpenAPI::fromJsonValue(m_range_key_field, json[QString("rangeKeyField")]);
    m_range_key_field_isSet = !json[QString("rangeKeyField")].isNull() && m_range_key_field_isValid;

    m_range_key_value_isValid = ::OpenAPI::fromJsonValue(m_range_key_value, json[QString("rangeKeyValue")]);
    m_range_key_value_isSet = !json[QString("rangeKeyValue")].isNull() && m_range_key_value_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_payload_field_isValid = ::OpenAPI::fromJsonValue(m_payload_field, json[QString("payloadField")]);
    m_payload_field_isSet = !json[QString("payloadField")].isNull() && m_payload_field_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIDynamoDBAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamoDBAction::asJsonObject() const {
    QJsonObject obj;
    if (m_hash_key_type_isSet) {
        obj.insert(QString("hashKeyType"), ::OpenAPI::toJsonValue(m_hash_key_type));
    }
    if (m_hash_key_field_isSet) {
        obj.insert(QString("hashKeyField"), ::OpenAPI::toJsonValue(m_hash_key_field));
    }
    if (m_hash_key_value_isSet) {
        obj.insert(QString("hashKeyValue"), ::OpenAPI::toJsonValue(m_hash_key_value));
    }
    if (m_range_key_type_isSet) {
        obj.insert(QString("rangeKeyType"), ::OpenAPI::toJsonValue(m_range_key_type));
    }
    if (m_range_key_field_isSet) {
        obj.insert(QString("rangeKeyField"), ::OpenAPI::toJsonValue(m_range_key_field));
    }
    if (m_range_key_value_isSet) {
        obj.insert(QString("rangeKeyValue"), ::OpenAPI::toJsonValue(m_range_key_value));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_payload_field_isSet) {
        obj.insert(QString("payloadField"), ::OpenAPI::toJsonValue(m_payload_field));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIDynamoDBAction::getHashKeyType() const {
    return m_hash_key_type;
}
void OAIDynamoDBAction::setHashKeyType(const QString &hash_key_type) {
    m_hash_key_type = hash_key_type;
    m_hash_key_type_isSet = true;
}

bool OAIDynamoDBAction::is_hash_key_type_Set() const{
    return m_hash_key_type_isSet;
}

bool OAIDynamoDBAction::is_hash_key_type_Valid() const{
    return m_hash_key_type_isValid;
}

QString OAIDynamoDBAction::getHashKeyField() const {
    return m_hash_key_field;
}
void OAIDynamoDBAction::setHashKeyField(const QString &hash_key_field) {
    m_hash_key_field = hash_key_field;
    m_hash_key_field_isSet = true;
}

bool OAIDynamoDBAction::is_hash_key_field_Set() const{
    return m_hash_key_field_isSet;
}

bool OAIDynamoDBAction::is_hash_key_field_Valid() const{
    return m_hash_key_field_isValid;
}

QString OAIDynamoDBAction::getHashKeyValue() const {
    return m_hash_key_value;
}
void OAIDynamoDBAction::setHashKeyValue(const QString &hash_key_value) {
    m_hash_key_value = hash_key_value;
    m_hash_key_value_isSet = true;
}

bool OAIDynamoDBAction::is_hash_key_value_Set() const{
    return m_hash_key_value_isSet;
}

bool OAIDynamoDBAction::is_hash_key_value_Valid() const{
    return m_hash_key_value_isValid;
}

QString OAIDynamoDBAction::getRangeKeyType() const {
    return m_range_key_type;
}
void OAIDynamoDBAction::setRangeKeyType(const QString &range_key_type) {
    m_range_key_type = range_key_type;
    m_range_key_type_isSet = true;
}

bool OAIDynamoDBAction::is_range_key_type_Set() const{
    return m_range_key_type_isSet;
}

bool OAIDynamoDBAction::is_range_key_type_Valid() const{
    return m_range_key_type_isValid;
}

QString OAIDynamoDBAction::getRangeKeyField() const {
    return m_range_key_field;
}
void OAIDynamoDBAction::setRangeKeyField(const QString &range_key_field) {
    m_range_key_field = range_key_field;
    m_range_key_field_isSet = true;
}

bool OAIDynamoDBAction::is_range_key_field_Set() const{
    return m_range_key_field_isSet;
}

bool OAIDynamoDBAction::is_range_key_field_Valid() const{
    return m_range_key_field_isValid;
}

QString OAIDynamoDBAction::getRangeKeyValue() const {
    return m_range_key_value;
}
void OAIDynamoDBAction::setRangeKeyValue(const QString &range_key_value) {
    m_range_key_value = range_key_value;
    m_range_key_value_isSet = true;
}

bool OAIDynamoDBAction::is_range_key_value_Set() const{
    return m_range_key_value_isSet;
}

bool OAIDynamoDBAction::is_range_key_value_Valid() const{
    return m_range_key_value_isValid;
}

QString OAIDynamoDBAction::getOperation() const {
    return m_operation;
}
void OAIDynamoDBAction::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIDynamoDBAction::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIDynamoDBAction::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIDynamoDBAction::getPayloadField() const {
    return m_payload_field;
}
void OAIDynamoDBAction::setPayloadField(const QString &payload_field) {
    m_payload_field = payload_field;
    m_payload_field_isSet = true;
}

bool OAIDynamoDBAction::is_payload_field_Set() const{
    return m_payload_field_isSet;
}

bool OAIDynamoDBAction::is_payload_field_Valid() const{
    return m_payload_field_isValid;
}

QString OAIDynamoDBAction::getTableName() const {
    return m_table_name;
}
void OAIDynamoDBAction::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDynamoDBAction::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDynamoDBAction::is_table_name_Valid() const{
    return m_table_name_isValid;
}

OAIPayload OAIDynamoDBAction::getPayload() const {
    return m_payload;
}
void OAIDynamoDBAction::setPayload(const OAIPayload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIDynamoDBAction::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIDynamoDBAction::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIDynamoDBAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hash_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_key_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_key_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_key_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamoDBAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_hash_key_field_isValid && m_hash_key_value_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
