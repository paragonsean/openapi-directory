/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_setTimer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_setTimer::OAIAction_setTimer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_setTimer::OAIAction_setTimer() {
    this->initializeModel();
}

OAIAction_setTimer::~OAIAction_setTimer() {}

void OAIAction_setTimer::initializeModel() {

    m_timer_name_isSet = false;
    m_timer_name_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;

    m_duration_expression_isSet = false;
    m_duration_expression_isValid = false;
}

void OAIAction_setTimer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_setTimer::fromJsonObject(QJsonObject json) {

    m_timer_name_isValid = ::OpenAPI::fromJsonValue(m_timer_name, json[QString("timerName")]);
    m_timer_name_isSet = !json[QString("timerName")].isNull() && m_timer_name_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;

    m_duration_expression_isValid = ::OpenAPI::fromJsonValue(m_duration_expression, json[QString("durationExpression")]);
    m_duration_expression_isSet = !json[QString("durationExpression")].isNull() && m_duration_expression_isValid;
}

QString OAIAction_setTimer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_setTimer::asJsonObject() const {
    QJsonObject obj;
    if (m_timer_name_isSet) {
        obj.insert(QString("timerName"), ::OpenAPI::toJsonValue(m_timer_name));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    if (m_duration_expression_isSet) {
        obj.insert(QString("durationExpression"), ::OpenAPI::toJsonValue(m_duration_expression));
    }
    return obj;
}

QString OAIAction_setTimer::getTimerName() const {
    return m_timer_name;
}
void OAIAction_setTimer::setTimerName(const QString &timer_name) {
    m_timer_name = timer_name;
    m_timer_name_isSet = true;
}

bool OAIAction_setTimer::is_timer_name_Set() const{
    return m_timer_name_isSet;
}

bool OAIAction_setTimer::is_timer_name_Valid() const{
    return m_timer_name_isValid;
}

qint32 OAIAction_setTimer::getSeconds() const {
    return m_seconds;
}
void OAIAction_setTimer::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAIAction_setTimer::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAIAction_setTimer::is_seconds_Valid() const{
    return m_seconds_isValid;
}

QString OAIAction_setTimer::getDurationExpression() const {
    return m_duration_expression;
}
void OAIAction_setTimer::setDurationExpression(const QString &duration_expression) {
    m_duration_expression = duration_expression;
    m_duration_expression_isSet = true;
}

bool OAIAction_setTimer::is_duration_expression_Set() const{
    return m_duration_expression_isSet;
}

bool OAIAction_setTimer::is_duration_expression_Valid() const{
    return m_duration_expression_isValid;
}

bool OAIAction_setTimer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_setTimer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timer_name_isValid && true;
}

} // namespace OpenAPI
