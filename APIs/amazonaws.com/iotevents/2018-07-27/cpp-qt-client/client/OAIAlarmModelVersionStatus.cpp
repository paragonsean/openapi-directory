/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarmModelVersionStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarmModelVersionStatus::OAIAlarmModelVersionStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarmModelVersionStatus::OAIAlarmModelVersionStatus() {
    this->initializeModel();
}

OAIAlarmModelVersionStatus::~OAIAlarmModelVersionStatus() {}

void OAIAlarmModelVersionStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAlarmModelVersionStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAlarmModelVersionStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmModelVersionStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmModelVersionStatus::ACTIVATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmModelVersionStatus::INACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmModelVersionStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAlarmModelVersionStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAlarmModelVersionStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAlarmModelVersionStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIAlarmModelVersionStatus::ACTIVATING:
            val = "ACTIVATING";
            break;
        case eOAIAlarmModelVersionStatus::INACTIVE:
            val = "INACTIVE";
            break;
        case eOAIAlarmModelVersionStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAlarmModelVersionStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAlarmModelVersionStatus::eOAIAlarmModelVersionStatus OAIAlarmModelVersionStatus::getValue() const {
    return m_value;
}

void OAIAlarmModelVersionStatus::setValue(const OAIAlarmModelVersionStatus::eOAIAlarmModelVersionStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAlarmModelVersionStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAlarmModelVersionStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
