/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIState::OAIState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIState::OAIState() {
    this->initializeModel();
}

OAIState::~OAIState() {}

void OAIState::initializeModel() {

    m_state_name_isSet = false;
    m_state_name_isValid = false;

    m_on_input_isSet = false;
    m_on_input_isValid = false;

    m_on_enter_isSet = false;
    m_on_enter_isValid = false;

    m_on_exit_isSet = false;
    m_on_exit_isValid = false;
}

void OAIState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIState::fromJsonObject(QJsonObject json) {

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;

    m_on_input_isValid = ::OpenAPI::fromJsonValue(m_on_input, json[QString("onInput")]);
    m_on_input_isSet = !json[QString("onInput")].isNull() && m_on_input_isValid;

    m_on_enter_isValid = ::OpenAPI::fromJsonValue(m_on_enter, json[QString("onEnter")]);
    m_on_enter_isSet = !json[QString("onEnter")].isNull() && m_on_enter_isValid;

    m_on_exit_isValid = ::OpenAPI::fromJsonValue(m_on_exit, json[QString("onExit")]);
    m_on_exit_isSet = !json[QString("onExit")].isNull() && m_on_exit_isValid;
}

QString OAIState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIState::asJsonObject() const {
    QJsonObject obj;
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    if (m_on_input.isSet()) {
        obj.insert(QString("onInput"), ::OpenAPI::toJsonValue(m_on_input));
    }
    if (m_on_enter.isSet()) {
        obj.insert(QString("onEnter"), ::OpenAPI::toJsonValue(m_on_enter));
    }
    if (m_on_exit.isSet()) {
        obj.insert(QString("onExit"), ::OpenAPI::toJsonValue(m_on_exit));
    }
    return obj;
}

QString OAIState::getStateName() const {
    return m_state_name;
}
void OAIState::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIState::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIState::is_state_name_Valid() const{
    return m_state_name_isValid;
}

OAIState_onInput OAIState::getOnInput() const {
    return m_on_input;
}
void OAIState::setOnInput(const OAIState_onInput &on_input) {
    m_on_input = on_input;
    m_on_input_isSet = true;
}

bool OAIState::is_on_input_Set() const{
    return m_on_input_isSet;
}

bool OAIState::is_on_input_Valid() const{
    return m_on_input_isValid;
}

OAIState_onEnter OAIState::getOnEnter() const {
    return m_on_enter;
}
void OAIState::setOnEnter(const OAIState_onEnter &on_enter) {
    m_on_enter = on_enter;
    m_on_enter_isSet = true;
}

bool OAIState::is_on_enter_Set() const{
    return m_on_enter_isSet;
}

bool OAIState::is_on_enter_Valid() const{
    return m_on_enter_isValid;
}

OAIState_onExit OAIState::getOnExit() const {
    return m_on_exit;
}
void OAIState::setOnExit(const OAIState_onExit &on_exit) {
    m_on_exit = on_exit;
    m_on_exit_isSet = true;
}

bool OAIState::is_on_exit_Set() const{
    return m_on_exit_isSet;
}

bool OAIState::is_on_exit_Valid() const{
    return m_on_exit_isValid;
}

bool OAIState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_enter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_exit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_name_isValid && true;
}

} // namespace OpenAPI
