/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoggingLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoggingLevel::OAILoggingLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoggingLevel::OAILoggingLevel() {
    this->initializeModel();
}

OAILoggingLevel::~OAILoggingLevel() {}

void OAILoggingLevel::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILoggingLevel::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILoggingLevel::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoggingLevel::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INFO", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoggingLevel::INFO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DEBUG", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoggingLevel::DEBUG;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILoggingLevel::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILoggingLevel::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILoggingLevel::ERROR:
            val = "ERROR";
            break;
        case eOAILoggingLevel::INFO:
            val = "INFO";
            break;
        case eOAILoggingLevel::DEBUG:
            val = "DEBUG";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILoggingLevel::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILoggingLevel::eOAILoggingLevel OAILoggingLevel::getValue() const {
    return m_value;
}

void OAILoggingLevel::setValue(const OAILoggingLevel::eOAILoggingLevel& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILoggingLevel::isSet() const {
    
    return m_value_isSet;
}

bool OAILoggingLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
