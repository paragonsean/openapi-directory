/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotEventsInputIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotEventsInputIdentifier::OAIIotEventsInputIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotEventsInputIdentifier::OAIIotEventsInputIdentifier() {
    this->initializeModel();
}

OAIIotEventsInputIdentifier::~OAIIotEventsInputIdentifier() {}

void OAIIotEventsInputIdentifier::initializeModel() {

    m_input_name_isSet = false;
    m_input_name_isValid = false;
}

void OAIIotEventsInputIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotEventsInputIdentifier::fromJsonObject(QJsonObject json) {

    m_input_name_isValid = ::OpenAPI::fromJsonValue(m_input_name, json[QString("inputName")]);
    m_input_name_isSet = !json[QString("inputName")].isNull() && m_input_name_isValid;
}

QString OAIIotEventsInputIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotEventsInputIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_input_name_isSet) {
        obj.insert(QString("inputName"), ::OpenAPI::toJsonValue(m_input_name));
    }
    return obj;
}

QString OAIIotEventsInputIdentifier::getInputName() const {
    return m_input_name;
}
void OAIIotEventsInputIdentifier::setInputName(const QString &input_name) {
    m_input_name = input_name;
    m_input_name_isSet = true;
}

bool OAIIotEventsInputIdentifier::is_input_name_Set() const{
    return m_input_name_isSet;
}

bool OAIIotEventsInputIdentifier::is_input_name_Valid() const{
    return m_input_name_isValid;
}

bool OAIIotEventsInputIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotEventsInputIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_name_isValid && true;
}

} // namespace OpenAPI
