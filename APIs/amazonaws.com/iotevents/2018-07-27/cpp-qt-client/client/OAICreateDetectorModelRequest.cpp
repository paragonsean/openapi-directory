/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDetectorModelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDetectorModelRequest::OAICreateDetectorModelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDetectorModelRequest::OAICreateDetectorModelRequest() {
    this->initializeModel();
}

OAICreateDetectorModelRequest::~OAICreateDetectorModelRequest() {}

void OAICreateDetectorModelRequest::initializeModel() {

    m_detector_model_name_isSet = false;
    m_detector_model_name_isValid = false;

    m_detector_model_definition_isSet = false;
    m_detector_model_definition_isValid = false;

    m_detector_model_description_isSet = false;
    m_detector_model_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_evaluation_method_isSet = false;
    m_evaluation_method_isValid = false;
}

void OAICreateDetectorModelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDetectorModelRequest::fromJsonObject(QJsonObject json) {

    m_detector_model_name_isValid = ::OpenAPI::fromJsonValue(m_detector_model_name, json[QString("detectorModelName")]);
    m_detector_model_name_isSet = !json[QString("detectorModelName")].isNull() && m_detector_model_name_isValid;

    m_detector_model_definition_isValid = ::OpenAPI::fromJsonValue(m_detector_model_definition, json[QString("detectorModelDefinition")]);
    m_detector_model_definition_isSet = !json[QString("detectorModelDefinition")].isNull() && m_detector_model_definition_isValid;

    m_detector_model_description_isValid = ::OpenAPI::fromJsonValue(m_detector_model_description, json[QString("detectorModelDescription")]);
    m_detector_model_description_isSet = !json[QString("detectorModelDescription")].isNull() && m_detector_model_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_evaluation_method_isValid = ::OpenAPI::fromJsonValue(m_evaluation_method, json[QString("evaluationMethod")]);
    m_evaluation_method_isSet = !json[QString("evaluationMethod")].isNull() && m_evaluation_method_isValid;
}

QString OAICreateDetectorModelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDetectorModelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_name_isSet) {
        obj.insert(QString("detectorModelName"), ::OpenAPI::toJsonValue(m_detector_model_name));
    }
    if (m_detector_model_definition.isSet()) {
        obj.insert(QString("detectorModelDefinition"), ::OpenAPI::toJsonValue(m_detector_model_definition));
    }
    if (m_detector_model_description_isSet) {
        obj.insert(QString("detectorModelDescription"), ::OpenAPI::toJsonValue(m_detector_model_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_evaluation_method.isSet()) {
        obj.insert(QString("evaluationMethod"), ::OpenAPI::toJsonValue(m_evaluation_method));
    }
    return obj;
}

QString OAICreateDetectorModelRequest::getDetectorModelName() const {
    return m_detector_model_name;
}
void OAICreateDetectorModelRequest::setDetectorModelName(const QString &detector_model_name) {
    m_detector_model_name = detector_model_name;
    m_detector_model_name_isSet = true;
}

bool OAICreateDetectorModelRequest::is_detector_model_name_Set() const{
    return m_detector_model_name_isSet;
}

bool OAICreateDetectorModelRequest::is_detector_model_name_Valid() const{
    return m_detector_model_name_isValid;
}

OAICreateDetectorModelRequest_detectorModelDefinition OAICreateDetectorModelRequest::getDetectorModelDefinition() const {
    return m_detector_model_definition;
}
void OAICreateDetectorModelRequest::setDetectorModelDefinition(const OAICreateDetectorModelRequest_detectorModelDefinition &detector_model_definition) {
    m_detector_model_definition = detector_model_definition;
    m_detector_model_definition_isSet = true;
}

bool OAICreateDetectorModelRequest::is_detector_model_definition_Set() const{
    return m_detector_model_definition_isSet;
}

bool OAICreateDetectorModelRequest::is_detector_model_definition_Valid() const{
    return m_detector_model_definition_isValid;
}

QString OAICreateDetectorModelRequest::getDetectorModelDescription() const {
    return m_detector_model_description;
}
void OAICreateDetectorModelRequest::setDetectorModelDescription(const QString &detector_model_description) {
    m_detector_model_description = detector_model_description;
    m_detector_model_description_isSet = true;
}

bool OAICreateDetectorModelRequest::is_detector_model_description_Set() const{
    return m_detector_model_description_isSet;
}

bool OAICreateDetectorModelRequest::is_detector_model_description_Valid() const{
    return m_detector_model_description_isValid;
}

QString OAICreateDetectorModelRequest::getKey() const {
    return m_key;
}
void OAICreateDetectorModelRequest::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICreateDetectorModelRequest::is_key_Set() const{
    return m_key_isSet;
}

bool OAICreateDetectorModelRequest::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICreateDetectorModelRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateDetectorModelRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateDetectorModelRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateDetectorModelRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QList OAICreateDetectorModelRequest::getTags() const {
    return m_tags;
}
void OAICreateDetectorModelRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDetectorModelRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDetectorModelRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIEvaluationMethod OAICreateDetectorModelRequest::getEvaluationMethod() const {
    return m_evaluation_method;
}
void OAICreateDetectorModelRequest::setEvaluationMethod(const OAIEvaluationMethod &evaluation_method) {
    m_evaluation_method = evaluation_method;
    m_evaluation_method_isSet = true;
}

bool OAICreateDetectorModelRequest::is_evaluation_method_Set() const{
    return m_evaluation_method_isSet;
}

bool OAICreateDetectorModelRequest::is_evaluation_method_Valid() const{
    return m_evaluation_method_isValid;
}

bool OAICreateDetectorModelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDetectorModelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detector_model_name_isValid && m_detector_model_definition_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
