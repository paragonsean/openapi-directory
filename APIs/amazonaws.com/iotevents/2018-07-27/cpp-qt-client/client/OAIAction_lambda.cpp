/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_lambda.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_lambda::OAIAction_lambda(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_lambda::OAIAction_lambda() {
    this->initializeModel();
}

OAIAction_lambda::~OAIAction_lambda() {}

void OAIAction_lambda::initializeModel() {

    m_function_arn_isSet = false;
    m_function_arn_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIAction_lambda::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_lambda::fromJsonObject(QJsonObject json) {

    m_function_arn_isValid = ::OpenAPI::fromJsonValue(m_function_arn, json[QString("functionArn")]);
    m_function_arn_isSet = !json[QString("functionArn")].isNull() && m_function_arn_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIAction_lambda::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_lambda::asJsonObject() const {
    QJsonObject obj;
    if (m_function_arn_isSet) {
        obj.insert(QString("functionArn"), ::OpenAPI::toJsonValue(m_function_arn));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIAction_lambda::getFunctionArn() const {
    return m_function_arn;
}
void OAIAction_lambda::setFunctionArn(const QString &function_arn) {
    m_function_arn = function_arn;
    m_function_arn_isSet = true;
}

bool OAIAction_lambda::is_function_arn_Set() const{
    return m_function_arn_isSet;
}

bool OAIAction_lambda::is_function_arn_Valid() const{
    return m_function_arn_isValid;
}

OAILambdaAction_payload OAIAction_lambda::getPayload() const {
    return m_payload;
}
void OAIAction_lambda::setPayload(const OAILambdaAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAction_lambda::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAction_lambda::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIAction_lambda::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_lambda::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_function_arn_isValid && true;
}

} // namespace OpenAPI
