/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateAlarmModel_request.h
 *
 * 
 */

#ifndef OAIUpdateAlarmModel_request_H
#define OAIUpdateAlarmModel_request_H

#include <QJsonObject>

#include "OAICreateAlarmModel_request_alarmCapabilities.h"
#include "OAICreateAlarmModel_request_alarmEventActions.h"
#include "OAICreateAlarmModel_request_alarmNotification.h"
#include "OAICreateAlarmModel_request_alarmRule.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAlarmModel_request_alarmRule;
class OAICreateAlarmModel_request_alarmNotification;
class OAICreateAlarmModel_request_alarmEventActions;
class OAICreateAlarmModel_request_alarmCapabilities;

class OAIUpdateAlarmModel_request : public OAIObject {
public:
    OAIUpdateAlarmModel_request();
    OAIUpdateAlarmModel_request(QString json);
    ~OAIUpdateAlarmModel_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlarmModelDescription() const;
    void setAlarmModelDescription(const QString &alarm_model_description);
    bool is_alarm_model_description_Set() const;
    bool is_alarm_model_description_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    qint32 getSeverity() const;
    void setSeverity(const qint32 &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    OAICreateAlarmModel_request_alarmRule getAlarmRule() const;
    void setAlarmRule(const OAICreateAlarmModel_request_alarmRule &alarm_rule);
    bool is_alarm_rule_Set() const;
    bool is_alarm_rule_Valid() const;

    OAICreateAlarmModel_request_alarmNotification getAlarmNotification() const;
    void setAlarmNotification(const OAICreateAlarmModel_request_alarmNotification &alarm_notification);
    bool is_alarm_notification_Set() const;
    bool is_alarm_notification_Valid() const;

    OAICreateAlarmModel_request_alarmEventActions getAlarmEventActions() const;
    void setAlarmEventActions(const OAICreateAlarmModel_request_alarmEventActions &alarm_event_actions);
    bool is_alarm_event_actions_Set() const;
    bool is_alarm_event_actions_Valid() const;

    OAICreateAlarmModel_request_alarmCapabilities getAlarmCapabilities() const;
    void setAlarmCapabilities(const OAICreateAlarmModel_request_alarmCapabilities &alarm_capabilities);
    bool is_alarm_capabilities_Set() const;
    bool is_alarm_capabilities_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alarm_model_description;
    bool m_alarm_model_description_isSet;
    bool m_alarm_model_description_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    qint32 m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    OAICreateAlarmModel_request_alarmRule m_alarm_rule;
    bool m_alarm_rule_isSet;
    bool m_alarm_rule_isValid;

    OAICreateAlarmModel_request_alarmNotification m_alarm_notification;
    bool m_alarm_notification_isSet;
    bool m_alarm_notification_isValid;

    OAICreateAlarmModel_request_alarmEventActions m_alarm_event_actions;
    bool m_alarm_event_actions_isSet;
    bool m_alarm_event_actions_isValid;

    OAICreateAlarmModel_request_alarmCapabilities m_alarm_capabilities;
    bool m_alarm_capabilities_isSet;
    bool m_alarm_capabilities_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateAlarmModel_request)

#endif // OAIUpdateAlarmModel_request_H
