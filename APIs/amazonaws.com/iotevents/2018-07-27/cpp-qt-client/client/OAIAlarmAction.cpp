/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarmAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarmAction::OAIAlarmAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarmAction::OAIAlarmAction() {
    this->initializeModel();
}

OAIAlarmAction::~OAIAlarmAction() {}

void OAIAlarmAction::initializeModel() {

    m_sns_isSet = false;
    m_sns_isValid = false;

    m_iot_topic_publish_isSet = false;
    m_iot_topic_publish_isValid = false;

    m_lambda_isSet = false;
    m_lambda_isValid = false;

    m_iot_events_isSet = false;
    m_iot_events_isValid = false;

    m_sqs_isSet = false;
    m_sqs_isValid = false;

    m_firehose_isSet = false;
    m_firehose_isValid = false;

    m_dynamo_db_isSet = false;
    m_dynamo_db_isValid = false;

    m_dynamo_dbv2_isSet = false;
    m_dynamo_dbv2_isValid = false;

    m_iot_site_wise_isSet = false;
    m_iot_site_wise_isValid = false;
}

void OAIAlarmAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlarmAction::fromJsonObject(QJsonObject json) {

    m_sns_isValid = ::OpenAPI::fromJsonValue(m_sns, json[QString("sns")]);
    m_sns_isSet = !json[QString("sns")].isNull() && m_sns_isValid;

    m_iot_topic_publish_isValid = ::OpenAPI::fromJsonValue(m_iot_topic_publish, json[QString("iotTopicPublish")]);
    m_iot_topic_publish_isSet = !json[QString("iotTopicPublish")].isNull() && m_iot_topic_publish_isValid;

    m_lambda_isValid = ::OpenAPI::fromJsonValue(m_lambda, json[QString("lambda")]);
    m_lambda_isSet = !json[QString("lambda")].isNull() && m_lambda_isValid;

    m_iot_events_isValid = ::OpenAPI::fromJsonValue(m_iot_events, json[QString("iotEvents")]);
    m_iot_events_isSet = !json[QString("iotEvents")].isNull() && m_iot_events_isValid;

    m_sqs_isValid = ::OpenAPI::fromJsonValue(m_sqs, json[QString("sqs")]);
    m_sqs_isSet = !json[QString("sqs")].isNull() && m_sqs_isValid;

    m_firehose_isValid = ::OpenAPI::fromJsonValue(m_firehose, json[QString("firehose")]);
    m_firehose_isSet = !json[QString("firehose")].isNull() && m_firehose_isValid;

    m_dynamo_db_isValid = ::OpenAPI::fromJsonValue(m_dynamo_db, json[QString("dynamoDB")]);
    m_dynamo_db_isSet = !json[QString("dynamoDB")].isNull() && m_dynamo_db_isValid;

    m_dynamo_dbv2_isValid = ::OpenAPI::fromJsonValue(m_dynamo_dbv2, json[QString("dynamoDBv2")]);
    m_dynamo_dbv2_isSet = !json[QString("dynamoDBv2")].isNull() && m_dynamo_dbv2_isValid;

    m_iot_site_wise_isValid = ::OpenAPI::fromJsonValue(m_iot_site_wise, json[QString("iotSiteWise")]);
    m_iot_site_wise_isSet = !json[QString("iotSiteWise")].isNull() && m_iot_site_wise_isValid;
}

QString OAIAlarmAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlarmAction::asJsonObject() const {
    QJsonObject obj;
    if (m_sns.isSet()) {
        obj.insert(QString("sns"), ::OpenAPI::toJsonValue(m_sns));
    }
    if (m_iot_topic_publish.isSet()) {
        obj.insert(QString("iotTopicPublish"), ::OpenAPI::toJsonValue(m_iot_topic_publish));
    }
    if (m_lambda.isSet()) {
        obj.insert(QString("lambda"), ::OpenAPI::toJsonValue(m_lambda));
    }
    if (m_iot_events.isSet()) {
        obj.insert(QString("iotEvents"), ::OpenAPI::toJsonValue(m_iot_events));
    }
    if (m_sqs.isSet()) {
        obj.insert(QString("sqs"), ::OpenAPI::toJsonValue(m_sqs));
    }
    if (m_firehose.isSet()) {
        obj.insert(QString("firehose"), ::OpenAPI::toJsonValue(m_firehose));
    }
    if (m_dynamo_db.isSet()) {
        obj.insert(QString("dynamoDB"), ::OpenAPI::toJsonValue(m_dynamo_db));
    }
    if (m_dynamo_dbv2.isSet()) {
        obj.insert(QString("dynamoDBv2"), ::OpenAPI::toJsonValue(m_dynamo_dbv2));
    }
    if (m_iot_site_wise.isSet()) {
        obj.insert(QString("iotSiteWise"), ::OpenAPI::toJsonValue(m_iot_site_wise));
    }
    return obj;
}

OAISNSTopicPublishAction OAIAlarmAction::getSns() const {
    return m_sns;
}
void OAIAlarmAction::setSns(const OAISNSTopicPublishAction &sns) {
    m_sns = sns;
    m_sns_isSet = true;
}

bool OAIAlarmAction::is_sns_Set() const{
    return m_sns_isSet;
}

bool OAIAlarmAction::is_sns_Valid() const{
    return m_sns_isValid;
}

OAIIotTopicPublishAction OAIAlarmAction::getIotTopicPublish() const {
    return m_iot_topic_publish;
}
void OAIAlarmAction::setIotTopicPublish(const OAIIotTopicPublishAction &iot_topic_publish) {
    m_iot_topic_publish = iot_topic_publish;
    m_iot_topic_publish_isSet = true;
}

bool OAIAlarmAction::is_iot_topic_publish_Set() const{
    return m_iot_topic_publish_isSet;
}

bool OAIAlarmAction::is_iot_topic_publish_Valid() const{
    return m_iot_topic_publish_isValid;
}

OAILambdaAction OAIAlarmAction::getLambda() const {
    return m_lambda;
}
void OAIAlarmAction::setLambda(const OAILambdaAction &lambda) {
    m_lambda = lambda;
    m_lambda_isSet = true;
}

bool OAIAlarmAction::is_lambda_Set() const{
    return m_lambda_isSet;
}

bool OAIAlarmAction::is_lambda_Valid() const{
    return m_lambda_isValid;
}

OAIIotEventsAction OAIAlarmAction::getIotEvents() const {
    return m_iot_events;
}
void OAIAlarmAction::setIotEvents(const OAIIotEventsAction &iot_events) {
    m_iot_events = iot_events;
    m_iot_events_isSet = true;
}

bool OAIAlarmAction::is_iot_events_Set() const{
    return m_iot_events_isSet;
}

bool OAIAlarmAction::is_iot_events_Valid() const{
    return m_iot_events_isValid;
}

OAISqsAction OAIAlarmAction::getSqs() const {
    return m_sqs;
}
void OAIAlarmAction::setSqs(const OAISqsAction &sqs) {
    m_sqs = sqs;
    m_sqs_isSet = true;
}

bool OAIAlarmAction::is_sqs_Set() const{
    return m_sqs_isSet;
}

bool OAIAlarmAction::is_sqs_Valid() const{
    return m_sqs_isValid;
}

OAIFirehoseAction OAIAlarmAction::getFirehose() const {
    return m_firehose;
}
void OAIAlarmAction::setFirehose(const OAIFirehoseAction &firehose) {
    m_firehose = firehose;
    m_firehose_isSet = true;
}

bool OAIAlarmAction::is_firehose_Set() const{
    return m_firehose_isSet;
}

bool OAIAlarmAction::is_firehose_Valid() const{
    return m_firehose_isValid;
}

OAIDynamoDBAction OAIAlarmAction::getDynamoDb() const {
    return m_dynamo_db;
}
void OAIAlarmAction::setDynamoDb(const OAIDynamoDBAction &dynamo_db) {
    m_dynamo_db = dynamo_db;
    m_dynamo_db_isSet = true;
}

bool OAIAlarmAction::is_dynamo_db_Set() const{
    return m_dynamo_db_isSet;
}

bool OAIAlarmAction::is_dynamo_db_Valid() const{
    return m_dynamo_db_isValid;
}

OAIDynamoDBv2Action OAIAlarmAction::getDynamoDbv2() const {
    return m_dynamo_dbv2;
}
void OAIAlarmAction::setDynamoDbv2(const OAIDynamoDBv2Action &dynamo_dbv2) {
    m_dynamo_dbv2 = dynamo_dbv2;
    m_dynamo_dbv2_isSet = true;
}

bool OAIAlarmAction::is_dynamo_dbv2_Set() const{
    return m_dynamo_dbv2_isSet;
}

bool OAIAlarmAction::is_dynamo_dbv2_Valid() const{
    return m_dynamo_dbv2_isValid;
}

OAIIotSiteWiseAction OAIAlarmAction::getIotSiteWise() const {
    return m_iot_site_wise;
}
void OAIAlarmAction::setIotSiteWise(const OAIIotSiteWiseAction &iot_site_wise) {
    m_iot_site_wise = iot_site_wise;
    m_iot_site_wise_isSet = true;
}

bool OAIAlarmAction::is_iot_site_wise_Set() const{
    return m_iot_site_wise_isSet;
}

bool OAIAlarmAction::is_iot_site_wise_Valid() const{
    return m_iot_site_wise_isValid;
}

bool OAIAlarmAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_topic_publish.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firehose.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_db.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamo_dbv2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_iot_site_wise.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlarmAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
