/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetTimerAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetTimerAction::OAISetTimerAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetTimerAction::OAISetTimerAction() {
    this->initializeModel();
}

OAISetTimerAction::~OAISetTimerAction() {}

void OAISetTimerAction::initializeModel() {

    m_timer_name_isSet = false;
    m_timer_name_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;

    m_duration_expression_isSet = false;
    m_duration_expression_isValid = false;
}

void OAISetTimerAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetTimerAction::fromJsonObject(QJsonObject json) {

    m_timer_name_isValid = ::OpenAPI::fromJsonValue(m_timer_name, json[QString("timerName")]);
    m_timer_name_isSet = !json[QString("timerName")].isNull() && m_timer_name_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;

    m_duration_expression_isValid = ::OpenAPI::fromJsonValue(m_duration_expression, json[QString("durationExpression")]);
    m_duration_expression_isSet = !json[QString("durationExpression")].isNull() && m_duration_expression_isValid;
}

QString OAISetTimerAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetTimerAction::asJsonObject() const {
    QJsonObject obj;
    if (m_timer_name_isSet) {
        obj.insert(QString("timerName"), ::OpenAPI::toJsonValue(m_timer_name));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    if (m_duration_expression_isSet) {
        obj.insert(QString("durationExpression"), ::OpenAPI::toJsonValue(m_duration_expression));
    }
    return obj;
}

QString OAISetTimerAction::getTimerName() const {
    return m_timer_name;
}
void OAISetTimerAction::setTimerName(const QString &timer_name) {
    m_timer_name = timer_name;
    m_timer_name_isSet = true;
}

bool OAISetTimerAction::is_timer_name_Set() const{
    return m_timer_name_isSet;
}

bool OAISetTimerAction::is_timer_name_Valid() const{
    return m_timer_name_isValid;
}

qint32 OAISetTimerAction::getSeconds() const {
    return m_seconds;
}
void OAISetTimerAction::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAISetTimerAction::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAISetTimerAction::is_seconds_Valid() const{
    return m_seconds_isValid;
}

QString OAISetTimerAction::getDurationExpression() const {
    return m_duration_expression;
}
void OAISetTimerAction::setDurationExpression(const QString &duration_expression) {
    m_duration_expression = duration_expression;
    m_duration_expression_isSet = true;
}

bool OAISetTimerAction::is_duration_expression_Set() const{
    return m_duration_expression_isSet;
}

bool OAISetTimerAction::is_duration_expression_Valid() const{
    return m_duration_expression_isValid;
}

bool OAISetTimerAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetTimerAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timer_name_isValid && true;
}

} // namespace OpenAPI
