/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailConfiguration::OAIEmailConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailConfiguration::OAIEmailConfiguration() {
    this->initializeModel();
}

OAIEmailConfiguration::~OAIEmailConfiguration() {}

void OAIEmailConfiguration::initializeModel() {

    m_from_isSet = false;
    m_from_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;
}

void OAIEmailConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailConfiguration::fromJsonObject(QJsonObject json) {

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;
}

QString OAIEmailConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_recipients.isSet()) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    return obj;
}

QString OAIEmailConfiguration::getFrom() const {
    return m_from;
}
void OAIEmailConfiguration::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIEmailConfiguration::is_from_Set() const{
    return m_from_isSet;
}

bool OAIEmailConfiguration::is_from_Valid() const{
    return m_from_isValid;
}

OAIEmailConfiguration_content OAIEmailConfiguration::getContent() const {
    return m_content;
}
void OAIEmailConfiguration::setContent(const OAIEmailConfiguration_content &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIEmailConfiguration::is_content_Set() const{
    return m_content_isSet;
}

bool OAIEmailConfiguration::is_content_Valid() const{
    return m_content_isValid;
}

OAIEmailConfiguration_recipients OAIEmailConfiguration::getRecipients() const {
    return m_recipients;
}
void OAIEmailConfiguration::setRecipients(const OAIEmailConfiguration_recipients &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIEmailConfiguration::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIEmailConfiguration::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAIEmailConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_isValid && m_recipients_isValid && true;
}

} // namespace OpenAPI
