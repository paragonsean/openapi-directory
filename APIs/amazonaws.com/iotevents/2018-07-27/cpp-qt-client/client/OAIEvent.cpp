/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_name_isSet) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_actions.isSet()) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    return obj;
}

QString OAIEvent::getEventName() const {
    return m_event_name;
}
void OAIEvent::setEventName(const QString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIEvent::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIEvent::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIEvent::getCondition() const {
    return m_condition;
}
void OAIEvent::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIEvent::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIEvent::is_condition_Valid() const{
    return m_condition_isValid;
}

QList OAIEvent::getActions() const {
    return m_actions;
}
void OAIEvent::setActions(const QList &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIEvent::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIEvent::is_actions_Valid() const{
    return m_actions_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_name_isValid && true;
}

} // namespace OpenAPI
