/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutedResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutedResource::OAIRoutedResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutedResource::OAIRoutedResource() {
    this->initializeModel();
}

OAIRoutedResource::~OAIRoutedResource() {}

void OAIRoutedResource::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;
}

void OAIRoutedResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutedResource::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;
}

QString OAIRoutedResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutedResource::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    return obj;
}

QString OAIRoutedResource::getName() const {
    return m_name;
}
void OAIRoutedResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoutedResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoutedResource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRoutedResource::getArn() const {
    return m_arn;
}
void OAIRoutedResource::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRoutedResource::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRoutedResource::is_arn_Valid() const{
    return m_arn_isValid;
}

bool OAIRoutedResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutedResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
