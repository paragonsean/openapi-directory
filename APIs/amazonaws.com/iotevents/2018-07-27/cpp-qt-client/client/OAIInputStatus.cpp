/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputStatus::OAIInputStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputStatus::OAIInputStatus() {
    this->initializeModel();
}

OAIInputStatus::~OAIInputStatus() {}

void OAIInputStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInputStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInputStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CREATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputStatus::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UPDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInputStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInputStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInputStatus::CREATING:
            val = "CREATING";
            break;
        case eOAIInputStatus::UPDATING:
            val = "UPDATING";
            break;
        case eOAIInputStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIInputStatus::DELETING:
            val = "DELETING";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInputStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInputStatus::eOAIInputStatus OAIInputStatus::getValue() const {
    return m_value;
}

void OAIInputStatus::setValue(const OAIInputStatus::eOAIInputStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInputStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIInputStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
