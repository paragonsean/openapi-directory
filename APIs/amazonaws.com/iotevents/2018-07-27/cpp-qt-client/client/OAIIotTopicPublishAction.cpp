/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotTopicPublishAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotTopicPublishAction::OAIIotTopicPublishAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotTopicPublishAction::OAIIotTopicPublishAction() {
    this->initializeModel();
}

OAIIotTopicPublishAction::~OAIIotTopicPublishAction() {}

void OAIIotTopicPublishAction::initializeModel() {

    m_mqtt_topic_isSet = false;
    m_mqtt_topic_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIIotTopicPublishAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotTopicPublishAction::fromJsonObject(QJsonObject json) {

    m_mqtt_topic_isValid = ::OpenAPI::fromJsonValue(m_mqtt_topic, json[QString("mqttTopic")]);
    m_mqtt_topic_isSet = !json[QString("mqttTopic")].isNull() && m_mqtt_topic_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIIotTopicPublishAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotTopicPublishAction::asJsonObject() const {
    QJsonObject obj;
    if (m_mqtt_topic_isSet) {
        obj.insert(QString("mqttTopic"), ::OpenAPI::toJsonValue(m_mqtt_topic));
    }
    if (m_payload.isSet()) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIIotTopicPublishAction::getMqttTopic() const {
    return m_mqtt_topic;
}
void OAIIotTopicPublishAction::setMqttTopic(const QString &mqtt_topic) {
    m_mqtt_topic = mqtt_topic;
    m_mqtt_topic_isSet = true;
}

bool OAIIotTopicPublishAction::is_mqtt_topic_Set() const{
    return m_mqtt_topic_isSet;
}

bool OAIIotTopicPublishAction::is_mqtt_topic_Valid() const{
    return m_mqtt_topic_isValid;
}

OAIIotTopicPublishAction_payload OAIIotTopicPublishAction::getPayload() const {
    return m_payload;
}
void OAIIotTopicPublishAction::setPayload(const OAIIotTopicPublishAction_payload &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIIotTopicPublishAction::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIIotTopicPublishAction::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIIotTopicPublishAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mqtt_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotTopicPublishAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mqtt_topic_isValid && true;
}

} // namespace OpenAPI
