/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnEnterLifecycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnEnterLifecycle::OAIOnEnterLifecycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnEnterLifecycle::OAIOnEnterLifecycle() {
    this->initializeModel();
}

OAIOnEnterLifecycle::~OAIOnEnterLifecycle() {}

void OAIOnEnterLifecycle::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;
}

void OAIOnEnterLifecycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnEnterLifecycle::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;
}

QString OAIOnEnterLifecycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnEnterLifecycle::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    return obj;
}

QList OAIOnEnterLifecycle::getEvents() const {
    return m_events;
}
void OAIOnEnterLifecycle::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIOnEnterLifecycle::is_events_Set() const{
    return m_events_isSet;
}

bool OAIOnEnterLifecycle::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIOnEnterLifecycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnEnterLifecycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
