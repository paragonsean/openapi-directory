/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDetectorModelVersionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDetectorModelVersionsResponse::OAIListDetectorModelVersionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDetectorModelVersionsResponse::OAIListDetectorModelVersionsResponse() {
    this->initializeModel();
}

OAIListDetectorModelVersionsResponse::~OAIListDetectorModelVersionsResponse() {}

void OAIListDetectorModelVersionsResponse::initializeModel() {

    m_detector_model_version_summaries_isSet = false;
    m_detector_model_version_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDetectorModelVersionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDetectorModelVersionsResponse::fromJsonObject(QJsonObject json) {

    m_detector_model_version_summaries_isValid = ::OpenAPI::fromJsonValue(m_detector_model_version_summaries, json[QString("detectorModelVersionSummaries")]);
    m_detector_model_version_summaries_isSet = !json[QString("detectorModelVersionSummaries")].isNull() && m_detector_model_version_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDetectorModelVersionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDetectorModelVersionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_version_summaries.isSet()) {
        obj.insert(QString("detectorModelVersionSummaries"), ::OpenAPI::toJsonValue(m_detector_model_version_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDetectorModelVersionsResponse::getDetectorModelVersionSummaries() const {
    return m_detector_model_version_summaries;
}
void OAIListDetectorModelVersionsResponse::setDetectorModelVersionSummaries(const QList &detector_model_version_summaries) {
    m_detector_model_version_summaries = detector_model_version_summaries;
    m_detector_model_version_summaries_isSet = true;
}

bool OAIListDetectorModelVersionsResponse::is_detector_model_version_summaries_Set() const{
    return m_detector_model_version_summaries_isSet;
}

bool OAIListDetectorModelVersionsResponse::is_detector_model_version_summaries_Valid() const{
    return m_detector_model_version_summaries_isValid;
}

QString OAIListDetectorModelVersionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDetectorModelVersionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDetectorModelVersionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDetectorModelVersionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDetectorModelVersionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_version_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDetectorModelVersionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
