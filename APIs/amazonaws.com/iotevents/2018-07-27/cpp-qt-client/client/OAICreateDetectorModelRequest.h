/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDetectorModelRequest.h
 *
 * 
 */

#ifndef OAICreateDetectorModelRequest_H
#define OAICreateDetectorModelRequest_H

#include <QJsonObject>

#include "OAICreateDetectorModelRequest_detectorModelDefinition.h"
#include "OAIEvaluationMethod.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateDetectorModelRequest_detectorModelDefinition;

class OAICreateDetectorModelRequest : public OAIObject {
public:
    OAICreateDetectorModelRequest();
    OAICreateDetectorModelRequest(QString json);
    ~OAICreateDetectorModelRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetectorModelName() const;
    void setDetectorModelName(const QString &detector_model_name);
    bool is_detector_model_name_Set() const;
    bool is_detector_model_name_Valid() const;

    OAICreateDetectorModelRequest_detectorModelDefinition getDetectorModelDefinition() const;
    void setDetectorModelDefinition(const OAICreateDetectorModelRequest_detectorModelDefinition &detector_model_definition);
    bool is_detector_model_definition_Set() const;
    bool is_detector_model_definition_Valid() const;

    QString getDetectorModelDescription() const;
    void setDetectorModelDescription(const QString &detector_model_description);
    bool is_detector_model_description_Set() const;
    bool is_detector_model_description_Valid() const;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIEvaluationMethod getEvaluationMethod() const;
    void setEvaluationMethod(const OAIEvaluationMethod &evaluation_method);
    bool is_evaluation_method_Set() const;
    bool is_evaluation_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_detector_model_name;
    bool m_detector_model_name_isSet;
    bool m_detector_model_name_isValid;

    OAICreateDetectorModelRequest_detectorModelDefinition m_detector_model_definition;
    bool m_detector_model_definition_isSet;
    bool m_detector_model_definition_isValid;

    QString m_detector_model_description;
    bool m_detector_model_description_isSet;
    bool m_detector_model_description_isValid;

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIEvaluationMethod m_evaluation_method;
    bool m_evaluation_method_isSet;
    bool m_evaluation_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDetectorModelRequest)

#endif // OAICreateDetectorModelRequest_H
