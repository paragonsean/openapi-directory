/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetPropertyValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetPropertyValue::OAIAssetPropertyValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetPropertyValue::OAIAssetPropertyValue() {
    this->initializeModel();
}

OAIAssetPropertyValue::~OAIAssetPropertyValue() {}

void OAIAssetPropertyValue::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;
}

void OAIAssetPropertyValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetPropertyValue::fromJsonObject(QJsonObject json) {

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;
}

QString OAIAssetPropertyValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetPropertyValue::asJsonObject() const {
    QJsonObject obj;
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_timestamp.isSet()) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    return obj;
}

OAIAssetPropertyValue_value OAIAssetPropertyValue::getValue() const {
    return m_value;
}
void OAIAssetPropertyValue::setValue(const OAIAssetPropertyValue_value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAssetPropertyValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAssetPropertyValue::is_value_Valid() const{
    return m_value_isValid;
}

OAIAssetPropertyValue_timestamp OAIAssetPropertyValue::getTimestamp() const {
    return m_timestamp;
}
void OAIAssetPropertyValue::setTimestamp(const OAIAssetPropertyValue_timestamp &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAssetPropertyValue::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAssetPropertyValue::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIAssetPropertyValue::getQuality() const {
    return m_quality;
}
void OAIAssetPropertyValue::setQuality(const QString &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIAssetPropertyValue::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIAssetPropertyValue::is_quality_Valid() const{
    return m_quality_isValid;
}

bool OAIAssetPropertyValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetPropertyValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
