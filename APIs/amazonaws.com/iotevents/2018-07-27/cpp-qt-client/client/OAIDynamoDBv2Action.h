/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDynamoDBv2Action.h
 *
 * &lt;p&gt;Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\&quot;&gt;payload&lt;/a&gt;. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;DynamoDBv2Action&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter can be &lt;code&gt;&#39;GreenhouseTemperatureTable&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter can be &lt;code&gt;$variable.ddbtableName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;contentExpression&lt;/code&gt; parameter in &lt;code&gt;Payload&lt;/code&gt; uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;{\\\&quot;sensorID\\\&quot;: \\\&quot;${$input.GreenhouseInput.sensor_id}\\\&quot;, \\\&quot;temperature\\\&quot;: \\\&quot;${$input.GreenhouseInput.temperature * 9 / 5 + 32}\\\&quot;}&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a string concatenation, you must use &lt;code&gt;+&lt;/code&gt;. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter uses a string concatenation. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;GreenhouseTemperatureTable &#39; + $input.GreenhouseInput.date&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;The value for the &lt;code&gt;type&lt;/code&gt; parameter in &lt;code&gt;Payload&lt;/code&gt; must be &lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;
 */

#ifndef OAIDynamoDBv2Action_H
#define OAIDynamoDBv2Action_H

#include <QJsonObject>

#include "OAIPayload.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPayload;

class OAIDynamoDBv2Action : public OAIObject {
public:
    OAIDynamoDBv2Action();
    OAIDynamoDBv2Action(QString json);
    ~OAIDynamoDBv2Action() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTableName() const;
    void setTableName(const QString &table_name);
    bool is_table_name_Set() const;
    bool is_table_name_Valid() const;

    OAIPayload getPayload() const;
    void setPayload(const OAIPayload &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_table_name;
    bool m_table_name_isSet;
    bool m_table_name_isValid;

    OAIPayload m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDynamoDBv2Action)

#endif // OAIDynamoDBv2Action_H
