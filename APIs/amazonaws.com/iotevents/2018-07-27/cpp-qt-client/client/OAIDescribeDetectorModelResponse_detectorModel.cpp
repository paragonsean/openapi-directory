/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDetectorModelResponse_detectorModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDetectorModelResponse_detectorModel::OAIDescribeDetectorModelResponse_detectorModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDetectorModelResponse_detectorModel::OAIDescribeDetectorModelResponse_detectorModel() {
    this->initializeModel();
}

OAIDescribeDetectorModelResponse_detectorModel::~OAIDescribeDetectorModelResponse_detectorModel() {}

void OAIDescribeDetectorModelResponse_detectorModel::initializeModel() {

    m_detector_model_definition_isSet = false;
    m_detector_model_definition_isValid = false;

    m_detector_model_configuration_isSet = false;
    m_detector_model_configuration_isValid = false;
}

void OAIDescribeDetectorModelResponse_detectorModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDetectorModelResponse_detectorModel::fromJsonObject(QJsonObject json) {

    m_detector_model_definition_isValid = ::OpenAPI::fromJsonValue(m_detector_model_definition, json[QString("detectorModelDefinition")]);
    m_detector_model_definition_isSet = !json[QString("detectorModelDefinition")].isNull() && m_detector_model_definition_isValid;

    m_detector_model_configuration_isValid = ::OpenAPI::fromJsonValue(m_detector_model_configuration, json[QString("detectorModelConfiguration")]);
    m_detector_model_configuration_isSet = !json[QString("detectorModelConfiguration")].isNull() && m_detector_model_configuration_isValid;
}

QString OAIDescribeDetectorModelResponse_detectorModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDetectorModelResponse_detectorModel::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_definition.isSet()) {
        obj.insert(QString("detectorModelDefinition"), ::OpenAPI::toJsonValue(m_detector_model_definition));
    }
    if (m_detector_model_configuration.isSet()) {
        obj.insert(QString("detectorModelConfiguration"), ::OpenAPI::toJsonValue(m_detector_model_configuration));
    }
    return obj;
}

OAIDetectorModel_detectorModelDefinition OAIDescribeDetectorModelResponse_detectorModel::getDetectorModelDefinition() const {
    return m_detector_model_definition;
}
void OAIDescribeDetectorModelResponse_detectorModel::setDetectorModelDefinition(const OAIDetectorModel_detectorModelDefinition &detector_model_definition) {
    m_detector_model_definition = detector_model_definition;
    m_detector_model_definition_isSet = true;
}

bool OAIDescribeDetectorModelResponse_detectorModel::is_detector_model_definition_Set() const{
    return m_detector_model_definition_isSet;
}

bool OAIDescribeDetectorModelResponse_detectorModel::is_detector_model_definition_Valid() const{
    return m_detector_model_definition_isValid;
}

OAIDetectorModel_detectorModelConfiguration OAIDescribeDetectorModelResponse_detectorModel::getDetectorModelConfiguration() const {
    return m_detector_model_configuration;
}
void OAIDescribeDetectorModelResponse_detectorModel::setDetectorModelConfiguration(const OAIDetectorModel_detectorModelConfiguration &detector_model_configuration) {
    m_detector_model_configuration = detector_model_configuration;
    m_detector_model_configuration_isSet = true;
}

bool OAIDescribeDetectorModelResponse_detectorModel::is_detector_model_configuration_Set() const{
    return m_detector_model_configuration_isSet;
}

bool OAIDescribeDetectorModelResponse_detectorModel::is_detector_model_configuration_Valid() const{
    return m_detector_model_configuration_isValid;
}

bool OAIDescribeDetectorModelResponse_detectorModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDetectorModelResponse_detectorModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
