/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAction_setVariable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAction_setVariable::OAIAction_setVariable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAction_setVariable::OAIAction_setVariable() {
    this->initializeModel();
}

OAIAction_setVariable::~OAIAction_setVariable() {}

void OAIAction_setVariable::initializeModel() {

    m_variable_name_isSet = false;
    m_variable_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAction_setVariable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAction_setVariable::fromJsonObject(QJsonObject json) {

    m_variable_name_isValid = ::OpenAPI::fromJsonValue(m_variable_name, json[QString("variableName")]);
    m_variable_name_isSet = !json[QString("variableName")].isNull() && m_variable_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAction_setVariable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAction_setVariable::asJsonObject() const {
    QJsonObject obj;
    if (m_variable_name_isSet) {
        obj.insert(QString("variableName"), ::OpenAPI::toJsonValue(m_variable_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIAction_setVariable::getVariableName() const {
    return m_variable_name;
}
void OAIAction_setVariable::setVariableName(const QString &variable_name) {
    m_variable_name = variable_name;
    m_variable_name_isSet = true;
}

bool OAIAction_setVariable::is_variable_name_Set() const{
    return m_variable_name_isSet;
}

bool OAIAction_setVariable::is_variable_name_Valid() const{
    return m_variable_name_isValid;
}

QString OAIAction_setVariable::getValue() const {
    return m_value;
}
void OAIAction_setVariable::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAction_setVariable::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAction_setVariable::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAction_setVariable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_variable_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAction_setVariable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_variable_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
