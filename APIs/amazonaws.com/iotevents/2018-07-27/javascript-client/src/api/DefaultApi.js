/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAlarmModelRequest from '../model/CreateAlarmModelRequest';
import CreateAlarmModelResponse from '../model/CreateAlarmModelResponse';
import CreateDetectorModelRequest from '../model/CreateDetectorModelRequest';
import CreateDetectorModelResponse from '../model/CreateDetectorModelResponse';
import CreateInputRequest from '../model/CreateInputRequest';
import CreateInputResponse from '../model/CreateInputResponse';
import DescribeAlarmModelResponse from '../model/DescribeAlarmModelResponse';
import DescribeDetectorModelAnalysisResponse from '../model/DescribeDetectorModelAnalysisResponse';
import DescribeDetectorModelResponse from '../model/DescribeDetectorModelResponse';
import DescribeInputResponse from '../model/DescribeInputResponse';
import DescribeLoggingOptionsResponse from '../model/DescribeLoggingOptionsResponse';
import GetDetectorModelAnalysisResultsResponse from '../model/GetDetectorModelAnalysisResultsResponse';
import ListAlarmModelVersionsResponse from '../model/ListAlarmModelVersionsResponse';
import ListAlarmModelsResponse from '../model/ListAlarmModelsResponse';
import ListDetectorModelVersionsResponse from '../model/ListDetectorModelVersionsResponse';
import ListDetectorModelsResponse from '../model/ListDetectorModelsResponse';
import ListInputRoutingsRequest from '../model/ListInputRoutingsRequest';
import ListInputRoutingsResponse from '../model/ListInputRoutingsResponse';
import ListInputsResponse from '../model/ListInputsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutLoggingOptionsRequest from '../model/PutLoggingOptionsRequest';
import StartDetectorModelAnalysisRequest from '../model/StartDetectorModelAnalysisRequest';
import StartDetectorModelAnalysisResponse from '../model/StartDetectorModelAnalysisResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAlarmModelRequest from '../model/UpdateAlarmModelRequest';
import UpdateAlarmModelResponse from '../model/UpdateAlarmModelResponse';
import UpdateDetectorModelRequest from '../model/UpdateDetectorModelRequest';
import UpdateDetectorModelResponse from '../model/UpdateDetectorModelResponse';
import UpdateInputRequest from '../model/UpdateInputRequest';
import UpdateInputResponse from '../model/UpdateInputResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-07-27
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAlarmModel operation.
     * @callback module:api/DefaultApi~createAlarmModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAlarmModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an alarm model to monitor an AWS IoT Events input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html\">Create an alarm model</a> in the <i>AWS IoT Events Developer Guide</i>.
     * @param {module:model/CreateAlarmModelRequest} createAlarmModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAlarmModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAlarmModelResponse}
     */
    createAlarmModel(createAlarmModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAlarmModelRequest;
      // verify the required parameter 'createAlarmModelRequest' is set
      if (createAlarmModelRequest === undefined || createAlarmModelRequest === null) {
        throw new Error("Missing the required parameter 'createAlarmModelRequest' when calling createAlarmModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAlarmModelResponse;
      return this.apiClient.callApi(
        '/alarm-models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDetectorModel operation.
     * @callback module:api/DefaultApi~createDetectorModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDetectorModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a detector model.
     * @param {module:model/CreateDetectorModelRequest} createDetectorModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDetectorModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDetectorModelResponse}
     */
    createDetectorModel(createDetectorModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDetectorModelRequest;
      // verify the required parameter 'createDetectorModelRequest' is set
      if (createDetectorModelRequest === undefined || createDetectorModelRequest === null) {
        throw new Error("Missing the required parameter 'createDetectorModelRequest' when calling createDetectorModel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDetectorModelResponse;
      return this.apiClient.callApi(
        '/detector-models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInput operation.
     * @callback module:api/DefaultApi~createInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an input.
     * @param {module:model/CreateInputRequest} createInputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInputResponse}
     */
    createInput(createInputRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInputRequest;
      // verify the required parameter 'createInputRequest' is set
      if (createInputRequest === undefined || createInputRequest === null) {
        throw new Error("Missing the required parameter 'createInputRequest' when calling createInput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateInputResponse;
      return this.apiClient.callApi(
        '/inputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlarmModel operation.
     * @callback module:api/DefaultApi~deleteAlarmModelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an alarm model. Any alarm instances that were created based on this alarm model are also deleted. This action can't be undone.
     * @param {String} alarmModelName The name of the alarm model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAlarmModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAlarmModel(alarmModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alarmModelName' is set
      if (alarmModelName === undefined || alarmModelName === null) {
        throw new Error("Missing the required parameter 'alarmModelName' when calling deleteAlarmModel");
      }

      let pathParams = {
        'alarmModelName': alarmModelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/alarm-models/{alarmModelName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDetectorModel operation.
     * @callback module:api/DefaultApi~deleteDetectorModelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a detector model. Any active instances of the detector model are also deleted.
     * @param {String} detectorModelName The name of the detector model to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDetectorModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDetectorModel(detectorModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorModelName' is set
      if (detectorModelName === undefined || detectorModelName === null) {
        throw new Error("Missing the required parameter 'detectorModelName' when calling deleteDetectorModel");
      }

      let pathParams = {
        'detectorModelName': detectorModelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/detector-models/{detectorModelName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInput operation.
     * @callback module:api/DefaultApi~deleteInputCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an input.
     * @param {String} inputName The name of the input to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInput(inputName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling deleteInput");
      }

      let pathParams = {
        'inputName': inputName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/inputs/{inputName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAlarmModel operation.
     * @callback module:api/DefaultApi~describeAlarmModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAlarmModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an alarm model. If you don't specify a value for the <code>alarmModelVersion</code> parameter, the latest version is returned.
     * @param {String} alarmModelName The name of the alarm model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] The version of the alarm model.
     * @param {module:api/DefaultApi~describeAlarmModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAlarmModelResponse}
     */
    describeAlarmModel(alarmModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alarmModelName' is set
      if (alarmModelName === undefined || alarmModelName === null) {
        throw new Error("Missing the required parameter 'alarmModelName' when calling describeAlarmModel");
      }

      let pathParams = {
        'alarmModelName': alarmModelName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAlarmModelResponse;
      return this.apiClient.callApi(
        '/alarm-models/{alarmModelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDetectorModel operation.
     * @callback module:api/DefaultApi~describeDetectorModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDetectorModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a detector model. If the <code>version</code> parameter is not specified, information about the latest version is returned.
     * @param {String} detectorModelName The name of the detector model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [version] The version of the detector model.
     * @param {module:api/DefaultApi~describeDetectorModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDetectorModelResponse}
     */
    describeDetectorModel(detectorModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorModelName' is set
      if (detectorModelName === undefined || detectorModelName === null) {
        throw new Error("Missing the required parameter 'detectorModelName' when calling describeDetectorModel");
      }

      let pathParams = {
        'detectorModelName': detectorModelName
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDetectorModelResponse;
      return this.apiClient.callApi(
        '/detector-models/{detectorModelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDetectorModelAnalysis operation.
     * @callback module:api/DefaultApi~describeDetectorModelAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDetectorModelAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves runtime information about a detector model analysis.</p> <note> <p>After AWS IoT Events starts analyzing your detector model, you have up to 24 hours to retrieve the analysis results.</p> </note>
     * @param {String} analysisId The ID of the analysis result that you want to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDetectorModelAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDetectorModelAnalysisResponse}
     */
    describeDetectorModelAnalysis(analysisId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'analysisId' is set
      if (analysisId === undefined || analysisId === null) {
        throw new Error("Missing the required parameter 'analysisId' when calling describeDetectorModelAnalysis");
      }

      let pathParams = {
        'analysisId': analysisId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDetectorModelAnalysisResponse;
      return this.apiClient.callApi(
        '/analysis/detector-models/{analysisId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInput operation.
     * @callback module:api/DefaultApi~describeInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an input.
     * @param {String} inputName The name of the input.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInputResponse}
     */
    describeInput(inputName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling describeInput");
      }

      let pathParams = {
        'inputName': inputName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInputResponse;
      return this.apiClient.callApi(
        '/inputs/{inputName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLoggingOptions operation.
     * @callback module:api/DefaultApi~describeLoggingOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLoggingOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the current settings of the AWS IoT Events logging options.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeLoggingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLoggingOptionsResponse}
     */
    describeLoggingOptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeLoggingOptionsResponse;
      return this.apiClient.callApi(
        '/logging', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetectorModelAnalysisResults operation.
     * @callback module:api/DefaultApi~getDetectorModelAnalysisResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDetectorModelAnalysisResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves one or more analysis results of the detector model.</p> <note> <p>After AWS IoT Events starts analyzing your detector model, you have up to 24 hours to retrieve the analysis results.</p> </note>
     * @param {String} analysisId The ID of the analysis result that you want to retrieve.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~getDetectorModelAnalysisResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDetectorModelAnalysisResultsResponse}
     */
    getDetectorModelAnalysisResults(analysisId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'analysisId' is set
      if (analysisId === undefined || analysisId === null) {
        throw new Error("Missing the required parameter 'analysisId' when calling getDetectorModelAnalysisResults");
      }

      let pathParams = {
        'analysisId': analysisId
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDetectorModelAnalysisResultsResponse;
      return this.apiClient.callApi(
        '/analysis/detector-models/{analysisId}/results', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlarmModelVersions operation.
     * @callback module:api/DefaultApi~listAlarmModelVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlarmModelVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the versions of an alarm model. The operation returns only the metadata associated with each alarm model version.
     * @param {String} alarmModelName The name of the alarm model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listAlarmModelVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlarmModelVersionsResponse}
     */
    listAlarmModelVersions(alarmModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alarmModelName' is set
      if (alarmModelName === undefined || alarmModelName === null) {
        throw new Error("Missing the required parameter 'alarmModelName' when calling listAlarmModelVersions");
      }

      let pathParams = {
        'alarmModelName': alarmModelName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAlarmModelVersionsResponse;
      return this.apiClient.callApi(
        '/alarm-models/{alarmModelName}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlarmModels operation.
     * @callback module:api/DefaultApi~listAlarmModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlarmModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the alarm models that you created. The operation returns only the metadata associated with each alarm model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listAlarmModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlarmModelsResponse}
     */
    listAlarmModels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAlarmModelsResponse;
      return this.apiClient.callApi(
        '/alarm-models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDetectorModelVersions operation.
     * @callback module:api/DefaultApi~listDetectorModelVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDetectorModelVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the versions of a detector model. Only the metadata associated with each detector model version is returned.
     * @param {String} detectorModelName The name of the detector model whose versions are returned.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listDetectorModelVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDetectorModelVersionsResponse}
     */
    listDetectorModelVersions(detectorModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorModelName' is set
      if (detectorModelName === undefined || detectorModelName === null) {
        throw new Error("Missing the required parameter 'detectorModelName' when calling listDetectorModelVersions");
      }

      let pathParams = {
        'detectorModelName': detectorModelName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDetectorModelVersionsResponse;
      return this.apiClient.callApi(
        '/detector-models/{detectorModelName}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDetectorModels operation.
     * @callback module:api/DefaultApi~listDetectorModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDetectorModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the detector models you have created. Only the metadata associated with each detector model is returned.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listDetectorModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDetectorModelsResponse}
     */
    listDetectorModels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDetectorModelsResponse;
      return this.apiClient.callApi(
        '/detector-models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputRoutings operation.
     * @callback module:api/DefaultApi~listInputRoutingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInputRoutingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Lists one or more input routings. 
     * @param {module:model/ListInputRoutingsRequest} listInputRoutingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listInputRoutingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInputRoutingsResponse}
     */
    listInputRoutings(listInputRoutingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInputRoutingsRequest;
      // verify the required parameter 'listInputRoutingsRequest' is set
      if (listInputRoutingsRequest === undefined || listInputRoutingsRequest === null) {
        throw new Error("Missing the required parameter 'listInputRoutingsRequest' when calling listInputRoutings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInputRoutingsResponse;
      return this.apiClient.callApi(
        '/input-routings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInputs operation.
     * @callback module:api/DefaultApi~listInputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInputsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the inputs you have created.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listInputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInputsResponse}
     */
    listInputs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInputsResponse;
      return this.apiClient.callApi(
        '/inputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags (metadata) you have assigned to the resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags#resourceArn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putLoggingOptions operation.
     * @callback module:api/DefaultApi~putLoggingOptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets or updates the AWS IoT Events logging options.</p> <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. If you change the policy attached to the role you specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect.</p>
     * @param {module:model/PutLoggingOptionsRequest} putLoggingOptionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putLoggingOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putLoggingOptions(putLoggingOptionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putLoggingOptionsRequest;
      // verify the required parameter 'putLoggingOptionsRequest' is set
      if (putLoggingOptionsRequest === undefined || putLoggingOptionsRequest === null) {
        throw new Error("Missing the required parameter 'putLoggingOptionsRequest' when calling putLoggingOptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/logging', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDetectorModelAnalysis operation.
     * @callback module:api/DefaultApi~startDetectorModelAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDetectorModelAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs an analysis of your detector model. For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html\">Troubleshooting a detector model</a> in the <i>AWS IoT Events Developer Guide</i>.
     * @param {module:model/StartDetectorModelAnalysisRequest} startDetectorModelAnalysisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startDetectorModelAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDetectorModelAnalysisResponse}
     */
    startDetectorModelAnalysis(startDetectorModelAnalysisRequest, opts, callback) {
      opts = opts || {};
      let postBody = startDetectorModelAnalysisRequest;
      // verify the required parameter 'startDetectorModelAnalysisRequest' is set
      if (startDetectorModelAnalysisRequest === undefined || startDetectorModelAnalysisRequest === null) {
        throw new Error("Missing the required parameter 'startDetectorModelAnalysisRequest' when calling startDetectorModelAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartDetectorModelAnalysisResponse;
      return this.apiClient.callApi(
        '/analysis/detector-models/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags#resourceArn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the given tags (metadata) from the resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {Array.<String>} tagKeys A list of the keys of the tags to be removed from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'resourceArn': resourceArn,
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags#resourceArn&tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAlarmModel operation.
     * @callback module:api/DefaultApi~updateAlarmModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAlarmModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an alarm model. Any alarms that were created based on the previous version are deleted and then created again as new data arrives.
     * @param {String} alarmModelName The name of the alarm model.
     * @param {module:model/UpdateAlarmModelRequest} updateAlarmModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAlarmModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAlarmModelResponse}
     */
    updateAlarmModel(alarmModelName, updateAlarmModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAlarmModelRequest;
      // verify the required parameter 'alarmModelName' is set
      if (alarmModelName === undefined || alarmModelName === null) {
        throw new Error("Missing the required parameter 'alarmModelName' when calling updateAlarmModel");
      }
      // verify the required parameter 'updateAlarmModelRequest' is set
      if (updateAlarmModelRequest === undefined || updateAlarmModelRequest === null) {
        throw new Error("Missing the required parameter 'updateAlarmModelRequest' when calling updateAlarmModel");
      }

      let pathParams = {
        'alarmModelName': alarmModelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAlarmModelResponse;
      return this.apiClient.callApi(
        '/alarm-models/{alarmModelName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDetectorModel operation.
     * @callback module:api/DefaultApi~updateDetectorModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDetectorModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a detector model. Detectors (instances) spawned by the previous version are deleted and then re-created as new inputs arrive.
     * @param {String} detectorModelName The name of the detector model that is updated.
     * @param {module:model/UpdateDetectorModelRequest} updateDetectorModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDetectorModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDetectorModelResponse}
     */
    updateDetectorModel(detectorModelName, updateDetectorModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDetectorModelRequest;
      // verify the required parameter 'detectorModelName' is set
      if (detectorModelName === undefined || detectorModelName === null) {
        throw new Error("Missing the required parameter 'detectorModelName' when calling updateDetectorModel");
      }
      // verify the required parameter 'updateDetectorModelRequest' is set
      if (updateDetectorModelRequest === undefined || updateDetectorModelRequest === null) {
        throw new Error("Missing the required parameter 'updateDetectorModelRequest' when calling updateDetectorModel");
      }

      let pathParams = {
        'detectorModelName': detectorModelName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDetectorModelResponse;
      return this.apiClient.callApi(
        '/detector-models/{detectorModelName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInput operation.
     * @callback module:api/DefaultApi~updateInputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an input.
     * @param {String} inputName The name of the input you want to update.
     * @param {module:model/UpdateInputRequest} updateInputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInputResponse}
     */
    updateInput(inputName, updateInputRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInputRequest;
      // verify the required parameter 'inputName' is set
      if (inputName === undefined || inputName === null) {
        throw new Error("Missing the required parameter 'inputName' when calling updateInput");
      }
      // verify the required parameter 'updateInputRequest' is set
      if (updateInputRequest === undefined || updateInputRequest === null) {
        throw new Error("Missing the required parameter 'updateInputRequest' when calling updateInput");
      }

      let pathParams = {
        'inputName': inputName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateInputResponse;
      return this.apiClient.callApi(
        '/inputs/{inputName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
