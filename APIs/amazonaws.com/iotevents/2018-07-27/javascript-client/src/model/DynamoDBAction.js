/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Payload from './Payload';

/**
 * The DynamoDBAction model module.
 * @module model/DynamoDBAction
 * @version 2018-07-27
 */
class DynamoDBAction {
    /**
     * Constructs a new <code>DynamoDBAction</code>.
     * &lt;p&gt;Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\&quot;&gt;payload&lt;/a&gt;. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;DynamoDBAction&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;hashKeyType&lt;/code&gt; parameter can be &lt;code&gt;&#39;STRING&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;hashKeyField&lt;/code&gt; parameter can be &lt;code&gt;$input.GreenhouseInput.name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;hashKeyValue&lt;/code&gt; parameter uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a string concatenation, you must use &lt;code&gt;+&lt;/code&gt;. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter uses a string concatenation. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;GreenhouseTemperatureTable &#39; + $input.GreenhouseInput.date&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the defined payload type is a string, &lt;code&gt;DynamoDBAction&lt;/code&gt; writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the &lt;code&gt;payloadField&lt;/code&gt; parameter is &lt;code&gt;&amp;lt;payload-field&amp;gt;_raw&lt;/code&gt;.&lt;/p&gt;
     * @alias module:model/DynamoDBAction
     * @param hashKeyField {String} 
     * @param hashKeyValue {String} 
     * @param tableName {String} 
     */
    constructor(hashKeyField, hashKeyValue, tableName) { 
        
        DynamoDBAction.initialize(this, hashKeyField, hashKeyValue, tableName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hashKeyField, hashKeyValue, tableName) { 
        obj['hashKeyField'] = hashKeyField;
        obj['hashKeyValue'] = hashKeyValue;
        obj['tableName'] = tableName;
    }

    /**
     * Constructs a <code>DynamoDBAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DynamoDBAction} obj Optional instance to populate.
     * @return {module:model/DynamoDBAction} The populated <code>DynamoDBAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DynamoDBAction();

            if (data.hasOwnProperty('hashKeyType')) {
                obj['hashKeyType'] = ApiClient.convertToType(data['hashKeyType'], 'String');
            }
            if (data.hasOwnProperty('hashKeyField')) {
                obj['hashKeyField'] = ApiClient.convertToType(data['hashKeyField'], 'String');
            }
            if (data.hasOwnProperty('hashKeyValue')) {
                obj['hashKeyValue'] = ApiClient.convertToType(data['hashKeyValue'], 'String');
            }
            if (data.hasOwnProperty('rangeKeyType')) {
                obj['rangeKeyType'] = ApiClient.convertToType(data['rangeKeyType'], 'String');
            }
            if (data.hasOwnProperty('rangeKeyField')) {
                obj['rangeKeyField'] = ApiClient.convertToType(data['rangeKeyField'], 'String');
            }
            if (data.hasOwnProperty('rangeKeyValue')) {
                obj['rangeKeyValue'] = ApiClient.convertToType(data['rangeKeyValue'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
            }
            if (data.hasOwnProperty('payloadField')) {
                obj['payloadField'] = ApiClient.convertToType(data['payloadField'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
            if (data.hasOwnProperty('payload')) {
                obj['payload'] = Payload.constructFromObject(data['payload']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DynamoDBAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DynamoDBAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DynamoDBAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `hashKeyType`
        if (data['hashKeyType']) { // data not null
          String.validateJSON(data['hashKeyType']);
        }
        // validate the optional field `hashKeyField`
        if (data['hashKeyField']) { // data not null
          String.validateJSON(data['hashKeyField']);
        }
        // validate the optional field `hashKeyValue`
        if (data['hashKeyValue']) { // data not null
          String.validateJSON(data['hashKeyValue']);
        }
        // validate the optional field `rangeKeyType`
        if (data['rangeKeyType']) { // data not null
          String.validateJSON(data['rangeKeyType']);
        }
        // validate the optional field `rangeKeyField`
        if (data['rangeKeyField']) { // data not null
          String.validateJSON(data['rangeKeyField']);
        }
        // validate the optional field `rangeKeyValue`
        if (data['rangeKeyValue']) { // data not null
          String.validateJSON(data['rangeKeyValue']);
        }
        // validate the optional field `operation`
        if (data['operation']) { // data not null
          String.validateJSON(data['operation']);
        }
        // validate the optional field `payloadField`
        if (data['payloadField']) { // data not null
          String.validateJSON(data['payloadField']);
        }
        // validate the optional field `tableName`
        if (data['tableName']) { // data not null
          String.validateJSON(data['tableName']);
        }
        // validate the optional field `payload`
        if (data['payload']) { // data not null
          Payload.validateJSON(data['payload']);
        }

        return true;
    }


}

DynamoDBAction.RequiredProperties = ["hashKeyField", "hashKeyValue", "tableName"];

/**
 * @member {String} hashKeyType
 */
DynamoDBAction.prototype['hashKeyType'] = undefined;

/**
 * @member {String} hashKeyField
 */
DynamoDBAction.prototype['hashKeyField'] = undefined;

/**
 * @member {String} hashKeyValue
 */
DynamoDBAction.prototype['hashKeyValue'] = undefined;

/**
 * @member {String} rangeKeyType
 */
DynamoDBAction.prototype['rangeKeyType'] = undefined;

/**
 * @member {String} rangeKeyField
 */
DynamoDBAction.prototype['rangeKeyField'] = undefined;

/**
 * @member {String} rangeKeyValue
 */
DynamoDBAction.prototype['rangeKeyValue'] = undefined;

/**
 * @member {String} operation
 */
DynamoDBAction.prototype['operation'] = undefined;

/**
 * @member {String} payloadField
 */
DynamoDBAction.prototype['payloadField'] = undefined;

/**
 * @member {String} tableName
 */
DynamoDBAction.prototype['tableName'] = undefined;

/**
 * @member {module:model/Payload} payload
 */
DynamoDBAction.prototype['payload'] = undefined;






export default DynamoDBAction;

