/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTEvents);
  }
}(this, function(expect, AwsIoTEvents) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTEvents.Action();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Action', function() {
    it('should create an instance of Action', function() {
      // uncomment below and update the code to test Action
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be.a(AwsIoTEvents.Action);
    });

    it('should have the property setVariable (base name: "setVariable")', function() {
      // uncomment below and update the code to test the property setVariable
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property sns (base name: "sns")', function() {
      // uncomment below and update the code to test the property sns
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property iotTopicPublish (base name: "iotTopicPublish")', function() {
      // uncomment below and update the code to test the property iotTopicPublish
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property setTimer (base name: "setTimer")', function() {
      // uncomment below and update the code to test the property setTimer
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property clearTimer (base name: "clearTimer")', function() {
      // uncomment below and update the code to test the property clearTimer
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property resetTimer (base name: "resetTimer")', function() {
      // uncomment below and update the code to test the property resetTimer
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property lambda (base name: "lambda")', function() {
      // uncomment below and update the code to test the property lambda
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property iotEvents (base name: "iotEvents")', function() {
      // uncomment below and update the code to test the property iotEvents
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property sqs (base name: "sqs")', function() {
      // uncomment below and update the code to test the property sqs
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property firehose (base name: "firehose")', function() {
      // uncomment below and update the code to test the property firehose
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property dynamoDB (base name: "dynamoDB")', function() {
      // uncomment below and update the code to test the property dynamoDB
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property dynamoDBv2 (base name: "dynamoDBv2")', function() {
      // uncomment below and update the code to test the property dynamoDBv2
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

    it('should have the property iotSiteWise (base name: "iotSiteWise")', function() {
      // uncomment below and update the code to test the property iotSiteWise
      //var instance = new AwsIoTEvents.Action();
      //expect(instance).to.be();
    });

  });

}));
