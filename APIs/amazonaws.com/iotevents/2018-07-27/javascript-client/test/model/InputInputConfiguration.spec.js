/**
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTEvents);
  }
}(this, function(expect, AwsIoTEvents) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTEvents.InputInputConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InputInputConfiguration', function() {
    it('should create an instance of InputInputConfiguration', function() {
      // uncomment below and update the code to test InputInputConfiguration
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be.a(AwsIoTEvents.InputInputConfiguration);
    });

    it('should have the property inputName (base name: "inputName")', function() {
      // uncomment below and update the code to test the property inputName
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property inputDescription (base name: "inputDescription")', function() {
      // uncomment below and update the code to test the property inputDescription
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property inputArn (base name: "inputArn")', function() {
      // uncomment below and update the code to test the property inputArn
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdateTime (base name: "lastUpdateTime")', function() {
      // uncomment below and update the code to test the property lastUpdateTime
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AwsIoTEvents.InputInputConfiguration();
      //expect(instance).to.be();
    });

  });

}));
