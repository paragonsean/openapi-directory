/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A structure that contains timestamp information. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html\&quot;&gt;TimeInNanos&lt;/a&gt; in the &lt;i&gt;AWS IoT SiteWise API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;AssetPropertyTimestamp&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;timeInSeconds&lt;/code&gt; parameter can be &lt;code&gt;&#39;1586400675&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;offsetInNanos&lt;/code&gt; parameter can be &lt;code&gt;$variable.time&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;timeInSeconds&lt;/code&gt; parameter uses a substitution template.&lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;${$input.TemperatureInput.sensorData.timestamp / 1000}&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetPropertyTimestamp {
  public static final String SERIALIZED_NAME_TIME_IN_SECONDS = "timeInSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_IN_SECONDS)
  private String timeInSeconds;

  public static final String SERIALIZED_NAME_OFFSET_IN_NANOS = "offsetInNanos";
  @SerializedName(SERIALIZED_NAME_OFFSET_IN_NANOS)
  private String offsetInNanos;

  public AssetPropertyTimestamp() {
  }

  public AssetPropertyTimestamp timeInSeconds(String timeInSeconds) {
    this.timeInSeconds = timeInSeconds;
    return this;
  }

  /**
   * Get timeInSeconds
   * @return timeInSeconds
   */
  @javax.annotation.Nonnull
  public String getTimeInSeconds() {
    return timeInSeconds;
  }

  public void setTimeInSeconds(String timeInSeconds) {
    this.timeInSeconds = timeInSeconds;
  }


  public AssetPropertyTimestamp offsetInNanos(String offsetInNanos) {
    this.offsetInNanos = offsetInNanos;
    return this;
  }

  /**
   * Get offsetInNanos
   * @return offsetInNanos
   */
  @javax.annotation.Nullable
  public String getOffsetInNanos() {
    return offsetInNanos;
  }

  public void setOffsetInNanos(String offsetInNanos) {
    this.offsetInNanos = offsetInNanos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetPropertyTimestamp assetPropertyTimestamp = (AssetPropertyTimestamp) o;
    return Objects.equals(this.timeInSeconds, assetPropertyTimestamp.timeInSeconds) &&
        Objects.equals(this.offsetInNanos, assetPropertyTimestamp.offsetInNanos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeInSeconds, offsetInNanos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetPropertyTimestamp {\n");
    sb.append("    timeInSeconds: ").append(toIndentedString(timeInSeconds)).append("\n");
    sb.append("    offsetInNanos: ").append(toIndentedString(offsetInNanos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("timeInSeconds");
    openapiFields.add("offsetInNanos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("timeInSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetPropertyTimestamp
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetPropertyTimestamp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetPropertyTimestamp is not found in the empty JSON string", AssetPropertyTimestamp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetPropertyTimestamp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetPropertyTimestamp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetPropertyTimestamp.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `timeInSeconds`
      String.validateJsonElement(jsonObj.get("timeInSeconds"));
      // validate the optional field `offsetInNanos`
      if (jsonObj.get("offsetInNanos") != null && !jsonObj.get("offsetInNanos").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("offsetInNanos"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetPropertyTimestamp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetPropertyTimestamp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetPropertyTimestamp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetPropertyTimestamp.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetPropertyTimestamp>() {
           @Override
           public void write(JsonWriter out, AssetPropertyTimestamp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetPropertyTimestamp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetPropertyTimestamp given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetPropertyTimestamp
   * @throws IOException if the JSON string is invalid with respect to AssetPropertyTimestamp
   */
  public static AssetPropertyTimestamp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetPropertyTimestamp.class);
  }

  /**
   * Convert an instance of AssetPropertyTimestamp to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

