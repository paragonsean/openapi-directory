/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;A structure that contains an asset property value. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html\&quot;&gt;Variant&lt;/a&gt; in the &lt;i&gt;AWS IoT SiteWise API Reference&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;AssetPropertyVariant&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;integerValue&lt;/code&gt; parameter can be &lt;code&gt;&#39;100&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or parameters. For example, the value for the &lt;code&gt;booleanValue&lt;/code&gt; parameter can be &lt;code&gt;$variable.offline&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. &lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;doubleValue&lt;/code&gt; parameter uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;${$input.TemperatureInput.sensorData.temperature * 6 / 5 + 32}&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You must specify one of the following value types, depending on the &lt;code&gt;dataType&lt;/code&gt; of the specified asset property. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html\&quot;&gt;AssetProperty&lt;/a&gt; in the &lt;i&gt;AWS IoT SiteWise API Reference&lt;/i&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetPropertyVariant {
  public static final String SERIALIZED_NAME_STRING_VALUE = "stringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public static final String SERIALIZED_NAME_INTEGER_VALUE = "integerValue";
  @SerializedName(SERIALIZED_NAME_INTEGER_VALUE)
  private String integerValue;

  public static final String SERIALIZED_NAME_DOUBLE_VALUE = "doubleValue";
  @SerializedName(SERIALIZED_NAME_DOUBLE_VALUE)
  private String doubleValue;

  public static final String SERIALIZED_NAME_BOOLEAN_VALUE = "booleanValue";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_VALUE)
  private String booleanValue;

  public AssetPropertyVariant() {
  }

  public AssetPropertyVariant stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * Get stringValue
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public AssetPropertyVariant integerValue(String integerValue) {
    this.integerValue = integerValue;
    return this;
  }

  /**
   * Get integerValue
   * @return integerValue
   */
  @javax.annotation.Nullable
  public String getIntegerValue() {
    return integerValue;
  }

  public void setIntegerValue(String integerValue) {
    this.integerValue = integerValue;
  }


  public AssetPropertyVariant doubleValue(String doubleValue) {
    this.doubleValue = doubleValue;
    return this;
  }

  /**
   * Get doubleValue
   * @return doubleValue
   */
  @javax.annotation.Nullable
  public String getDoubleValue() {
    return doubleValue;
  }

  public void setDoubleValue(String doubleValue) {
    this.doubleValue = doubleValue;
  }


  public AssetPropertyVariant booleanValue(String booleanValue) {
    this.booleanValue = booleanValue;
    return this;
  }

  /**
   * Get booleanValue
   * @return booleanValue
   */
  @javax.annotation.Nullable
  public String getBooleanValue() {
    return booleanValue;
  }

  public void setBooleanValue(String booleanValue) {
    this.booleanValue = booleanValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetPropertyVariant assetPropertyVariant = (AssetPropertyVariant) o;
    return Objects.equals(this.stringValue, assetPropertyVariant.stringValue) &&
        Objects.equals(this.integerValue, assetPropertyVariant.integerValue) &&
        Objects.equals(this.doubleValue, assetPropertyVariant.doubleValue) &&
        Objects.equals(this.booleanValue, assetPropertyVariant.booleanValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stringValue, integerValue, doubleValue, booleanValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetPropertyVariant {\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    integerValue: ").append(toIndentedString(integerValue)).append("\n");
    sb.append("    doubleValue: ").append(toIndentedString(doubleValue)).append("\n");
    sb.append("    booleanValue: ").append(toIndentedString(booleanValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stringValue");
    openapiFields.add("integerValue");
    openapiFields.add("doubleValue");
    openapiFields.add("booleanValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetPropertyVariant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetPropertyVariant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetPropertyVariant is not found in the empty JSON string", AssetPropertyVariant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetPropertyVariant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetPropertyVariant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `stringValue`
      if (jsonObj.get("stringValue") != null && !jsonObj.get("stringValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stringValue"));
      }
      // validate the optional field `integerValue`
      if (jsonObj.get("integerValue") != null && !jsonObj.get("integerValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("integerValue"));
      }
      // validate the optional field `doubleValue`
      if (jsonObj.get("doubleValue") != null && !jsonObj.get("doubleValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("doubleValue"));
      }
      // validate the optional field `booleanValue`
      if (jsonObj.get("booleanValue") != null && !jsonObj.get("booleanValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("booleanValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetPropertyVariant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetPropertyVariant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetPropertyVariant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetPropertyVariant.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetPropertyVariant>() {
           @Override
           public void write(JsonWriter out, AssetPropertyVariant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetPropertyVariant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetPropertyVariant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetPropertyVariant
   * @throws IOException if the JSON string is invalid with respect to AssetPropertyVariant
   */
  public static AssetPropertyVariant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetPropertyVariant.class);
  }

  /**
   * Convert an instance of AssetPropertyVariant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

