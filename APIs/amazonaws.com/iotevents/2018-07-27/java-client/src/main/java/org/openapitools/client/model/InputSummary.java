/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.InputStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the input.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputSummary {
  public static final String SERIALIZED_NAME_INPUT_NAME = "inputName";
  @SerializedName(SERIALIZED_NAME_INPUT_NAME)
  private String inputName;

  public static final String SERIALIZED_NAME_INPUT_DESCRIPTION = "inputDescription";
  @SerializedName(SERIALIZED_NAME_INPUT_DESCRIPTION)
  private String inputDescription;

  public static final String SERIALIZED_NAME_INPUT_ARN = "inputArn";
  @SerializedName(SERIALIZED_NAME_INPUT_ARN)
  private String inputArn;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private InputStatus status;

  public InputSummary() {
  }

  public InputSummary inputName(String inputName) {
    this.inputName = inputName;
    return this;
  }

  /**
   * Get inputName
   * @return inputName
   */
  @javax.annotation.Nullable
  public String getInputName() {
    return inputName;
  }

  public void setInputName(String inputName) {
    this.inputName = inputName;
  }


  public InputSummary inputDescription(String inputDescription) {
    this.inputDescription = inputDescription;
    return this;
  }

  /**
   * Get inputDescription
   * @return inputDescription
   */
  @javax.annotation.Nullable
  public String getInputDescription() {
    return inputDescription;
  }

  public void setInputDescription(String inputDescription) {
    this.inputDescription = inputDescription;
  }


  public InputSummary inputArn(String inputArn) {
    this.inputArn = inputArn;
    return this;
  }

  /**
   * Get inputArn
   * @return inputArn
   */
  @javax.annotation.Nullable
  public String getInputArn() {
    return inputArn;
  }

  public void setInputArn(String inputArn) {
    this.inputArn = inputArn;
  }


  public InputSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public InputSummary lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Get lastUpdateTime
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public InputSummary status(InputStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public InputStatus getStatus() {
    return status;
  }

  public void setStatus(InputStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputSummary inputSummary = (InputSummary) o;
    return Objects.equals(this.inputName, inputSummary.inputName) &&
        Objects.equals(this.inputDescription, inputSummary.inputDescription) &&
        Objects.equals(this.inputArn, inputSummary.inputArn) &&
        Objects.equals(this.creationTime, inputSummary.creationTime) &&
        Objects.equals(this.lastUpdateTime, inputSummary.lastUpdateTime) &&
        Objects.equals(this.status, inputSummary.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputName, inputDescription, inputArn, creationTime, lastUpdateTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputSummary {\n");
    sb.append("    inputName: ").append(toIndentedString(inputName)).append("\n");
    sb.append("    inputDescription: ").append(toIndentedString(inputDescription)).append("\n");
    sb.append("    inputArn: ").append(toIndentedString(inputArn)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputName");
    openapiFields.add("inputDescription");
    openapiFields.add("inputArn");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputSummary is not found in the empty JSON string", InputSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `inputName`
      if (jsonObj.get("inputName") != null && !jsonObj.get("inputName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputName"));
      }
      // validate the optional field `inputDescription`
      if (jsonObj.get("inputDescription") != null && !jsonObj.get("inputDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputDescription"));
      }
      // validate the optional field `inputArn`
      if (jsonObj.get("inputArn") != null && !jsonObj.get("inputArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputArn"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdateTime`
      if (jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdateTime"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        InputStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<InputSummary>() {
           @Override
           public void write(JsonWriter out, InputSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputSummary
   * @throws IOException if the JSON string is invalid with respect to InputSummary
   */
  public static InputSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputSummary.class);
  }

  /**
   * Convert an instance of InputSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

