/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateAlarmModelRequestAlarmCapabilities;
import org.openapitools.client.model.CreateAlarmModelRequestAlarmEventActions;
import org.openapitools.client.model.CreateAlarmModelRequestAlarmNotification;
import org.openapitools.client.model.CreateAlarmModelRequestAlarmRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAlarmModelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAlarmModelRequest {
  public static final String SERIALIZED_NAME_ALARM_MODEL_DESCRIPTION = "alarmModelDescription";
  @SerializedName(SERIALIZED_NAME_ALARM_MODEL_DESCRIPTION)
  private String alarmModelDescription;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_ALARM_RULE = "alarmRule";
  @SerializedName(SERIALIZED_NAME_ALARM_RULE)
  private CreateAlarmModelRequestAlarmRule alarmRule;

  public static final String SERIALIZED_NAME_ALARM_NOTIFICATION = "alarmNotification";
  @SerializedName(SERIALIZED_NAME_ALARM_NOTIFICATION)
  private CreateAlarmModelRequestAlarmNotification alarmNotification;

  public static final String SERIALIZED_NAME_ALARM_EVENT_ACTIONS = "alarmEventActions";
  @SerializedName(SERIALIZED_NAME_ALARM_EVENT_ACTIONS)
  private CreateAlarmModelRequestAlarmEventActions alarmEventActions;

  public static final String SERIALIZED_NAME_ALARM_CAPABILITIES = "alarmCapabilities";
  @SerializedName(SERIALIZED_NAME_ALARM_CAPABILITIES)
  private CreateAlarmModelRequestAlarmCapabilities alarmCapabilities;

  public UpdateAlarmModelRequest() {
  }

  public UpdateAlarmModelRequest alarmModelDescription(String alarmModelDescription) {
    this.alarmModelDescription = alarmModelDescription;
    return this;
  }

  /**
   * The description of the alarm model.
   * @return alarmModelDescription
   */
  @javax.annotation.Nullable
  public String getAlarmModelDescription() {
    return alarmModelDescription;
  }

  public void setAlarmModelDescription(String alarmModelDescription) {
    this.alarmModelDescription = alarmModelDescription;
  }


  public UpdateAlarmModelRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt;.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public UpdateAlarmModelRequest severity(Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * A non-negative integer that reflects the severity level of the alarm.
   * minimum: 0
   * maximum: 2147483647
   * @return severity
   */
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public UpdateAlarmModelRequest alarmRule(CreateAlarmModelRequestAlarmRule alarmRule) {
    this.alarmRule = alarmRule;
    return this;
  }

  /**
   * Get alarmRule
   * @return alarmRule
   */
  @javax.annotation.Nonnull
  public CreateAlarmModelRequestAlarmRule getAlarmRule() {
    return alarmRule;
  }

  public void setAlarmRule(CreateAlarmModelRequestAlarmRule alarmRule) {
    this.alarmRule = alarmRule;
  }


  public UpdateAlarmModelRequest alarmNotification(CreateAlarmModelRequestAlarmNotification alarmNotification) {
    this.alarmNotification = alarmNotification;
    return this;
  }

  /**
   * Get alarmNotification
   * @return alarmNotification
   */
  @javax.annotation.Nullable
  public CreateAlarmModelRequestAlarmNotification getAlarmNotification() {
    return alarmNotification;
  }

  public void setAlarmNotification(CreateAlarmModelRequestAlarmNotification alarmNotification) {
    this.alarmNotification = alarmNotification;
  }


  public UpdateAlarmModelRequest alarmEventActions(CreateAlarmModelRequestAlarmEventActions alarmEventActions) {
    this.alarmEventActions = alarmEventActions;
    return this;
  }

  /**
   * Get alarmEventActions
   * @return alarmEventActions
   */
  @javax.annotation.Nullable
  public CreateAlarmModelRequestAlarmEventActions getAlarmEventActions() {
    return alarmEventActions;
  }

  public void setAlarmEventActions(CreateAlarmModelRequestAlarmEventActions alarmEventActions) {
    this.alarmEventActions = alarmEventActions;
  }


  public UpdateAlarmModelRequest alarmCapabilities(CreateAlarmModelRequestAlarmCapabilities alarmCapabilities) {
    this.alarmCapabilities = alarmCapabilities;
    return this;
  }

  /**
   * Get alarmCapabilities
   * @return alarmCapabilities
   */
  @javax.annotation.Nullable
  public CreateAlarmModelRequestAlarmCapabilities getAlarmCapabilities() {
    return alarmCapabilities;
  }

  public void setAlarmCapabilities(CreateAlarmModelRequestAlarmCapabilities alarmCapabilities) {
    this.alarmCapabilities = alarmCapabilities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAlarmModelRequest updateAlarmModelRequest = (UpdateAlarmModelRequest) o;
    return Objects.equals(this.alarmModelDescription, updateAlarmModelRequest.alarmModelDescription) &&
        Objects.equals(this.roleArn, updateAlarmModelRequest.roleArn) &&
        Objects.equals(this.severity, updateAlarmModelRequest.severity) &&
        Objects.equals(this.alarmRule, updateAlarmModelRequest.alarmRule) &&
        Objects.equals(this.alarmNotification, updateAlarmModelRequest.alarmNotification) &&
        Objects.equals(this.alarmEventActions, updateAlarmModelRequest.alarmEventActions) &&
        Objects.equals(this.alarmCapabilities, updateAlarmModelRequest.alarmCapabilities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmModelDescription, roleArn, severity, alarmRule, alarmNotification, alarmEventActions, alarmCapabilities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAlarmModelRequest {\n");
    sb.append("    alarmModelDescription: ").append(toIndentedString(alarmModelDescription)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    alarmRule: ").append(toIndentedString(alarmRule)).append("\n");
    sb.append("    alarmNotification: ").append(toIndentedString(alarmNotification)).append("\n");
    sb.append("    alarmEventActions: ").append(toIndentedString(alarmEventActions)).append("\n");
    sb.append("    alarmCapabilities: ").append(toIndentedString(alarmCapabilities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alarmModelDescription");
    openapiFields.add("roleArn");
    openapiFields.add("severity");
    openapiFields.add("alarmRule");
    openapiFields.add("alarmNotification");
    openapiFields.add("alarmEventActions");
    openapiFields.add("alarmCapabilities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("roleArn");
    openapiRequiredFields.add("alarmRule");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAlarmModelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAlarmModelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAlarmModelRequest is not found in the empty JSON string", UpdateAlarmModelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAlarmModelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAlarmModelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAlarmModelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alarmModelDescription") != null && !jsonObj.get("alarmModelDescription").isJsonNull()) && !jsonObj.get("alarmModelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alarmModelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alarmModelDescription").toString()));
      }
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      // validate the required field `alarmRule`
      CreateAlarmModelRequestAlarmRule.validateJsonElement(jsonObj.get("alarmRule"));
      // validate the optional field `alarmNotification`
      if (jsonObj.get("alarmNotification") != null && !jsonObj.get("alarmNotification").isJsonNull()) {
        CreateAlarmModelRequestAlarmNotification.validateJsonElement(jsonObj.get("alarmNotification"));
      }
      // validate the optional field `alarmEventActions`
      if (jsonObj.get("alarmEventActions") != null && !jsonObj.get("alarmEventActions").isJsonNull()) {
        CreateAlarmModelRequestAlarmEventActions.validateJsonElement(jsonObj.get("alarmEventActions"));
      }
      // validate the optional field `alarmCapabilities`
      if (jsonObj.get("alarmCapabilities") != null && !jsonObj.get("alarmCapabilities").isJsonNull()) {
        CreateAlarmModelRequestAlarmCapabilities.validateJsonElement(jsonObj.get("alarmCapabilities"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAlarmModelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAlarmModelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAlarmModelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAlarmModelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAlarmModelRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAlarmModelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAlarmModelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAlarmModelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAlarmModelRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAlarmModelRequest
   */
  public static UpdateAlarmModelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAlarmModelRequest.class);
  }

  /**
   * Convert an instance of UpdateAlarmModelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

