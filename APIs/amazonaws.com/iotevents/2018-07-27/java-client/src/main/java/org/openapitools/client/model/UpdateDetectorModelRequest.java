/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateDetectorModelRequestDetectorModelDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDetectorModelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDetectorModelRequest {
  public static final String SERIALIZED_NAME_DETECTOR_MODEL_DEFINITION = "detectorModelDefinition";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_DEFINITION)
  private CreateDetectorModelRequestDetectorModelDefinition detectorModelDefinition;

  public static final String SERIALIZED_NAME_DETECTOR_MODEL_DESCRIPTION = "detectorModelDescription";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_DESCRIPTION)
  private String detectorModelDescription;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  /**
   * Information about the order in which events are evaluated and how actions are executed. 
   */
  @JsonAdapter(EvaluationMethodEnum.Adapter.class)
  public enum EvaluationMethodEnum {
    BATCH("BATCH"),
    
    SERIAL("SERIAL");

    private String value;

    EvaluationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationMethodEnum fromValue(String value) {
      for (EvaluationMethodEnum b : EvaluationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_METHOD = "evaluationMethod";
  @SerializedName(SERIALIZED_NAME_EVALUATION_METHOD)
  private EvaluationMethodEnum evaluationMethod;

  public UpdateDetectorModelRequest() {
  }

  public UpdateDetectorModelRequest detectorModelDefinition(CreateDetectorModelRequestDetectorModelDefinition detectorModelDefinition) {
    this.detectorModelDefinition = detectorModelDefinition;
    return this;
  }

  /**
   * Get detectorModelDefinition
   * @return detectorModelDefinition
   */
  @javax.annotation.Nonnull
  public CreateDetectorModelRequestDetectorModelDefinition getDetectorModelDefinition() {
    return detectorModelDefinition;
  }

  public void setDetectorModelDefinition(CreateDetectorModelRequestDetectorModelDefinition detectorModelDefinition) {
    this.detectorModelDefinition = detectorModelDefinition;
  }


  public UpdateDetectorModelRequest detectorModelDescription(String detectorModelDescription) {
    this.detectorModelDescription = detectorModelDescription;
    return this;
  }

  /**
   * A brief description of the detector model.
   * @return detectorModelDescription
   */
  @javax.annotation.Nullable
  public String getDetectorModelDescription() {
    return detectorModelDescription;
  }

  public void setDetectorModelDescription(String detectorModelDescription) {
    this.detectorModelDescription = detectorModelDescription;
  }


  public UpdateDetectorModelRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the role that grants permission to AWS IoT Events to perform its operations.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public UpdateDetectorModelRequest evaluationMethod(EvaluationMethodEnum evaluationMethod) {
    this.evaluationMethod = evaluationMethod;
    return this;
  }

  /**
   * Information about the order in which events are evaluated and how actions are executed. 
   * @return evaluationMethod
   */
  @javax.annotation.Nullable
  public EvaluationMethodEnum getEvaluationMethod() {
    return evaluationMethod;
  }

  public void setEvaluationMethod(EvaluationMethodEnum evaluationMethod) {
    this.evaluationMethod = evaluationMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDetectorModelRequest updateDetectorModelRequest = (UpdateDetectorModelRequest) o;
    return Objects.equals(this.detectorModelDefinition, updateDetectorModelRequest.detectorModelDefinition) &&
        Objects.equals(this.detectorModelDescription, updateDetectorModelRequest.detectorModelDescription) &&
        Objects.equals(this.roleArn, updateDetectorModelRequest.roleArn) &&
        Objects.equals(this.evaluationMethod, updateDetectorModelRequest.evaluationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detectorModelDefinition, detectorModelDescription, roleArn, evaluationMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDetectorModelRequest {\n");
    sb.append("    detectorModelDefinition: ").append(toIndentedString(detectorModelDefinition)).append("\n");
    sb.append("    detectorModelDescription: ").append(toIndentedString(detectorModelDescription)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    evaluationMethod: ").append(toIndentedString(evaluationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detectorModelDefinition");
    openapiFields.add("detectorModelDescription");
    openapiFields.add("roleArn");
    openapiFields.add("evaluationMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("detectorModelDefinition");
    openapiRequiredFields.add("roleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDetectorModelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDetectorModelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDetectorModelRequest is not found in the empty JSON string", UpdateDetectorModelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDetectorModelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDetectorModelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateDetectorModelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `detectorModelDefinition`
      CreateDetectorModelRequestDetectorModelDefinition.validateJsonElement(jsonObj.get("detectorModelDefinition"));
      if ((jsonObj.get("detectorModelDescription") != null && !jsonObj.get("detectorModelDescription").isJsonNull()) && !jsonObj.get("detectorModelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectorModelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectorModelDescription").toString()));
      }
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      if ((jsonObj.get("evaluationMethod") != null && !jsonObj.get("evaluationMethod").isJsonNull()) && !jsonObj.get("evaluationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMethod").toString()));
      }
      // validate the optional field `evaluationMethod`
      if (jsonObj.get("evaluationMethod") != null && !jsonObj.get("evaluationMethod").isJsonNull()) {
        EvaluationMethodEnum.validateJsonElement(jsonObj.get("evaluationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDetectorModelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDetectorModelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDetectorModelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDetectorModelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDetectorModelRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDetectorModelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDetectorModelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDetectorModelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDetectorModelRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateDetectorModelRequest
   */
  public static UpdateDetectorModelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDetectorModelRequest.class);
  }

  /**
   * Convert an instance of UpdateDetectorModelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

