/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DynamoDBAction;
import org.openapitools.client.model.DynamoDBv2Action;
import org.openapitools.client.model.FirehoseAction;
import org.openapitools.client.model.IotEventsAction;
import org.openapitools.client.model.IotSiteWiseAction;
import org.openapitools.client.model.IotTopicPublishAction;
import org.openapitools.client.model.LambdaAction;
import org.openapitools.client.model.SNSTopicPublishAction;
import org.openapitools.client.model.SqsAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies one of the following actions to receive notifications when the alarm state changes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlarmAction {
  public static final String SERIALIZED_NAME_SNS = "sns";
  @SerializedName(SERIALIZED_NAME_SNS)
  private SNSTopicPublishAction sns;

  public static final String SERIALIZED_NAME_IOT_TOPIC_PUBLISH = "iotTopicPublish";
  @SerializedName(SERIALIZED_NAME_IOT_TOPIC_PUBLISH)
  private IotTopicPublishAction iotTopicPublish;

  public static final String SERIALIZED_NAME_LAMBDA = "lambda";
  @SerializedName(SERIALIZED_NAME_LAMBDA)
  private LambdaAction lambda;

  public static final String SERIALIZED_NAME_IOT_EVENTS = "iotEvents";
  @SerializedName(SERIALIZED_NAME_IOT_EVENTS)
  private IotEventsAction iotEvents;

  public static final String SERIALIZED_NAME_SQS = "sqs";
  @SerializedName(SERIALIZED_NAME_SQS)
  private SqsAction sqs;

  public static final String SERIALIZED_NAME_FIREHOSE = "firehose";
  @SerializedName(SERIALIZED_NAME_FIREHOSE)
  private FirehoseAction firehose;

  public static final String SERIALIZED_NAME_DYNAMO_D_B = "dynamoDB";
  @SerializedName(SERIALIZED_NAME_DYNAMO_D_B)
  private DynamoDBAction dynamoDB;

  public static final String SERIALIZED_NAME_DYNAMO_D_BV2 = "dynamoDBv2";
  @SerializedName(SERIALIZED_NAME_DYNAMO_D_BV2)
  private DynamoDBv2Action dynamoDBv2;

  public static final String SERIALIZED_NAME_IOT_SITE_WISE = "iotSiteWise";
  @SerializedName(SERIALIZED_NAME_IOT_SITE_WISE)
  private IotSiteWiseAction iotSiteWise;

  public AlarmAction() {
  }

  public AlarmAction sns(SNSTopicPublishAction sns) {
    this.sns = sns;
    return this;
  }

  /**
   * Get sns
   * @return sns
   */
  @javax.annotation.Nullable
  public SNSTopicPublishAction getSns() {
    return sns;
  }

  public void setSns(SNSTopicPublishAction sns) {
    this.sns = sns;
  }


  public AlarmAction iotTopicPublish(IotTopicPublishAction iotTopicPublish) {
    this.iotTopicPublish = iotTopicPublish;
    return this;
  }

  /**
   * Get iotTopicPublish
   * @return iotTopicPublish
   */
  @javax.annotation.Nullable
  public IotTopicPublishAction getIotTopicPublish() {
    return iotTopicPublish;
  }

  public void setIotTopicPublish(IotTopicPublishAction iotTopicPublish) {
    this.iotTopicPublish = iotTopicPublish;
  }


  public AlarmAction lambda(LambdaAction lambda) {
    this.lambda = lambda;
    return this;
  }

  /**
   * Get lambda
   * @return lambda
   */
  @javax.annotation.Nullable
  public LambdaAction getLambda() {
    return lambda;
  }

  public void setLambda(LambdaAction lambda) {
    this.lambda = lambda;
  }


  public AlarmAction iotEvents(IotEventsAction iotEvents) {
    this.iotEvents = iotEvents;
    return this;
  }

  /**
   * Get iotEvents
   * @return iotEvents
   */
  @javax.annotation.Nullable
  public IotEventsAction getIotEvents() {
    return iotEvents;
  }

  public void setIotEvents(IotEventsAction iotEvents) {
    this.iotEvents = iotEvents;
  }


  public AlarmAction sqs(SqsAction sqs) {
    this.sqs = sqs;
    return this;
  }

  /**
   * Get sqs
   * @return sqs
   */
  @javax.annotation.Nullable
  public SqsAction getSqs() {
    return sqs;
  }

  public void setSqs(SqsAction sqs) {
    this.sqs = sqs;
  }


  public AlarmAction firehose(FirehoseAction firehose) {
    this.firehose = firehose;
    return this;
  }

  /**
   * Get firehose
   * @return firehose
   */
  @javax.annotation.Nullable
  public FirehoseAction getFirehose() {
    return firehose;
  }

  public void setFirehose(FirehoseAction firehose) {
    this.firehose = firehose;
  }


  public AlarmAction dynamoDB(DynamoDBAction dynamoDB) {
    this.dynamoDB = dynamoDB;
    return this;
  }

  /**
   * Get dynamoDB
   * @return dynamoDB
   */
  @javax.annotation.Nullable
  public DynamoDBAction getDynamoDB() {
    return dynamoDB;
  }

  public void setDynamoDB(DynamoDBAction dynamoDB) {
    this.dynamoDB = dynamoDB;
  }


  public AlarmAction dynamoDBv2(DynamoDBv2Action dynamoDBv2) {
    this.dynamoDBv2 = dynamoDBv2;
    return this;
  }

  /**
   * Get dynamoDBv2
   * @return dynamoDBv2
   */
  @javax.annotation.Nullable
  public DynamoDBv2Action getDynamoDBv2() {
    return dynamoDBv2;
  }

  public void setDynamoDBv2(DynamoDBv2Action dynamoDBv2) {
    this.dynamoDBv2 = dynamoDBv2;
  }


  public AlarmAction iotSiteWise(IotSiteWiseAction iotSiteWise) {
    this.iotSiteWise = iotSiteWise;
    return this;
  }

  /**
   * Get iotSiteWise
   * @return iotSiteWise
   */
  @javax.annotation.Nullable
  public IotSiteWiseAction getIotSiteWise() {
    return iotSiteWise;
  }

  public void setIotSiteWise(IotSiteWiseAction iotSiteWise) {
    this.iotSiteWise = iotSiteWise;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmAction alarmAction = (AlarmAction) o;
    return Objects.equals(this.sns, alarmAction.sns) &&
        Objects.equals(this.iotTopicPublish, alarmAction.iotTopicPublish) &&
        Objects.equals(this.lambda, alarmAction.lambda) &&
        Objects.equals(this.iotEvents, alarmAction.iotEvents) &&
        Objects.equals(this.sqs, alarmAction.sqs) &&
        Objects.equals(this.firehose, alarmAction.firehose) &&
        Objects.equals(this.dynamoDB, alarmAction.dynamoDB) &&
        Objects.equals(this.dynamoDBv2, alarmAction.dynamoDBv2) &&
        Objects.equals(this.iotSiteWise, alarmAction.iotSiteWise);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sns, iotTopicPublish, lambda, iotEvents, sqs, firehose, dynamoDB, dynamoDBv2, iotSiteWise);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmAction {\n");
    sb.append("    sns: ").append(toIndentedString(sns)).append("\n");
    sb.append("    iotTopicPublish: ").append(toIndentedString(iotTopicPublish)).append("\n");
    sb.append("    lambda: ").append(toIndentedString(lambda)).append("\n");
    sb.append("    iotEvents: ").append(toIndentedString(iotEvents)).append("\n");
    sb.append("    sqs: ").append(toIndentedString(sqs)).append("\n");
    sb.append("    firehose: ").append(toIndentedString(firehose)).append("\n");
    sb.append("    dynamoDB: ").append(toIndentedString(dynamoDB)).append("\n");
    sb.append("    dynamoDBv2: ").append(toIndentedString(dynamoDBv2)).append("\n");
    sb.append("    iotSiteWise: ").append(toIndentedString(iotSiteWise)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sns");
    openapiFields.add("iotTopicPublish");
    openapiFields.add("lambda");
    openapiFields.add("iotEvents");
    openapiFields.add("sqs");
    openapiFields.add("firehose");
    openapiFields.add("dynamoDB");
    openapiFields.add("dynamoDBv2");
    openapiFields.add("iotSiteWise");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlarmAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlarmAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlarmAction is not found in the empty JSON string", AlarmAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlarmAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlarmAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sns`
      if (jsonObj.get("sns") != null && !jsonObj.get("sns").isJsonNull()) {
        SNSTopicPublishAction.validateJsonElement(jsonObj.get("sns"));
      }
      // validate the optional field `iotTopicPublish`
      if (jsonObj.get("iotTopicPublish") != null && !jsonObj.get("iotTopicPublish").isJsonNull()) {
        IotTopicPublishAction.validateJsonElement(jsonObj.get("iotTopicPublish"));
      }
      // validate the optional field `lambda`
      if (jsonObj.get("lambda") != null && !jsonObj.get("lambda").isJsonNull()) {
        LambdaAction.validateJsonElement(jsonObj.get("lambda"));
      }
      // validate the optional field `iotEvents`
      if (jsonObj.get("iotEvents") != null && !jsonObj.get("iotEvents").isJsonNull()) {
        IotEventsAction.validateJsonElement(jsonObj.get("iotEvents"));
      }
      // validate the optional field `sqs`
      if (jsonObj.get("sqs") != null && !jsonObj.get("sqs").isJsonNull()) {
        SqsAction.validateJsonElement(jsonObj.get("sqs"));
      }
      // validate the optional field `firehose`
      if (jsonObj.get("firehose") != null && !jsonObj.get("firehose").isJsonNull()) {
        FirehoseAction.validateJsonElement(jsonObj.get("firehose"));
      }
      // validate the optional field `dynamoDB`
      if (jsonObj.get("dynamoDB") != null && !jsonObj.get("dynamoDB").isJsonNull()) {
        DynamoDBAction.validateJsonElement(jsonObj.get("dynamoDB"));
      }
      // validate the optional field `dynamoDBv2`
      if (jsonObj.get("dynamoDBv2") != null && !jsonObj.get("dynamoDBv2").isJsonNull()) {
        DynamoDBv2Action.validateJsonElement(jsonObj.get("dynamoDBv2"));
      }
      // validate the optional field `iotSiteWise`
      if (jsonObj.get("iotSiteWise") != null && !jsonObj.get("iotSiteWise").isJsonNull()) {
        IotSiteWiseAction.validateJsonElement(jsonObj.get("iotSiteWise"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlarmAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlarmAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlarmAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlarmAction.class));

       return (TypeAdapter<T>) new TypeAdapter<AlarmAction>() {
           @Override
           public void write(JsonWriter out, AlarmAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlarmAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlarmAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlarmAction
   * @throws IOException if the JSON string is invalid with respect to AlarmAction
   */
  public static AlarmAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlarmAction.class);
  }

  /**
   * Convert an instance of AlarmAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

