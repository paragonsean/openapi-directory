/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateInputRequestInputDefinition;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateInputRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInputRequest {
  public static final String SERIALIZED_NAME_INPUT_NAME = "inputName";
  @SerializedName(SERIALIZED_NAME_INPUT_NAME)
  private String inputName;

  public static final String SERIALIZED_NAME_INPUT_DESCRIPTION = "inputDescription";
  @SerializedName(SERIALIZED_NAME_INPUT_DESCRIPTION)
  private String inputDescription;

  public static final String SERIALIZED_NAME_INPUT_DEFINITION = "inputDefinition";
  @SerializedName(SERIALIZED_NAME_INPUT_DEFINITION)
  private CreateInputRequestInputDefinition inputDefinition;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  public CreateInputRequest() {
  }

  public CreateInputRequest inputName(String inputName) {
    this.inputName = inputName;
    return this;
  }

  /**
   * The name you want to give to the input.
   * @return inputName
   */
  @javax.annotation.Nonnull
  public String getInputName() {
    return inputName;
  }

  public void setInputName(String inputName) {
    this.inputName = inputName;
  }


  public CreateInputRequest inputDescription(String inputDescription) {
    this.inputDescription = inputDescription;
    return this;
  }

  /**
   * A brief description of the input.
   * @return inputDescription
   */
  @javax.annotation.Nullable
  public String getInputDescription() {
    return inputDescription;
  }

  public void setInputDescription(String inputDescription) {
    this.inputDescription = inputDescription;
  }


  public CreateInputRequest inputDefinition(CreateInputRequestInputDefinition inputDefinition) {
    this.inputDefinition = inputDefinition;
    return this;
  }

  /**
   * Get inputDefinition
   * @return inputDefinition
   */
  @javax.annotation.Nonnull
  public CreateInputRequestInputDefinition getInputDefinition() {
    return inputDefinition;
  }

  public void setInputDefinition(CreateInputRequestInputDefinition inputDefinition) {
    this.inputDefinition = inputDefinition;
  }


  public CreateInputRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateInputRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Metadata that can be used to manage the input.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInputRequest createInputRequest = (CreateInputRequest) o;
    return Objects.equals(this.inputName, createInputRequest.inputName) &&
        Objects.equals(this.inputDescription, createInputRequest.inputDescription) &&
        Objects.equals(this.inputDefinition, createInputRequest.inputDefinition) &&
        Objects.equals(this.tags, createInputRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputName, inputDescription, inputDefinition, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInputRequest {\n");
    sb.append("    inputName: ").append(toIndentedString(inputName)).append("\n");
    sb.append("    inputDescription: ").append(toIndentedString(inputDescription)).append("\n");
    sb.append("    inputDefinition: ").append(toIndentedString(inputDefinition)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputName");
    openapiFields.add("inputDescription");
    openapiFields.add("inputDefinition");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inputName");
    openapiRequiredFields.add("inputDefinition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInputRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInputRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInputRequest is not found in the empty JSON string", CreateInputRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInputRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInputRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateInputRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("inputName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputName").toString()));
      }
      if ((jsonObj.get("inputDescription") != null && !jsonObj.get("inputDescription").isJsonNull()) && !jsonObj.get("inputDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputDescription").toString()));
      }
      // validate the required field `inputDefinition`
      CreateInputRequestInputDefinition.validateJsonElement(jsonObj.get("inputDefinition"));
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInputRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInputRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInputRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInputRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInputRequest>() {
           @Override
           public void write(JsonWriter out, CreateInputRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInputRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInputRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInputRequest
   * @throws IOException if the JSON string is invalid with respect to CreateInputRequest
   */
  public static CreateInputRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInputRequest.class);
  }

  /**
   * Convert an instance of CreateInputRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

