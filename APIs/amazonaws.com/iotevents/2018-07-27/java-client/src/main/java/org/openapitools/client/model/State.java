/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StateOnEnter;
import org.openapitools.client.model.StateOnExit;
import org.openapitools.client.model.StateOnInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information that defines a state of a detector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class State {
  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private String stateName;

  public static final String SERIALIZED_NAME_ON_INPUT = "onInput";
  @SerializedName(SERIALIZED_NAME_ON_INPUT)
  private StateOnInput onInput;

  public static final String SERIALIZED_NAME_ON_ENTER = "onEnter";
  @SerializedName(SERIALIZED_NAME_ON_ENTER)
  private StateOnEnter onEnter;

  public static final String SERIALIZED_NAME_ON_EXIT = "onExit";
  @SerializedName(SERIALIZED_NAME_ON_EXIT)
  private StateOnExit onExit;

  public State() {
  }

  public State stateName(String stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * Get stateName
   * @return stateName
   */
  @javax.annotation.Nonnull
  public String getStateName() {
    return stateName;
  }

  public void setStateName(String stateName) {
    this.stateName = stateName;
  }


  public State onInput(StateOnInput onInput) {
    this.onInput = onInput;
    return this;
  }

  /**
   * Get onInput
   * @return onInput
   */
  @javax.annotation.Nullable
  public StateOnInput getOnInput() {
    return onInput;
  }

  public void setOnInput(StateOnInput onInput) {
    this.onInput = onInput;
  }


  public State onEnter(StateOnEnter onEnter) {
    this.onEnter = onEnter;
    return this;
  }

  /**
   * Get onEnter
   * @return onEnter
   */
  @javax.annotation.Nullable
  public StateOnEnter getOnEnter() {
    return onEnter;
  }

  public void setOnEnter(StateOnEnter onEnter) {
    this.onEnter = onEnter;
  }


  public State onExit(StateOnExit onExit) {
    this.onExit = onExit;
    return this;
  }

  /**
   * Get onExit
   * @return onExit
   */
  @javax.annotation.Nullable
  public StateOnExit getOnExit() {
    return onExit;
  }

  public void setOnExit(StateOnExit onExit) {
    this.onExit = onExit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    State state = (State) o;
    return Objects.equals(this.stateName, state.stateName) &&
        Objects.equals(this.onInput, state.onInput) &&
        Objects.equals(this.onEnter, state.onEnter) &&
        Objects.equals(this.onExit, state.onExit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateName, onInput, onEnter, onExit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class State {\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    onInput: ").append(toIndentedString(onInput)).append("\n");
    sb.append("    onEnter: ").append(toIndentedString(onEnter)).append("\n");
    sb.append("    onExit: ").append(toIndentedString(onExit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stateName");
    openapiFields.add("onInput");
    openapiFields.add("onEnter");
    openapiFields.add("onExit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stateName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to State
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!State.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in State is not found in the empty JSON string", State.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!State.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `State` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : State.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `stateName`
      String.validateJsonElement(jsonObj.get("stateName"));
      // validate the optional field `onInput`
      if (jsonObj.get("onInput") != null && !jsonObj.get("onInput").isJsonNull()) {
        StateOnInput.validateJsonElement(jsonObj.get("onInput"));
      }
      // validate the optional field `onEnter`
      if (jsonObj.get("onEnter") != null && !jsonObj.get("onEnter").isJsonNull()) {
        StateOnEnter.validateJsonElement(jsonObj.get("onEnter"));
      }
      // validate the optional field `onExit`
      if (jsonObj.get("onExit") != null && !jsonObj.get("onExit").isJsonNull()) {
        StateOnExit.validateJsonElement(jsonObj.get("onExit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!State.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'State' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<State> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(State.class));

       return (TypeAdapter<T>) new TypeAdapter<State>() {
           @Override
           public void write(JsonWriter out, State value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public State read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of State given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of State
   * @throws IOException if the JSON string is invalid with respect to State
   */
  public static State fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, State.class);
  }

  /**
   * Convert an instance of State to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

