/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LambdaAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies an AWS Lambda function to manage alarm notifications. You can create one or use the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html\&quot;&gt;AWS Lambda function provided by AWS IoT Events&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationTargetActions {
  public static final String SERIALIZED_NAME_LAMBDA_ACTION = "lambdaAction";
  @SerializedName(SERIALIZED_NAME_LAMBDA_ACTION)
  private LambdaAction lambdaAction;

  public NotificationTargetActions() {
  }

  public NotificationTargetActions lambdaAction(LambdaAction lambdaAction) {
    this.lambdaAction = lambdaAction;
    return this;
  }

  /**
   * Get lambdaAction
   * @return lambdaAction
   */
  @javax.annotation.Nullable
  public LambdaAction getLambdaAction() {
    return lambdaAction;
  }

  public void setLambdaAction(LambdaAction lambdaAction) {
    this.lambdaAction = lambdaAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationTargetActions notificationTargetActions = (NotificationTargetActions) o;
    return Objects.equals(this.lambdaAction, notificationTargetActions.lambdaAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lambdaAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationTargetActions {\n");
    sb.append("    lambdaAction: ").append(toIndentedString(lambdaAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lambdaAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationTargetActions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationTargetActions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationTargetActions is not found in the empty JSON string", NotificationTargetActions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationTargetActions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationTargetActions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `lambdaAction`
      if (jsonObj.get("lambdaAction") != null && !jsonObj.get("lambdaAction").isJsonNull()) {
        LambdaAction.validateJsonElement(jsonObj.get("lambdaAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationTargetActions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationTargetActions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationTargetActions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationTargetActions.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationTargetActions>() {
           @Override
           public void write(JsonWriter out, NotificationTargetActions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationTargetActions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationTargetActions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationTargetActions
   * @throws IOException if the JSON string is invalid with respect to NotificationTargetActions
   */
  public static NotificationTargetActions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationTargetActions.class);
  }

  /**
   * Convert an instance of NotificationTargetActions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

