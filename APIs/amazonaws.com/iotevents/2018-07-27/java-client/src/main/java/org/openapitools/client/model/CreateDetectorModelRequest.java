/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateDetectorModelRequestDetectorModelDefinition;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDetectorModelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDetectorModelRequest {
  public static final String SERIALIZED_NAME_DETECTOR_MODEL_NAME = "detectorModelName";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_NAME)
  private String detectorModelName;

  public static final String SERIALIZED_NAME_DETECTOR_MODEL_DEFINITION = "detectorModelDefinition";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_DEFINITION)
  private CreateDetectorModelRequestDetectorModelDefinition detectorModelDefinition;

  public static final String SERIALIZED_NAME_DETECTOR_MODEL_DESCRIPTION = "detectorModelDescription";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_DESCRIPTION)
  private String detectorModelDescription;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_ROLE_ARN = "roleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Tag> tags = new ArrayList<>();

  /**
   * Information about the order in which events are evaluated and how actions are executed. 
   */
  @JsonAdapter(EvaluationMethodEnum.Adapter.class)
  public enum EvaluationMethodEnum {
    BATCH("BATCH"),
    
    SERIAL("SERIAL");

    private String value;

    EvaluationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationMethodEnum fromValue(String value) {
      for (EvaluationMethodEnum b : EvaluationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_METHOD = "evaluationMethod";
  @SerializedName(SERIALIZED_NAME_EVALUATION_METHOD)
  private EvaluationMethodEnum evaluationMethod;

  public CreateDetectorModelRequest() {
  }

  public CreateDetectorModelRequest detectorModelName(String detectorModelName) {
    this.detectorModelName = detectorModelName;
    return this;
  }

  /**
   * The name of the detector model.
   * @return detectorModelName
   */
  @javax.annotation.Nonnull
  public String getDetectorModelName() {
    return detectorModelName;
  }

  public void setDetectorModelName(String detectorModelName) {
    this.detectorModelName = detectorModelName;
  }


  public CreateDetectorModelRequest detectorModelDefinition(CreateDetectorModelRequestDetectorModelDefinition detectorModelDefinition) {
    this.detectorModelDefinition = detectorModelDefinition;
    return this;
  }

  /**
   * Get detectorModelDefinition
   * @return detectorModelDefinition
   */
  @javax.annotation.Nonnull
  public CreateDetectorModelRequestDetectorModelDefinition getDetectorModelDefinition() {
    return detectorModelDefinition;
  }

  public void setDetectorModelDefinition(CreateDetectorModelRequestDetectorModelDefinition detectorModelDefinition) {
    this.detectorModelDefinition = detectorModelDefinition;
  }


  public CreateDetectorModelRequest detectorModelDescription(String detectorModelDescription) {
    this.detectorModelDescription = detectorModelDescription;
    return this;
  }

  /**
   * A brief description of the detector model.
   * @return detectorModelDescription
   */
  @javax.annotation.Nullable
  public String getDetectorModelDescription() {
    return detectorModelDescription;
  }

  public void setDetectorModelDescription(String detectorModelDescription) {
    this.detectorModelDescription = detectorModelDescription;
  }


  public CreateDetectorModelRequest key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The input attribute key used to identify a device or system to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression in the message payload of each input to specify the attribute-value pair that is used to identify the device associated with the input.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public CreateDetectorModelRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the role that grants permission to AWS IoT Events to perform its operations.
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public CreateDetectorModelRequest tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDetectorModelRequest addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Metadata that can be used to manage the detector model.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }


  public CreateDetectorModelRequest evaluationMethod(EvaluationMethodEnum evaluationMethod) {
    this.evaluationMethod = evaluationMethod;
    return this;
  }

  /**
   * Information about the order in which events are evaluated and how actions are executed. 
   * @return evaluationMethod
   */
  @javax.annotation.Nullable
  public EvaluationMethodEnum getEvaluationMethod() {
    return evaluationMethod;
  }

  public void setEvaluationMethod(EvaluationMethodEnum evaluationMethod) {
    this.evaluationMethod = evaluationMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDetectorModelRequest createDetectorModelRequest = (CreateDetectorModelRequest) o;
    return Objects.equals(this.detectorModelName, createDetectorModelRequest.detectorModelName) &&
        Objects.equals(this.detectorModelDefinition, createDetectorModelRequest.detectorModelDefinition) &&
        Objects.equals(this.detectorModelDescription, createDetectorModelRequest.detectorModelDescription) &&
        Objects.equals(this.key, createDetectorModelRequest.key) &&
        Objects.equals(this.roleArn, createDetectorModelRequest.roleArn) &&
        Objects.equals(this.tags, createDetectorModelRequest.tags) &&
        Objects.equals(this.evaluationMethod, createDetectorModelRequest.evaluationMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detectorModelName, detectorModelDefinition, detectorModelDescription, key, roleArn, tags, evaluationMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDetectorModelRequest {\n");
    sb.append("    detectorModelName: ").append(toIndentedString(detectorModelName)).append("\n");
    sb.append("    detectorModelDefinition: ").append(toIndentedString(detectorModelDefinition)).append("\n");
    sb.append("    detectorModelDescription: ").append(toIndentedString(detectorModelDescription)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    evaluationMethod: ").append(toIndentedString(evaluationMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detectorModelName");
    openapiFields.add("detectorModelDefinition");
    openapiFields.add("detectorModelDescription");
    openapiFields.add("key");
    openapiFields.add("roleArn");
    openapiFields.add("tags");
    openapiFields.add("evaluationMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("detectorModelName");
    openapiRequiredFields.add("detectorModelDefinition");
    openapiRequiredFields.add("roleArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDetectorModelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDetectorModelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDetectorModelRequest is not found in the empty JSON string", CreateDetectorModelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDetectorModelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDetectorModelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDetectorModelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("detectorModelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectorModelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectorModelName").toString()));
      }
      // validate the required field `detectorModelDefinition`
      CreateDetectorModelRequestDetectorModelDefinition.validateJsonElement(jsonObj.get("detectorModelDefinition"));
      if ((jsonObj.get("detectorModelDescription") != null && !jsonObj.get("detectorModelDescription").isJsonNull()) && !jsonObj.get("detectorModelDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectorModelDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectorModelDescription").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (!jsonObj.get("roleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleArn").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
      if ((jsonObj.get("evaluationMethod") != null && !jsonObj.get("evaluationMethod").isJsonNull()) && !jsonObj.get("evaluationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationMethod").toString()));
      }
      // validate the optional field `evaluationMethod`
      if (jsonObj.get("evaluationMethod") != null && !jsonObj.get("evaluationMethod").isJsonNull()) {
        EvaluationMethodEnum.validateJsonElement(jsonObj.get("evaluationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDetectorModelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDetectorModelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDetectorModelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDetectorModelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDetectorModelRequest>() {
           @Override
           public void write(JsonWriter out, CreateDetectorModelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDetectorModelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDetectorModelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDetectorModelRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDetectorModelRequest
   */
  public static CreateDetectorModelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDetectorModelRequest.class);
  }

  /**
   * Convert an instance of CreateDetectorModelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

