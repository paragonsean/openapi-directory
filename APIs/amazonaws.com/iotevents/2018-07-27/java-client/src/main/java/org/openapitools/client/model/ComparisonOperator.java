/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ComparisonOperator
 */
@JsonAdapter(ComparisonOperator.Adapter.class)
public enum ComparisonOperator {
  
  GREATER("GREATER"),
  
  GREATER_OR_EQUAL("GREATER_OR_EQUAL"),
  
  LESS("LESS"),
  
  LESS_OR_EQUAL("LESS_OR_EQUAL"),
  
  EQUAL("EQUAL"),
  
  NOT_EQUAL("NOT_EQUAL");

  private String value;

  ComparisonOperator(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ComparisonOperator fromValue(String value) {
    for (ComparisonOperator b : ComparisonOperator.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ComparisonOperator> {
    @Override
    public void write(final JsonWriter jsonWriter, final ComparisonOperator enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ComparisonOperator read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ComparisonOperator.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ComparisonOperator.fromValue(value);
  }
}

