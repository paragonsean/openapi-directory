/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListDetectorModelVersionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListDetectorModelVersionsResponse {
  public static final String SERIALIZED_NAME_DETECTOR_MODEL_VERSION_SUMMARIES = "detectorModelVersionSummaries";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_VERSION_SUMMARIES)
  private List detectorModelVersionSummaries;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListDetectorModelVersionsResponse() {
  }

  public ListDetectorModelVersionsResponse detectorModelVersionSummaries(List detectorModelVersionSummaries) {
    this.detectorModelVersionSummaries = detectorModelVersionSummaries;
    return this;
  }

  /**
   * Get detectorModelVersionSummaries
   * @return detectorModelVersionSummaries
   */
  @javax.annotation.Nullable
  public List getDetectorModelVersionSummaries() {
    return detectorModelVersionSummaries;
  }

  public void setDetectorModelVersionSummaries(List detectorModelVersionSummaries) {
    this.detectorModelVersionSummaries = detectorModelVersionSummaries;
  }


  public ListDetectorModelVersionsResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDetectorModelVersionsResponse listDetectorModelVersionsResponse = (ListDetectorModelVersionsResponse) o;
    return Objects.equals(this.detectorModelVersionSummaries, listDetectorModelVersionsResponse.detectorModelVersionSummaries) &&
        Objects.equals(this.nextToken, listDetectorModelVersionsResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detectorModelVersionSummaries, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDetectorModelVersionsResponse {\n");
    sb.append("    detectorModelVersionSummaries: ").append(toIndentedString(detectorModelVersionSummaries)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detectorModelVersionSummaries");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListDetectorModelVersionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDetectorModelVersionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDetectorModelVersionsResponse is not found in the empty JSON string", ListDetectorModelVersionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDetectorModelVersionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDetectorModelVersionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `detectorModelVersionSummaries`
      if (jsonObj.get("detectorModelVersionSummaries") != null && !jsonObj.get("detectorModelVersionSummaries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("detectorModelVersionSummaries"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDetectorModelVersionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDetectorModelVersionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDetectorModelVersionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDetectorModelVersionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDetectorModelVersionsResponse>() {
           @Override
           public void write(JsonWriter out, ListDetectorModelVersionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDetectorModelVersionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListDetectorModelVersionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListDetectorModelVersionsResponse
   * @throws IOException if the JSON string is invalid with respect to ListDetectorModelVersionsResponse
   */
  public static ListDetectorModelVersionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDetectorModelVersionsResponse.class);
  }

  /**
   * Convert an instance of ListDetectorModelVersionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

