/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the detector model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetectorModelSummary {
  public static final String SERIALIZED_NAME_DETECTOR_MODEL_NAME = "detectorModelName";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_NAME)
  private String detectorModelName;

  public static final String SERIALIZED_NAME_DETECTOR_MODEL_DESCRIPTION = "detectorModelDescription";
  @SerializedName(SERIALIZED_NAME_DETECTOR_MODEL_DESCRIPTION)
  private String detectorModelDescription;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public DetectorModelSummary() {
  }

  public DetectorModelSummary detectorModelName(String detectorModelName) {
    this.detectorModelName = detectorModelName;
    return this;
  }

  /**
   * Get detectorModelName
   * @return detectorModelName
   */
  @javax.annotation.Nullable
  public String getDetectorModelName() {
    return detectorModelName;
  }

  public void setDetectorModelName(String detectorModelName) {
    this.detectorModelName = detectorModelName;
  }


  public DetectorModelSummary detectorModelDescription(String detectorModelDescription) {
    this.detectorModelDescription = detectorModelDescription;
    return this;
  }

  /**
   * Get detectorModelDescription
   * @return detectorModelDescription
   */
  @javax.annotation.Nullable
  public String getDetectorModelDescription() {
    return detectorModelDescription;
  }

  public void setDetectorModelDescription(String detectorModelDescription) {
    this.detectorModelDescription = detectorModelDescription;
  }


  public DetectorModelSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectorModelSummary detectorModelSummary = (DetectorModelSummary) o;
    return Objects.equals(this.detectorModelName, detectorModelSummary.detectorModelName) &&
        Objects.equals(this.detectorModelDescription, detectorModelSummary.detectorModelDescription) &&
        Objects.equals(this.creationTime, detectorModelSummary.creationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detectorModelName, detectorModelDescription, creationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectorModelSummary {\n");
    sb.append("    detectorModelName: ").append(toIndentedString(detectorModelName)).append("\n");
    sb.append("    detectorModelDescription: ").append(toIndentedString(detectorModelDescription)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detectorModelName");
    openapiFields.add("detectorModelDescription");
    openapiFields.add("creationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetectorModelSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetectorModelSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetectorModelSummary is not found in the empty JSON string", DetectorModelSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetectorModelSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetectorModelSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `detectorModelName`
      if (jsonObj.get("detectorModelName") != null && !jsonObj.get("detectorModelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("detectorModelName"));
      }
      // validate the optional field `detectorModelDescription`
      if (jsonObj.get("detectorModelDescription") != null && !jsonObj.get("detectorModelDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("detectorModelDescription"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetectorModelSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetectorModelSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetectorModelSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetectorModelSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DetectorModelSummary>() {
           @Override
           public void write(JsonWriter out, DetectorModelSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetectorModelSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetectorModelSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetectorModelSummary
   * @throws IOException if the JSON string is invalid with respect to DetectorModelSummary
   */
  public static DetectorModelSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetectorModelSummary.class);
  }

  /**
   * Convert an instance of DetectorModelSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

