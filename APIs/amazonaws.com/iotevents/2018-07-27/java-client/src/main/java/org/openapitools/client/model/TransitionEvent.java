/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the actions performed and the next state entered when a &lt;code&gt;condition&lt;/code&gt; evaluates to TRUE.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransitionEvent {
  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private String eventName;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List actions;

  public static final String SERIALIZED_NAME_NEXT_STATE = "nextState";
  @SerializedName(SERIALIZED_NAME_NEXT_STATE)
  private String nextState;

  public TransitionEvent() {
  }

  public TransitionEvent eventName(String eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nonnull
  public String getEventName() {
    return eventName;
  }

  public void setEventName(String eventName) {
    this.eventName = eventName;
  }


  public TransitionEvent condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nonnull
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public TransitionEvent actions(List actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List getActions() {
    return actions;
  }

  public void setActions(List actions) {
    this.actions = actions;
  }


  public TransitionEvent nextState(String nextState) {
    this.nextState = nextState;
    return this;
  }

  /**
   * Get nextState
   * @return nextState
   */
  @javax.annotation.Nonnull
  public String getNextState() {
    return nextState;
  }

  public void setNextState(String nextState) {
    this.nextState = nextState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransitionEvent transitionEvent = (TransitionEvent) o;
    return Objects.equals(this.eventName, transitionEvent.eventName) &&
        Objects.equals(this.condition, transitionEvent.condition) &&
        Objects.equals(this.actions, transitionEvent.actions) &&
        Objects.equals(this.nextState, transitionEvent.nextState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventName, condition, actions, nextState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransitionEvent {\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    nextState: ").append(toIndentedString(nextState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventName");
    openapiFields.add("condition");
    openapiFields.add("actions");
    openapiFields.add("nextState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("condition");
    openapiRequiredFields.add("nextState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransitionEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransitionEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransitionEvent is not found in the empty JSON string", TransitionEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransitionEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransitionEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransitionEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `eventName`
      String.validateJsonElement(jsonObj.get("eventName"));
      // validate the required field `condition`
      String.validateJsonElement(jsonObj.get("condition"));
      // validate the optional field `actions`
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("actions"));
      }
      // validate the required field `nextState`
      String.validateJsonElement(jsonObj.get("nextState"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransitionEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransitionEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransitionEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransitionEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TransitionEvent>() {
           @Override
           public void write(JsonWriter out, TransitionEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransitionEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransitionEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransitionEvent
   * @throws IOException if the JSON string is invalid with respect to TransitionEvent
   */
  public static TransitionEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransitionEvent.class);
  }

  /**
   * Convert an instance of TransitionEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

