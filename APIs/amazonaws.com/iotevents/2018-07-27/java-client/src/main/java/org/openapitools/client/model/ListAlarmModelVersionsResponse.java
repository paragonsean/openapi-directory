/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAlarmModelVersionsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListAlarmModelVersionsResponse {
  public static final String SERIALIZED_NAME_ALARM_MODEL_VERSION_SUMMARIES = "alarmModelVersionSummaries";
  @SerializedName(SERIALIZED_NAME_ALARM_MODEL_VERSION_SUMMARIES)
  private List alarmModelVersionSummaries;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListAlarmModelVersionsResponse() {
  }

  public ListAlarmModelVersionsResponse alarmModelVersionSummaries(List alarmModelVersionSummaries) {
    this.alarmModelVersionSummaries = alarmModelVersionSummaries;
    return this;
  }

  /**
   * Get alarmModelVersionSummaries
   * @return alarmModelVersionSummaries
   */
  @javax.annotation.Nullable
  public List getAlarmModelVersionSummaries() {
    return alarmModelVersionSummaries;
  }

  public void setAlarmModelVersionSummaries(List alarmModelVersionSummaries) {
    this.alarmModelVersionSummaries = alarmModelVersionSummaries;
  }


  public ListAlarmModelVersionsResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAlarmModelVersionsResponse listAlarmModelVersionsResponse = (ListAlarmModelVersionsResponse) o;
    return Objects.equals(this.alarmModelVersionSummaries, listAlarmModelVersionsResponse.alarmModelVersionSummaries) &&
        Objects.equals(this.nextToken, listAlarmModelVersionsResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmModelVersionSummaries, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAlarmModelVersionsResponse {\n");
    sb.append("    alarmModelVersionSummaries: ").append(toIndentedString(alarmModelVersionSummaries)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alarmModelVersionSummaries");
    openapiFields.add("nextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAlarmModelVersionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAlarmModelVersionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAlarmModelVersionsResponse is not found in the empty JSON string", ListAlarmModelVersionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAlarmModelVersionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAlarmModelVersionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alarmModelVersionSummaries`
      if (jsonObj.get("alarmModelVersionSummaries") != null && !jsonObj.get("alarmModelVersionSummaries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("alarmModelVersionSummaries"));
      }
      // validate the optional field `nextToken`
      if (jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("nextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAlarmModelVersionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAlarmModelVersionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAlarmModelVersionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAlarmModelVersionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAlarmModelVersionsResponse>() {
           @Override
           public void write(JsonWriter out, ListAlarmModelVersionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAlarmModelVersionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAlarmModelVersionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAlarmModelVersionsResponse
   * @throws IOException if the JSON string is invalid with respect to ListAlarmModelVersionsResponse
   */
  public static ListAlarmModelVersionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAlarmModelVersionsResponse.class);
  }

  /**
   * Convert an instance of ListAlarmModelVersionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

