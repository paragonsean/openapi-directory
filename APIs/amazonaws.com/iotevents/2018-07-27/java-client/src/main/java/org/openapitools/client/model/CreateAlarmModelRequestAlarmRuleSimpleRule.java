/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComparisonOperator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAlarmModelRequestAlarmRuleSimpleRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAlarmModelRequestAlarmRuleSimpleRule {
  public static final String SERIALIZED_NAME_INPUT_PROPERTY = "inputProperty";
  @SerializedName(SERIALIZED_NAME_INPUT_PROPERTY)
  private String inputProperty;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "comparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private String threshold;

  public CreateAlarmModelRequestAlarmRuleSimpleRule() {
  }

  public CreateAlarmModelRequestAlarmRuleSimpleRule inputProperty(String inputProperty) {
    this.inputProperty = inputProperty;
    return this;
  }

  /**
   * Get inputProperty
   * @return inputProperty
   */
  @javax.annotation.Nonnull
  public String getInputProperty() {
    return inputProperty;
  }

  public void setInputProperty(String inputProperty) {
    this.inputProperty = inputProperty;
  }


  public CreateAlarmModelRequestAlarmRuleSimpleRule comparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Get comparisonOperator
   * @return comparisonOperator
   */
  @javax.annotation.Nonnull
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public CreateAlarmModelRequestAlarmRuleSimpleRule threshold(String threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nonnull
  public String getThreshold() {
    return threshold;
  }

  public void setThreshold(String threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAlarmModelRequestAlarmRuleSimpleRule createAlarmModelRequestAlarmRuleSimpleRule = (CreateAlarmModelRequestAlarmRuleSimpleRule) o;
    return Objects.equals(this.inputProperty, createAlarmModelRequestAlarmRuleSimpleRule.inputProperty) &&
        Objects.equals(this.comparisonOperator, createAlarmModelRequestAlarmRuleSimpleRule.comparisonOperator) &&
        Objects.equals(this.threshold, createAlarmModelRequestAlarmRuleSimpleRule.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputProperty, comparisonOperator, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAlarmModelRequestAlarmRuleSimpleRule {\n");
    sb.append("    inputProperty: ").append(toIndentedString(inputProperty)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputProperty");
    openapiFields.add("comparisonOperator");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inputProperty");
    openapiRequiredFields.add("comparisonOperator");
    openapiRequiredFields.add("threshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAlarmModelRequestAlarmRuleSimpleRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAlarmModelRequestAlarmRuleSimpleRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAlarmModelRequestAlarmRuleSimpleRule is not found in the empty JSON string", CreateAlarmModelRequestAlarmRuleSimpleRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAlarmModelRequestAlarmRuleSimpleRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAlarmModelRequestAlarmRuleSimpleRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAlarmModelRequestAlarmRuleSimpleRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `inputProperty`
      String.validateJsonElement(jsonObj.get("inputProperty"));
      // validate the required field `comparisonOperator`
      ComparisonOperator.validateJsonElement(jsonObj.get("comparisonOperator"));
      // validate the required field `threshold`
      String.validateJsonElement(jsonObj.get("threshold"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAlarmModelRequestAlarmRuleSimpleRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAlarmModelRequestAlarmRuleSimpleRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAlarmModelRequestAlarmRuleSimpleRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAlarmModelRequestAlarmRuleSimpleRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAlarmModelRequestAlarmRuleSimpleRule>() {
           @Override
           public void write(JsonWriter out, CreateAlarmModelRequestAlarmRuleSimpleRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAlarmModelRequestAlarmRuleSimpleRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAlarmModelRequestAlarmRuleSimpleRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAlarmModelRequestAlarmRuleSimpleRule
   * @throws IOException if the JSON string is invalid with respect to CreateAlarmModelRequestAlarmRuleSimpleRule
   */
  public static CreateAlarmModelRequestAlarmRuleSimpleRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAlarmModelRequestAlarmRuleSimpleRule.class);
  }

  /**
   * Convert an instance of CreateAlarmModelRequestAlarmRuleSimpleRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

