/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Payload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\&quot;&gt;payload&lt;/a&gt;. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.&lt;/p&gt; &lt;p&gt;You must use expressions for all parameters in &lt;code&gt;DynamoDBAction&lt;/code&gt;. The expressions accept literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Examples&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For literal values, the expressions must contain single quotes. For example, the value for the &lt;code&gt;hashKeyType&lt;/code&gt; parameter can be &lt;code&gt;&#39;STRING&#39;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For references, you must specify either variables or input values. For example, the value for the &lt;code&gt;hashKeyField&lt;/code&gt; parameter can be &lt;code&gt;$input.GreenhouseInput.name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a substitution template, you must use &lt;code&gt;${}&lt;/code&gt;, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;hashKeyValue&lt;/code&gt; parameter uses a substitution template. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit&#39;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For a string concatenation, you must use &lt;code&gt;+&lt;/code&gt;. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.&lt;/p&gt; &lt;p&gt;In the following example, the value for the &lt;code&gt;tableName&lt;/code&gt; parameter uses a string concatenation. &lt;/p&gt; &lt;p&gt; &lt;code&gt;&#39;GreenhouseTemperatureTable &#39; + $input.GreenhouseInput.date&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\&quot;&gt;Expressions&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If the defined payload type is a string, &lt;code&gt;DynamoDBAction&lt;/code&gt; writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the &lt;code&gt;payloadField&lt;/code&gt; parameter is &lt;code&gt;&amp;lt;payload-field&amp;gt;_raw&lt;/code&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:22.271290-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DynamoDBAction {
  public static final String SERIALIZED_NAME_HASH_KEY_TYPE = "hashKeyType";
  @SerializedName(SERIALIZED_NAME_HASH_KEY_TYPE)
  private String hashKeyType;

  public static final String SERIALIZED_NAME_HASH_KEY_FIELD = "hashKeyField";
  @SerializedName(SERIALIZED_NAME_HASH_KEY_FIELD)
  private String hashKeyField;

  public static final String SERIALIZED_NAME_HASH_KEY_VALUE = "hashKeyValue";
  @SerializedName(SERIALIZED_NAME_HASH_KEY_VALUE)
  private String hashKeyValue;

  public static final String SERIALIZED_NAME_RANGE_KEY_TYPE = "rangeKeyType";
  @SerializedName(SERIALIZED_NAME_RANGE_KEY_TYPE)
  private String rangeKeyType;

  public static final String SERIALIZED_NAME_RANGE_KEY_FIELD = "rangeKeyField";
  @SerializedName(SERIALIZED_NAME_RANGE_KEY_FIELD)
  private String rangeKeyField;

  public static final String SERIALIZED_NAME_RANGE_KEY_VALUE = "rangeKeyValue";
  @SerializedName(SERIALIZED_NAME_RANGE_KEY_VALUE)
  private String rangeKeyValue;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_PAYLOAD_FIELD = "payloadField";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_FIELD)
  private String payloadField;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Payload payload;

  public DynamoDBAction() {
  }

  public DynamoDBAction hashKeyType(String hashKeyType) {
    this.hashKeyType = hashKeyType;
    return this;
  }

  /**
   * Get hashKeyType
   * @return hashKeyType
   */
  @javax.annotation.Nullable
  public String getHashKeyType() {
    return hashKeyType;
  }

  public void setHashKeyType(String hashKeyType) {
    this.hashKeyType = hashKeyType;
  }


  public DynamoDBAction hashKeyField(String hashKeyField) {
    this.hashKeyField = hashKeyField;
    return this;
  }

  /**
   * Get hashKeyField
   * @return hashKeyField
   */
  @javax.annotation.Nonnull
  public String getHashKeyField() {
    return hashKeyField;
  }

  public void setHashKeyField(String hashKeyField) {
    this.hashKeyField = hashKeyField;
  }


  public DynamoDBAction hashKeyValue(String hashKeyValue) {
    this.hashKeyValue = hashKeyValue;
    return this;
  }

  /**
   * Get hashKeyValue
   * @return hashKeyValue
   */
  @javax.annotation.Nonnull
  public String getHashKeyValue() {
    return hashKeyValue;
  }

  public void setHashKeyValue(String hashKeyValue) {
    this.hashKeyValue = hashKeyValue;
  }


  public DynamoDBAction rangeKeyType(String rangeKeyType) {
    this.rangeKeyType = rangeKeyType;
    return this;
  }

  /**
   * Get rangeKeyType
   * @return rangeKeyType
   */
  @javax.annotation.Nullable
  public String getRangeKeyType() {
    return rangeKeyType;
  }

  public void setRangeKeyType(String rangeKeyType) {
    this.rangeKeyType = rangeKeyType;
  }


  public DynamoDBAction rangeKeyField(String rangeKeyField) {
    this.rangeKeyField = rangeKeyField;
    return this;
  }

  /**
   * Get rangeKeyField
   * @return rangeKeyField
   */
  @javax.annotation.Nullable
  public String getRangeKeyField() {
    return rangeKeyField;
  }

  public void setRangeKeyField(String rangeKeyField) {
    this.rangeKeyField = rangeKeyField;
  }


  public DynamoDBAction rangeKeyValue(String rangeKeyValue) {
    this.rangeKeyValue = rangeKeyValue;
    return this;
  }

  /**
   * Get rangeKeyValue
   * @return rangeKeyValue
   */
  @javax.annotation.Nullable
  public String getRangeKeyValue() {
    return rangeKeyValue;
  }

  public void setRangeKeyValue(String rangeKeyValue) {
    this.rangeKeyValue = rangeKeyValue;
  }


  public DynamoDBAction operation(String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }

  public void setOperation(String operation) {
    this.operation = operation;
  }


  public DynamoDBAction payloadField(String payloadField) {
    this.payloadField = payloadField;
    return this;
  }

  /**
   * Get payloadField
   * @return payloadField
   */
  @javax.annotation.Nullable
  public String getPayloadField() {
    return payloadField;
  }

  public void setPayloadField(String payloadField) {
    this.payloadField = payloadField;
  }


  public DynamoDBAction tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * Get tableName
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public DynamoDBAction payload(Payload payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Get payload
   * @return payload
   */
  @javax.annotation.Nullable
  public Payload getPayload() {
    return payload;
  }

  public void setPayload(Payload payload) {
    this.payload = payload;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamoDBAction dynamoDBAction = (DynamoDBAction) o;
    return Objects.equals(this.hashKeyType, dynamoDBAction.hashKeyType) &&
        Objects.equals(this.hashKeyField, dynamoDBAction.hashKeyField) &&
        Objects.equals(this.hashKeyValue, dynamoDBAction.hashKeyValue) &&
        Objects.equals(this.rangeKeyType, dynamoDBAction.rangeKeyType) &&
        Objects.equals(this.rangeKeyField, dynamoDBAction.rangeKeyField) &&
        Objects.equals(this.rangeKeyValue, dynamoDBAction.rangeKeyValue) &&
        Objects.equals(this.operation, dynamoDBAction.operation) &&
        Objects.equals(this.payloadField, dynamoDBAction.payloadField) &&
        Objects.equals(this.tableName, dynamoDBAction.tableName) &&
        Objects.equals(this.payload, dynamoDBAction.payload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashKeyType, hashKeyField, hashKeyValue, rangeKeyType, rangeKeyField, rangeKeyValue, operation, payloadField, tableName, payload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamoDBAction {\n");
    sb.append("    hashKeyType: ").append(toIndentedString(hashKeyType)).append("\n");
    sb.append("    hashKeyField: ").append(toIndentedString(hashKeyField)).append("\n");
    sb.append("    hashKeyValue: ").append(toIndentedString(hashKeyValue)).append("\n");
    sb.append("    rangeKeyType: ").append(toIndentedString(rangeKeyType)).append("\n");
    sb.append("    rangeKeyField: ").append(toIndentedString(rangeKeyField)).append("\n");
    sb.append("    rangeKeyValue: ").append(toIndentedString(rangeKeyValue)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    payloadField: ").append(toIndentedString(payloadField)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hashKeyType");
    openapiFields.add("hashKeyField");
    openapiFields.add("hashKeyValue");
    openapiFields.add("rangeKeyType");
    openapiFields.add("rangeKeyField");
    openapiFields.add("rangeKeyValue");
    openapiFields.add("operation");
    openapiFields.add("payloadField");
    openapiFields.add("tableName");
    openapiFields.add("payload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hashKeyField");
    openapiRequiredFields.add("hashKeyValue");
    openapiRequiredFields.add("tableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamoDBAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamoDBAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamoDBAction is not found in the empty JSON string", DynamoDBAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamoDBAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamoDBAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DynamoDBAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `hashKeyType`
      if (jsonObj.get("hashKeyType") != null && !jsonObj.get("hashKeyType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hashKeyType"));
      }
      // validate the required field `hashKeyField`
      String.validateJsonElement(jsonObj.get("hashKeyField"));
      // validate the required field `hashKeyValue`
      String.validateJsonElement(jsonObj.get("hashKeyValue"));
      // validate the optional field `rangeKeyType`
      if (jsonObj.get("rangeKeyType") != null && !jsonObj.get("rangeKeyType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rangeKeyType"));
      }
      // validate the optional field `rangeKeyField`
      if (jsonObj.get("rangeKeyField") != null && !jsonObj.get("rangeKeyField").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rangeKeyField"));
      }
      // validate the optional field `rangeKeyValue`
      if (jsonObj.get("rangeKeyValue") != null && !jsonObj.get("rangeKeyValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("rangeKeyValue"));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("operation"));
      }
      // validate the optional field `payloadField`
      if (jsonObj.get("payloadField") != null && !jsonObj.get("payloadField").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("payloadField"));
      }
      // validate the required field `tableName`
      String.validateJsonElement(jsonObj.get("tableName"));
      // validate the optional field `payload`
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        Payload.validateJsonElement(jsonObj.get("payload"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamoDBAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamoDBAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamoDBAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamoDBAction.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamoDBAction>() {
           @Override
           public void write(JsonWriter out, DynamoDBAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamoDBAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamoDBAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamoDBAction
   * @throws IOException if the JSON string is invalid with respect to DynamoDBAction
   */
  public static DynamoDBAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamoDBAction.class);
  }

  /**
   * Convert an instance of DynamoDBAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

