/*
 * AWS IoT Events
 * AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use AWS IoT Events API operations to create, read, update, and delete inputs and detector models, and to list their versions.
 *
 * The version of the OpenAPI document: 2018-07-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAlarmModelRequest;
import org.openapitools.client.model.CreateAlarmModelResponse;
import org.openapitools.client.model.CreateDetectorModelRequest;
import org.openapitools.client.model.CreateDetectorModelResponse;
import org.openapitools.client.model.CreateInputRequest;
import org.openapitools.client.model.CreateInputResponse;
import org.openapitools.client.model.DescribeAlarmModelResponse;
import org.openapitools.client.model.DescribeDetectorModelAnalysisResponse;
import org.openapitools.client.model.DescribeDetectorModelResponse;
import org.openapitools.client.model.DescribeInputResponse;
import org.openapitools.client.model.DescribeLoggingOptionsResponse;
import org.openapitools.client.model.GetDetectorModelAnalysisResultsResponse;
import org.openapitools.client.model.ListAlarmModelVersionsResponse;
import org.openapitools.client.model.ListAlarmModelsResponse;
import org.openapitools.client.model.ListDetectorModelVersionsResponse;
import org.openapitools.client.model.ListDetectorModelsResponse;
import org.openapitools.client.model.ListInputRoutingsRequest;
import org.openapitools.client.model.ListInputRoutingsResponse;
import org.openapitools.client.model.ListInputsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutLoggingOptionsRequest;
import org.openapitools.client.model.StartDetectorModelAnalysisRequest;
import org.openapitools.client.model.StartDetectorModelAnalysisResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAlarmModelRequest;
import org.openapitools.client.model.UpdateAlarmModelResponse;
import org.openapitools.client.model.UpdateDetectorModelRequest;
import org.openapitools.client.model.UpdateDetectorModelResponse;
import org.openapitools.client.model.UpdateInputRequest;
import org.openapitools.client.model.UpdateInputResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an alarm model to monitor an AWS IoT Events input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html\&quot;&gt;Create an alarm model&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlarmModelTest() throws ApiException {
        CreateAlarmModelRequest createAlarmModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAlarmModelResponse response = api.createAlarmModel(createAlarmModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a detector model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDetectorModelTest() throws ApiException {
        CreateDetectorModelRequest createDetectorModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDetectorModelResponse response = api.createDetectorModel(createDetectorModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInputTest() throws ApiException {
        CreateInputRequest createInputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInputResponse response = api.createInput(createInputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an alarm model. Any alarm instances that were created based on this alarm model are also deleted. This action can&#39;t be undone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlarmModelTest() throws ApiException {
        String alarmModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAlarmModel(alarmModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a detector model. Any active instances of the detector model are also deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDetectorModelTest() throws ApiException {
        String detectorModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDetectorModel(detectorModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInputTest() throws ApiException {
        String inputName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteInput(inputName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an alarm model. If you don&#39;t specify a value for the &lt;code&gt;alarmModelVersion&lt;/code&gt; parameter, the latest version is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAlarmModelTest() throws ApiException {
        String alarmModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DescribeAlarmModelResponse response = api.describeAlarmModel(alarmModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * Describes a detector model. If the &lt;code&gt;version&lt;/code&gt; parameter is not specified, information about the latest version is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDetectorModelTest() throws ApiException {
        String detectorModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String version = null;
        DescribeDetectorModelResponse response = api.describeDetectorModel(detectorModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, version);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves runtime information about a detector model analysis.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After AWS IoT Events starts analyzing your detector model, you have up to 24 hours to retrieve the analysis results.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDetectorModelAnalysisTest() throws ApiException {
        String analysisId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDetectorModelAnalysisResponse response = api.describeDetectorModelAnalysis(analysisId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes an input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInputTest() throws ApiException {
        String inputName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInputResponse response = api.describeInput(inputName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the current settings of the AWS IoT Events logging options.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLoggingOptionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeLoggingOptionsResponse response = api.describeLoggingOptions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves one or more analysis results of the detector model.&lt;/p&gt; &lt;note&gt; &lt;p&gt;After AWS IoT Events starts analyzing your detector model, you have up to 24 hours to retrieve the analysis results.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDetectorModelAnalysisResultsTest() throws ApiException {
        String analysisId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        GetDetectorModelAnalysisResultsResponse response = api.getDetectorModelAnalysisResults(analysisId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all the versions of an alarm model. The operation returns only the metadata associated with each alarm model version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlarmModelVersionsTest() throws ApiException {
        String alarmModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAlarmModelVersionsResponse response = api.listAlarmModelVersions(alarmModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists the alarm models that you created. The operation returns only the metadata associated with each alarm model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlarmModelsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAlarmModelsResponse response = api.listAlarmModels(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists all the versions of a detector model. Only the metadata associated with each detector model version is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDetectorModelVersionsTest() throws ApiException {
        String detectorModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListDetectorModelVersionsResponse response = api.listDetectorModelVersions(detectorModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists the detector models you have created. Only the metadata associated with each detector model is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDetectorModelsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListDetectorModelsResponse response = api.listDetectorModels(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Lists one or more input routings. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInputRoutingsTest() throws ApiException {
        ListInputRoutingsRequest listInputRoutingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListInputRoutingsResponse response = api.listInputRoutings(listInputRoutingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the inputs you have created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInputsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListInputsResponse response = api.listInputs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists the tags (metadata) you have assigned to the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets or updates the AWS IoT Events logging options.&lt;/p&gt; &lt;p&gt;If you update the value of any &lt;code&gt;loggingOptions&lt;/code&gt; field, it takes up to one minute for the change to take effect. If you change the policy attached to the role you specified in the &lt;code&gt;roleArn&lt;/code&gt; field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putLoggingOptionsTest() throws ApiException {
        PutLoggingOptionsRequest putLoggingOptionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.putLoggingOptions(putLoggingOptionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Performs an analysis of your detector model. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-analyze-api.html\&quot;&gt;Troubleshooting a detector model&lt;/a&gt; in the &lt;i&gt;AWS IoT Events Developer Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDetectorModelAnalysisTest() throws ApiException {
        StartDetectorModelAnalysisRequest startDetectorModelAnalysisRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDetectorModelAnalysisResponse response = api.startDetectorModelAnalysis(startDetectorModelAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the given tags (metadata) from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an alarm model. Any alarms that were created based on the previous version are deleted and then created again as new data arrives.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAlarmModelTest() throws ApiException {
        String alarmModelName = null;
        UpdateAlarmModelRequest updateAlarmModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAlarmModelResponse response = api.updateAlarmModel(alarmModelName, updateAlarmModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a detector model. Detectors (instances) spawned by the previous version are deleted and then re-created as new inputs arrive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDetectorModelTest() throws ApiException {
        String detectorModelName = null;
        UpdateDetectorModelRequest updateDetectorModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDetectorModelResponse response = api.updateDetectorModel(detectorModelName, updateDetectorModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInputTest() throws ApiException {
        String inputName = null;
        UpdateInputRequest updateInputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateInputResponse response = api.updateInput(inputName, updateInputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
