/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssociateLensesRequest from '../model/AssociateLensesRequest';
import AssociateProfilesRequest from '../model/AssociateProfilesRequest';
import CreateLensShareOutput from '../model/CreateLensShareOutput';
import CreateLensShareRequest from '../model/CreateLensShareRequest';
import CreateLensVersionOutput from '../model/CreateLensVersionOutput';
import CreateLensVersionRequest from '../model/CreateLensVersionRequest';
import CreateMilestoneOutput from '../model/CreateMilestoneOutput';
import CreateMilestoneRequest from '../model/CreateMilestoneRequest';
import CreateProfileOutput from '../model/CreateProfileOutput';
import CreateProfileRequest from '../model/CreateProfileRequest';
import CreateProfileShareOutput from '../model/CreateProfileShareOutput';
import CreateWorkloadOutput from '../model/CreateWorkloadOutput';
import CreateWorkloadRequest from '../model/CreateWorkloadRequest';
import CreateWorkloadShareOutput from '../model/CreateWorkloadShareOutput';
import CreateWorkloadShareRequest from '../model/CreateWorkloadShareRequest';
import DisassociateProfilesRequest from '../model/DisassociateProfilesRequest';
import ExportLensOutput from '../model/ExportLensOutput';
import GetAnswerOutput from '../model/GetAnswerOutput';
import GetConsolidatedReportOutput from '../model/GetConsolidatedReportOutput';
import GetLensOutput from '../model/GetLensOutput';
import GetLensReviewOutput from '../model/GetLensReviewOutput';
import GetLensReviewReportOutput from '../model/GetLensReviewReportOutput';
import GetLensVersionDifferenceOutput from '../model/GetLensVersionDifferenceOutput';
import GetMilestoneOutput from '../model/GetMilestoneOutput';
import GetProfileOutput from '../model/GetProfileOutput';
import GetProfileTemplateOutput from '../model/GetProfileTemplateOutput';
import GetWorkloadOutput from '../model/GetWorkloadOutput';
import ImportLensOutput from '../model/ImportLensOutput';
import ImportLensRequest from '../model/ImportLensRequest';
import ListAnswersOutput from '../model/ListAnswersOutput';
import ListCheckDetailsOutput from '../model/ListCheckDetailsOutput';
import ListCheckDetailsRequest from '../model/ListCheckDetailsRequest';
import ListCheckSummariesOutput from '../model/ListCheckSummariesOutput';
import ListLensReviewImprovementsOutput from '../model/ListLensReviewImprovementsOutput';
import ListLensReviewsOutput from '../model/ListLensReviewsOutput';
import ListLensSharesOutput from '../model/ListLensSharesOutput';
import ListLensesOutput from '../model/ListLensesOutput';
import ListMilestonesOutput from '../model/ListMilestonesOutput';
import ListMilestonesRequest from '../model/ListMilestonesRequest';
import ListNotificationsOutput from '../model/ListNotificationsOutput';
import ListNotificationsRequest from '../model/ListNotificationsRequest';
import ListProfileNotificationsOutput from '../model/ListProfileNotificationsOutput';
import ListProfileSharesOutput from '../model/ListProfileSharesOutput';
import ListProfilesOutput from '../model/ListProfilesOutput';
import ListShareInvitationsOutput from '../model/ListShareInvitationsOutput';
import ListTagsForResourceOutput from '../model/ListTagsForResourceOutput';
import ListWorkloadSharesOutput from '../model/ListWorkloadSharesOutput';
import ListWorkloadsOutput from '../model/ListWorkloadsOutput';
import ListWorkloadsRequest from '../model/ListWorkloadsRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAnswerOutput from '../model/UpdateAnswerOutput';
import UpdateAnswerRequest from '../model/UpdateAnswerRequest';
import UpdateGlobalSettingsRequest from '../model/UpdateGlobalSettingsRequest';
import UpdateLensReviewOutput from '../model/UpdateLensReviewOutput';
import UpdateLensReviewRequest from '../model/UpdateLensReviewRequest';
import UpdateProfileOutput from '../model/UpdateProfileOutput';
import UpdateProfileRequest from '../model/UpdateProfileRequest';
import UpdateShareInvitationOutput from '../model/UpdateShareInvitationOutput';
import UpdateShareInvitationRequest from '../model/UpdateShareInvitationRequest';
import UpdateWorkloadOutput from '../model/UpdateWorkloadOutput';
import UpdateWorkloadRequest from '../model/UpdateWorkloadRequest';
import UpdateWorkloadShareOutput from '../model/UpdateWorkloadShareOutput';
import UpdateWorkloadShareRequest from '../model/UpdateWorkloadShareRequest';
import UpgradeLensReviewRequest from '../model/UpgradeLensReviewRequest';
import UpgradeProfileVersionRequest from '../model/UpgradeProfileVersionRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-03-31
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the associateLenses operation.
     * @callback module:api/DefaultApi~associateLensesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Associate a lens to a workload.</p> <p>Up to 10 lenses can be associated with a workload in a single API operation. A maximum of 20 lenses can be associated with a workload.</p> <note> <p> <b>Disclaimer</b> </p> <p>By accessing and/or applying custom lenses created by another Amazon Web Services user or account, you acknowledge that custom lenses created by other users and shared with you are Third Party Content as defined in the Amazon Web Services Customer Agreement. </p> </note>
     * @param {String} workloadId 
     * @param {module:model/AssociateLensesRequest} associateLensesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateLensesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateLenses(workloadId, associateLensesRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateLensesRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling associateLenses");
      }
      // verify the required parameter 'associateLensesRequest' is set
      if (associateLensesRequest === undefined || associateLensesRequest === null) {
        throw new Error("Missing the required parameter 'associateLensesRequest' when calling associateLenses");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/associateLenses', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateProfiles operation.
     * @callback module:api/DefaultApi~associateProfilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate a profile with a workload.
     * @param {String} workloadId 
     * @param {module:model/AssociateProfilesRequest} associateProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    associateProfiles(workloadId, associateProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateProfilesRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling associateProfiles");
      }
      // verify the required parameter 'associateProfilesRequest' is set
      if (associateProfilesRequest === undefined || associateProfilesRequest === null) {
        throw new Error("Missing the required parameter 'associateProfilesRequest' when calling associateProfiles");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/associateProfiles', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLensShare operation.
     * @callback module:api/DefaultApi~createLensShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLensShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a lens share.</p> <p>The owner of a lens can share it with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be shared.</p> <p> Shared access to a lens is not removed until the lens invitation is deleted.</p> <p>If you share a lens with an organization or OU, all accounts in the organization or OU are granted access to the lens.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-sharing.html\">Sharing a custom lens</a> in the <i>Well-Architected Tool User Guide</i>.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
     * @param {String} lensAlias 
     * @param {module:model/CreateLensShareRequest} createLensShareRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLensShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLensShareOutput}
     */
    createLensShare(lensAlias, createLensShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLensShareRequest;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling createLensShare");
      }
      // verify the required parameter 'createLensShareRequest' is set
      if (createLensShareRequest === undefined || createLensShareRequest === null) {
        throw new Error("Missing the required parameter 'createLensShareRequest' when calling createLensShare");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLensShareOutput;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}/shares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLensVersion operation.
     * @callback module:api/DefaultApi~createLensVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLensVersionOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a new lens version.</p> <p>A lens can have up to 100 versions.</p> <p>Use this operation to publish a new lens version after you have imported a lens. The <code>LensAlias</code> is used to identify the lens to be published. The owner of a lens can share the lens with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Only the owner of a lens can delete it. </p>
     * @param {String} lensAlias 
     * @param {module:model/CreateLensVersionRequest} createLensVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLensVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLensVersionOutput}
     */
    createLensVersion(lensAlias, createLensVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLensVersionRequest;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling createLensVersion");
      }
      // verify the required parameter 'createLensVersionRequest' is set
      if (createLensVersionRequest === undefined || createLensVersionRequest === null) {
        throw new Error("Missing the required parameter 'createLensVersionRequest' when calling createLensVersion");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLensVersionOutput;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMilestone operation.
     * @callback module:api/DefaultApi~createMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMilestoneOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a milestone for an existing workload.
     * @param {String} workloadId 
     * @param {module:model/CreateMilestoneRequest} createMilestoneRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMilestoneOutput}
     */
    createMilestone(workloadId, createMilestoneRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMilestoneRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling createMilestone");
      }
      // verify the required parameter 'createMilestoneRequest' is set
      if (createMilestoneRequest === undefined || createMilestoneRequest === null) {
        throw new Error("Missing the required parameter 'createMilestoneRequest' when calling createMilestone");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMilestoneOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProfile operation.
     * @callback module:api/DefaultApi~createProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProfileOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a profile.
     * @param {module:model/CreateProfileRequest} createProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProfileOutput}
     */
    createProfile(createProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProfileRequest;
      // verify the required parameter 'createProfileRequest' is set
      if (createProfileRequest === undefined || createProfileRequest === null) {
        throw new Error("Missing the required parameter 'createProfileRequest' when calling createProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProfileOutput;
      return this.apiClient.callApi(
        '/profiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProfileShare operation.
     * @callback module:api/DefaultApi~createProfileShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProfileShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a profile share.
     * @param {String} profileArn The profile ARN.
     * @param {module:model/CreateLensShareRequest} createLensShareRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProfileShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProfileShareOutput}
     */
    createProfileShare(profileArn, createLensShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLensShareRequest;
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling createProfileShare");
      }
      // verify the required parameter 'createLensShareRequest' is set
      if (createLensShareRequest === undefined || createLensShareRequest === null) {
        throw new Error("Missing the required parameter 'createLensShareRequest' when calling createProfileShare");
      }

      let pathParams = {
        'ProfileArn': profileArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProfileShareOutput;
      return this.apiClient.callApi(
        '/profiles/{ProfileArn}/shares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkload operation.
     * @callback module:api/DefaultApi~createWorkloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkloadOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a new workload.</p> <p>The owner of a workload can share the workload with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Only the owner of a workload can delete it.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html\">Defining a Workload</a> in the <i>Well-Architected Tool User Guide</i>.</p> <important> <p>Either <code>AwsRegions</code>, <code>NonAwsRegions</code>, or both must be specified when creating a workload.</p> <p>You also must specify <code>ReviewOwner</code>, even though the parameter is listed as not being required in the following section. </p> </important>
     * @param {module:model/CreateWorkloadRequest} createWorkloadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkloadOutput}
     */
    createWorkload(createWorkloadRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkloadRequest;
      // verify the required parameter 'createWorkloadRequest' is set
      if (createWorkloadRequest === undefined || createWorkloadRequest === null) {
        throw new Error("Missing the required parameter 'createWorkloadRequest' when calling createWorkload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkloadOutput;
      return this.apiClient.callApi(
        '/workloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWorkloadShare operation.
     * @callback module:api/DefaultApi~createWorkloadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkloadShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Create a workload share.</p> <p>The owner of a workload can share it with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is deleted.</p> <p>If you share a workload with an organization or OU, all accounts in the organization or OU are granted access to the workload.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html\">Sharing a workload</a> in the <i>Well-Architected Tool User Guide</i>.</p>
     * @param {String} workloadId 
     * @param {module:model/CreateWorkloadShareRequest} createWorkloadShareRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWorkloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkloadShareOutput}
     */
    createWorkloadShare(workloadId, createWorkloadShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWorkloadShareRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling createWorkloadShare");
      }
      // verify the required parameter 'createWorkloadShareRequest' is set
      if (createWorkloadShareRequest === undefined || createWorkloadShareRequest === null) {
        throw new Error("Missing the required parameter 'createWorkloadShareRequest' when calling createWorkloadShare");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWorkloadShareOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/shares', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLens operation.
     * @callback module:api/DefaultApi~deleteLensCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete an existing lens.</p> <p>Only the owner of a lens can delete it. After the lens is deleted, Amazon Web Services accounts and users that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads. </p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
     * @param {String} lensAlias 
     * @param {String} clientRequestToken 
     * @param {module:model/String} lensStatus The status of the lens to be deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLensCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLens(lensAlias, clientRequestToken, lensStatus, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling deleteLens");
      }
      // verify the required parameter 'clientRequestToken' is set
      if (clientRequestToken === undefined || clientRequestToken === null) {
        throw new Error("Missing the required parameter 'clientRequestToken' when calling deleteLens");
      }
      // verify the required parameter 'lensStatus' is set
      if (lensStatus === undefined || lensStatus === null) {
        throw new Error("Missing the required parameter 'lensStatus' when calling deleteLens");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
        'ClientRequestToken': clientRequestToken,
        'LensStatus': lensStatus
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}#ClientRequestToken&LensStatus', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLensShare operation.
     * @callback module:api/DefaultApi~deleteLensShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete a lens share.</p> <p>After the lens share is deleted, Amazon Web Services accounts, users, organizations, and organizational units (OUs) that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
     * @param {String} shareId 
     * @param {String} lensAlias 
     * @param {String} clientRequestToken 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLensShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLensShare(shareId, lensAlias, clientRequestToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling deleteLensShare");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling deleteLensShare");
      }
      // verify the required parameter 'clientRequestToken' is set
      if (clientRequestToken === undefined || clientRequestToken === null) {
        throw new Error("Missing the required parameter 'clientRequestToken' when calling deleteLensShare");
      }

      let pathParams = {
        'ShareId': shareId,
        'LensAlias': lensAlias
      };
      let queryParams = {
        'ClientRequestToken': clientRequestToken
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}/shares/{ShareId}#ClientRequestToken', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile operation.
     * @callback module:api/DefaultApi~deleteProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Delete a profile.</p> <note> <p> <b>Disclaimer</b> </p> <p>By sharing your profile with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your profile available to those other accounts. Those other accounts may continue to access and use your shared profile even if you delete the profile from your own Amazon Web Services account or terminate your Amazon Web Services account.</p> </note>
     * @param {String} profileArn The profile ARN.
     * @param {String} clientRequestToken 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfile(profileArn, clientRequestToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling deleteProfile");
      }
      // verify the required parameter 'clientRequestToken' is set
      if (clientRequestToken === undefined || clientRequestToken === null) {
        throw new Error("Missing the required parameter 'clientRequestToken' when calling deleteProfile");
      }

      let pathParams = {
        'ProfileArn': profileArn
      };
      let queryParams = {
        'ClientRequestToken': clientRequestToken
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/profiles/{ProfileArn}#ClientRequestToken', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfileShare operation.
     * @callback module:api/DefaultApi~deleteProfileShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a profile share.
     * @param {String} shareId 
     * @param {String} profileArn The profile ARN.
     * @param {String} clientRequestToken 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProfileShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProfileShare(shareId, profileArn, clientRequestToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling deleteProfileShare");
      }
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling deleteProfileShare");
      }
      // verify the required parameter 'clientRequestToken' is set
      if (clientRequestToken === undefined || clientRequestToken === null) {
        throw new Error("Missing the required parameter 'clientRequestToken' when calling deleteProfileShare");
      }

      let pathParams = {
        'ShareId': shareId,
        'ProfileArn': profileArn
      };
      let queryParams = {
        'ClientRequestToken': clientRequestToken
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/profiles/{ProfileArn}/shares/{ShareId}#ClientRequestToken', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkload operation.
     * @callback module:api/DefaultApi~deleteWorkloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing workload.
     * @param {String} workloadId 
     * @param {String} clientRequestToken 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkload(workloadId, clientRequestToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling deleteWorkload");
      }
      // verify the required parameter 'clientRequestToken' is set
      if (clientRequestToken === undefined || clientRequestToken === null) {
        throw new Error("Missing the required parameter 'clientRequestToken' when calling deleteWorkload");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
        'ClientRequestToken': clientRequestToken
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}#ClientRequestToken', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWorkloadShare operation.
     * @callback module:api/DefaultApi~deleteWorkloadShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a workload share.
     * @param {String} shareId 
     * @param {String} workloadId 
     * @param {String} clientRequestToken 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWorkloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWorkloadShare(shareId, workloadId, clientRequestToken, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling deleteWorkloadShare");
      }
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling deleteWorkloadShare");
      }
      // verify the required parameter 'clientRequestToken' is set
      if (clientRequestToken === undefined || clientRequestToken === null) {
        throw new Error("Missing the required parameter 'clientRequestToken' when calling deleteWorkloadShare");
      }

      let pathParams = {
        'ShareId': shareId,
        'WorkloadId': workloadId
      };
      let queryParams = {
        'ClientRequestToken': clientRequestToken
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/shares/{ShareId}#ClientRequestToken', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateLenses operation.
     * @callback module:api/DefaultApi~disassociateLensesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociate a lens from a workload.</p> <p>Up to 10 lenses can be disassociated from a workload in a single API operation.</p> <note> <p>The Amazon Web Services Well-Architected Framework lens (<code>wellarchitected</code>) cannot be removed from a workload.</p> </note>
     * @param {String} workloadId 
     * @param {module:model/AssociateLensesRequest} associateLensesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateLensesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateLenses(workloadId, associateLensesRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateLensesRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling disassociateLenses");
      }
      // verify the required parameter 'associateLensesRequest' is set
      if (associateLensesRequest === undefined || associateLensesRequest === null) {
        throw new Error("Missing the required parameter 'associateLensesRequest' when calling disassociateLenses");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/disassociateLenses', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateProfiles operation.
     * @callback module:api/DefaultApi~disassociateProfilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociate a profile from a workload.
     * @param {String} workloadId 
     * @param {module:model/DisassociateProfilesRequest} disassociateProfilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disassociateProfiles(workloadId, disassociateProfilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateProfilesRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling disassociateProfiles");
      }
      // verify the required parameter 'disassociateProfilesRequest' is set
      if (disassociateProfilesRequest === undefined || disassociateProfilesRequest === null) {
        throw new Error("Missing the required parameter 'disassociateProfilesRequest' when calling disassociateProfiles");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/disassociateProfiles', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportLens operation.
     * @callback module:api/DefaultApi~exportLensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportLensOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Export an existing lens.</p> <p>Only the owner of a lens can export it. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be exported.</p> <p>Lenses are defined in JSON. For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html\">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>.</p> <note> <p> <b>Disclaimer</b> </p> <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p> </note>
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [lensVersion] The lens version to be exported.
     * @param {module:api/DefaultApi~exportLensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportLensOutput}
     */
    exportLens(lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling exportLens");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
        'LensVersion': opts['lensVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportLensOutput;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAnswer operation.
     * @callback module:api/DefaultApi~getAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAnswerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the answer to a specific question in a workload review.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {String} questionId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [milestoneNumber] 
     * @param {module:api/DefaultApi~getAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAnswerOutput}
     */
    getAnswer(workloadId, lensAlias, questionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling getAnswer");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling getAnswer");
      }
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling getAnswer");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias,
        'QuestionId': questionId
      };
      let queryParams = {
        'MilestoneNumber': opts['milestoneNumber']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAnswerOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConsolidatedReport operation.
     * @callback module:api/DefaultApi~getConsolidatedReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConsolidatedReportOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Get a consolidated report of your workloads.</p> <p>You can optionally choose to include workloads that have been shared with you.</p>
     * @param {module:model/String} format <p>The format of the consolidated report.</p> <p>For <code>PDF</code>, <code>Base64String</code> is returned. For <code>JSON</code>, <code>Metrics</code> is returned.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Boolean} [includeSharedResources] Set to <code>true</code> to have shared resources included in the report.
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {module:api/DefaultApi~getConsolidatedReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConsolidatedReportOutput}
     */
    getConsolidatedReport(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getConsolidatedReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'Format': format,
        'IncludeSharedResources': opts['includeSharedResources'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetConsolidatedReportOutput;
      return this.apiClient.callApi(
        '/consolidatedReport#Format', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLens operation.
     * @callback module:api/DefaultApi~getLensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLensOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing lens.
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [lensVersion] The lens version to be retrieved.
     * @param {module:api/DefaultApi~getLensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLensOutput}
     */
    getLens(lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling getLens");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
        'LensVersion': opts['lensVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLensOutput;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLensReview operation.
     * @callback module:api/DefaultApi~getLensReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLensReviewOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lens review.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [milestoneNumber] 
     * @param {module:api/DefaultApi~getLensReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLensReviewOutput}
     */
    getLensReview(workloadId, lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling getLensReview");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling getLensReview");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias
      };
      let queryParams = {
        'MilestoneNumber': opts['milestoneNumber']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLensReviewOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLensReviewReport operation.
     * @callback module:api/DefaultApi~getLensReviewReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLensReviewReportOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lens review report.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [milestoneNumber] 
     * @param {module:api/DefaultApi~getLensReviewReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLensReviewReportOutput}
     */
    getLensReviewReport(workloadId, lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling getLensReviewReport");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling getLensReviewReport");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias
      };
      let queryParams = {
        'MilestoneNumber': opts['milestoneNumber']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLensReviewReportOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}/report', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLensVersionDifference operation.
     * @callback module:api/DefaultApi~getLensVersionDifferenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLensVersionDifferenceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lens version differences.
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [baseLensVersion] The base version of the lens.
     * @param {String} [targetLensVersion] The lens version to target a difference for.
     * @param {module:api/DefaultApi~getLensVersionDifferenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLensVersionDifferenceOutput}
     */
    getLensVersionDifference(lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling getLensVersionDifference");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
        'BaseLensVersion': opts['baseLensVersion'],
        'TargetLensVersion': opts['targetLensVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLensVersionDifferenceOutput;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}/versionDifference', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMilestone operation.
     * @callback module:api/DefaultApi~getMilestoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMilestoneOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a milestone for an existing workload.
     * @param {String} workloadId 
     * @param {Number} milestoneNumber 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getMilestoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMilestoneOutput}
     */
    getMilestone(workloadId, milestoneNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling getMilestone");
      }
      // verify the required parameter 'milestoneNumber' is set
      if (milestoneNumber === undefined || milestoneNumber === null) {
        throw new Error("Missing the required parameter 'milestoneNumber' when calling getMilestone");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'MilestoneNumber': milestoneNumber
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMilestoneOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/milestones/{MilestoneNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfile operation.
     * @callback module:api/DefaultApi~getProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile information.
     * @param {String} profileArn The profile ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [profileVersion] The profile version.
     * @param {module:api/DefaultApi~getProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileOutput}
     */
    getProfile(profileArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling getProfile");
      }

      let pathParams = {
        'ProfileArn': profileArn
      };
      let queryParams = {
        'ProfileVersion': opts['profileVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileOutput;
      return this.apiClient.callApi(
        '/profiles/{ProfileArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfileTemplate operation.
     * @callback module:api/DefaultApi~getProfileTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProfileTemplateOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get profile template.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getProfileTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProfileTemplateOutput}
     */
    getProfileTemplate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProfileTemplateOutput;
      return this.apiClient.callApi(
        '/profileTemplate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkload operation.
     * @callback module:api/DefaultApi~getWorkloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkloadOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an existing workload.
     * @param {String} workloadId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWorkloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkloadOutput}
     */
    getWorkload(workloadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling getWorkload");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetWorkloadOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importLens operation.
     * @callback module:api/DefaultApi~importLensCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportLensOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Import a new custom lens or update an existing custom lens.</p> <p>To update an existing custom lens, specify its ARN as the <code>LensAlias</code>. If no ARN is specified, a new custom lens is created.</p> <p>The new or updated lens will have a status of <code>DRAFT</code>. The lens cannot be applied to workloads or shared with other Amazon Web Services accounts until it's published with <a>CreateLensVersion</a>.</p> <p>Lenses are defined in JSON. For more information, see <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html\">JSON format specification</a> in the <i>Well-Architected Tool User Guide</i>.</p> <p>A custom lens cannot exceed 500 KB in size.</p> <note> <p> <b>Disclaimer</b> </p> <p>Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.</p> </note>
     * @param {module:model/ImportLensRequest} importLensRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importLensCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportLensOutput}
     */
    importLens(importLensRequest, opts, callback) {
      opts = opts || {};
      let postBody = importLensRequest;
      // verify the required parameter 'importLensRequest' is set
      if (importLensRequest === undefined || importLensRequest === null) {
        throw new Error("Missing the required parameter 'importLensRequest' when calling importLens");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportLensOutput;
      return this.apiClient.callApi(
        '/importLens', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnswers operation.
     * @callback module:api/DefaultApi~listAnswersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAnswersOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of answers for a particular workload and lens.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pillarId] 
     * @param {Number} [milestoneNumber] 
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {module:model/String} [questionPriority] The priority of the question.
     * @param {module:api/DefaultApi~listAnswersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAnswersOutput}
     */
    listAnswers(workloadId, lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listAnswers");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling listAnswers");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias
      };
      let queryParams = {
        'PillarId': opts['pillarId'],
        'MilestoneNumber': opts['milestoneNumber'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'QuestionPriority': opts['questionPriority']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAnswersOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCheckDetails operation.
     * @callback module:api/DefaultApi~listCheckDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCheckDetailsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Trusted Advisor check details by account related to the workload.
     * @param {String} workloadId 
     * @param {module:model/ListCheckDetailsRequest} listCheckDetailsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCheckDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCheckDetailsOutput}
     */
    listCheckDetails(workloadId, listCheckDetailsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCheckDetailsRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listCheckDetails");
      }
      // verify the required parameter 'listCheckDetailsRequest' is set
      if (listCheckDetailsRequest === undefined || listCheckDetailsRequest === null) {
        throw new Error("Missing the required parameter 'listCheckDetailsRequest' when calling listCheckDetails");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCheckDetailsOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/checks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCheckSummaries operation.
     * @callback module:api/DefaultApi~listCheckSummariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCheckSummariesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of Trusted Advisor checks summarized for all accounts related to the workload.
     * @param {String} workloadId 
     * @param {module:model/ListCheckDetailsRequest} listCheckDetailsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCheckSummariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCheckSummariesOutput}
     */
    listCheckSummaries(workloadId, listCheckDetailsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCheckDetailsRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listCheckSummaries");
      }
      // verify the required parameter 'listCheckDetailsRequest' is set
      if (listCheckDetailsRequest === undefined || listCheckDetailsRequest === null) {
        throw new Error("Missing the required parameter 'listCheckDetailsRequest' when calling listCheckSummaries");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCheckSummariesOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/checkSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLensReviewImprovements operation.
     * @callback module:api/DefaultApi~listLensReviewImprovementsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLensReviewImprovementsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List lens review improvements.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pillarId] 
     * @param {Number} [milestoneNumber] 
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {module:model/String} [questionPriority] The priority of the question.
     * @param {module:api/DefaultApi~listLensReviewImprovementsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLensReviewImprovementsOutput}
     */
    listLensReviewImprovements(workloadId, lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listLensReviewImprovements");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling listLensReviewImprovements");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias
      };
      let queryParams = {
        'PillarId': opts['pillarId'],
        'MilestoneNumber': opts['milestoneNumber'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'QuestionPriority': opts['questionPriority']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLensReviewImprovementsOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}/improvements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLensReviews operation.
     * @callback module:api/DefaultApi~listLensReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLensReviewsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List lens reviews for a particular workload.
     * @param {String} workloadId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [milestoneNumber] 
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] 
     * @param {module:api/DefaultApi~listLensReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLensReviewsOutput}
     */
    listLensReviews(workloadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listLensReviews");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
        'MilestoneNumber': opts['milestoneNumber'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLensReviewsOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLensShares operation.
     * @callback module:api/DefaultApi~listLensSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLensSharesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the lens shares associated with the lens.
     * @param {String} lensAlias 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sharedWithPrefix] The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the lens is shared.
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {module:model/String} [status] 
     * @param {module:api/DefaultApi~listLensSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLensSharesOutput}
     */
    listLensShares(lensAlias, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling listLensShares");
      }

      let pathParams = {
        'LensAlias': lensAlias
      };
      let queryParams = {
        'SharedWithPrefix': opts['sharedWithPrefix'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'Status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLensSharesOutput;
      return this.apiClient.callApi(
        '/lenses/{LensAlias}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLenses operation.
     * @callback module:api/DefaultApi~listLensesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLensesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the available lenses.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] 
     * @param {module:model/String} [lensType] The type of lenses to be returned.
     * @param {module:model/String} [lensStatus] The status of lenses to be returned.
     * @param {String} [lensName] 
     * @param {module:api/DefaultApi~listLensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLensesOutput}
     */
    listLenses(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'LensType': opts['lensType'],
        'LensStatus': opts['lensStatus'],
        'LensName': opts['lensName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLensesOutput;
      return this.apiClient.callApi(
        '/lenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMilestones operation.
     * @callback module:api/DefaultApi~listMilestonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMilestonesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all milestones for an existing workload.
     * @param {String} workloadId 
     * @param {module:model/ListMilestonesRequest} listMilestonesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMilestonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMilestonesOutput}
     */
    listMilestones(workloadId, listMilestonesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMilestonesRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listMilestones");
      }
      // verify the required parameter 'listMilestonesRequest' is set
      if (listMilestonesRequest === undefined || listMilestonesRequest === null) {
        throw new Error("Missing the required parameter 'listMilestonesRequest' when calling listMilestones");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMilestonesOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/milestonesSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNotifications operation.
     * @callback module:api/DefaultApi~listNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNotificationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List lens notifications.
     * @param {module:model/ListNotificationsRequest} listNotificationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNotificationsOutput}
     */
    listNotifications(listNotificationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNotificationsRequest;
      // verify the required parameter 'listNotificationsRequest' is set
      if (listNotificationsRequest === undefined || listNotificationsRequest === null) {
        throw new Error("Missing the required parameter 'listNotificationsRequest' when calling listNotifications");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNotificationsOutput;
      return this.apiClient.callApi(
        '/notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfileNotifications operation.
     * @callback module:api/DefaultApi~listProfileNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfileNotificationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List profile notifications.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [workloadId] 
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] 
     * @param {module:api/DefaultApi~listProfileNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfileNotificationsOutput}
     */
    listProfileNotifications(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'WorkloadId': opts['workloadId'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfileNotificationsOutput;
      return this.apiClient.callApi(
        '/profileNotifications/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfileShares operation.
     * @callback module:api/DefaultApi~listProfileSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfileSharesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List profile shares.
     * @param {String} profileArn The profile ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sharedWithPrefix] The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the profile is shared.
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {module:model/String} [status] 
     * @param {module:api/DefaultApi~listProfileSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfileSharesOutput}
     */
    listProfileShares(profileArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling listProfileShares");
      }

      let pathParams = {
        'ProfileArn': profileArn
      };
      let queryParams = {
        'SharedWithPrefix': opts['sharedWithPrefix'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'Status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfileSharesOutput;
      return this.apiClient.callApi(
        '/profiles/{ProfileArn}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProfiles operation.
     * @callback module:api/DefaultApi~listProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProfilesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List profiles.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [profileNamePrefix] Prefix for profile name.
     * @param {module:model/String} [profileOwnerType] Profile owner type.
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] 
     * @param {module:api/DefaultApi~listProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProfilesOutput}
     */
    listProfiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ProfileNamePrefix': opts['profileNamePrefix'],
        'ProfileOwnerType': opts['profileOwnerType'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProfilesOutput;
      return this.apiClient.callApi(
        '/profileSummaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listShareInvitations operation.
     * @callback module:api/DefaultApi~listShareInvitationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListShareInvitationsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the workload invitations.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [workloadNamePrefix] 
     * @param {String} [lensNamePrefix] An optional string added to the beginning of each lens name returned in the results.
     * @param {module:model/String} [shareResourceType] The type of share invitations to be returned.
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {String} [profileNamePrefix] Profile name prefix.
     * @param {module:api/DefaultApi~listShareInvitationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListShareInvitationsOutput}
     */
    listShareInvitations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'WorkloadNamePrefix': opts['workloadNamePrefix'],
        'LensNamePrefix': opts['lensNamePrefix'],
        'ShareResourceType': opts['shareResourceType'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'ProfileNamePrefix': opts['profileNamePrefix']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListShareInvitationsOutput;
      return this.apiClient.callApi(
        '/shareInvitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>List the tags for a resource.</p> <note> <p>The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.</p> </note>
     * @param {String} workloadArn 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceOutput}
     */
    listTagsForResource(workloadArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadArn' is set
      if (workloadArn === undefined || workloadArn === null) {
        throw new Error("Missing the required parameter 'workloadArn' when calling listTagsForResource");
      }

      let pathParams = {
        'WorkloadArn': workloadArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceOutput;
      return this.apiClient.callApi(
        '/tags/{WorkloadArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkloadShares operation.
     * @callback module:api/DefaultApi~listWorkloadSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkloadSharesOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the workload shares associated with the workload.
     * @param {String} workloadId 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [sharedWithPrefix] The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload is shared.
     * @param {String} [nextToken] 
     * @param {Number} [maxResults] The maximum number of results to return for this request.
     * @param {module:model/String} [status] 
     * @param {module:api/DefaultApi~listWorkloadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkloadSharesOutput}
     */
    listWorkloadShares(workloadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling listWorkloadShares");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
        'SharedWithPrefix': opts['sharedWithPrefix'],
        'NextToken': opts['nextToken'],
        'MaxResults': opts['maxResults'],
        'Status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWorkloadSharesOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWorkloads operation.
     * @callback module:api/DefaultApi~listWorkloadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkloadsOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Paginated list of workloads.
     * @param {module:model/ListWorkloadsRequest} listWorkloadsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWorkloadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkloadsOutput}
     */
    listWorkloads(listWorkloadsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWorkloadsRequest;
      // verify the required parameter 'listWorkloadsRequest' is set
      if (listWorkloadsRequest === undefined || listWorkloadsRequest === null) {
        throw new Error("Missing the required parameter 'listWorkloadsRequest' when calling listWorkloads");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWorkloadsOutput;
      return this.apiClient.callApi(
        '/workloadsSummaries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Adds one or more tags to the specified resource.</p> <note> <p>The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.</p> </note>
     * @param {String} workloadArn 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(workloadArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'workloadArn' is set
      if (workloadArn === undefined || workloadArn === null) {
        throw new Error("Missing the required parameter 'workloadArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'WorkloadArn': workloadArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{WorkloadArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes specified tags from a resource.</p> <note> <p>The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.</p> </note> <p>To specify multiple tags, use separate <b>tagKeys</b> parameters, for example:</p> <p> <code>DELETE /tags/WorkloadArn?tagKeys=key1&amp;tagKeys=key2</code> </p>
     * @param {String} workloadArn 
     * @param {Array.<String>} tagKeys A list of tag keys. Existing tags of the resource whose keys are members of this list are removed from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(workloadArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workloadArn' is set
      if (workloadArn === undefined || workloadArn === null) {
        throw new Error("Missing the required parameter 'workloadArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'WorkloadArn': workloadArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{WorkloadArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAnswer operation.
     * @callback module:api/DefaultApi~updateAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAnswerOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the answer to a specific question in a workload review.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {String} questionId 
     * @param {module:model/UpdateAnswerRequest} updateAnswerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAnswerOutput}
     */
    updateAnswer(workloadId, lensAlias, questionId, updateAnswerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAnswerRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling updateAnswer");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling updateAnswer");
      }
      // verify the required parameter 'questionId' is set
      if (questionId === undefined || questionId === null) {
        throw new Error("Missing the required parameter 'questionId' when calling updateAnswer");
      }
      // verify the required parameter 'updateAnswerRequest' is set
      if (updateAnswerRequest === undefined || updateAnswerRequest === null) {
        throw new Error("Missing the required parameter 'updateAnswerRequest' when calling updateAnswer");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias,
        'QuestionId': questionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAnswerOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}/answers/{QuestionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalSettings operation.
     * @callback module:api/DefaultApi~updateGlobalSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates whether the Amazon Web Services account is opted into organization sharing and discovery integration features.
     * @param {module:model/UpdateGlobalSettingsRequest} updateGlobalSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateGlobalSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGlobalSettings(updateGlobalSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGlobalSettingsRequest;
      // verify the required parameter 'updateGlobalSettingsRequest' is set
      if (updateGlobalSettingsRequest === undefined || updateGlobalSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateGlobalSettingsRequest' when calling updateGlobalSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/global-settings', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLensReview operation.
     * @callback module:api/DefaultApi~updateLensReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLensReviewOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update lens review for a particular workload.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {module:model/UpdateLensReviewRequest} updateLensReviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLensReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLensReviewOutput}
     */
    updateLensReview(workloadId, lensAlias, updateLensReviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLensReviewRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling updateLensReview");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling updateLensReview");
      }
      // verify the required parameter 'updateLensReviewRequest' is set
      if (updateLensReviewRequest === undefined || updateLensReviewRequest === null) {
        throw new Error("Missing the required parameter 'updateLensReviewRequest' when calling updateLensReview");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLensReviewOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/DefaultApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProfileOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a profile.
     * @param {String} profileArn The profile ARN.
     * @param {module:model/UpdateProfileRequest} updateProfileRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProfileOutput}
     */
    updateProfile(profileArn, updateProfileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProfileRequest;
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling updateProfile");
      }
      // verify the required parameter 'updateProfileRequest' is set
      if (updateProfileRequest === undefined || updateProfileRequest === null) {
        throw new Error("Missing the required parameter 'updateProfileRequest' when calling updateProfile");
      }

      let pathParams = {
        'ProfileArn': profileArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProfileOutput;
      return this.apiClient.callApi(
        '/profiles/{ProfileArn}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShareInvitation operation.
     * @callback module:api/DefaultApi~updateShareInvitationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateShareInvitationOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Update a workload or custom lens share invitation.</p> <note> <p>This API operation can be called independently of any resource. Previous documentation implied that a workload ARN must be specified.</p> </note>
     * @param {String} shareInvitationId The ID assigned to the share invitation.
     * @param {module:model/UpdateShareInvitationRequest} updateShareInvitationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateShareInvitationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateShareInvitationOutput}
     */
    updateShareInvitation(shareInvitationId, updateShareInvitationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateShareInvitationRequest;
      // verify the required parameter 'shareInvitationId' is set
      if (shareInvitationId === undefined || shareInvitationId === null) {
        throw new Error("Missing the required parameter 'shareInvitationId' when calling updateShareInvitation");
      }
      // verify the required parameter 'updateShareInvitationRequest' is set
      if (updateShareInvitationRequest === undefined || updateShareInvitationRequest === null) {
        throw new Error("Missing the required parameter 'updateShareInvitationRequest' when calling updateShareInvitation");
      }

      let pathParams = {
        'ShareInvitationId': shareInvitationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateShareInvitationOutput;
      return this.apiClient.callApi(
        '/shareInvitations/{ShareInvitationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkload operation.
     * @callback module:api/DefaultApi~updateWorkloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorkloadOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing workload.
     * @param {String} workloadId 
     * @param {module:model/UpdateWorkloadRequest} updateWorkloadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorkloadOutput}
     */
    updateWorkload(workloadId, updateWorkloadRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkloadRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling updateWorkload");
      }
      // verify the required parameter 'updateWorkloadRequest' is set
      if (updateWorkloadRequest === undefined || updateWorkloadRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkloadRequest' when calling updateWorkload");
      }

      let pathParams = {
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWorkloadOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWorkloadShare operation.
     * @callback module:api/DefaultApi~updateWorkloadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorkloadShareOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a workload share.
     * @param {String} shareId 
     * @param {String} workloadId 
     * @param {module:model/UpdateWorkloadShareRequest} updateWorkloadShareRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWorkloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorkloadShareOutput}
     */
    updateWorkloadShare(shareId, workloadId, updateWorkloadShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWorkloadShareRequest;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling updateWorkloadShare");
      }
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling updateWorkloadShare");
      }
      // verify the required parameter 'updateWorkloadShareRequest' is set
      if (updateWorkloadShareRequest === undefined || updateWorkloadShareRequest === null) {
        throw new Error("Missing the required parameter 'updateWorkloadShareRequest' when calling updateWorkloadShare");
      }

      let pathParams = {
        'ShareId': shareId,
        'WorkloadId': workloadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateWorkloadShareOutput;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/shares/{ShareId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradeLensReview operation.
     * @callback module:api/DefaultApi~upgradeLensReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade lens review for a particular workload.
     * @param {String} workloadId 
     * @param {String} lensAlias 
     * @param {module:model/UpgradeLensReviewRequest} upgradeLensReviewRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~upgradeLensReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    upgradeLensReview(workloadId, lensAlias, upgradeLensReviewRequest, opts, callback) {
      opts = opts || {};
      let postBody = upgradeLensReviewRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling upgradeLensReview");
      }
      // verify the required parameter 'lensAlias' is set
      if (lensAlias === undefined || lensAlias === null) {
        throw new Error("Missing the required parameter 'lensAlias' when calling upgradeLensReview");
      }
      // verify the required parameter 'upgradeLensReviewRequest' is set
      if (upgradeLensReviewRequest === undefined || upgradeLensReviewRequest === null) {
        throw new Error("Missing the required parameter 'upgradeLensReviewRequest' when calling upgradeLensReview");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'LensAlias': lensAlias
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/lensReviews/{LensAlias}/upgrade', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradeProfileVersion operation.
     * @callback module:api/DefaultApi~upgradeProfileVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upgrade a profile.
     * @param {String} workloadId 
     * @param {String} profileArn The profile ARN.
     * @param {module:model/UpgradeProfileVersionRequest} upgradeProfileVersionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~upgradeProfileVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    upgradeProfileVersion(workloadId, profileArn, upgradeProfileVersionRequest, opts, callback) {
      opts = opts || {};
      let postBody = upgradeProfileVersionRequest;
      // verify the required parameter 'workloadId' is set
      if (workloadId === undefined || workloadId === null) {
        throw new Error("Missing the required parameter 'workloadId' when calling upgradeProfileVersion");
      }
      // verify the required parameter 'profileArn' is set
      if (profileArn === undefined || profileArn === null) {
        throw new Error("Missing the required parameter 'profileArn' when calling upgradeProfileVersion");
      }
      // verify the required parameter 'upgradeProfileVersionRequest' is set
      if (upgradeProfileVersionRequest === undefined || upgradeProfileVersionRequest === null) {
        throw new Error("Missing the required parameter 'upgradeProfileVersionRequest' when calling upgradeProfileVersion");
      }

      let pathParams = {
        'WorkloadId': workloadId,
        'ProfileArn': profileArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/workloads/{WorkloadId}/profiles/{ProfileArn}/upgrade', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
