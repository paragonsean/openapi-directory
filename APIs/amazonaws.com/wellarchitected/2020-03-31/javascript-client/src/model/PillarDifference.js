/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DifferenceStatus from './DifferenceStatus';

/**
 * The PillarDifference model module.
 * @module model/PillarDifference
 * @version 2020-03-31
 */
class PillarDifference {
    /**
     * Constructs a new <code>PillarDifference</code>.
     * A pillar difference return object.
     * @alias module:model/PillarDifference
     */
    constructor() { 
        
        PillarDifference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PillarDifference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PillarDifference} obj Optional instance to populate.
     * @return {module:model/PillarDifference} The populated <code>PillarDifference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PillarDifference();

            if (data.hasOwnProperty('PillarId')) {
                obj['PillarId'] = ApiClient.convertToType(data['PillarId'], 'String');
            }
            if (data.hasOwnProperty('PillarName')) {
                obj['PillarName'] = ApiClient.convertToType(data['PillarName'], 'String');
            }
            if (data.hasOwnProperty('DifferenceStatus')) {
                obj['DifferenceStatus'] = ApiClient.convertToType(data['DifferenceStatus'], DifferenceStatus);
            }
            if (data.hasOwnProperty('QuestionDifferences')) {
                obj['QuestionDifferences'] = ApiClient.convertToType(data['QuestionDifferences'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PillarDifference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PillarDifference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PillarId'] && !(typeof data['PillarId'] === 'string' || data['PillarId'] instanceof String)) {
            throw new Error("Expected the field `PillarId` to be a primitive type in the JSON string but got " + data['PillarId']);
        }
        // ensure the json data is a string
        if (data['PillarName'] && !(typeof data['PillarName'] === 'string' || data['PillarName'] instanceof String)) {
            throw new Error("Expected the field `PillarName` to be a primitive type in the JSON string but got " + data['PillarName']);
        }
        // validate the optional field `DifferenceStatus`
        if (data['DifferenceStatus']) { // data not null
          DifferenceStatus.validateJSON(data['DifferenceStatus']);
        }
        // validate the optional field `QuestionDifferences`
        if (data['QuestionDifferences']) { // data not null
          Array.validateJSON(data['QuestionDifferences']);
        }

        return true;
    }


}



/**
 * <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
 * @member {String} PillarId
 */
PillarDifference.prototype['PillarId'] = undefined;

/**
 * The name of the pillar.
 * @member {String} PillarName
 */
PillarDifference.prototype['PillarName'] = undefined;

/**
 * @member {module:model/DifferenceStatus} DifferenceStatus
 */
PillarDifference.prototype['DifferenceStatus'] = undefined;

/**
 * @member {Array} QuestionDifferences
 */
PillarDifference.prototype['QuestionDifferences'] = undefined;






export default PillarDifference;

