/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateWorkloadRequestDiscoveryConfig from './CreateWorkloadRequestDiscoveryConfig';

/**
 * The UpdateWorkloadRequest model module.
 * @module model/UpdateWorkloadRequest
 * @version 2020-03-31
 */
class UpdateWorkloadRequest {
    /**
     * Constructs a new <code>UpdateWorkloadRequest</code>.
     * @alias module:model/UpdateWorkloadRequest
     */
    constructor() { 
        
        UpdateWorkloadRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateWorkloadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateWorkloadRequest} obj Optional instance to populate.
     * @return {module:model/UpdateWorkloadRequest} The populated <code>UpdateWorkloadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateWorkloadRequest();

            if (data.hasOwnProperty('WorkloadName')) {
                obj['WorkloadName'] = ApiClient.convertToType(data['WorkloadName'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Environment')) {
                obj['Environment'] = ApiClient.convertToType(data['Environment'], 'String');
            }
            if (data.hasOwnProperty('AccountIds')) {
                obj['AccountIds'] = ApiClient.convertToType(data['AccountIds'], ['String']);
            }
            if (data.hasOwnProperty('AwsRegions')) {
                obj['AwsRegions'] = ApiClient.convertToType(data['AwsRegions'], ['String']);
            }
            if (data.hasOwnProperty('NonAwsRegions')) {
                obj['NonAwsRegions'] = ApiClient.convertToType(data['NonAwsRegions'], ['String']);
            }
            if (data.hasOwnProperty('PillarPriorities')) {
                obj['PillarPriorities'] = ApiClient.convertToType(data['PillarPriorities'], ['String']);
            }
            if (data.hasOwnProperty('ArchitecturalDesign')) {
                obj['ArchitecturalDesign'] = ApiClient.convertToType(data['ArchitecturalDesign'], 'String');
            }
            if (data.hasOwnProperty('ReviewOwner')) {
                obj['ReviewOwner'] = ApiClient.convertToType(data['ReviewOwner'], 'String');
            }
            if (data.hasOwnProperty('IsReviewOwnerUpdateAcknowledged')) {
                obj['IsReviewOwnerUpdateAcknowledged'] = ApiClient.convertToType(data['IsReviewOwnerUpdateAcknowledged'], 'Boolean');
            }
            if (data.hasOwnProperty('IndustryType')) {
                obj['IndustryType'] = ApiClient.convertToType(data['IndustryType'], 'String');
            }
            if (data.hasOwnProperty('Industry')) {
                obj['Industry'] = ApiClient.convertToType(data['Industry'], 'String');
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('ImprovementStatus')) {
                obj['ImprovementStatus'] = ApiClient.convertToType(data['ImprovementStatus'], 'String');
            }
            if (data.hasOwnProperty('DiscoveryConfig')) {
                obj['DiscoveryConfig'] = CreateWorkloadRequestDiscoveryConfig.constructFromObject(data['DiscoveryConfig']);
            }
            if (data.hasOwnProperty('Applications')) {
                obj['Applications'] = ApiClient.convertToType(data['Applications'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateWorkloadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateWorkloadRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['WorkloadName'] && !(typeof data['WorkloadName'] === 'string' || data['WorkloadName'] instanceof String)) {
            throw new Error("Expected the field `WorkloadName` to be a primitive type in the JSON string but got " + data['WorkloadName']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Environment'] && !(typeof data['Environment'] === 'string' || data['Environment'] instanceof String)) {
            throw new Error("Expected the field `Environment` to be a primitive type in the JSON string but got " + data['Environment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AccountIds'])) {
            throw new Error("Expected the field `AccountIds` to be an array in the JSON data but got " + data['AccountIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AwsRegions'])) {
            throw new Error("Expected the field `AwsRegions` to be an array in the JSON data but got " + data['AwsRegions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['NonAwsRegions'])) {
            throw new Error("Expected the field `NonAwsRegions` to be an array in the JSON data but got " + data['NonAwsRegions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['PillarPriorities'])) {
            throw new Error("Expected the field `PillarPriorities` to be an array in the JSON data but got " + data['PillarPriorities']);
        }
        // ensure the json data is a string
        if (data['ArchitecturalDesign'] && !(typeof data['ArchitecturalDesign'] === 'string' || data['ArchitecturalDesign'] instanceof String)) {
            throw new Error("Expected the field `ArchitecturalDesign` to be a primitive type in the JSON string but got " + data['ArchitecturalDesign']);
        }
        // ensure the json data is a string
        if (data['ReviewOwner'] && !(typeof data['ReviewOwner'] === 'string' || data['ReviewOwner'] instanceof String)) {
            throw new Error("Expected the field `ReviewOwner` to be a primitive type in the JSON string but got " + data['ReviewOwner']);
        }
        // ensure the json data is a string
        if (data['IndustryType'] && !(typeof data['IndustryType'] === 'string' || data['IndustryType'] instanceof String)) {
            throw new Error("Expected the field `IndustryType` to be a primitive type in the JSON string but got " + data['IndustryType']);
        }
        // ensure the json data is a string
        if (data['Industry'] && !(typeof data['Industry'] === 'string' || data['Industry'] instanceof String)) {
            throw new Error("Expected the field `Industry` to be a primitive type in the JSON string but got " + data['Industry']);
        }
        // ensure the json data is a string
        if (data['Notes'] && !(typeof data['Notes'] === 'string' || data['Notes'] instanceof String)) {
            throw new Error("Expected the field `Notes` to be a primitive type in the JSON string but got " + data['Notes']);
        }
        // ensure the json data is a string
        if (data['ImprovementStatus'] && !(typeof data['ImprovementStatus'] === 'string' || data['ImprovementStatus'] instanceof String)) {
            throw new Error("Expected the field `ImprovementStatus` to be a primitive type in the JSON string but got " + data['ImprovementStatus']);
        }
        // validate the optional field `DiscoveryConfig`
        if (data['DiscoveryConfig']) { // data not null
          CreateWorkloadRequestDiscoveryConfig.validateJSON(data['DiscoveryConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Applications'])) {
            throw new Error("Expected the field `Applications` to be an array in the JSON data but got " + data['Applications']);
        }

        return true;
    }


}



/**
 * <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
 * @member {String} WorkloadName
 */
UpdateWorkloadRequest.prototype['WorkloadName'] = undefined;

/**
 * The description for the workload.
 * @member {String} Description
 */
UpdateWorkloadRequest.prototype['Description'] = undefined;

/**
 * The environment for the workload.
 * @member {module:model/UpdateWorkloadRequest.EnvironmentEnum} Environment
 */
UpdateWorkloadRequest.prototype['Environment'] = undefined;

/**
 * The list of Amazon Web Services account IDs associated with the workload.
 * @member {Array.<String>} AccountIds
 */
UpdateWorkloadRequest.prototype['AccountIds'] = undefined;

/**
 * The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.
 * @member {Array.<String>} AwsRegions
 */
UpdateWorkloadRequest.prototype['AwsRegions'] = undefined;

/**
 *  The list of non-Amazon Web Services Regions associated with the workload.
 * @member {Array.<String>} NonAwsRegions
 */
UpdateWorkloadRequest.prototype['NonAwsRegions'] = undefined;

/**
 * The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.
 * @member {Array.<String>} PillarPriorities
 */
UpdateWorkloadRequest.prototype['PillarPriorities'] = undefined;

/**
 * The URL of the architectural design for the workload.
 * @member {String} ArchitecturalDesign
 */
UpdateWorkloadRequest.prototype['ArchitecturalDesign'] = undefined;

/**
 * The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.
 * @member {String} ReviewOwner
 */
UpdateWorkloadRequest.prototype['ReviewOwner'] = undefined;

/**
 * <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>
 * @member {Boolean} IsReviewOwnerUpdateAcknowledged
 */
UpdateWorkloadRequest.prototype['IsReviewOwnerUpdateAcknowledged'] = undefined;

/**
 * <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>
 * @member {String} IndustryType
 */
UpdateWorkloadRequest.prototype['IndustryType'] = undefined;

/**
 * The industry for the workload.
 * @member {String} Industry
 */
UpdateWorkloadRequest.prototype['Industry'] = undefined;

/**
 * The notes associated with the workload.
 * @member {String} Notes
 */
UpdateWorkloadRequest.prototype['Notes'] = undefined;

/**
 * The improvement status for a workload.
 * @member {module:model/UpdateWorkloadRequest.ImprovementStatusEnum} ImprovementStatus
 */
UpdateWorkloadRequest.prototype['ImprovementStatus'] = undefined;

/**
 * @member {module:model/CreateWorkloadRequestDiscoveryConfig} DiscoveryConfig
 */
UpdateWorkloadRequest.prototype['DiscoveryConfig'] = undefined;

/**
 * List of AppRegistry application ARNs to associate to the workload.
 * @member {Array.<String>} Applications
 */
UpdateWorkloadRequest.prototype['Applications'] = undefined;





/**
 * Allowed values for the <code>Environment</code> property.
 * @enum {String}
 * @readonly
 */
UpdateWorkloadRequest['EnvironmentEnum'] = {

    /**
     * value: "PRODUCTION"
     * @const
     */
    "PRODUCTION": "PRODUCTION",

    /**
     * value: "PREPRODUCTION"
     * @const
     */
    "PREPRODUCTION": "PREPRODUCTION"
};


/**
 * Allowed values for the <code>ImprovementStatus</code> property.
 * @enum {String}
 * @readonly
 */
UpdateWorkloadRequest['ImprovementStatusEnum'] = {

    /**
     * value: "NOT_APPLICABLE"
     * @const
     */
    "NOT_APPLICABLE": "NOT_APPLICABLE",

    /**
     * value: "NOT_STARTED"
     * @const
     */
    "NOT_STARTED": "NOT_STARTED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "RISK_ACKNOWLEDGED"
     * @const
     */
    "RISK_ACKNOWLEDGED": "RISK_ACKNOWLEDGED"
};



export default UpdateWorkloadRequest;

