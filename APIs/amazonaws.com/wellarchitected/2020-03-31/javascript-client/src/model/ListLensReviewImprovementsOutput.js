/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImprovementSummary from './ImprovementSummary';

/**
 * The ListLensReviewImprovementsOutput model module.
 * @module model/ListLensReviewImprovementsOutput
 * @version 2020-03-31
 */
class ListLensReviewImprovementsOutput {
    /**
     * Constructs a new <code>ListLensReviewImprovementsOutput</code>.
     * Output of a list lens review improvements call.
     * @alias module:model/ListLensReviewImprovementsOutput
     */
    constructor() { 
        
        ListLensReviewImprovementsOutput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListLensReviewImprovementsOutput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListLensReviewImprovementsOutput} obj Optional instance to populate.
     * @return {module:model/ListLensReviewImprovementsOutput} The populated <code>ListLensReviewImprovementsOutput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListLensReviewImprovementsOutput();

            if (data.hasOwnProperty('WorkloadId')) {
                obj['WorkloadId'] = ApiClient.convertToType(data['WorkloadId'], 'String');
            }
            if (data.hasOwnProperty('MilestoneNumber')) {
                obj['MilestoneNumber'] = ApiClient.convertToType(data['MilestoneNumber'], 'Number');
            }
            if (data.hasOwnProperty('LensAlias')) {
                obj['LensAlias'] = ApiClient.convertToType(data['LensAlias'], 'String');
            }
            if (data.hasOwnProperty('LensArn')) {
                obj['LensArn'] = ApiClient.convertToType(data['LensArn'], 'String');
            }
            if (data.hasOwnProperty('ImprovementSummaries')) {
                obj['ImprovementSummaries'] = ApiClient.convertToType(data['ImprovementSummaries'], [ImprovementSummary]);
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListLensReviewImprovementsOutput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListLensReviewImprovementsOutput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['WorkloadId'] && !(typeof data['WorkloadId'] === 'string' || data['WorkloadId'] instanceof String)) {
            throw new Error("Expected the field `WorkloadId` to be a primitive type in the JSON string but got " + data['WorkloadId']);
        }
        // ensure the json data is a string
        if (data['LensAlias'] && !(typeof data['LensAlias'] === 'string' || data['LensAlias'] instanceof String)) {
            throw new Error("Expected the field `LensAlias` to be a primitive type in the JSON string but got " + data['LensAlias']);
        }
        // validate the optional field `LensArn`
        if (data['LensArn']) { // data not null
          String.validateJSON(data['LensArn']);
        }
        if (data['ImprovementSummaries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ImprovementSummaries'])) {
                throw new Error("Expected the field `ImprovementSummaries` to be an array in the JSON data but got " + data['ImprovementSummaries']);
            }
            // validate the optional field `ImprovementSummaries` (array)
            for (const item of data['ImprovementSummaries']) {
                ImprovementSummary.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }

        return true;
    }


}



/**
 * The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
 * @member {String} WorkloadId
 */
ListLensReviewImprovementsOutput.prototype['WorkloadId'] = undefined;

/**
 * <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>
 * @member {Number} MilestoneNumber
 */
ListLensReviewImprovementsOutput.prototype['MilestoneNumber'] = undefined;

/**
 * <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
 * @member {String} LensAlias
 */
ListLensReviewImprovementsOutput.prototype['LensAlias'] = undefined;

/**
 * @member {String} LensArn
 */
ListLensReviewImprovementsOutput.prototype['LensArn'] = undefined;

/**
 * List of improvement summaries of lens review in a workload.
 * @member {Array.<module:model/ImprovementSummary>} ImprovementSummaries
 */
ListLensReviewImprovementsOutput.prototype['ImprovementSummaries'] = undefined;

/**
 * The token to use to retrieve the next set of results.
 * @member {String} NextToken
 */
ListLensReviewImprovementsOutput.prototype['NextToken'] = undefined;






export default ListLensReviewImprovementsOutput;

