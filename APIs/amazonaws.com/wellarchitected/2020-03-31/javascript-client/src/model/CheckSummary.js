/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckProvider from './CheckProvider';
import CheckStatus from './CheckStatus';

/**
 * The CheckSummary model module.
 * @module model/CheckSummary
 * @version 2020-03-31
 */
class CheckSummary {
    /**
     * Constructs a new <code>CheckSummary</code>.
     * Trusted Advisor check summary.
     * @alias module:model/CheckSummary
     */
    constructor() { 
        
        CheckSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckSummary} obj Optional instance to populate.
     * @return {module:model/CheckSummary} The populated <code>CheckSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckSummary();

            if (data.hasOwnProperty('Id')) {
                obj['Id'] = ApiClient.convertToType(data['Id'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Provider')) {
                obj['Provider'] = ApiClient.convertToType(data['Provider'], CheckProvider);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('UpdatedAt')) {
                obj['UpdatedAt'] = ApiClient.convertToType(data['UpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('LensArn')) {
                obj['LensArn'] = ApiClient.convertToType(data['LensArn'], 'String');
            }
            if (data.hasOwnProperty('PillarId')) {
                obj['PillarId'] = ApiClient.convertToType(data['PillarId'], 'String');
            }
            if (data.hasOwnProperty('QuestionId')) {
                obj['QuestionId'] = ApiClient.convertToType(data['QuestionId'], 'String');
            }
            if (data.hasOwnProperty('ChoiceId')) {
                obj['ChoiceId'] = ApiClient.convertToType(data['ChoiceId'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], CheckStatus);
            }
            if (data.hasOwnProperty('AccountSummary')) {
                obj['AccountSummary'] = ApiClient.convertToType(data['AccountSummary'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Id`
        if (data['Id']) { // data not null
          String.validateJSON(data['Id']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Provider`
        if (data['Provider']) { // data not null
          CheckProvider.validateJSON(data['Provider']);
        }
        // validate the optional field `Description`
        if (data['Description']) { // data not null
          String.validateJSON(data['Description']);
        }
        // validate the optional field `LensArn`
        if (data['LensArn']) { // data not null
          String.validateJSON(data['LensArn']);
        }
        // ensure the json data is a string
        if (data['PillarId'] && !(typeof data['PillarId'] === 'string' || data['PillarId'] instanceof String)) {
            throw new Error("Expected the field `PillarId` to be a primitive type in the JSON string but got " + data['PillarId']);
        }
        // ensure the json data is a string
        if (data['QuestionId'] && !(typeof data['QuestionId'] === 'string' || data['QuestionId'] instanceof String)) {
            throw new Error("Expected the field `QuestionId` to be a primitive type in the JSON string but got " + data['QuestionId']);
        }
        // ensure the json data is a string
        if (data['ChoiceId'] && !(typeof data['ChoiceId'] === 'string' || data['ChoiceId'] instanceof String)) {
            throw new Error("Expected the field `ChoiceId` to be a primitive type in the JSON string but got " + data['ChoiceId']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          CheckStatus.validateJSON(data['Status']);
        }
        // validate the optional field `AccountSummary`
        if (data['AccountSummary']) { // data not null
          Object.validateJSON(data['AccountSummary']);
        }

        return true;
    }


}



/**
 * @member {String} Id
 */
CheckSummary.prototype['Id'] = undefined;

/**
 * @member {String} Name
 */
CheckSummary.prototype['Name'] = undefined;

/**
 * @member {module:model/CheckProvider} Provider
 */
CheckSummary.prototype['Provider'] = undefined;

/**
 * @member {String} Description
 */
CheckSummary.prototype['Description'] = undefined;

/**
 * The date and time recorded.
 * @member {Date} UpdatedAt
 */
CheckSummary.prototype['UpdatedAt'] = undefined;

/**
 * @member {String} LensArn
 */
CheckSummary.prototype['LensArn'] = undefined;

/**
 * <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
 * @member {String} PillarId
 */
CheckSummary.prototype['PillarId'] = undefined;

/**
 * The ID of the question.
 * @member {String} QuestionId
 */
CheckSummary.prototype['QuestionId'] = undefined;

/**
 * The ID of a choice.
 * @member {String} ChoiceId
 */
CheckSummary.prototype['ChoiceId'] = undefined;

/**
 * @member {module:model/CheckStatus} Status
 */
CheckSummary.prototype['Status'] = undefined;

/**
 * @member {Object} AccountSummary
 */
CheckSummary.prototype['AccountSummary'] = undefined;






export default CheckSummary;

