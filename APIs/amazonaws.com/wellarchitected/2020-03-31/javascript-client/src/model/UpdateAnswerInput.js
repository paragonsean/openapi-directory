/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswerReason from './AnswerReason';

/**
 * The UpdateAnswerInput model module.
 * @module model/UpdateAnswerInput
 * @version 2020-03-31
 */
class UpdateAnswerInput {
    /**
     * Constructs a new <code>UpdateAnswerInput</code>.
     * Input to update answer.
     * @alias module:model/UpdateAnswerInput
     */
    constructor() { 
        
        UpdateAnswerInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateAnswerInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAnswerInput} obj Optional instance to populate.
     * @return {module:model/UpdateAnswerInput} The populated <code>UpdateAnswerInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAnswerInput();

            if (data.hasOwnProperty('SelectedChoices')) {
                obj['SelectedChoices'] = ApiClient.convertToType(data['SelectedChoices'], ['String']);
            }
            if (data.hasOwnProperty('ChoiceUpdates')) {
                obj['ChoiceUpdates'] = ApiClient.convertToType(data['ChoiceUpdates'], Object);
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('IsApplicable')) {
                obj['IsApplicable'] = ApiClient.convertToType(data['IsApplicable'], 'Boolean');
            }
            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], AnswerReason);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateAnswerInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateAnswerInput</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['SelectedChoices'])) {
            throw new Error("Expected the field `SelectedChoices` to be an array in the JSON data but got " + data['SelectedChoices']);
        }
        // validate the optional field `ChoiceUpdates`
        if (data['ChoiceUpdates']) { // data not null
          Object.validateJSON(data['ChoiceUpdates']);
        }
        // ensure the json data is a string
        if (data['Notes'] && !(typeof data['Notes'] === 'string' || data['Notes'] instanceof String)) {
            throw new Error("Expected the field `Notes` to be a primitive type in the JSON string but got " + data['Notes']);
        }
        // validate the optional field `Reason`
        if (data['Reason']) { // data not null
          AnswerReason.validateJSON(data['Reason']);
        }

        return true;
    }


}



/**
 * <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
 * @member {Array.<String>} SelectedChoices
 */
UpdateAnswerInput.prototype['SelectedChoices'] = undefined;

/**
 * @member {Object} ChoiceUpdates
 */
UpdateAnswerInput.prototype['ChoiceUpdates'] = undefined;

/**
 * The notes associated with the workload.
 * @member {String} Notes
 */
UpdateAnswerInput.prototype['Notes'] = undefined;

/**
 * Defines whether this question is applicable to a lens review.
 * @member {Boolean} IsApplicable
 */
UpdateAnswerInput.prototype['IsApplicable'] = undefined;

/**
 * @member {module:model/AnswerReason} Reason
 */
UpdateAnswerInput.prototype['Reason'] = undefined;






export default UpdateAnswerInput;

