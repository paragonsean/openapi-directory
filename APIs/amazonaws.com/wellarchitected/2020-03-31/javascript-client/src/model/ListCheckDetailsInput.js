/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListCheckDetailsInput model module.
 * @module model/ListCheckDetailsInput
 * @version 2020-03-31
 */
class ListCheckDetailsInput {
    /**
     * Constructs a new <code>ListCheckDetailsInput</code>.
     * @alias module:model/ListCheckDetailsInput
     * @param lensArn {String} 
     * @param pillarId {String} <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
     * @param questionId {String} The ID of the question.
     * @param choiceId {String} The ID of a choice.
     */
    constructor(lensArn, pillarId, questionId, choiceId) { 
        
        ListCheckDetailsInput.initialize(this, lensArn, pillarId, questionId, choiceId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lensArn, pillarId, questionId, choiceId) { 
        obj['LensArn'] = lensArn;
        obj['PillarId'] = pillarId;
        obj['QuestionId'] = questionId;
        obj['ChoiceId'] = choiceId;
    }

    /**
     * Constructs a <code>ListCheckDetailsInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListCheckDetailsInput} obj Optional instance to populate.
     * @return {module:model/ListCheckDetailsInput} The populated <code>ListCheckDetailsInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListCheckDetailsInput();

            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('LensArn')) {
                obj['LensArn'] = ApiClient.convertToType(data['LensArn'], 'String');
            }
            if (data.hasOwnProperty('PillarId')) {
                obj['PillarId'] = ApiClient.convertToType(data['PillarId'], 'String');
            }
            if (data.hasOwnProperty('QuestionId')) {
                obj['QuestionId'] = ApiClient.convertToType(data['QuestionId'], 'String');
            }
            if (data.hasOwnProperty('ChoiceId')) {
                obj['ChoiceId'] = ApiClient.convertToType(data['ChoiceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListCheckDetailsInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListCheckDetailsInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListCheckDetailsInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }
        // validate the optional field `LensArn`
        if (data['LensArn']) { // data not null
          String.validateJSON(data['LensArn']);
        }
        // ensure the json data is a string
        if (data['PillarId'] && !(typeof data['PillarId'] === 'string' || data['PillarId'] instanceof String)) {
            throw new Error("Expected the field `PillarId` to be a primitive type in the JSON string but got " + data['PillarId']);
        }
        // ensure the json data is a string
        if (data['QuestionId'] && !(typeof data['QuestionId'] === 'string' || data['QuestionId'] instanceof String)) {
            throw new Error("Expected the field `QuestionId` to be a primitive type in the JSON string but got " + data['QuestionId']);
        }
        // ensure the json data is a string
        if (data['ChoiceId'] && !(typeof data['ChoiceId'] === 'string' || data['ChoiceId'] instanceof String)) {
            throw new Error("Expected the field `ChoiceId` to be a primitive type in the JSON string but got " + data['ChoiceId']);
        }

        return true;
    }


}

ListCheckDetailsInput.RequiredProperties = ["LensArn", "PillarId", "QuestionId", "ChoiceId"];

/**
 * The token to use to retrieve the next set of results.
 * @member {String} NextToken
 */
ListCheckDetailsInput.prototype['NextToken'] = undefined;

/**
 * The maximum number of results to return for this request.
 * @member {Number} MaxResults
 */
ListCheckDetailsInput.prototype['MaxResults'] = undefined;

/**
 * @member {String} LensArn
 */
ListCheckDetailsInput.prototype['LensArn'] = undefined;

/**
 * <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
 * @member {String} PillarId
 */
ListCheckDetailsInput.prototype['PillarId'] = undefined;

/**
 * The ID of the question.
 * @member {String} QuestionId
 */
ListCheckDetailsInput.prototype['QuestionId'] = undefined;

/**
 * The ID of a choice.
 * @member {String} ChoiceId
 */
ListCheckDetailsInput.prototype['ChoiceId'] = undefined;






export default ListCheckDetailsInput;

