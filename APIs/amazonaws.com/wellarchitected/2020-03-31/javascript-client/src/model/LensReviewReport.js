/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LensReviewReport model module.
 * @module model/LensReviewReport
 * @version 2020-03-31
 */
class LensReviewReport {
    /**
     * Constructs a new <code>LensReviewReport</code>.
     * A report of a lens review.
     * @alias module:model/LensReviewReport
     */
    constructor() { 
        
        LensReviewReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LensReviewReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LensReviewReport} obj Optional instance to populate.
     * @return {module:model/LensReviewReport} The populated <code>LensReviewReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LensReviewReport();

            if (data.hasOwnProperty('LensAlias')) {
                obj['LensAlias'] = ApiClient.convertToType(data['LensAlias'], 'String');
            }
            if (data.hasOwnProperty('LensArn')) {
                obj['LensArn'] = ApiClient.convertToType(data['LensArn'], 'String');
            }
            if (data.hasOwnProperty('Base64String')) {
                obj['Base64String'] = ApiClient.convertToType(data['Base64String'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LensReviewReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LensReviewReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['LensAlias'] && !(typeof data['LensAlias'] === 'string' || data['LensAlias'] instanceof String)) {
            throw new Error("Expected the field `LensAlias` to be a primitive type in the JSON string but got " + data['LensAlias']);
        }
        // validate the optional field `LensArn`
        if (data['LensArn']) { // data not null
          String.validateJSON(data['LensArn']);
        }
        // ensure the json data is a string
        if (data['Base64String'] && !(typeof data['Base64String'] === 'string' || data['Base64String'] instanceof String)) {
            throw new Error("Expected the field `Base64String` to be a primitive type in the JSON string but got " + data['Base64String']);
        }

        return true;
    }


}



/**
 * <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>
 * @member {String} LensAlias
 */
LensReviewReport.prototype['LensAlias'] = undefined;

/**
 * @member {String} LensArn
 */
LensReviewReport.prototype['LensArn'] = undefined;

/**
 * <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>
 * @member {String} Base64String
 */
LensReviewReport.prototype['Base64String'] = undefined;






export default LensReviewReport;

