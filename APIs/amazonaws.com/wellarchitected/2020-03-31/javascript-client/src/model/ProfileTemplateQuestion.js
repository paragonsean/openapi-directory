/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProfileTemplateQuestion model module.
 * @module model/ProfileTemplateQuestion
 * @version 2020-03-31
 */
class ProfileTemplateQuestion {
    /**
     * Constructs a new <code>ProfileTemplateQuestion</code>.
     * A profile template question.
     * @alias module:model/ProfileTemplateQuestion
     */
    constructor() { 
        
        ProfileTemplateQuestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProfileTemplateQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProfileTemplateQuestion} obj Optional instance to populate.
     * @return {module:model/ProfileTemplateQuestion} The populated <code>ProfileTemplateQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProfileTemplateQuestion();

            if (data.hasOwnProperty('QuestionId')) {
                obj['QuestionId'] = ApiClient.convertToType(data['QuestionId'], 'String');
            }
            if (data.hasOwnProperty('QuestionTitle')) {
                obj['QuestionTitle'] = ApiClient.convertToType(data['QuestionTitle'], 'String');
            }
            if (data.hasOwnProperty('QuestionDescription')) {
                obj['QuestionDescription'] = ApiClient.convertToType(data['QuestionDescription'], 'String');
            }
            if (data.hasOwnProperty('QuestionChoices')) {
                obj['QuestionChoices'] = ApiClient.convertToType(data['QuestionChoices'], Array);
            }
            if (data.hasOwnProperty('MinSelectedChoices')) {
                obj['MinSelectedChoices'] = ApiClient.convertToType(data['MinSelectedChoices'], 'Number');
            }
            if (data.hasOwnProperty('MaxSelectedChoices')) {
                obj['MaxSelectedChoices'] = ApiClient.convertToType(data['MaxSelectedChoices'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProfileTemplateQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProfileTemplateQuestion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['QuestionId'] && !(typeof data['QuestionId'] === 'string' || data['QuestionId'] instanceof String)) {
            throw new Error("Expected the field `QuestionId` to be a primitive type in the JSON string but got " + data['QuestionId']);
        }
        // ensure the json data is a string
        if (data['QuestionTitle'] && !(typeof data['QuestionTitle'] === 'string' || data['QuestionTitle'] instanceof String)) {
            throw new Error("Expected the field `QuestionTitle` to be a primitive type in the JSON string but got " + data['QuestionTitle']);
        }
        // ensure the json data is a string
        if (data['QuestionDescription'] && !(typeof data['QuestionDescription'] === 'string' || data['QuestionDescription'] instanceof String)) {
            throw new Error("Expected the field `QuestionDescription` to be a primitive type in the JSON string but got " + data['QuestionDescription']);
        }
        // validate the optional field `QuestionChoices`
        if (data['QuestionChoices']) { // data not null
          Array.validateJSON(data['QuestionChoices']);
        }
        // validate the optional field `MinSelectedChoices`
        if (data['MinSelectedChoices']) { // data not null
          Number.validateJSON(data['MinSelectedChoices']);
        }
        // validate the optional field `MaxSelectedChoices`
        if (data['MaxSelectedChoices']) { // data not null
          Number.validateJSON(data['MaxSelectedChoices']);
        }

        return true;
    }


}



/**
 * The ID of the question.
 * @member {String} QuestionId
 */
ProfileTemplateQuestion.prototype['QuestionId'] = undefined;

/**
 * The title of the question.
 * @member {String} QuestionTitle
 */
ProfileTemplateQuestion.prototype['QuestionTitle'] = undefined;

/**
 * The description of the question.
 * @member {String} QuestionDescription
 */
ProfileTemplateQuestion.prototype['QuestionDescription'] = undefined;

/**
 * @member {Array} QuestionChoices
 */
ProfileTemplateQuestion.prototype['QuestionChoices'] = undefined;

/**
 * @member {Number} MinSelectedChoices
 */
ProfileTemplateQuestion.prototype['MinSelectedChoices'] = undefined;

/**
 * @member {Number} MaxSelectedChoices
 */
ProfileTemplateQuestion.prototype['MaxSelectedChoices'] = undefined;






export default ProfileTemplateQuestion;

