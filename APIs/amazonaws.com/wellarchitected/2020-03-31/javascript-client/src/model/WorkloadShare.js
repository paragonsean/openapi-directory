/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PermissionType from './PermissionType';
import ShareStatus from './ShareStatus';

/**
 * The WorkloadShare model module.
 * @module model/WorkloadShare
 * @version 2020-03-31
 */
class WorkloadShare {
    /**
     * Constructs a new <code>WorkloadShare</code>.
     * A workload share return object.
     * @alias module:model/WorkloadShare
     */
    constructor() { 
        
        WorkloadShare.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkloadShare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkloadShare} obj Optional instance to populate.
     * @return {module:model/WorkloadShare} The populated <code>WorkloadShare</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkloadShare();

            if (data.hasOwnProperty('ShareId')) {
                obj['ShareId'] = ApiClient.convertToType(data['ShareId'], 'String');
            }
            if (data.hasOwnProperty('SharedBy')) {
                obj['SharedBy'] = ApiClient.convertToType(data['SharedBy'], 'String');
            }
            if (data.hasOwnProperty('SharedWith')) {
                obj['SharedWith'] = ApiClient.convertToType(data['SharedWith'], 'String');
            }
            if (data.hasOwnProperty('PermissionType')) {
                obj['PermissionType'] = PermissionType.constructFromObject(data['PermissionType']);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ShareStatus.constructFromObject(data['Status']);
            }
            if (data.hasOwnProperty('WorkloadName')) {
                obj['WorkloadName'] = ApiClient.convertToType(data['WorkloadName'], 'String');
            }
            if (data.hasOwnProperty('WorkloadId')) {
                obj['WorkloadId'] = ApiClient.convertToType(data['WorkloadId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkloadShare</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkloadShare</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ShareId'] && !(typeof data['ShareId'] === 'string' || data['ShareId'] instanceof String)) {
            throw new Error("Expected the field `ShareId` to be a primitive type in the JSON string but got " + data['ShareId']);
        }
        // ensure the json data is a string
        if (data['SharedBy'] && !(typeof data['SharedBy'] === 'string' || data['SharedBy'] instanceof String)) {
            throw new Error("Expected the field `SharedBy` to be a primitive type in the JSON string but got " + data['SharedBy']);
        }
        // ensure the json data is a string
        if (data['SharedWith'] && !(typeof data['SharedWith'] === 'string' || data['SharedWith'] instanceof String)) {
            throw new Error("Expected the field `SharedWith` to be a primitive type in the JSON string but got " + data['SharedWith']);
        }
        // ensure the json data is a string
        if (data['WorkloadName'] && !(typeof data['WorkloadName'] === 'string' || data['WorkloadName'] instanceof String)) {
            throw new Error("Expected the field `WorkloadName` to be a primitive type in the JSON string but got " + data['WorkloadName']);
        }
        // ensure the json data is a string
        if (data['WorkloadId'] && !(typeof data['WorkloadId'] === 'string' || data['WorkloadId'] instanceof String)) {
            throw new Error("Expected the field `WorkloadId` to be a primitive type in the JSON string but got " + data['WorkloadId']);
        }

        return true;
    }


}



/**
 * The ID associated with the share.
 * @member {String} ShareId
 */
WorkloadShare.prototype['ShareId'] = undefined;

/**
 * An Amazon Web Services account ID.
 * @member {String} SharedBy
 */
WorkloadShare.prototype['SharedBy'] = undefined;

/**
 * The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.
 * @member {String} SharedWith
 */
WorkloadShare.prototype['SharedWith'] = undefined;

/**
 * @member {module:model/PermissionType} PermissionType
 */
WorkloadShare.prototype['PermissionType'] = undefined;

/**
 * @member {module:model/ShareStatus} Status
 */
WorkloadShare.prototype['Status'] = undefined;

/**
 * <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>
 * @member {String} WorkloadName
 */
WorkloadShare.prototype['WorkloadName'] = undefined;

/**
 * The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
 * @member {String} WorkloadId
 */
WorkloadShare.prototype['WorkloadId'] = undefined;






export default WorkloadShare;

