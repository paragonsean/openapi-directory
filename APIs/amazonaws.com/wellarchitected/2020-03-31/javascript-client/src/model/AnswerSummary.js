/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswerReason from './AnswerReason';
import Choice from './Choice';
import QuestionType from './QuestionType';
import Risk from './Risk';

/**
 * The AnswerSummary model module.
 * @module model/AnswerSummary
 * @version 2020-03-31
 */
class AnswerSummary {
    /**
     * Constructs a new <code>AnswerSummary</code>.
     * An answer summary of a lens review in a workload.
     * @alias module:model/AnswerSummary
     */
    constructor() { 
        
        AnswerSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnswerSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnswerSummary} obj Optional instance to populate.
     * @return {module:model/AnswerSummary} The populated <code>AnswerSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnswerSummary();

            if (data.hasOwnProperty('QuestionId')) {
                obj['QuestionId'] = ApiClient.convertToType(data['QuestionId'], 'String');
            }
            if (data.hasOwnProperty('PillarId')) {
                obj['PillarId'] = ApiClient.convertToType(data['PillarId'], 'String');
            }
            if (data.hasOwnProperty('QuestionTitle')) {
                obj['QuestionTitle'] = ApiClient.convertToType(data['QuestionTitle'], 'String');
            }
            if (data.hasOwnProperty('Choices')) {
                obj['Choices'] = ApiClient.convertToType(data['Choices'], [Choice]);
            }
            if (data.hasOwnProperty('SelectedChoices')) {
                obj['SelectedChoices'] = ApiClient.convertToType(data['SelectedChoices'], ['String']);
            }
            if (data.hasOwnProperty('ChoiceAnswerSummaries')) {
                obj['ChoiceAnswerSummaries'] = ApiClient.convertToType(data['ChoiceAnswerSummaries'], Array);
            }
            if (data.hasOwnProperty('IsApplicable')) {
                obj['IsApplicable'] = ApiClient.convertToType(data['IsApplicable'], 'Boolean');
            }
            if (data.hasOwnProperty('Risk')) {
                obj['Risk'] = Risk.constructFromObject(data['Risk']);
            }
            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], AnswerReason);
            }
            if (data.hasOwnProperty('QuestionType')) {
                obj['QuestionType'] = ApiClient.convertToType(data['QuestionType'], QuestionType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnswerSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnswerSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['QuestionId'] && !(typeof data['QuestionId'] === 'string' || data['QuestionId'] instanceof String)) {
            throw new Error("Expected the field `QuestionId` to be a primitive type in the JSON string but got " + data['QuestionId']);
        }
        // ensure the json data is a string
        if (data['PillarId'] && !(typeof data['PillarId'] === 'string' || data['PillarId'] instanceof String)) {
            throw new Error("Expected the field `PillarId` to be a primitive type in the JSON string but got " + data['PillarId']);
        }
        // ensure the json data is a string
        if (data['QuestionTitle'] && !(typeof data['QuestionTitle'] === 'string' || data['QuestionTitle'] instanceof String)) {
            throw new Error("Expected the field `QuestionTitle` to be a primitive type in the JSON string but got " + data['QuestionTitle']);
        }
        if (data['Choices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Choices'])) {
                throw new Error("Expected the field `Choices` to be an array in the JSON data but got " + data['Choices']);
            }
            // validate the optional field `Choices` (array)
            for (const item of data['Choices']) {
                Choice.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['SelectedChoices'])) {
            throw new Error("Expected the field `SelectedChoices` to be an array in the JSON data but got " + data['SelectedChoices']);
        }
        // validate the optional field `ChoiceAnswerSummaries`
        if (data['ChoiceAnswerSummaries']) { // data not null
          Array.validateJSON(data['ChoiceAnswerSummaries']);
        }
        // validate the optional field `Reason`
        if (data['Reason']) { // data not null
          AnswerReason.validateJSON(data['Reason']);
        }
        // validate the optional field `QuestionType`
        if (data['QuestionType']) { // data not null
          QuestionType.validateJSON(data['QuestionType']);
        }

        return true;
    }


}



/**
 * The ID of the question.
 * @member {String} QuestionId
 */
AnswerSummary.prototype['QuestionId'] = undefined;

/**
 * <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>
 * @member {String} PillarId
 */
AnswerSummary.prototype['PillarId'] = undefined;

/**
 * The title of the question.
 * @member {String} QuestionTitle
 */
AnswerSummary.prototype['QuestionTitle'] = undefined;

/**
 * List of choices available for a question.
 * @member {Array.<module:model/Choice>} Choices
 */
AnswerSummary.prototype['Choices'] = undefined;

/**
 * <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
 * @member {Array.<String>} SelectedChoices
 */
AnswerSummary.prototype['SelectedChoices'] = undefined;

/**
 * @member {Array} ChoiceAnswerSummaries
 */
AnswerSummary.prototype['ChoiceAnswerSummaries'] = undefined;

/**
 * Defines whether this question is applicable to a lens review.
 * @member {Boolean} IsApplicable
 */
AnswerSummary.prototype['IsApplicable'] = undefined;

/**
 * @member {module:model/Risk} Risk
 */
AnswerSummary.prototype['Risk'] = undefined;

/**
 * @member {module:model/AnswerReason} Reason
 */
AnswerSummary.prototype['Reason'] = undefined;

/**
 * @member {module:model/QuestionType} QuestionType
 */
AnswerSummary.prototype['QuestionType'] = undefined;






export default AnswerSummary;

