/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Lens from './Lens';

/**
 * The GetLensOutputLens model module.
 * @module model/GetLensOutputLens
 * @version 2020-03-31
 */
class GetLensOutputLens {
    /**
     * Constructs a new <code>GetLensOutputLens</code>.
     * @alias module:model/GetLensOutputLens
     * @implements module:model/Lens
     */
    constructor() { 
        Lens.initialize(this);
        GetLensOutputLens.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetLensOutputLens</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetLensOutputLens} obj Optional instance to populate.
     * @return {module:model/GetLensOutputLens} The populated <code>GetLensOutputLens</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetLensOutputLens();
            Lens.constructFromObject(data, obj);

            if (data.hasOwnProperty('LensArn')) {
                obj['LensArn'] = ApiClient.convertToType(data['LensArn'], 'String');
            }
            if (data.hasOwnProperty('LensVersion')) {
                obj['LensVersion'] = ApiClient.convertToType(data['LensVersion'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Owner')) {
                obj['Owner'] = ApiClient.convertToType(data['Owner'], 'String');
            }
            if (data.hasOwnProperty('ShareInvitationId')) {
                obj['ShareInvitationId'] = ApiClient.convertToType(data['ShareInvitationId'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetLensOutputLens</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetLensOutputLens</code>.
     */
    static validateJSON(data) {
        // validate the optional field `LensArn`
        if (data['LensArn']) { // data not null
          String.validateJSON(data['LensArn']);
        }
        // validate the optional field `LensVersion`
        if (data['LensVersion']) { // data not null
          String.validateJSON(data['LensVersion']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // validate the optional field `Owner`
        if (data['Owner']) { // data not null
          String.validateJSON(data['Owner']);
        }
        // validate the optional field `ShareInvitationId`
        if (data['ShareInvitationId']) { // data not null
          String.validateJSON(data['ShareInvitationId']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Object.validateJSON(data['Tags']);
        }

        return true;
    }


}



/**
 * @member {String} LensArn
 */
GetLensOutputLens.prototype['LensArn'] = undefined;

/**
 * @member {String} LensVersion
 */
GetLensOutputLens.prototype['LensVersion'] = undefined;

/**
 * The full name of the lens.
 * @member {String} Name
 */
GetLensOutputLens.prototype['Name'] = undefined;

/**
 * The description of the lens.
 * @member {String} Description
 */
GetLensOutputLens.prototype['Description'] = undefined;

/**
 * @member {String} Owner
 */
GetLensOutputLens.prototype['Owner'] = undefined;

/**
 * @member {String} ShareInvitationId
 */
GetLensOutputLens.prototype['ShareInvitationId'] = undefined;

/**
 * @member {Object} Tags
 */
GetLensOutputLens.prototype['Tags'] = undefined;


// Implement Lens interface:
/**
 * @member {String} LensArn
 */
Lens.prototype['LensArn'] = undefined;
/**
 * @member {String} LensVersion
 */
Lens.prototype['LensVersion'] = undefined;
/**
 * The full name of the lens.
 * @member {String} Name
 */
Lens.prototype['Name'] = undefined;
/**
 * The description of the lens.
 * @member {String} Description
 */
Lens.prototype['Description'] = undefined;
/**
 * @member {String} Owner
 */
Lens.prototype['Owner'] = undefined;
/**
 * @member {String} ShareInvitationId
 */
Lens.prototype['ShareInvitationId'] = undefined;
/**
 * @member {Object} Tags
 */
Lens.prototype['Tags'] = undefined;




export default GetLensOutputLens;

