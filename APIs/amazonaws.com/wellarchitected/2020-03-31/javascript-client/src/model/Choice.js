/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChoiceHelpfulResource from './ChoiceHelpfulResource';
import ChoiceImprovementPlan from './ChoiceImprovementPlan';

/**
 * The Choice model module.
 * @module model/Choice
 * @version 2020-03-31
 */
class Choice {
    /**
     * Constructs a new <code>Choice</code>.
     * A choice available to answer question.
     * @alias module:model/Choice
     */
    constructor() { 
        
        Choice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Choice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Choice} obj Optional instance to populate.
     * @return {module:model/Choice} The populated <code>Choice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Choice();

            if (data.hasOwnProperty('ChoiceId')) {
                obj['ChoiceId'] = ApiClient.convertToType(data['ChoiceId'], 'String');
            }
            if (data.hasOwnProperty('Title')) {
                obj['Title'] = ApiClient.convertToType(data['Title'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('HelpfulResource')) {
                obj['HelpfulResource'] = ChoiceHelpfulResource.constructFromObject(data['HelpfulResource']);
            }
            if (data.hasOwnProperty('ImprovementPlan')) {
                obj['ImprovementPlan'] = ChoiceImprovementPlan.constructFromObject(data['ImprovementPlan']);
            }
            if (data.hasOwnProperty('AdditionalResources')) {
                obj['AdditionalResources'] = ApiClient.convertToType(data['AdditionalResources'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Choice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Choice</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ChoiceId'] && !(typeof data['ChoiceId'] === 'string' || data['ChoiceId'] instanceof String)) {
            throw new Error("Expected the field `ChoiceId` to be a primitive type in the JSON string but got " + data['ChoiceId']);
        }
        // ensure the json data is a string
        if (data['Title'] && !(typeof data['Title'] === 'string' || data['Title'] instanceof String)) {
            throw new Error("Expected the field `Title` to be a primitive type in the JSON string but got " + data['Title']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // validate the optional field `HelpfulResource`
        if (data['HelpfulResource']) { // data not null
          ChoiceHelpfulResource.validateJSON(data['HelpfulResource']);
        }
        // validate the optional field `ImprovementPlan`
        if (data['ImprovementPlan']) { // data not null
          ChoiceImprovementPlan.validateJSON(data['ImprovementPlan']);
        }
        // validate the optional field `AdditionalResources`
        if (data['AdditionalResources']) { // data not null
          Array.validateJSON(data['AdditionalResources']);
        }

        return true;
    }


}



/**
 * The ID of a choice.
 * @member {String} ChoiceId
 */
Choice.prototype['ChoiceId'] = undefined;

/**
 * The title of a choice.
 * @member {String} Title
 */
Choice.prototype['Title'] = undefined;

/**
 * The description of a choice.
 * @member {String} Description
 */
Choice.prototype['Description'] = undefined;

/**
 * @member {module:model/ChoiceHelpfulResource} HelpfulResource
 */
Choice.prototype['HelpfulResource'] = undefined;

/**
 * @member {module:model/ChoiceImprovementPlan} ImprovementPlan
 */
Choice.prototype['ImprovementPlan'] = undefined;

/**
 * @member {Array} AdditionalResources
 */
Choice.prototype['AdditionalResources'] = undefined;






export default Choice;

