/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChoiceUpdate from './ChoiceUpdate';

/**
 * The UpdateAnswerRequest model module.
 * @module model/UpdateAnswerRequest
 * @version 2020-03-31
 */
class UpdateAnswerRequest {
    /**
     * Constructs a new <code>UpdateAnswerRequest</code>.
     * @alias module:model/UpdateAnswerRequest
     */
    constructor() { 
        
        UpdateAnswerRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateAnswerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateAnswerRequest} obj Optional instance to populate.
     * @return {module:model/UpdateAnswerRequest} The populated <code>UpdateAnswerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateAnswerRequest();

            if (data.hasOwnProperty('SelectedChoices')) {
                obj['SelectedChoices'] = ApiClient.convertToType(data['SelectedChoices'], ['String']);
            }
            if (data.hasOwnProperty('ChoiceUpdates')) {
                obj['ChoiceUpdates'] = ApiClient.convertToType(data['ChoiceUpdates'], {'String': ChoiceUpdate});
            }
            if (data.hasOwnProperty('Notes')) {
                obj['Notes'] = ApiClient.convertToType(data['Notes'], 'String');
            }
            if (data.hasOwnProperty('IsApplicable')) {
                obj['IsApplicable'] = ApiClient.convertToType(data['IsApplicable'], 'Boolean');
            }
            if (data.hasOwnProperty('Reason')) {
                obj['Reason'] = ApiClient.convertToType(data['Reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateAnswerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateAnswerRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['SelectedChoices'])) {
            throw new Error("Expected the field `SelectedChoices` to be an array in the JSON data but got " + data['SelectedChoices']);
        }
        // ensure the json data is a string
        if (data['Notes'] && !(typeof data['Notes'] === 'string' || data['Notes'] instanceof String)) {
            throw new Error("Expected the field `Notes` to be a primitive type in the JSON string but got " + data['Notes']);
        }
        // ensure the json data is a string
        if (data['Reason'] && !(typeof data['Reason'] === 'string' || data['Reason'] instanceof String)) {
            throw new Error("Expected the field `Reason` to be a primitive type in the JSON string but got " + data['Reason']);
        }

        return true;
    }


}



/**
 * <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>
 * @member {Array.<String>} SelectedChoices
 */
UpdateAnswerRequest.prototype['SelectedChoices'] = undefined;

/**
 * A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.
 * @member {Object.<String, module:model/ChoiceUpdate>} ChoiceUpdates
 */
UpdateAnswerRequest.prototype['ChoiceUpdates'] = undefined;

/**
 * The notes associated with the workload.
 * @member {String} Notes
 */
UpdateAnswerRequest.prototype['Notes'] = undefined;

/**
 * Defines whether this question is applicable to a lens review.
 * @member {Boolean} IsApplicable
 */
UpdateAnswerRequest.prototype['IsApplicable'] = undefined;

/**
 * The reason why a question is not applicable to your workload.
 * @member {module:model/UpdateAnswerRequest.ReasonEnum} Reason
 */
UpdateAnswerRequest.prototype['Reason'] = undefined;





/**
 * Allowed values for the <code>Reason</code> property.
 * @enum {String}
 * @readonly
 */
UpdateAnswerRequest['ReasonEnum'] = {

    /**
     * value: "OUT_OF_SCOPE"
     * @const
     */
    "OUT_OF_SCOPE": "OUT_OF_SCOPE",

    /**
     * value: "BUSINESS_PRIORITIES"
     * @const
     */
    "BUSINESS_PRIORITIES": "BUSINESS_PRIORITIES",

    /**
     * value: "ARCHITECTURE_CONSTRAINTS"
     * @const
     */
    "ARCHITECTURE_CONSTRAINTS": "ARCHITECTURE_CONSTRAINTS",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};



export default UpdateAnswerRequest;

