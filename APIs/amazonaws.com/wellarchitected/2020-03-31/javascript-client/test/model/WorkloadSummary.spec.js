/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsWellArchitectedTool);
  }
}(this, function(expect, AwsWellArchitectedTool) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsWellArchitectedTool.WorkloadSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkloadSummary', function() {
    it('should create an instance of WorkloadSummary', function() {
      // uncomment below and update the code to test WorkloadSummary
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be.a(AwsWellArchitectedTool.WorkloadSummary);
    });

    it('should have the property workloadId (base name: "WorkloadId")', function() {
      // uncomment below and update the code to test the property workloadId
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property workloadArn (base name: "WorkloadArn")', function() {
      // uncomment below and update the code to test the property workloadArn
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property workloadName (base name: "WorkloadName")', function() {
      // uncomment below and update the code to test the property workloadName
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "Owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "UpdatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property lenses (base name: "Lenses")', function() {
      // uncomment below and update the code to test the property lenses
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property riskCounts (base name: "RiskCounts")', function() {
      // uncomment below and update the code to test the property riskCounts
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property improvementStatus (base name: "ImprovementStatus")', function() {
      // uncomment below and update the code to test the property improvementStatus
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property profiles (base name: "Profiles")', function() {
      // uncomment below and update the code to test the property profiles
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

    it('should have the property prioritizedRiskCounts (base name: "PrioritizedRiskCounts")', function() {
      // uncomment below and update the code to test the property prioritizedRiskCounts
      //var instance = new AwsWellArchitectedTool.WorkloadSummary();
      //expect(instance).to.be();
    });

  });

}));
