/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsWellArchitectedTool);
  }
}(this, function(expect, AwsWellArchitectedTool) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsWellArchitectedTool.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associateLenses', function() {
      it('should call associateLenses successfully', function(done) {
        //uncomment below and update the code to test associateLenses
        //instance.associateLenses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateProfiles', function() {
      it('should call associateProfiles successfully', function(done) {
        //uncomment below and update the code to test associateProfiles
        //instance.associateProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLensShare', function() {
      it('should call createLensShare successfully', function(done) {
        //uncomment below and update the code to test createLensShare
        //instance.createLensShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLensVersion', function() {
      it('should call createLensVersion successfully', function(done) {
        //uncomment below and update the code to test createLensVersion
        //instance.createLensVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMilestone', function() {
      it('should call createMilestone successfully', function(done) {
        //uncomment below and update the code to test createMilestone
        //instance.createMilestone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProfile', function() {
      it('should call createProfile successfully', function(done) {
        //uncomment below and update the code to test createProfile
        //instance.createProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProfileShare', function() {
      it('should call createProfileShare successfully', function(done) {
        //uncomment below and update the code to test createProfileShare
        //instance.createProfileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkload', function() {
      it('should call createWorkload successfully', function(done) {
        //uncomment below and update the code to test createWorkload
        //instance.createWorkload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWorkloadShare', function() {
      it('should call createWorkloadShare successfully', function(done) {
        //uncomment below and update the code to test createWorkloadShare
        //instance.createWorkloadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLens', function() {
      it('should call deleteLens successfully', function(done) {
        //uncomment below and update the code to test deleteLens
        //instance.deleteLens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLensShare', function() {
      it('should call deleteLensShare successfully', function(done) {
        //uncomment below and update the code to test deleteLensShare
        //instance.deleteLensShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfile', function() {
      it('should call deleteProfile successfully', function(done) {
        //uncomment below and update the code to test deleteProfile
        //instance.deleteProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProfileShare', function() {
      it('should call deleteProfileShare successfully', function(done) {
        //uncomment below and update the code to test deleteProfileShare
        //instance.deleteProfileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkload', function() {
      it('should call deleteWorkload successfully', function(done) {
        //uncomment below and update the code to test deleteWorkload
        //instance.deleteWorkload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWorkloadShare', function() {
      it('should call deleteWorkloadShare successfully', function(done) {
        //uncomment below and update the code to test deleteWorkloadShare
        //instance.deleteWorkloadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateLenses', function() {
      it('should call disassociateLenses successfully', function(done) {
        //uncomment below and update the code to test disassociateLenses
        //instance.disassociateLenses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateProfiles', function() {
      it('should call disassociateProfiles successfully', function(done) {
        //uncomment below and update the code to test disassociateProfiles
        //instance.disassociateProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportLens', function() {
      it('should call exportLens successfully', function(done) {
        //uncomment below and update the code to test exportLens
        //instance.exportLens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAnswer', function() {
      it('should call getAnswer successfully', function(done) {
        //uncomment below and update the code to test getAnswer
        //instance.getAnswer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConsolidatedReport', function() {
      it('should call getConsolidatedReport successfully', function(done) {
        //uncomment below and update the code to test getConsolidatedReport
        //instance.getConsolidatedReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLens', function() {
      it('should call getLens successfully', function(done) {
        //uncomment below and update the code to test getLens
        //instance.getLens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLensReview', function() {
      it('should call getLensReview successfully', function(done) {
        //uncomment below and update the code to test getLensReview
        //instance.getLensReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLensReviewReport', function() {
      it('should call getLensReviewReport successfully', function(done) {
        //uncomment below and update the code to test getLensReviewReport
        //instance.getLensReviewReport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLensVersionDifference', function() {
      it('should call getLensVersionDifference successfully', function(done) {
        //uncomment below and update the code to test getLensVersionDifference
        //instance.getLensVersionDifference(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMilestone', function() {
      it('should call getMilestone successfully', function(done) {
        //uncomment below and update the code to test getMilestone
        //instance.getMilestone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProfile', function() {
      it('should call getProfile successfully', function(done) {
        //uncomment below and update the code to test getProfile
        //instance.getProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProfileTemplate', function() {
      it('should call getProfileTemplate successfully', function(done) {
        //uncomment below and update the code to test getProfileTemplate
        //instance.getProfileTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkload', function() {
      it('should call getWorkload successfully', function(done) {
        //uncomment below and update the code to test getWorkload
        //instance.getWorkload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importLens', function() {
      it('should call importLens successfully', function(done) {
        //uncomment below and update the code to test importLens
        //instance.importLens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnswers', function() {
      it('should call listAnswers successfully', function(done) {
        //uncomment below and update the code to test listAnswers
        //instance.listAnswers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCheckDetails', function() {
      it('should call listCheckDetails successfully', function(done) {
        //uncomment below and update the code to test listCheckDetails
        //instance.listCheckDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCheckSummaries', function() {
      it('should call listCheckSummaries successfully', function(done) {
        //uncomment below and update the code to test listCheckSummaries
        //instance.listCheckSummaries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLensReviewImprovements', function() {
      it('should call listLensReviewImprovements successfully', function(done) {
        //uncomment below and update the code to test listLensReviewImprovements
        //instance.listLensReviewImprovements(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLensReviews', function() {
      it('should call listLensReviews successfully', function(done) {
        //uncomment below and update the code to test listLensReviews
        //instance.listLensReviews(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLensShares', function() {
      it('should call listLensShares successfully', function(done) {
        //uncomment below and update the code to test listLensShares
        //instance.listLensShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLenses', function() {
      it('should call listLenses successfully', function(done) {
        //uncomment below and update the code to test listLenses
        //instance.listLenses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMilestones', function() {
      it('should call listMilestones successfully', function(done) {
        //uncomment below and update the code to test listMilestones
        //instance.listMilestones(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNotifications', function() {
      it('should call listNotifications successfully', function(done) {
        //uncomment below and update the code to test listNotifications
        //instance.listNotifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfileNotifications', function() {
      it('should call listProfileNotifications successfully', function(done) {
        //uncomment below and update the code to test listProfileNotifications
        //instance.listProfileNotifications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfileShares', function() {
      it('should call listProfileShares successfully', function(done) {
        //uncomment below and update the code to test listProfileShares
        //instance.listProfileShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProfiles', function() {
      it('should call listProfiles successfully', function(done) {
        //uncomment below and update the code to test listProfiles
        //instance.listProfiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listShareInvitations', function() {
      it('should call listShareInvitations successfully', function(done) {
        //uncomment below and update the code to test listShareInvitations
        //instance.listShareInvitations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkloadShares', function() {
      it('should call listWorkloadShares successfully', function(done) {
        //uncomment below and update the code to test listWorkloadShares
        //instance.listWorkloadShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWorkloads', function() {
      it('should call listWorkloads successfully', function(done) {
        //uncomment below and update the code to test listWorkloads
        //instance.listWorkloads(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAnswer', function() {
      it('should call updateAnswer successfully', function(done) {
        //uncomment below and update the code to test updateAnswer
        //instance.updateAnswer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGlobalSettings', function() {
      it('should call updateGlobalSettings successfully', function(done) {
        //uncomment below and update the code to test updateGlobalSettings
        //instance.updateGlobalSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLensReview', function() {
      it('should call updateLensReview successfully', function(done) {
        //uncomment below and update the code to test updateLensReview
        //instance.updateLensReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProfile', function() {
      it('should call updateProfile successfully', function(done) {
        //uncomment below and update the code to test updateProfile
        //instance.updateProfile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateShareInvitation', function() {
      it('should call updateShareInvitation successfully', function(done) {
        //uncomment below and update the code to test updateShareInvitation
        //instance.updateShareInvitation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkload', function() {
      it('should call updateWorkload successfully', function(done) {
        //uncomment below and update the code to test updateWorkload
        //instance.updateWorkload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWorkloadShare', function() {
      it('should call updateWorkloadShare successfully', function(done) {
        //uncomment below and update the code to test updateWorkloadShare
        //instance.updateWorkloadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgradeLensReview', function() {
      it('should call upgradeLensReview successfully', function(done) {
        //uncomment below and update the code to test upgradeLensReview
        //instance.upgradeLensReview(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgradeProfileVersion', function() {
      it('should call upgradeProfileVersion successfully', function(done) {
        //uncomment below and update the code to test upgradeProfileVersion
        //instance.upgradeProfileVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
