/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChoiceImprovementPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChoiceImprovementPlan::OAIChoiceImprovementPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChoiceImprovementPlan::OAIChoiceImprovementPlan() {
    this->initializeModel();
}

OAIChoiceImprovementPlan::~OAIChoiceImprovementPlan() {}

void OAIChoiceImprovementPlan::initializeModel() {

    m_choice_id_isSet = false;
    m_choice_id_isValid = false;

    m_display_text_isSet = false;
    m_display_text_isValid = false;

    m_improvement_plan_url_isSet = false;
    m_improvement_plan_url_isValid = false;
}

void OAIChoiceImprovementPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChoiceImprovementPlan::fromJsonObject(QJsonObject json) {

    m_choice_id_isValid = ::OpenAPI::fromJsonValue(m_choice_id, json[QString("ChoiceId")]);
    m_choice_id_isSet = !json[QString("ChoiceId")].isNull() && m_choice_id_isValid;

    m_display_text_isValid = ::OpenAPI::fromJsonValue(m_display_text, json[QString("DisplayText")]);
    m_display_text_isSet = !json[QString("DisplayText")].isNull() && m_display_text_isValid;

    m_improvement_plan_url_isValid = ::OpenAPI::fromJsonValue(m_improvement_plan_url, json[QString("ImprovementPlanUrl")]);
    m_improvement_plan_url_isSet = !json[QString("ImprovementPlanUrl")].isNull() && m_improvement_plan_url_isValid;
}

QString OAIChoiceImprovementPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChoiceImprovementPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_choice_id_isSet) {
        obj.insert(QString("ChoiceId"), ::OpenAPI::toJsonValue(m_choice_id));
    }
    if (m_display_text_isSet) {
        obj.insert(QString("DisplayText"), ::OpenAPI::toJsonValue(m_display_text));
    }
    if (m_improvement_plan_url_isSet) {
        obj.insert(QString("ImprovementPlanUrl"), ::OpenAPI::toJsonValue(m_improvement_plan_url));
    }
    return obj;
}

QString OAIChoiceImprovementPlan::getChoiceId() const {
    return m_choice_id;
}
void OAIChoiceImprovementPlan::setChoiceId(const QString &choice_id) {
    m_choice_id = choice_id;
    m_choice_id_isSet = true;
}

bool OAIChoiceImprovementPlan::is_choice_id_Set() const{
    return m_choice_id_isSet;
}

bool OAIChoiceImprovementPlan::is_choice_id_Valid() const{
    return m_choice_id_isValid;
}

QString OAIChoiceImprovementPlan::getDisplayText() const {
    return m_display_text;
}
void OAIChoiceImprovementPlan::setDisplayText(const QString &display_text) {
    m_display_text = display_text;
    m_display_text_isSet = true;
}

bool OAIChoiceImprovementPlan::is_display_text_Set() const{
    return m_display_text_isSet;
}

bool OAIChoiceImprovementPlan::is_display_text_Valid() const{
    return m_display_text_isValid;
}

QString OAIChoiceImprovementPlan::getImprovementPlanUrl() const {
    return m_improvement_plan_url;
}
void OAIChoiceImprovementPlan::setImprovementPlanUrl(const QString &improvement_plan_url) {
    m_improvement_plan_url = improvement_plan_url;
    m_improvement_plan_url_isSet = true;
}

bool OAIChoiceImprovementPlan::is_improvement_plan_url_Set() const{
    return m_improvement_plan_url_isSet;
}

bool OAIChoiceImprovementPlan::is_improvement_plan_url_Valid() const{
    return m_improvement_plan_url_isValid;
}

bool OAIChoiceImprovementPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_plan_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChoiceImprovementPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
