/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImprovementSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImprovementSummary::OAIImprovementSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImprovementSummary::OAIImprovementSummary() {
    this->initializeModel();
}

OAIImprovementSummary::~OAIImprovementSummary() {}

void OAIImprovementSummary::initializeModel() {

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_pillar_id_isSet = false;
    m_pillar_id_isValid = false;

    m_question_title_isSet = false;
    m_question_title_isValid = false;

    m_risk_isSet = false;
    m_risk_isValid = false;

    m_improvement_plan_url_isSet = false;
    m_improvement_plan_url_isValid = false;

    m_improvement_plans_isSet = false;
    m_improvement_plans_isValid = false;
}

void OAIImprovementSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImprovementSummary::fromJsonObject(QJsonObject json) {

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_pillar_id_isValid = ::OpenAPI::fromJsonValue(m_pillar_id, json[QString("PillarId")]);
    m_pillar_id_isSet = !json[QString("PillarId")].isNull() && m_pillar_id_isValid;

    m_question_title_isValid = ::OpenAPI::fromJsonValue(m_question_title, json[QString("QuestionTitle")]);
    m_question_title_isSet = !json[QString("QuestionTitle")].isNull() && m_question_title_isValid;

    m_risk_isValid = ::OpenAPI::fromJsonValue(m_risk, json[QString("Risk")]);
    m_risk_isSet = !json[QString("Risk")].isNull() && m_risk_isValid;

    m_improvement_plan_url_isValid = ::OpenAPI::fromJsonValue(m_improvement_plan_url, json[QString("ImprovementPlanUrl")]);
    m_improvement_plan_url_isSet = !json[QString("ImprovementPlanUrl")].isNull() && m_improvement_plan_url_isValid;

    m_improvement_plans_isValid = ::OpenAPI::fromJsonValue(m_improvement_plans, json[QString("ImprovementPlans")]);
    m_improvement_plans_isSet = !json[QString("ImprovementPlans")].isNull() && m_improvement_plans_isValid;
}

QString OAIImprovementSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImprovementSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_pillar_id_isSet) {
        obj.insert(QString("PillarId"), ::OpenAPI::toJsonValue(m_pillar_id));
    }
    if (m_question_title_isSet) {
        obj.insert(QString("QuestionTitle"), ::OpenAPI::toJsonValue(m_question_title));
    }
    if (m_risk.isSet()) {
        obj.insert(QString("Risk"), ::OpenAPI::toJsonValue(m_risk));
    }
    if (m_improvement_plan_url_isSet) {
        obj.insert(QString("ImprovementPlanUrl"), ::OpenAPI::toJsonValue(m_improvement_plan_url));
    }
    if (m_improvement_plans.isSet()) {
        obj.insert(QString("ImprovementPlans"), ::OpenAPI::toJsonValue(m_improvement_plans));
    }
    return obj;
}

QString OAIImprovementSummary::getQuestionId() const {
    return m_question_id;
}
void OAIImprovementSummary::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIImprovementSummary::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIImprovementSummary::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIImprovementSummary::getPillarId() const {
    return m_pillar_id;
}
void OAIImprovementSummary::setPillarId(const QString &pillar_id) {
    m_pillar_id = pillar_id;
    m_pillar_id_isSet = true;
}

bool OAIImprovementSummary::is_pillar_id_Set() const{
    return m_pillar_id_isSet;
}

bool OAIImprovementSummary::is_pillar_id_Valid() const{
    return m_pillar_id_isValid;
}

QString OAIImprovementSummary::getQuestionTitle() const {
    return m_question_title;
}
void OAIImprovementSummary::setQuestionTitle(const QString &question_title) {
    m_question_title = question_title;
    m_question_title_isSet = true;
}

bool OAIImprovementSummary::is_question_title_Set() const{
    return m_question_title_isSet;
}

bool OAIImprovementSummary::is_question_title_Valid() const{
    return m_question_title_isValid;
}

OAIRisk OAIImprovementSummary::getRisk() const {
    return m_risk;
}
void OAIImprovementSummary::setRisk(const OAIRisk &risk) {
    m_risk = risk;
    m_risk_isSet = true;
}

bool OAIImprovementSummary::is_risk_Set() const{
    return m_risk_isSet;
}

bool OAIImprovementSummary::is_risk_Valid() const{
    return m_risk_isValid;
}

QString OAIImprovementSummary::getImprovementPlanUrl() const {
    return m_improvement_plan_url;
}
void OAIImprovementSummary::setImprovementPlanUrl(const QString &improvement_plan_url) {
    m_improvement_plan_url = improvement_plan_url;
    m_improvement_plan_url_isSet = true;
}

bool OAIImprovementSummary::is_improvement_plan_url_Set() const{
    return m_improvement_plan_url_isSet;
}

bool OAIImprovementSummary::is_improvement_plan_url_Valid() const{
    return m_improvement_plan_url_isValid;
}

QList OAIImprovementSummary::getImprovementPlans() const {
    return m_improvement_plans;
}
void OAIImprovementSummary::setImprovementPlans(const QList &improvement_plans) {
    m_improvement_plans = improvement_plans;
    m_improvement_plans_isSet = true;
}

bool OAIImprovementSummary::is_improvement_plans_Set() const{
    return m_improvement_plans_isSet;
}

bool OAIImprovementSummary::is_improvement_plans_Valid() const{
    return m_improvement_plans_isValid;
}

bool OAIImprovementSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_plan_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_plans.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImprovementSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
