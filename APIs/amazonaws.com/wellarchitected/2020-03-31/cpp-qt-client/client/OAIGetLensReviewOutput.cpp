/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLensReviewOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLensReviewOutput::OAIGetLensReviewOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLensReviewOutput::OAIGetLensReviewOutput() {
    this->initializeModel();
}

OAIGetLensReviewOutput::~OAIGetLensReviewOutput() {}

void OAIGetLensReviewOutput::initializeModel() {

    m_workload_id_isSet = false;
    m_workload_id_isValid = false;

    m_milestone_number_isSet = false;
    m_milestone_number_isValid = false;

    m_lens_review_isSet = false;
    m_lens_review_isValid = false;
}

void OAIGetLensReviewOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLensReviewOutput::fromJsonObject(QJsonObject json) {

    m_workload_id_isValid = ::OpenAPI::fromJsonValue(m_workload_id, json[QString("WorkloadId")]);
    m_workload_id_isSet = !json[QString("WorkloadId")].isNull() && m_workload_id_isValid;

    m_milestone_number_isValid = ::OpenAPI::fromJsonValue(m_milestone_number, json[QString("MilestoneNumber")]);
    m_milestone_number_isSet = !json[QString("MilestoneNumber")].isNull() && m_milestone_number_isValid;

    m_lens_review_isValid = ::OpenAPI::fromJsonValue(m_lens_review, json[QString("LensReview")]);
    m_lens_review_isSet = !json[QString("LensReview")].isNull() && m_lens_review_isValid;
}

QString OAIGetLensReviewOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLensReviewOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_workload_id_isSet) {
        obj.insert(QString("WorkloadId"), ::OpenAPI::toJsonValue(m_workload_id));
    }
    if (m_milestone_number_isSet) {
        obj.insert(QString("MilestoneNumber"), ::OpenAPI::toJsonValue(m_milestone_number));
    }
    if (m_lens_review.isSet()) {
        obj.insert(QString("LensReview"), ::OpenAPI::toJsonValue(m_lens_review));
    }
    return obj;
}

QString OAIGetLensReviewOutput::getWorkloadId() const {
    return m_workload_id;
}
void OAIGetLensReviewOutput::setWorkloadId(const QString &workload_id) {
    m_workload_id = workload_id;
    m_workload_id_isSet = true;
}

bool OAIGetLensReviewOutput::is_workload_id_Set() const{
    return m_workload_id_isSet;
}

bool OAIGetLensReviewOutput::is_workload_id_Valid() const{
    return m_workload_id_isValid;
}

qint32 OAIGetLensReviewOutput::getMilestoneNumber() const {
    return m_milestone_number;
}
void OAIGetLensReviewOutput::setMilestoneNumber(const qint32 &milestone_number) {
    m_milestone_number = milestone_number;
    m_milestone_number_isSet = true;
}

bool OAIGetLensReviewOutput::is_milestone_number_Set() const{
    return m_milestone_number_isSet;
}

bool OAIGetLensReviewOutput::is_milestone_number_Valid() const{
    return m_milestone_number_isValid;
}

OAILensReview OAIGetLensReviewOutput::getLensReview() const {
    return m_lens_review;
}
void OAIGetLensReviewOutput::setLensReview(const OAILensReview &lens_review) {
    m_lens_review = lens_review;
    m_lens_review_isSet = true;
}

bool OAIGetLensReviewOutput::is_lens_review_Set() const{
    return m_lens_review_isSet;
}

bool OAIGetLensReviewOutput::is_lens_review_Valid() const{
    return m_lens_review_isValid;
}

bool OAIGetLensReviewOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_review.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLensReviewOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
