/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestionDifference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestionDifference::OAIQuestionDifference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestionDifference::OAIQuestionDifference() {
    this->initializeModel();
}

OAIQuestionDifference::~OAIQuestionDifference() {}

void OAIQuestionDifference::initializeModel() {

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_question_title_isSet = false;
    m_question_title_isValid = false;

    m_difference_status_isSet = false;
    m_difference_status_isValid = false;
}

void OAIQuestionDifference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestionDifference::fromJsonObject(QJsonObject json) {

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_question_title_isValid = ::OpenAPI::fromJsonValue(m_question_title, json[QString("QuestionTitle")]);
    m_question_title_isSet = !json[QString("QuestionTitle")].isNull() && m_question_title_isValid;

    m_difference_status_isValid = ::OpenAPI::fromJsonValue(m_difference_status, json[QString("DifferenceStatus")]);
    m_difference_status_isSet = !json[QString("DifferenceStatus")].isNull() && m_difference_status_isValid;
}

QString OAIQuestionDifference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestionDifference::asJsonObject() const {
    QJsonObject obj;
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_question_title_isSet) {
        obj.insert(QString("QuestionTitle"), ::OpenAPI::toJsonValue(m_question_title));
    }
    if (m_difference_status.isSet()) {
        obj.insert(QString("DifferenceStatus"), ::OpenAPI::toJsonValue(m_difference_status));
    }
    return obj;
}

QString OAIQuestionDifference::getQuestionId() const {
    return m_question_id;
}
void OAIQuestionDifference::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIQuestionDifference::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIQuestionDifference::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIQuestionDifference::getQuestionTitle() const {
    return m_question_title;
}
void OAIQuestionDifference::setQuestionTitle(const QString &question_title) {
    m_question_title = question_title;
    m_question_title_isSet = true;
}

bool OAIQuestionDifference::is_question_title_Set() const{
    return m_question_title_isSet;
}

bool OAIQuestionDifference::is_question_title_Valid() const{
    return m_question_title_isValid;
}

OAIDifferenceStatus OAIQuestionDifference::getDifferenceStatus() const {
    return m_difference_status;
}
void OAIQuestionDifference::setDifferenceStatus(const OAIDifferenceStatus &difference_status) {
    m_difference_status = difference_status;
    m_difference_status_isSet = true;
}

bool OAIQuestionDifference::is_difference_status_Set() const{
    return m_difference_status_isSet;
}

bool OAIQuestionDifference::is_difference_status_Valid() const{
    return m_difference_status_isValid;
}

bool OAIQuestionDifference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difference_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestionDifference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
