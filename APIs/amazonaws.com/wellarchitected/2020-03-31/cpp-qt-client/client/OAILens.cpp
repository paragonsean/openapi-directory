/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILens.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILens::OAILens(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILens::OAILens() {
    this->initializeModel();
}

OAILens::~OAILens() {}

void OAILens::initializeModel() {

    m_lens_arn_isSet = false;
    m_lens_arn_isValid = false;

    m_lens_version_isSet = false;
    m_lens_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_share_invitation_id_isSet = false;
    m_share_invitation_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAILens::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILens::fromJsonObject(QJsonObject json) {

    m_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_lens_arn, json[QString("LensArn")]);
    m_lens_arn_isSet = !json[QString("LensArn")].isNull() && m_lens_arn_isValid;

    m_lens_version_isValid = ::OpenAPI::fromJsonValue(m_lens_version, json[QString("LensVersion")]);
    m_lens_version_isSet = !json[QString("LensVersion")].isNull() && m_lens_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_share_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_share_invitation_id, json[QString("ShareInvitationId")]);
    m_share_invitation_id_isSet = !json[QString("ShareInvitationId")].isNull() && m_share_invitation_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAILens::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILens::asJsonObject() const {
    QJsonObject obj;
    if (m_lens_arn_isSet) {
        obj.insert(QString("LensArn"), ::OpenAPI::toJsonValue(m_lens_arn));
    }
    if (m_lens_version_isSet) {
        obj.insert(QString("LensVersion"), ::OpenAPI::toJsonValue(m_lens_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_share_invitation_id_isSet) {
        obj.insert(QString("ShareInvitationId"), ::OpenAPI::toJsonValue(m_share_invitation_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAILens::getLensArn() const {
    return m_lens_arn;
}
void OAILens::setLensArn(const QString &lens_arn) {
    m_lens_arn = lens_arn;
    m_lens_arn_isSet = true;
}

bool OAILens::is_lens_arn_Set() const{
    return m_lens_arn_isSet;
}

bool OAILens::is_lens_arn_Valid() const{
    return m_lens_arn_isValid;
}

QString OAILens::getLensVersion() const {
    return m_lens_version;
}
void OAILens::setLensVersion(const QString &lens_version) {
    m_lens_version = lens_version;
    m_lens_version_isSet = true;
}

bool OAILens::is_lens_version_Set() const{
    return m_lens_version_isSet;
}

bool OAILens::is_lens_version_Valid() const{
    return m_lens_version_isValid;
}

QString OAILens::getName() const {
    return m_name;
}
void OAILens::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILens::is_name_Set() const{
    return m_name_isSet;
}

bool OAILens::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILens::getDescription() const {
    return m_description;
}
void OAILens::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILens::is_description_Set() const{
    return m_description_isSet;
}

bool OAILens::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILens::getOwner() const {
    return m_owner;
}
void OAILens::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAILens::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAILens::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAILens::getShareInvitationId() const {
    return m_share_invitation_id;
}
void OAILens::setShareInvitationId(const QString &share_invitation_id) {
    m_share_invitation_id = share_invitation_id;
    m_share_invitation_id_isSet = true;
}

bool OAILens::is_share_invitation_id_Set() const{
    return m_share_invitation_id_isSet;
}

bool OAILens::is_share_invitation_id_Valid() const{
    return m_share_invitation_id_isValid;
}

QMap OAILens::getTags() const {
    return m_tags;
}
void OAILens::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAILens::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAILens::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAILens::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILens::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
