/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLensShareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLensShareInput::OAICreateLensShareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLensShareInput::OAICreateLensShareInput() {
    this->initializeModel();
}

OAICreateLensShareInput::~OAICreateLensShareInput() {}

void OAICreateLensShareInput::initializeModel() {

    m_shared_with_isSet = false;
    m_shared_with_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;
}

void OAICreateLensShareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLensShareInput::fromJsonObject(QJsonObject json) {

    m_shared_with_isValid = ::OpenAPI::fromJsonValue(m_shared_with, json[QString("SharedWith")]);
    m_shared_with_isSet = !json[QString("SharedWith")].isNull() && m_shared_with_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;
}

QString OAICreateLensShareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLensShareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_shared_with_isSet) {
        obj.insert(QString("SharedWith"), ::OpenAPI::toJsonValue(m_shared_with));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    return obj;
}

QString OAICreateLensShareInput::getSharedWith() const {
    return m_shared_with;
}
void OAICreateLensShareInput::setSharedWith(const QString &shared_with) {
    m_shared_with = shared_with;
    m_shared_with_isSet = true;
}

bool OAICreateLensShareInput::is_shared_with_Set() const{
    return m_shared_with_isSet;
}

bool OAICreateLensShareInput::is_shared_with_Valid() const{
    return m_shared_with_isValid;
}

QString OAICreateLensShareInput::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateLensShareInput::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateLensShareInput::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateLensShareInput::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

bool OAICreateLensShareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shared_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLensShareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_shared_with_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
