/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListLensReviewImprovementsOutput.h
 *
 * Output of a list lens review improvements call.
 */

#ifndef OAIListLensReviewImprovementsOutput_H
#define OAIListLensReviewImprovementsOutput_H

#include <QJsonObject>

#include "OAIImprovementSummary.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImprovementSummary;

class OAIListLensReviewImprovementsOutput : public OAIObject {
public:
    OAIListLensReviewImprovementsOutput();
    OAIListLensReviewImprovementsOutput(QString json);
    ~OAIListLensReviewImprovementsOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWorkloadId() const;
    void setWorkloadId(const QString &workload_id);
    bool is_workload_id_Set() const;
    bool is_workload_id_Valid() const;

    qint32 getMilestoneNumber() const;
    void setMilestoneNumber(const qint32 &milestone_number);
    bool is_milestone_number_Set() const;
    bool is_milestone_number_Valid() const;

    QString getLensAlias() const;
    void setLensAlias(const QString &lens_alias);
    bool is_lens_alias_Set() const;
    bool is_lens_alias_Valid() const;

    QString getLensArn() const;
    void setLensArn(const QString &lens_arn);
    bool is_lens_arn_Set() const;
    bool is_lens_arn_Valid() const;

    QList<OAIImprovementSummary> getImprovementSummaries() const;
    void setImprovementSummaries(const QList<OAIImprovementSummary> &improvement_summaries);
    bool is_improvement_summaries_Set() const;
    bool is_improvement_summaries_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_workload_id;
    bool m_workload_id_isSet;
    bool m_workload_id_isValid;

    qint32 m_milestone_number;
    bool m_milestone_number_isSet;
    bool m_milestone_number_isValid;

    QString m_lens_alias;
    bool m_lens_alias_isSet;
    bool m_lens_alias_isValid;

    QString m_lens_arn;
    bool m_lens_arn_isSet;
    bool m_lens_arn_isValid;

    QList<OAIImprovementSummary> m_improvement_summaries;
    bool m_improvement_summaries_isSet;
    bool m_improvement_summaries_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListLensReviewImprovementsOutput)

#endif // OAIListLensReviewImprovementsOutput_H
