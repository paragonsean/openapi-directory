/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkloadSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkloadSummary::OAIWorkloadSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkloadSummary::OAIWorkloadSummary() {
    this->initializeModel();
}

OAIWorkloadSummary::~OAIWorkloadSummary() {}

void OAIWorkloadSummary::initializeModel() {

    m_workload_id_isSet = false;
    m_workload_id_isValid = false;

    m_workload_arn_isSet = false;
    m_workload_arn_isValid = false;

    m_workload_name_isSet = false;
    m_workload_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_lenses_isSet = false;
    m_lenses_isValid = false;

    m_risk_counts_isSet = false;
    m_risk_counts_isValid = false;

    m_improvement_status_isSet = false;
    m_improvement_status_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_prioritized_risk_counts_isSet = false;
    m_prioritized_risk_counts_isValid = false;
}

void OAIWorkloadSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkloadSummary::fromJsonObject(QJsonObject json) {

    m_workload_id_isValid = ::OpenAPI::fromJsonValue(m_workload_id, json[QString("WorkloadId")]);
    m_workload_id_isSet = !json[QString("WorkloadId")].isNull() && m_workload_id_isValid;

    m_workload_arn_isValid = ::OpenAPI::fromJsonValue(m_workload_arn, json[QString("WorkloadArn")]);
    m_workload_arn_isSet = !json[QString("WorkloadArn")].isNull() && m_workload_arn_isValid;

    m_workload_name_isValid = ::OpenAPI::fromJsonValue(m_workload_name, json[QString("WorkloadName")]);
    m_workload_name_isSet = !json[QString("WorkloadName")].isNull() && m_workload_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_lenses_isValid = ::OpenAPI::fromJsonValue(m_lenses, json[QString("Lenses")]);
    m_lenses_isSet = !json[QString("Lenses")].isNull() && m_lenses_isValid;

    m_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_risk_counts, json[QString("RiskCounts")]);
    m_risk_counts_isSet = !json[QString("RiskCounts")].isNull() && m_risk_counts_isValid;

    m_improvement_status_isValid = ::OpenAPI::fromJsonValue(m_improvement_status, json[QString("ImprovementStatus")]);
    m_improvement_status_isSet = !json[QString("ImprovementStatus")].isNull() && m_improvement_status_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("Profiles")]);
    m_profiles_isSet = !json[QString("Profiles")].isNull() && m_profiles_isValid;

    m_prioritized_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_prioritized_risk_counts, json[QString("PrioritizedRiskCounts")]);
    m_prioritized_risk_counts_isSet = !json[QString("PrioritizedRiskCounts")].isNull() && m_prioritized_risk_counts_isValid;
}

QString OAIWorkloadSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkloadSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_workload_id_isSet) {
        obj.insert(QString("WorkloadId"), ::OpenAPI::toJsonValue(m_workload_id));
    }
    if (m_workload_arn_isSet) {
        obj.insert(QString("WorkloadArn"), ::OpenAPI::toJsonValue(m_workload_arn));
    }
    if (m_workload_name_isSet) {
        obj.insert(QString("WorkloadName"), ::OpenAPI::toJsonValue(m_workload_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_lenses.size() > 0) {
        obj.insert(QString("Lenses"), ::OpenAPI::toJsonValue(m_lenses));
    }
    if (m_risk_counts.size() > 0) {
        obj.insert(QString("RiskCounts"), ::OpenAPI::toJsonValue(m_risk_counts));
    }
    if (m_improvement_status.isSet()) {
        obj.insert(QString("ImprovementStatus"), ::OpenAPI::toJsonValue(m_improvement_status));
    }
    if (m_profiles.isSet()) {
        obj.insert(QString("Profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_prioritized_risk_counts.size() > 0) {
        obj.insert(QString("PrioritizedRiskCounts"), ::OpenAPI::toJsonValue(m_prioritized_risk_counts));
    }
    return obj;
}

QString OAIWorkloadSummary::getWorkloadId() const {
    return m_workload_id;
}
void OAIWorkloadSummary::setWorkloadId(const QString &workload_id) {
    m_workload_id = workload_id;
    m_workload_id_isSet = true;
}

bool OAIWorkloadSummary::is_workload_id_Set() const{
    return m_workload_id_isSet;
}

bool OAIWorkloadSummary::is_workload_id_Valid() const{
    return m_workload_id_isValid;
}

QString OAIWorkloadSummary::getWorkloadArn() const {
    return m_workload_arn;
}
void OAIWorkloadSummary::setWorkloadArn(const QString &workload_arn) {
    m_workload_arn = workload_arn;
    m_workload_arn_isSet = true;
}

bool OAIWorkloadSummary::is_workload_arn_Set() const{
    return m_workload_arn_isSet;
}

bool OAIWorkloadSummary::is_workload_arn_Valid() const{
    return m_workload_arn_isValid;
}

QString OAIWorkloadSummary::getWorkloadName() const {
    return m_workload_name;
}
void OAIWorkloadSummary::setWorkloadName(const QString &workload_name) {
    m_workload_name = workload_name;
    m_workload_name_isSet = true;
}

bool OAIWorkloadSummary::is_workload_name_Set() const{
    return m_workload_name_isSet;
}

bool OAIWorkloadSummary::is_workload_name_Valid() const{
    return m_workload_name_isValid;
}

QString OAIWorkloadSummary::getOwner() const {
    return m_owner;
}
void OAIWorkloadSummary::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIWorkloadSummary::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIWorkloadSummary::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAIWorkloadSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWorkloadSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWorkloadSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWorkloadSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> OAIWorkloadSummary::getLenses() const {
    return m_lenses;
}
void OAIWorkloadSummary::setLenses(const QList<QString> &lenses) {
    m_lenses = lenses;
    m_lenses_isSet = true;
}

bool OAIWorkloadSummary::is_lenses_Set() const{
    return m_lenses_isSet;
}

bool OAIWorkloadSummary::is_lenses_Valid() const{
    return m_lenses_isValid;
}

QMap<QString, qint32> OAIWorkloadSummary::getRiskCounts() const {
    return m_risk_counts;
}
void OAIWorkloadSummary::setRiskCounts(const QMap<QString, qint32> &risk_counts) {
    m_risk_counts = risk_counts;
    m_risk_counts_isSet = true;
}

bool OAIWorkloadSummary::is_risk_counts_Set() const{
    return m_risk_counts_isSet;
}

bool OAIWorkloadSummary::is_risk_counts_Valid() const{
    return m_risk_counts_isValid;
}

OAIWorkloadImprovementStatus OAIWorkloadSummary::getImprovementStatus() const {
    return m_improvement_status;
}
void OAIWorkloadSummary::setImprovementStatus(const OAIWorkloadImprovementStatus &improvement_status) {
    m_improvement_status = improvement_status;
    m_improvement_status_isSet = true;
}

bool OAIWorkloadSummary::is_improvement_status_Set() const{
    return m_improvement_status_isSet;
}

bool OAIWorkloadSummary::is_improvement_status_Valid() const{
    return m_improvement_status_isValid;
}

QList OAIWorkloadSummary::getProfiles() const {
    return m_profiles;
}
void OAIWorkloadSummary::setProfiles(const QList &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIWorkloadSummary::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIWorkloadSummary::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QMap<QString, qint32> OAIWorkloadSummary::getPrioritizedRiskCounts() const {
    return m_prioritized_risk_counts;
}
void OAIWorkloadSummary::setPrioritizedRiskCounts(const QMap<QString, qint32> &prioritized_risk_counts) {
    m_prioritized_risk_counts = prioritized_risk_counts;
    m_prioritized_risk_counts_isSet = true;
}

bool OAIWorkloadSummary::is_prioritized_risk_counts_Set() const{
    return m_prioritized_risk_counts_isSet;
}

bool OAIWorkloadSummary::is_prioritized_risk_counts_Valid() const{
    return m_prioritized_risk_counts_isValid;
}

bool OAIWorkloadSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prioritized_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkloadSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
