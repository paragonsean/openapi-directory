/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProfileQuestion.h
 *
 * A profile question.
 */

#ifndef OAIProfileQuestion_H
#define OAIProfileQuestion_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProfileQuestion : public OAIObject {
public:
    OAIProfileQuestion();
    OAIProfileQuestion(QString json);
    ~OAIProfileQuestion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getQuestionId() const;
    void setQuestionId(const QString &question_id);
    bool is_question_id_Set() const;
    bool is_question_id_Valid() const;

    QString getQuestionTitle() const;
    void setQuestionTitle(const QString &question_title);
    bool is_question_title_Set() const;
    bool is_question_title_Valid() const;

    QString getQuestionDescription() const;
    void setQuestionDescription(const QString &question_description);
    bool is_question_description_Set() const;
    bool is_question_description_Valid() const;

    QList getQuestionChoices() const;
    void setQuestionChoices(const QList &question_choices);
    bool is_question_choices_Set() const;
    bool is_question_choices_Valid() const;

    QList getSelectedChoiceIds() const;
    void setSelectedChoiceIds(const QList &selected_choice_ids);
    bool is_selected_choice_ids_Set() const;
    bool is_selected_choice_ids_Valid() const;

    qint32 getMinSelectedChoices() const;
    void setMinSelectedChoices(const qint32 &min_selected_choices);
    bool is_min_selected_choices_Set() const;
    bool is_min_selected_choices_Valid() const;

    qint32 getMaxSelectedChoices() const;
    void setMaxSelectedChoices(const qint32 &max_selected_choices);
    bool is_max_selected_choices_Set() const;
    bool is_max_selected_choices_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_question_id;
    bool m_question_id_isSet;
    bool m_question_id_isValid;

    QString m_question_title;
    bool m_question_title_isSet;
    bool m_question_title_isValid;

    QString m_question_description;
    bool m_question_description_isSet;
    bool m_question_description_isValid;

    QList m_question_choices;
    bool m_question_choices_isSet;
    bool m_question_choices_isValid;

    QList m_selected_choice_ids;
    bool m_selected_choice_ids_isSet;
    bool m_selected_choice_ids_isValid;

    qint32 m_min_selected_choices;
    bool m_min_selected_choices_isSet;
    bool m_min_selected_choices_isValid;

    qint32 m_max_selected_choices;
    bool m_max_selected_choices_isSet;
    bool m_max_selected_choices_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProfileQuestion)

#endif // OAIProfileQuestion_H
