/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChoiceUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChoiceUpdate::OAIChoiceUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChoiceUpdate::OAIChoiceUpdate() {
    this->initializeModel();
}

OAIChoiceUpdate::~OAIChoiceUpdate() {}

void OAIChoiceUpdate::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;
}

void OAIChoiceUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChoiceUpdate::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;
}

QString OAIChoiceUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChoiceUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    return obj;
}

OAIChoiceStatus OAIChoiceUpdate::getStatus() const {
    return m_status;
}
void OAIChoiceUpdate::setStatus(const OAIChoiceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIChoiceUpdate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIChoiceUpdate::is_status_Valid() const{
    return m_status_isValid;
}

OAIChoiceReason OAIChoiceUpdate::getReason() const {
    return m_reason;
}
void OAIChoiceUpdate::setReason(const OAIChoiceReason &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIChoiceUpdate::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIChoiceUpdate::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIChoiceUpdate::getNotes() const {
    return m_notes;
}
void OAIChoiceUpdate::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIChoiceUpdate::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIChoiceUpdate::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIChoiceUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChoiceUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
