/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnswer.h
 *
 * An answer of the question.
 */

#ifndef OAIAnswer_H
#define OAIAnswer_H

#include <QJsonObject>

#include "OAIAnswerReason.h"
#include "OAIChoice.h"
#include "OAIRisk.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChoice;

class OAIAnswer : public OAIObject {
public:
    OAIAnswer();
    OAIAnswer(QString json);
    ~OAIAnswer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getQuestionId() const;
    void setQuestionId(const QString &question_id);
    bool is_question_id_Set() const;
    bool is_question_id_Valid() const;

    QString getPillarId() const;
    void setPillarId(const QString &pillar_id);
    bool is_pillar_id_Set() const;
    bool is_pillar_id_Valid() const;

    QString getQuestionTitle() const;
    void setQuestionTitle(const QString &question_title);
    bool is_question_title_Set() const;
    bool is_question_title_Valid() const;

    QString getQuestionDescription() const;
    void setQuestionDescription(const QString &question_description);
    bool is_question_description_Set() const;
    bool is_question_description_Valid() const;

    QString getImprovementPlanUrl() const;
    void setImprovementPlanUrl(const QString &improvement_plan_url);
    bool is_improvement_plan_url_Set() const;
    bool is_improvement_plan_url_Valid() const;

    QString getHelpfulResourceUrl() const;
    void setHelpfulResourceUrl(const QString &helpful_resource_url);
    bool is_helpful_resource_url_Set() const;
    bool is_helpful_resource_url_Valid() const;

    QString getHelpfulResourceDisplayText() const;
    void setHelpfulResourceDisplayText(const QString &helpful_resource_display_text);
    bool is_helpful_resource_display_text_Set() const;
    bool is_helpful_resource_display_text_Valid() const;

    QList<OAIChoice> getChoices() const;
    void setChoices(const QList<OAIChoice> &choices);
    bool is_choices_Set() const;
    bool is_choices_Valid() const;

    QList<QString> getSelectedChoices() const;
    void setSelectedChoices(const QList<QString> &selected_choices);
    bool is_selected_choices_Set() const;
    bool is_selected_choices_Valid() const;

    QList getChoiceAnswers() const;
    void setChoiceAnswers(const QList &choice_answers);
    bool is_choice_answers_Set() const;
    bool is_choice_answers_Valid() const;

    bool isIsApplicable() const;
    void setIsApplicable(const bool &is_applicable);
    bool is_is_applicable_Set() const;
    bool is_is_applicable_Valid() const;

    OAIRisk getRisk() const;
    void setRisk(const OAIRisk &risk);
    bool is_risk_Set() const;
    bool is_risk_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    OAIAnswerReason getReason() const;
    void setReason(const OAIAnswerReason &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_question_id;
    bool m_question_id_isSet;
    bool m_question_id_isValid;

    QString m_pillar_id;
    bool m_pillar_id_isSet;
    bool m_pillar_id_isValid;

    QString m_question_title;
    bool m_question_title_isSet;
    bool m_question_title_isValid;

    QString m_question_description;
    bool m_question_description_isSet;
    bool m_question_description_isValid;

    QString m_improvement_plan_url;
    bool m_improvement_plan_url_isSet;
    bool m_improvement_plan_url_isValid;

    QString m_helpful_resource_url;
    bool m_helpful_resource_url_isSet;
    bool m_helpful_resource_url_isValid;

    QString m_helpful_resource_display_text;
    bool m_helpful_resource_display_text_isSet;
    bool m_helpful_resource_display_text_isValid;

    QList<OAIChoice> m_choices;
    bool m_choices_isSet;
    bool m_choices_isValid;

    QList<QString> m_selected_choices;
    bool m_selected_choices_isSet;
    bool m_selected_choices_isValid;

    QList m_choice_answers;
    bool m_choice_answers_isSet;
    bool m_choice_answers_isValid;

    bool m_is_applicable;
    bool m_is_applicable_isSet;
    bool m_is_applicable_isValid;

    OAIRisk m_risk;
    bool m_risk_isSet;
    bool m_risk_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    OAIAnswerReason m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnswer)

#endif // OAIAnswer_H
