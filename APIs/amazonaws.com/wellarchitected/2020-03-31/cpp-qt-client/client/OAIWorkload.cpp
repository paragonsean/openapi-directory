/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkload::OAIWorkload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkload::OAIWorkload() {
    this->initializeModel();
}

OAIWorkload::~OAIWorkload() {}

void OAIWorkload::initializeModel() {

    m_workload_id_isSet = false;
    m_workload_id_isValid = false;

    m_workload_arn_isSet = false;
    m_workload_arn_isValid = false;

    m_workload_name_isSet = false;
    m_workload_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_account_ids_isSet = false;
    m_account_ids_isValid = false;

    m_aws_regions_isSet = false;
    m_aws_regions_isValid = false;

    m_non_aws_regions_isSet = false;
    m_non_aws_regions_isValid = false;

    m_architectural_design_isSet = false;
    m_architectural_design_isValid = false;

    m_review_owner_isSet = false;
    m_review_owner_isValid = false;

    m_review_restriction_date_isSet = false;
    m_review_restriction_date_isValid = false;

    m_is_review_owner_update_acknowledged_isSet = false;
    m_is_review_owner_update_acknowledged_isValid = false;

    m_industry_type_isSet = false;
    m_industry_type_isValid = false;

    m_industry_isSet = false;
    m_industry_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_improvement_status_isSet = false;
    m_improvement_status_isValid = false;

    m_risk_counts_isSet = false;
    m_risk_counts_isValid = false;

    m_pillar_priorities_isSet = false;
    m_pillar_priorities_isValid = false;

    m_lenses_isSet = false;
    m_lenses_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_share_invitation_id_isSet = false;
    m_share_invitation_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_discovery_config_isSet = false;
    m_discovery_config_isValid = false;

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_prioritized_risk_counts_isSet = false;
    m_prioritized_risk_counts_isValid = false;
}

void OAIWorkload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkload::fromJsonObject(QJsonObject json) {

    m_workload_id_isValid = ::OpenAPI::fromJsonValue(m_workload_id, json[QString("WorkloadId")]);
    m_workload_id_isSet = !json[QString("WorkloadId")].isNull() && m_workload_id_isValid;

    m_workload_arn_isValid = ::OpenAPI::fromJsonValue(m_workload_arn, json[QString("WorkloadArn")]);
    m_workload_arn_isSet = !json[QString("WorkloadArn")].isNull() && m_workload_arn_isValid;

    m_workload_name_isValid = ::OpenAPI::fromJsonValue(m_workload_name, json[QString("WorkloadName")]);
    m_workload_name_isSet = !json[QString("WorkloadName")].isNull() && m_workload_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("Environment")]);
    m_environment_isSet = !json[QString("Environment")].isNull() && m_environment_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_account_ids_isValid = ::OpenAPI::fromJsonValue(m_account_ids, json[QString("AccountIds")]);
    m_account_ids_isSet = !json[QString("AccountIds")].isNull() && m_account_ids_isValid;

    m_aws_regions_isValid = ::OpenAPI::fromJsonValue(m_aws_regions, json[QString("AwsRegions")]);
    m_aws_regions_isSet = !json[QString("AwsRegions")].isNull() && m_aws_regions_isValid;

    m_non_aws_regions_isValid = ::OpenAPI::fromJsonValue(m_non_aws_regions, json[QString("NonAwsRegions")]);
    m_non_aws_regions_isSet = !json[QString("NonAwsRegions")].isNull() && m_non_aws_regions_isValid;

    m_architectural_design_isValid = ::OpenAPI::fromJsonValue(m_architectural_design, json[QString("ArchitecturalDesign")]);
    m_architectural_design_isSet = !json[QString("ArchitecturalDesign")].isNull() && m_architectural_design_isValid;

    m_review_owner_isValid = ::OpenAPI::fromJsonValue(m_review_owner, json[QString("ReviewOwner")]);
    m_review_owner_isSet = !json[QString("ReviewOwner")].isNull() && m_review_owner_isValid;

    m_review_restriction_date_isValid = ::OpenAPI::fromJsonValue(m_review_restriction_date, json[QString("ReviewRestrictionDate")]);
    m_review_restriction_date_isSet = !json[QString("ReviewRestrictionDate")].isNull() && m_review_restriction_date_isValid;

    m_is_review_owner_update_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_is_review_owner_update_acknowledged, json[QString("IsReviewOwnerUpdateAcknowledged")]);
    m_is_review_owner_update_acknowledged_isSet = !json[QString("IsReviewOwnerUpdateAcknowledged")].isNull() && m_is_review_owner_update_acknowledged_isValid;

    m_industry_type_isValid = ::OpenAPI::fromJsonValue(m_industry_type, json[QString("IndustryType")]);
    m_industry_type_isSet = !json[QString("IndustryType")].isNull() && m_industry_type_isValid;

    m_industry_isValid = ::OpenAPI::fromJsonValue(m_industry, json[QString("Industry")]);
    m_industry_isSet = !json[QString("Industry")].isNull() && m_industry_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_improvement_status_isValid = ::OpenAPI::fromJsonValue(m_improvement_status, json[QString("ImprovementStatus")]);
    m_improvement_status_isSet = !json[QString("ImprovementStatus")].isNull() && m_improvement_status_isValid;

    m_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_risk_counts, json[QString("RiskCounts")]);
    m_risk_counts_isSet = !json[QString("RiskCounts")].isNull() && m_risk_counts_isValid;

    m_pillar_priorities_isValid = ::OpenAPI::fromJsonValue(m_pillar_priorities, json[QString("PillarPriorities")]);
    m_pillar_priorities_isSet = !json[QString("PillarPriorities")].isNull() && m_pillar_priorities_isValid;

    m_lenses_isValid = ::OpenAPI::fromJsonValue(m_lenses, json[QString("Lenses")]);
    m_lenses_isSet = !json[QString("Lenses")].isNull() && m_lenses_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_share_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_share_invitation_id, json[QString("ShareInvitationId")]);
    m_share_invitation_id_isSet = !json[QString("ShareInvitationId")].isNull() && m_share_invitation_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_discovery_config_isValid = ::OpenAPI::fromJsonValue(m_discovery_config, json[QString("DiscoveryConfig")]);
    m_discovery_config_isSet = !json[QString("DiscoveryConfig")].isNull() && m_discovery_config_isValid;

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("Applications")]);
    m_applications_isSet = !json[QString("Applications")].isNull() && m_applications_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("Profiles")]);
    m_profiles_isSet = !json[QString("Profiles")].isNull() && m_profiles_isValid;

    m_prioritized_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_prioritized_risk_counts, json[QString("PrioritizedRiskCounts")]);
    m_prioritized_risk_counts_isSet = !json[QString("PrioritizedRiskCounts")].isNull() && m_prioritized_risk_counts_isValid;
}

QString OAIWorkload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkload::asJsonObject() const {
    QJsonObject obj;
    if (m_workload_id_isSet) {
        obj.insert(QString("WorkloadId"), ::OpenAPI::toJsonValue(m_workload_id));
    }
    if (m_workload_arn_isSet) {
        obj.insert(QString("WorkloadArn"), ::OpenAPI::toJsonValue(m_workload_arn));
    }
    if (m_workload_name_isSet) {
        obj.insert(QString("WorkloadName"), ::OpenAPI::toJsonValue(m_workload_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environment.isSet()) {
        obj.insert(QString("Environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_account_ids.size() > 0) {
        obj.insert(QString("AccountIds"), ::OpenAPI::toJsonValue(m_account_ids));
    }
    if (m_aws_regions.size() > 0) {
        obj.insert(QString("AwsRegions"), ::OpenAPI::toJsonValue(m_aws_regions));
    }
    if (m_non_aws_regions.size() > 0) {
        obj.insert(QString("NonAwsRegions"), ::OpenAPI::toJsonValue(m_non_aws_regions));
    }
    if (m_architectural_design_isSet) {
        obj.insert(QString("ArchitecturalDesign"), ::OpenAPI::toJsonValue(m_architectural_design));
    }
    if (m_review_owner_isSet) {
        obj.insert(QString("ReviewOwner"), ::OpenAPI::toJsonValue(m_review_owner));
    }
    if (m_review_restriction_date_isSet) {
        obj.insert(QString("ReviewRestrictionDate"), ::OpenAPI::toJsonValue(m_review_restriction_date));
    }
    if (m_is_review_owner_update_acknowledged_isSet) {
        obj.insert(QString("IsReviewOwnerUpdateAcknowledged"), ::OpenAPI::toJsonValue(m_is_review_owner_update_acknowledged));
    }
    if (m_industry_type_isSet) {
        obj.insert(QString("IndustryType"), ::OpenAPI::toJsonValue(m_industry_type));
    }
    if (m_industry_isSet) {
        obj.insert(QString("Industry"), ::OpenAPI::toJsonValue(m_industry));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_improvement_status.isSet()) {
        obj.insert(QString("ImprovementStatus"), ::OpenAPI::toJsonValue(m_improvement_status));
    }
    if (m_risk_counts.size() > 0) {
        obj.insert(QString("RiskCounts"), ::OpenAPI::toJsonValue(m_risk_counts));
    }
    if (m_pillar_priorities.size() > 0) {
        obj.insert(QString("PillarPriorities"), ::OpenAPI::toJsonValue(m_pillar_priorities));
    }
    if (m_lenses.size() > 0) {
        obj.insert(QString("Lenses"), ::OpenAPI::toJsonValue(m_lenses));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_share_invitation_id_isSet) {
        obj.insert(QString("ShareInvitationId"), ::OpenAPI::toJsonValue(m_share_invitation_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_discovery_config.isSet()) {
        obj.insert(QString("DiscoveryConfig"), ::OpenAPI::toJsonValue(m_discovery_config));
    }
    if (m_applications.isSet()) {
        obj.insert(QString("Applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_profiles.isSet()) {
        obj.insert(QString("Profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_prioritized_risk_counts.size() > 0) {
        obj.insert(QString("PrioritizedRiskCounts"), ::OpenAPI::toJsonValue(m_prioritized_risk_counts));
    }
    return obj;
}

QString OAIWorkload::getWorkloadId() const {
    return m_workload_id;
}
void OAIWorkload::setWorkloadId(const QString &workload_id) {
    m_workload_id = workload_id;
    m_workload_id_isSet = true;
}

bool OAIWorkload::is_workload_id_Set() const{
    return m_workload_id_isSet;
}

bool OAIWorkload::is_workload_id_Valid() const{
    return m_workload_id_isValid;
}

QString OAIWorkload::getWorkloadArn() const {
    return m_workload_arn;
}
void OAIWorkload::setWorkloadArn(const QString &workload_arn) {
    m_workload_arn = workload_arn;
    m_workload_arn_isSet = true;
}

bool OAIWorkload::is_workload_arn_Set() const{
    return m_workload_arn_isSet;
}

bool OAIWorkload::is_workload_arn_Valid() const{
    return m_workload_arn_isValid;
}

QString OAIWorkload::getWorkloadName() const {
    return m_workload_name;
}
void OAIWorkload::setWorkloadName(const QString &workload_name) {
    m_workload_name = workload_name;
    m_workload_name_isSet = true;
}

bool OAIWorkload::is_workload_name_Set() const{
    return m_workload_name_isSet;
}

bool OAIWorkload::is_workload_name_Valid() const{
    return m_workload_name_isValid;
}

QString OAIWorkload::getDescription() const {
    return m_description;
}
void OAIWorkload::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkload::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkload::is_description_Valid() const{
    return m_description_isValid;
}

OAIWorkloadEnvironment OAIWorkload::getEnvironment() const {
    return m_environment;
}
void OAIWorkload::setEnvironment(const OAIWorkloadEnvironment &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIWorkload::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIWorkload::is_environment_Valid() const{
    return m_environment_isValid;
}

QDateTime OAIWorkload::getUpdatedAt() const {
    return m_updated_at;
}
void OAIWorkload::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIWorkload::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIWorkload::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<QString> OAIWorkload::getAccountIds() const {
    return m_account_ids;
}
void OAIWorkload::setAccountIds(const QList<QString> &account_ids) {
    m_account_ids = account_ids;
    m_account_ids_isSet = true;
}

bool OAIWorkload::is_account_ids_Set() const{
    return m_account_ids_isSet;
}

bool OAIWorkload::is_account_ids_Valid() const{
    return m_account_ids_isValid;
}

QList<QString> OAIWorkload::getAwsRegions() const {
    return m_aws_regions;
}
void OAIWorkload::setAwsRegions(const QList<QString> &aws_regions) {
    m_aws_regions = aws_regions;
    m_aws_regions_isSet = true;
}

bool OAIWorkload::is_aws_regions_Set() const{
    return m_aws_regions_isSet;
}

bool OAIWorkload::is_aws_regions_Valid() const{
    return m_aws_regions_isValid;
}

QList<QString> OAIWorkload::getNonAwsRegions() const {
    return m_non_aws_regions;
}
void OAIWorkload::setNonAwsRegions(const QList<QString> &non_aws_regions) {
    m_non_aws_regions = non_aws_regions;
    m_non_aws_regions_isSet = true;
}

bool OAIWorkload::is_non_aws_regions_Set() const{
    return m_non_aws_regions_isSet;
}

bool OAIWorkload::is_non_aws_regions_Valid() const{
    return m_non_aws_regions_isValid;
}

QString OAIWorkload::getArchitecturalDesign() const {
    return m_architectural_design;
}
void OAIWorkload::setArchitecturalDesign(const QString &architectural_design) {
    m_architectural_design = architectural_design;
    m_architectural_design_isSet = true;
}

bool OAIWorkload::is_architectural_design_Set() const{
    return m_architectural_design_isSet;
}

bool OAIWorkload::is_architectural_design_Valid() const{
    return m_architectural_design_isValid;
}

QString OAIWorkload::getReviewOwner() const {
    return m_review_owner;
}
void OAIWorkload::setReviewOwner(const QString &review_owner) {
    m_review_owner = review_owner;
    m_review_owner_isSet = true;
}

bool OAIWorkload::is_review_owner_Set() const{
    return m_review_owner_isSet;
}

bool OAIWorkload::is_review_owner_Valid() const{
    return m_review_owner_isValid;
}

QDateTime OAIWorkload::getReviewRestrictionDate() const {
    return m_review_restriction_date;
}
void OAIWorkload::setReviewRestrictionDate(const QDateTime &review_restriction_date) {
    m_review_restriction_date = review_restriction_date;
    m_review_restriction_date_isSet = true;
}

bool OAIWorkload::is_review_restriction_date_Set() const{
    return m_review_restriction_date_isSet;
}

bool OAIWorkload::is_review_restriction_date_Valid() const{
    return m_review_restriction_date_isValid;
}

bool OAIWorkload::getIsReviewOwnerUpdateAcknowledged() const {
    return m_is_review_owner_update_acknowledged;
}
void OAIWorkload::setIsReviewOwnerUpdateAcknowledged(const bool &is_review_owner_update_acknowledged) {
    m_is_review_owner_update_acknowledged = is_review_owner_update_acknowledged;
    m_is_review_owner_update_acknowledged_isSet = true;
}

bool OAIWorkload::is_is_review_owner_update_acknowledged_Set() const{
    return m_is_review_owner_update_acknowledged_isSet;
}

bool OAIWorkload::is_is_review_owner_update_acknowledged_Valid() const{
    return m_is_review_owner_update_acknowledged_isValid;
}

QString OAIWorkload::getIndustryType() const {
    return m_industry_type;
}
void OAIWorkload::setIndustryType(const QString &industry_type) {
    m_industry_type = industry_type;
    m_industry_type_isSet = true;
}

bool OAIWorkload::is_industry_type_Set() const{
    return m_industry_type_isSet;
}

bool OAIWorkload::is_industry_type_Valid() const{
    return m_industry_type_isValid;
}

QString OAIWorkload::getIndustry() const {
    return m_industry;
}
void OAIWorkload::setIndustry(const QString &industry) {
    m_industry = industry;
    m_industry_isSet = true;
}

bool OAIWorkload::is_industry_Set() const{
    return m_industry_isSet;
}

bool OAIWorkload::is_industry_Valid() const{
    return m_industry_isValid;
}

QString OAIWorkload::getNotes() const {
    return m_notes;
}
void OAIWorkload::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIWorkload::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIWorkload::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIWorkloadImprovementStatus OAIWorkload::getImprovementStatus() const {
    return m_improvement_status;
}
void OAIWorkload::setImprovementStatus(const OAIWorkloadImprovementStatus &improvement_status) {
    m_improvement_status = improvement_status;
    m_improvement_status_isSet = true;
}

bool OAIWorkload::is_improvement_status_Set() const{
    return m_improvement_status_isSet;
}

bool OAIWorkload::is_improvement_status_Valid() const{
    return m_improvement_status_isValid;
}

QMap<QString, qint32> OAIWorkload::getRiskCounts() const {
    return m_risk_counts;
}
void OAIWorkload::setRiskCounts(const QMap<QString, qint32> &risk_counts) {
    m_risk_counts = risk_counts;
    m_risk_counts_isSet = true;
}

bool OAIWorkload::is_risk_counts_Set() const{
    return m_risk_counts_isSet;
}

bool OAIWorkload::is_risk_counts_Valid() const{
    return m_risk_counts_isValid;
}

QList<QString> OAIWorkload::getPillarPriorities() const {
    return m_pillar_priorities;
}
void OAIWorkload::setPillarPriorities(const QList<QString> &pillar_priorities) {
    m_pillar_priorities = pillar_priorities;
    m_pillar_priorities_isSet = true;
}

bool OAIWorkload::is_pillar_priorities_Set() const{
    return m_pillar_priorities_isSet;
}

bool OAIWorkload::is_pillar_priorities_Valid() const{
    return m_pillar_priorities_isValid;
}

QList<QString> OAIWorkload::getLenses() const {
    return m_lenses;
}
void OAIWorkload::setLenses(const QList<QString> &lenses) {
    m_lenses = lenses;
    m_lenses_isSet = true;
}

bool OAIWorkload::is_lenses_Set() const{
    return m_lenses_isSet;
}

bool OAIWorkload::is_lenses_Valid() const{
    return m_lenses_isValid;
}

QString OAIWorkload::getOwner() const {
    return m_owner;
}
void OAIWorkload::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIWorkload::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIWorkload::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIWorkload::getShareInvitationId() const {
    return m_share_invitation_id;
}
void OAIWorkload::setShareInvitationId(const QString &share_invitation_id) {
    m_share_invitation_id = share_invitation_id;
    m_share_invitation_id_isSet = true;
}

bool OAIWorkload::is_share_invitation_id_Set() const{
    return m_share_invitation_id_isSet;
}

bool OAIWorkload::is_share_invitation_id_Valid() const{
    return m_share_invitation_id_isValid;
}

QMap OAIWorkload::getTags() const {
    return m_tags;
}
void OAIWorkload::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIWorkload::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIWorkload::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIWorkload_DiscoveryConfig OAIWorkload::getDiscoveryConfig() const {
    return m_discovery_config;
}
void OAIWorkload::setDiscoveryConfig(const OAIWorkload_DiscoveryConfig &discovery_config) {
    m_discovery_config = discovery_config;
    m_discovery_config_isSet = true;
}

bool OAIWorkload::is_discovery_config_Set() const{
    return m_discovery_config_isSet;
}

bool OAIWorkload::is_discovery_config_Valid() const{
    return m_discovery_config_isValid;
}

QList OAIWorkload::getApplications() const {
    return m_applications;
}
void OAIWorkload::setApplications(const QList &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIWorkload::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIWorkload::is_applications_Valid() const{
    return m_applications_isValid;
}

QList OAIWorkload::getProfiles() const {
    return m_profiles;
}
void OAIWorkload::setProfiles(const QList &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAIWorkload::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAIWorkload::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QMap<QString, qint32> OAIWorkload::getPrioritizedRiskCounts() const {
    return m_prioritized_risk_counts;
}
void OAIWorkload::setPrioritizedRiskCounts(const QMap<QString, qint32> &prioritized_risk_counts) {
    m_prioritized_risk_counts = prioritized_risk_counts;
    m_prioritized_risk_counts_isSet = true;
}

bool OAIWorkload::is_prioritized_risk_counts_Set() const{
    return m_prioritized_risk_counts_isSet;
}

bool OAIWorkload::is_prioritized_risk_counts_Valid() const{
    return m_prioritized_risk_counts_isValid;
}

bool OAIWorkload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_aws_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_architectural_design_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_restriction_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_review_owner_update_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_priorities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prioritized_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
