/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPillarReviewSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPillarReviewSummary::OAIPillarReviewSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPillarReviewSummary::OAIPillarReviewSummary() {
    this->initializeModel();
}

OAIPillarReviewSummary::~OAIPillarReviewSummary() {}

void OAIPillarReviewSummary::initializeModel() {

    m_pillar_id_isSet = false;
    m_pillar_id_isValid = false;

    m_pillar_name_isSet = false;
    m_pillar_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_risk_counts_isSet = false;
    m_risk_counts_isValid = false;

    m_prioritized_risk_counts_isSet = false;
    m_prioritized_risk_counts_isValid = false;
}

void OAIPillarReviewSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPillarReviewSummary::fromJsonObject(QJsonObject json) {

    m_pillar_id_isValid = ::OpenAPI::fromJsonValue(m_pillar_id, json[QString("PillarId")]);
    m_pillar_id_isSet = !json[QString("PillarId")].isNull() && m_pillar_id_isValid;

    m_pillar_name_isValid = ::OpenAPI::fromJsonValue(m_pillar_name, json[QString("PillarName")]);
    m_pillar_name_isSet = !json[QString("PillarName")].isNull() && m_pillar_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_risk_counts, json[QString("RiskCounts")]);
    m_risk_counts_isSet = !json[QString("RiskCounts")].isNull() && m_risk_counts_isValid;

    m_prioritized_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_prioritized_risk_counts, json[QString("PrioritizedRiskCounts")]);
    m_prioritized_risk_counts_isSet = !json[QString("PrioritizedRiskCounts")].isNull() && m_prioritized_risk_counts_isValid;
}

QString OAIPillarReviewSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPillarReviewSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_pillar_id_isSet) {
        obj.insert(QString("PillarId"), ::OpenAPI::toJsonValue(m_pillar_id));
    }
    if (m_pillar_name_isSet) {
        obj.insert(QString("PillarName"), ::OpenAPI::toJsonValue(m_pillar_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_risk_counts.size() > 0) {
        obj.insert(QString("RiskCounts"), ::OpenAPI::toJsonValue(m_risk_counts));
    }
    if (m_prioritized_risk_counts.size() > 0) {
        obj.insert(QString("PrioritizedRiskCounts"), ::OpenAPI::toJsonValue(m_prioritized_risk_counts));
    }
    return obj;
}

QString OAIPillarReviewSummary::getPillarId() const {
    return m_pillar_id;
}
void OAIPillarReviewSummary::setPillarId(const QString &pillar_id) {
    m_pillar_id = pillar_id;
    m_pillar_id_isSet = true;
}

bool OAIPillarReviewSummary::is_pillar_id_Set() const{
    return m_pillar_id_isSet;
}

bool OAIPillarReviewSummary::is_pillar_id_Valid() const{
    return m_pillar_id_isValid;
}

QString OAIPillarReviewSummary::getPillarName() const {
    return m_pillar_name;
}
void OAIPillarReviewSummary::setPillarName(const QString &pillar_name) {
    m_pillar_name = pillar_name;
    m_pillar_name_isSet = true;
}

bool OAIPillarReviewSummary::is_pillar_name_Set() const{
    return m_pillar_name_isSet;
}

bool OAIPillarReviewSummary::is_pillar_name_Valid() const{
    return m_pillar_name_isValid;
}

QString OAIPillarReviewSummary::getNotes() const {
    return m_notes;
}
void OAIPillarReviewSummary::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPillarReviewSummary::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPillarReviewSummary::is_notes_Valid() const{
    return m_notes_isValid;
}

QMap<QString, qint32> OAIPillarReviewSummary::getRiskCounts() const {
    return m_risk_counts;
}
void OAIPillarReviewSummary::setRiskCounts(const QMap<QString, qint32> &risk_counts) {
    m_risk_counts = risk_counts;
    m_risk_counts_isSet = true;
}

bool OAIPillarReviewSummary::is_risk_counts_Set() const{
    return m_risk_counts_isSet;
}

bool OAIPillarReviewSummary::is_risk_counts_Valid() const{
    return m_risk_counts_isValid;
}

QMap<QString, qint32> OAIPillarReviewSummary::getPrioritizedRiskCounts() const {
    return m_prioritized_risk_counts;
}
void OAIPillarReviewSummary::setPrioritizedRiskCounts(const QMap<QString, qint32> &prioritized_risk_counts) {
    m_prioritized_risk_counts = prioritized_risk_counts;
    m_prioritized_risk_counts_isSet = true;
}

bool OAIPillarReviewSummary::is_prioritized_risk_counts_Set() const{
    return m_prioritized_risk_counts_isSet;
}

bool OAIPillarReviewSummary::is_prioritized_risk_counts_Valid() const{
    return m_prioritized_risk_counts_isValid;
}

bool OAIPillarReviewSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pillar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prioritized_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPillarReviewSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
