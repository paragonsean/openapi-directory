/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportLensInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportLensInput::OAIImportLensInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportLensInput::OAIImportLensInput() {
    this->initializeModel();
}

OAIImportLensInput::~OAIImportLensInput() {}

void OAIImportLensInput::initializeModel() {

    m_lens_alias_isSet = false;
    m_lens_alias_isValid = false;

    m_json_string_isSet = false;
    m_json_string_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIImportLensInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportLensInput::fromJsonObject(QJsonObject json) {

    m_lens_alias_isValid = ::OpenAPI::fromJsonValue(m_lens_alias, json[QString("LensAlias")]);
    m_lens_alias_isSet = !json[QString("LensAlias")].isNull() && m_lens_alias_isValid;

    m_json_string_isValid = ::OpenAPI::fromJsonValue(m_json_string, json[QString("JSONString")]);
    m_json_string_isSet = !json[QString("JSONString")].isNull() && m_json_string_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIImportLensInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportLensInput::asJsonObject() const {
    QJsonObject obj;
    if (m_lens_alias_isSet) {
        obj.insert(QString("LensAlias"), ::OpenAPI::toJsonValue(m_lens_alias));
    }
    if (m_json_string_isSet) {
        obj.insert(QString("JSONString"), ::OpenAPI::toJsonValue(m_json_string));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIImportLensInput::getLensAlias() const {
    return m_lens_alias;
}
void OAIImportLensInput::setLensAlias(const QString &lens_alias) {
    m_lens_alias = lens_alias;
    m_lens_alias_isSet = true;
}

bool OAIImportLensInput::is_lens_alias_Set() const{
    return m_lens_alias_isSet;
}

bool OAIImportLensInput::is_lens_alias_Valid() const{
    return m_lens_alias_isValid;
}

QString OAIImportLensInput::getJsonString() const {
    return m_json_string;
}
void OAIImportLensInput::setJsonString(const QString &json_string) {
    m_json_string = json_string;
    m_json_string_isSet = true;
}

bool OAIImportLensInput::is_json_string_Set() const{
    return m_json_string_isSet;
}

bool OAIImportLensInput::is_json_string_Valid() const{
    return m_json_string_isValid;
}

QString OAIImportLensInput::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIImportLensInput::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIImportLensInput::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIImportLensInput::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QMap OAIImportLensInput::getTags() const {
    return m_tags;
}
void OAIImportLensInput::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIImportLensInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIImportLensInput::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIImportLensInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lens_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportLensInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_json_string_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
