/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfileTemplateQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfileTemplateQuestion::OAIProfileTemplateQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfileTemplateQuestion::OAIProfileTemplateQuestion() {
    this->initializeModel();
}

OAIProfileTemplateQuestion::~OAIProfileTemplateQuestion() {}

void OAIProfileTemplateQuestion::initializeModel() {

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_question_title_isSet = false;
    m_question_title_isValid = false;

    m_question_description_isSet = false;
    m_question_description_isValid = false;

    m_question_choices_isSet = false;
    m_question_choices_isValid = false;

    m_min_selected_choices_isSet = false;
    m_min_selected_choices_isValid = false;

    m_max_selected_choices_isSet = false;
    m_max_selected_choices_isValid = false;
}

void OAIProfileTemplateQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfileTemplateQuestion::fromJsonObject(QJsonObject json) {

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_question_title_isValid = ::OpenAPI::fromJsonValue(m_question_title, json[QString("QuestionTitle")]);
    m_question_title_isSet = !json[QString("QuestionTitle")].isNull() && m_question_title_isValid;

    m_question_description_isValid = ::OpenAPI::fromJsonValue(m_question_description, json[QString("QuestionDescription")]);
    m_question_description_isSet = !json[QString("QuestionDescription")].isNull() && m_question_description_isValid;

    m_question_choices_isValid = ::OpenAPI::fromJsonValue(m_question_choices, json[QString("QuestionChoices")]);
    m_question_choices_isSet = !json[QString("QuestionChoices")].isNull() && m_question_choices_isValid;

    m_min_selected_choices_isValid = ::OpenAPI::fromJsonValue(m_min_selected_choices, json[QString("MinSelectedChoices")]);
    m_min_selected_choices_isSet = !json[QString("MinSelectedChoices")].isNull() && m_min_selected_choices_isValid;

    m_max_selected_choices_isValid = ::OpenAPI::fromJsonValue(m_max_selected_choices, json[QString("MaxSelectedChoices")]);
    m_max_selected_choices_isSet = !json[QString("MaxSelectedChoices")].isNull() && m_max_selected_choices_isValid;
}

QString OAIProfileTemplateQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfileTemplateQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_question_title_isSet) {
        obj.insert(QString("QuestionTitle"), ::OpenAPI::toJsonValue(m_question_title));
    }
    if (m_question_description_isSet) {
        obj.insert(QString("QuestionDescription"), ::OpenAPI::toJsonValue(m_question_description));
    }
    if (m_question_choices.isSet()) {
        obj.insert(QString("QuestionChoices"), ::OpenAPI::toJsonValue(m_question_choices));
    }
    if (m_min_selected_choices_isSet) {
        obj.insert(QString("MinSelectedChoices"), ::OpenAPI::toJsonValue(m_min_selected_choices));
    }
    if (m_max_selected_choices_isSet) {
        obj.insert(QString("MaxSelectedChoices"), ::OpenAPI::toJsonValue(m_max_selected_choices));
    }
    return obj;
}

QString OAIProfileTemplateQuestion::getQuestionId() const {
    return m_question_id;
}
void OAIProfileTemplateQuestion::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIProfileTemplateQuestion::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIProfileTemplateQuestion::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIProfileTemplateQuestion::getQuestionTitle() const {
    return m_question_title;
}
void OAIProfileTemplateQuestion::setQuestionTitle(const QString &question_title) {
    m_question_title = question_title;
    m_question_title_isSet = true;
}

bool OAIProfileTemplateQuestion::is_question_title_Set() const{
    return m_question_title_isSet;
}

bool OAIProfileTemplateQuestion::is_question_title_Valid() const{
    return m_question_title_isValid;
}

QString OAIProfileTemplateQuestion::getQuestionDescription() const {
    return m_question_description;
}
void OAIProfileTemplateQuestion::setQuestionDescription(const QString &question_description) {
    m_question_description = question_description;
    m_question_description_isSet = true;
}

bool OAIProfileTemplateQuestion::is_question_description_Set() const{
    return m_question_description_isSet;
}

bool OAIProfileTemplateQuestion::is_question_description_Valid() const{
    return m_question_description_isValid;
}

QList OAIProfileTemplateQuestion::getQuestionChoices() const {
    return m_question_choices;
}
void OAIProfileTemplateQuestion::setQuestionChoices(const QList &question_choices) {
    m_question_choices = question_choices;
    m_question_choices_isSet = true;
}

bool OAIProfileTemplateQuestion::is_question_choices_Set() const{
    return m_question_choices_isSet;
}

bool OAIProfileTemplateQuestion::is_question_choices_Valid() const{
    return m_question_choices_isValid;
}

qint32 OAIProfileTemplateQuestion::getMinSelectedChoices() const {
    return m_min_selected_choices;
}
void OAIProfileTemplateQuestion::setMinSelectedChoices(const qint32 &min_selected_choices) {
    m_min_selected_choices = min_selected_choices;
    m_min_selected_choices_isSet = true;
}

bool OAIProfileTemplateQuestion::is_min_selected_choices_Set() const{
    return m_min_selected_choices_isSet;
}

bool OAIProfileTemplateQuestion::is_min_selected_choices_Valid() const{
    return m_min_selected_choices_isValid;
}

qint32 OAIProfileTemplateQuestion::getMaxSelectedChoices() const {
    return m_max_selected_choices;
}
void OAIProfileTemplateQuestion::setMaxSelectedChoices(const qint32 &max_selected_choices) {
    m_max_selected_choices = max_selected_choices;
    m_max_selected_choices_isSet = true;
}

bool OAIProfileTemplateQuestion::is_max_selected_choices_Set() const{
    return m_max_selected_choices_isSet;
}

bool OAIProfileTemplateQuestion::is_max_selected_choices_Valid() const{
    return m_max_selected_choices_isValid;
}

bool OAIProfileTemplateQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_choices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_selected_choices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_selected_choices_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfileTemplateQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
