/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPillarDifference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPillarDifference::OAIPillarDifference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPillarDifference::OAIPillarDifference() {
    this->initializeModel();
}

OAIPillarDifference::~OAIPillarDifference() {}

void OAIPillarDifference::initializeModel() {

    m_pillar_id_isSet = false;
    m_pillar_id_isValid = false;

    m_pillar_name_isSet = false;
    m_pillar_name_isValid = false;

    m_difference_status_isSet = false;
    m_difference_status_isValid = false;

    m_question_differences_isSet = false;
    m_question_differences_isValid = false;
}

void OAIPillarDifference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPillarDifference::fromJsonObject(QJsonObject json) {

    m_pillar_id_isValid = ::OpenAPI::fromJsonValue(m_pillar_id, json[QString("PillarId")]);
    m_pillar_id_isSet = !json[QString("PillarId")].isNull() && m_pillar_id_isValid;

    m_pillar_name_isValid = ::OpenAPI::fromJsonValue(m_pillar_name, json[QString("PillarName")]);
    m_pillar_name_isSet = !json[QString("PillarName")].isNull() && m_pillar_name_isValid;

    m_difference_status_isValid = ::OpenAPI::fromJsonValue(m_difference_status, json[QString("DifferenceStatus")]);
    m_difference_status_isSet = !json[QString("DifferenceStatus")].isNull() && m_difference_status_isValid;

    m_question_differences_isValid = ::OpenAPI::fromJsonValue(m_question_differences, json[QString("QuestionDifferences")]);
    m_question_differences_isSet = !json[QString("QuestionDifferences")].isNull() && m_question_differences_isValid;
}

QString OAIPillarDifference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPillarDifference::asJsonObject() const {
    QJsonObject obj;
    if (m_pillar_id_isSet) {
        obj.insert(QString("PillarId"), ::OpenAPI::toJsonValue(m_pillar_id));
    }
    if (m_pillar_name_isSet) {
        obj.insert(QString("PillarName"), ::OpenAPI::toJsonValue(m_pillar_name));
    }
    if (m_difference_status.isSet()) {
        obj.insert(QString("DifferenceStatus"), ::OpenAPI::toJsonValue(m_difference_status));
    }
    if (m_question_differences.isSet()) {
        obj.insert(QString("QuestionDifferences"), ::OpenAPI::toJsonValue(m_question_differences));
    }
    return obj;
}

QString OAIPillarDifference::getPillarId() const {
    return m_pillar_id;
}
void OAIPillarDifference::setPillarId(const QString &pillar_id) {
    m_pillar_id = pillar_id;
    m_pillar_id_isSet = true;
}

bool OAIPillarDifference::is_pillar_id_Set() const{
    return m_pillar_id_isSet;
}

bool OAIPillarDifference::is_pillar_id_Valid() const{
    return m_pillar_id_isValid;
}

QString OAIPillarDifference::getPillarName() const {
    return m_pillar_name;
}
void OAIPillarDifference::setPillarName(const QString &pillar_name) {
    m_pillar_name = pillar_name;
    m_pillar_name_isSet = true;
}

bool OAIPillarDifference::is_pillar_name_Set() const{
    return m_pillar_name_isSet;
}

bool OAIPillarDifference::is_pillar_name_Valid() const{
    return m_pillar_name_isValid;
}

OAIDifferenceStatus OAIPillarDifference::getDifferenceStatus() const {
    return m_difference_status;
}
void OAIPillarDifference::setDifferenceStatus(const OAIDifferenceStatus &difference_status) {
    m_difference_status = difference_status;
    m_difference_status_isSet = true;
}

bool OAIPillarDifference::is_difference_status_Set() const{
    return m_difference_status_isSet;
}

bool OAIPillarDifference::is_difference_status_Valid() const{
    return m_difference_status_isValid;
}

QList OAIPillarDifference::getQuestionDifferences() const {
    return m_question_differences;
}
void OAIPillarDifference::setQuestionDifferences(const QList &question_differences) {
    m_question_differences = question_differences;
    m_question_differences_isSet = true;
}

bool OAIPillarDifference::is_question_differences_Set() const{
    return m_question_differences_isSet;
}

bool OAIPillarDifference::is_question_differences_Valid() const{
    return m_question_differences_isValid;
}

bool OAIPillarDifference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pillar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_difference_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_differences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPillarDifference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
