/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILensReview.h
 *
 * A lens review of a question.
 */

#ifndef OAILensReview_H
#define OAILensReview_H

#include <QJsonObject>

#include "OAILensStatus.h"
#include "OAIPillarReviewSummary.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPillarReviewSummary;

class OAILensReview : public OAIObject {
public:
    OAILensReview();
    OAILensReview(QString json);
    ~OAILensReview() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLensAlias() const;
    void setLensAlias(const QString &lens_alias);
    bool is_lens_alias_Set() const;
    bool is_lens_alias_Valid() const;

    QString getLensArn() const;
    void setLensArn(const QString &lens_arn);
    bool is_lens_arn_Set() const;
    bool is_lens_arn_Valid() const;

    QString getLensVersion() const;
    void setLensVersion(const QString &lens_version);
    bool is_lens_version_Set() const;
    bool is_lens_version_Valid() const;

    QString getLensName() const;
    void setLensName(const QString &lens_name);
    bool is_lens_name_Set() const;
    bool is_lens_name_Valid() const;

    OAILensStatus getLensStatus() const;
    void setLensStatus(const OAILensStatus &lens_status);
    bool is_lens_status_Set() const;
    bool is_lens_status_Valid() const;

    QList<OAIPillarReviewSummary> getPillarReviewSummaries() const;
    void setPillarReviewSummaries(const QList<OAIPillarReviewSummary> &pillar_review_summaries);
    bool is_pillar_review_summaries_Set() const;
    bool is_pillar_review_summaries_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QMap<QString, qint32> getRiskCounts() const;
    void setRiskCounts(const QMap<QString, qint32> &risk_counts);
    bool is_risk_counts_Set() const;
    bool is_risk_counts_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    QList getProfiles() const;
    void setProfiles(const QList &profiles);
    bool is_profiles_Set() const;
    bool is_profiles_Valid() const;

    QMap<QString, qint32> getPrioritizedRiskCounts() const;
    void setPrioritizedRiskCounts(const QMap<QString, qint32> &prioritized_risk_counts);
    bool is_prioritized_risk_counts_Set() const;
    bool is_prioritized_risk_counts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_lens_alias;
    bool m_lens_alias_isSet;
    bool m_lens_alias_isValid;

    QString m_lens_arn;
    bool m_lens_arn_isSet;
    bool m_lens_arn_isValid;

    QString m_lens_version;
    bool m_lens_version_isSet;
    bool m_lens_version_isValid;

    QString m_lens_name;
    bool m_lens_name_isSet;
    bool m_lens_name_isValid;

    OAILensStatus m_lens_status;
    bool m_lens_status_isSet;
    bool m_lens_status_isValid;

    QList<OAIPillarReviewSummary> m_pillar_review_summaries;
    bool m_pillar_review_summaries_isSet;
    bool m_pillar_review_summaries_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QMap<QString, qint32> m_risk_counts;
    bool m_risk_counts_isSet;
    bool m_risk_counts_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    QList m_profiles;
    bool m_profiles_isSet;
    bool m_profiles_isValid;

    QMap<QString, qint32> m_prioritized_risk_counts;
    bool m_prioritized_risk_counts_isSet;
    bool m_prioritized_risk_counts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILensReview)

#endif // OAILensReview_H
