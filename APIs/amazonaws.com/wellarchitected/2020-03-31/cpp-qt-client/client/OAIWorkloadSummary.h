/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkloadSummary.h
 *
 * A workload summary return object.
 */

#ifndef OAIWorkloadSummary_H
#define OAIWorkloadSummary_H

#include <QJsonObject>

#include "OAIWorkloadImprovementStatus.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWorkloadSummary : public OAIObject {
public:
    OAIWorkloadSummary();
    OAIWorkloadSummary(QString json);
    ~OAIWorkloadSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWorkloadId() const;
    void setWorkloadId(const QString &workload_id);
    bool is_workload_id_Set() const;
    bool is_workload_id_Valid() const;

    QString getWorkloadArn() const;
    void setWorkloadArn(const QString &workload_arn);
    bool is_workload_arn_Set() const;
    bool is_workload_arn_Valid() const;

    QString getWorkloadName() const;
    void setWorkloadName(const QString &workload_name);
    bool is_workload_name_Set() const;
    bool is_workload_name_Valid() const;

    QString getOwner() const;
    void setOwner(const QString &owner);
    bool is_owner_Set() const;
    bool is_owner_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QList<QString> getLenses() const;
    void setLenses(const QList<QString> &lenses);
    bool is_lenses_Set() const;
    bool is_lenses_Valid() const;

    QMap<QString, qint32> getRiskCounts() const;
    void setRiskCounts(const QMap<QString, qint32> &risk_counts);
    bool is_risk_counts_Set() const;
    bool is_risk_counts_Valid() const;

    OAIWorkloadImprovementStatus getImprovementStatus() const;
    void setImprovementStatus(const OAIWorkloadImprovementStatus &improvement_status);
    bool is_improvement_status_Set() const;
    bool is_improvement_status_Valid() const;

    QList getProfiles() const;
    void setProfiles(const QList &profiles);
    bool is_profiles_Set() const;
    bool is_profiles_Valid() const;

    QMap<QString, qint32> getPrioritizedRiskCounts() const;
    void setPrioritizedRiskCounts(const QMap<QString, qint32> &prioritized_risk_counts);
    bool is_prioritized_risk_counts_Set() const;
    bool is_prioritized_risk_counts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_workload_id;
    bool m_workload_id_isSet;
    bool m_workload_id_isValid;

    QString m_workload_arn;
    bool m_workload_arn_isSet;
    bool m_workload_arn_isValid;

    QString m_workload_name;
    bool m_workload_name_isSet;
    bool m_workload_name_isValid;

    QString m_owner;
    bool m_owner_isSet;
    bool m_owner_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QList<QString> m_lenses;
    bool m_lenses_isSet;
    bool m_lenses_isValid;

    QMap<QString, qint32> m_risk_counts;
    bool m_risk_counts_isSet;
    bool m_risk_counts_isValid;

    OAIWorkloadImprovementStatus m_improvement_status;
    bool m_improvement_status_isSet;
    bool m_improvement_status_isValid;

    QList m_profiles;
    bool m_profiles_isSet;
    bool m_profiles_isValid;

    QMap<QString, qint32> m_prioritized_risk_counts;
    bool m_prioritized_risk_counts_isSet;
    bool m_prioritized_risk_counts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkloadSummary)

#endif // OAIWorkloadSummary_H
