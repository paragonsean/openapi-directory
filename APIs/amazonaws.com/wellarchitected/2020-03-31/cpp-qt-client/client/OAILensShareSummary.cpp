/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILensShareSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILensShareSummary::OAILensShareSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILensShareSummary::OAILensShareSummary() {
    this->initializeModel();
}

OAILensShareSummary::~OAILensShareSummary() {}

void OAILensShareSummary::initializeModel() {

    m_share_id_isSet = false;
    m_share_id_isValid = false;

    m_shared_with_isSet = false;
    m_shared_with_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;
}

void OAILensShareSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILensShareSummary::fromJsonObject(QJsonObject json) {

    m_share_id_isValid = ::OpenAPI::fromJsonValue(m_share_id, json[QString("ShareId")]);
    m_share_id_isSet = !json[QString("ShareId")].isNull() && m_share_id_isValid;

    m_shared_with_isValid = ::OpenAPI::fromJsonValue(m_shared_with, json[QString("SharedWith")]);
    m_shared_with_isSet = !json[QString("SharedWith")].isNull() && m_shared_with_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("StatusMessage")]);
    m_status_message_isSet = !json[QString("StatusMessage")].isNull() && m_status_message_isValid;
}

QString OAILensShareSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILensShareSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_share_id_isSet) {
        obj.insert(QString("ShareId"), ::OpenAPI::toJsonValue(m_share_id));
    }
    if (m_shared_with_isSet) {
        obj.insert(QString("SharedWith"), ::OpenAPI::toJsonValue(m_shared_with));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("StatusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    return obj;
}

QString OAILensShareSummary::getShareId() const {
    return m_share_id;
}
void OAILensShareSummary::setShareId(const QString &share_id) {
    m_share_id = share_id;
    m_share_id_isSet = true;
}

bool OAILensShareSummary::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAILensShareSummary::is_share_id_Valid() const{
    return m_share_id_isValid;
}

QString OAILensShareSummary::getSharedWith() const {
    return m_shared_with;
}
void OAILensShareSummary::setSharedWith(const QString &shared_with) {
    m_shared_with = shared_with;
    m_shared_with_isSet = true;
}

bool OAILensShareSummary::is_shared_with_Set() const{
    return m_shared_with_isSet;
}

bool OAILensShareSummary::is_shared_with_Valid() const{
    return m_shared_with_isValid;
}

OAIShareStatus OAILensShareSummary::getStatus() const {
    return m_status;
}
void OAILensShareSummary::setStatus(const OAIShareStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILensShareSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAILensShareSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAILensShareSummary::getStatusMessage() const {
    return m_status_message;
}
void OAILensShareSummary::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAILensShareSummary::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAILensShareSummary::is_status_message_Valid() const{
    return m_status_message_isValid;
}

bool OAILensShareSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILensShareSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
