/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestionMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestionMetric::OAIQuestionMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestionMetric::OAIQuestionMetric() {
    this->initializeModel();
}

OAIQuestionMetric::~OAIQuestionMetric() {}

void OAIQuestionMetric::initializeModel() {

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_risk_isSet = false;
    m_risk_isValid = false;

    m_best_practices_isSet = false;
    m_best_practices_isValid = false;
}

void OAIQuestionMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestionMetric::fromJsonObject(QJsonObject json) {

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_risk_isValid = ::OpenAPI::fromJsonValue(m_risk, json[QString("Risk")]);
    m_risk_isSet = !json[QString("Risk")].isNull() && m_risk_isValid;

    m_best_practices_isValid = ::OpenAPI::fromJsonValue(m_best_practices, json[QString("BestPractices")]);
    m_best_practices_isSet = !json[QString("BestPractices")].isNull() && m_best_practices_isValid;
}

QString OAIQuestionMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestionMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_risk.isSet()) {
        obj.insert(QString("Risk"), ::OpenAPI::toJsonValue(m_risk));
    }
    if (m_best_practices.isSet()) {
        obj.insert(QString("BestPractices"), ::OpenAPI::toJsonValue(m_best_practices));
    }
    return obj;
}

QString OAIQuestionMetric::getQuestionId() const {
    return m_question_id;
}
void OAIQuestionMetric::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIQuestionMetric::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIQuestionMetric::is_question_id_Valid() const{
    return m_question_id_isValid;
}

OAIRisk OAIQuestionMetric::getRisk() const {
    return m_risk;
}
void OAIQuestionMetric::setRisk(const OAIRisk &risk) {
    m_risk = risk;
    m_risk_isSet = true;
}

bool OAIQuestionMetric::is_risk_Set() const{
    return m_risk_isSet;
}

bool OAIQuestionMetric::is_risk_Valid() const{
    return m_risk_isValid;
}

QList OAIQuestionMetric::getBestPractices() const {
    return m_best_practices;
}
void OAIQuestionMetric::setBestPractices(const QList &best_practices) {
    m_best_practices = best_practices;
    m_best_practices_isSet = true;
}

bool OAIQuestionMetric::is_best_practices_Set() const{
    return m_best_practices_isSet;
}

bool OAIQuestionMetric::is_best_practices_Valid() const{
    return m_best_practices_isValid;
}

bool OAIQuestionMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_best_practices.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestionMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
