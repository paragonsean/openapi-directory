/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckSummary::OAICheckSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckSummary::OAICheckSummary() {
    this->initializeModel();
}

OAICheckSummary::~OAICheckSummary() {}

void OAICheckSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_lens_arn_isSet = false;
    m_lens_arn_isValid = false;

    m_pillar_id_isSet = false;
    m_pillar_id_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_choice_id_isSet = false;
    m_choice_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_account_summary_isSet = false;
    m_account_summary_isValid = false;
}

void OAICheckSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("Provider")]);
    m_provider_isSet = !json[QString("Provider")].isNull() && m_provider_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_lens_arn, json[QString("LensArn")]);
    m_lens_arn_isSet = !json[QString("LensArn")].isNull() && m_lens_arn_isValid;

    m_pillar_id_isValid = ::OpenAPI::fromJsonValue(m_pillar_id, json[QString("PillarId")]);
    m_pillar_id_isSet = !json[QString("PillarId")].isNull() && m_pillar_id_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_choice_id_isValid = ::OpenAPI::fromJsonValue(m_choice_id, json[QString("ChoiceId")]);
    m_choice_id_isSet = !json[QString("ChoiceId")].isNull() && m_choice_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_account_summary_isValid = ::OpenAPI::fromJsonValue(m_account_summary, json[QString("AccountSummary")]);
    m_account_summary_isSet = !json[QString("AccountSummary")].isNull() && m_account_summary_isValid;
}

QString OAICheckSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_provider.isSet()) {
        obj.insert(QString("Provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_lens_arn_isSet) {
        obj.insert(QString("LensArn"), ::OpenAPI::toJsonValue(m_lens_arn));
    }
    if (m_pillar_id_isSet) {
        obj.insert(QString("PillarId"), ::OpenAPI::toJsonValue(m_pillar_id));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_choice_id_isSet) {
        obj.insert(QString("ChoiceId"), ::OpenAPI::toJsonValue(m_choice_id));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_account_summary.isSet()) {
        obj.insert(QString("AccountSummary"), ::OpenAPI::toJsonValue(m_account_summary));
    }
    return obj;
}

QString OAICheckSummary::getId() const {
    return m_id;
}
void OAICheckSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICheckSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAICheckSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICheckSummary::getName() const {
    return m_name;
}
void OAICheckSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICheckSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAICheckSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAICheckProvider OAICheckSummary::getProvider() const {
    return m_provider;
}
void OAICheckSummary::setProvider(const OAICheckProvider &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICheckSummary::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICheckSummary::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAICheckSummary::getDescription() const {
    return m_description;
}
void OAICheckSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICheckSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAICheckSummary::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAICheckSummary::getUpdatedAt() const {
    return m_updated_at;
}
void OAICheckSummary::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICheckSummary::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICheckSummary::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAICheckSummary::getLensArn() const {
    return m_lens_arn;
}
void OAICheckSummary::setLensArn(const QString &lens_arn) {
    m_lens_arn = lens_arn;
    m_lens_arn_isSet = true;
}

bool OAICheckSummary::is_lens_arn_Set() const{
    return m_lens_arn_isSet;
}

bool OAICheckSummary::is_lens_arn_Valid() const{
    return m_lens_arn_isValid;
}

QString OAICheckSummary::getPillarId() const {
    return m_pillar_id;
}
void OAICheckSummary::setPillarId(const QString &pillar_id) {
    m_pillar_id = pillar_id;
    m_pillar_id_isSet = true;
}

bool OAICheckSummary::is_pillar_id_Set() const{
    return m_pillar_id_isSet;
}

bool OAICheckSummary::is_pillar_id_Valid() const{
    return m_pillar_id_isValid;
}

QString OAICheckSummary::getQuestionId() const {
    return m_question_id;
}
void OAICheckSummary::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAICheckSummary::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAICheckSummary::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAICheckSummary::getChoiceId() const {
    return m_choice_id;
}
void OAICheckSummary::setChoiceId(const QString &choice_id) {
    m_choice_id = choice_id;
    m_choice_id_isSet = true;
}

bool OAICheckSummary::is_choice_id_Set() const{
    return m_choice_id_isSet;
}

bool OAICheckSummary::is_choice_id_Valid() const{
    return m_choice_id_isValid;
}

OAICheckStatus OAICheckSummary::getStatus() const {
    return m_status;
}
void OAICheckSummary::setStatus(const OAICheckStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICheckSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAICheckSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAICheckSummary::getAccountSummary() const {
    return m_account_summary;
}
void OAICheckSummary::setAccountSummary(const QMap &account_summary) {
    m_account_summary = account_summary;
    m_account_summary_isSet = true;
}

bool OAICheckSummary::is_account_summary_Set() const{
    return m_account_summary_isSet;
}

bool OAICheckSummary::is_account_summary_Valid() const{
    return m_account_summary_isValid;
}

bool OAICheckSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_choice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
