/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILensReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILensReview::OAILensReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILensReview::OAILensReview() {
    this->initializeModel();
}

OAILensReview::~OAILensReview() {}

void OAILensReview::initializeModel() {

    m_lens_alias_isSet = false;
    m_lens_alias_isValid = false;

    m_lens_arn_isSet = false;
    m_lens_arn_isValid = false;

    m_lens_version_isSet = false;
    m_lens_version_isValid = false;

    m_lens_name_isSet = false;
    m_lens_name_isValid = false;

    m_lens_status_isSet = false;
    m_lens_status_isValid = false;

    m_pillar_review_summaries_isSet = false;
    m_pillar_review_summaries_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_risk_counts_isSet = false;
    m_risk_counts_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_profiles_isSet = false;
    m_profiles_isValid = false;

    m_prioritized_risk_counts_isSet = false;
    m_prioritized_risk_counts_isValid = false;
}

void OAILensReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILensReview::fromJsonObject(QJsonObject json) {

    m_lens_alias_isValid = ::OpenAPI::fromJsonValue(m_lens_alias, json[QString("LensAlias")]);
    m_lens_alias_isSet = !json[QString("LensAlias")].isNull() && m_lens_alias_isValid;

    m_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_lens_arn, json[QString("LensArn")]);
    m_lens_arn_isSet = !json[QString("LensArn")].isNull() && m_lens_arn_isValid;

    m_lens_version_isValid = ::OpenAPI::fromJsonValue(m_lens_version, json[QString("LensVersion")]);
    m_lens_version_isSet = !json[QString("LensVersion")].isNull() && m_lens_version_isValid;

    m_lens_name_isValid = ::OpenAPI::fromJsonValue(m_lens_name, json[QString("LensName")]);
    m_lens_name_isSet = !json[QString("LensName")].isNull() && m_lens_name_isValid;

    m_lens_status_isValid = ::OpenAPI::fromJsonValue(m_lens_status, json[QString("LensStatus")]);
    m_lens_status_isSet = !json[QString("LensStatus")].isNull() && m_lens_status_isValid;

    m_pillar_review_summaries_isValid = ::OpenAPI::fromJsonValue(m_pillar_review_summaries, json[QString("PillarReviewSummaries")]);
    m_pillar_review_summaries_isSet = !json[QString("PillarReviewSummaries")].isNull() && m_pillar_review_summaries_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_risk_counts, json[QString("RiskCounts")]);
    m_risk_counts_isSet = !json[QString("RiskCounts")].isNull() && m_risk_counts_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_profiles_isValid = ::OpenAPI::fromJsonValue(m_profiles, json[QString("Profiles")]);
    m_profiles_isSet = !json[QString("Profiles")].isNull() && m_profiles_isValid;

    m_prioritized_risk_counts_isValid = ::OpenAPI::fromJsonValue(m_prioritized_risk_counts, json[QString("PrioritizedRiskCounts")]);
    m_prioritized_risk_counts_isSet = !json[QString("PrioritizedRiskCounts")].isNull() && m_prioritized_risk_counts_isValid;
}

QString OAILensReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILensReview::asJsonObject() const {
    QJsonObject obj;
    if (m_lens_alias_isSet) {
        obj.insert(QString("LensAlias"), ::OpenAPI::toJsonValue(m_lens_alias));
    }
    if (m_lens_arn_isSet) {
        obj.insert(QString("LensArn"), ::OpenAPI::toJsonValue(m_lens_arn));
    }
    if (m_lens_version_isSet) {
        obj.insert(QString("LensVersion"), ::OpenAPI::toJsonValue(m_lens_version));
    }
    if (m_lens_name_isSet) {
        obj.insert(QString("LensName"), ::OpenAPI::toJsonValue(m_lens_name));
    }
    if (m_lens_status.isSet()) {
        obj.insert(QString("LensStatus"), ::OpenAPI::toJsonValue(m_lens_status));
    }
    if (m_pillar_review_summaries.size() > 0) {
        obj.insert(QString("PillarReviewSummaries"), ::OpenAPI::toJsonValue(m_pillar_review_summaries));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_risk_counts.size() > 0) {
        obj.insert(QString("RiskCounts"), ::OpenAPI::toJsonValue(m_risk_counts));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_profiles.isSet()) {
        obj.insert(QString("Profiles"), ::OpenAPI::toJsonValue(m_profiles));
    }
    if (m_prioritized_risk_counts.size() > 0) {
        obj.insert(QString("PrioritizedRiskCounts"), ::OpenAPI::toJsonValue(m_prioritized_risk_counts));
    }
    return obj;
}

QString OAILensReview::getLensAlias() const {
    return m_lens_alias;
}
void OAILensReview::setLensAlias(const QString &lens_alias) {
    m_lens_alias = lens_alias;
    m_lens_alias_isSet = true;
}

bool OAILensReview::is_lens_alias_Set() const{
    return m_lens_alias_isSet;
}

bool OAILensReview::is_lens_alias_Valid() const{
    return m_lens_alias_isValid;
}

QString OAILensReview::getLensArn() const {
    return m_lens_arn;
}
void OAILensReview::setLensArn(const QString &lens_arn) {
    m_lens_arn = lens_arn;
    m_lens_arn_isSet = true;
}

bool OAILensReview::is_lens_arn_Set() const{
    return m_lens_arn_isSet;
}

bool OAILensReview::is_lens_arn_Valid() const{
    return m_lens_arn_isValid;
}

QString OAILensReview::getLensVersion() const {
    return m_lens_version;
}
void OAILensReview::setLensVersion(const QString &lens_version) {
    m_lens_version = lens_version;
    m_lens_version_isSet = true;
}

bool OAILensReview::is_lens_version_Set() const{
    return m_lens_version_isSet;
}

bool OAILensReview::is_lens_version_Valid() const{
    return m_lens_version_isValid;
}

QString OAILensReview::getLensName() const {
    return m_lens_name;
}
void OAILensReview::setLensName(const QString &lens_name) {
    m_lens_name = lens_name;
    m_lens_name_isSet = true;
}

bool OAILensReview::is_lens_name_Set() const{
    return m_lens_name_isSet;
}

bool OAILensReview::is_lens_name_Valid() const{
    return m_lens_name_isValid;
}

OAILensStatus OAILensReview::getLensStatus() const {
    return m_lens_status;
}
void OAILensReview::setLensStatus(const OAILensStatus &lens_status) {
    m_lens_status = lens_status;
    m_lens_status_isSet = true;
}

bool OAILensReview::is_lens_status_Set() const{
    return m_lens_status_isSet;
}

bool OAILensReview::is_lens_status_Valid() const{
    return m_lens_status_isValid;
}

QList<OAIPillarReviewSummary> OAILensReview::getPillarReviewSummaries() const {
    return m_pillar_review_summaries;
}
void OAILensReview::setPillarReviewSummaries(const QList<OAIPillarReviewSummary> &pillar_review_summaries) {
    m_pillar_review_summaries = pillar_review_summaries;
    m_pillar_review_summaries_isSet = true;
}

bool OAILensReview::is_pillar_review_summaries_Set() const{
    return m_pillar_review_summaries_isSet;
}

bool OAILensReview::is_pillar_review_summaries_Valid() const{
    return m_pillar_review_summaries_isValid;
}

QDateTime OAILensReview::getUpdatedAt() const {
    return m_updated_at;
}
void OAILensReview::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAILensReview::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAILensReview::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAILensReview::getNotes() const {
    return m_notes;
}
void OAILensReview::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAILensReview::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAILensReview::is_notes_Valid() const{
    return m_notes_isValid;
}

QMap<QString, qint32> OAILensReview::getRiskCounts() const {
    return m_risk_counts;
}
void OAILensReview::setRiskCounts(const QMap<QString, qint32> &risk_counts) {
    m_risk_counts = risk_counts;
    m_risk_counts_isSet = true;
}

bool OAILensReview::is_risk_counts_Set() const{
    return m_risk_counts_isSet;
}

bool OAILensReview::is_risk_counts_Valid() const{
    return m_risk_counts_isValid;
}

QString OAILensReview::getNextToken() const {
    return m_next_token;
}
void OAILensReview::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAILensReview::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAILensReview::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAILensReview::getProfiles() const {
    return m_profiles;
}
void OAILensReview::setProfiles(const QList &profiles) {
    m_profiles = profiles;
    m_profiles_isSet = true;
}

bool OAILensReview::is_profiles_Set() const{
    return m_profiles_isSet;
}

bool OAILensReview::is_profiles_Valid() const{
    return m_profiles_isValid;
}

QMap<QString, qint32> OAILensReview::getPrioritizedRiskCounts() const {
    return m_prioritized_risk_counts;
}
void OAILensReview::setPrioritizedRiskCounts(const QMap<QString, qint32> &prioritized_risk_counts) {
    m_prioritized_risk_counts = prioritized_risk_counts;
    m_prioritized_risk_counts_isSet = true;
}

bool OAILensReview::is_prioritized_risk_counts_Set() const{
    return m_prioritized_risk_counts_isSet;
}

bool OAILensReview::is_prioritized_risk_counts_Valid() const{
    return m_prioritized_risk_counts_isValid;
}

bool OAILensReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lens_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_review_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prioritized_risk_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILensReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
