/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnswerSummary.h
 *
 * An answer summary of a lens review in a workload.
 */

#ifndef OAIAnswerSummary_H
#define OAIAnswerSummary_H

#include <QJsonObject>

#include "OAIAnswerReason.h"
#include "OAIChoice.h"
#include "OAIQuestionType.h"
#include "OAIRisk.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChoice;

class OAIAnswerSummary : public OAIObject {
public:
    OAIAnswerSummary();
    OAIAnswerSummary(QString json);
    ~OAIAnswerSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getQuestionId() const;
    void setQuestionId(const QString &question_id);
    bool is_question_id_Set() const;
    bool is_question_id_Valid() const;

    QString getPillarId() const;
    void setPillarId(const QString &pillar_id);
    bool is_pillar_id_Set() const;
    bool is_pillar_id_Valid() const;

    QString getQuestionTitle() const;
    void setQuestionTitle(const QString &question_title);
    bool is_question_title_Set() const;
    bool is_question_title_Valid() const;

    QList<OAIChoice> getChoices() const;
    void setChoices(const QList<OAIChoice> &choices);
    bool is_choices_Set() const;
    bool is_choices_Valid() const;

    QList<QString> getSelectedChoices() const;
    void setSelectedChoices(const QList<QString> &selected_choices);
    bool is_selected_choices_Set() const;
    bool is_selected_choices_Valid() const;

    QList getChoiceAnswerSummaries() const;
    void setChoiceAnswerSummaries(const QList &choice_answer_summaries);
    bool is_choice_answer_summaries_Set() const;
    bool is_choice_answer_summaries_Valid() const;

    bool isIsApplicable() const;
    void setIsApplicable(const bool &is_applicable);
    bool is_is_applicable_Set() const;
    bool is_is_applicable_Valid() const;

    OAIRisk getRisk() const;
    void setRisk(const OAIRisk &risk);
    bool is_risk_Set() const;
    bool is_risk_Valid() const;

    OAIAnswerReason getReason() const;
    void setReason(const OAIAnswerReason &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    OAIQuestionType getQuestionType() const;
    void setQuestionType(const OAIQuestionType &question_type);
    bool is_question_type_Set() const;
    bool is_question_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_question_id;
    bool m_question_id_isSet;
    bool m_question_id_isValid;

    QString m_pillar_id;
    bool m_pillar_id_isSet;
    bool m_pillar_id_isValid;

    QString m_question_title;
    bool m_question_title_isSet;
    bool m_question_title_isValid;

    QList<OAIChoice> m_choices;
    bool m_choices_isSet;
    bool m_choices_isValid;

    QList<QString> m_selected_choices;
    bool m_selected_choices_isSet;
    bool m_selected_choices_isValid;

    QList m_choice_answer_summaries;
    bool m_choice_answer_summaries_isSet;
    bool m_choice_answer_summaries_isValid;

    bool m_is_applicable;
    bool m_is_applicable_isSet;
    bool m_is_applicable_isValid;

    OAIRisk m_risk;
    bool m_risk_isSet;
    bool m_risk_isValid;

    OAIAnswerReason m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    OAIQuestionType m_question_type;
    bool m_question_type_isSet;
    bool m_question_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnswerSummary)

#endif // OAIAnswerSummary_H
