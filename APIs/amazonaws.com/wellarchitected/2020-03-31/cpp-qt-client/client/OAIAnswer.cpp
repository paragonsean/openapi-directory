/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswer::OAIAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswer::OAIAnswer() {
    this->initializeModel();
}

OAIAnswer::~OAIAnswer() {}

void OAIAnswer::initializeModel() {

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_pillar_id_isSet = false;
    m_pillar_id_isValid = false;

    m_question_title_isSet = false;
    m_question_title_isValid = false;

    m_question_description_isSet = false;
    m_question_description_isValid = false;

    m_improvement_plan_url_isSet = false;
    m_improvement_plan_url_isValid = false;

    m_helpful_resource_url_isSet = false;
    m_helpful_resource_url_isValid = false;

    m_helpful_resource_display_text_isSet = false;
    m_helpful_resource_display_text_isValid = false;

    m_choices_isSet = false;
    m_choices_isValid = false;

    m_selected_choices_isSet = false;
    m_selected_choices_isValid = false;

    m_choice_answers_isSet = false;
    m_choice_answers_isValid = false;

    m_is_applicable_isSet = false;
    m_is_applicable_isValid = false;

    m_risk_isSet = false;
    m_risk_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswer::fromJsonObject(QJsonObject json) {

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_pillar_id_isValid = ::OpenAPI::fromJsonValue(m_pillar_id, json[QString("PillarId")]);
    m_pillar_id_isSet = !json[QString("PillarId")].isNull() && m_pillar_id_isValid;

    m_question_title_isValid = ::OpenAPI::fromJsonValue(m_question_title, json[QString("QuestionTitle")]);
    m_question_title_isSet = !json[QString("QuestionTitle")].isNull() && m_question_title_isValid;

    m_question_description_isValid = ::OpenAPI::fromJsonValue(m_question_description, json[QString("QuestionDescription")]);
    m_question_description_isSet = !json[QString("QuestionDescription")].isNull() && m_question_description_isValid;

    m_improvement_plan_url_isValid = ::OpenAPI::fromJsonValue(m_improvement_plan_url, json[QString("ImprovementPlanUrl")]);
    m_improvement_plan_url_isSet = !json[QString("ImprovementPlanUrl")].isNull() && m_improvement_plan_url_isValid;

    m_helpful_resource_url_isValid = ::OpenAPI::fromJsonValue(m_helpful_resource_url, json[QString("HelpfulResourceUrl")]);
    m_helpful_resource_url_isSet = !json[QString("HelpfulResourceUrl")].isNull() && m_helpful_resource_url_isValid;

    m_helpful_resource_display_text_isValid = ::OpenAPI::fromJsonValue(m_helpful_resource_display_text, json[QString("HelpfulResourceDisplayText")]);
    m_helpful_resource_display_text_isSet = !json[QString("HelpfulResourceDisplayText")].isNull() && m_helpful_resource_display_text_isValid;

    m_choices_isValid = ::OpenAPI::fromJsonValue(m_choices, json[QString("Choices")]);
    m_choices_isSet = !json[QString("Choices")].isNull() && m_choices_isValid;

    m_selected_choices_isValid = ::OpenAPI::fromJsonValue(m_selected_choices, json[QString("SelectedChoices")]);
    m_selected_choices_isSet = !json[QString("SelectedChoices")].isNull() && m_selected_choices_isValid;

    m_choice_answers_isValid = ::OpenAPI::fromJsonValue(m_choice_answers, json[QString("ChoiceAnswers")]);
    m_choice_answers_isSet = !json[QString("ChoiceAnswers")].isNull() && m_choice_answers_isValid;

    m_is_applicable_isValid = ::OpenAPI::fromJsonValue(m_is_applicable, json[QString("IsApplicable")]);
    m_is_applicable_isSet = !json[QString("IsApplicable")].isNull() && m_is_applicable_isValid;

    m_risk_isValid = ::OpenAPI::fromJsonValue(m_risk, json[QString("Risk")]);
    m_risk_isSet = !json[QString("Risk")].isNull() && m_risk_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;
}

QString OAIAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_pillar_id_isSet) {
        obj.insert(QString("PillarId"), ::OpenAPI::toJsonValue(m_pillar_id));
    }
    if (m_question_title_isSet) {
        obj.insert(QString("QuestionTitle"), ::OpenAPI::toJsonValue(m_question_title));
    }
    if (m_question_description_isSet) {
        obj.insert(QString("QuestionDescription"), ::OpenAPI::toJsonValue(m_question_description));
    }
    if (m_improvement_plan_url_isSet) {
        obj.insert(QString("ImprovementPlanUrl"), ::OpenAPI::toJsonValue(m_improvement_plan_url));
    }
    if (m_helpful_resource_url_isSet) {
        obj.insert(QString("HelpfulResourceUrl"), ::OpenAPI::toJsonValue(m_helpful_resource_url));
    }
    if (m_helpful_resource_display_text_isSet) {
        obj.insert(QString("HelpfulResourceDisplayText"), ::OpenAPI::toJsonValue(m_helpful_resource_display_text));
    }
    if (m_choices.size() > 0) {
        obj.insert(QString("Choices"), ::OpenAPI::toJsonValue(m_choices));
    }
    if (m_selected_choices.size() > 0) {
        obj.insert(QString("SelectedChoices"), ::OpenAPI::toJsonValue(m_selected_choices));
    }
    if (m_choice_answers.isSet()) {
        obj.insert(QString("ChoiceAnswers"), ::OpenAPI::toJsonValue(m_choice_answers));
    }
    if (m_is_applicable_isSet) {
        obj.insert(QString("IsApplicable"), ::OpenAPI::toJsonValue(m_is_applicable));
    }
    if (m_risk.isSet()) {
        obj.insert(QString("Risk"), ::OpenAPI::toJsonValue(m_risk));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIAnswer::getQuestionId() const {
    return m_question_id;
}
void OAIAnswer::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIAnswer::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIAnswer::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIAnswer::getPillarId() const {
    return m_pillar_id;
}
void OAIAnswer::setPillarId(const QString &pillar_id) {
    m_pillar_id = pillar_id;
    m_pillar_id_isSet = true;
}

bool OAIAnswer::is_pillar_id_Set() const{
    return m_pillar_id_isSet;
}

bool OAIAnswer::is_pillar_id_Valid() const{
    return m_pillar_id_isValid;
}

QString OAIAnswer::getQuestionTitle() const {
    return m_question_title;
}
void OAIAnswer::setQuestionTitle(const QString &question_title) {
    m_question_title = question_title;
    m_question_title_isSet = true;
}

bool OAIAnswer::is_question_title_Set() const{
    return m_question_title_isSet;
}

bool OAIAnswer::is_question_title_Valid() const{
    return m_question_title_isValid;
}

QString OAIAnswer::getQuestionDescription() const {
    return m_question_description;
}
void OAIAnswer::setQuestionDescription(const QString &question_description) {
    m_question_description = question_description;
    m_question_description_isSet = true;
}

bool OAIAnswer::is_question_description_Set() const{
    return m_question_description_isSet;
}

bool OAIAnswer::is_question_description_Valid() const{
    return m_question_description_isValid;
}

QString OAIAnswer::getImprovementPlanUrl() const {
    return m_improvement_plan_url;
}
void OAIAnswer::setImprovementPlanUrl(const QString &improvement_plan_url) {
    m_improvement_plan_url = improvement_plan_url;
    m_improvement_plan_url_isSet = true;
}

bool OAIAnswer::is_improvement_plan_url_Set() const{
    return m_improvement_plan_url_isSet;
}

bool OAIAnswer::is_improvement_plan_url_Valid() const{
    return m_improvement_plan_url_isValid;
}

QString OAIAnswer::getHelpfulResourceUrl() const {
    return m_helpful_resource_url;
}
void OAIAnswer::setHelpfulResourceUrl(const QString &helpful_resource_url) {
    m_helpful_resource_url = helpful_resource_url;
    m_helpful_resource_url_isSet = true;
}

bool OAIAnswer::is_helpful_resource_url_Set() const{
    return m_helpful_resource_url_isSet;
}

bool OAIAnswer::is_helpful_resource_url_Valid() const{
    return m_helpful_resource_url_isValid;
}

QString OAIAnswer::getHelpfulResourceDisplayText() const {
    return m_helpful_resource_display_text;
}
void OAIAnswer::setHelpfulResourceDisplayText(const QString &helpful_resource_display_text) {
    m_helpful_resource_display_text = helpful_resource_display_text;
    m_helpful_resource_display_text_isSet = true;
}

bool OAIAnswer::is_helpful_resource_display_text_Set() const{
    return m_helpful_resource_display_text_isSet;
}

bool OAIAnswer::is_helpful_resource_display_text_Valid() const{
    return m_helpful_resource_display_text_isValid;
}

QList<OAIChoice> OAIAnswer::getChoices() const {
    return m_choices;
}
void OAIAnswer::setChoices(const QList<OAIChoice> &choices) {
    m_choices = choices;
    m_choices_isSet = true;
}

bool OAIAnswer::is_choices_Set() const{
    return m_choices_isSet;
}

bool OAIAnswer::is_choices_Valid() const{
    return m_choices_isValid;
}

QList<QString> OAIAnswer::getSelectedChoices() const {
    return m_selected_choices;
}
void OAIAnswer::setSelectedChoices(const QList<QString> &selected_choices) {
    m_selected_choices = selected_choices;
    m_selected_choices_isSet = true;
}

bool OAIAnswer::is_selected_choices_Set() const{
    return m_selected_choices_isSet;
}

bool OAIAnswer::is_selected_choices_Valid() const{
    return m_selected_choices_isValid;
}

QList OAIAnswer::getChoiceAnswers() const {
    return m_choice_answers;
}
void OAIAnswer::setChoiceAnswers(const QList &choice_answers) {
    m_choice_answers = choice_answers;
    m_choice_answers_isSet = true;
}

bool OAIAnswer::is_choice_answers_Set() const{
    return m_choice_answers_isSet;
}

bool OAIAnswer::is_choice_answers_Valid() const{
    return m_choice_answers_isValid;
}

bool OAIAnswer::isIsApplicable() const {
    return m_is_applicable;
}
void OAIAnswer::setIsApplicable(const bool &is_applicable) {
    m_is_applicable = is_applicable;
    m_is_applicable_isSet = true;
}

bool OAIAnswer::is_is_applicable_Set() const{
    return m_is_applicable_isSet;
}

bool OAIAnswer::is_is_applicable_Valid() const{
    return m_is_applicable_isValid;
}

OAIRisk OAIAnswer::getRisk() const {
    return m_risk;
}
void OAIAnswer::setRisk(const OAIRisk &risk) {
    m_risk = risk;
    m_risk_isSet = true;
}

bool OAIAnswer::is_risk_Set() const{
    return m_risk_isSet;
}

bool OAIAnswer::is_risk_Valid() const{
    return m_risk_isValid;
}

QString OAIAnswer::getNotes() const {
    return m_notes;
}
void OAIAnswer::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIAnswer::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIAnswer::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIAnswerReason OAIAnswer::getReason() const {
    return m_reason;
}
void OAIAnswer::setReason(const OAIAnswerReason &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIAnswer::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIAnswer::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_plan_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_helpful_resource_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_helpful_resource_display_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_choice_answers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
