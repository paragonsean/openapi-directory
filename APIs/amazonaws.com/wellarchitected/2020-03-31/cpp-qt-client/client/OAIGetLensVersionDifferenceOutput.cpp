/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLensVersionDifferenceOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLensVersionDifferenceOutput::OAIGetLensVersionDifferenceOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLensVersionDifferenceOutput::OAIGetLensVersionDifferenceOutput() {
    this->initializeModel();
}

OAIGetLensVersionDifferenceOutput::~OAIGetLensVersionDifferenceOutput() {}

void OAIGetLensVersionDifferenceOutput::initializeModel() {

    m_lens_alias_isSet = false;
    m_lens_alias_isValid = false;

    m_lens_arn_isSet = false;
    m_lens_arn_isValid = false;

    m_base_lens_version_isSet = false;
    m_base_lens_version_isValid = false;

    m_target_lens_version_isSet = false;
    m_target_lens_version_isValid = false;

    m_latest_lens_version_isSet = false;
    m_latest_lens_version_isValid = false;

    m_version_differences_isSet = false;
    m_version_differences_isValid = false;
}

void OAIGetLensVersionDifferenceOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLensVersionDifferenceOutput::fromJsonObject(QJsonObject json) {

    m_lens_alias_isValid = ::OpenAPI::fromJsonValue(m_lens_alias, json[QString("LensAlias")]);
    m_lens_alias_isSet = !json[QString("LensAlias")].isNull() && m_lens_alias_isValid;

    m_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_lens_arn, json[QString("LensArn")]);
    m_lens_arn_isSet = !json[QString("LensArn")].isNull() && m_lens_arn_isValid;

    m_base_lens_version_isValid = ::OpenAPI::fromJsonValue(m_base_lens_version, json[QString("BaseLensVersion")]);
    m_base_lens_version_isSet = !json[QString("BaseLensVersion")].isNull() && m_base_lens_version_isValid;

    m_target_lens_version_isValid = ::OpenAPI::fromJsonValue(m_target_lens_version, json[QString("TargetLensVersion")]);
    m_target_lens_version_isSet = !json[QString("TargetLensVersion")].isNull() && m_target_lens_version_isValid;

    m_latest_lens_version_isValid = ::OpenAPI::fromJsonValue(m_latest_lens_version, json[QString("LatestLensVersion")]);
    m_latest_lens_version_isSet = !json[QString("LatestLensVersion")].isNull() && m_latest_lens_version_isValid;

    m_version_differences_isValid = ::OpenAPI::fromJsonValue(m_version_differences, json[QString("VersionDifferences")]);
    m_version_differences_isSet = !json[QString("VersionDifferences")].isNull() && m_version_differences_isValid;
}

QString OAIGetLensVersionDifferenceOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLensVersionDifferenceOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_lens_alias_isSet) {
        obj.insert(QString("LensAlias"), ::OpenAPI::toJsonValue(m_lens_alias));
    }
    if (m_lens_arn_isSet) {
        obj.insert(QString("LensArn"), ::OpenAPI::toJsonValue(m_lens_arn));
    }
    if (m_base_lens_version_isSet) {
        obj.insert(QString("BaseLensVersion"), ::OpenAPI::toJsonValue(m_base_lens_version));
    }
    if (m_target_lens_version_isSet) {
        obj.insert(QString("TargetLensVersion"), ::OpenAPI::toJsonValue(m_target_lens_version));
    }
    if (m_latest_lens_version_isSet) {
        obj.insert(QString("LatestLensVersion"), ::OpenAPI::toJsonValue(m_latest_lens_version));
    }
    if (m_version_differences.isSet()) {
        obj.insert(QString("VersionDifferences"), ::OpenAPI::toJsonValue(m_version_differences));
    }
    return obj;
}

QString OAIGetLensVersionDifferenceOutput::getLensAlias() const {
    return m_lens_alias;
}
void OAIGetLensVersionDifferenceOutput::setLensAlias(const QString &lens_alias) {
    m_lens_alias = lens_alias;
    m_lens_alias_isSet = true;
}

bool OAIGetLensVersionDifferenceOutput::is_lens_alias_Set() const{
    return m_lens_alias_isSet;
}

bool OAIGetLensVersionDifferenceOutput::is_lens_alias_Valid() const{
    return m_lens_alias_isValid;
}

QString OAIGetLensVersionDifferenceOutput::getLensArn() const {
    return m_lens_arn;
}
void OAIGetLensVersionDifferenceOutput::setLensArn(const QString &lens_arn) {
    m_lens_arn = lens_arn;
    m_lens_arn_isSet = true;
}

bool OAIGetLensVersionDifferenceOutput::is_lens_arn_Set() const{
    return m_lens_arn_isSet;
}

bool OAIGetLensVersionDifferenceOutput::is_lens_arn_Valid() const{
    return m_lens_arn_isValid;
}

QString OAIGetLensVersionDifferenceOutput::getBaseLensVersion() const {
    return m_base_lens_version;
}
void OAIGetLensVersionDifferenceOutput::setBaseLensVersion(const QString &base_lens_version) {
    m_base_lens_version = base_lens_version;
    m_base_lens_version_isSet = true;
}

bool OAIGetLensVersionDifferenceOutput::is_base_lens_version_Set() const{
    return m_base_lens_version_isSet;
}

bool OAIGetLensVersionDifferenceOutput::is_base_lens_version_Valid() const{
    return m_base_lens_version_isValid;
}

QString OAIGetLensVersionDifferenceOutput::getTargetLensVersion() const {
    return m_target_lens_version;
}
void OAIGetLensVersionDifferenceOutput::setTargetLensVersion(const QString &target_lens_version) {
    m_target_lens_version = target_lens_version;
    m_target_lens_version_isSet = true;
}

bool OAIGetLensVersionDifferenceOutput::is_target_lens_version_Set() const{
    return m_target_lens_version_isSet;
}

bool OAIGetLensVersionDifferenceOutput::is_target_lens_version_Valid() const{
    return m_target_lens_version_isValid;
}

QString OAIGetLensVersionDifferenceOutput::getLatestLensVersion() const {
    return m_latest_lens_version;
}
void OAIGetLensVersionDifferenceOutput::setLatestLensVersion(const QString &latest_lens_version) {
    m_latest_lens_version = latest_lens_version;
    m_latest_lens_version_isSet = true;
}

bool OAIGetLensVersionDifferenceOutput::is_latest_lens_version_Set() const{
    return m_latest_lens_version_isSet;
}

bool OAIGetLensVersionDifferenceOutput::is_latest_lens_version_Valid() const{
    return m_latest_lens_version_isValid;
}

OAIVersionDifferences OAIGetLensVersionDifferenceOutput::getVersionDifferences() const {
    return m_version_differences;
}
void OAIGetLensVersionDifferenceOutput::setVersionDifferences(const OAIVersionDifferences &version_differences) {
    m_version_differences = version_differences;
    m_version_differences_isSet = true;
}

bool OAIGetLensVersionDifferenceOutput::is_version_differences_Set() const{
    return m_version_differences_isSet;
}

bool OAIGetLensVersionDifferenceOutput::is_version_differences_Valid() const{
    return m_version_differences_isValid;
}

bool OAIGetLensVersionDifferenceOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lens_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_lens_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_lens_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_lens_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_differences.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLensVersionDifferenceOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
