/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAnswer_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAnswer_request::OAIUpdateAnswer_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAnswer_request::OAIUpdateAnswer_request() {
    this->initializeModel();
}

OAIUpdateAnswer_request::~OAIUpdateAnswer_request() {}

void OAIUpdateAnswer_request::initializeModel() {

    m_selected_choices_isSet = false;
    m_selected_choices_isValid = false;

    m_choice_updates_isSet = false;
    m_choice_updates_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_is_applicable_isSet = false;
    m_is_applicable_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIUpdateAnswer_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAnswer_request::fromJsonObject(QJsonObject json) {

    m_selected_choices_isValid = ::OpenAPI::fromJsonValue(m_selected_choices, json[QString("SelectedChoices")]);
    m_selected_choices_isSet = !json[QString("SelectedChoices")].isNull() && m_selected_choices_isValid;

    m_choice_updates_isValid = ::OpenAPI::fromJsonValue(m_choice_updates, json[QString("ChoiceUpdates")]);
    m_choice_updates_isSet = !json[QString("ChoiceUpdates")].isNull() && m_choice_updates_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("Notes")]);
    m_notes_isSet = !json[QString("Notes")].isNull() && m_notes_isValid;

    m_is_applicable_isValid = ::OpenAPI::fromJsonValue(m_is_applicable, json[QString("IsApplicable")]);
    m_is_applicable_isSet = !json[QString("IsApplicable")].isNull() && m_is_applicable_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("Reason")]);
    m_reason_isSet = !json[QString("Reason")].isNull() && m_reason_isValid;
}

QString OAIUpdateAnswer_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAnswer_request::asJsonObject() const {
    QJsonObject obj;
    if (m_selected_choices.size() > 0) {
        obj.insert(QString("SelectedChoices"), ::OpenAPI::toJsonValue(m_selected_choices));
    }
    if (m_choice_updates.size() > 0) {
        obj.insert(QString("ChoiceUpdates"), ::OpenAPI::toJsonValue(m_choice_updates));
    }
    if (m_notes_isSet) {
        obj.insert(QString("Notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_is_applicable_isSet) {
        obj.insert(QString("IsApplicable"), ::OpenAPI::toJsonValue(m_is_applicable));
    }
    if (m_reason_isSet) {
        obj.insert(QString("Reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QList<QString> OAIUpdateAnswer_request::getSelectedChoices() const {
    return m_selected_choices;
}
void OAIUpdateAnswer_request::setSelectedChoices(const QList<QString> &selected_choices) {
    m_selected_choices = selected_choices;
    m_selected_choices_isSet = true;
}

bool OAIUpdateAnswer_request::is_selected_choices_Set() const{
    return m_selected_choices_isSet;
}

bool OAIUpdateAnswer_request::is_selected_choices_Valid() const{
    return m_selected_choices_isValid;
}

QMap<QString, OAIChoiceUpdate> OAIUpdateAnswer_request::getChoiceUpdates() const {
    return m_choice_updates;
}
void OAIUpdateAnswer_request::setChoiceUpdates(const QMap<QString, OAIChoiceUpdate> &choice_updates) {
    m_choice_updates = choice_updates;
    m_choice_updates_isSet = true;
}

bool OAIUpdateAnswer_request::is_choice_updates_Set() const{
    return m_choice_updates_isSet;
}

bool OAIUpdateAnswer_request::is_choice_updates_Valid() const{
    return m_choice_updates_isValid;
}

QString OAIUpdateAnswer_request::getNotes() const {
    return m_notes;
}
void OAIUpdateAnswer_request::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUpdateAnswer_request::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUpdateAnswer_request::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIUpdateAnswer_request::isIsApplicable() const {
    return m_is_applicable;
}
void OAIUpdateAnswer_request::setIsApplicable(const bool &is_applicable) {
    m_is_applicable = is_applicable;
    m_is_applicable_isSet = true;
}

bool OAIUpdateAnswer_request::is_is_applicable_Set() const{
    return m_is_applicable_isSet;
}

bool OAIUpdateAnswer_request::is_is_applicable_Valid() const{
    return m_is_applicable_isValid;
}

QString OAIUpdateAnswer_request::getReason() const {
    return m_reason;
}
void OAIUpdateAnswer_request::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIUpdateAnswer_request::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIUpdateAnswer_request::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIUpdateAnswer_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selected_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_choice_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_applicable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAnswer_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
