/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateWorkload_request.h
 *
 * 
 */

#ifndef OAICreateWorkload_request_H
#define OAICreateWorkload_request_H

#include <QJsonObject>

#include "OAICreateWorkload_request_DiscoveryConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateWorkload_request_DiscoveryConfig;

class OAICreateWorkload_request : public OAIObject {
public:
    OAICreateWorkload_request();
    OAICreateWorkload_request(QString json);
    ~OAICreateWorkload_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getWorkloadName() const;
    void setWorkloadName(const QString &workload_name);
    bool is_workload_name_Set() const;
    bool is_workload_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEnvironment() const;
    void setEnvironment(const QString &environment);
    bool is_environment_Set() const;
    bool is_environment_Valid() const;

    QList<QString> getAccountIds() const;
    void setAccountIds(const QList<QString> &account_ids);
    bool is_account_ids_Set() const;
    bool is_account_ids_Valid() const;

    QList<QString> getAwsRegions() const;
    void setAwsRegions(const QList<QString> &aws_regions);
    bool is_aws_regions_Set() const;
    bool is_aws_regions_Valid() const;

    QList<QString> getNonAwsRegions() const;
    void setNonAwsRegions(const QList<QString> &non_aws_regions);
    bool is_non_aws_regions_Set() const;
    bool is_non_aws_regions_Valid() const;

    QList<QString> getPillarPriorities() const;
    void setPillarPriorities(const QList<QString> &pillar_priorities);
    bool is_pillar_priorities_Set() const;
    bool is_pillar_priorities_Valid() const;

    QString getArchitecturalDesign() const;
    void setArchitecturalDesign(const QString &architectural_design);
    bool is_architectural_design_Set() const;
    bool is_architectural_design_Valid() const;

    QString getReviewOwner() const;
    void setReviewOwner(const QString &review_owner);
    bool is_review_owner_Set() const;
    bool is_review_owner_Valid() const;

    QString getIndustryType() const;
    void setIndustryType(const QString &industry_type);
    bool is_industry_type_Set() const;
    bool is_industry_type_Valid() const;

    QString getIndustry() const;
    void setIndustry(const QString &industry);
    bool is_industry_Set() const;
    bool is_industry_Valid() const;

    QList<QString> getLenses() const;
    void setLenses(const QList<QString> &lenses);
    bool is_lenses_Set() const;
    bool is_lenses_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getClientRequestToken() const;
    void setClientRequestToken(const QString &client_request_token);
    bool is_client_request_token_Set() const;
    bool is_client_request_token_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateWorkload_request_DiscoveryConfig getDiscoveryConfig() const;
    void setDiscoveryConfig(const OAICreateWorkload_request_DiscoveryConfig &discovery_config);
    bool is_discovery_config_Set() const;
    bool is_discovery_config_Valid() const;

    QList<QString> getApplications() const;
    void setApplications(const QList<QString> &applications);
    bool is_applications_Set() const;
    bool is_applications_Valid() const;

    QList<QString> getProfileArns() const;
    void setProfileArns(const QList<QString> &profile_arns);
    bool is_profile_arns_Set() const;
    bool is_profile_arns_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_workload_name;
    bool m_workload_name_isSet;
    bool m_workload_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_environment;
    bool m_environment_isSet;
    bool m_environment_isValid;

    QList<QString> m_account_ids;
    bool m_account_ids_isSet;
    bool m_account_ids_isValid;

    QList<QString> m_aws_regions;
    bool m_aws_regions_isSet;
    bool m_aws_regions_isValid;

    QList<QString> m_non_aws_regions;
    bool m_non_aws_regions_isSet;
    bool m_non_aws_regions_isValid;

    QList<QString> m_pillar_priorities;
    bool m_pillar_priorities_isSet;
    bool m_pillar_priorities_isValid;

    QString m_architectural_design;
    bool m_architectural_design_isSet;
    bool m_architectural_design_isValid;

    QString m_review_owner;
    bool m_review_owner_isSet;
    bool m_review_owner_isValid;

    QString m_industry_type;
    bool m_industry_type_isSet;
    bool m_industry_type_isValid;

    QString m_industry;
    bool m_industry_isSet;
    bool m_industry_isValid;

    QList<QString> m_lenses;
    bool m_lenses_isSet;
    bool m_lenses_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_client_request_token;
    bool m_client_request_token_isSet;
    bool m_client_request_token_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateWorkload_request_DiscoveryConfig m_discovery_config;
    bool m_discovery_config_isSet;
    bool m_discovery_config_isValid;

    QList<QString> m_applications;
    bool m_applications_isSet;
    bool m_applications_isValid;

    QList<QString> m_profile_arns;
    bool m_profile_arns_isSet;
    bool m_profile_arns_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateWorkload_request)

#endif // OAICreateWorkload_request_H
