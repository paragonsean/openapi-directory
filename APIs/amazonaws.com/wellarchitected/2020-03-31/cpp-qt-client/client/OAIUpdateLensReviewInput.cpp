/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLensReviewInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLensReviewInput::OAIUpdateLensReviewInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLensReviewInput::OAIUpdateLensReviewInput() {
    this->initializeModel();
}

OAIUpdateLensReviewInput::~OAIUpdateLensReviewInput() {}

void OAIUpdateLensReviewInput::initializeModel() {

    m_lens_notes_isSet = false;
    m_lens_notes_isValid = false;

    m_pillar_notes_isSet = false;
    m_pillar_notes_isValid = false;
}

void OAIUpdateLensReviewInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLensReviewInput::fromJsonObject(QJsonObject json) {

    m_lens_notes_isValid = ::OpenAPI::fromJsonValue(m_lens_notes, json[QString("LensNotes")]);
    m_lens_notes_isSet = !json[QString("LensNotes")].isNull() && m_lens_notes_isValid;

    m_pillar_notes_isValid = ::OpenAPI::fromJsonValue(m_pillar_notes, json[QString("PillarNotes")]);
    m_pillar_notes_isSet = !json[QString("PillarNotes")].isNull() && m_pillar_notes_isValid;
}

QString OAIUpdateLensReviewInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLensReviewInput::asJsonObject() const {
    QJsonObject obj;
    if (m_lens_notes_isSet) {
        obj.insert(QString("LensNotes"), ::OpenAPI::toJsonValue(m_lens_notes));
    }
    if (m_pillar_notes.size() > 0) {
        obj.insert(QString("PillarNotes"), ::OpenAPI::toJsonValue(m_pillar_notes));
    }
    return obj;
}

QString OAIUpdateLensReviewInput::getLensNotes() const {
    return m_lens_notes;
}
void OAIUpdateLensReviewInput::setLensNotes(const QString &lens_notes) {
    m_lens_notes = lens_notes;
    m_lens_notes_isSet = true;
}

bool OAIUpdateLensReviewInput::is_lens_notes_Set() const{
    return m_lens_notes_isSet;
}

bool OAIUpdateLensReviewInput::is_lens_notes_Valid() const{
    return m_lens_notes_isValid;
}

QMap<QString, QString> OAIUpdateLensReviewInput::getPillarNotes() const {
    return m_pillar_notes;
}
void OAIUpdateLensReviewInput::setPillarNotes(const QMap<QString, QString> &pillar_notes) {
    m_pillar_notes = pillar_notes;
    m_pillar_notes_isSet = true;
}

bool OAIUpdateLensReviewInput::is_pillar_notes_Set() const{
    return m_pillar_notes_isSet;
}

bool OAIUpdateLensReviewInput::is_pillar_notes_Valid() const{
    return m_pillar_notes_isValid;
}

bool OAIUpdateLensReviewInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lens_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLensReviewInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
