/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCheckDetailsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCheckDetailsInput::OAIListCheckDetailsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCheckDetailsInput::OAIListCheckDetailsInput() {
    this->initializeModel();
}

OAIListCheckDetailsInput::~OAIListCheckDetailsInput() {}

void OAIListCheckDetailsInput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_lens_arn_isSet = false;
    m_lens_arn_isValid = false;

    m_pillar_id_isSet = false;
    m_pillar_id_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_choice_id_isSet = false;
    m_choice_id_isValid = false;
}

void OAIListCheckDetailsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCheckDetailsInput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_lens_arn, json[QString("LensArn")]);
    m_lens_arn_isSet = !json[QString("LensArn")].isNull() && m_lens_arn_isValid;

    m_pillar_id_isValid = ::OpenAPI::fromJsonValue(m_pillar_id, json[QString("PillarId")]);
    m_pillar_id_isSet = !json[QString("PillarId")].isNull() && m_pillar_id_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("QuestionId")]);
    m_question_id_isSet = !json[QString("QuestionId")].isNull() && m_question_id_isValid;

    m_choice_id_isValid = ::OpenAPI::fromJsonValue(m_choice_id, json[QString("ChoiceId")]);
    m_choice_id_isSet = !json[QString("ChoiceId")].isNull() && m_choice_id_isValid;
}

QString OAIListCheckDetailsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCheckDetailsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_lens_arn_isSet) {
        obj.insert(QString("LensArn"), ::OpenAPI::toJsonValue(m_lens_arn));
    }
    if (m_pillar_id_isSet) {
        obj.insert(QString("PillarId"), ::OpenAPI::toJsonValue(m_pillar_id));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("QuestionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_choice_id_isSet) {
        obj.insert(QString("ChoiceId"), ::OpenAPI::toJsonValue(m_choice_id));
    }
    return obj;
}

QString OAIListCheckDetailsInput::getNextToken() const {
    return m_next_token;
}
void OAIListCheckDetailsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCheckDetailsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCheckDetailsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListCheckDetailsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListCheckDetailsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListCheckDetailsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListCheckDetailsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListCheckDetailsInput::getLensArn() const {
    return m_lens_arn;
}
void OAIListCheckDetailsInput::setLensArn(const QString &lens_arn) {
    m_lens_arn = lens_arn;
    m_lens_arn_isSet = true;
}

bool OAIListCheckDetailsInput::is_lens_arn_Set() const{
    return m_lens_arn_isSet;
}

bool OAIListCheckDetailsInput::is_lens_arn_Valid() const{
    return m_lens_arn_isValid;
}

QString OAIListCheckDetailsInput::getPillarId() const {
    return m_pillar_id;
}
void OAIListCheckDetailsInput::setPillarId(const QString &pillar_id) {
    m_pillar_id = pillar_id;
    m_pillar_id_isSet = true;
}

bool OAIListCheckDetailsInput::is_pillar_id_Set() const{
    return m_pillar_id_isSet;
}

bool OAIListCheckDetailsInput::is_pillar_id_Valid() const{
    return m_pillar_id_isValid;
}

QString OAIListCheckDetailsInput::getQuestionId() const {
    return m_question_id;
}
void OAIListCheckDetailsInput::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIListCheckDetailsInput::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIListCheckDetailsInput::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIListCheckDetailsInput::getChoiceId() const {
    return m_choice_id;
}
void OAIListCheckDetailsInput::setChoiceId(const QString &choice_id) {
    m_choice_id = choice_id;
    m_choice_id_isSet = true;
}

bool OAIListCheckDetailsInput::is_choice_id_Set() const{
    return m_choice_id_isSet;
}

bool OAIListCheckDetailsInput::is_choice_id_Valid() const{
    return m_choice_id_isValid;
}

bool OAIListCheckDetailsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pillar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_choice_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCheckDetailsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lens_arn_isValid && m_pillar_id_isValid && m_question_id_isValid && m_choice_id_isValid && true;
}

} // namespace OpenAPI
