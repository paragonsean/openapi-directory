/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetLensVersionDifferenceOutput.h
 *
 * 
 */

#ifndef OAIGetLensVersionDifferenceOutput_H
#define OAIGetLensVersionDifferenceOutput_H

#include <QJsonObject>

#include "OAIVersionDifferences.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVersionDifferences;

class OAIGetLensVersionDifferenceOutput : public OAIObject {
public:
    OAIGetLensVersionDifferenceOutput();
    OAIGetLensVersionDifferenceOutput(QString json);
    ~OAIGetLensVersionDifferenceOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLensAlias() const;
    void setLensAlias(const QString &lens_alias);
    bool is_lens_alias_Set() const;
    bool is_lens_alias_Valid() const;

    QString getLensArn() const;
    void setLensArn(const QString &lens_arn);
    bool is_lens_arn_Set() const;
    bool is_lens_arn_Valid() const;

    QString getBaseLensVersion() const;
    void setBaseLensVersion(const QString &base_lens_version);
    bool is_base_lens_version_Set() const;
    bool is_base_lens_version_Valid() const;

    QString getTargetLensVersion() const;
    void setTargetLensVersion(const QString &target_lens_version);
    bool is_target_lens_version_Set() const;
    bool is_target_lens_version_Valid() const;

    QString getLatestLensVersion() const;
    void setLatestLensVersion(const QString &latest_lens_version);
    bool is_latest_lens_version_Set() const;
    bool is_latest_lens_version_Valid() const;

    OAIVersionDifferences getVersionDifferences() const;
    void setVersionDifferences(const OAIVersionDifferences &version_differences);
    bool is_version_differences_Set() const;
    bool is_version_differences_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_lens_alias;
    bool m_lens_alias_isSet;
    bool m_lens_alias_isValid;

    QString m_lens_arn;
    bool m_lens_arn_isSet;
    bool m_lens_arn_isValid;

    QString m_base_lens_version;
    bool m_base_lens_version_isSet;
    bool m_base_lens_version_isValid;

    QString m_target_lens_version;
    bool m_target_lens_version_isSet;
    bool m_target_lens_version_isValid;

    QString m_latest_lens_version;
    bool m_latest_lens_version_isSet;
    bool m_latest_lens_version_isValid;

    OAIVersionDifferences m_version_differences;
    bool m_version_differences_isSet;
    bool m_version_differences_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetLensVersionDifferenceOutput)

#endif // OAIGetLensVersionDifferenceOutput_H
