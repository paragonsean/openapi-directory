/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile::OAIProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile::OAIProfile() {
    this->initializeModel();
}

OAIProfile::~OAIProfile() {}

void OAIProfile::initializeModel() {

    m_profile_arn_isSet = false;
    m_profile_arn_isValid = false;

    m_profile_version_isSet = false;
    m_profile_version_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_profile_description_isSet = false;
    m_profile_description_isValid = false;

    m_profile_questions_isSet = false;
    m_profile_questions_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_share_invitation_id_isSet = false;
    m_share_invitation_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile::fromJsonObject(QJsonObject json) {

    m_profile_arn_isValid = ::OpenAPI::fromJsonValue(m_profile_arn, json[QString("ProfileArn")]);
    m_profile_arn_isSet = !json[QString("ProfileArn")].isNull() && m_profile_arn_isValid;

    m_profile_version_isValid = ::OpenAPI::fromJsonValue(m_profile_version, json[QString("ProfileVersion")]);
    m_profile_version_isSet = !json[QString("ProfileVersion")].isNull() && m_profile_version_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("ProfileName")]);
    m_profile_name_isSet = !json[QString("ProfileName")].isNull() && m_profile_name_isValid;

    m_profile_description_isValid = ::OpenAPI::fromJsonValue(m_profile_description, json[QString("ProfileDescription")]);
    m_profile_description_isSet = !json[QString("ProfileDescription")].isNull() && m_profile_description_isValid;

    m_profile_questions_isValid = ::OpenAPI::fromJsonValue(m_profile_questions, json[QString("ProfileQuestions")]);
    m_profile_questions_isSet = !json[QString("ProfileQuestions")].isNull() && m_profile_questions_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("Owner")]);
    m_owner_isSet = !json[QString("Owner")].isNull() && m_owner_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;

    m_share_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_share_invitation_id, json[QString("ShareInvitationId")]);
    m_share_invitation_id_isSet = !json[QString("ShareInvitationId")].isNull() && m_share_invitation_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_profile_arn_isSet) {
        obj.insert(QString("ProfileArn"), ::OpenAPI::toJsonValue(m_profile_arn));
    }
    if (m_profile_version_isSet) {
        obj.insert(QString("ProfileVersion"), ::OpenAPI::toJsonValue(m_profile_version));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("ProfileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_profile_description_isSet) {
        obj.insert(QString("ProfileDescription"), ::OpenAPI::toJsonValue(m_profile_description));
    }
    if (m_profile_questions.isSet()) {
        obj.insert(QString("ProfileQuestions"), ::OpenAPI::toJsonValue(m_profile_questions));
    }
    if (m_owner_isSet) {
        obj.insert(QString("Owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_share_invitation_id_isSet) {
        obj.insert(QString("ShareInvitationId"), ::OpenAPI::toJsonValue(m_share_invitation_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIProfile::getProfileArn() const {
    return m_profile_arn;
}
void OAIProfile::setProfileArn(const QString &profile_arn) {
    m_profile_arn = profile_arn;
    m_profile_arn_isSet = true;
}

bool OAIProfile::is_profile_arn_Set() const{
    return m_profile_arn_isSet;
}

bool OAIProfile::is_profile_arn_Valid() const{
    return m_profile_arn_isValid;
}

QString OAIProfile::getProfileVersion() const {
    return m_profile_version;
}
void OAIProfile::setProfileVersion(const QString &profile_version) {
    m_profile_version = profile_version;
    m_profile_version_isSet = true;
}

bool OAIProfile::is_profile_version_Set() const{
    return m_profile_version_isSet;
}

bool OAIProfile::is_profile_version_Valid() const{
    return m_profile_version_isValid;
}

QString OAIProfile::getProfileName() const {
    return m_profile_name;
}
void OAIProfile::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAIProfile::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAIProfile::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAIProfile::getProfileDescription() const {
    return m_profile_description;
}
void OAIProfile::setProfileDescription(const QString &profile_description) {
    m_profile_description = profile_description;
    m_profile_description_isSet = true;
}

bool OAIProfile::is_profile_description_Set() const{
    return m_profile_description_isSet;
}

bool OAIProfile::is_profile_description_Valid() const{
    return m_profile_description_isValid;
}

QList OAIProfile::getProfileQuestions() const {
    return m_profile_questions;
}
void OAIProfile::setProfileQuestions(const QList &profile_questions) {
    m_profile_questions = profile_questions;
    m_profile_questions_isSet = true;
}

bool OAIProfile::is_profile_questions_Set() const{
    return m_profile_questions_isSet;
}

bool OAIProfile::is_profile_questions_Valid() const{
    return m_profile_questions_isValid;
}

QString OAIProfile::getOwner() const {
    return m_owner;
}
void OAIProfile::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIProfile::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIProfile::is_owner_Valid() const{
    return m_owner_isValid;
}

QDateTime OAIProfile::getCreatedAt() const {
    return m_created_at;
}
void OAIProfile::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProfile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProfile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIProfile::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProfile::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProfile::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProfile::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIProfile::getShareInvitationId() const {
    return m_share_invitation_id;
}
void OAIProfile::setShareInvitationId(const QString &share_invitation_id) {
    m_share_invitation_id = share_invitation_id;
    m_share_invitation_id_isSet = true;
}

bool OAIProfile::is_share_invitation_id_Set() const{
    return m_share_invitation_id_isSet;
}

bool OAIProfile::is_share_invitation_id_Valid() const{
    return m_share_invitation_id_isValid;
}

QMap OAIProfile::getTags() const {
    return m_tags;
}
void OAIProfile::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProfile::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProfile::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_profile_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_questions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
