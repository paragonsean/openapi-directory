/**
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAnswersOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAnswersOutput::OAIListAnswersOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAnswersOutput::OAIListAnswersOutput() {
    this->initializeModel();
}

OAIListAnswersOutput::~OAIListAnswersOutput() {}

void OAIListAnswersOutput::initializeModel() {

    m_workload_id_isSet = false;
    m_workload_id_isValid = false;

    m_milestone_number_isSet = false;
    m_milestone_number_isValid = false;

    m_lens_alias_isSet = false;
    m_lens_alias_isValid = false;

    m_lens_arn_isSet = false;
    m_lens_arn_isValid = false;

    m_answer_summaries_isSet = false;
    m_answer_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAnswersOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAnswersOutput::fromJsonObject(QJsonObject json) {

    m_workload_id_isValid = ::OpenAPI::fromJsonValue(m_workload_id, json[QString("WorkloadId")]);
    m_workload_id_isSet = !json[QString("WorkloadId")].isNull() && m_workload_id_isValid;

    m_milestone_number_isValid = ::OpenAPI::fromJsonValue(m_milestone_number, json[QString("MilestoneNumber")]);
    m_milestone_number_isSet = !json[QString("MilestoneNumber")].isNull() && m_milestone_number_isValid;

    m_lens_alias_isValid = ::OpenAPI::fromJsonValue(m_lens_alias, json[QString("LensAlias")]);
    m_lens_alias_isSet = !json[QString("LensAlias")].isNull() && m_lens_alias_isValid;

    m_lens_arn_isValid = ::OpenAPI::fromJsonValue(m_lens_arn, json[QString("LensArn")]);
    m_lens_arn_isSet = !json[QString("LensArn")].isNull() && m_lens_arn_isValid;

    m_answer_summaries_isValid = ::OpenAPI::fromJsonValue(m_answer_summaries, json[QString("AnswerSummaries")]);
    m_answer_summaries_isSet = !json[QString("AnswerSummaries")].isNull() && m_answer_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAnswersOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAnswersOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_workload_id_isSet) {
        obj.insert(QString("WorkloadId"), ::OpenAPI::toJsonValue(m_workload_id));
    }
    if (m_milestone_number_isSet) {
        obj.insert(QString("MilestoneNumber"), ::OpenAPI::toJsonValue(m_milestone_number));
    }
    if (m_lens_alias_isSet) {
        obj.insert(QString("LensAlias"), ::OpenAPI::toJsonValue(m_lens_alias));
    }
    if (m_lens_arn_isSet) {
        obj.insert(QString("LensArn"), ::OpenAPI::toJsonValue(m_lens_arn));
    }
    if (m_answer_summaries.size() > 0) {
        obj.insert(QString("AnswerSummaries"), ::OpenAPI::toJsonValue(m_answer_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListAnswersOutput::getWorkloadId() const {
    return m_workload_id;
}
void OAIListAnswersOutput::setWorkloadId(const QString &workload_id) {
    m_workload_id = workload_id;
    m_workload_id_isSet = true;
}

bool OAIListAnswersOutput::is_workload_id_Set() const{
    return m_workload_id_isSet;
}

bool OAIListAnswersOutput::is_workload_id_Valid() const{
    return m_workload_id_isValid;
}

qint32 OAIListAnswersOutput::getMilestoneNumber() const {
    return m_milestone_number;
}
void OAIListAnswersOutput::setMilestoneNumber(const qint32 &milestone_number) {
    m_milestone_number = milestone_number;
    m_milestone_number_isSet = true;
}

bool OAIListAnswersOutput::is_milestone_number_Set() const{
    return m_milestone_number_isSet;
}

bool OAIListAnswersOutput::is_milestone_number_Valid() const{
    return m_milestone_number_isValid;
}

QString OAIListAnswersOutput::getLensAlias() const {
    return m_lens_alias;
}
void OAIListAnswersOutput::setLensAlias(const QString &lens_alias) {
    m_lens_alias = lens_alias;
    m_lens_alias_isSet = true;
}

bool OAIListAnswersOutput::is_lens_alias_Set() const{
    return m_lens_alias_isSet;
}

bool OAIListAnswersOutput::is_lens_alias_Valid() const{
    return m_lens_alias_isValid;
}

QString OAIListAnswersOutput::getLensArn() const {
    return m_lens_arn;
}
void OAIListAnswersOutput::setLensArn(const QString &lens_arn) {
    m_lens_arn = lens_arn;
    m_lens_arn_isSet = true;
}

bool OAIListAnswersOutput::is_lens_arn_Set() const{
    return m_lens_arn_isSet;
}

bool OAIListAnswersOutput::is_lens_arn_Valid() const{
    return m_lens_arn_isValid;
}

QList<OAIAnswerSummary> OAIListAnswersOutput::getAnswerSummaries() const {
    return m_answer_summaries;
}
void OAIListAnswersOutput::setAnswerSummaries(const QList<OAIAnswerSummary> &answer_summaries) {
    m_answer_summaries = answer_summaries;
    m_answer_summaries_isSet = true;
}

bool OAIListAnswersOutput::is_answer_summaries_Set() const{
    return m_answer_summaries_isSet;
}

bool OAIListAnswersOutput::is_answer_summaries_Valid() const{
    return m_answer_summaries_isValid;
}

QString OAIListAnswersOutput::getNextToken() const {
    return m_next_token;
}
void OAIListAnswersOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAnswersOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAnswersOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAnswersOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_workload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_milestone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_summaries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAnswersOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
