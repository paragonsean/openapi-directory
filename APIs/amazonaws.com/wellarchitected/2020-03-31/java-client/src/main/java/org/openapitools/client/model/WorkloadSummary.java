/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.WorkloadImprovementStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A workload summary return object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkloadSummary {
  public static final String SERIALIZED_NAME_WORKLOAD_ID = "WorkloadId";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_ID)
  private String workloadId;

  public static final String SERIALIZED_NAME_WORKLOAD_ARN = "WorkloadArn";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_ARN)
  private String workloadArn;

  public static final String SERIALIZED_NAME_WORKLOAD_NAME = "WorkloadName";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_NAME)
  private String workloadName;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_LENSES = "Lenses";
  @SerializedName(SERIALIZED_NAME_LENSES)
  private List<String> lenses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RISK_COUNTS = "RiskCounts";
  @SerializedName(SERIALIZED_NAME_RISK_COUNTS)
  private Map<String, Integer> riskCounts = new HashMap<>();

  public static final String SERIALIZED_NAME_IMPROVEMENT_STATUS = "ImprovementStatus";
  @SerializedName(SERIALIZED_NAME_IMPROVEMENT_STATUS)
  private WorkloadImprovementStatus improvementStatus;

  public static final String SERIALIZED_NAME_PROFILES = "Profiles";
  @SerializedName(SERIALIZED_NAME_PROFILES)
  private List profiles;

  public static final String SERIALIZED_NAME_PRIORITIZED_RISK_COUNTS = "PrioritizedRiskCounts";
  @SerializedName(SERIALIZED_NAME_PRIORITIZED_RISK_COUNTS)
  private Map<String, Integer> prioritizedRiskCounts = new HashMap<>();

  public WorkloadSummary() {
  }

  public WorkloadSummary workloadId(String workloadId) {
    this.workloadId = workloadId;
    return this;
  }

  /**
   * The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
   * @return workloadId
   */
  @javax.annotation.Nullable
  public String getWorkloadId() {
    return workloadId;
  }

  public void setWorkloadId(String workloadId) {
    this.workloadId = workloadId;
  }


  public WorkloadSummary workloadArn(String workloadArn) {
    this.workloadArn = workloadArn;
    return this;
  }

  /**
   * The ARN for the workload.
   * @return workloadArn
   */
  @javax.annotation.Nullable
  public String getWorkloadArn() {
    return workloadArn;
  }

  public void setWorkloadArn(String workloadArn) {
    this.workloadArn = workloadArn;
  }


  public WorkloadSummary workloadName(String workloadName) {
    this.workloadName = workloadName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the workload.&lt;/p&gt; &lt;p&gt;The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.&lt;/p&gt;
   * @return workloadName
   */
  @javax.annotation.Nullable
  public String getWorkloadName() {
    return workloadName;
  }

  public void setWorkloadName(String workloadName) {
    this.workloadName = workloadName;
  }


  public WorkloadSummary owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * An Amazon Web Services account ID.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public WorkloadSummary updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time recorded.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WorkloadSummary lenses(List<String> lenses) {
    this.lenses = lenses;
    return this;
  }

  public WorkloadSummary addLensesItem(String lensesItem) {
    if (this.lenses == null) {
      this.lenses = new ArrayList<>();
    }
    this.lenses.add(lensesItem);
    return this;
  }

  /**
   * The list of lenses associated with the workload. Each lens is identified by its &lt;a&gt;LensSummary$LensAlias&lt;/a&gt;.
   * @return lenses
   */
  @javax.annotation.Nullable
  public List<String> getLenses() {
    return lenses;
  }

  public void setLenses(List<String> lenses) {
    this.lenses = lenses;
  }


  public WorkloadSummary riskCounts(Map<String, Integer> riskCounts) {
    this.riskCounts = riskCounts;
    return this;
  }

  public WorkloadSummary putRiskCountsItem(String key, Integer riskCountsItem) {
    if (this.riskCounts == null) {
      this.riskCounts = new HashMap<>();
    }
    this.riskCounts.put(key, riskCountsItem);
    return this;
  }

  /**
   * A map from risk names to the count of how many questions have that rating.
   * @return riskCounts
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getRiskCounts() {
    return riskCounts;
  }

  public void setRiskCounts(Map<String, Integer> riskCounts) {
    this.riskCounts = riskCounts;
  }


  public WorkloadSummary improvementStatus(WorkloadImprovementStatus improvementStatus) {
    this.improvementStatus = improvementStatus;
    return this;
  }

  /**
   * Get improvementStatus
   * @return improvementStatus
   */
  @javax.annotation.Nullable
  public WorkloadImprovementStatus getImprovementStatus() {
    return improvementStatus;
  }

  public void setImprovementStatus(WorkloadImprovementStatus improvementStatus) {
    this.improvementStatus = improvementStatus;
  }


  public WorkloadSummary profiles(List profiles) {
    this.profiles = profiles;
    return this;
  }

  /**
   * Get profiles
   * @return profiles
   */
  @javax.annotation.Nullable
  public List getProfiles() {
    return profiles;
  }

  public void setProfiles(List profiles) {
    this.profiles = profiles;
  }


  public WorkloadSummary prioritizedRiskCounts(Map<String, Integer> prioritizedRiskCounts) {
    this.prioritizedRiskCounts = prioritizedRiskCounts;
    return this;
  }

  public WorkloadSummary putPrioritizedRiskCountsItem(String key, Integer prioritizedRiskCountsItem) {
    if (this.prioritizedRiskCounts == null) {
      this.prioritizedRiskCounts = new HashMap<>();
    }
    this.prioritizedRiskCounts.put(key, prioritizedRiskCountsItem);
    return this;
  }

  /**
   * A map from risk names to the count of how many questions have that rating.
   * @return prioritizedRiskCounts
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getPrioritizedRiskCounts() {
    return prioritizedRiskCounts;
  }

  public void setPrioritizedRiskCounts(Map<String, Integer> prioritizedRiskCounts) {
    this.prioritizedRiskCounts = prioritizedRiskCounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkloadSummary workloadSummary = (WorkloadSummary) o;
    return Objects.equals(this.workloadId, workloadSummary.workloadId) &&
        Objects.equals(this.workloadArn, workloadSummary.workloadArn) &&
        Objects.equals(this.workloadName, workloadSummary.workloadName) &&
        Objects.equals(this.owner, workloadSummary.owner) &&
        Objects.equals(this.updatedAt, workloadSummary.updatedAt) &&
        Objects.equals(this.lenses, workloadSummary.lenses) &&
        Objects.equals(this.riskCounts, workloadSummary.riskCounts) &&
        Objects.equals(this.improvementStatus, workloadSummary.improvementStatus) &&
        Objects.equals(this.profiles, workloadSummary.profiles) &&
        Objects.equals(this.prioritizedRiskCounts, workloadSummary.prioritizedRiskCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(workloadId, workloadArn, workloadName, owner, updatedAt, lenses, riskCounts, improvementStatus, profiles, prioritizedRiskCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkloadSummary {\n");
    sb.append("    workloadId: ").append(toIndentedString(workloadId)).append("\n");
    sb.append("    workloadArn: ").append(toIndentedString(workloadArn)).append("\n");
    sb.append("    workloadName: ").append(toIndentedString(workloadName)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lenses: ").append(toIndentedString(lenses)).append("\n");
    sb.append("    riskCounts: ").append(toIndentedString(riskCounts)).append("\n");
    sb.append("    improvementStatus: ").append(toIndentedString(improvementStatus)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    prioritizedRiskCounts: ").append(toIndentedString(prioritizedRiskCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("WorkloadId");
    openapiFields.add("WorkloadArn");
    openapiFields.add("WorkloadName");
    openapiFields.add("Owner");
    openapiFields.add("UpdatedAt");
    openapiFields.add("Lenses");
    openapiFields.add("RiskCounts");
    openapiFields.add("ImprovementStatus");
    openapiFields.add("Profiles");
    openapiFields.add("PrioritizedRiskCounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkloadSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkloadSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkloadSummary is not found in the empty JSON string", WorkloadSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkloadSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkloadSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("WorkloadId") != null && !jsonObj.get("WorkloadId").isJsonNull()) && !jsonObj.get("WorkloadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkloadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkloadId").toString()));
      }
      if ((jsonObj.get("WorkloadArn") != null && !jsonObj.get("WorkloadArn").isJsonNull()) && !jsonObj.get("WorkloadArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkloadArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkloadArn").toString()));
      }
      if ((jsonObj.get("WorkloadName") != null && !jsonObj.get("WorkloadName").isJsonNull()) && !jsonObj.get("WorkloadName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkloadName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkloadName").toString()));
      }
      if ((jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) && !jsonObj.get("Owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Owner").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Lenses") != null && !jsonObj.get("Lenses").isJsonNull() && !jsonObj.get("Lenses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Lenses` to be an array in the JSON string but got `%s`", jsonObj.get("Lenses").toString()));
      }
      // validate the optional field `ImprovementStatus`
      if (jsonObj.get("ImprovementStatus") != null && !jsonObj.get("ImprovementStatus").isJsonNull()) {
        WorkloadImprovementStatus.validateJsonElement(jsonObj.get("ImprovementStatus"));
      }
      // validate the optional field `Profiles`
      if (jsonObj.get("Profiles") != null && !jsonObj.get("Profiles").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Profiles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkloadSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkloadSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkloadSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkloadSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkloadSummary>() {
           @Override
           public void write(JsonWriter out, WorkloadSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkloadSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkloadSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkloadSummary
   * @throws IOException if the JSON string is invalid with respect to WorkloadSummary
   */
  public static WorkloadSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkloadSummary.class);
  }

  /**
   * Convert an instance of WorkloadSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

