/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChoiceHelpfulResource;
import org.openapitools.client.model.ChoiceImprovementPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A choice available to answer question.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Choice {
  public static final String SERIALIZED_NAME_CHOICE_ID = "ChoiceId";
  @SerializedName(SERIALIZED_NAME_CHOICE_ID)
  private String choiceId;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HELPFUL_RESOURCE = "HelpfulResource";
  @SerializedName(SERIALIZED_NAME_HELPFUL_RESOURCE)
  private ChoiceHelpfulResource helpfulResource;

  public static final String SERIALIZED_NAME_IMPROVEMENT_PLAN = "ImprovementPlan";
  @SerializedName(SERIALIZED_NAME_IMPROVEMENT_PLAN)
  private ChoiceImprovementPlan improvementPlan;

  public static final String SERIALIZED_NAME_ADDITIONAL_RESOURCES = "AdditionalResources";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_RESOURCES)
  private List additionalResources;

  public Choice() {
  }

  public Choice choiceId(String choiceId) {
    this.choiceId = choiceId;
    return this;
  }

  /**
   * The ID of a choice.
   * @return choiceId
   */
  @javax.annotation.Nullable
  public String getChoiceId() {
    return choiceId;
  }

  public void setChoiceId(String choiceId) {
    this.choiceId = choiceId;
  }


  public Choice title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of a choice.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Choice description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of a choice.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Choice helpfulResource(ChoiceHelpfulResource helpfulResource) {
    this.helpfulResource = helpfulResource;
    return this;
  }

  /**
   * Get helpfulResource
   * @return helpfulResource
   */
  @javax.annotation.Nullable
  public ChoiceHelpfulResource getHelpfulResource() {
    return helpfulResource;
  }

  public void setHelpfulResource(ChoiceHelpfulResource helpfulResource) {
    this.helpfulResource = helpfulResource;
  }


  public Choice improvementPlan(ChoiceImprovementPlan improvementPlan) {
    this.improvementPlan = improvementPlan;
    return this;
  }

  /**
   * Get improvementPlan
   * @return improvementPlan
   */
  @javax.annotation.Nullable
  public ChoiceImprovementPlan getImprovementPlan() {
    return improvementPlan;
  }

  public void setImprovementPlan(ChoiceImprovementPlan improvementPlan) {
    this.improvementPlan = improvementPlan;
  }


  public Choice additionalResources(List additionalResources) {
    this.additionalResources = additionalResources;
    return this;
  }

  /**
   * Get additionalResources
   * @return additionalResources
   */
  @javax.annotation.Nullable
  public List getAdditionalResources() {
    return additionalResources;
  }

  public void setAdditionalResources(List additionalResources) {
    this.additionalResources = additionalResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Choice choice = (Choice) o;
    return Objects.equals(this.choiceId, choice.choiceId) &&
        Objects.equals(this.title, choice.title) &&
        Objects.equals(this.description, choice.description) &&
        Objects.equals(this.helpfulResource, choice.helpfulResource) &&
        Objects.equals(this.improvementPlan, choice.improvementPlan) &&
        Objects.equals(this.additionalResources, choice.additionalResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(choiceId, title, description, helpfulResource, improvementPlan, additionalResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Choice {\n");
    sb.append("    choiceId: ").append(toIndentedString(choiceId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    helpfulResource: ").append(toIndentedString(helpfulResource)).append("\n");
    sb.append("    improvementPlan: ").append(toIndentedString(improvementPlan)).append("\n");
    sb.append("    additionalResources: ").append(toIndentedString(additionalResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChoiceId");
    openapiFields.add("Title");
    openapiFields.add("Description");
    openapiFields.add("HelpfulResource");
    openapiFields.add("ImprovementPlan");
    openapiFields.add("AdditionalResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Choice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Choice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Choice is not found in the empty JSON string", Choice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Choice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Choice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ChoiceId") != null && !jsonObj.get("ChoiceId").isJsonNull()) && !jsonObj.get("ChoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChoiceId").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `HelpfulResource`
      if (jsonObj.get("HelpfulResource") != null && !jsonObj.get("HelpfulResource").isJsonNull()) {
        ChoiceHelpfulResource.validateJsonElement(jsonObj.get("HelpfulResource"));
      }
      // validate the optional field `ImprovementPlan`
      if (jsonObj.get("ImprovementPlan") != null && !jsonObj.get("ImprovementPlan").isJsonNull()) {
        ChoiceImprovementPlan.validateJsonElement(jsonObj.get("ImprovementPlan"));
      }
      // validate the optional field `AdditionalResources`
      if (jsonObj.get("AdditionalResources") != null && !jsonObj.get("AdditionalResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AdditionalResources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Choice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Choice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Choice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Choice.class));

       return (TypeAdapter<T>) new TypeAdapter<Choice>() {
           @Override
           public void write(JsonWriter out, Choice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Choice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Choice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Choice
   * @throws IOException if the JSON string is invalid with respect to Choice
   */
  public static Choice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Choice.class);
  }

  /**
   * Convert an instance of Choice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

