/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateGlobalSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateGlobalSettingsRequest {
  /**
   * The status of organization sharing settings.
   */
  @JsonAdapter(OrganizationSharingStatusEnum.Adapter.class)
  public enum OrganizationSharingStatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    OrganizationSharingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationSharingStatusEnum fromValue(String value) {
      for (OrganizationSharingStatusEnum b : OrganizationSharingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationSharingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationSharingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationSharingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationSharingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrganizationSharingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_SHARING_STATUS = "OrganizationSharingStatus";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_SHARING_STATUS)
  private OrganizationSharingStatusEnum organizationSharingStatus;

  /**
   * The status of discovery support settings.
   */
  @JsonAdapter(DiscoveryIntegrationStatusEnum.Adapter.class)
  public enum DiscoveryIntegrationStatusEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    DiscoveryIntegrationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscoveryIntegrationStatusEnum fromValue(String value) {
      for (DiscoveryIntegrationStatusEnum b : DiscoveryIntegrationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscoveryIntegrationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscoveryIntegrationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscoveryIntegrationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscoveryIntegrationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiscoveryIntegrationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISCOVERY_INTEGRATION_STATUS = "DiscoveryIntegrationStatus";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_INTEGRATION_STATUS)
  private DiscoveryIntegrationStatusEnum discoveryIntegrationStatus;

  public UpdateGlobalSettingsRequest() {
  }

  public UpdateGlobalSettingsRequest organizationSharingStatus(OrganizationSharingStatusEnum organizationSharingStatus) {
    this.organizationSharingStatus = organizationSharingStatus;
    return this;
  }

  /**
   * The status of organization sharing settings.
   * @return organizationSharingStatus
   */
  @javax.annotation.Nullable
  public OrganizationSharingStatusEnum getOrganizationSharingStatus() {
    return organizationSharingStatus;
  }

  public void setOrganizationSharingStatus(OrganizationSharingStatusEnum organizationSharingStatus) {
    this.organizationSharingStatus = organizationSharingStatus;
  }


  public UpdateGlobalSettingsRequest discoveryIntegrationStatus(DiscoveryIntegrationStatusEnum discoveryIntegrationStatus) {
    this.discoveryIntegrationStatus = discoveryIntegrationStatus;
    return this;
  }

  /**
   * The status of discovery support settings.
   * @return discoveryIntegrationStatus
   */
  @javax.annotation.Nullable
  public DiscoveryIntegrationStatusEnum getDiscoveryIntegrationStatus() {
    return discoveryIntegrationStatus;
  }

  public void setDiscoveryIntegrationStatus(DiscoveryIntegrationStatusEnum discoveryIntegrationStatus) {
    this.discoveryIntegrationStatus = discoveryIntegrationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateGlobalSettingsRequest updateGlobalSettingsRequest = (UpdateGlobalSettingsRequest) o;
    return Objects.equals(this.organizationSharingStatus, updateGlobalSettingsRequest.organizationSharingStatus) &&
        Objects.equals(this.discoveryIntegrationStatus, updateGlobalSettingsRequest.discoveryIntegrationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organizationSharingStatus, discoveryIntegrationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateGlobalSettingsRequest {\n");
    sb.append("    organizationSharingStatus: ").append(toIndentedString(organizationSharingStatus)).append("\n");
    sb.append("    discoveryIntegrationStatus: ").append(toIndentedString(discoveryIntegrationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OrganizationSharingStatus");
    openapiFields.add("DiscoveryIntegrationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateGlobalSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateGlobalSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateGlobalSettingsRequest is not found in the empty JSON string", UpdateGlobalSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateGlobalSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateGlobalSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("OrganizationSharingStatus") != null && !jsonObj.get("OrganizationSharingStatus").isJsonNull()) && !jsonObj.get("OrganizationSharingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OrganizationSharingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OrganizationSharingStatus").toString()));
      }
      // validate the optional field `OrganizationSharingStatus`
      if (jsonObj.get("OrganizationSharingStatus") != null && !jsonObj.get("OrganizationSharingStatus").isJsonNull()) {
        OrganizationSharingStatusEnum.validateJsonElement(jsonObj.get("OrganizationSharingStatus"));
      }
      if ((jsonObj.get("DiscoveryIntegrationStatus") != null && !jsonObj.get("DiscoveryIntegrationStatus").isJsonNull()) && !jsonObj.get("DiscoveryIntegrationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiscoveryIntegrationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DiscoveryIntegrationStatus").toString()));
      }
      // validate the optional field `DiscoveryIntegrationStatus`
      if (jsonObj.get("DiscoveryIntegrationStatus") != null && !jsonObj.get("DiscoveryIntegrationStatus").isJsonNull()) {
        DiscoveryIntegrationStatusEnum.validateJsonElement(jsonObj.get("DiscoveryIntegrationStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateGlobalSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateGlobalSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateGlobalSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateGlobalSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateGlobalSettingsRequest>() {
           @Override
           public void write(JsonWriter out, UpdateGlobalSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateGlobalSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateGlobalSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateGlobalSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateGlobalSettingsRequest
   */
  public static UpdateGlobalSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateGlobalSettingsRequest.class);
  }

  /**
   * Convert an instance of UpdateGlobalSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

