/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A profile.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Profile {
  public static final String SERIALIZED_NAME_PROFILE_ARN = "ProfileArn";
  @SerializedName(SERIALIZED_NAME_PROFILE_ARN)
  private String profileArn;

  public static final String SERIALIZED_NAME_PROFILE_VERSION = "ProfileVersion";
  @SerializedName(SERIALIZED_NAME_PROFILE_VERSION)
  private String profileVersion;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "ProfileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_DESCRIPTION = "ProfileDescription";
  @SerializedName(SERIALIZED_NAME_PROFILE_DESCRIPTION)
  private String profileDescription;

  public static final String SERIALIZED_NAME_PROFILE_QUESTIONS = "ProfileQuestions";
  @SerializedName(SERIALIZED_NAME_PROFILE_QUESTIONS)
  private List profileQuestions;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_SHARE_INVITATION_ID = "ShareInvitationId";
  @SerializedName(SERIALIZED_NAME_SHARE_INVITATION_ID)
  private String shareInvitationId;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public Profile() {
  }

  public Profile profileArn(String profileArn) {
    this.profileArn = profileArn;
    return this;
  }

  /**
   * Get profileArn
   * @return profileArn
   */
  @javax.annotation.Nullable
  public String getProfileArn() {
    return profileArn;
  }

  public void setProfileArn(String profileArn) {
    this.profileArn = profileArn;
  }


  public Profile profileVersion(String profileVersion) {
    this.profileVersion = profileVersion;
    return this;
  }

  /**
   * Get profileVersion
   * @return profileVersion
   */
  @javax.annotation.Nullable
  public String getProfileVersion() {
    return profileVersion;
  }

  public void setProfileVersion(String profileVersion) {
    this.profileVersion = profileVersion;
  }


  public Profile profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * Get profileName
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public Profile profileDescription(String profileDescription) {
    this.profileDescription = profileDescription;
    return this;
  }

  /**
   * Get profileDescription
   * @return profileDescription
   */
  @javax.annotation.Nullable
  public String getProfileDescription() {
    return profileDescription;
  }

  public void setProfileDescription(String profileDescription) {
    this.profileDescription = profileDescription;
  }


  public Profile profileQuestions(List profileQuestions) {
    this.profileQuestions = profileQuestions;
    return this;
  }

  /**
   * Get profileQuestions
   * @return profileQuestions
   */
  @javax.annotation.Nullable
  public List getProfileQuestions() {
    return profileQuestions;
  }

  public void setProfileQuestions(List profileQuestions) {
    this.profileQuestions = profileQuestions;
  }


  public Profile owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * An Amazon Web Services account ID.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public Profile createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time recorded.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Profile updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time recorded.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Profile shareInvitationId(String shareInvitationId) {
    this.shareInvitationId = shareInvitationId;
    return this;
  }

  /**
   * Get shareInvitationId
   * @return shareInvitationId
   */
  @javax.annotation.Nullable
  public String getShareInvitationId() {
    return shareInvitationId;
  }

  public void setShareInvitationId(String shareInvitationId) {
    this.shareInvitationId = shareInvitationId;
  }


  public Profile tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Profile profile = (Profile) o;
    return Objects.equals(this.profileArn, profile.profileArn) &&
        Objects.equals(this.profileVersion, profile.profileVersion) &&
        Objects.equals(this.profileName, profile.profileName) &&
        Objects.equals(this.profileDescription, profile.profileDescription) &&
        Objects.equals(this.profileQuestions, profile.profileQuestions) &&
        Objects.equals(this.owner, profile.owner) &&
        Objects.equals(this.createdAt, profile.createdAt) &&
        Objects.equals(this.updatedAt, profile.updatedAt) &&
        Objects.equals(this.shareInvitationId, profile.shareInvitationId) &&
        Objects.equals(this.tags, profile.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileArn, profileVersion, profileName, profileDescription, profileQuestions, owner, createdAt, updatedAt, shareInvitationId, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Profile {\n");
    sb.append("    profileArn: ").append(toIndentedString(profileArn)).append("\n");
    sb.append("    profileVersion: ").append(toIndentedString(profileVersion)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profileDescription: ").append(toIndentedString(profileDescription)).append("\n");
    sb.append("    profileQuestions: ").append(toIndentedString(profileQuestions)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    shareInvitationId: ").append(toIndentedString(shareInvitationId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProfileArn");
    openapiFields.add("ProfileVersion");
    openapiFields.add("ProfileName");
    openapiFields.add("ProfileDescription");
    openapiFields.add("ProfileQuestions");
    openapiFields.add("Owner");
    openapiFields.add("CreatedAt");
    openapiFields.add("UpdatedAt");
    openapiFields.add("ShareInvitationId");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Profile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Profile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Profile is not found in the empty JSON string", Profile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Profile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Profile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ProfileArn`
      if (jsonObj.get("ProfileArn") != null && !jsonObj.get("ProfileArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProfileArn"));
      }
      // validate the optional field `ProfileVersion`
      if (jsonObj.get("ProfileVersion") != null && !jsonObj.get("ProfileVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProfileVersion"));
      }
      // validate the optional field `ProfileName`
      if (jsonObj.get("ProfileName") != null && !jsonObj.get("ProfileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProfileName"));
      }
      // validate the optional field `ProfileDescription`
      if (jsonObj.get("ProfileDescription") != null && !jsonObj.get("ProfileDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProfileDescription"));
      }
      // validate the optional field `ProfileQuestions`
      if (jsonObj.get("ProfileQuestions") != null && !jsonObj.get("ProfileQuestions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ProfileQuestions"));
      }
      if ((jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) && !jsonObj.get("Owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Owner").toString()));
      }
      // validate the optional field `ShareInvitationId`
      if (jsonObj.get("ShareInvitationId") != null && !jsonObj.get("ShareInvitationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ShareInvitationId"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Profile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Profile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Profile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Profile.class));

       return (TypeAdapter<T>) new TypeAdapter<Profile>() {
           @Override
           public void write(JsonWriter out, Profile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Profile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Profile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Profile
   * @throws IOException if the JSON string is invalid with respect to Profile
   */
  public static Profile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Profile.class);
  }

  /**
   * Convert an instance of Profile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

