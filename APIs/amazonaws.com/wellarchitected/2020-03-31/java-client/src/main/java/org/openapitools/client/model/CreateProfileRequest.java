/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ProfileQuestionUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProfileRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProfileRequest {
  public static final String SERIALIZED_NAME_PROFILE_NAME = "ProfileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROFILE_DESCRIPTION = "ProfileDescription";
  @SerializedName(SERIALIZED_NAME_PROFILE_DESCRIPTION)
  private String profileDescription;

  public static final String SERIALIZED_NAME_PROFILE_QUESTIONS = "ProfileQuestions";
  @SerializedName(SERIALIZED_NAME_PROFILE_QUESTIONS)
  private List<ProfileQuestionUpdate> profileQuestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateProfileRequest() {
  }

  public CreateProfileRequest profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * Name of the profile.
   * @return profileName
   */
  @javax.annotation.Nonnull
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public CreateProfileRequest profileDescription(String profileDescription) {
    this.profileDescription = profileDescription;
    return this;
  }

  /**
   * The profile description.
   * @return profileDescription
   */
  @javax.annotation.Nonnull
  public String getProfileDescription() {
    return profileDescription;
  }

  public void setProfileDescription(String profileDescription) {
    this.profileDescription = profileDescription;
  }


  public CreateProfileRequest profileQuestions(List<ProfileQuestionUpdate> profileQuestions) {
    this.profileQuestions = profileQuestions;
    return this;
  }

  public CreateProfileRequest addProfileQuestionsItem(ProfileQuestionUpdate profileQuestionsItem) {
    if (this.profileQuestions == null) {
      this.profileQuestions = new ArrayList<>();
    }
    this.profileQuestions.add(profileQuestionsItem);
    return this;
  }

  /**
   * The profile questions.
   * @return profileQuestions
   */
  @javax.annotation.Nonnull
  public List<ProfileQuestionUpdate> getProfileQuestions() {
    return profileQuestions;
  }

  public void setProfileQuestions(List<ProfileQuestionUpdate> profileQuestions) {
    this.profileQuestions = profileQuestions;
  }


  public CreateProfileRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * &lt;p&gt;A unique case-sensitive string used to ensure that this request is idempotent (executes only once).&lt;/p&gt; &lt;p&gt;You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.&lt;/p&gt; &lt;/important&gt;
   * @return clientRequestToken
   */
  @javax.annotation.Nonnull
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public CreateProfileRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateProfileRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags assigned to the profile.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProfileRequest createProfileRequest = (CreateProfileRequest) o;
    return Objects.equals(this.profileName, createProfileRequest.profileName) &&
        Objects.equals(this.profileDescription, createProfileRequest.profileDescription) &&
        Objects.equals(this.profileQuestions, createProfileRequest.profileQuestions) &&
        Objects.equals(this.clientRequestToken, createProfileRequest.clientRequestToken) &&
        Objects.equals(this.tags, createProfileRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileName, profileDescription, profileQuestions, clientRequestToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProfileRequest {\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    profileDescription: ").append(toIndentedString(profileDescription)).append("\n");
    sb.append("    profileQuestions: ").append(toIndentedString(profileQuestions)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProfileName");
    openapiFields.add("ProfileDescription");
    openapiFields.add("ProfileQuestions");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ProfileName");
    openapiRequiredFields.add("ProfileDescription");
    openapiRequiredFields.add("ProfileQuestions");
    openapiRequiredFields.add("ClientRequestToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProfileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProfileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProfileRequest is not found in the empty JSON string", CreateProfileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProfileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProfileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProfileRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProfileName").toString()));
      }
      if (!jsonObj.get("ProfileDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProfileDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProfileDescription").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("ProfileQuestions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProfileQuestions` to be an array in the JSON string but got `%s`", jsonObj.get("ProfileQuestions").toString()));
      }

      JsonArray jsonArrayprofileQuestions = jsonObj.getAsJsonArray("ProfileQuestions");
      // validate the required field `ProfileQuestions` (array)
      for (int i = 0; i < jsonArrayprofileQuestions.size(); i++) {
        ProfileQuestionUpdate.validateJsonElement(jsonArrayprofileQuestions.get(i));
      };
      if (!jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProfileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProfileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProfileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProfileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProfileRequest>() {
           @Override
           public void write(JsonWriter out, CreateProfileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProfileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProfileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProfileRequest
   * @throws IOException if the JSON string is invalid with respect to CreateProfileRequest
   */
  public static CreateProfileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProfileRequest.class);
  }

  /**
   * Convert an instance of CreateProfileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

