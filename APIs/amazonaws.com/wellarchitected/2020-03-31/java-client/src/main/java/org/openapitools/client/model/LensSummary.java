/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LensStatus;
import org.openapitools.client.model.LensType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A lens summary of a lens.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LensSummary {
  public static final String SERIALIZED_NAME_LENS_ARN = "LensArn";
  @SerializedName(SERIALIZED_NAME_LENS_ARN)
  private String lensArn;

  public static final String SERIALIZED_NAME_LENS_ALIAS = "LensAlias";
  @SerializedName(SERIALIZED_NAME_LENS_ALIAS)
  private String lensAlias;

  public static final String SERIALIZED_NAME_LENS_NAME = "LensName";
  @SerializedName(SERIALIZED_NAME_LENS_NAME)
  private String lensName;

  public static final String SERIALIZED_NAME_LENS_TYPE = "LensType";
  @SerializedName(SERIALIZED_NAME_LENS_TYPE)
  private LensType lensType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_LENS_VERSION = "LensVersion";
  @SerializedName(SERIALIZED_NAME_LENS_VERSION)
  private String lensVersion;

  public static final String SERIALIZED_NAME_OWNER = "Owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_LENS_STATUS = "LensStatus";
  @SerializedName(SERIALIZED_NAME_LENS_STATUS)
  private LensStatus lensStatus;

  public LensSummary() {
  }

  public LensSummary lensArn(String lensArn) {
    this.lensArn = lensArn;
    return this;
  }

  /**
   * Get lensArn
   * @return lensArn
   */
  @javax.annotation.Nullable
  public String getLensArn() {
    return lensArn;
  }

  public void setLensArn(String lensArn) {
    this.lensArn = lensArn;
  }


  public LensSummary lensAlias(String lensAlias) {
    this.lensAlias = lensAlias;
    return this;
  }

  /**
   * &lt;p&gt;The alias of the lens.&lt;/p&gt; &lt;p&gt;For Amazon Web Services official lenses, this is either the lens alias, such as &lt;code&gt;serverless&lt;/code&gt;, or the lens ARN, such as &lt;code&gt;arn:aws:wellarchitected:us-east-1::lens/serverless&lt;/code&gt;. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.&lt;/p&gt; &lt;p&gt;For custom lenses, this is the lens ARN, such as &lt;code&gt;arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;Each lens is identified by its &lt;a&gt;LensSummary$LensAlias&lt;/a&gt;.&lt;/p&gt;
   * @return lensAlias
   */
  @javax.annotation.Nullable
  public String getLensAlias() {
    return lensAlias;
  }

  public void setLensAlias(String lensAlias) {
    this.lensAlias = lensAlias;
  }


  public LensSummary lensName(String lensName) {
    this.lensName = lensName;
    return this;
  }

  /**
   * The full name of the lens.
   * @return lensName
   */
  @javax.annotation.Nullable
  public String getLensName() {
    return lensName;
  }

  public void setLensName(String lensName) {
    this.lensName = lensName;
  }


  public LensSummary lensType(LensType lensType) {
    this.lensType = lensType;
    return this;
  }

  /**
   * Get lensType
   * @return lensType
   */
  @javax.annotation.Nullable
  public LensType getLensType() {
    return lensType;
  }

  public void setLensType(LensType lensType) {
    this.lensType = lensType;
  }


  public LensSummary description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the lens.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LensSummary createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time recorded.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public LensSummary updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time recorded.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public LensSummary lensVersion(String lensVersion) {
    this.lensVersion = lensVersion;
    return this;
  }

  /**
   * Get lensVersion
   * @return lensVersion
   */
  @javax.annotation.Nullable
  public String getLensVersion() {
    return lensVersion;
  }

  public void setLensVersion(String lensVersion) {
    this.lensVersion = lensVersion;
  }


  public LensSummary owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * An Amazon Web Services account ID.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public LensSummary lensStatus(LensStatus lensStatus) {
    this.lensStatus = lensStatus;
    return this;
  }

  /**
   * Get lensStatus
   * @return lensStatus
   */
  @javax.annotation.Nullable
  public LensStatus getLensStatus() {
    return lensStatus;
  }

  public void setLensStatus(LensStatus lensStatus) {
    this.lensStatus = lensStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LensSummary lensSummary = (LensSummary) o;
    return Objects.equals(this.lensArn, lensSummary.lensArn) &&
        Objects.equals(this.lensAlias, lensSummary.lensAlias) &&
        Objects.equals(this.lensName, lensSummary.lensName) &&
        Objects.equals(this.lensType, lensSummary.lensType) &&
        Objects.equals(this.description, lensSummary.description) &&
        Objects.equals(this.createdAt, lensSummary.createdAt) &&
        Objects.equals(this.updatedAt, lensSummary.updatedAt) &&
        Objects.equals(this.lensVersion, lensSummary.lensVersion) &&
        Objects.equals(this.owner, lensSummary.owner) &&
        Objects.equals(this.lensStatus, lensSummary.lensStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lensArn, lensAlias, lensName, lensType, description, createdAt, updatedAt, lensVersion, owner, lensStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LensSummary {\n");
    sb.append("    lensArn: ").append(toIndentedString(lensArn)).append("\n");
    sb.append("    lensAlias: ").append(toIndentedString(lensAlias)).append("\n");
    sb.append("    lensName: ").append(toIndentedString(lensName)).append("\n");
    sb.append("    lensType: ").append(toIndentedString(lensType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lensVersion: ").append(toIndentedString(lensVersion)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    lensStatus: ").append(toIndentedString(lensStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LensArn");
    openapiFields.add("LensAlias");
    openapiFields.add("LensName");
    openapiFields.add("LensType");
    openapiFields.add("Description");
    openapiFields.add("CreatedAt");
    openapiFields.add("UpdatedAt");
    openapiFields.add("LensVersion");
    openapiFields.add("Owner");
    openapiFields.add("LensStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LensSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LensSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LensSummary is not found in the empty JSON string", LensSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LensSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LensSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LensArn`
      if (jsonObj.get("LensArn") != null && !jsonObj.get("LensArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LensArn"));
      }
      if ((jsonObj.get("LensAlias") != null && !jsonObj.get("LensAlias").isJsonNull()) && !jsonObj.get("LensAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LensAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LensAlias").toString()));
      }
      if ((jsonObj.get("LensName") != null && !jsonObj.get("LensName").isJsonNull()) && !jsonObj.get("LensName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LensName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LensName").toString()));
      }
      // validate the optional field `LensType`
      if (jsonObj.get("LensType") != null && !jsonObj.get("LensType").isJsonNull()) {
        LensType.validateJsonElement(jsonObj.get("LensType"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `LensVersion`
      if (jsonObj.get("LensVersion") != null && !jsonObj.get("LensVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LensVersion"));
      }
      if ((jsonObj.get("Owner") != null && !jsonObj.get("Owner").isJsonNull()) && !jsonObj.get("Owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Owner").toString()));
      }
      // validate the optional field `LensStatus`
      if (jsonObj.get("LensStatus") != null && !jsonObj.get("LensStatus").isJsonNull()) {
        LensStatus.validateJsonElement(jsonObj.get("LensStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LensSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LensSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LensSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LensSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<LensSummary>() {
           @Override
           public void write(JsonWriter out, LensSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LensSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LensSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LensSummary
   * @throws IOException if the JSON string is invalid with respect to LensSummary
   */
  public static LensSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LensSummary.class);
  }

  /**
   * Convert an instance of LensSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

