/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MetricType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A metric that contributes to the consolidated report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:42.757173-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsolidatedReportMetric {
  public static final String SERIALIZED_NAME_METRIC_TYPE = "MetricType";
  @SerializedName(SERIALIZED_NAME_METRIC_TYPE)
  private MetricType metricType;

  public static final String SERIALIZED_NAME_RISK_COUNTS = "RiskCounts";
  @SerializedName(SERIALIZED_NAME_RISK_COUNTS)
  private Map<String, Integer> riskCounts = new HashMap<>();

  public static final String SERIALIZED_NAME_WORKLOAD_ID = "WorkloadId";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_ID)
  private String workloadId;

  public static final String SERIALIZED_NAME_WORKLOAD_NAME = "WorkloadName";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_NAME)
  private String workloadName;

  public static final String SERIALIZED_NAME_WORKLOAD_ARN = "WorkloadArn";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_ARN)
  private String workloadArn;

  public static final String SERIALIZED_NAME_UPDATED_AT = "UpdatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_LENSES = "Lenses";
  @SerializedName(SERIALIZED_NAME_LENSES)
  private List lenses;

  public static final String SERIALIZED_NAME_LENSES_APPLIED_COUNT = "LensesAppliedCount";
  @SerializedName(SERIALIZED_NAME_LENSES_APPLIED_COUNT)
  private Integer lensesAppliedCount;

  public ConsolidatedReportMetric() {
  }

  public ConsolidatedReportMetric metricType(MetricType metricType) {
    this.metricType = metricType;
    return this;
  }

  /**
   * Get metricType
   * @return metricType
   */
  @javax.annotation.Nullable
  public MetricType getMetricType() {
    return metricType;
  }

  public void setMetricType(MetricType metricType) {
    this.metricType = metricType;
  }


  public ConsolidatedReportMetric riskCounts(Map<String, Integer> riskCounts) {
    this.riskCounts = riskCounts;
    return this;
  }

  public ConsolidatedReportMetric putRiskCountsItem(String key, Integer riskCountsItem) {
    if (this.riskCounts == null) {
      this.riskCounts = new HashMap<>();
    }
    this.riskCounts.put(key, riskCountsItem);
    return this;
  }

  /**
   * A map from risk names to the count of how many questions have that rating.
   * @return riskCounts
   */
  @javax.annotation.Nullable
  public Map<String, Integer> getRiskCounts() {
    return riskCounts;
  }

  public void setRiskCounts(Map<String, Integer> riskCounts) {
    this.riskCounts = riskCounts;
  }


  public ConsolidatedReportMetric workloadId(String workloadId) {
    this.workloadId = workloadId;
    return this;
  }

  /**
   * The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.
   * @return workloadId
   */
  @javax.annotation.Nullable
  public String getWorkloadId() {
    return workloadId;
  }

  public void setWorkloadId(String workloadId) {
    this.workloadId = workloadId;
  }


  public ConsolidatedReportMetric workloadName(String workloadName) {
    this.workloadName = workloadName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the workload.&lt;/p&gt; &lt;p&gt;The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.&lt;/p&gt;
   * @return workloadName
   */
  @javax.annotation.Nullable
  public String getWorkloadName() {
    return workloadName;
  }

  public void setWorkloadName(String workloadName) {
    this.workloadName = workloadName;
  }


  public ConsolidatedReportMetric workloadArn(String workloadArn) {
    this.workloadArn = workloadArn;
    return this;
  }

  /**
   * The ARN for the workload.
   * @return workloadArn
   */
  @javax.annotation.Nullable
  public String getWorkloadArn() {
    return workloadArn;
  }

  public void setWorkloadArn(String workloadArn) {
    this.workloadArn = workloadArn;
  }


  public ConsolidatedReportMetric updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time recorded.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ConsolidatedReportMetric lenses(List lenses) {
    this.lenses = lenses;
    return this;
  }

  /**
   * Get lenses
   * @return lenses
   */
  @javax.annotation.Nullable
  public List getLenses() {
    return lenses;
  }

  public void setLenses(List lenses) {
    this.lenses = lenses;
  }


  public ConsolidatedReportMetric lensesAppliedCount(Integer lensesAppliedCount) {
    this.lensesAppliedCount = lensesAppliedCount;
    return this;
  }

  /**
   * Get lensesAppliedCount
   * @return lensesAppliedCount
   */
  @javax.annotation.Nullable
  public Integer getLensesAppliedCount() {
    return lensesAppliedCount;
  }

  public void setLensesAppliedCount(Integer lensesAppliedCount) {
    this.lensesAppliedCount = lensesAppliedCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsolidatedReportMetric consolidatedReportMetric = (ConsolidatedReportMetric) o;
    return Objects.equals(this.metricType, consolidatedReportMetric.metricType) &&
        Objects.equals(this.riskCounts, consolidatedReportMetric.riskCounts) &&
        Objects.equals(this.workloadId, consolidatedReportMetric.workloadId) &&
        Objects.equals(this.workloadName, consolidatedReportMetric.workloadName) &&
        Objects.equals(this.workloadArn, consolidatedReportMetric.workloadArn) &&
        Objects.equals(this.updatedAt, consolidatedReportMetric.updatedAt) &&
        Objects.equals(this.lenses, consolidatedReportMetric.lenses) &&
        Objects.equals(this.lensesAppliedCount, consolidatedReportMetric.lensesAppliedCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metricType, riskCounts, workloadId, workloadName, workloadArn, updatedAt, lenses, lensesAppliedCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsolidatedReportMetric {\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    riskCounts: ").append(toIndentedString(riskCounts)).append("\n");
    sb.append("    workloadId: ").append(toIndentedString(workloadId)).append("\n");
    sb.append("    workloadName: ").append(toIndentedString(workloadName)).append("\n");
    sb.append("    workloadArn: ").append(toIndentedString(workloadArn)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lenses: ").append(toIndentedString(lenses)).append("\n");
    sb.append("    lensesAppliedCount: ").append(toIndentedString(lensesAppliedCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MetricType");
    openapiFields.add("RiskCounts");
    openapiFields.add("WorkloadId");
    openapiFields.add("WorkloadName");
    openapiFields.add("WorkloadArn");
    openapiFields.add("UpdatedAt");
    openapiFields.add("Lenses");
    openapiFields.add("LensesAppliedCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsolidatedReportMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsolidatedReportMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsolidatedReportMetric is not found in the empty JSON string", ConsolidatedReportMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsolidatedReportMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsolidatedReportMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MetricType`
      if (jsonObj.get("MetricType") != null && !jsonObj.get("MetricType").isJsonNull()) {
        MetricType.validateJsonElement(jsonObj.get("MetricType"));
      }
      if ((jsonObj.get("WorkloadId") != null && !jsonObj.get("WorkloadId").isJsonNull()) && !jsonObj.get("WorkloadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkloadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkloadId").toString()));
      }
      if ((jsonObj.get("WorkloadName") != null && !jsonObj.get("WorkloadName").isJsonNull()) && !jsonObj.get("WorkloadName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkloadName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkloadName").toString()));
      }
      if ((jsonObj.get("WorkloadArn") != null && !jsonObj.get("WorkloadArn").isJsonNull()) && !jsonObj.get("WorkloadArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkloadArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkloadArn").toString()));
      }
      // validate the optional field `Lenses`
      if (jsonObj.get("Lenses") != null && !jsonObj.get("Lenses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Lenses"));
      }
      // validate the optional field `LensesAppliedCount`
      if (jsonObj.get("LensesAppliedCount") != null && !jsonObj.get("LensesAppliedCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("LensesAppliedCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsolidatedReportMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsolidatedReportMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsolidatedReportMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsolidatedReportMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsolidatedReportMetric>() {
           @Override
           public void write(JsonWriter out, ConsolidatedReportMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsolidatedReportMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsolidatedReportMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsolidatedReportMetric
   * @throws IOException if the JSON string is invalid with respect to ConsolidatedReportMetric
   */
  public static ConsolidatedReportMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsolidatedReportMetric.class);
  }

  /**
   * Convert an instance of ConsolidatedReportMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

