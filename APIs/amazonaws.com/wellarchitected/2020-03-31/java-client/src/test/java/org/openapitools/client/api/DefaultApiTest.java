/*
 * AWS Well-Architected Tool
 * <fullname>Well-Architected Tool</fullname> <p>This is the <i>Well-Architected Tool API Reference</i>. The WA Tool API provides programmatic access to the <a href=\"http://aws.amazon.com/well-architected-tool\">Well-Architected Tool</a> in the <a href=\"https://console.aws.amazon.com/wellarchitected\">Amazon Web Services Management Console</a>. For information about the Well-Architected Tool, see the <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/userguide/intro.html\">Well-Architected Tool User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2020-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateLensesRequest;
import org.openapitools.client.model.AssociateProfilesRequest;
import org.openapitools.client.model.CreateLensShareOutput;
import org.openapitools.client.model.CreateLensShareRequest;
import org.openapitools.client.model.CreateLensVersionOutput;
import org.openapitools.client.model.CreateLensVersionRequest;
import org.openapitools.client.model.CreateMilestoneOutput;
import org.openapitools.client.model.CreateMilestoneRequest;
import org.openapitools.client.model.CreateProfileOutput;
import org.openapitools.client.model.CreateProfileRequest;
import org.openapitools.client.model.CreateProfileShareOutput;
import org.openapitools.client.model.CreateWorkloadOutput;
import org.openapitools.client.model.CreateWorkloadRequest;
import org.openapitools.client.model.CreateWorkloadShareOutput;
import org.openapitools.client.model.CreateWorkloadShareRequest;
import org.openapitools.client.model.DisassociateProfilesRequest;
import org.openapitools.client.model.ExportLensOutput;
import org.openapitools.client.model.GetAnswerOutput;
import org.openapitools.client.model.GetConsolidatedReportOutput;
import org.openapitools.client.model.GetLensOutput;
import org.openapitools.client.model.GetLensReviewOutput;
import org.openapitools.client.model.GetLensReviewReportOutput;
import org.openapitools.client.model.GetLensVersionDifferenceOutput;
import org.openapitools.client.model.GetMilestoneOutput;
import org.openapitools.client.model.GetProfileOutput;
import org.openapitools.client.model.GetProfileTemplateOutput;
import org.openapitools.client.model.GetWorkloadOutput;
import org.openapitools.client.model.ImportLensOutput;
import org.openapitools.client.model.ImportLensRequest;
import org.openapitools.client.model.ListAnswersOutput;
import org.openapitools.client.model.ListCheckDetailsOutput;
import org.openapitools.client.model.ListCheckDetailsRequest;
import org.openapitools.client.model.ListCheckSummariesOutput;
import org.openapitools.client.model.ListLensReviewImprovementsOutput;
import org.openapitools.client.model.ListLensReviewsOutput;
import org.openapitools.client.model.ListLensSharesOutput;
import org.openapitools.client.model.ListLensesOutput;
import org.openapitools.client.model.ListMilestonesOutput;
import org.openapitools.client.model.ListMilestonesRequest;
import org.openapitools.client.model.ListNotificationsOutput;
import org.openapitools.client.model.ListNotificationsRequest;
import org.openapitools.client.model.ListProfileNotificationsOutput;
import org.openapitools.client.model.ListProfileSharesOutput;
import org.openapitools.client.model.ListProfilesOutput;
import org.openapitools.client.model.ListShareInvitationsOutput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.ListWorkloadSharesOutput;
import org.openapitools.client.model.ListWorkloadsOutput;
import org.openapitools.client.model.ListWorkloadsRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAnswerOutput;
import org.openapitools.client.model.UpdateAnswerRequest;
import org.openapitools.client.model.UpdateGlobalSettingsRequest;
import org.openapitools.client.model.UpdateLensReviewOutput;
import org.openapitools.client.model.UpdateLensReviewRequest;
import org.openapitools.client.model.UpdateProfileOutput;
import org.openapitools.client.model.UpdateProfileRequest;
import org.openapitools.client.model.UpdateShareInvitationOutput;
import org.openapitools.client.model.UpdateShareInvitationRequest;
import org.openapitools.client.model.UpdateWorkloadOutput;
import org.openapitools.client.model.UpdateWorkloadRequest;
import org.openapitools.client.model.UpdateWorkloadShareOutput;
import org.openapitools.client.model.UpdateWorkloadShareRequest;
import org.openapitools.client.model.UpgradeLensReviewRequest;
import org.openapitools.client.model.UpgradeProfileVersionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Associate a lens to a workload.&lt;/p&gt; &lt;p&gt;Up to 10 lenses can be associated with a workload in a single API operation. A maximum of 20 lenses can be associated with a workload.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;By accessing and/or applying custom lenses created by another Amazon Web Services user or account, you acknowledge that custom lenses created by other users and shared with you are Third Party Content as defined in the Amazon Web Services Customer Agreement. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateLensesTest() throws ApiException {
        String workloadId = null;
        AssociateLensesRequest associateLensesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateLenses(workloadId, associateLensesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate a profile with a workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateProfilesTest() throws ApiException {
        String workloadId = null;
        AssociateProfilesRequest associateProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.associateProfiles(workloadId, associateProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a lens share.&lt;/p&gt; &lt;p&gt;The owner of a lens can share it with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be shared.&lt;/p&gt; &lt;p&gt; Shared access to a lens is not removed until the lens invitation is deleted.&lt;/p&gt; &lt;p&gt;If you share a lens with an organization or OU, all accounts in the organization or OU are granted access to the lens.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-sharing.html\&quot;&gt;Sharing a custom lens&lt;/a&gt; in the &lt;i&gt;Well-Architected Tool User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLensShareTest() throws ApiException {
        String lensAlias = null;
        CreateLensShareRequest createLensShareRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLensShareOutput response = api.createLensShare(lensAlias, createLensShareRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a new lens version.&lt;/p&gt; &lt;p&gt;A lens can have up to 100 versions.&lt;/p&gt; &lt;p&gt;Use this operation to publish a new lens version after you have imported a lens. The &lt;code&gt;LensAlias&lt;/code&gt; is used to identify the lens to be published. The owner of a lens can share the lens with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Only the owner of a lens can delete it. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLensVersionTest() throws ApiException {
        String lensAlias = null;
        CreateLensVersionRequest createLensVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLensVersionOutput response = api.createLensVersion(lensAlias, createLensVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a milestone for an existing workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMilestoneTest() throws ApiException {
        String workloadId = null;
        CreateMilestoneRequest createMilestoneRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMilestoneOutput response = api.createMilestone(workloadId, createMilestoneRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        CreateProfileRequest createProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProfileOutput response = api.createProfile(createProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create a profile share.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProfileShareTest() throws ApiException {
        String profileArn = null;
        CreateLensShareRequest createLensShareRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProfileShareOutput response = api.createProfileShare(profileArn, createLensShareRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a new workload.&lt;/p&gt; &lt;p&gt;The owner of a workload can share the workload with other Amazon Web Services accounts, users, an organization, and organizational units (OUs) in the same Amazon Web Services Region. Only the owner of a workload can delete it.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wellarchitected/latest/userguide/define-workload.html\&quot;&gt;Defining a Workload&lt;/a&gt; in the &lt;i&gt;Well-Architected Tool User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Either &lt;code&gt;AwsRegions&lt;/code&gt;, &lt;code&gt;NonAwsRegions&lt;/code&gt;, or both must be specified when creating a workload.&lt;/p&gt; &lt;p&gt;You also must specify &lt;code&gt;ReviewOwner&lt;/code&gt;, even though the parameter is listed as not being required in the following section. &lt;/p&gt; &lt;/important&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkloadTest() throws ApiException {
        CreateWorkloadRequest createWorkloadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkloadOutput response = api.createWorkload(createWorkloadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Create a workload share.&lt;/p&gt; &lt;p&gt;The owner of a workload can share it with other Amazon Web Services accounts and users in the same Amazon Web Services Region. Shared access to a workload is not removed until the workload invitation is deleted.&lt;/p&gt; &lt;p&gt;If you share a workload with an organization or OU, all accounts in the organization or OU are granted access to the workload.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wellarchitected/latest/userguide/workloads-sharing.html\&quot;&gt;Sharing a workload&lt;/a&gt; in the &lt;i&gt;Well-Architected Tool User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkloadShareTest() throws ApiException {
        String workloadId = null;
        CreateWorkloadShareRequest createWorkloadShareRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateWorkloadShareOutput response = api.createWorkloadShare(workloadId, createWorkloadShareRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete an existing lens.&lt;/p&gt; &lt;p&gt;Only the owner of a lens can delete it. After the lens is deleted, Amazon Web Services accounts and users that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads. &lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLensTest() throws ApiException {
        String lensAlias = null;
        String clientRequestToken = null;
        String lensStatus = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteLens(lensAlias, clientRequestToken, lensStatus, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete a lens share.&lt;/p&gt; &lt;p&gt;After the lens share is deleted, Amazon Web Services accounts, users, organizations, and organizational units (OUs) that you shared the lens with can continue to use it, but they will no longer be able to apply it to new workloads.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;By sharing your custom lenses with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your custom lenses available to those other accounts. Those other accounts may continue to access and use your shared custom lenses even if you delete the custom lenses from your own Amazon Web Services account or terminate your Amazon Web Services account.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLensShareTest() throws ApiException {
        String shareId = null;
        String lensAlias = null;
        String clientRequestToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteLensShare(shareId, lensAlias, clientRequestToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Delete a profile.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;By sharing your profile with other Amazon Web Services accounts, you acknowledge that Amazon Web Services will make your profile available to those other accounts. Those other accounts may continue to access and use your shared profile even if you delete the profile from your own Amazon Web Services account or terminate your Amazon Web Services account.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileTest() throws ApiException {
        String profileArn = null;
        String clientRequestToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteProfile(profileArn, clientRequestToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a profile share.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileShareTest() throws ApiException {
        String shareId = null;
        String profileArn = null;
        String clientRequestToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteProfileShare(shareId, profileArn, clientRequestToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete an existing workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkloadTest() throws ApiException {
        String workloadId = null;
        String clientRequestToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteWorkload(workloadId, clientRequestToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete a workload share.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkloadShareTest() throws ApiException {
        String shareId = null;
        String workloadId = null;
        String clientRequestToken = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteWorkloadShare(shareId, workloadId, clientRequestToken, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociate a lens from a workload.&lt;/p&gt; &lt;p&gt;Up to 10 lenses can be disassociated from a workload in a single API operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon Web Services Well-Architected Framework lens (&lt;code&gt;wellarchitected&lt;/code&gt;) cannot be removed from a workload.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateLensesTest() throws ApiException {
        String workloadId = null;
        AssociateLensesRequest associateLensesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateLenses(workloadId, associateLensesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociate a profile from a workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateProfilesTest() throws ApiException {
        String workloadId = null;
        DisassociateProfilesRequest disassociateProfilesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.disassociateProfiles(workloadId, disassociateProfilesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Export an existing lens.&lt;/p&gt; &lt;p&gt;Only the owner of a lens can export it. Lenses provided by Amazon Web Services (Amazon Web Services Official Content) cannot be exported.&lt;/p&gt; &lt;p&gt;Lenses are defined in JSON. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html\&quot;&gt;JSON format specification&lt;/a&gt; in the &lt;i&gt;Well-Architected Tool User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportLensTest() throws ApiException {
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String lensVersion = null;
        ExportLensOutput response = api.exportLens(lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lensVersion);
        // TODO: test validations
    }

    /**
     * Get the answer to a specific question in a workload review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnswerTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        String questionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer milestoneNumber = null;
        GetAnswerOutput response = api.getAnswer(workloadId, lensAlias, questionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, milestoneNumber);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Get a consolidated report of your workloads.&lt;/p&gt; &lt;p&gt;You can optionally choose to include workloads that have been shared with you.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConsolidatedReportTest() throws ApiException {
        String format = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean includeSharedResources = null;
        String nextToken = null;
        Integer maxResults = null;
        GetConsolidatedReportOutput response = api.getConsolidatedReport(format, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, includeSharedResources, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Get an existing lens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLensTest() throws ApiException {
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String lensVersion = null;
        GetLensOutput response = api.getLens(lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, lensVersion);
        // TODO: test validations
    }

    /**
     * Get lens review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLensReviewTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer milestoneNumber = null;
        GetLensReviewOutput response = api.getLensReview(workloadId, lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, milestoneNumber);
        // TODO: test validations
    }

    /**
     * Get lens review report.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLensReviewReportTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer milestoneNumber = null;
        GetLensReviewReportOutput response = api.getLensReviewReport(workloadId, lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, milestoneNumber);
        // TODO: test validations
    }

    /**
     * Get lens version differences.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLensVersionDifferenceTest() throws ApiException {
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String baseLensVersion = null;
        String targetLensVersion = null;
        GetLensVersionDifferenceOutput response = api.getLensVersionDifference(lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, baseLensVersion, targetLensVersion);
        // TODO: test validations
    }

    /**
     * Get a milestone for an existing workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMilestoneTest() throws ApiException {
        String workloadId = null;
        Integer milestoneNumber = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMilestoneOutput response = api.getMilestone(workloadId, milestoneNumber, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get profile information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        String profileArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String profileVersion = null;
        GetProfileOutput response = api.getProfile(profileArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, profileVersion);
        // TODO: test validations
    }

    /**
     * Get profile template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTemplateTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProfileTemplateOutput response = api.getProfileTemplate(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Get an existing workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkloadTest() throws ApiException {
        String workloadId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkloadOutput response = api.getWorkload(workloadId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Import a new custom lens or update an existing custom lens.&lt;/p&gt; &lt;p&gt;To update an existing custom lens, specify its ARN as the &lt;code&gt;LensAlias&lt;/code&gt;. If no ARN is specified, a new custom lens is created.&lt;/p&gt; &lt;p&gt;The new or updated lens will have a status of &lt;code&gt;DRAFT&lt;/code&gt;. The lens cannot be applied to workloads or shared with other Amazon Web Services accounts until it&#39;s published with &lt;a&gt;CreateLensVersion&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Lenses are defined in JSON. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/wellarchitected/latest/userguide/lenses-format-specification.html\&quot;&gt;JSON format specification&lt;/a&gt; in the &lt;i&gt;Well-Architected Tool User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A custom lens cannot exceed 500 KB in size.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;b&gt;Disclaimer&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Do not include or gather personal identifiable information (PII) of end users or other identifiable individuals in or via your custom lenses. If your custom lens or those shared with you and used in your account do include or collect PII you are responsible for: ensuring that the included PII is processed in accordance with applicable law, providing adequate privacy notices, and obtaining necessary consents for processing such data.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importLensTest() throws ApiException {
        ImportLensRequest importLensRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportLensOutput response = api.importLens(importLensRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List of answers for a particular workload and lens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnswersTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pillarId = null;
        Integer milestoneNumber = null;
        String nextToken = null;
        Integer maxResults = null;
        String questionPriority = null;
        ListAnswersOutput response = api.listAnswers(workloadId, lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pillarId, milestoneNumber, nextToken, maxResults, questionPriority);
        // TODO: test validations
    }

    /**
     * List of Trusted Advisor check details by account related to the workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCheckDetailsTest() throws ApiException {
        String workloadId = null;
        ListCheckDetailsRequest listCheckDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCheckDetailsOutput response = api.listCheckDetails(workloadId, listCheckDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List of Trusted Advisor checks summarized for all accounts related to the workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCheckSummariesTest() throws ApiException {
        String workloadId = null;
        ListCheckDetailsRequest listCheckDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCheckSummariesOutput response = api.listCheckSummaries(workloadId, listCheckDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List lens review improvements.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLensReviewImprovementsTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pillarId = null;
        Integer milestoneNumber = null;
        String nextToken = null;
        Integer maxResults = null;
        String questionPriority = null;
        ListLensReviewImprovementsOutput response = api.listLensReviewImprovements(workloadId, lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pillarId, milestoneNumber, nextToken, maxResults, questionPriority);
        // TODO: test validations
    }

    /**
     * List lens reviews for a particular workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLensReviewsTest() throws ApiException {
        String workloadId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer milestoneNumber = null;
        String nextToken = null;
        Integer maxResults = null;
        ListLensReviewsOutput response = api.listLensReviews(workloadId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, milestoneNumber, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * List the lens shares associated with the lens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLensSharesTest() throws ApiException {
        String lensAlias = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sharedWithPrefix = null;
        String nextToken = null;
        Integer maxResults = null;
        String status = null;
        ListLensSharesOutput response = api.listLensShares(lensAlias, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sharedWithPrefix, nextToken, maxResults, status);
        // TODO: test validations
    }

    /**
     * List the available lenses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLensesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String lensType = null;
        String lensStatus = null;
        String lensName = null;
        ListLensesOutput response = api.listLenses(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, lensType, lensStatus, lensName);
        // TODO: test validations
    }

    /**
     * List all milestones for an existing workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMilestonesTest() throws ApiException {
        String workloadId = null;
        ListMilestonesRequest listMilestonesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMilestonesOutput response = api.listMilestones(workloadId, listMilestonesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List lens notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNotificationsTest() throws ApiException {
        ListNotificationsRequest listNotificationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListNotificationsOutput response = api.listNotifications(listNotificationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List profile notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileNotificationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String workloadId = null;
        String nextToken = null;
        Integer maxResults = null;
        ListProfileNotificationsOutput response = api.listProfileNotifications(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, workloadId, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * List profile shares.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileSharesTest() throws ApiException {
        String profileArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sharedWithPrefix = null;
        String nextToken = null;
        Integer maxResults = null;
        String status = null;
        ListProfileSharesOutput response = api.listProfileShares(profileArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sharedWithPrefix, nextToken, maxResults, status);
        // TODO: test validations
    }

    /**
     * List profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfilesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String profileNamePrefix = null;
        String profileOwnerType = null;
        String nextToken = null;
        Integer maxResults = null;
        ListProfilesOutput response = api.listProfiles(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, profileNamePrefix, profileOwnerType, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * List the workload invitations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listShareInvitationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String workloadNamePrefix = null;
        String lensNamePrefix = null;
        String shareResourceType = null;
        String nextToken = null;
        Integer maxResults = null;
        String profileNamePrefix = null;
        ListShareInvitationsOutput response = api.listShareInvitations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, workloadNamePrefix, lensNamePrefix, shareResourceType, nextToken, maxResults, profileNamePrefix);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;List the tags for a resource.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String workloadArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(workloadArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List the workload shares associated with the workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkloadSharesTest() throws ApiException {
        String workloadId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String sharedWithPrefix = null;
        String nextToken = null;
        Integer maxResults = null;
        String status = null;
        ListWorkloadSharesOutput response = api.listWorkloadShares(workloadId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sharedWithPrefix, nextToken, maxResults, status);
        // TODO: test validations
    }

    /**
     * Paginated list of workloads.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkloadsTest() throws ApiException {
        ListWorkloadsRequest listWorkloadsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWorkloadsOutput response = api.listWorkloads(listWorkloadsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Adds one or more tags to the specified resource.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String workloadArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(workloadArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes specified tags from a resource.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The WorkloadArn parameter can be a workload ARN, a custom lens ARN, or a profile ARN.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;To specify multiple tags, use separate &lt;b&gt;tagKeys&lt;/b&gt; parameters, for example:&lt;/p&gt; &lt;p&gt; &lt;code&gt;DELETE /tags/WorkloadArn?tagKeys&#x3D;key1&amp;amp;tagKeys&#x3D;key2&lt;/code&gt; &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String workloadArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(workloadArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update the answer to a specific question in a workload review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAnswerTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        String questionId = null;
        UpdateAnswerRequest updateAnswerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAnswerOutput response = api.updateAnswer(workloadId, lensAlias, questionId, updateAnswerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates whether the Amazon Web Services account is opted into organization sharing and discovery integration features.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGlobalSettingsTest() throws ApiException {
        UpdateGlobalSettingsRequest updateGlobalSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.updateGlobalSettings(updateGlobalSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update lens review for a particular workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLensReviewTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        UpdateLensReviewRequest updateLensReviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateLensReviewOutput response = api.updateLensReview(workloadId, lensAlias, updateLensReviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String profileArn = null;
        UpdateProfileRequest updateProfileRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProfileOutput response = api.updateProfile(profileArn, updateProfileRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Update a workload or custom lens share invitation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This API operation can be called independently of any resource. Previous documentation implied that a workload ARN must be specified.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateShareInvitationTest() throws ApiException {
        String shareInvitationId = null;
        UpdateShareInvitationRequest updateShareInvitationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateShareInvitationOutput response = api.updateShareInvitation(shareInvitationId, updateShareInvitationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update an existing workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkloadTest() throws ApiException {
        String workloadId = null;
        UpdateWorkloadRequest updateWorkloadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkloadOutput response = api.updateWorkload(workloadId, updateWorkloadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update a workload share.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkloadShareTest() throws ApiException {
        String shareId = null;
        String workloadId = null;
        UpdateWorkloadShareRequest updateWorkloadShareRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateWorkloadShareOutput response = api.updateWorkloadShare(shareId, workloadId, updateWorkloadShareRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Upgrade lens review for a particular workload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeLensReviewTest() throws ApiException {
        String workloadId = null;
        String lensAlias = null;
        UpgradeLensReviewRequest upgradeLensReviewRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.upgradeLensReview(workloadId, lensAlias, upgradeLensReviewRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Upgrade a profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeProfileVersionTest() throws ApiException {
        String workloadId = null;
        String profileArn = null;
        UpgradeProfileVersionRequest upgradeProfileVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.upgradeProfileVersion(workloadId, profileArn, upgradeProfileVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
