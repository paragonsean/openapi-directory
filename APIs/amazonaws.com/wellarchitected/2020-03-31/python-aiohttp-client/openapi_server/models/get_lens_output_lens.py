# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetLensOutputLens(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_arn: str=None, lens_version: str=None, name: str=None, description: str=None, owner: str=None, share_invitation_id: str=None, tags: Dict=None):
        """GetLensOutputLens - a model defined in OpenAPI

        :param lens_arn: The lens_arn of this GetLensOutputLens.
        :param lens_version: The lens_version of this GetLensOutputLens.
        :param name: The name of this GetLensOutputLens.
        :param description: The description of this GetLensOutputLens.
        :param owner: The owner of this GetLensOutputLens.
        :param share_invitation_id: The share_invitation_id of this GetLensOutputLens.
        :param tags: The tags of this GetLensOutputLens.
        """
        self.openapi_types = {
            'lens_arn': str,
            'lens_version': str,
            'name': str,
            'description': str,
            'owner': str,
            'share_invitation_id': str,
            'tags': Dict
        }

        self.attribute_map = {
            'lens_arn': 'LensArn',
            'lens_version': 'LensVersion',
            'name': 'Name',
            'description': 'Description',
            'owner': 'Owner',
            'share_invitation_id': 'ShareInvitationId',
            'tags': 'Tags'
        }

        self._lens_arn = lens_arn
        self._lens_version = lens_version
        self._name = name
        self._description = description
        self._owner = owner
        self._share_invitation_id = share_invitation_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLensOutputLens':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLensOutput_Lens of this GetLensOutputLens.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_arn(self):
        """Gets the lens_arn of this GetLensOutputLens.


        :return: The lens_arn of this GetLensOutputLens.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this GetLensOutputLens.


        :param lens_arn: The lens_arn of this GetLensOutputLens.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def lens_version(self):
        """Gets the lens_version of this GetLensOutputLens.


        :return: The lens_version of this GetLensOutputLens.
        :rtype: str
        """
        return self._lens_version

    @lens_version.setter
    def lens_version(self, lens_version):
        """Sets the lens_version of this GetLensOutputLens.


        :param lens_version: The lens_version of this GetLensOutputLens.
        :type lens_version: str
        """

        self._lens_version = lens_version

    @property
    def name(self):
        """Gets the name of this GetLensOutputLens.

        The full name of the lens.

        :return: The name of this GetLensOutputLens.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetLensOutputLens.

        The full name of the lens.

        :param name: The name of this GetLensOutputLens.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this GetLensOutputLens.

        The description of the lens.

        :return: The description of this GetLensOutputLens.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetLensOutputLens.

        The description of the lens.

        :param description: The description of this GetLensOutputLens.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this GetLensOutputLens.


        :return: The owner of this GetLensOutputLens.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this GetLensOutputLens.


        :param owner: The owner of this GetLensOutputLens.
        :type owner: str
        """

        self._owner = owner

    @property
    def share_invitation_id(self):
        """Gets the share_invitation_id of this GetLensOutputLens.


        :return: The share_invitation_id of this GetLensOutputLens.
        :rtype: str
        """
        return self._share_invitation_id

    @share_invitation_id.setter
    def share_invitation_id(self, share_invitation_id):
        """Sets the share_invitation_id of this GetLensOutputLens.


        :param share_invitation_id: The share_invitation_id of this GetLensOutputLens.
        :type share_invitation_id: str
        """

        self._share_invitation_id = share_invitation_id

    @property
    def tags(self):
        """Gets the tags of this GetLensOutputLens.


        :return: The tags of this GetLensOutputLens.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GetLensOutputLens.


        :param tags: The tags of this GetLensOutputLens.
        :type tags: Dict
        """

        self._tags = tags
