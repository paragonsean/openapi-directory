# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.milestone import Milestone
import re
from openapi_server import util


class GetMilestoneOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_id: str=None, milestone: Milestone=None):
        """GetMilestoneOutput - a model defined in OpenAPI

        :param workload_id: The workload_id of this GetMilestoneOutput.
        :param milestone: The milestone of this GetMilestoneOutput.
        """
        self.openapi_types = {
            'workload_id': str,
            'milestone': Milestone
        }

        self.attribute_map = {
            'workload_id': 'WorkloadId',
            'milestone': 'Milestone'
        }

        self._workload_id = workload_id
        self._milestone = milestone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetMilestoneOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetMilestoneOutput of this GetMilestoneOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_id(self):
        """Gets the workload_id of this GetMilestoneOutput.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this GetMilestoneOutput.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this GetMilestoneOutput.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this GetMilestoneOutput.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def milestone(self):
        """Gets the milestone of this GetMilestoneOutput.


        :return: The milestone of this GetMilestoneOutput.
        :rtype: Milestone
        """
        return self._milestone

    @milestone.setter
    def milestone(self, milestone):
        """Sets the milestone of this GetMilestoneOutput.


        :param milestone: The milestone of this GetMilestoneOutput.
        :type milestone: Milestone
        """

        self._milestone = milestone
