# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.difference_status import DifferenceStatus
from openapi_server import util


class PillarDifference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pillar_id: str=None, pillar_name: str=None, difference_status: DifferenceStatus=None, question_differences: List=None):
        """PillarDifference - a model defined in OpenAPI

        :param pillar_id: The pillar_id of this PillarDifference.
        :param pillar_name: The pillar_name of this PillarDifference.
        :param difference_status: The difference_status of this PillarDifference.
        :param question_differences: The question_differences of this PillarDifference.
        """
        self.openapi_types = {
            'pillar_id': str,
            'pillar_name': str,
            'difference_status': DifferenceStatus,
            'question_differences': List
        }

        self.attribute_map = {
            'pillar_id': 'PillarId',
            'pillar_name': 'PillarName',
            'difference_status': 'DifferenceStatus',
            'question_differences': 'QuestionDifferences'
        }

        self._pillar_id = pillar_id
        self._pillar_name = pillar_name
        self._difference_status = difference_status
        self._question_differences = question_differences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PillarDifference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PillarDifference of this PillarDifference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pillar_id(self):
        """Gets the pillar_id of this PillarDifference.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :return: The pillar_id of this PillarDifference.
        :rtype: str
        """
        return self._pillar_id

    @pillar_id.setter
    def pillar_id(self, pillar_id):
        """Sets the pillar_id of this PillarDifference.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :param pillar_id: The pillar_id of this PillarDifference.
        :type pillar_id: str
        """
        if pillar_id is not None and len(pillar_id) > 64:
            raise ValueError("Invalid value for `pillar_id`, length must be less than or equal to `64`")
        if pillar_id is not None and len(pillar_id) < 1:
            raise ValueError("Invalid value for `pillar_id`, length must be greater than or equal to `1`")

        self._pillar_id = pillar_id

    @property
    def pillar_name(self):
        """Gets the pillar_name of this PillarDifference.

        The name of the pillar.

        :return: The pillar_name of this PillarDifference.
        :rtype: str
        """
        return self._pillar_name

    @pillar_name.setter
    def pillar_name(self, pillar_name):
        """Sets the pillar_name of this PillarDifference.

        The name of the pillar.

        :param pillar_name: The pillar_name of this PillarDifference.
        :type pillar_name: str
        """
        if pillar_name is not None and len(pillar_name) > 128:
            raise ValueError("Invalid value for `pillar_name`, length must be less than or equal to `128`")
        if pillar_name is not None and len(pillar_name) < 1:
            raise ValueError("Invalid value for `pillar_name`, length must be greater than or equal to `1`")

        self._pillar_name = pillar_name

    @property
    def difference_status(self):
        """Gets the difference_status of this PillarDifference.


        :return: The difference_status of this PillarDifference.
        :rtype: DifferenceStatus
        """
        return self._difference_status

    @difference_status.setter
    def difference_status(self, difference_status):
        """Sets the difference_status of this PillarDifference.


        :param difference_status: The difference_status of this PillarDifference.
        :type difference_status: DifferenceStatus
        """

        self._difference_status = difference_status

    @property
    def question_differences(self):
        """Gets the question_differences of this PillarDifference.


        :return: The question_differences of this PillarDifference.
        :rtype: List
        """
        return self._question_differences

    @question_differences.setter
    def question_differences(self, question_differences):
        """Sets the question_differences of this PillarDifference.


        :param question_differences: The question_differences of this PillarDifference.
        :type question_differences: List
        """

        self._question_differences = question_differences
