# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_type import PermissionType
from openapi_server.models.share_resource_type import ShareResourceType
import re
from openapi_server import util


class ShareInvitationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, share_invitation_id: str=None, shared_by: str=None, shared_with: str=None, permission_type: PermissionType=None, share_resource_type: ShareResourceType=None, workload_name: str=None, workload_id: str=None, lens_name: str=None, lens_arn: str=None, profile_name: str=None, profile_arn: str=None):
        """ShareInvitationSummary - a model defined in OpenAPI

        :param share_invitation_id: The share_invitation_id of this ShareInvitationSummary.
        :param shared_by: The shared_by of this ShareInvitationSummary.
        :param shared_with: The shared_with of this ShareInvitationSummary.
        :param permission_type: The permission_type of this ShareInvitationSummary.
        :param share_resource_type: The share_resource_type of this ShareInvitationSummary.
        :param workload_name: The workload_name of this ShareInvitationSummary.
        :param workload_id: The workload_id of this ShareInvitationSummary.
        :param lens_name: The lens_name of this ShareInvitationSummary.
        :param lens_arn: The lens_arn of this ShareInvitationSummary.
        :param profile_name: The profile_name of this ShareInvitationSummary.
        :param profile_arn: The profile_arn of this ShareInvitationSummary.
        """
        self.openapi_types = {
            'share_invitation_id': str,
            'shared_by': str,
            'shared_with': str,
            'permission_type': PermissionType,
            'share_resource_type': ShareResourceType,
            'workload_name': str,
            'workload_id': str,
            'lens_name': str,
            'lens_arn': str,
            'profile_name': str,
            'profile_arn': str
        }

        self.attribute_map = {
            'share_invitation_id': 'ShareInvitationId',
            'shared_by': 'SharedBy',
            'shared_with': 'SharedWith',
            'permission_type': 'PermissionType',
            'share_resource_type': 'ShareResourceType',
            'workload_name': 'WorkloadName',
            'workload_id': 'WorkloadId',
            'lens_name': 'LensName',
            'lens_arn': 'LensArn',
            'profile_name': 'ProfileName',
            'profile_arn': 'ProfileArn'
        }

        self._share_invitation_id = share_invitation_id
        self._shared_by = shared_by
        self._shared_with = shared_with
        self._permission_type = permission_type
        self._share_resource_type = share_resource_type
        self._workload_name = workload_name
        self._workload_id = workload_id
        self._lens_name = lens_name
        self._lens_arn = lens_arn
        self._profile_name = profile_name
        self._profile_arn = profile_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareInvitationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareInvitationSummary of this ShareInvitationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def share_invitation_id(self):
        """Gets the share_invitation_id of this ShareInvitationSummary.


        :return: The share_invitation_id of this ShareInvitationSummary.
        :rtype: str
        """
        return self._share_invitation_id

    @share_invitation_id.setter
    def share_invitation_id(self, share_invitation_id):
        """Sets the share_invitation_id of this ShareInvitationSummary.


        :param share_invitation_id: The share_invitation_id of this ShareInvitationSummary.
        :type share_invitation_id: str
        """

        self._share_invitation_id = share_invitation_id

    @property
    def shared_by(self):
        """Gets the shared_by of this ShareInvitationSummary.

        An Amazon Web Services account ID.

        :return: The shared_by of this ShareInvitationSummary.
        :rtype: str
        """
        return self._shared_by

    @shared_by.setter
    def shared_by(self, shared_by):
        """Sets the shared_by of this ShareInvitationSummary.

        An Amazon Web Services account ID.

        :param shared_by: The shared_by of this ShareInvitationSummary.
        :type shared_by: str
        """
        if shared_by is not None and len(shared_by) > 12:
            raise ValueError("Invalid value for `shared_by`, length must be less than or equal to `12`")
        if shared_by is not None and len(shared_by) < 12:
            raise ValueError("Invalid value for `shared_by`, length must be greater than or equal to `12`")
        if shared_by is not None and not re.search(r'[0-9]{12}', shared_by):
            raise ValueError("Invalid value for `shared_by`, must be a follow pattern or equal to `/[0-9]{12}/`")

        self._shared_by = shared_by

    @property
    def shared_with(self):
        """Gets the shared_with of this ShareInvitationSummary.

        The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.

        :return: The shared_with of this ShareInvitationSummary.
        :rtype: str
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this ShareInvitationSummary.

        The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.

        :param shared_with: The shared_with of this ShareInvitationSummary.
        :type shared_with: str
        """
        if shared_with is not None and len(shared_with) > 2048:
            raise ValueError("Invalid value for `shared_with`, length must be less than or equal to `2048`")
        if shared_with is not None and len(shared_with) < 12:
            raise ValueError("Invalid value for `shared_with`, length must be greater than or equal to `12`")

        self._shared_with = shared_with

    @property
    def permission_type(self):
        """Gets the permission_type of this ShareInvitationSummary.


        :return: The permission_type of this ShareInvitationSummary.
        :rtype: PermissionType
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this ShareInvitationSummary.


        :param permission_type: The permission_type of this ShareInvitationSummary.
        :type permission_type: PermissionType
        """

        self._permission_type = permission_type

    @property
    def share_resource_type(self):
        """Gets the share_resource_type of this ShareInvitationSummary.


        :return: The share_resource_type of this ShareInvitationSummary.
        :rtype: ShareResourceType
        """
        return self._share_resource_type

    @share_resource_type.setter
    def share_resource_type(self, share_resource_type):
        """Sets the share_resource_type of this ShareInvitationSummary.


        :param share_resource_type: The share_resource_type of this ShareInvitationSummary.
        :type share_resource_type: ShareResourceType
        """

        self._share_resource_type = share_resource_type

    @property
    def workload_name(self):
        """Gets the workload_name of this ShareInvitationSummary.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this ShareInvitationSummary.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this ShareInvitationSummary.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this ShareInvitationSummary.
        :type workload_name: str
        """
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name

    @property
    def workload_id(self):
        """Gets the workload_id of this ShareInvitationSummary.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this ShareInvitationSummary.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this ShareInvitationSummary.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this ShareInvitationSummary.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def lens_name(self):
        """Gets the lens_name of this ShareInvitationSummary.

        The full name of the lens.

        :return: The lens_name of this ShareInvitationSummary.
        :rtype: str
        """
        return self._lens_name

    @lens_name.setter
    def lens_name(self, lens_name):
        """Sets the lens_name of this ShareInvitationSummary.

        The full name of the lens.

        :param lens_name: The lens_name of this ShareInvitationSummary.
        :type lens_name: str
        """
        if lens_name is not None and len(lens_name) > 128:
            raise ValueError("Invalid value for `lens_name`, length must be less than or equal to `128`")
        if lens_name is not None and len(lens_name) < 1:
            raise ValueError("Invalid value for `lens_name`, length must be greater than or equal to `1`")

        self._lens_name = lens_name

    @property
    def lens_arn(self):
        """Gets the lens_arn of this ShareInvitationSummary.


        :return: The lens_arn of this ShareInvitationSummary.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this ShareInvitationSummary.


        :param lens_arn: The lens_arn of this ShareInvitationSummary.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def profile_name(self):
        """Gets the profile_name of this ShareInvitationSummary.


        :return: The profile_name of this ShareInvitationSummary.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ShareInvitationSummary.


        :param profile_name: The profile_name of this ShareInvitationSummary.
        :type profile_name: str
        """

        self._profile_name = profile_name

    @property
    def profile_arn(self):
        """Gets the profile_arn of this ShareInvitationSummary.


        :return: The profile_arn of this ShareInvitationSummary.
        :rtype: str
        """
        return self._profile_arn

    @profile_arn.setter
    def profile_arn(self, profile_arn):
        """Sets the profile_arn of this ShareInvitationSummary.


        :param profile_arn: The profile_arn of this ShareInvitationSummary.
        :type profile_arn: str
        """

        self._profile_arn = profile_arn
