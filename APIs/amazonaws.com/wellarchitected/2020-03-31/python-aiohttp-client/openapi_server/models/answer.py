# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answer_reason import AnswerReason
from openapi_server.models.choice import Choice
from openapi_server.models.risk import Risk
from openapi_server import util


class Answer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_id: str=None, pillar_id: str=None, question_title: str=None, question_description: str=None, improvement_plan_url: str=None, helpful_resource_url: str=None, helpful_resource_display_text: str=None, choices: List[Choice]=None, selected_choices: List[str]=None, choice_answers: List=None, is_applicable: bool=None, risk: Risk=None, notes: str=None, reason: AnswerReason=None):
        """Answer - a model defined in OpenAPI

        :param question_id: The question_id of this Answer.
        :param pillar_id: The pillar_id of this Answer.
        :param question_title: The question_title of this Answer.
        :param question_description: The question_description of this Answer.
        :param improvement_plan_url: The improvement_plan_url of this Answer.
        :param helpful_resource_url: The helpful_resource_url of this Answer.
        :param helpful_resource_display_text: The helpful_resource_display_text of this Answer.
        :param choices: The choices of this Answer.
        :param selected_choices: The selected_choices of this Answer.
        :param choice_answers: The choice_answers of this Answer.
        :param is_applicable: The is_applicable of this Answer.
        :param risk: The risk of this Answer.
        :param notes: The notes of this Answer.
        :param reason: The reason of this Answer.
        """
        self.openapi_types = {
            'question_id': str,
            'pillar_id': str,
            'question_title': str,
            'question_description': str,
            'improvement_plan_url': str,
            'helpful_resource_url': str,
            'helpful_resource_display_text': str,
            'choices': List[Choice],
            'selected_choices': List[str],
            'choice_answers': List,
            'is_applicable': bool,
            'risk': Risk,
            'notes': str,
            'reason': AnswerReason
        }

        self.attribute_map = {
            'question_id': 'QuestionId',
            'pillar_id': 'PillarId',
            'question_title': 'QuestionTitle',
            'question_description': 'QuestionDescription',
            'improvement_plan_url': 'ImprovementPlanUrl',
            'helpful_resource_url': 'HelpfulResourceUrl',
            'helpful_resource_display_text': 'HelpfulResourceDisplayText',
            'choices': 'Choices',
            'selected_choices': 'SelectedChoices',
            'choice_answers': 'ChoiceAnswers',
            'is_applicable': 'IsApplicable',
            'risk': 'Risk',
            'notes': 'Notes',
            'reason': 'Reason'
        }

        self._question_id = question_id
        self._pillar_id = pillar_id
        self._question_title = question_title
        self._question_description = question_description
        self._improvement_plan_url = improvement_plan_url
        self._helpful_resource_url = helpful_resource_url
        self._helpful_resource_display_text = helpful_resource_display_text
        self._choices = choices
        self._selected_choices = selected_choices
        self._choice_answers = choice_answers
        self._is_applicable = is_applicable
        self._risk = risk
        self._notes = notes
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Answer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Answer of this Answer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self):
        """Gets the question_id of this Answer.

        The ID of the question.

        :return: The question_id of this Answer.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this Answer.

        The ID of the question.

        :param question_id: The question_id of this Answer.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def pillar_id(self):
        """Gets the pillar_id of this Answer.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :return: The pillar_id of this Answer.
        :rtype: str
        """
        return self._pillar_id

    @pillar_id.setter
    def pillar_id(self, pillar_id):
        """Sets the pillar_id of this Answer.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :param pillar_id: The pillar_id of this Answer.
        :type pillar_id: str
        """
        if pillar_id is not None and len(pillar_id) > 64:
            raise ValueError("Invalid value for `pillar_id`, length must be less than or equal to `64`")
        if pillar_id is not None and len(pillar_id) < 1:
            raise ValueError("Invalid value for `pillar_id`, length must be greater than or equal to `1`")

        self._pillar_id = pillar_id

    @property
    def question_title(self):
        """Gets the question_title of this Answer.

        The title of the question.

        :return: The question_title of this Answer.
        :rtype: str
        """
        return self._question_title

    @question_title.setter
    def question_title(self, question_title):
        """Sets the question_title of this Answer.

        The title of the question.

        :param question_title: The question_title of this Answer.
        :type question_title: str
        """
        if question_title is not None and len(question_title) > 512:
            raise ValueError("Invalid value for `question_title`, length must be less than or equal to `512`")
        if question_title is not None and len(question_title) < 1:
            raise ValueError("Invalid value for `question_title`, length must be greater than or equal to `1`")

        self._question_title = question_title

    @property
    def question_description(self):
        """Gets the question_description of this Answer.

        The description of the question.

        :return: The question_description of this Answer.
        :rtype: str
        """
        return self._question_description

    @question_description.setter
    def question_description(self, question_description):
        """Sets the question_description of this Answer.

        The description of the question.

        :param question_description: The question_description of this Answer.
        :type question_description: str
        """
        if question_description is not None and len(question_description) > 1024:
            raise ValueError("Invalid value for `question_description`, length must be less than or equal to `1024`")
        if question_description is not None and len(question_description) < 1:
            raise ValueError("Invalid value for `question_description`, length must be greater than or equal to `1`")

        self._question_description = question_description

    @property
    def improvement_plan_url(self):
        """Gets the improvement_plan_url of this Answer.

        <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>

        :return: The improvement_plan_url of this Answer.
        :rtype: str
        """
        return self._improvement_plan_url

    @improvement_plan_url.setter
    def improvement_plan_url(self, improvement_plan_url):
        """Sets the improvement_plan_url of this Answer.

        <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>

        :param improvement_plan_url: The improvement_plan_url of this Answer.
        :type improvement_plan_url: str
        """
        if improvement_plan_url is not None and len(improvement_plan_url) > 2048:
            raise ValueError("Invalid value for `improvement_plan_url`, length must be less than or equal to `2048`")
        if improvement_plan_url is not None and len(improvement_plan_url) < 1:
            raise ValueError("Invalid value for `improvement_plan_url`, length must be greater than or equal to `1`")

        self._improvement_plan_url = improvement_plan_url

    @property
    def helpful_resource_url(self):
        """Gets the helpful_resource_url of this Answer.

        <p>The helpful resource URL.</p> <p>For Amazon Web Services official lenses, this is the helpful resource URL for a question or choice.</p> <p>For custom lenses, this is the helpful resource URL for a question and is only provided if <code>HelpfulResourceDisplayText</code> was specified for the question.</p>

        :return: The helpful_resource_url of this Answer.
        :rtype: str
        """
        return self._helpful_resource_url

    @helpful_resource_url.setter
    def helpful_resource_url(self, helpful_resource_url):
        """Sets the helpful_resource_url of this Answer.

        <p>The helpful resource URL.</p> <p>For Amazon Web Services official lenses, this is the helpful resource URL for a question or choice.</p> <p>For custom lenses, this is the helpful resource URL for a question and is only provided if <code>HelpfulResourceDisplayText</code> was specified for the question.</p>

        :param helpful_resource_url: The helpful_resource_url of this Answer.
        :type helpful_resource_url: str
        """
        if helpful_resource_url is not None and len(helpful_resource_url) > 2048:
            raise ValueError("Invalid value for `helpful_resource_url`, length must be less than or equal to `2048`")
        if helpful_resource_url is not None and len(helpful_resource_url) < 1:
            raise ValueError("Invalid value for `helpful_resource_url`, length must be greater than or equal to `1`")

        self._helpful_resource_url = helpful_resource_url

    @property
    def helpful_resource_display_text(self):
        """Gets the helpful_resource_display_text of this Answer.


        :return: The helpful_resource_display_text of this Answer.
        :rtype: str
        """
        return self._helpful_resource_display_text

    @helpful_resource_display_text.setter
    def helpful_resource_display_text(self, helpful_resource_display_text):
        """Sets the helpful_resource_display_text of this Answer.


        :param helpful_resource_display_text: The helpful_resource_display_text of this Answer.
        :type helpful_resource_display_text: str
        """

        self._helpful_resource_display_text = helpful_resource_display_text

    @property
    def choices(self):
        """Gets the choices of this Answer.

        List of choices available for a question.

        :return: The choices of this Answer.
        :rtype: List[Choice]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this Answer.

        List of choices available for a question.

        :param choices: The choices of this Answer.
        :type choices: List[Choice]
        """

        self._choices = choices

    @property
    def selected_choices(self):
        """Gets the selected_choices of this Answer.

        <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>

        :return: The selected_choices of this Answer.
        :rtype: List[str]
        """
        return self._selected_choices

    @selected_choices.setter
    def selected_choices(self, selected_choices):
        """Sets the selected_choices of this Answer.

        <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>

        :param selected_choices: The selected_choices of this Answer.
        :type selected_choices: List[str]
        """

        self._selected_choices = selected_choices

    @property
    def choice_answers(self):
        """Gets the choice_answers of this Answer.


        :return: The choice_answers of this Answer.
        :rtype: List
        """
        return self._choice_answers

    @choice_answers.setter
    def choice_answers(self, choice_answers):
        """Sets the choice_answers of this Answer.


        :param choice_answers: The choice_answers of this Answer.
        :type choice_answers: List
        """

        self._choice_answers = choice_answers

    @property
    def is_applicable(self):
        """Gets the is_applicable of this Answer.

        Defines whether this question is applicable to a lens review.

        :return: The is_applicable of this Answer.
        :rtype: bool
        """
        return self._is_applicable

    @is_applicable.setter
    def is_applicable(self, is_applicable):
        """Sets the is_applicable of this Answer.

        Defines whether this question is applicable to a lens review.

        :param is_applicable: The is_applicable of this Answer.
        :type is_applicable: bool
        """

        self._is_applicable = is_applicable

    @property
    def risk(self):
        """Gets the risk of this Answer.


        :return: The risk of this Answer.
        :rtype: Risk
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this Answer.


        :param risk: The risk of this Answer.
        :type risk: Risk
        """

        self._risk = risk

    @property
    def notes(self):
        """Gets the notes of this Answer.

        The notes associated with the workload.

        :return: The notes of this Answer.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Answer.

        The notes associated with the workload.

        :param notes: The notes of this Answer.
        :type notes: str
        """
        if notes is not None and len(notes) > 2084:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2084`")

        self._notes = notes

    @property
    def reason(self):
        """Gets the reason of this Answer.


        :return: The reason of this Answer.
        :rtype: AnswerReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Answer.


        :param reason: The reason of this Answer.
        :type reason: AnswerReason
        """

        self._reason = reason
