# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.choice_update import ChoiceUpdate
from openapi_server import util


class UpdateAnswerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, selected_choices: List[str]=None, choice_updates: Dict[str, ChoiceUpdate]=None, notes: str=None, is_applicable: bool=None, reason: str=None):
        """UpdateAnswerRequest - a model defined in OpenAPI

        :param selected_choices: The selected_choices of this UpdateAnswerRequest.
        :param choice_updates: The choice_updates of this UpdateAnswerRequest.
        :param notes: The notes of this UpdateAnswerRequest.
        :param is_applicable: The is_applicable of this UpdateAnswerRequest.
        :param reason: The reason of this UpdateAnswerRequest.
        """
        self.openapi_types = {
            'selected_choices': List[str],
            'choice_updates': Dict[str, ChoiceUpdate],
            'notes': str,
            'is_applicable': bool,
            'reason': str
        }

        self.attribute_map = {
            'selected_choices': 'SelectedChoices',
            'choice_updates': 'ChoiceUpdates',
            'notes': 'Notes',
            'is_applicable': 'IsApplicable',
            'reason': 'Reason'
        }

        self._selected_choices = selected_choices
        self._choice_updates = choice_updates
        self._notes = notes
        self._is_applicable = is_applicable
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAnswerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAnswer_request of this UpdateAnswerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def selected_choices(self):
        """Gets the selected_choices of this UpdateAnswerRequest.

        <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>

        :return: The selected_choices of this UpdateAnswerRequest.
        :rtype: List[str]
        """
        return self._selected_choices

    @selected_choices.setter
    def selected_choices(self, selected_choices):
        """Sets the selected_choices of this UpdateAnswerRequest.

        <p>List of selected choice IDs in a question answer.</p> <p>The values entered replace the previously selected choices.</p>

        :param selected_choices: The selected_choices of this UpdateAnswerRequest.
        :type selected_choices: List[str]
        """

        self._selected_choices = selected_choices

    @property
    def choice_updates(self):
        """Gets the choice_updates of this UpdateAnswerRequest.

        A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.

        :return: The choice_updates of this UpdateAnswerRequest.
        :rtype: Dict[str, ChoiceUpdate]
        """
        return self._choice_updates

    @choice_updates.setter
    def choice_updates(self, choice_updates):
        """Sets the choice_updates of this UpdateAnswerRequest.

        A list of choices to update on a question in your workload. The String key corresponds to the choice ID to be updated.

        :param choice_updates: The choice_updates of this UpdateAnswerRequest.
        :type choice_updates: Dict[str, ChoiceUpdate]
        """

        self._choice_updates = choice_updates

    @property
    def notes(self):
        """Gets the notes of this UpdateAnswerRequest.

        The notes associated with the workload.

        :return: The notes of this UpdateAnswerRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateAnswerRequest.

        The notes associated with the workload.

        :param notes: The notes of this UpdateAnswerRequest.
        :type notes: str
        """
        if notes is not None and len(notes) > 2084:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2084`")

        self._notes = notes

    @property
    def is_applicable(self):
        """Gets the is_applicable of this UpdateAnswerRequest.

        Defines whether this question is applicable to a lens review.

        :return: The is_applicable of this UpdateAnswerRequest.
        :rtype: bool
        """
        return self._is_applicable

    @is_applicable.setter
    def is_applicable(self, is_applicable):
        """Sets the is_applicable of this UpdateAnswerRequest.

        Defines whether this question is applicable to a lens review.

        :param is_applicable: The is_applicable of this UpdateAnswerRequest.
        :type is_applicable: bool
        """

        self._is_applicable = is_applicable

    @property
    def reason(self):
        """Gets the reason of this UpdateAnswerRequest.

        The reason why a question is not applicable to your workload.

        :return: The reason of this UpdateAnswerRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this UpdateAnswerRequest.

        The reason why a question is not applicable to your workload.

        :param reason: The reason of this UpdateAnswerRequest.
        :type reason: str
        """
        allowed_values = ["OUT_OF_SCOPE", "BUSINESS_PRIORITIES", "ARCHITECTURE_CONSTRAINTS", "OTHER", "NONE"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
