# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LensMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_arn: str=None, pillars: List=None, risk_counts: Dict[str, int]=None):
        """LensMetric - a model defined in OpenAPI

        :param lens_arn: The lens_arn of this LensMetric.
        :param pillars: The pillars of this LensMetric.
        :param risk_counts: The risk_counts of this LensMetric.
        """
        self.openapi_types = {
            'lens_arn': str,
            'pillars': List,
            'risk_counts': Dict[str, int]
        }

        self.attribute_map = {
            'lens_arn': 'LensArn',
            'pillars': 'Pillars',
            'risk_counts': 'RiskCounts'
        }

        self._lens_arn = lens_arn
        self._pillars = pillars
        self._risk_counts = risk_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LensMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LensMetric of this LensMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_arn(self):
        """Gets the lens_arn of this LensMetric.


        :return: The lens_arn of this LensMetric.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this LensMetric.


        :param lens_arn: The lens_arn of this LensMetric.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def pillars(self):
        """Gets the pillars of this LensMetric.


        :return: The pillars of this LensMetric.
        :rtype: List
        """
        return self._pillars

    @pillars.setter
    def pillars(self, pillars):
        """Sets the pillars of this LensMetric.


        :param pillars: The pillars of this LensMetric.
        :type pillars: List
        """

        self._pillars = pillars

    @property
    def risk_counts(self):
        """Gets the risk_counts of this LensMetric.

        A map from risk names to the count of how many questions have that rating.

        :return: The risk_counts of this LensMetric.
        :rtype: Dict[str, int]
        """
        return self._risk_counts

    @risk_counts.setter
    def risk_counts(self, risk_counts):
        """Sets the risk_counts of this LensMetric.

        A map from risk names to the count of how many questions have that rating.

        :param risk_counts: The risk_counts of this LensMetric.
        :type risk_counts: Dict[str, int]
        """

        self._risk_counts = risk_counts
