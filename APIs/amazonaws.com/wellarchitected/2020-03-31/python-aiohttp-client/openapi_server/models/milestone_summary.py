# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workload_summary import WorkloadSummary
from openapi_server import util


class MilestoneSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, milestone_number: int=None, milestone_name: str=None, recorded_at: datetime=None, workload_summary: WorkloadSummary=None):
        """MilestoneSummary - a model defined in OpenAPI

        :param milestone_number: The milestone_number of this MilestoneSummary.
        :param milestone_name: The milestone_name of this MilestoneSummary.
        :param recorded_at: The recorded_at of this MilestoneSummary.
        :param workload_summary: The workload_summary of this MilestoneSummary.
        """
        self.openapi_types = {
            'milestone_number': int,
            'milestone_name': str,
            'recorded_at': datetime,
            'workload_summary': WorkloadSummary
        }

        self.attribute_map = {
            'milestone_number': 'MilestoneNumber',
            'milestone_name': 'MilestoneName',
            'recorded_at': 'RecordedAt',
            'workload_summary': 'WorkloadSummary'
        }

        self._milestone_number = milestone_number
        self._milestone_name = milestone_name
        self._recorded_at = recorded_at
        self._workload_summary = workload_summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MilestoneSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MilestoneSummary of this MilestoneSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def milestone_number(self):
        """Gets the milestone_number of this MilestoneSummary.

        <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>

        :return: The milestone_number of this MilestoneSummary.
        :rtype: int
        """
        return self._milestone_number

    @milestone_number.setter
    def milestone_number(self, milestone_number):
        """Sets the milestone_number of this MilestoneSummary.

        <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>

        :param milestone_number: The milestone_number of this MilestoneSummary.
        :type milestone_number: int
        """
        if milestone_number is not None and milestone_number > 100:
            raise ValueError("Invalid value for `milestone_number`, must be a value less than or equal to `100`")
        if milestone_number is not None and milestone_number < 1:
            raise ValueError("Invalid value for `milestone_number`, must be a value greater than or equal to `1`")

        self._milestone_number = milestone_number

    @property
    def milestone_name(self):
        """Gets the milestone_name of this MilestoneSummary.

        <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>

        :return: The milestone_name of this MilestoneSummary.
        :rtype: str
        """
        return self._milestone_name

    @milestone_name.setter
    def milestone_name(self, milestone_name):
        """Sets the milestone_name of this MilestoneSummary.

        <p>The name of the milestone in a workload.</p> <p>Milestone names must be unique within a workload.</p>

        :param milestone_name: The milestone_name of this MilestoneSummary.
        :type milestone_name: str
        """
        if milestone_name is not None and len(milestone_name) > 100:
            raise ValueError("Invalid value for `milestone_name`, length must be less than or equal to `100`")
        if milestone_name is not None and len(milestone_name) < 3:
            raise ValueError("Invalid value for `milestone_name`, length must be greater than or equal to `3`")

        self._milestone_name = milestone_name

    @property
    def recorded_at(self):
        """Gets the recorded_at of this MilestoneSummary.

        The date and time recorded.

        :return: The recorded_at of this MilestoneSummary.
        :rtype: datetime
        """
        return self._recorded_at

    @recorded_at.setter
    def recorded_at(self, recorded_at):
        """Sets the recorded_at of this MilestoneSummary.

        The date and time recorded.

        :param recorded_at: The recorded_at of this MilestoneSummary.
        :type recorded_at: datetime
        """

        self._recorded_at = recorded_at

    @property
    def workload_summary(self):
        """Gets the workload_summary of this MilestoneSummary.


        :return: The workload_summary of this MilestoneSummary.
        :rtype: WorkloadSummary
        """
        return self._workload_summary

    @workload_summary.setter
    def workload_summary(self, workload_summary):
        """Sets the workload_summary of this MilestoneSummary.


        :param workload_summary: The workload_summary of this MilestoneSummary.
        :type workload_summary: WorkloadSummary
        """

        self._workload_summary = workload_summary
