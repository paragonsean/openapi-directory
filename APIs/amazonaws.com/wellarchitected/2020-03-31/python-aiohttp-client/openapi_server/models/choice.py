# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.choice_helpful_resource import ChoiceHelpfulResource
from openapi_server.models.choice_improvement_plan import ChoiceImprovementPlan
from openapi_server import util


class Choice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice_id: str=None, title: str=None, description: str=None, helpful_resource: ChoiceHelpfulResource=None, improvement_plan: ChoiceImprovementPlan=None, additional_resources: List=None):
        """Choice - a model defined in OpenAPI

        :param choice_id: The choice_id of this Choice.
        :param title: The title of this Choice.
        :param description: The description of this Choice.
        :param helpful_resource: The helpful_resource of this Choice.
        :param improvement_plan: The improvement_plan of this Choice.
        :param additional_resources: The additional_resources of this Choice.
        """
        self.openapi_types = {
            'choice_id': str,
            'title': str,
            'description': str,
            'helpful_resource': ChoiceHelpfulResource,
            'improvement_plan': ChoiceImprovementPlan,
            'additional_resources': List
        }

        self.attribute_map = {
            'choice_id': 'ChoiceId',
            'title': 'Title',
            'description': 'Description',
            'helpful_resource': 'HelpfulResource',
            'improvement_plan': 'ImprovementPlan',
            'additional_resources': 'AdditionalResources'
        }

        self._choice_id = choice_id
        self._title = title
        self._description = description
        self._helpful_resource = helpful_resource
        self._improvement_plan = improvement_plan
        self._additional_resources = additional_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Choice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Choice of this Choice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice_id(self):
        """Gets the choice_id of this Choice.

        The ID of a choice.

        :return: The choice_id of this Choice.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this Choice.

        The ID of a choice.

        :param choice_id: The choice_id of this Choice.
        :type choice_id: str
        """
        if choice_id is not None and len(choice_id) > 64:
            raise ValueError("Invalid value for `choice_id`, length must be less than or equal to `64`")
        if choice_id is not None and len(choice_id) < 1:
            raise ValueError("Invalid value for `choice_id`, length must be greater than or equal to `1`")

        self._choice_id = choice_id

    @property
    def title(self):
        """Gets the title of this Choice.

        The title of a choice.

        :return: The title of this Choice.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Choice.

        The title of a choice.

        :param title: The title of this Choice.
        :type title: str
        """
        if title is not None and len(title) > 512:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `512`")
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")

        self._title = title

    @property
    def description(self):
        """Gets the description of this Choice.

        The description of a choice.

        :return: The description of this Choice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Choice.

        The description of a choice.

        :param description: The description of this Choice.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def helpful_resource(self):
        """Gets the helpful_resource of this Choice.


        :return: The helpful_resource of this Choice.
        :rtype: ChoiceHelpfulResource
        """
        return self._helpful_resource

    @helpful_resource.setter
    def helpful_resource(self, helpful_resource):
        """Sets the helpful_resource of this Choice.


        :param helpful_resource: The helpful_resource of this Choice.
        :type helpful_resource: ChoiceHelpfulResource
        """

        self._helpful_resource = helpful_resource

    @property
    def improvement_plan(self):
        """Gets the improvement_plan of this Choice.


        :return: The improvement_plan of this Choice.
        :rtype: ChoiceImprovementPlan
        """
        return self._improvement_plan

    @improvement_plan.setter
    def improvement_plan(self, improvement_plan):
        """Sets the improvement_plan of this Choice.


        :param improvement_plan: The improvement_plan of this Choice.
        :type improvement_plan: ChoiceImprovementPlan
        """

        self._improvement_plan = improvement_plan

    @property
    def additional_resources(self):
        """Gets the additional_resources of this Choice.


        :return: The additional_resources of this Choice.
        :rtype: List
        """
        return self._additional_resources

    @additional_resources.setter
    def additional_resources(self, additional_resources):
        """Sets the additional_resources of this Choice.


        :param additional_resources: The additional_resources of this Choice.
        :type additional_resources: List
        """

        self._additional_resources = additional_resources
