# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_failure_reason import CheckFailureReason
from openapi_server.models.check_provider import CheckProvider
from openapi_server.models.check_status import CheckStatus
import re
from openapi_server import util


class CheckDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, provider: CheckProvider=None, lens_arn: str=None, pillar_id: str=None, question_id: str=None, choice_id: str=None, status: CheckStatus=None, account_id: str=None, flagged_resources: int=None, reason: CheckFailureReason=None, updated_at: datetime=None):
        """CheckDetail - a model defined in OpenAPI

        :param id: The id of this CheckDetail.
        :param name: The name of this CheckDetail.
        :param description: The description of this CheckDetail.
        :param provider: The provider of this CheckDetail.
        :param lens_arn: The lens_arn of this CheckDetail.
        :param pillar_id: The pillar_id of this CheckDetail.
        :param question_id: The question_id of this CheckDetail.
        :param choice_id: The choice_id of this CheckDetail.
        :param status: The status of this CheckDetail.
        :param account_id: The account_id of this CheckDetail.
        :param flagged_resources: The flagged_resources of this CheckDetail.
        :param reason: The reason of this CheckDetail.
        :param updated_at: The updated_at of this CheckDetail.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'provider': CheckProvider,
            'lens_arn': str,
            'pillar_id': str,
            'question_id': str,
            'choice_id': str,
            'status': CheckStatus,
            'account_id': str,
            'flagged_resources': int,
            'reason': CheckFailureReason,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'Id',
            'name': 'Name',
            'description': 'Description',
            'provider': 'Provider',
            'lens_arn': 'LensArn',
            'pillar_id': 'PillarId',
            'question_id': 'QuestionId',
            'choice_id': 'ChoiceId',
            'status': 'Status',
            'account_id': 'AccountId',
            'flagged_resources': 'FlaggedResources',
            'reason': 'Reason',
            'updated_at': 'UpdatedAt'
        }

        self._id = id
        self._name = name
        self._description = description
        self._provider = provider
        self._lens_arn = lens_arn
        self._pillar_id = pillar_id
        self._question_id = question_id
        self._choice_id = choice_id
        self._status = status
        self._account_id = account_id
        self._flagged_resources = flagged_resources
        self._reason = reason
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckDetail of this CheckDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CheckDetail.


        :return: The id of this CheckDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckDetail.


        :param id: The id of this CheckDetail.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CheckDetail.


        :return: The name of this CheckDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CheckDetail.


        :param name: The name of this CheckDetail.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CheckDetail.


        :return: The description of this CheckDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CheckDetail.


        :param description: The description of this CheckDetail.
        :type description: str
        """

        self._description = description

    @property
    def provider(self):
        """Gets the provider of this CheckDetail.


        :return: The provider of this CheckDetail.
        :rtype: CheckProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CheckDetail.


        :param provider: The provider of this CheckDetail.
        :type provider: CheckProvider
        """

        self._provider = provider

    @property
    def lens_arn(self):
        """Gets the lens_arn of this CheckDetail.


        :return: The lens_arn of this CheckDetail.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this CheckDetail.


        :param lens_arn: The lens_arn of this CheckDetail.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def pillar_id(self):
        """Gets the pillar_id of this CheckDetail.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :return: The pillar_id of this CheckDetail.
        :rtype: str
        """
        return self._pillar_id

    @pillar_id.setter
    def pillar_id(self, pillar_id):
        """Sets the pillar_id of this CheckDetail.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :param pillar_id: The pillar_id of this CheckDetail.
        :type pillar_id: str
        """
        if pillar_id is not None and len(pillar_id) > 64:
            raise ValueError("Invalid value for `pillar_id`, length must be less than or equal to `64`")
        if pillar_id is not None and len(pillar_id) < 1:
            raise ValueError("Invalid value for `pillar_id`, length must be greater than or equal to `1`")

        self._pillar_id = pillar_id

    @property
    def question_id(self):
        """Gets the question_id of this CheckDetail.

        The ID of the question.

        :return: The question_id of this CheckDetail.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this CheckDetail.

        The ID of the question.

        :param question_id: The question_id of this CheckDetail.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def choice_id(self):
        """Gets the choice_id of this CheckDetail.

        The ID of a choice.

        :return: The choice_id of this CheckDetail.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this CheckDetail.

        The ID of a choice.

        :param choice_id: The choice_id of this CheckDetail.
        :type choice_id: str
        """
        if choice_id is not None and len(choice_id) > 64:
            raise ValueError("Invalid value for `choice_id`, length must be less than or equal to `64`")
        if choice_id is not None and len(choice_id) < 1:
            raise ValueError("Invalid value for `choice_id`, length must be greater than or equal to `1`")

        self._choice_id = choice_id

    @property
    def status(self):
        """Gets the status of this CheckDetail.


        :return: The status of this CheckDetail.
        :rtype: CheckStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckDetail.


        :param status: The status of this CheckDetail.
        :type status: CheckStatus
        """

        self._status = status

    @property
    def account_id(self):
        """Gets the account_id of this CheckDetail.

        An Amazon Web Services account ID.

        :return: The account_id of this CheckDetail.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CheckDetail.

        An Amazon Web Services account ID.

        :param account_id: The account_id of this CheckDetail.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12}/`")

        self._account_id = account_id

    @property
    def flagged_resources(self):
        """Gets the flagged_resources of this CheckDetail.


        :return: The flagged_resources of this CheckDetail.
        :rtype: int
        """
        return self._flagged_resources

    @flagged_resources.setter
    def flagged_resources(self, flagged_resources):
        """Sets the flagged_resources of this CheckDetail.


        :param flagged_resources: The flagged_resources of this CheckDetail.
        :type flagged_resources: int
        """

        self._flagged_resources = flagged_resources

    @property
    def reason(self):
        """Gets the reason of this CheckDetail.


        :return: The reason of this CheckDetail.
        :rtype: CheckFailureReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CheckDetail.


        :param reason: The reason of this CheckDetail.
        :type reason: CheckFailureReason
        """

        self._reason = reason

    @property
    def updated_at(self):
        """Gets the updated_at of this CheckDetail.

        The date and time recorded.

        :return: The updated_at of this CheckDetail.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CheckDetail.

        The date and time recorded.

        :param updated_at: The updated_at of this CheckDetail.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
