# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportLensRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_alias: str=None, json_string: str=None, client_request_token: str=None, tags: Dict[str, str]=None):
        """ImportLensRequest - a model defined in OpenAPI

        :param lens_alias: The lens_alias of this ImportLensRequest.
        :param json_string: The json_string of this ImportLensRequest.
        :param client_request_token: The client_request_token of this ImportLensRequest.
        :param tags: The tags of this ImportLensRequest.
        """
        self.openapi_types = {
            'lens_alias': str,
            'json_string': str,
            'client_request_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'lens_alias': 'LensAlias',
            'json_string': 'JSONString',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags'
        }

        self._lens_alias = lens_alias
        self._json_string = json_string
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportLensRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportLens_request of this ImportLensRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_alias(self):
        """Gets the lens_alias of this ImportLensRequest.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :return: The lens_alias of this ImportLensRequest.
        :rtype: str
        """
        return self._lens_alias

    @lens_alias.setter
    def lens_alias(self, lens_alias):
        """Sets the lens_alias of this ImportLensRequest.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :param lens_alias: The lens_alias of this ImportLensRequest.
        :type lens_alias: str
        """
        if lens_alias is not None and len(lens_alias) > 128:
            raise ValueError("Invalid value for `lens_alias`, length must be less than or equal to `128`")
        if lens_alias is not None and len(lens_alias) < 1:
            raise ValueError("Invalid value for `lens_alias`, length must be greater than or equal to `1`")

        self._lens_alias = lens_alias

    @property
    def json_string(self):
        """Gets the json_string of this ImportLensRequest.

        The JSON representation of a lens.

        :return: The json_string of this ImportLensRequest.
        :rtype: str
        """
        return self._json_string

    @json_string.setter
    def json_string(self, json_string):
        """Sets the json_string of this ImportLensRequest.

        The JSON representation of a lens.

        :param json_string: The json_string of this ImportLensRequest.
        :type json_string: str
        """
        if json_string is None:
            raise ValueError("Invalid value for `json_string`, must not be `None`")
        if json_string is not None and len(json_string) > 500000:
            raise ValueError("Invalid value for `json_string`, length must be less than or equal to `500000`")
        if json_string is not None and len(json_string) < 2:
            raise ValueError("Invalid value for `json_string`, length must be greater than or equal to `2`")

        self._json_string = json_string

    @property
    def client_request_token(self):
        """Gets the client_request_token of this ImportLensRequest.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :return: The client_request_token of this ImportLensRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this ImportLensRequest.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :param client_request_token: The client_request_token of this ImportLensRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 2048:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `2048`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this ImportLensRequest.

        Tags to associate to a lens.

        :return: The tags of this ImportLensRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportLensRequest.

        Tags to associate to a lens.

        :param tags: The tags of this ImportLensRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
