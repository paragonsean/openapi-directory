# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LensReviewReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_alias: str=None, lens_arn: str=None, base64_string: str=None):
        """LensReviewReport - a model defined in OpenAPI

        :param lens_alias: The lens_alias of this LensReviewReport.
        :param lens_arn: The lens_arn of this LensReviewReport.
        :param base64_string: The base64_string of this LensReviewReport.
        """
        self.openapi_types = {
            'lens_alias': str,
            'lens_arn': str,
            'base64_string': str
        }

        self.attribute_map = {
            'lens_alias': 'LensAlias',
            'lens_arn': 'LensArn',
            'base64_string': 'Base64String'
        }

        self._lens_alias = lens_alias
        self._lens_arn = lens_arn
        self._base64_string = base64_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LensReviewReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LensReviewReport of this LensReviewReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_alias(self):
        """Gets the lens_alias of this LensReviewReport.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :return: The lens_alias of this LensReviewReport.
        :rtype: str
        """
        return self._lens_alias

    @lens_alias.setter
    def lens_alias(self, lens_alias):
        """Sets the lens_alias of this LensReviewReport.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :param lens_alias: The lens_alias of this LensReviewReport.
        :type lens_alias: str
        """
        if lens_alias is not None and len(lens_alias) > 128:
            raise ValueError("Invalid value for `lens_alias`, length must be less than or equal to `128`")
        if lens_alias is not None and len(lens_alias) < 1:
            raise ValueError("Invalid value for `lens_alias`, length must be greater than or equal to `1`")

        self._lens_alias = lens_alias

    @property
    def lens_arn(self):
        """Gets the lens_arn of this LensReviewReport.


        :return: The lens_arn of this LensReviewReport.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this LensReviewReport.


        :param lens_arn: The lens_arn of this LensReviewReport.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def base64_string(self):
        """Gets the base64_string of this LensReviewReport.

        <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>

        :return: The base64_string of this LensReviewReport.
        :rtype: str
        """
        return self._base64_string

    @base64_string.setter
    def base64_string(self, base64_string):
        """Sets the base64_string of this LensReviewReport.

        <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>

        :param base64_string: The base64_string of this LensReviewReport.
        :type base64_string: str
        """

        self._base64_string = base64_string
