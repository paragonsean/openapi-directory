# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.version_differences import VersionDifferences
from openapi_server import util


class GetLensVersionDifferenceOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_alias: str=None, lens_arn: str=None, base_lens_version: str=None, target_lens_version: str=None, latest_lens_version: str=None, version_differences: VersionDifferences=None):
        """GetLensVersionDifferenceOutput - a model defined in OpenAPI

        :param lens_alias: The lens_alias of this GetLensVersionDifferenceOutput.
        :param lens_arn: The lens_arn of this GetLensVersionDifferenceOutput.
        :param base_lens_version: The base_lens_version of this GetLensVersionDifferenceOutput.
        :param target_lens_version: The target_lens_version of this GetLensVersionDifferenceOutput.
        :param latest_lens_version: The latest_lens_version of this GetLensVersionDifferenceOutput.
        :param version_differences: The version_differences of this GetLensVersionDifferenceOutput.
        """
        self.openapi_types = {
            'lens_alias': str,
            'lens_arn': str,
            'base_lens_version': str,
            'target_lens_version': str,
            'latest_lens_version': str,
            'version_differences': VersionDifferences
        }

        self.attribute_map = {
            'lens_alias': 'LensAlias',
            'lens_arn': 'LensArn',
            'base_lens_version': 'BaseLensVersion',
            'target_lens_version': 'TargetLensVersion',
            'latest_lens_version': 'LatestLensVersion',
            'version_differences': 'VersionDifferences'
        }

        self._lens_alias = lens_alias
        self._lens_arn = lens_arn
        self._base_lens_version = base_lens_version
        self._target_lens_version = target_lens_version
        self._latest_lens_version = latest_lens_version
        self._version_differences = version_differences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLensVersionDifferenceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLensVersionDifferenceOutput of this GetLensVersionDifferenceOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_alias(self):
        """Gets the lens_alias of this GetLensVersionDifferenceOutput.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :return: The lens_alias of this GetLensVersionDifferenceOutput.
        :rtype: str
        """
        return self._lens_alias

    @lens_alias.setter
    def lens_alias(self, lens_alias):
        """Sets the lens_alias of this GetLensVersionDifferenceOutput.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :param lens_alias: The lens_alias of this GetLensVersionDifferenceOutput.
        :type lens_alias: str
        """
        if lens_alias is not None and len(lens_alias) > 128:
            raise ValueError("Invalid value for `lens_alias`, length must be less than or equal to `128`")
        if lens_alias is not None and len(lens_alias) < 1:
            raise ValueError("Invalid value for `lens_alias`, length must be greater than or equal to `1`")

        self._lens_alias = lens_alias

    @property
    def lens_arn(self):
        """Gets the lens_arn of this GetLensVersionDifferenceOutput.


        :return: The lens_arn of this GetLensVersionDifferenceOutput.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this GetLensVersionDifferenceOutput.


        :param lens_arn: The lens_arn of this GetLensVersionDifferenceOutput.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def base_lens_version(self):
        """Gets the base_lens_version of this GetLensVersionDifferenceOutput.


        :return: The base_lens_version of this GetLensVersionDifferenceOutput.
        :rtype: str
        """
        return self._base_lens_version

    @base_lens_version.setter
    def base_lens_version(self, base_lens_version):
        """Sets the base_lens_version of this GetLensVersionDifferenceOutput.


        :param base_lens_version: The base_lens_version of this GetLensVersionDifferenceOutput.
        :type base_lens_version: str
        """

        self._base_lens_version = base_lens_version

    @property
    def target_lens_version(self):
        """Gets the target_lens_version of this GetLensVersionDifferenceOutput.


        :return: The target_lens_version of this GetLensVersionDifferenceOutput.
        :rtype: str
        """
        return self._target_lens_version

    @target_lens_version.setter
    def target_lens_version(self, target_lens_version):
        """Sets the target_lens_version of this GetLensVersionDifferenceOutput.


        :param target_lens_version: The target_lens_version of this GetLensVersionDifferenceOutput.
        :type target_lens_version: str
        """

        self._target_lens_version = target_lens_version

    @property
    def latest_lens_version(self):
        """Gets the latest_lens_version of this GetLensVersionDifferenceOutput.


        :return: The latest_lens_version of this GetLensVersionDifferenceOutput.
        :rtype: str
        """
        return self._latest_lens_version

    @latest_lens_version.setter
    def latest_lens_version(self, latest_lens_version):
        """Sets the latest_lens_version of this GetLensVersionDifferenceOutput.


        :param latest_lens_version: The latest_lens_version of this GetLensVersionDifferenceOutput.
        :type latest_lens_version: str
        """

        self._latest_lens_version = latest_lens_version

    @property
    def version_differences(self):
        """Gets the version_differences of this GetLensVersionDifferenceOutput.


        :return: The version_differences of this GetLensVersionDifferenceOutput.
        :rtype: VersionDifferences
        """
        return self._version_differences

    @version_differences.setter
    def version_differences(self, version_differences):
        """Sets the version_differences of this GetLensVersionDifferenceOutput.


        :param version_differences: The version_differences of this GetLensVersionDifferenceOutput.
        :type version_differences: VersionDifferences
        """

        self._version_differences = version_differences
