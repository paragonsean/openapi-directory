# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateProfileShareOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, share_id: str=None, profile_arn: str=None):
        """CreateProfileShareOutput - a model defined in OpenAPI

        :param share_id: The share_id of this CreateProfileShareOutput.
        :param profile_arn: The profile_arn of this CreateProfileShareOutput.
        """
        self.openapi_types = {
            'share_id': str,
            'profile_arn': str
        }

        self.attribute_map = {
            'share_id': 'ShareId',
            'profile_arn': 'ProfileArn'
        }

        self._share_id = share_id
        self._profile_arn = profile_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProfileShareOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProfileShareOutput of this CreateProfileShareOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def share_id(self):
        """Gets the share_id of this CreateProfileShareOutput.

        The ID associated with the share.

        :return: The share_id of this CreateProfileShareOutput.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this CreateProfileShareOutput.

        The ID associated with the share.

        :param share_id: The share_id of this CreateProfileShareOutput.
        :type share_id: str
        """
        if share_id is not None and not re.search(r'[0-9a-f]{32}', share_id):
            raise ValueError("Invalid value for `share_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._share_id = share_id

    @property
    def profile_arn(self):
        """Gets the profile_arn of this CreateProfileShareOutput.


        :return: The profile_arn of this CreateProfileShareOutput.
        :rtype: str
        """
        return self._profile_arn

    @profile_arn.setter
    def profile_arn(self, profile_arn):
        """Sets the profile_arn of this CreateProfileShareOutput.


        :param profile_arn: The profile_arn of this CreateProfileShareOutput.
        :type profile_arn: str
        """

        self._profile_arn = profile_arn
