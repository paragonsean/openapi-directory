# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.choice_reason import ChoiceReason
from openapi_server.models.choice_status import ChoiceStatus
from openapi_server import util


class ChoiceAnswerSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice_id: str=None, status: ChoiceStatus=None, reason: ChoiceReason=None):
        """ChoiceAnswerSummary - a model defined in OpenAPI

        :param choice_id: The choice_id of this ChoiceAnswerSummary.
        :param status: The status of this ChoiceAnswerSummary.
        :param reason: The reason of this ChoiceAnswerSummary.
        """
        self.openapi_types = {
            'choice_id': str,
            'status': ChoiceStatus,
            'reason': ChoiceReason
        }

        self.attribute_map = {
            'choice_id': 'ChoiceId',
            'status': 'Status',
            'reason': 'Reason'
        }

        self._choice_id = choice_id
        self._status = status
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChoiceAnswerSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChoiceAnswerSummary of this ChoiceAnswerSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice_id(self):
        """Gets the choice_id of this ChoiceAnswerSummary.

        The ID of a choice.

        :return: The choice_id of this ChoiceAnswerSummary.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this ChoiceAnswerSummary.

        The ID of a choice.

        :param choice_id: The choice_id of this ChoiceAnswerSummary.
        :type choice_id: str
        """
        if choice_id is not None and len(choice_id) > 64:
            raise ValueError("Invalid value for `choice_id`, length must be less than or equal to `64`")
        if choice_id is not None and len(choice_id) < 1:
            raise ValueError("Invalid value for `choice_id`, length must be greater than or equal to `1`")

        self._choice_id = choice_id

    @property
    def status(self):
        """Gets the status of this ChoiceAnswerSummary.


        :return: The status of this ChoiceAnswerSummary.
        :rtype: ChoiceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChoiceAnswerSummary.


        :param status: The status of this ChoiceAnswerSummary.
        :type status: ChoiceStatus
        """

        self._status = status

    @property
    def reason(self):
        """Gets the reason of this ChoiceAnswerSummary.


        :return: The reason of this ChoiceAnswerSummary.
        :rtype: ChoiceReason
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ChoiceAnswerSummary.


        :param reason: The reason of this ChoiceAnswerSummary.
        :type reason: ChoiceReason
        """

        self._reason = reason
