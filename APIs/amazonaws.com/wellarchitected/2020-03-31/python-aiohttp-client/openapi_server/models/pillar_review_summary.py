# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PillarReviewSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pillar_id: str=None, pillar_name: str=None, notes: str=None, risk_counts: Dict[str, int]=None, prioritized_risk_counts: Dict[str, int]=None):
        """PillarReviewSummary - a model defined in OpenAPI

        :param pillar_id: The pillar_id of this PillarReviewSummary.
        :param pillar_name: The pillar_name of this PillarReviewSummary.
        :param notes: The notes of this PillarReviewSummary.
        :param risk_counts: The risk_counts of this PillarReviewSummary.
        :param prioritized_risk_counts: The prioritized_risk_counts of this PillarReviewSummary.
        """
        self.openapi_types = {
            'pillar_id': str,
            'pillar_name': str,
            'notes': str,
            'risk_counts': Dict[str, int],
            'prioritized_risk_counts': Dict[str, int]
        }

        self.attribute_map = {
            'pillar_id': 'PillarId',
            'pillar_name': 'PillarName',
            'notes': 'Notes',
            'risk_counts': 'RiskCounts',
            'prioritized_risk_counts': 'PrioritizedRiskCounts'
        }

        self._pillar_id = pillar_id
        self._pillar_name = pillar_name
        self._notes = notes
        self._risk_counts = risk_counts
        self._prioritized_risk_counts = prioritized_risk_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PillarReviewSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PillarReviewSummary of this PillarReviewSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pillar_id(self):
        """Gets the pillar_id of this PillarReviewSummary.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :return: The pillar_id of this PillarReviewSummary.
        :rtype: str
        """
        return self._pillar_id

    @pillar_id.setter
    def pillar_id(self, pillar_id):
        """Sets the pillar_id of this PillarReviewSummary.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :param pillar_id: The pillar_id of this PillarReviewSummary.
        :type pillar_id: str
        """
        if pillar_id is not None and len(pillar_id) > 64:
            raise ValueError("Invalid value for `pillar_id`, length must be less than or equal to `64`")
        if pillar_id is not None and len(pillar_id) < 1:
            raise ValueError("Invalid value for `pillar_id`, length must be greater than or equal to `1`")

        self._pillar_id = pillar_id

    @property
    def pillar_name(self):
        """Gets the pillar_name of this PillarReviewSummary.

        The name of the pillar.

        :return: The pillar_name of this PillarReviewSummary.
        :rtype: str
        """
        return self._pillar_name

    @pillar_name.setter
    def pillar_name(self, pillar_name):
        """Sets the pillar_name of this PillarReviewSummary.

        The name of the pillar.

        :param pillar_name: The pillar_name of this PillarReviewSummary.
        :type pillar_name: str
        """
        if pillar_name is not None and len(pillar_name) > 128:
            raise ValueError("Invalid value for `pillar_name`, length must be less than or equal to `128`")
        if pillar_name is not None and len(pillar_name) < 1:
            raise ValueError("Invalid value for `pillar_name`, length must be greater than or equal to `1`")

        self._pillar_name = pillar_name

    @property
    def notes(self):
        """Gets the notes of this PillarReviewSummary.

        The notes associated with the workload.

        :return: The notes of this PillarReviewSummary.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PillarReviewSummary.

        The notes associated with the workload.

        :param notes: The notes of this PillarReviewSummary.
        :type notes: str
        """
        if notes is not None and len(notes) > 2084:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2084`")

        self._notes = notes

    @property
    def risk_counts(self):
        """Gets the risk_counts of this PillarReviewSummary.

        A map from risk names to the count of how many questions have that rating.

        :return: The risk_counts of this PillarReviewSummary.
        :rtype: Dict[str, int]
        """
        return self._risk_counts

    @risk_counts.setter
    def risk_counts(self, risk_counts):
        """Sets the risk_counts of this PillarReviewSummary.

        A map from risk names to the count of how many questions have that rating.

        :param risk_counts: The risk_counts of this PillarReviewSummary.
        :type risk_counts: Dict[str, int]
        """

        self._risk_counts = risk_counts

    @property
    def prioritized_risk_counts(self):
        """Gets the prioritized_risk_counts of this PillarReviewSummary.

        A map from risk names to the count of how many questions have that rating.

        :return: The prioritized_risk_counts of this PillarReviewSummary.
        :rtype: Dict[str, int]
        """
        return self._prioritized_risk_counts

    @prioritized_risk_counts.setter
    def prioritized_risk_counts(self, prioritized_risk_counts):
        """Sets the prioritized_risk_counts of this PillarReviewSummary.

        A map from risk names to the count of how many questions have that rating.

        :param prioritized_risk_counts: The prioritized_risk_counts of this PillarReviewSummary.
        :type prioritized_risk_counts: Dict[str, int]
        """

        self._prioritized_risk_counts = prioritized_risk_counts
