# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileQuestionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_id: str=None, selected_choice_ids: List=None):
        """ProfileQuestionUpdate - a model defined in OpenAPI

        :param question_id: The question_id of this ProfileQuestionUpdate.
        :param selected_choice_ids: The selected_choice_ids of this ProfileQuestionUpdate.
        """
        self.openapi_types = {
            'question_id': str,
            'selected_choice_ids': List
        }

        self.attribute_map = {
            'question_id': 'QuestionId',
            'selected_choice_ids': 'SelectedChoiceIds'
        }

        self._question_id = question_id
        self._selected_choice_ids = selected_choice_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileQuestionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileQuestionUpdate of this ProfileQuestionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self):
        """Gets the question_id of this ProfileQuestionUpdate.

        The ID of the question.

        :return: The question_id of this ProfileQuestionUpdate.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this ProfileQuestionUpdate.

        The ID of the question.

        :param question_id: The question_id of this ProfileQuestionUpdate.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def selected_choice_ids(self):
        """Gets the selected_choice_ids of this ProfileQuestionUpdate.


        :return: The selected_choice_ids of this ProfileQuestionUpdate.
        :rtype: List
        """
        return self._selected_choice_ids

    @selected_choice_ids.setter
    def selected_choice_ids(self, selected_choice_ids):
        """Sets the selected_choice_ids of this ProfileQuestionUpdate.


        :param selected_choice_ids: The selected_choice_ids of this ProfileQuestionUpdate.
        :type selected_choice_ids: List
        """

        self._selected_choice_ids = selected_choice_ids
