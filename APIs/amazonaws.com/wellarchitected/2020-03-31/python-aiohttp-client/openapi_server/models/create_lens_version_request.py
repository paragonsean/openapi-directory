# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateLensVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_version: str=None, is_major_version: bool=None, client_request_token: str=None):
        """CreateLensVersionRequest - a model defined in OpenAPI

        :param lens_version: The lens_version of this CreateLensVersionRequest.
        :param is_major_version: The is_major_version of this CreateLensVersionRequest.
        :param client_request_token: The client_request_token of this CreateLensVersionRequest.
        """
        self.openapi_types = {
            'lens_version': str,
            'is_major_version': bool,
            'client_request_token': str
        }

        self.attribute_map = {
            'lens_version': 'LensVersion',
            'is_major_version': 'IsMajorVersion',
            'client_request_token': 'ClientRequestToken'
        }

        self._lens_version = lens_version
        self._is_major_version = is_major_version
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLensVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLensVersion_request of this CreateLensVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_version(self):
        """Gets the lens_version of this CreateLensVersionRequest.

        The version of the lens being created.

        :return: The lens_version of this CreateLensVersionRequest.
        :rtype: str
        """
        return self._lens_version

    @lens_version.setter
    def lens_version(self, lens_version):
        """Sets the lens_version of this CreateLensVersionRequest.

        The version of the lens being created.

        :param lens_version: The lens_version of this CreateLensVersionRequest.
        :type lens_version: str
        """
        if lens_version is None:
            raise ValueError("Invalid value for `lens_version`, must not be `None`")
        if lens_version is not None and len(lens_version) > 32:
            raise ValueError("Invalid value for `lens_version`, length must be less than or equal to `32`")
        if lens_version is not None and len(lens_version) < 1:
            raise ValueError("Invalid value for `lens_version`, length must be greater than or equal to `1`")

        self._lens_version = lens_version

    @property
    def is_major_version(self):
        """Gets the is_major_version of this CreateLensVersionRequest.

        Set to true if this new major lens version.

        :return: The is_major_version of this CreateLensVersionRequest.
        :rtype: bool
        """
        return self._is_major_version

    @is_major_version.setter
    def is_major_version(self, is_major_version):
        """Sets the is_major_version of this CreateLensVersionRequest.

        Set to true if this new major lens version.

        :param is_major_version: The is_major_version of this CreateLensVersionRequest.
        :type is_major_version: bool
        """

        self._is_major_version = is_major_version

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateLensVersionRequest.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :return: The client_request_token of this CreateLensVersionRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateLensVersionRequest.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :param client_request_token: The client_request_token of this CreateLensVersionRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 2048:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `2048`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")

        self._client_request_token = client_request_token
