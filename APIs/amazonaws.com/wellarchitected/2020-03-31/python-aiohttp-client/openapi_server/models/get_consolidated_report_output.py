# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetConsolidatedReportOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metrics: List=None, next_token: str=None, base64_string: str=None):
        """GetConsolidatedReportOutput - a model defined in OpenAPI

        :param metrics: The metrics of this GetConsolidatedReportOutput.
        :param next_token: The next_token of this GetConsolidatedReportOutput.
        :param base64_string: The base64_string of this GetConsolidatedReportOutput.
        """
        self.openapi_types = {
            'metrics': List,
            'next_token': str,
            'base64_string': str
        }

        self.attribute_map = {
            'metrics': 'Metrics',
            'next_token': 'NextToken',
            'base64_string': 'Base64String'
        }

        self._metrics = metrics
        self._next_token = next_token
        self._base64_string = base64_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetConsolidatedReportOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetConsolidatedReportOutput of this GetConsolidatedReportOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metrics(self):
        """Gets the metrics of this GetConsolidatedReportOutput.


        :return: The metrics of this GetConsolidatedReportOutput.
        :rtype: List
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this GetConsolidatedReportOutput.


        :param metrics: The metrics of this GetConsolidatedReportOutput.
        :type metrics: List
        """

        self._metrics = metrics

    @property
    def next_token(self):
        """Gets the next_token of this GetConsolidatedReportOutput.

        The token to use to retrieve the next set of results.

        :return: The next_token of this GetConsolidatedReportOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetConsolidatedReportOutput.

        The token to use to retrieve the next set of results.

        :param next_token: The next_token of this GetConsolidatedReportOutput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def base64_string(self):
        """Gets the base64_string of this GetConsolidatedReportOutput.

        <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>

        :return: The base64_string of this GetConsolidatedReportOutput.
        :rtype: str
        """
        return self._base64_string

    @base64_string.setter
    def base64_string(self, base64_string):
        """Sets the base64_string of this GetConsolidatedReportOutput.

        <p>The Base64-encoded string representation of a lens review report.</p> <p>This data can be used to create a PDF file.</p> <p>Only returned by <a>GetConsolidatedReport</a> when <code>PDF</code> format is requested.</p>

        :param base64_string: The base64_string of this GetConsolidatedReportOutput.
        :type base64_string: str
        """

        self._base64_string = base64_string
