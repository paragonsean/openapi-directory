# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.risk import Risk
from openapi_server import util


class QuestionMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_id: str=None, risk: Risk=None, best_practices: List=None):
        """QuestionMetric - a model defined in OpenAPI

        :param question_id: The question_id of this QuestionMetric.
        :param risk: The risk of this QuestionMetric.
        :param best_practices: The best_practices of this QuestionMetric.
        """
        self.openapi_types = {
            'question_id': str,
            'risk': Risk,
            'best_practices': List
        }

        self.attribute_map = {
            'question_id': 'QuestionId',
            'risk': 'Risk',
            'best_practices': 'BestPractices'
        }

        self._question_id = question_id
        self._risk = risk
        self._best_practices = best_practices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuestionMetric of this QuestionMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self):
        """Gets the question_id of this QuestionMetric.

        The ID of the question.

        :return: The question_id of this QuestionMetric.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this QuestionMetric.

        The ID of the question.

        :param question_id: The question_id of this QuestionMetric.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def risk(self):
        """Gets the risk of this QuestionMetric.


        :return: The risk of this QuestionMetric.
        :rtype: Risk
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this QuestionMetric.


        :param risk: The risk of this QuestionMetric.
        :type risk: Risk
        """

        self._risk = risk

    @property
    def best_practices(self):
        """Gets the best_practices of this QuestionMetric.


        :return: The best_practices of this QuestionMetric.
        :rtype: List
        """
        return self._best_practices

    @best_practices.setter
    def best_practices(self, best_practices):
        """Sets the best_practices of this QuestionMetric.


        :param best_practices: The best_practices of this QuestionMetric.
        :type best_practices: List
        """

        self._best_practices = best_practices
