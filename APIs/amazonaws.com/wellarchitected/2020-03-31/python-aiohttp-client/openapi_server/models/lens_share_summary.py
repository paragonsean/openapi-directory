# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.share_status import ShareStatus
import re
from openapi_server import util


class LensShareSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, share_id: str=None, shared_with: str=None, status: ShareStatus=None, status_message: str=None):
        """LensShareSummary - a model defined in OpenAPI

        :param share_id: The share_id of this LensShareSummary.
        :param shared_with: The shared_with of this LensShareSummary.
        :param status: The status of this LensShareSummary.
        :param status_message: The status_message of this LensShareSummary.
        """
        self.openapi_types = {
            'share_id': str,
            'shared_with': str,
            'status': ShareStatus,
            'status_message': str
        }

        self.attribute_map = {
            'share_id': 'ShareId',
            'shared_with': 'SharedWith',
            'status': 'Status',
            'status_message': 'StatusMessage'
        }

        self._share_id = share_id
        self._shared_with = shared_with
        self._status = status
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LensShareSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LensShareSummary of this LensShareSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def share_id(self):
        """Gets the share_id of this LensShareSummary.

        The ID associated with the share.

        :return: The share_id of this LensShareSummary.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this LensShareSummary.

        The ID associated with the share.

        :param share_id: The share_id of this LensShareSummary.
        :type share_id: str
        """
        if share_id is not None and not re.search(r'[0-9a-f]{32}', share_id):
            raise ValueError("Invalid value for `share_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._share_id = share_id

    @property
    def shared_with(self):
        """Gets the shared_with of this LensShareSummary.

        The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.

        :return: The shared_with of this LensShareSummary.
        :rtype: str
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this LensShareSummary.

        The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.

        :param shared_with: The shared_with of this LensShareSummary.
        :type shared_with: str
        """
        if shared_with is not None and len(shared_with) > 2048:
            raise ValueError("Invalid value for `shared_with`, length must be less than or equal to `2048`")
        if shared_with is not None and len(shared_with) < 12:
            raise ValueError("Invalid value for `shared_with`, length must be greater than or equal to `12`")

        self._shared_with = shared_with

    @property
    def status(self):
        """Gets the status of this LensShareSummary.


        :return: The status of this LensShareSummary.
        :rtype: ShareStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LensShareSummary.


        :param status: The status of this LensShareSummary.
        :type status: ShareStatus
        """

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this LensShareSummary.


        :return: The status_message of this LensShareSummary.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this LensShareSummary.


        :param status_message: The status_message of this LensShareSummary.
        :type status_message: str
        """

        self._status_message = status_message
