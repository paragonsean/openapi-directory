# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lens_review_summary import LensReviewSummary
import re
from openapi_server import util


class ListLensReviewsOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_id: str=None, milestone_number: int=None, lens_review_summaries: List[LensReviewSummary]=None, next_token: str=None):
        """ListLensReviewsOutput - a model defined in OpenAPI

        :param workload_id: The workload_id of this ListLensReviewsOutput.
        :param milestone_number: The milestone_number of this ListLensReviewsOutput.
        :param lens_review_summaries: The lens_review_summaries of this ListLensReviewsOutput.
        :param next_token: The next_token of this ListLensReviewsOutput.
        """
        self.openapi_types = {
            'workload_id': str,
            'milestone_number': int,
            'lens_review_summaries': List[LensReviewSummary],
            'next_token': str
        }

        self.attribute_map = {
            'workload_id': 'WorkloadId',
            'milestone_number': 'MilestoneNumber',
            'lens_review_summaries': 'LensReviewSummaries',
            'next_token': 'NextToken'
        }

        self._workload_id = workload_id
        self._milestone_number = milestone_number
        self._lens_review_summaries = lens_review_summaries
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListLensReviewsOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListLensReviewsOutput of this ListLensReviewsOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_id(self):
        """Gets the workload_id of this ListLensReviewsOutput.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this ListLensReviewsOutput.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this ListLensReviewsOutput.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this ListLensReviewsOutput.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def milestone_number(self):
        """Gets the milestone_number of this ListLensReviewsOutput.

        <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>

        :return: The milestone_number of this ListLensReviewsOutput.
        :rtype: int
        """
        return self._milestone_number

    @milestone_number.setter
    def milestone_number(self, milestone_number):
        """Sets the milestone_number of this ListLensReviewsOutput.

        <p>The milestone number.</p> <p>A workload can have a maximum of 100 milestones.</p>

        :param milestone_number: The milestone_number of this ListLensReviewsOutput.
        :type milestone_number: int
        """
        if milestone_number is not None and milestone_number > 100:
            raise ValueError("Invalid value for `milestone_number`, must be a value less than or equal to `100`")
        if milestone_number is not None and milestone_number < 1:
            raise ValueError("Invalid value for `milestone_number`, must be a value greater than or equal to `1`")

        self._milestone_number = milestone_number

    @property
    def lens_review_summaries(self):
        """Gets the lens_review_summaries of this ListLensReviewsOutput.

        List of lens summaries of lens reviews of a workload.

        :return: The lens_review_summaries of this ListLensReviewsOutput.
        :rtype: List[LensReviewSummary]
        """
        return self._lens_review_summaries

    @lens_review_summaries.setter
    def lens_review_summaries(self, lens_review_summaries):
        """Sets the lens_review_summaries of this ListLensReviewsOutput.

        List of lens summaries of lens reviews of a workload.

        :param lens_review_summaries: The lens_review_summaries of this ListLensReviewsOutput.
        :type lens_review_summaries: List[LensReviewSummary]
        """

        self._lens_review_summaries = lens_review_summaries

    @property
    def next_token(self):
        """Gets the next_token of this ListLensReviewsOutput.

        The token to use to retrieve the next set of results.

        :return: The next_token of this ListLensReviewsOutput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListLensReviewsOutput.

        The token to use to retrieve the next set of results.

        :param next_token: The next_token of this ListLensReviewsOutput.
        :type next_token: str
        """

        self._next_token = next_token
