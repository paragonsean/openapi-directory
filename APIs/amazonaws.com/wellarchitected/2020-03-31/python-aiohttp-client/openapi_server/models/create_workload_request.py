# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_workload_request_discovery_config import CreateWorkloadRequestDiscoveryConfig
import re
from openapi_server import util


class CreateWorkloadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_name: str=None, description: str=None, environment: str=None, account_ids: List[str]=None, aws_regions: List[str]=None, non_aws_regions: List[str]=None, pillar_priorities: List[str]=None, architectural_design: str=None, review_owner: str=None, industry_type: str=None, industry: str=None, lenses: List[str]=None, notes: str=None, client_request_token: str=None, tags: Dict[str, str]=None, discovery_config: CreateWorkloadRequestDiscoveryConfig=None, applications: List[str]=None, profile_arns: List[str]=None):
        """CreateWorkloadRequest - a model defined in OpenAPI

        :param workload_name: The workload_name of this CreateWorkloadRequest.
        :param description: The description of this CreateWorkloadRequest.
        :param environment: The environment of this CreateWorkloadRequest.
        :param account_ids: The account_ids of this CreateWorkloadRequest.
        :param aws_regions: The aws_regions of this CreateWorkloadRequest.
        :param non_aws_regions: The non_aws_regions of this CreateWorkloadRequest.
        :param pillar_priorities: The pillar_priorities of this CreateWorkloadRequest.
        :param architectural_design: The architectural_design of this CreateWorkloadRequest.
        :param review_owner: The review_owner of this CreateWorkloadRequest.
        :param industry_type: The industry_type of this CreateWorkloadRequest.
        :param industry: The industry of this CreateWorkloadRequest.
        :param lenses: The lenses of this CreateWorkloadRequest.
        :param notes: The notes of this CreateWorkloadRequest.
        :param client_request_token: The client_request_token of this CreateWorkloadRequest.
        :param tags: The tags of this CreateWorkloadRequest.
        :param discovery_config: The discovery_config of this CreateWorkloadRequest.
        :param applications: The applications of this CreateWorkloadRequest.
        :param profile_arns: The profile_arns of this CreateWorkloadRequest.
        """
        self.openapi_types = {
            'workload_name': str,
            'description': str,
            'environment': str,
            'account_ids': List[str],
            'aws_regions': List[str],
            'non_aws_regions': List[str],
            'pillar_priorities': List[str],
            'architectural_design': str,
            'review_owner': str,
            'industry_type': str,
            'industry': str,
            'lenses': List[str],
            'notes': str,
            'client_request_token': str,
            'tags': Dict[str, str],
            'discovery_config': CreateWorkloadRequestDiscoveryConfig,
            'applications': List[str],
            'profile_arns': List[str]
        }

        self.attribute_map = {
            'workload_name': 'WorkloadName',
            'description': 'Description',
            'environment': 'Environment',
            'account_ids': 'AccountIds',
            'aws_regions': 'AwsRegions',
            'non_aws_regions': 'NonAwsRegions',
            'pillar_priorities': 'PillarPriorities',
            'architectural_design': 'ArchitecturalDesign',
            'review_owner': 'ReviewOwner',
            'industry_type': 'IndustryType',
            'industry': 'Industry',
            'lenses': 'Lenses',
            'notes': 'Notes',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags',
            'discovery_config': 'DiscoveryConfig',
            'applications': 'Applications',
            'profile_arns': 'ProfileArns'
        }

        self._workload_name = workload_name
        self._description = description
        self._environment = environment
        self._account_ids = account_ids
        self._aws_regions = aws_regions
        self._non_aws_regions = non_aws_regions
        self._pillar_priorities = pillar_priorities
        self._architectural_design = architectural_design
        self._review_owner = review_owner
        self._industry_type = industry_type
        self._industry = industry
        self._lenses = lenses
        self._notes = notes
        self._client_request_token = client_request_token
        self._tags = tags
        self._discovery_config = discovery_config
        self._applications = applications
        self._profile_arns = profile_arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWorkloadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWorkload_request of this CreateWorkloadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_name(self):
        """Gets the workload_name of this CreateWorkloadRequest.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this CreateWorkloadRequest.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this CreateWorkloadRequest.
        :type workload_name: str
        """
        if workload_name is None:
            raise ValueError("Invalid value for `workload_name`, must not be `None`")
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name

    @property
    def description(self):
        """Gets the description of this CreateWorkloadRequest.

        The description for the workload.

        :return: The description of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWorkloadRequest.

        The description for the workload.

        :param description: The description of this CreateWorkloadRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 3:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `3`")

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this CreateWorkloadRequest.

        The environment for the workload.

        :return: The environment of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CreateWorkloadRequest.

        The environment for the workload.

        :param environment: The environment of this CreateWorkloadRequest.
        :type environment: str
        """
        allowed_values = ["PRODUCTION", "PREPRODUCTION"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def account_ids(self):
        """Gets the account_ids of this CreateWorkloadRequest.

        The list of Amazon Web Services account IDs associated with the workload.

        :return: The account_ids of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this CreateWorkloadRequest.

        The list of Amazon Web Services account IDs associated with the workload.

        :param account_ids: The account_ids of this CreateWorkloadRequest.
        :type account_ids: List[str]
        """
        if account_ids is not None and len(account_ids) > 100:
            raise ValueError("Invalid value for `account_ids`, number of items must be less than or equal to `100`")

        self._account_ids = account_ids

    @property
    def aws_regions(self):
        """Gets the aws_regions of this CreateWorkloadRequest.

        The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.

        :return: The aws_regions of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._aws_regions

    @aws_regions.setter
    def aws_regions(self, aws_regions):
        """Sets the aws_regions of this CreateWorkloadRequest.

        The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.

        :param aws_regions: The aws_regions of this CreateWorkloadRequest.
        :type aws_regions: List[str]
        """
        if aws_regions is not None and len(aws_regions) > 50:
            raise ValueError("Invalid value for `aws_regions`, number of items must be less than or equal to `50`")

        self._aws_regions = aws_regions

    @property
    def non_aws_regions(self):
        """Gets the non_aws_regions of this CreateWorkloadRequest.

         The list of non-Amazon Web Services Regions associated with the workload.

        :return: The non_aws_regions of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._non_aws_regions

    @non_aws_regions.setter
    def non_aws_regions(self, non_aws_regions):
        """Sets the non_aws_regions of this CreateWorkloadRequest.

         The list of non-Amazon Web Services Regions associated with the workload.

        :param non_aws_regions: The non_aws_regions of this CreateWorkloadRequest.
        :type non_aws_regions: List[str]
        """
        if non_aws_regions is not None and len(non_aws_regions) > 5:
            raise ValueError("Invalid value for `non_aws_regions`, number of items must be less than or equal to `5`")

        self._non_aws_regions = non_aws_regions

    @property
    def pillar_priorities(self):
        """Gets the pillar_priorities of this CreateWorkloadRequest.

        The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.

        :return: The pillar_priorities of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._pillar_priorities

    @pillar_priorities.setter
    def pillar_priorities(self, pillar_priorities):
        """Sets the pillar_priorities of this CreateWorkloadRequest.

        The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.

        :param pillar_priorities: The pillar_priorities of this CreateWorkloadRequest.
        :type pillar_priorities: List[str]
        """

        self._pillar_priorities = pillar_priorities

    @property
    def architectural_design(self):
        """Gets the architectural_design of this CreateWorkloadRequest.

        The URL of the architectural design for the workload.

        :return: The architectural_design of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._architectural_design

    @architectural_design.setter
    def architectural_design(self, architectural_design):
        """Sets the architectural_design of this CreateWorkloadRequest.

        The URL of the architectural design for the workload.

        :param architectural_design: The architectural_design of this CreateWorkloadRequest.
        :type architectural_design: str
        """
        if architectural_design is not None and len(architectural_design) > 2048:
            raise ValueError("Invalid value for `architectural_design`, length must be less than or equal to `2048`")
        if architectural_design is not None and not re.search(r'^(|(https?|ftp):\/\/[^\s\/$.?#].[^\s]*)$', architectural_design):
            raise ValueError("Invalid value for `architectural_design`, must be a follow pattern or equal to `/^(|(https?|ftp):\/\/[^\s\/$.?#].[^\s]*)$/`")

        self._architectural_design = architectural_design

    @property
    def review_owner(self):
        """Gets the review_owner of this CreateWorkloadRequest.

        The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.

        :return: The review_owner of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._review_owner

    @review_owner.setter
    def review_owner(self, review_owner):
        """Sets the review_owner of this CreateWorkloadRequest.

        The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.

        :param review_owner: The review_owner of this CreateWorkloadRequest.
        :type review_owner: str
        """
        if review_owner is not None and len(review_owner) > 255:
            raise ValueError("Invalid value for `review_owner`, length must be less than or equal to `255`")
        if review_owner is not None and len(review_owner) < 3:
            raise ValueError("Invalid value for `review_owner`, length must be greater than or equal to `3`")

        self._review_owner = review_owner

    @property
    def industry_type(self):
        """Gets the industry_type of this CreateWorkloadRequest.

        <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>

        :return: The industry_type of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._industry_type

    @industry_type.setter
    def industry_type(self, industry_type):
        """Sets the industry_type of this CreateWorkloadRequest.

        <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>

        :param industry_type: The industry_type of this CreateWorkloadRequest.
        :type industry_type: str
        """
        if industry_type is not None and len(industry_type) > 100:
            raise ValueError("Invalid value for `industry_type`, length must be less than or equal to `100`")

        self._industry_type = industry_type

    @property
    def industry(self):
        """Gets the industry of this CreateWorkloadRequest.

        The industry for the workload.

        :return: The industry of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this CreateWorkloadRequest.

        The industry for the workload.

        :param industry: The industry of this CreateWorkloadRequest.
        :type industry: str
        """
        if industry is not None and len(industry) > 100:
            raise ValueError("Invalid value for `industry`, length must be less than or equal to `100`")

        self._industry = industry

    @property
    def lenses(self):
        """Gets the lenses of this CreateWorkloadRequest.

        The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.

        :return: The lenses of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._lenses

    @lenses.setter
    def lenses(self, lenses):
        """Sets the lenses of this CreateWorkloadRequest.

        The list of lenses associated with the workload. Each lens is identified by its <a>LensSummary$LensAlias</a>.

        :param lenses: The lenses of this CreateWorkloadRequest.
        :type lenses: List[str]
        """
        if lenses is None:
            raise ValueError("Invalid value for `lenses`, must not be `None`")

        self._lenses = lenses

    @property
    def notes(self):
        """Gets the notes of this CreateWorkloadRequest.

        The notes associated with the workload.

        :return: The notes of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateWorkloadRequest.

        The notes associated with the workload.

        :param notes: The notes of this CreateWorkloadRequest.
        :type notes: str
        """
        if notes is not None and len(notes) > 2084:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2084`")

        self._notes = notes

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateWorkloadRequest.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :return: The client_request_token of this CreateWorkloadRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateWorkloadRequest.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :param client_request_token: The client_request_token of this CreateWorkloadRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 2048:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `2048`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateWorkloadRequest.

        The tags to be associated with the workload.

        :return: The tags of this CreateWorkloadRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWorkloadRequest.

        The tags to be associated with the workload.

        :param tags: The tags of this CreateWorkloadRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def discovery_config(self):
        """Gets the discovery_config of this CreateWorkloadRequest.


        :return: The discovery_config of this CreateWorkloadRequest.
        :rtype: CreateWorkloadRequestDiscoveryConfig
        """
        return self._discovery_config

    @discovery_config.setter
    def discovery_config(self, discovery_config):
        """Sets the discovery_config of this CreateWorkloadRequest.


        :param discovery_config: The discovery_config of this CreateWorkloadRequest.
        :type discovery_config: CreateWorkloadRequestDiscoveryConfig
        """

        self._discovery_config = discovery_config

    @property
    def applications(self):
        """Gets the applications of this CreateWorkloadRequest.

        List of AppRegistry application ARNs associated to the workload.

        :return: The applications of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this CreateWorkloadRequest.

        List of AppRegistry application ARNs associated to the workload.

        :param applications: The applications of this CreateWorkloadRequest.
        :type applications: List[str]
        """
        if applications is not None and len(applications) > 1:
            raise ValueError("Invalid value for `applications`, number of items must be less than or equal to `1`")

        self._applications = applications

    @property
    def profile_arns(self):
        """Gets the profile_arns of this CreateWorkloadRequest.

        The list of profile ARNs associated with the workload.

        :return: The profile_arns of this CreateWorkloadRequest.
        :rtype: List[str]
        """
        return self._profile_arns

    @profile_arns.setter
    def profile_arns(self, profile_arns):
        """Sets the profile_arns of this CreateWorkloadRequest.

        The list of profile ARNs associated with the workload.

        :param profile_arns: The profile_arns of this CreateWorkloadRequest.
        :type profile_arns: List[str]
        """
        if profile_arns is not None and len(profile_arns) > 1:
            raise ValueError("Invalid value for `profile_arns`, number of items must be less than or equal to `1`")

        self._profile_arns = profile_arns
