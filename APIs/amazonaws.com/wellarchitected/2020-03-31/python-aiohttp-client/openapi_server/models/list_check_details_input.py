# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListCheckDetailsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, lens_arn: str=None, pillar_id: str=None, question_id: str=None, choice_id: str=None):
        """ListCheckDetailsInput - a model defined in OpenAPI

        :param next_token: The next_token of this ListCheckDetailsInput.
        :param max_results: The max_results of this ListCheckDetailsInput.
        :param lens_arn: The lens_arn of this ListCheckDetailsInput.
        :param pillar_id: The pillar_id of this ListCheckDetailsInput.
        :param question_id: The question_id of this ListCheckDetailsInput.
        :param choice_id: The choice_id of this ListCheckDetailsInput.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'lens_arn': str,
            'pillar_id': str,
            'question_id': str,
            'choice_id': str
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'lens_arn': 'LensArn',
            'pillar_id': 'PillarId',
            'question_id': 'QuestionId',
            'choice_id': 'ChoiceId'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._lens_arn = lens_arn
        self._pillar_id = pillar_id
        self._question_id = question_id
        self._choice_id = choice_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListCheckDetailsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListCheckDetailsInput of this ListCheckDetailsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListCheckDetailsInput.

        The token to use to retrieve the next set of results.

        :return: The next_token of this ListCheckDetailsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListCheckDetailsInput.

        The token to use to retrieve the next set of results.

        :param next_token: The next_token of this ListCheckDetailsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListCheckDetailsInput.

        The maximum number of results to return for this request.

        :return: The max_results of this ListCheckDetailsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListCheckDetailsInput.

        The maximum number of results to return for this request.

        :param max_results: The max_results of this ListCheckDetailsInput.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def lens_arn(self):
        """Gets the lens_arn of this ListCheckDetailsInput.


        :return: The lens_arn of this ListCheckDetailsInput.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this ListCheckDetailsInput.


        :param lens_arn: The lens_arn of this ListCheckDetailsInput.
        :type lens_arn: str
        """
        if lens_arn is None:
            raise ValueError("Invalid value for `lens_arn`, must not be `None`")

        self._lens_arn = lens_arn

    @property
    def pillar_id(self):
        """Gets the pillar_id of this ListCheckDetailsInput.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :return: The pillar_id of this ListCheckDetailsInput.
        :rtype: str
        """
        return self._pillar_id

    @pillar_id.setter
    def pillar_id(self, pillar_id):
        """Sets the pillar_id of this ListCheckDetailsInput.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :param pillar_id: The pillar_id of this ListCheckDetailsInput.
        :type pillar_id: str
        """
        if pillar_id is None:
            raise ValueError("Invalid value for `pillar_id`, must not be `None`")
        if pillar_id is not None and len(pillar_id) > 64:
            raise ValueError("Invalid value for `pillar_id`, length must be less than or equal to `64`")
        if pillar_id is not None and len(pillar_id) < 1:
            raise ValueError("Invalid value for `pillar_id`, length must be greater than or equal to `1`")

        self._pillar_id = pillar_id

    @property
    def question_id(self):
        """Gets the question_id of this ListCheckDetailsInput.

        The ID of the question.

        :return: The question_id of this ListCheckDetailsInput.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this ListCheckDetailsInput.

        The ID of the question.

        :param question_id: The question_id of this ListCheckDetailsInput.
        :type question_id: str
        """
        if question_id is None:
            raise ValueError("Invalid value for `question_id`, must not be `None`")
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def choice_id(self):
        """Gets the choice_id of this ListCheckDetailsInput.

        The ID of a choice.

        :return: The choice_id of this ListCheckDetailsInput.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this ListCheckDetailsInput.

        The ID of a choice.

        :param choice_id: The choice_id of this ListCheckDetailsInput.
        :type choice_id: str
        """
        if choice_id is None:
            raise ValueError("Invalid value for `choice_id`, must not be `None`")
        if choice_id is not None and len(choice_id) > 64:
            raise ValueError("Invalid value for `choice_id`, length must be less than or equal to `64`")
        if choice_id is not None and len(choice_id) < 1:
            raise ValueError("Invalid value for `choice_id`, length must be greater than or equal to `1`")

        self._choice_id = choice_id
