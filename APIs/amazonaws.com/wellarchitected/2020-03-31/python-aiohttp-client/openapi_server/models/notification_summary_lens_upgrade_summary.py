# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class NotificationSummaryLensUpgradeSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_id: str=None, workload_name: str=None, lens_alias: str=None, lens_arn: str=None, current_lens_version: str=None, latest_lens_version: str=None):
        """NotificationSummaryLensUpgradeSummary - a model defined in OpenAPI

        :param workload_id: The workload_id of this NotificationSummaryLensUpgradeSummary.
        :param workload_name: The workload_name of this NotificationSummaryLensUpgradeSummary.
        :param lens_alias: The lens_alias of this NotificationSummaryLensUpgradeSummary.
        :param lens_arn: The lens_arn of this NotificationSummaryLensUpgradeSummary.
        :param current_lens_version: The current_lens_version of this NotificationSummaryLensUpgradeSummary.
        :param latest_lens_version: The latest_lens_version of this NotificationSummaryLensUpgradeSummary.
        """
        self.openapi_types = {
            'workload_id': str,
            'workload_name': str,
            'lens_alias': str,
            'lens_arn': str,
            'current_lens_version': str,
            'latest_lens_version': str
        }

        self.attribute_map = {
            'workload_id': 'WorkloadId',
            'workload_name': 'WorkloadName',
            'lens_alias': 'LensAlias',
            'lens_arn': 'LensArn',
            'current_lens_version': 'CurrentLensVersion',
            'latest_lens_version': 'LatestLensVersion'
        }

        self._workload_id = workload_id
        self._workload_name = workload_name
        self._lens_alias = lens_alias
        self._lens_arn = lens_arn
        self._current_lens_version = current_lens_version
        self._latest_lens_version = latest_lens_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationSummaryLensUpgradeSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationSummary_LensUpgradeSummary of this NotificationSummaryLensUpgradeSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_id(self):
        """Gets the workload_id of this NotificationSummaryLensUpgradeSummary.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this NotificationSummaryLensUpgradeSummary.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this NotificationSummaryLensUpgradeSummary.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this NotificationSummaryLensUpgradeSummary.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def workload_name(self):
        """Gets the workload_name of this NotificationSummaryLensUpgradeSummary.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this NotificationSummaryLensUpgradeSummary.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this NotificationSummaryLensUpgradeSummary.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this NotificationSummaryLensUpgradeSummary.
        :type workload_name: str
        """
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name

    @property
    def lens_alias(self):
        """Gets the lens_alias of this NotificationSummaryLensUpgradeSummary.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :return: The lens_alias of this NotificationSummaryLensUpgradeSummary.
        :rtype: str
        """
        return self._lens_alias

    @lens_alias.setter
    def lens_alias(self, lens_alias):
        """Sets the lens_alias of this NotificationSummaryLensUpgradeSummary.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :param lens_alias: The lens_alias of this NotificationSummaryLensUpgradeSummary.
        :type lens_alias: str
        """
        if lens_alias is not None and len(lens_alias) > 128:
            raise ValueError("Invalid value for `lens_alias`, length must be less than or equal to `128`")
        if lens_alias is not None and len(lens_alias) < 1:
            raise ValueError("Invalid value for `lens_alias`, length must be greater than or equal to `1`")

        self._lens_alias = lens_alias

    @property
    def lens_arn(self):
        """Gets the lens_arn of this NotificationSummaryLensUpgradeSummary.


        :return: The lens_arn of this NotificationSummaryLensUpgradeSummary.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this NotificationSummaryLensUpgradeSummary.


        :param lens_arn: The lens_arn of this NotificationSummaryLensUpgradeSummary.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def current_lens_version(self):
        """Gets the current_lens_version of this NotificationSummaryLensUpgradeSummary.


        :return: The current_lens_version of this NotificationSummaryLensUpgradeSummary.
        :rtype: str
        """
        return self._current_lens_version

    @current_lens_version.setter
    def current_lens_version(self, current_lens_version):
        """Sets the current_lens_version of this NotificationSummaryLensUpgradeSummary.


        :param current_lens_version: The current_lens_version of this NotificationSummaryLensUpgradeSummary.
        :type current_lens_version: str
        """

        self._current_lens_version = current_lens_version

    @property
    def latest_lens_version(self):
        """Gets the latest_lens_version of this NotificationSummaryLensUpgradeSummary.


        :return: The latest_lens_version of this NotificationSummaryLensUpgradeSummary.
        :rtype: str
        """
        return self._latest_lens_version

    @latest_lens_version.setter
    def latest_lens_version(self, latest_lens_version):
        """Sets the latest_lens_version of this NotificationSummaryLensUpgradeSummary.


        :param latest_lens_version: The latest_lens_version of this NotificationSummaryLensUpgradeSummary.
        :type latest_lens_version: str
        """

        self._latest_lens_version = latest_lens_version
