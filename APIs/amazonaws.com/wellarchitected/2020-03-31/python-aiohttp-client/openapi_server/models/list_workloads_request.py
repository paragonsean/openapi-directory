# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListWorkloadsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_name_prefix: str=None, next_token: str=None, max_results: int=None):
        """ListWorkloadsRequest - a model defined in OpenAPI

        :param workload_name_prefix: The workload_name_prefix of this ListWorkloadsRequest.
        :param next_token: The next_token of this ListWorkloadsRequest.
        :param max_results: The max_results of this ListWorkloadsRequest.
        """
        self.openapi_types = {
            'workload_name_prefix': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'workload_name_prefix': 'WorkloadNamePrefix',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._workload_name_prefix = workload_name_prefix
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListWorkloadsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListWorkloads_request of this ListWorkloadsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_name_prefix(self):
        """Gets the workload_name_prefix of this ListWorkloadsRequest.

        An optional string added to the beginning of each workload name returned in the results.

        :return: The workload_name_prefix of this ListWorkloadsRequest.
        :rtype: str
        """
        return self._workload_name_prefix

    @workload_name_prefix.setter
    def workload_name_prefix(self, workload_name_prefix):
        """Sets the workload_name_prefix of this ListWorkloadsRequest.

        An optional string added to the beginning of each workload name returned in the results.

        :param workload_name_prefix: The workload_name_prefix of this ListWorkloadsRequest.
        :type workload_name_prefix: str
        """
        if workload_name_prefix is not None and len(workload_name_prefix) > 100:
            raise ValueError("Invalid value for `workload_name_prefix`, length must be less than or equal to `100`")

        self._workload_name_prefix = workload_name_prefix

    @property
    def next_token(self):
        """Gets the next_token of this ListWorkloadsRequest.

        The token to use to retrieve the next set of results.

        :return: The next_token of this ListWorkloadsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListWorkloadsRequest.

        The token to use to retrieve the next set of results.

        :param next_token: The next_token of this ListWorkloadsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListWorkloadsRequest.

        The maximum number of results to return for this request.

        :return: The max_results of this ListWorkloadsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListWorkloadsRequest.

        The maximum number of results to return for this request.

        :param max_results: The max_results of this ListWorkloadsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 50:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `50`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
