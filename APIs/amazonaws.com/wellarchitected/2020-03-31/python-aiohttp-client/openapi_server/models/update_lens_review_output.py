# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lens_review import LensReview
import re
from openapi_server import util


class UpdateLensReviewOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_id: str=None, lens_review: LensReview=None):
        """UpdateLensReviewOutput - a model defined in OpenAPI

        :param workload_id: The workload_id of this UpdateLensReviewOutput.
        :param lens_review: The lens_review of this UpdateLensReviewOutput.
        """
        self.openapi_types = {
            'workload_id': str,
            'lens_review': LensReview
        }

        self.attribute_map = {
            'workload_id': 'WorkloadId',
            'lens_review': 'LensReview'
        }

        self._workload_id = workload_id
        self._lens_review = lens_review

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLensReviewOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLensReviewOutput of this UpdateLensReviewOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_id(self):
        """Gets the workload_id of this UpdateLensReviewOutput.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this UpdateLensReviewOutput.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this UpdateLensReviewOutput.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this UpdateLensReviewOutput.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def lens_review(self):
        """Gets the lens_review of this UpdateLensReviewOutput.


        :return: The lens_review of this UpdateLensReviewOutput.
        :rtype: LensReview
        """
        return self._lens_review

    @lens_review.setter
    def lens_review(self, lens_review):
        """Sets the lens_review of this UpdateLensReviewOutput.


        :param lens_review: The lens_review of this UpdateLensReviewOutput.
        :type lens_review: LensReview
        """

        self._lens_review = lens_review
