# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lens_status import LensStatus
from openapi_server.models.lens_type import LensType
import re
from openapi_server import util


class LensSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_arn: str=None, lens_alias: str=None, lens_name: str=None, lens_type: LensType=None, description: str=None, created_at: datetime=None, updated_at: datetime=None, lens_version: str=None, owner: str=None, lens_status: LensStatus=None):
        """LensSummary - a model defined in OpenAPI

        :param lens_arn: The lens_arn of this LensSummary.
        :param lens_alias: The lens_alias of this LensSummary.
        :param lens_name: The lens_name of this LensSummary.
        :param lens_type: The lens_type of this LensSummary.
        :param description: The description of this LensSummary.
        :param created_at: The created_at of this LensSummary.
        :param updated_at: The updated_at of this LensSummary.
        :param lens_version: The lens_version of this LensSummary.
        :param owner: The owner of this LensSummary.
        :param lens_status: The lens_status of this LensSummary.
        """
        self.openapi_types = {
            'lens_arn': str,
            'lens_alias': str,
            'lens_name': str,
            'lens_type': LensType,
            'description': str,
            'created_at': datetime,
            'updated_at': datetime,
            'lens_version': str,
            'owner': str,
            'lens_status': LensStatus
        }

        self.attribute_map = {
            'lens_arn': 'LensArn',
            'lens_alias': 'LensAlias',
            'lens_name': 'LensName',
            'lens_type': 'LensType',
            'description': 'Description',
            'created_at': 'CreatedAt',
            'updated_at': 'UpdatedAt',
            'lens_version': 'LensVersion',
            'owner': 'Owner',
            'lens_status': 'LensStatus'
        }

        self._lens_arn = lens_arn
        self._lens_alias = lens_alias
        self._lens_name = lens_name
        self._lens_type = lens_type
        self._description = description
        self._created_at = created_at
        self._updated_at = updated_at
        self._lens_version = lens_version
        self._owner = owner
        self._lens_status = lens_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LensSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LensSummary of this LensSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_arn(self):
        """Gets the lens_arn of this LensSummary.


        :return: The lens_arn of this LensSummary.
        :rtype: str
        """
        return self._lens_arn

    @lens_arn.setter
    def lens_arn(self, lens_arn):
        """Sets the lens_arn of this LensSummary.


        :param lens_arn: The lens_arn of this LensSummary.
        :type lens_arn: str
        """

        self._lens_arn = lens_arn

    @property
    def lens_alias(self):
        """Gets the lens_alias of this LensSummary.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :return: The lens_alias of this LensSummary.
        :rtype: str
        """
        return self._lens_alias

    @lens_alias.setter
    def lens_alias(self, lens_alias):
        """Sets the lens_alias of this LensSummary.

        <p>The alias of the lens.</p> <p>For Amazon Web Services official lenses, this is either the lens alias, such as <code>serverless</code>, or the lens ARN, such as <code>arn:aws:wellarchitected:us-east-1::lens/serverless</code>. Note that some operations (such as ExportLens and CreateLensShare) are not permitted on Amazon Web Services official lenses.</p> <p>For custom lenses, this is the lens ARN, such as <code>arn:aws:wellarchitected:us-west-2:123456789012:lens/0123456789abcdef01234567890abcdef</code>. </p> <p>Each lens is identified by its <a>LensSummary$LensAlias</a>.</p>

        :param lens_alias: The lens_alias of this LensSummary.
        :type lens_alias: str
        """
        if lens_alias is not None and len(lens_alias) > 128:
            raise ValueError("Invalid value for `lens_alias`, length must be less than or equal to `128`")
        if lens_alias is not None and len(lens_alias) < 1:
            raise ValueError("Invalid value for `lens_alias`, length must be greater than or equal to `1`")

        self._lens_alias = lens_alias

    @property
    def lens_name(self):
        """Gets the lens_name of this LensSummary.

        The full name of the lens.

        :return: The lens_name of this LensSummary.
        :rtype: str
        """
        return self._lens_name

    @lens_name.setter
    def lens_name(self, lens_name):
        """Sets the lens_name of this LensSummary.

        The full name of the lens.

        :param lens_name: The lens_name of this LensSummary.
        :type lens_name: str
        """
        if lens_name is not None and len(lens_name) > 128:
            raise ValueError("Invalid value for `lens_name`, length must be less than or equal to `128`")
        if lens_name is not None and len(lens_name) < 1:
            raise ValueError("Invalid value for `lens_name`, length must be greater than or equal to `1`")

        self._lens_name = lens_name

    @property
    def lens_type(self):
        """Gets the lens_type of this LensSummary.


        :return: The lens_type of this LensSummary.
        :rtype: LensType
        """
        return self._lens_type

    @lens_type.setter
    def lens_type(self, lens_type):
        """Sets the lens_type of this LensSummary.


        :param lens_type: The lens_type of this LensSummary.
        :type lens_type: LensType
        """

        self._lens_type = lens_type

    @property
    def description(self):
        """Gets the description of this LensSummary.

        The description of the lens.

        :return: The description of this LensSummary.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LensSummary.

        The description of the lens.

        :param description: The description of this LensSummary.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this LensSummary.

        The date and time recorded.

        :return: The created_at of this LensSummary.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LensSummary.

        The date and time recorded.

        :param created_at: The created_at of this LensSummary.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LensSummary.

        The date and time recorded.

        :return: The updated_at of this LensSummary.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LensSummary.

        The date and time recorded.

        :param updated_at: The updated_at of this LensSummary.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def lens_version(self):
        """Gets the lens_version of this LensSummary.


        :return: The lens_version of this LensSummary.
        :rtype: str
        """
        return self._lens_version

    @lens_version.setter
    def lens_version(self, lens_version):
        """Sets the lens_version of this LensSummary.


        :param lens_version: The lens_version of this LensSummary.
        :type lens_version: str
        """

        self._lens_version = lens_version

    @property
    def owner(self):
        """Gets the owner of this LensSummary.

        An Amazon Web Services account ID.

        :return: The owner of this LensSummary.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this LensSummary.

        An Amazon Web Services account ID.

        :param owner: The owner of this LensSummary.
        :type owner: str
        """
        if owner is not None and len(owner) > 12:
            raise ValueError("Invalid value for `owner`, length must be less than or equal to `12`")
        if owner is not None and len(owner) < 12:
            raise ValueError("Invalid value for `owner`, length must be greater than or equal to `12`")
        if owner is not None and not re.search(r'[0-9]{12}', owner):
            raise ValueError("Invalid value for `owner`, must be a follow pattern or equal to `/[0-9]{12}/`")

        self._owner = owner

    @property
    def lens_status(self):
        """Gets the lens_status of this LensSummary.


        :return: The lens_status of this LensSummary.
        :rtype: LensStatus
        """
        return self._lens_status

    @lens_status.setter
    def lens_status(self, lens_status):
        """Sets the lens_status of this LensSummary.


        :param lens_status: The lens_status of this LensSummary.
        :type lens_status: LensStatus
        """

        self._lens_status = lens_status
