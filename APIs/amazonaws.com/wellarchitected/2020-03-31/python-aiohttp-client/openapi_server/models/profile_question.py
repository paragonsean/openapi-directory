# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProfileQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_id: str=None, question_title: str=None, question_description: str=None, question_choices: List=None, selected_choice_ids: List=None, min_selected_choices: int=None, max_selected_choices: int=None):
        """ProfileQuestion - a model defined in OpenAPI

        :param question_id: The question_id of this ProfileQuestion.
        :param question_title: The question_title of this ProfileQuestion.
        :param question_description: The question_description of this ProfileQuestion.
        :param question_choices: The question_choices of this ProfileQuestion.
        :param selected_choice_ids: The selected_choice_ids of this ProfileQuestion.
        :param min_selected_choices: The min_selected_choices of this ProfileQuestion.
        :param max_selected_choices: The max_selected_choices of this ProfileQuestion.
        """
        self.openapi_types = {
            'question_id': str,
            'question_title': str,
            'question_description': str,
            'question_choices': List,
            'selected_choice_ids': List,
            'min_selected_choices': int,
            'max_selected_choices': int
        }

        self.attribute_map = {
            'question_id': 'QuestionId',
            'question_title': 'QuestionTitle',
            'question_description': 'QuestionDescription',
            'question_choices': 'QuestionChoices',
            'selected_choice_ids': 'SelectedChoiceIds',
            'min_selected_choices': 'MinSelectedChoices',
            'max_selected_choices': 'MaxSelectedChoices'
        }

        self._question_id = question_id
        self._question_title = question_title
        self._question_description = question_description
        self._question_choices = question_choices
        self._selected_choice_ids = selected_choice_ids
        self._min_selected_choices = min_selected_choices
        self._max_selected_choices = max_selected_choices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileQuestion of this ProfileQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self):
        """Gets the question_id of this ProfileQuestion.

        The ID of the question.

        :return: The question_id of this ProfileQuestion.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this ProfileQuestion.

        The ID of the question.

        :param question_id: The question_id of this ProfileQuestion.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def question_title(self):
        """Gets the question_title of this ProfileQuestion.

        The title of the question.

        :return: The question_title of this ProfileQuestion.
        :rtype: str
        """
        return self._question_title

    @question_title.setter
    def question_title(self, question_title):
        """Sets the question_title of this ProfileQuestion.

        The title of the question.

        :param question_title: The question_title of this ProfileQuestion.
        :type question_title: str
        """
        if question_title is not None and len(question_title) > 512:
            raise ValueError("Invalid value for `question_title`, length must be less than or equal to `512`")
        if question_title is not None and len(question_title) < 1:
            raise ValueError("Invalid value for `question_title`, length must be greater than or equal to `1`")

        self._question_title = question_title

    @property
    def question_description(self):
        """Gets the question_description of this ProfileQuestion.

        The description of the question.

        :return: The question_description of this ProfileQuestion.
        :rtype: str
        """
        return self._question_description

    @question_description.setter
    def question_description(self, question_description):
        """Sets the question_description of this ProfileQuestion.

        The description of the question.

        :param question_description: The question_description of this ProfileQuestion.
        :type question_description: str
        """
        if question_description is not None and len(question_description) > 1024:
            raise ValueError("Invalid value for `question_description`, length must be less than or equal to `1024`")
        if question_description is not None and len(question_description) < 1:
            raise ValueError("Invalid value for `question_description`, length must be greater than or equal to `1`")

        self._question_description = question_description

    @property
    def question_choices(self):
        """Gets the question_choices of this ProfileQuestion.


        :return: The question_choices of this ProfileQuestion.
        :rtype: List
        """
        return self._question_choices

    @question_choices.setter
    def question_choices(self, question_choices):
        """Sets the question_choices of this ProfileQuestion.


        :param question_choices: The question_choices of this ProfileQuestion.
        :type question_choices: List
        """

        self._question_choices = question_choices

    @property
    def selected_choice_ids(self):
        """Gets the selected_choice_ids of this ProfileQuestion.


        :return: The selected_choice_ids of this ProfileQuestion.
        :rtype: List
        """
        return self._selected_choice_ids

    @selected_choice_ids.setter
    def selected_choice_ids(self, selected_choice_ids):
        """Sets the selected_choice_ids of this ProfileQuestion.


        :param selected_choice_ids: The selected_choice_ids of this ProfileQuestion.
        :type selected_choice_ids: List
        """

        self._selected_choice_ids = selected_choice_ids

    @property
    def min_selected_choices(self):
        """Gets the min_selected_choices of this ProfileQuestion.


        :return: The min_selected_choices of this ProfileQuestion.
        :rtype: int
        """
        return self._min_selected_choices

    @min_selected_choices.setter
    def min_selected_choices(self, min_selected_choices):
        """Sets the min_selected_choices of this ProfileQuestion.


        :param min_selected_choices: The min_selected_choices of this ProfileQuestion.
        :type min_selected_choices: int
        """

        self._min_selected_choices = min_selected_choices

    @property
    def max_selected_choices(self):
        """Gets the max_selected_choices of this ProfileQuestion.


        :return: The max_selected_choices of this ProfileQuestion.
        :rtype: int
        """
        return self._max_selected_choices

    @max_selected_choices.setter
    def max_selected_choices(self, max_selected_choices):
        """Sets the max_selected_choices of this ProfileQuestion.


        :param max_selected_choices: The max_selected_choices of this ProfileQuestion.
        :type max_selected_choices: int
        """

        self._max_selected_choices = max_selected_choices
