# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateProfileInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_name: str=None, profile_description: str=None, profile_questions: List=None, client_request_token: str=None, tags: Dict=None):
        """CreateProfileInput - a model defined in OpenAPI

        :param profile_name: The profile_name of this CreateProfileInput.
        :param profile_description: The profile_description of this CreateProfileInput.
        :param profile_questions: The profile_questions of this CreateProfileInput.
        :param client_request_token: The client_request_token of this CreateProfileInput.
        :param tags: The tags of this CreateProfileInput.
        """
        self.openapi_types = {
            'profile_name': str,
            'profile_description': str,
            'profile_questions': List,
            'client_request_token': str,
            'tags': Dict
        }

        self.attribute_map = {
            'profile_name': 'ProfileName',
            'profile_description': 'ProfileDescription',
            'profile_questions': 'ProfileQuestions',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags'
        }

        self._profile_name = profile_name
        self._profile_description = profile_description
        self._profile_questions = profile_questions
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProfileInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProfileInput of this CreateProfileInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_name(self):
        """Gets the profile_name of this CreateProfileInput.


        :return: The profile_name of this CreateProfileInput.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this CreateProfileInput.


        :param profile_name: The profile_name of this CreateProfileInput.
        :type profile_name: str
        """
        if profile_name is None:
            raise ValueError("Invalid value for `profile_name`, must not be `None`")

        self._profile_name = profile_name

    @property
    def profile_description(self):
        """Gets the profile_description of this CreateProfileInput.


        :return: The profile_description of this CreateProfileInput.
        :rtype: str
        """
        return self._profile_description

    @profile_description.setter
    def profile_description(self, profile_description):
        """Sets the profile_description of this CreateProfileInput.


        :param profile_description: The profile_description of this CreateProfileInput.
        :type profile_description: str
        """
        if profile_description is None:
            raise ValueError("Invalid value for `profile_description`, must not be `None`")

        self._profile_description = profile_description

    @property
    def profile_questions(self):
        """Gets the profile_questions of this CreateProfileInput.


        :return: The profile_questions of this CreateProfileInput.
        :rtype: List
        """
        return self._profile_questions

    @profile_questions.setter
    def profile_questions(self, profile_questions):
        """Sets the profile_questions of this CreateProfileInput.


        :param profile_questions: The profile_questions of this CreateProfileInput.
        :type profile_questions: List
        """
        if profile_questions is None:
            raise ValueError("Invalid value for `profile_questions`, must not be `None`")

        self._profile_questions = profile_questions

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateProfileInput.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :return: The client_request_token of this CreateProfileInput.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateProfileInput.

        <p>A unique case-sensitive string used to ensure that this request is idempotent (executes only once).</p> <p>You should not reuse the same token for other requests. If you retry a request with the same client request token and the same parameters after the original request has completed successfully, the result of the original request is returned.</p> <important> <p>This token is listed as required, however, if you do not specify it, the Amazon Web Services SDKs automatically generate one for you. If you are not using the Amazon Web Services SDK or the CLI, you must provide this token or the request will fail.</p> </important>

        :param client_request_token: The client_request_token of this CreateProfileInput.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 2048:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `2048`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateProfileInput.


        :return: The tags of this CreateProfileInput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateProfileInput.


        :param tags: The tags of this CreateProfileInput.
        :type tags: Dict
        """

        self._tags = tags
