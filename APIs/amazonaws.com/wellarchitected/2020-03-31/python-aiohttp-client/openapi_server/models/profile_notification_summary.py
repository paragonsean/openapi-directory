# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile_notification_type import ProfileNotificationType
import re
from openapi_server import util


class ProfileNotificationSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_profile_version: str=None, latest_profile_version: str=None, type: ProfileNotificationType=None, profile_arn: str=None, profile_name: str=None, workload_id: str=None, workload_name: str=None):
        """ProfileNotificationSummary - a model defined in OpenAPI

        :param current_profile_version: The current_profile_version of this ProfileNotificationSummary.
        :param latest_profile_version: The latest_profile_version of this ProfileNotificationSummary.
        :param type: The type of this ProfileNotificationSummary.
        :param profile_arn: The profile_arn of this ProfileNotificationSummary.
        :param profile_name: The profile_name of this ProfileNotificationSummary.
        :param workload_id: The workload_id of this ProfileNotificationSummary.
        :param workload_name: The workload_name of this ProfileNotificationSummary.
        """
        self.openapi_types = {
            'current_profile_version': str,
            'latest_profile_version': str,
            'type': ProfileNotificationType,
            'profile_arn': str,
            'profile_name': str,
            'workload_id': str,
            'workload_name': str
        }

        self.attribute_map = {
            'current_profile_version': 'CurrentProfileVersion',
            'latest_profile_version': 'LatestProfileVersion',
            'type': 'Type',
            'profile_arn': 'ProfileArn',
            'profile_name': 'ProfileName',
            'workload_id': 'WorkloadId',
            'workload_name': 'WorkloadName'
        }

        self._current_profile_version = current_profile_version
        self._latest_profile_version = latest_profile_version
        self._type = type
        self._profile_arn = profile_arn
        self._profile_name = profile_name
        self._workload_id = workload_id
        self._workload_name = workload_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfileNotificationSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProfileNotificationSummary of this ProfileNotificationSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_profile_version(self):
        """Gets the current_profile_version of this ProfileNotificationSummary.


        :return: The current_profile_version of this ProfileNotificationSummary.
        :rtype: str
        """
        return self._current_profile_version

    @current_profile_version.setter
    def current_profile_version(self, current_profile_version):
        """Sets the current_profile_version of this ProfileNotificationSummary.


        :param current_profile_version: The current_profile_version of this ProfileNotificationSummary.
        :type current_profile_version: str
        """

        self._current_profile_version = current_profile_version

    @property
    def latest_profile_version(self):
        """Gets the latest_profile_version of this ProfileNotificationSummary.


        :return: The latest_profile_version of this ProfileNotificationSummary.
        :rtype: str
        """
        return self._latest_profile_version

    @latest_profile_version.setter
    def latest_profile_version(self, latest_profile_version):
        """Sets the latest_profile_version of this ProfileNotificationSummary.


        :param latest_profile_version: The latest_profile_version of this ProfileNotificationSummary.
        :type latest_profile_version: str
        """

        self._latest_profile_version = latest_profile_version

    @property
    def type(self):
        """Gets the type of this ProfileNotificationSummary.


        :return: The type of this ProfileNotificationSummary.
        :rtype: ProfileNotificationType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProfileNotificationSummary.


        :param type: The type of this ProfileNotificationSummary.
        :type type: ProfileNotificationType
        """

        self._type = type

    @property
    def profile_arn(self):
        """Gets the profile_arn of this ProfileNotificationSummary.


        :return: The profile_arn of this ProfileNotificationSummary.
        :rtype: str
        """
        return self._profile_arn

    @profile_arn.setter
    def profile_arn(self, profile_arn):
        """Sets the profile_arn of this ProfileNotificationSummary.


        :param profile_arn: The profile_arn of this ProfileNotificationSummary.
        :type profile_arn: str
        """

        self._profile_arn = profile_arn

    @property
    def profile_name(self):
        """Gets the profile_name of this ProfileNotificationSummary.


        :return: The profile_name of this ProfileNotificationSummary.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this ProfileNotificationSummary.


        :param profile_name: The profile_name of this ProfileNotificationSummary.
        :type profile_name: str
        """

        self._profile_name = profile_name

    @property
    def workload_id(self):
        """Gets the workload_id of this ProfileNotificationSummary.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this ProfileNotificationSummary.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this ProfileNotificationSummary.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this ProfileNotificationSummary.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def workload_name(self):
        """Gets the workload_name of this ProfileNotificationSummary.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this ProfileNotificationSummary.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this ProfileNotificationSummary.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this ProfileNotificationSummary.
        :type workload_name: str
        """
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name
