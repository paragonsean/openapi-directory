# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BestPractice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice_id: str=None, choice_title: str=None):
        """BestPractice - a model defined in OpenAPI

        :param choice_id: The choice_id of this BestPractice.
        :param choice_title: The choice_title of this BestPractice.
        """
        self.openapi_types = {
            'choice_id': str,
            'choice_title': str
        }

        self.attribute_map = {
            'choice_id': 'ChoiceId',
            'choice_title': 'ChoiceTitle'
        }

        self._choice_id = choice_id
        self._choice_title = choice_title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BestPractice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BestPractice of this BestPractice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice_id(self):
        """Gets the choice_id of this BestPractice.

        The ID of a choice.

        :return: The choice_id of this BestPractice.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this BestPractice.

        The ID of a choice.

        :param choice_id: The choice_id of this BestPractice.
        :type choice_id: str
        """
        if choice_id is not None and len(choice_id) > 64:
            raise ValueError("Invalid value for `choice_id`, length must be less than or equal to `64`")
        if choice_id is not None and len(choice_id) < 1:
            raise ValueError("Invalid value for `choice_id`, length must be greater than or equal to `1`")

        self._choice_id = choice_id

    @property
    def choice_title(self):
        """Gets the choice_title of this BestPractice.

        The title of a choice.

        :return: The choice_title of this BestPractice.
        :rtype: str
        """
        return self._choice_title

    @choice_title.setter
    def choice_title(self, choice_title):
        """Sets the choice_title of this BestPractice.

        The title of a choice.

        :param choice_title: The choice_title of this BestPractice.
        :type choice_title: str
        """
        if choice_title is not None and len(choice_title) > 512:
            raise ValueError("Invalid value for `choice_title`, length must be less than or equal to `512`")
        if choice_title is not None and len(choice_title) < 1:
            raise ValueError("Invalid value for `choice_title`, length must be greater than or equal to `1`")

        self._choice_title = choice_title
