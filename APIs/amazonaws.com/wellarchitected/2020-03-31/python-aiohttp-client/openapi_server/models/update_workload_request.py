# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_workload_request_discovery_config import CreateWorkloadRequestDiscoveryConfig
import re
from openapi_server import util


class UpdateWorkloadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workload_name: str=None, description: str=None, environment: str=None, account_ids: List[str]=None, aws_regions: List[str]=None, non_aws_regions: List[str]=None, pillar_priorities: List[str]=None, architectural_design: str=None, review_owner: str=None, is_review_owner_update_acknowledged: bool=None, industry_type: str=None, industry: str=None, notes: str=None, improvement_status: str=None, discovery_config: CreateWorkloadRequestDiscoveryConfig=None, applications: List[str]=None):
        """UpdateWorkloadRequest - a model defined in OpenAPI

        :param workload_name: The workload_name of this UpdateWorkloadRequest.
        :param description: The description of this UpdateWorkloadRequest.
        :param environment: The environment of this UpdateWorkloadRequest.
        :param account_ids: The account_ids of this UpdateWorkloadRequest.
        :param aws_regions: The aws_regions of this UpdateWorkloadRequest.
        :param non_aws_regions: The non_aws_regions of this UpdateWorkloadRequest.
        :param pillar_priorities: The pillar_priorities of this UpdateWorkloadRequest.
        :param architectural_design: The architectural_design of this UpdateWorkloadRequest.
        :param review_owner: The review_owner of this UpdateWorkloadRequest.
        :param is_review_owner_update_acknowledged: The is_review_owner_update_acknowledged of this UpdateWorkloadRequest.
        :param industry_type: The industry_type of this UpdateWorkloadRequest.
        :param industry: The industry of this UpdateWorkloadRequest.
        :param notes: The notes of this UpdateWorkloadRequest.
        :param improvement_status: The improvement_status of this UpdateWorkloadRequest.
        :param discovery_config: The discovery_config of this UpdateWorkloadRequest.
        :param applications: The applications of this UpdateWorkloadRequest.
        """
        self.openapi_types = {
            'workload_name': str,
            'description': str,
            'environment': str,
            'account_ids': List[str],
            'aws_regions': List[str],
            'non_aws_regions': List[str],
            'pillar_priorities': List[str],
            'architectural_design': str,
            'review_owner': str,
            'is_review_owner_update_acknowledged': bool,
            'industry_type': str,
            'industry': str,
            'notes': str,
            'improvement_status': str,
            'discovery_config': CreateWorkloadRequestDiscoveryConfig,
            'applications': List[str]
        }

        self.attribute_map = {
            'workload_name': 'WorkloadName',
            'description': 'Description',
            'environment': 'Environment',
            'account_ids': 'AccountIds',
            'aws_regions': 'AwsRegions',
            'non_aws_regions': 'NonAwsRegions',
            'pillar_priorities': 'PillarPriorities',
            'architectural_design': 'ArchitecturalDesign',
            'review_owner': 'ReviewOwner',
            'is_review_owner_update_acknowledged': 'IsReviewOwnerUpdateAcknowledged',
            'industry_type': 'IndustryType',
            'industry': 'Industry',
            'notes': 'Notes',
            'improvement_status': 'ImprovementStatus',
            'discovery_config': 'DiscoveryConfig',
            'applications': 'Applications'
        }

        self._workload_name = workload_name
        self._description = description
        self._environment = environment
        self._account_ids = account_ids
        self._aws_regions = aws_regions
        self._non_aws_regions = non_aws_regions
        self._pillar_priorities = pillar_priorities
        self._architectural_design = architectural_design
        self._review_owner = review_owner
        self._is_review_owner_update_acknowledged = is_review_owner_update_acknowledged
        self._industry_type = industry_type
        self._industry = industry
        self._notes = notes
        self._improvement_status = improvement_status
        self._discovery_config = discovery_config
        self._applications = applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateWorkloadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateWorkload_request of this UpdateWorkloadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workload_name(self):
        """Gets the workload_name of this UpdateWorkloadRequest.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this UpdateWorkloadRequest.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this UpdateWorkloadRequest.
        :type workload_name: str
        """
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name

    @property
    def description(self):
        """Gets the description of this UpdateWorkloadRequest.

        The description for the workload.

        :return: The description of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateWorkloadRequest.

        The description for the workload.

        :param description: The description of this UpdateWorkloadRequest.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")
        if description is not None and len(description) < 3:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `3`")

        self._description = description

    @property
    def environment(self):
        """Gets the environment of this UpdateWorkloadRequest.

        The environment for the workload.

        :return: The environment of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this UpdateWorkloadRequest.

        The environment for the workload.

        :param environment: The environment of this UpdateWorkloadRequest.
        :type environment: str
        """
        allowed_values = ["PRODUCTION", "PREPRODUCTION"]  # noqa: E501
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def account_ids(self):
        """Gets the account_ids of this UpdateWorkloadRequest.

        The list of Amazon Web Services account IDs associated with the workload.

        :return: The account_ids of this UpdateWorkloadRequest.
        :rtype: List[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this UpdateWorkloadRequest.

        The list of Amazon Web Services account IDs associated with the workload.

        :param account_ids: The account_ids of this UpdateWorkloadRequest.
        :type account_ids: List[str]
        """
        if account_ids is not None and len(account_ids) > 100:
            raise ValueError("Invalid value for `account_ids`, number of items must be less than or equal to `100`")

        self._account_ids = account_ids

    @property
    def aws_regions(self):
        """Gets the aws_regions of this UpdateWorkloadRequest.

        The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.

        :return: The aws_regions of this UpdateWorkloadRequest.
        :rtype: List[str]
        """
        return self._aws_regions

    @aws_regions.setter
    def aws_regions(self, aws_regions):
        """Sets the aws_regions of this UpdateWorkloadRequest.

        The list of Amazon Web Services Regions associated with the workload, for example, <code>us-east-2</code>, or <code>ca-central-1</code>.

        :param aws_regions: The aws_regions of this UpdateWorkloadRequest.
        :type aws_regions: List[str]
        """
        if aws_regions is not None and len(aws_regions) > 50:
            raise ValueError("Invalid value for `aws_regions`, number of items must be less than or equal to `50`")

        self._aws_regions = aws_regions

    @property
    def non_aws_regions(self):
        """Gets the non_aws_regions of this UpdateWorkloadRequest.

         The list of non-Amazon Web Services Regions associated with the workload.

        :return: The non_aws_regions of this UpdateWorkloadRequest.
        :rtype: List[str]
        """
        return self._non_aws_regions

    @non_aws_regions.setter
    def non_aws_regions(self, non_aws_regions):
        """Sets the non_aws_regions of this UpdateWorkloadRequest.

         The list of non-Amazon Web Services Regions associated with the workload.

        :param non_aws_regions: The non_aws_regions of this UpdateWorkloadRequest.
        :type non_aws_regions: List[str]
        """
        if non_aws_regions is not None and len(non_aws_regions) > 5:
            raise ValueError("Invalid value for `non_aws_regions`, number of items must be less than or equal to `5`")

        self._non_aws_regions = non_aws_regions

    @property
    def pillar_priorities(self):
        """Gets the pillar_priorities of this UpdateWorkloadRequest.

        The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.

        :return: The pillar_priorities of this UpdateWorkloadRequest.
        :rtype: List[str]
        """
        return self._pillar_priorities

    @pillar_priorities.setter
    def pillar_priorities(self, pillar_priorities):
        """Sets the pillar_priorities of this UpdateWorkloadRequest.

        The priorities of the pillars, which are used to order items in the improvement plan. Each pillar is represented by its <a>PillarReviewSummary$PillarId</a>.

        :param pillar_priorities: The pillar_priorities of this UpdateWorkloadRequest.
        :type pillar_priorities: List[str]
        """

        self._pillar_priorities = pillar_priorities

    @property
    def architectural_design(self):
        """Gets the architectural_design of this UpdateWorkloadRequest.

        The URL of the architectural design for the workload.

        :return: The architectural_design of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._architectural_design

    @architectural_design.setter
    def architectural_design(self, architectural_design):
        """Sets the architectural_design of this UpdateWorkloadRequest.

        The URL of the architectural design for the workload.

        :param architectural_design: The architectural_design of this UpdateWorkloadRequest.
        :type architectural_design: str
        """
        if architectural_design is not None and len(architectural_design) > 2048:
            raise ValueError("Invalid value for `architectural_design`, length must be less than or equal to `2048`")
        if architectural_design is not None and not re.search(r'^(|(https?|ftp):\/\/[^\s\/$.?#].[^\s]*)$', architectural_design):
            raise ValueError("Invalid value for `architectural_design`, must be a follow pattern or equal to `/^(|(https?|ftp):\/\/[^\s\/$.?#].[^\s]*)$/`")

        self._architectural_design = architectural_design

    @property
    def review_owner(self):
        """Gets the review_owner of this UpdateWorkloadRequest.

        The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.

        :return: The review_owner of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._review_owner

    @review_owner.setter
    def review_owner(self, review_owner):
        """Sets the review_owner of this UpdateWorkloadRequest.

        The review owner of the workload. The name, email address, or identifier for the primary group or individual that owns the workload review process.

        :param review_owner: The review_owner of this UpdateWorkloadRequest.
        :type review_owner: str
        """
        if review_owner is not None and len(review_owner) > 255:
            raise ValueError("Invalid value for `review_owner`, length must be less than or equal to `255`")
        if review_owner is not None and len(review_owner) < 3:
            raise ValueError("Invalid value for `review_owner`, length must be greater than or equal to `3`")

        self._review_owner = review_owner

    @property
    def is_review_owner_update_acknowledged(self):
        """Gets the is_review_owner_update_acknowledged of this UpdateWorkloadRequest.

        <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>

        :return: The is_review_owner_update_acknowledged of this UpdateWorkloadRequest.
        :rtype: bool
        """
        return self._is_review_owner_update_acknowledged

    @is_review_owner_update_acknowledged.setter
    def is_review_owner_update_acknowledged(self, is_review_owner_update_acknowledged):
        """Sets the is_review_owner_update_acknowledged of this UpdateWorkloadRequest.

        <p>Flag indicating whether the workload owner has acknowledged that the <i>Review owner</i> field is required.</p> <p>If a <b>Review owner</b> is not added to the workload within 60 days of acknowledgement, access to the workload is restricted until an owner is added.</p>

        :param is_review_owner_update_acknowledged: The is_review_owner_update_acknowledged of this UpdateWorkloadRequest.
        :type is_review_owner_update_acknowledged: bool
        """

        self._is_review_owner_update_acknowledged = is_review_owner_update_acknowledged

    @property
    def industry_type(self):
        """Gets the industry_type of this UpdateWorkloadRequest.

        <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>

        :return: The industry_type of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._industry_type

    @industry_type.setter
    def industry_type(self, industry_type):
        """Sets the industry_type of this UpdateWorkloadRequest.

        <p>The industry type for the workload.</p> <p>If specified, must be one of the following:</p> <ul> <li> <p> <code>Agriculture</code> </p> </li> <li> <p> <code>Automobile</code> </p> </li> <li> <p> <code>Defense</code> </p> </li> <li> <p> <code>Design and Engineering</code> </p> </li> <li> <p> <code>Digital Advertising</code> </p> </li> <li> <p> <code>Education</code> </p> </li> <li> <p> <code>Environmental Protection</code> </p> </li> <li> <p> <code>Financial Services</code> </p> </li> <li> <p> <code>Gaming</code> </p> </li> <li> <p> <code>General Public Services</code> </p> </li> <li> <p> <code>Healthcare</code> </p> </li> <li> <p> <code>Hospitality</code> </p> </li> <li> <p> <code>InfoTech</code> </p> </li> <li> <p> <code>Justice and Public Safety</code> </p> </li> <li> <p> <code>Life Sciences</code> </p> </li> <li> <p> <code>Manufacturing</code> </p> </li> <li> <p> <code>Media &amp; Entertainment</code> </p> </li> <li> <p> <code>Mining &amp; Resources</code> </p> </li> <li> <p> <code>Oil &amp; Gas</code> </p> </li> <li> <p> <code>Power &amp; Utilities</code> </p> </li> <li> <p> <code>Professional Services</code> </p> </li> <li> <p> <code>Real Estate &amp; Construction</code> </p> </li> <li> <p> <code>Retail &amp; Wholesale</code> </p> </li> <li> <p> <code>Social Protection</code> </p> </li> <li> <p> <code>Telecommunications</code> </p> </li> <li> <p> <code>Travel, Transportation &amp; Logistics</code> </p> </li> <li> <p> <code>Other</code> </p> </li> </ul>

        :param industry_type: The industry_type of this UpdateWorkloadRequest.
        :type industry_type: str
        """
        if industry_type is not None and len(industry_type) > 100:
            raise ValueError("Invalid value for `industry_type`, length must be less than or equal to `100`")

        self._industry_type = industry_type

    @property
    def industry(self):
        """Gets the industry of this UpdateWorkloadRequest.

        The industry for the workload.

        :return: The industry of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this UpdateWorkloadRequest.

        The industry for the workload.

        :param industry: The industry of this UpdateWorkloadRequest.
        :type industry: str
        """
        if industry is not None and len(industry) > 100:
            raise ValueError("Invalid value for `industry`, length must be less than or equal to `100`")

        self._industry = industry

    @property
    def notes(self):
        """Gets the notes of this UpdateWorkloadRequest.

        The notes associated with the workload.

        :return: The notes of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateWorkloadRequest.

        The notes associated with the workload.

        :param notes: The notes of this UpdateWorkloadRequest.
        :type notes: str
        """
        if notes is not None and len(notes) > 2084:
            raise ValueError("Invalid value for `notes`, length must be less than or equal to `2084`")

        self._notes = notes

    @property
    def improvement_status(self):
        """Gets the improvement_status of this UpdateWorkloadRequest.

        The improvement status for a workload.

        :return: The improvement_status of this UpdateWorkloadRequest.
        :rtype: str
        """
        return self._improvement_status

    @improvement_status.setter
    def improvement_status(self, improvement_status):
        """Sets the improvement_status of this UpdateWorkloadRequest.

        The improvement status for a workload.

        :param improvement_status: The improvement_status of this UpdateWorkloadRequest.
        :type improvement_status: str
        """
        allowed_values = ["NOT_APPLICABLE", "NOT_STARTED", "IN_PROGRESS", "COMPLETE", "RISK_ACKNOWLEDGED"]  # noqa: E501
        if improvement_status not in allowed_values:
            raise ValueError(
                "Invalid value for `improvement_status` ({0}), must be one of {1}"
                .format(improvement_status, allowed_values)
            )

        self._improvement_status = improvement_status

    @property
    def discovery_config(self):
        """Gets the discovery_config of this UpdateWorkloadRequest.


        :return: The discovery_config of this UpdateWorkloadRequest.
        :rtype: CreateWorkloadRequestDiscoveryConfig
        """
        return self._discovery_config

    @discovery_config.setter
    def discovery_config(self, discovery_config):
        """Sets the discovery_config of this UpdateWorkloadRequest.


        :param discovery_config: The discovery_config of this UpdateWorkloadRequest.
        :type discovery_config: CreateWorkloadRequestDiscoveryConfig
        """

        self._discovery_config = discovery_config

    @property
    def applications(self):
        """Gets the applications of this UpdateWorkloadRequest.

        List of AppRegistry application ARNs to associate to the workload.

        :return: The applications of this UpdateWorkloadRequest.
        :rtype: List[str]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this UpdateWorkloadRequest.

        List of AppRegistry application ARNs to associate to the workload.

        :param applications: The applications of this UpdateWorkloadRequest.
        :type applications: List[str]
        """
        if applications is not None and len(applications) > 1:
            raise ValueError("Invalid value for `applications`, number of items must be less than or equal to `1`")

        self._applications = applications
