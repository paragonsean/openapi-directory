# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_type import MetricType
import re
from openapi_server import util


class ConsolidatedReportMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_type: MetricType=None, risk_counts: Dict[str, int]=None, workload_id: str=None, workload_name: str=None, workload_arn: str=None, updated_at: datetime=None, lenses: List=None, lenses_applied_count: int=None):
        """ConsolidatedReportMetric - a model defined in OpenAPI

        :param metric_type: The metric_type of this ConsolidatedReportMetric.
        :param risk_counts: The risk_counts of this ConsolidatedReportMetric.
        :param workload_id: The workload_id of this ConsolidatedReportMetric.
        :param workload_name: The workload_name of this ConsolidatedReportMetric.
        :param workload_arn: The workload_arn of this ConsolidatedReportMetric.
        :param updated_at: The updated_at of this ConsolidatedReportMetric.
        :param lenses: The lenses of this ConsolidatedReportMetric.
        :param lenses_applied_count: The lenses_applied_count of this ConsolidatedReportMetric.
        """
        self.openapi_types = {
            'metric_type': MetricType,
            'risk_counts': Dict[str, int],
            'workload_id': str,
            'workload_name': str,
            'workload_arn': str,
            'updated_at': datetime,
            'lenses': List,
            'lenses_applied_count': int
        }

        self.attribute_map = {
            'metric_type': 'MetricType',
            'risk_counts': 'RiskCounts',
            'workload_id': 'WorkloadId',
            'workload_name': 'WorkloadName',
            'workload_arn': 'WorkloadArn',
            'updated_at': 'UpdatedAt',
            'lenses': 'Lenses',
            'lenses_applied_count': 'LensesAppliedCount'
        }

        self._metric_type = metric_type
        self._risk_counts = risk_counts
        self._workload_id = workload_id
        self._workload_name = workload_name
        self._workload_arn = workload_arn
        self._updated_at = updated_at
        self._lenses = lenses
        self._lenses_applied_count = lenses_applied_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsolidatedReportMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsolidatedReportMetric of this ConsolidatedReportMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_type(self):
        """Gets the metric_type of this ConsolidatedReportMetric.


        :return: The metric_type of this ConsolidatedReportMetric.
        :rtype: MetricType
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this ConsolidatedReportMetric.


        :param metric_type: The metric_type of this ConsolidatedReportMetric.
        :type metric_type: MetricType
        """

        self._metric_type = metric_type

    @property
    def risk_counts(self):
        """Gets the risk_counts of this ConsolidatedReportMetric.

        A map from risk names to the count of how many questions have that rating.

        :return: The risk_counts of this ConsolidatedReportMetric.
        :rtype: Dict[str, int]
        """
        return self._risk_counts

    @risk_counts.setter
    def risk_counts(self, risk_counts):
        """Sets the risk_counts of this ConsolidatedReportMetric.

        A map from risk names to the count of how many questions have that rating.

        :param risk_counts: The risk_counts of this ConsolidatedReportMetric.
        :type risk_counts: Dict[str, int]
        """

        self._risk_counts = risk_counts

    @property
    def workload_id(self):
        """Gets the workload_id of this ConsolidatedReportMetric.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this ConsolidatedReportMetric.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this ConsolidatedReportMetric.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this ConsolidatedReportMetric.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id

    @property
    def workload_name(self):
        """Gets the workload_name of this ConsolidatedReportMetric.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this ConsolidatedReportMetric.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this ConsolidatedReportMetric.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this ConsolidatedReportMetric.
        :type workload_name: str
        """
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name

    @property
    def workload_arn(self):
        """Gets the workload_arn of this ConsolidatedReportMetric.

        The ARN for the workload.

        :return: The workload_arn of this ConsolidatedReportMetric.
        :rtype: str
        """
        return self._workload_arn

    @workload_arn.setter
    def workload_arn(self, workload_arn):
        """Sets the workload_arn of this ConsolidatedReportMetric.

        The ARN for the workload.

        :param workload_arn: The workload_arn of this ConsolidatedReportMetric.
        :type workload_arn: str
        """

        self._workload_arn = workload_arn

    @property
    def updated_at(self):
        """Gets the updated_at of this ConsolidatedReportMetric.

        The date and time recorded.

        :return: The updated_at of this ConsolidatedReportMetric.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConsolidatedReportMetric.

        The date and time recorded.

        :param updated_at: The updated_at of this ConsolidatedReportMetric.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def lenses(self):
        """Gets the lenses of this ConsolidatedReportMetric.


        :return: The lenses of this ConsolidatedReportMetric.
        :rtype: List
        """
        return self._lenses

    @lenses.setter
    def lenses(self, lenses):
        """Sets the lenses of this ConsolidatedReportMetric.


        :param lenses: The lenses of this ConsolidatedReportMetric.
        :type lenses: List
        """

        self._lenses = lenses

    @property
    def lenses_applied_count(self):
        """Gets the lenses_applied_count of this ConsolidatedReportMetric.


        :return: The lenses_applied_count of this ConsolidatedReportMetric.
        :rtype: int
        """
        return self._lenses_applied_count

    @lenses_applied_count.setter
    def lenses_applied_count(self, lenses_applied_count):
        """Sets the lenses_applied_count of this ConsolidatedReportMetric.


        :param lenses_applied_count: The lenses_applied_count of this ConsolidatedReportMetric.
        :type lenses_applied_count: int
        """

        self._lenses_applied_count = lenses_applied_count
