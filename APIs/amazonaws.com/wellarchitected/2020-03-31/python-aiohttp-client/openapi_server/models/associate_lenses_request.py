# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateLensesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lens_aliases: List[str]=None):
        """AssociateLensesRequest - a model defined in OpenAPI

        :param lens_aliases: The lens_aliases of this AssociateLensesRequest.
        """
        self.openapi_types = {
            'lens_aliases': List[str]
        }

        self.attribute_map = {
            'lens_aliases': 'LensAliases'
        }

        self._lens_aliases = lens_aliases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateLensesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateLenses_request of this AssociateLensesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lens_aliases(self):
        """Gets the lens_aliases of this AssociateLensesRequest.

        <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>

        :return: The lens_aliases of this AssociateLensesRequest.
        :rtype: List[str]
        """
        return self._lens_aliases

    @lens_aliases.setter
    def lens_aliases(self, lens_aliases):
        """Sets the lens_aliases of this AssociateLensesRequest.

        <p>List of lens aliases to associate or disassociate with a workload. Up to 10 lenses can be specified.</p> <p>Identify a lens using its <a>LensSummary$LensAlias</a>.</p>

        :param lens_aliases: The lens_aliases of this AssociateLensesRequest.
        :type lens_aliases: List[str]
        """
        if lens_aliases is None:
            raise ValueError("Invalid value for `lens_aliases`, must not be `None`")
        if lens_aliases is not None and len(lens_aliases) < 1:
            raise ValueError("Invalid value for `lens_aliases`, number of items must be greater than or equal to `1`")

        self._lens_aliases = lens_aliases
