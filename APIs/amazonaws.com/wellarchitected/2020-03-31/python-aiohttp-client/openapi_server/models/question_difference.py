# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.difference_status import DifferenceStatus
from openapi_server import util


class QuestionDifference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_id: str=None, question_title: str=None, difference_status: DifferenceStatus=None):
        """QuestionDifference - a model defined in OpenAPI

        :param question_id: The question_id of this QuestionDifference.
        :param question_title: The question_title of this QuestionDifference.
        :param difference_status: The difference_status of this QuestionDifference.
        """
        self.openapi_types = {
            'question_id': str,
            'question_title': str,
            'difference_status': DifferenceStatus
        }

        self.attribute_map = {
            'question_id': 'QuestionId',
            'question_title': 'QuestionTitle',
            'difference_status': 'DifferenceStatus'
        }

        self._question_id = question_id
        self._question_title = question_title
        self._difference_status = difference_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionDifference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuestionDifference of this QuestionDifference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self):
        """Gets the question_id of this QuestionDifference.

        The ID of the question.

        :return: The question_id of this QuestionDifference.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this QuestionDifference.

        The ID of the question.

        :param question_id: The question_id of this QuestionDifference.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def question_title(self):
        """Gets the question_title of this QuestionDifference.

        The title of the question.

        :return: The question_title of this QuestionDifference.
        :rtype: str
        """
        return self._question_title

    @question_title.setter
    def question_title(self, question_title):
        """Sets the question_title of this QuestionDifference.

        The title of the question.

        :param question_title: The question_title of this QuestionDifference.
        :type question_title: str
        """
        if question_title is not None and len(question_title) > 512:
            raise ValueError("Invalid value for `question_title`, length must be less than or equal to `512`")
        if question_title is not None and len(question_title) < 1:
            raise ValueError("Invalid value for `question_title`, length must be greater than or equal to `1`")

        self._question_title = question_title

    @property
    def difference_status(self):
        """Gets the difference_status of this QuestionDifference.


        :return: The difference_status of this QuestionDifference.
        :rtype: DifferenceStatus
        """
        return self._difference_status

    @difference_status.setter
    def difference_status(self, difference_status):
        """Sets the difference_status of this QuestionDifference.


        :param difference_status: The difference_status of this QuestionDifference.
        :type difference_status: DifferenceStatus
        """

        self._difference_status = difference_status
