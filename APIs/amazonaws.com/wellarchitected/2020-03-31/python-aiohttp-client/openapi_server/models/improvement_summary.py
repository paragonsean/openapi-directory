# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.risk import Risk
from openapi_server import util


class ImprovementSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, question_id: str=None, pillar_id: str=None, question_title: str=None, risk: Risk=None, improvement_plan_url: str=None, improvement_plans: List=None):
        """ImprovementSummary - a model defined in OpenAPI

        :param question_id: The question_id of this ImprovementSummary.
        :param pillar_id: The pillar_id of this ImprovementSummary.
        :param question_title: The question_title of this ImprovementSummary.
        :param risk: The risk of this ImprovementSummary.
        :param improvement_plan_url: The improvement_plan_url of this ImprovementSummary.
        :param improvement_plans: The improvement_plans of this ImprovementSummary.
        """
        self.openapi_types = {
            'question_id': str,
            'pillar_id': str,
            'question_title': str,
            'risk': Risk,
            'improvement_plan_url': str,
            'improvement_plans': List
        }

        self.attribute_map = {
            'question_id': 'QuestionId',
            'pillar_id': 'PillarId',
            'question_title': 'QuestionTitle',
            'risk': 'Risk',
            'improvement_plan_url': 'ImprovementPlanUrl',
            'improvement_plans': 'ImprovementPlans'
        }

        self._question_id = question_id
        self._pillar_id = pillar_id
        self._question_title = question_title
        self._risk = risk
        self._improvement_plan_url = improvement_plan_url
        self._improvement_plans = improvement_plans

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImprovementSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImprovementSummary of this ImprovementSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def question_id(self):
        """Gets the question_id of this ImprovementSummary.

        The ID of the question.

        :return: The question_id of this ImprovementSummary.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this ImprovementSummary.

        The ID of the question.

        :param question_id: The question_id of this ImprovementSummary.
        :type question_id: str
        """
        if question_id is not None and len(question_id) > 128:
            raise ValueError("Invalid value for `question_id`, length must be less than or equal to `128`")
        if question_id is not None and len(question_id) < 1:
            raise ValueError("Invalid value for `question_id`, length must be greater than or equal to `1`")

        self._question_id = question_id

    @property
    def pillar_id(self):
        """Gets the pillar_id of this ImprovementSummary.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :return: The pillar_id of this ImprovementSummary.
        :rtype: str
        """
        return self._pillar_id

    @pillar_id.setter
    def pillar_id(self, pillar_id):
        """Sets the pillar_id of this ImprovementSummary.

        <p>The ID used to identify a pillar, for example, <code>security</code>.</p> <p>A pillar is identified by its <a>PillarReviewSummary$PillarId</a>.</p>

        :param pillar_id: The pillar_id of this ImprovementSummary.
        :type pillar_id: str
        """
        if pillar_id is not None and len(pillar_id) > 64:
            raise ValueError("Invalid value for `pillar_id`, length must be less than or equal to `64`")
        if pillar_id is not None and len(pillar_id) < 1:
            raise ValueError("Invalid value for `pillar_id`, length must be greater than or equal to `1`")

        self._pillar_id = pillar_id

    @property
    def question_title(self):
        """Gets the question_title of this ImprovementSummary.

        The title of the question.

        :return: The question_title of this ImprovementSummary.
        :rtype: str
        """
        return self._question_title

    @question_title.setter
    def question_title(self, question_title):
        """Sets the question_title of this ImprovementSummary.

        The title of the question.

        :param question_title: The question_title of this ImprovementSummary.
        :type question_title: str
        """
        if question_title is not None and len(question_title) > 512:
            raise ValueError("Invalid value for `question_title`, length must be less than or equal to `512`")
        if question_title is not None and len(question_title) < 1:
            raise ValueError("Invalid value for `question_title`, length must be greater than or equal to `1`")

        self._question_title = question_title

    @property
    def risk(self):
        """Gets the risk of this ImprovementSummary.


        :return: The risk of this ImprovementSummary.
        :rtype: Risk
        """
        return self._risk

    @risk.setter
    def risk(self, risk):
        """Sets the risk of this ImprovementSummary.


        :param risk: The risk of this ImprovementSummary.
        :type risk: Risk
        """

        self._risk = risk

    @property
    def improvement_plan_url(self):
        """Gets the improvement_plan_url of this ImprovementSummary.

        <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>

        :return: The improvement_plan_url of this ImprovementSummary.
        :rtype: str
        """
        return self._improvement_plan_url

    @improvement_plan_url.setter
    def improvement_plan_url(self, improvement_plan_url):
        """Sets the improvement_plan_url of this ImprovementSummary.

        <p>The improvement plan URL for a question in an Amazon Web Services official lenses.</p> <p>This value is only available if the question has been answered.</p> <p>This value does not apply to custom lenses.</p>

        :param improvement_plan_url: The improvement_plan_url of this ImprovementSummary.
        :type improvement_plan_url: str
        """
        if improvement_plan_url is not None and len(improvement_plan_url) > 2048:
            raise ValueError("Invalid value for `improvement_plan_url`, length must be less than or equal to `2048`")
        if improvement_plan_url is not None and len(improvement_plan_url) < 1:
            raise ValueError("Invalid value for `improvement_plan_url`, length must be greater than or equal to `1`")

        self._improvement_plan_url = improvement_plan_url

    @property
    def improvement_plans(self):
        """Gets the improvement_plans of this ImprovementSummary.


        :return: The improvement_plans of this ImprovementSummary.
        :rtype: List
        """
        return self._improvement_plans

    @improvement_plans.setter
    def improvement_plans(self, improvement_plans):
        """Sets the improvement_plans of this ImprovementSummary.


        :param improvement_plans: The improvement_plans of this ImprovementSummary.
        :type improvement_plans: List
        """

        self._improvement_plans = improvement_plans
