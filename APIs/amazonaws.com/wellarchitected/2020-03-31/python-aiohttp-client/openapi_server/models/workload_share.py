# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_type import PermissionType
from openapi_server.models.share_status import ShareStatus
import re
from openapi_server import util


class WorkloadShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, share_id: str=None, shared_by: str=None, shared_with: str=None, permission_type: PermissionType=None, status: ShareStatus=None, workload_name: str=None, workload_id: str=None):
        """WorkloadShare - a model defined in OpenAPI

        :param share_id: The share_id of this WorkloadShare.
        :param shared_by: The shared_by of this WorkloadShare.
        :param shared_with: The shared_with of this WorkloadShare.
        :param permission_type: The permission_type of this WorkloadShare.
        :param status: The status of this WorkloadShare.
        :param workload_name: The workload_name of this WorkloadShare.
        :param workload_id: The workload_id of this WorkloadShare.
        """
        self.openapi_types = {
            'share_id': str,
            'shared_by': str,
            'shared_with': str,
            'permission_type': PermissionType,
            'status': ShareStatus,
            'workload_name': str,
            'workload_id': str
        }

        self.attribute_map = {
            'share_id': 'ShareId',
            'shared_by': 'SharedBy',
            'shared_with': 'SharedWith',
            'permission_type': 'PermissionType',
            'status': 'Status',
            'workload_name': 'WorkloadName',
            'workload_id': 'WorkloadId'
        }

        self._share_id = share_id
        self._shared_by = shared_by
        self._shared_with = shared_with
        self._permission_type = permission_type
        self._status = status
        self._workload_name = workload_name
        self._workload_id = workload_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadShare of this WorkloadShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def share_id(self):
        """Gets the share_id of this WorkloadShare.

        The ID associated with the share.

        :return: The share_id of this WorkloadShare.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this WorkloadShare.

        The ID associated with the share.

        :param share_id: The share_id of this WorkloadShare.
        :type share_id: str
        """
        if share_id is not None and not re.search(r'[0-9a-f]{32}', share_id):
            raise ValueError("Invalid value for `share_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._share_id = share_id

    @property
    def shared_by(self):
        """Gets the shared_by of this WorkloadShare.

        An Amazon Web Services account ID.

        :return: The shared_by of this WorkloadShare.
        :rtype: str
        """
        return self._shared_by

    @shared_by.setter
    def shared_by(self, shared_by):
        """Sets the shared_by of this WorkloadShare.

        An Amazon Web Services account ID.

        :param shared_by: The shared_by of this WorkloadShare.
        :type shared_by: str
        """
        if shared_by is not None and len(shared_by) > 12:
            raise ValueError("Invalid value for `shared_by`, length must be less than or equal to `12`")
        if shared_by is not None and len(shared_by) < 12:
            raise ValueError("Invalid value for `shared_by`, length must be greater than or equal to `12`")
        if shared_by is not None and not re.search(r'[0-9]{12}', shared_by):
            raise ValueError("Invalid value for `shared_by`, must be a follow pattern or equal to `/[0-9]{12}/`")

        self._shared_by = shared_by

    @property
    def shared_with(self):
        """Gets the shared_with of this WorkloadShare.

        The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.

        :return: The shared_with of this WorkloadShare.
        :rtype: str
        """
        return self._shared_with

    @shared_with.setter
    def shared_with(self, shared_with):
        """Sets the shared_with of this WorkloadShare.

        The Amazon Web Services account ID, IAM role, organization ID, or organizational unit (OU) ID with which the workload, lens, or profile is shared.

        :param shared_with: The shared_with of this WorkloadShare.
        :type shared_with: str
        """
        if shared_with is not None and len(shared_with) > 2048:
            raise ValueError("Invalid value for `shared_with`, length must be less than or equal to `2048`")
        if shared_with is not None and len(shared_with) < 12:
            raise ValueError("Invalid value for `shared_with`, length must be greater than or equal to `12`")

        self._shared_with = shared_with

    @property
    def permission_type(self):
        """Gets the permission_type of this WorkloadShare.


        :return: The permission_type of this WorkloadShare.
        :rtype: PermissionType
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this WorkloadShare.


        :param permission_type: The permission_type of this WorkloadShare.
        :type permission_type: PermissionType
        """

        self._permission_type = permission_type

    @property
    def status(self):
        """Gets the status of this WorkloadShare.


        :return: The status of this WorkloadShare.
        :rtype: ShareStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkloadShare.


        :param status: The status of this WorkloadShare.
        :type status: ShareStatus
        """

        self._status = status

    @property
    def workload_name(self):
        """Gets the workload_name of this WorkloadShare.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :return: The workload_name of this WorkloadShare.
        :rtype: str
        """
        return self._workload_name

    @workload_name.setter
    def workload_name(self, workload_name):
        """Sets the workload_name of this WorkloadShare.

        <p>The name of the workload.</p> <p>The name must be unique within an account within an Amazon Web Services Region. Spaces and capitalization are ignored when checking for uniqueness.</p>

        :param workload_name: The workload_name of this WorkloadShare.
        :type workload_name: str
        """
        if workload_name is not None and len(workload_name) > 100:
            raise ValueError("Invalid value for `workload_name`, length must be less than or equal to `100`")
        if workload_name is not None and len(workload_name) < 3:
            raise ValueError("Invalid value for `workload_name`, length must be greater than or equal to `3`")

        self._workload_name = workload_name

    @property
    def workload_id(self):
        """Gets the workload_id of this WorkloadShare.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :return: The workload_id of this WorkloadShare.
        :rtype: str
        """
        return self._workload_id

    @workload_id.setter
    def workload_id(self, workload_id):
        """Sets the workload_id of this WorkloadShare.

        The ID assigned to the workload. This ID is unique within an Amazon Web Services Region.

        :param workload_id: The workload_id of this WorkloadShare.
        :type workload_id: str
        """
        if workload_id is not None and len(workload_id) > 32:
            raise ValueError("Invalid value for `workload_id`, length must be less than or equal to `32`")
        if workload_id is not None and len(workload_id) < 32:
            raise ValueError("Invalid value for `workload_id`, length must be greater than or equal to `32`")
        if workload_id is not None and not re.search(r'[0-9a-f]{32}', workload_id):
            raise ValueError("Invalid value for `workload_id`, must be a follow pattern or equal to `/[0-9a-f]{32}/`")

        self._workload_id = workload_id
