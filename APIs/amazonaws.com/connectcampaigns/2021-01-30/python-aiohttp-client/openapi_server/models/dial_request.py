# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DialRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Dict[str, str]=None, client_token: str=None, expiration_time: datetime=None, phone_number: str=None):
        """DialRequest - a model defined in OpenAPI

        :param attributes: The attributes of this DialRequest.
        :param client_token: The client_token of this DialRequest.
        :param expiration_time: The expiration_time of this DialRequest.
        :param phone_number: The phone_number of this DialRequest.
        """
        self.openapi_types = {
            'attributes': Dict[str, str],
            'client_token': str,
            'expiration_time': datetime,
            'phone_number': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'client_token': 'clientToken',
            'expiration_time': 'expirationTime',
            'phone_number': 'phoneNumber'
        }

        self._attributes = attributes
        self._client_token = client_token
        self._expiration_time = expiration_time
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DialRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DialRequest of this DialRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this DialRequest.

        A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.

        :return: The attributes of this DialRequest.
        :rtype: Dict[str, str]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this DialRequest.

        A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.

        :param attributes: The attributes of this DialRequest.
        :type attributes: Dict[str, str]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes

    @property
    def client_token(self):
        """Gets the client_token of this DialRequest.

        Client provided parameter used for idempotency. Its value must be unique for each request.

        :return: The client_token of this DialRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this DialRequest.

        Client provided parameter used for idempotency. Its value must be unique for each request.

        :param client_token: The client_token of this DialRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 0:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `0`")

        self._client_token = client_token

    @property
    def expiration_time(self):
        """Gets the expiration_time of this DialRequest.

        Timestamp with no UTC offset or timezone

        :return: The expiration_time of this DialRequest.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this DialRequest.

        Timestamp with no UTC offset or timezone

        :param expiration_time: The expiration_time of this DialRequest.
        :type expiration_time: datetime
        """
        if expiration_time is None:
            raise ValueError("Invalid value for `expiration_time`, must not be `None`")

        self._expiration_time = expiration_time

    @property
    def phone_number(self):
        """Gets the phone_number of this DialRequest.

        The phone number of the customer, in E.164 format.

        :return: The phone_number of this DialRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DialRequest.

        The phone number of the customer, in E.164 format.

        :param phone_number: The phone_number of this DialRequest.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")
        if phone_number is not None and len(phone_number) > 20:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `20`")
        if phone_number is not None and len(phone_number) < 0:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `0`")

        self._phone_number = phone_number
