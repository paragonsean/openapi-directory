# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_state import CampaignState
from openapi_server import util


class SuccessfulCampaignStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: str=None, state: CampaignState=None):
        """SuccessfulCampaignStateResponse - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this SuccessfulCampaignStateResponse.
        :param state: The state of this SuccessfulCampaignStateResponse.
        """
        self.openapi_types = {
            'campaign_id': str,
            'state': CampaignState
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'state': 'state'
        }

        self._campaign_id = campaign_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessfulCampaignStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuccessfulCampaignStateResponse of this SuccessfulCampaignStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this SuccessfulCampaignStateResponse.

        Identifier representing a Campaign

        :return: The campaign_id of this SuccessfulCampaignStateResponse.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this SuccessfulCampaignStateResponse.

        Identifier representing a Campaign

        :param campaign_id: The campaign_id of this SuccessfulCampaignStateResponse.
        :type campaign_id: str
        """
        if campaign_id is not None and len(campaign_id) > 256:
            raise ValueError("Invalid value for `campaign_id`, length must be less than or equal to `256`")
        if campaign_id is not None and len(campaign_id) < 0:
            raise ValueError("Invalid value for `campaign_id`, length must be greater than or equal to `0`")

        self._campaign_id = campaign_id

    @property
    def state(self):
        """Gets the state of this SuccessfulCampaignStateResponse.


        :return: The state of this SuccessfulCampaignStateResponse.
        :rtype: CampaignState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SuccessfulCampaignStateResponse.


        :param state: The state of this SuccessfulCampaignStateResponse.
        :type state: CampaignState
        """

        self._state = state
