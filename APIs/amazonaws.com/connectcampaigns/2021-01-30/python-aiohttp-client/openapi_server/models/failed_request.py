# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failure_code import FailureCode
from openapi_server import util


class FailedRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, failure_code: FailureCode=None, id: str=None):
        """FailedRequest - a model defined in OpenAPI

        :param client_token: The client_token of this FailedRequest.
        :param failure_code: The failure_code of this FailedRequest.
        :param id: The id of this FailedRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'failure_code': FailureCode,
            'id': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'failure_code': 'failureCode',
            'id': 'id'
        }

        self._client_token = client_token
        self._failure_code = failure_code
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailedRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailedRequest of this FailedRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this FailedRequest.

        Client provided parameter used for idempotency. Its value must be unique for each request.

        :return: The client_token of this FailedRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this FailedRequest.

        Client provided parameter used for idempotency. Its value must be unique for each request.

        :param client_token: The client_token of this FailedRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 0:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `0`")

        self._client_token = client_token

    @property
    def failure_code(self):
        """Gets the failure_code of this FailedRequest.


        :return: The failure_code of this FailedRequest.
        :rtype: FailureCode
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this FailedRequest.


        :param failure_code: The failure_code of this FailedRequest.
        :type failure_code: FailureCode
        """

        self._failure_code = failure_code

    @property
    def id(self):
        """Gets the id of this FailedRequest.

        Identifier representing a Dial request

        :return: The id of this FailedRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FailedRequest.

        Identifier representing a Dial request

        :param id: The id of this FailedRequest.
        :type id: str
        """

        self._id = id
