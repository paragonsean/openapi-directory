# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_id_filter_operator import InstanceIdFilterOperator
from openapi_server import util


class InstanceIdFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator: InstanceIdFilterOperator=None, value: str=None):
        """InstanceIdFilter - a model defined in OpenAPI

        :param operator: The operator of this InstanceIdFilter.
        :param value: The value of this InstanceIdFilter.
        """
        self.openapi_types = {
            'operator': InstanceIdFilterOperator,
            'value': str
        }

        self.attribute_map = {
            'operator': 'operator',
            'value': 'value'
        }

        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceIdFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceIdFilter of this InstanceIdFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator(self):
        """Gets the operator of this InstanceIdFilter.


        :return: The operator of this InstanceIdFilter.
        :rtype: InstanceIdFilterOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this InstanceIdFilter.


        :param operator: The operator of this InstanceIdFilter.
        :type operator: InstanceIdFilterOperator
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this InstanceIdFilter.

        Amazon Connect Instance Id

        :return: The value of this InstanceIdFilter.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this InstanceIdFilter.

        Amazon Connect Instance Id

        :param value: The value of this InstanceIdFilter.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        if value is not None and len(value) > 256:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `256`")
        if value is not None and len(value) < 0:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `0`")

        self._value = value
