# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_type import EncryptionType
from openapi_server import util


class EncryptionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, encryption_type: EncryptionType=None, key_arn: str=None):
        """EncryptionConfig - a model defined in OpenAPI

        :param enabled: The enabled of this EncryptionConfig.
        :param encryption_type: The encryption_type of this EncryptionConfig.
        :param key_arn: The key_arn of this EncryptionConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'encryption_type': EncryptionType,
            'key_arn': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'encryption_type': 'encryptionType',
            'key_arn': 'keyArn'
        }

        self._enabled = enabled
        self._encryption_type = encryption_type
        self._key_arn = key_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionConfig of this EncryptionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this EncryptionConfig.

        Boolean to indicate if custom encryption has been enabled.

        :return: The enabled of this EncryptionConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EncryptionConfig.

        Boolean to indicate if custom encryption has been enabled.

        :param enabled: The enabled of this EncryptionConfig.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def encryption_type(self):
        """Gets the encryption_type of this EncryptionConfig.


        :return: The encryption_type of this EncryptionConfig.
        :rtype: EncryptionType
        """
        return self._encryption_type

    @encryption_type.setter
    def encryption_type(self, encryption_type):
        """Sets the encryption_type of this EncryptionConfig.


        :param encryption_type: The encryption_type of this EncryptionConfig.
        :type encryption_type: EncryptionType
        """

        self._encryption_type = encryption_type

    @property
    def key_arn(self):
        """Gets the key_arn of this EncryptionConfig.

        KMS key id/arn for encryption config.

        :return: The key_arn of this EncryptionConfig.
        :rtype: str
        """
        return self._key_arn

    @key_arn.setter
    def key_arn(self, key_arn):
        """Sets the key_arn of this EncryptionConfig.

        KMS key id/arn for encryption config.

        :param key_arn: The key_arn of this EncryptionConfig.
        :type key_arn: str
        """
        if key_arn is not None and len(key_arn) > 500:
            raise ValueError("Invalid value for `key_arn`, length must be less than or equal to `500`")
        if key_arn is not None and len(key_arn) < 0:
            raise ValueError("Invalid value for `key_arn`, length must be greater than or equal to `0`")

        self._key_arn = key_arn
