# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server import util


class InstanceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connect_instance_id: str=None, encryption_config: EncryptionConfig=None, service_linked_role_arn: str=None):
        """InstanceConfig - a model defined in OpenAPI

        :param connect_instance_id: The connect_instance_id of this InstanceConfig.
        :param encryption_config: The encryption_config of this InstanceConfig.
        :param service_linked_role_arn: The service_linked_role_arn of this InstanceConfig.
        """
        self.openapi_types = {
            'connect_instance_id': str,
            'encryption_config': EncryptionConfig,
            'service_linked_role_arn': str
        }

        self.attribute_map = {
            'connect_instance_id': 'connectInstanceId',
            'encryption_config': 'encryptionConfig',
            'service_linked_role_arn': 'serviceLinkedRoleArn'
        }

        self._connect_instance_id = connect_instance_id
        self._encryption_config = encryption_config
        self._service_linked_role_arn = service_linked_role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceConfig of this InstanceConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connect_instance_id(self):
        """Gets the connect_instance_id of this InstanceConfig.

        Amazon Connect Instance Id

        :return: The connect_instance_id of this InstanceConfig.
        :rtype: str
        """
        return self._connect_instance_id

    @connect_instance_id.setter
    def connect_instance_id(self, connect_instance_id):
        """Sets the connect_instance_id of this InstanceConfig.

        Amazon Connect Instance Id

        :param connect_instance_id: The connect_instance_id of this InstanceConfig.
        :type connect_instance_id: str
        """
        if connect_instance_id is None:
            raise ValueError("Invalid value for `connect_instance_id`, must not be `None`")
        if connect_instance_id is not None and len(connect_instance_id) > 256:
            raise ValueError("Invalid value for `connect_instance_id`, length must be less than or equal to `256`")
        if connect_instance_id is not None and len(connect_instance_id) < 0:
            raise ValueError("Invalid value for `connect_instance_id`, length must be greater than or equal to `0`")

        self._connect_instance_id = connect_instance_id

    @property
    def encryption_config(self):
        """Gets the encryption_config of this InstanceConfig.


        :return: The encryption_config of this InstanceConfig.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this InstanceConfig.


        :param encryption_config: The encryption_config of this InstanceConfig.
        :type encryption_config: EncryptionConfig
        """
        if encryption_config is None:
            raise ValueError("Invalid value for `encryption_config`, must not be `None`")

        self._encryption_config = encryption_config

    @property
    def service_linked_role_arn(self):
        """Gets the service_linked_role_arn of this InstanceConfig.

        Service linked role arn

        :return: The service_linked_role_arn of this InstanceConfig.
        :rtype: str
        """
        return self._service_linked_role_arn

    @service_linked_role_arn.setter
    def service_linked_role_arn(self, service_linked_role_arn):
        """Sets the service_linked_role_arn of this InstanceConfig.

        Service linked role arn

        :param service_linked_role_arn: The service_linked_role_arn of this InstanceConfig.
        :type service_linked_role_arn: str
        """
        if service_linked_role_arn is None:
            raise ValueError("Invalid value for `service_linked_role_arn`, must not be `None`")
        if service_linked_role_arn is not None and len(service_linked_role_arn) > 256:
            raise ValueError("Invalid value for `service_linked_role_arn`, length must be less than or equal to `256`")
        if service_linked_role_arn is not None and len(service_linked_role_arn) < 0:
            raise ValueError("Invalid value for `service_linked_role_arn`, length must be greater than or equal to `0`")

        self._service_linked_role_arn = service_linked_role_arn
