# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_onboarding_job_failure_code import InstanceOnboardingJobFailureCode
from openapi_server.models.instance_onboarding_job_status_code import InstanceOnboardingJobStatusCode
from openapi_server import util


class InstanceOnboardingJobStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connect_instance_id: str=None, failure_code: InstanceOnboardingJobFailureCode=None, status: InstanceOnboardingJobStatusCode=None):
        """InstanceOnboardingJobStatus - a model defined in OpenAPI

        :param connect_instance_id: The connect_instance_id of this InstanceOnboardingJobStatus.
        :param failure_code: The failure_code of this InstanceOnboardingJobStatus.
        :param status: The status of this InstanceOnboardingJobStatus.
        """
        self.openapi_types = {
            'connect_instance_id': str,
            'failure_code': InstanceOnboardingJobFailureCode,
            'status': InstanceOnboardingJobStatusCode
        }

        self.attribute_map = {
            'connect_instance_id': 'connectInstanceId',
            'failure_code': 'failureCode',
            'status': 'status'
        }

        self._connect_instance_id = connect_instance_id
        self._failure_code = failure_code
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceOnboardingJobStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceOnboardingJobStatus of this InstanceOnboardingJobStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connect_instance_id(self):
        """Gets the connect_instance_id of this InstanceOnboardingJobStatus.

        Amazon Connect Instance Id

        :return: The connect_instance_id of this InstanceOnboardingJobStatus.
        :rtype: str
        """
        return self._connect_instance_id

    @connect_instance_id.setter
    def connect_instance_id(self, connect_instance_id):
        """Sets the connect_instance_id of this InstanceOnboardingJobStatus.

        Amazon Connect Instance Id

        :param connect_instance_id: The connect_instance_id of this InstanceOnboardingJobStatus.
        :type connect_instance_id: str
        """
        if connect_instance_id is None:
            raise ValueError("Invalid value for `connect_instance_id`, must not be `None`")
        if connect_instance_id is not None and len(connect_instance_id) > 256:
            raise ValueError("Invalid value for `connect_instance_id`, length must be less than or equal to `256`")
        if connect_instance_id is not None and len(connect_instance_id) < 0:
            raise ValueError("Invalid value for `connect_instance_id`, length must be greater than or equal to `0`")

        self._connect_instance_id = connect_instance_id

    @property
    def failure_code(self):
        """Gets the failure_code of this InstanceOnboardingJobStatus.


        :return: The failure_code of this InstanceOnboardingJobStatus.
        :rtype: InstanceOnboardingJobFailureCode
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this InstanceOnboardingJobStatus.


        :param failure_code: The failure_code of this InstanceOnboardingJobStatus.
        :type failure_code: InstanceOnboardingJobFailureCode
        """

        self._failure_code = failure_code

    @property
    def status(self):
        """Gets the status of this InstanceOnboardingJobStatus.


        :return: The status of this InstanceOnboardingJobStatus.
        :rtype: InstanceOnboardingJobStatusCode
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstanceOnboardingJobStatus.


        :param status: The status of this InstanceOnboardingJobStatus.
        :type status: InstanceOnboardingJobStatusCode
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
