# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_campaign_state_batch_failure_code import GetCampaignStateBatchFailureCode
from openapi_server import util


class FailedCampaignStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: str=None, failure_code: GetCampaignStateBatchFailureCode=None):
        """FailedCampaignStateResponse - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this FailedCampaignStateResponse.
        :param failure_code: The failure_code of this FailedCampaignStateResponse.
        """
        self.openapi_types = {
            'campaign_id': str,
            'failure_code': GetCampaignStateBatchFailureCode
        }

        self.attribute_map = {
            'campaign_id': 'campaignId',
            'failure_code': 'failureCode'
        }

        self._campaign_id = campaign_id
        self._failure_code = failure_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailedCampaignStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailedCampaignStateResponse of this FailedCampaignStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this FailedCampaignStateResponse.

        Identifier representing a Campaign

        :return: The campaign_id of this FailedCampaignStateResponse.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this FailedCampaignStateResponse.

        Identifier representing a Campaign

        :param campaign_id: The campaign_id of this FailedCampaignStateResponse.
        :type campaign_id: str
        """
        if campaign_id is not None and len(campaign_id) > 256:
            raise ValueError("Invalid value for `campaign_id`, length must be less than or equal to `256`")
        if campaign_id is not None and len(campaign_id) < 0:
            raise ValueError("Invalid value for `campaign_id`, length must be greater than or equal to `0`")

        self._campaign_id = campaign_id

    @property
    def failure_code(self):
        """Gets the failure_code of this FailedCampaignStateResponse.


        :return: The failure_code of this FailedCampaignStateResponse.
        :rtype: GetCampaignStateBatchFailureCode
        """
        return self._failure_code

    @failure_code.setter
    def failure_code(self, failure_code):
        """Sets the failure_code of this FailedCampaignStateResponse.


        :param failure_code: The failure_code of this FailedCampaignStateResponse.
        :type failure_code: GetCampaignStateBatchFailureCode
        """

        self._failure_code = failure_code
