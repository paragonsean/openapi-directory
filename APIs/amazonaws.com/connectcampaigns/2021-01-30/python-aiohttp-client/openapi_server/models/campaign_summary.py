# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CampaignSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, connect_instance_id: str=None, id: str=None, name: str=None):
        """CampaignSummary - a model defined in OpenAPI

        :param arn: The arn of this CampaignSummary.
        :param connect_instance_id: The connect_instance_id of this CampaignSummary.
        :param id: The id of this CampaignSummary.
        :param name: The name of this CampaignSummary.
        """
        self.openapi_types = {
            'arn': str,
            'connect_instance_id': str,
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'arn': 'arn',
            'connect_instance_id': 'connectInstanceId',
            'id': 'id',
            'name': 'name'
        }

        self._arn = arn
        self._connect_instance_id = connect_instance_id
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignSummary of this CampaignSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CampaignSummary.

        The resource name of an Amazon Connect campaign.

        :return: The arn of this CampaignSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CampaignSummary.

        The resource name of an Amazon Connect campaign.

        :param arn: The arn of this CampaignSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")
        if arn is not None and len(arn) > 500:
            raise ValueError("Invalid value for `arn`, length must be less than or equal to `500`")
        if arn is not None and len(arn) < 20:
            raise ValueError("Invalid value for `arn`, length must be greater than or equal to `20`")

        self._arn = arn

    @property
    def connect_instance_id(self):
        """Gets the connect_instance_id of this CampaignSummary.

        Amazon Connect Instance Id

        :return: The connect_instance_id of this CampaignSummary.
        :rtype: str
        """
        return self._connect_instance_id

    @connect_instance_id.setter
    def connect_instance_id(self, connect_instance_id):
        """Sets the connect_instance_id of this CampaignSummary.

        Amazon Connect Instance Id

        :param connect_instance_id: The connect_instance_id of this CampaignSummary.
        :type connect_instance_id: str
        """
        if connect_instance_id is None:
            raise ValueError("Invalid value for `connect_instance_id`, must not be `None`")
        if connect_instance_id is not None and len(connect_instance_id) > 256:
            raise ValueError("Invalid value for `connect_instance_id`, length must be less than or equal to `256`")
        if connect_instance_id is not None and len(connect_instance_id) < 0:
            raise ValueError("Invalid value for `connect_instance_id`, length must be greater than or equal to `0`")

        self._connect_instance_id = connect_instance_id

    @property
    def id(self):
        """Gets the id of this CampaignSummary.

        Identifier representing a Campaign

        :return: The id of this CampaignSummary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CampaignSummary.

        Identifier representing a Campaign

        :param id: The id of this CampaignSummary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        if id is not None and len(id) > 256:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `256`")
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CampaignSummary.

        The name of an Amazon Connect Campaign name.

        :return: The name of this CampaignSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CampaignSummary.

        The name of an Amazon Connect Campaign name.

        :param name: The name of this CampaignSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
