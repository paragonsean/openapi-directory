# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answer_machine_detection_config import AnswerMachineDetectionConfig
from openapi_server import util


class OutboundCallConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_machine_detection_config: AnswerMachineDetectionConfig=None, connect_contact_flow_id: str=None, connect_queue_id: str=None, connect_source_phone_number: str=None):
        """OutboundCallConfig - a model defined in OpenAPI

        :param answer_machine_detection_config: The answer_machine_detection_config of this OutboundCallConfig.
        :param connect_contact_flow_id: The connect_contact_flow_id of this OutboundCallConfig.
        :param connect_queue_id: The connect_queue_id of this OutboundCallConfig.
        :param connect_source_phone_number: The connect_source_phone_number of this OutboundCallConfig.
        """
        self.openapi_types = {
            'answer_machine_detection_config': AnswerMachineDetectionConfig,
            'connect_contact_flow_id': str,
            'connect_queue_id': str,
            'connect_source_phone_number': str
        }

        self.attribute_map = {
            'answer_machine_detection_config': 'answerMachineDetectionConfig',
            'connect_contact_flow_id': 'connectContactFlowId',
            'connect_queue_id': 'connectQueueId',
            'connect_source_phone_number': 'connectSourcePhoneNumber'
        }

        self._answer_machine_detection_config = answer_machine_detection_config
        self._connect_contact_flow_id = connect_contact_flow_id
        self._connect_queue_id = connect_queue_id
        self._connect_source_phone_number = connect_source_phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutboundCallConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutboundCallConfig of this OutboundCallConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_machine_detection_config(self):
        """Gets the answer_machine_detection_config of this OutboundCallConfig.


        :return: The answer_machine_detection_config of this OutboundCallConfig.
        :rtype: AnswerMachineDetectionConfig
        """
        return self._answer_machine_detection_config

    @answer_machine_detection_config.setter
    def answer_machine_detection_config(self, answer_machine_detection_config):
        """Sets the answer_machine_detection_config of this OutboundCallConfig.


        :param answer_machine_detection_config: The answer_machine_detection_config of this OutboundCallConfig.
        :type answer_machine_detection_config: AnswerMachineDetectionConfig
        """

        self._answer_machine_detection_config = answer_machine_detection_config

    @property
    def connect_contact_flow_id(self):
        """Gets the connect_contact_flow_id of this OutboundCallConfig.

        The identifier of the contact flow for the outbound call.

        :return: The connect_contact_flow_id of this OutboundCallConfig.
        :rtype: str
        """
        return self._connect_contact_flow_id

    @connect_contact_flow_id.setter
    def connect_contact_flow_id(self, connect_contact_flow_id):
        """Sets the connect_contact_flow_id of this OutboundCallConfig.

        The identifier of the contact flow for the outbound call.

        :param connect_contact_flow_id: The connect_contact_flow_id of this OutboundCallConfig.
        :type connect_contact_flow_id: str
        """
        if connect_contact_flow_id is None:
            raise ValueError("Invalid value for `connect_contact_flow_id`, must not be `None`")
        if connect_contact_flow_id is not None and len(connect_contact_flow_id) > 500:
            raise ValueError("Invalid value for `connect_contact_flow_id`, length must be less than or equal to `500`")
        if connect_contact_flow_id is not None and len(connect_contact_flow_id) < 0:
            raise ValueError("Invalid value for `connect_contact_flow_id`, length must be greater than or equal to `0`")

        self._connect_contact_flow_id = connect_contact_flow_id

    @property
    def connect_queue_id(self):
        """Gets the connect_queue_id of this OutboundCallConfig.

        The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.

        :return: The connect_queue_id of this OutboundCallConfig.
        :rtype: str
        """
        return self._connect_queue_id

    @connect_queue_id.setter
    def connect_queue_id(self, connect_queue_id):
        """Sets the connect_queue_id of this OutboundCallConfig.

        The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.

        :param connect_queue_id: The connect_queue_id of this OutboundCallConfig.
        :type connect_queue_id: str
        """
        if connect_queue_id is None:
            raise ValueError("Invalid value for `connect_queue_id`, must not be `None`")
        if connect_queue_id is not None and len(connect_queue_id) > 500:
            raise ValueError("Invalid value for `connect_queue_id`, length must be less than or equal to `500`")
        if connect_queue_id is not None and len(connect_queue_id) < 0:
            raise ValueError("Invalid value for `connect_queue_id`, length must be greater than or equal to `0`")

        self._connect_queue_id = connect_queue_id

    @property
    def connect_source_phone_number(self):
        """Gets the connect_source_phone_number of this OutboundCallConfig.

        The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.

        :return: The connect_source_phone_number of this OutboundCallConfig.
        :rtype: str
        """
        return self._connect_source_phone_number

    @connect_source_phone_number.setter
    def connect_source_phone_number(self, connect_source_phone_number):
        """Sets the connect_source_phone_number of this OutboundCallConfig.

        The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.

        :param connect_source_phone_number: The connect_source_phone_number of this OutboundCallConfig.
        :type connect_source_phone_number: str
        """
        if connect_source_phone_number is not None and len(connect_source_phone_number) > 100:
            raise ValueError("Invalid value for `connect_source_phone_number`, length must be less than or equal to `100`")
        if connect_source_phone_number is not None and len(connect_source_phone_number) < 0:
            raise ValueError("Invalid value for `connect_source_phone_number`, length must be greater than or equal to `0`")

        self._connect_source_phone_number = connect_source_phone_number
