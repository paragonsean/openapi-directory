# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.failed_request import FailedRequest
from openapi_server.models.successful_request import SuccessfulRequest
from openapi_server import util


class PutDialRequestBatchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failed_requests: List[FailedRequest]=None, successful_requests: List[SuccessfulRequest]=None):
        """PutDialRequestBatchResponse - a model defined in OpenAPI

        :param failed_requests: The failed_requests of this PutDialRequestBatchResponse.
        :param successful_requests: The successful_requests of this PutDialRequestBatchResponse.
        """
        self.openapi_types = {
            'failed_requests': List[FailedRequest],
            'successful_requests': List[SuccessfulRequest]
        }

        self.attribute_map = {
            'failed_requests': 'failedRequests',
            'successful_requests': 'successfulRequests'
        }

        self._failed_requests = failed_requests
        self._successful_requests = successful_requests

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutDialRequestBatchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutDialRequestBatchResponse of this PutDialRequestBatchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failed_requests(self):
        """Gets the failed_requests of this PutDialRequestBatchResponse.

        A list of failed requests.

        :return: The failed_requests of this PutDialRequestBatchResponse.
        :rtype: List[FailedRequest]
        """
        return self._failed_requests

    @failed_requests.setter
    def failed_requests(self, failed_requests):
        """Sets the failed_requests of this PutDialRequestBatchResponse.

        A list of failed requests.

        :param failed_requests: The failed_requests of this PutDialRequestBatchResponse.
        :type failed_requests: List[FailedRequest]
        """
        if failed_requests is not None and len(failed_requests) > 25:
            raise ValueError("Invalid value for `failed_requests`, number of items must be less than or equal to `25`")
        if failed_requests is not None and len(failed_requests) < 0:
            raise ValueError("Invalid value for `failed_requests`, number of items must be greater than or equal to `0`")

        self._failed_requests = failed_requests

    @property
    def successful_requests(self):
        """Gets the successful_requests of this PutDialRequestBatchResponse.

        A list of successful requests identified by the unique client token.

        :return: The successful_requests of this PutDialRequestBatchResponse.
        :rtype: List[SuccessfulRequest]
        """
        return self._successful_requests

    @successful_requests.setter
    def successful_requests(self, successful_requests):
        """Sets the successful_requests of this PutDialRequestBatchResponse.

        A list of successful requests identified by the unique client token.

        :param successful_requests: The successful_requests of this PutDialRequestBatchResponse.
        :type successful_requests: List[SuccessfulRequest]
        """
        if successful_requests is not None and len(successful_requests) > 25:
            raise ValueError("Invalid value for `successful_requests`, number of items must be less than or equal to `25`")
        if successful_requests is not None and len(successful_requests) < 0:
            raise ValueError("Invalid value for `successful_requests`, number of items must be greater than or equal to `0`")

        self._successful_requests = successful_requests
