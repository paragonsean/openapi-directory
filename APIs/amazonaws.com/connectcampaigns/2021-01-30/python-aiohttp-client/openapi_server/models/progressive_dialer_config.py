# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProgressiveDialerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_allocation: float=None):
        """ProgressiveDialerConfig - a model defined in OpenAPI

        :param bandwidth_allocation: The bandwidth_allocation of this ProgressiveDialerConfig.
        """
        self.openapi_types = {
            'bandwidth_allocation': float
        }

        self.attribute_map = {
            'bandwidth_allocation': 'bandwidthAllocation'
        }

        self._bandwidth_allocation = bandwidth_allocation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProgressiveDialerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProgressiveDialerConfig of this ProgressiveDialerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_allocation(self):
        """Gets the bandwidth_allocation of this ProgressiveDialerConfig.

        The bandwidth allocation of a queue resource.

        :return: The bandwidth_allocation of this ProgressiveDialerConfig.
        :rtype: float
        """
        return self._bandwidth_allocation

    @bandwidth_allocation.setter
    def bandwidth_allocation(self, bandwidth_allocation):
        """Sets the bandwidth_allocation of this ProgressiveDialerConfig.

        The bandwidth allocation of a queue resource.

        :param bandwidth_allocation: The bandwidth_allocation of this ProgressiveDialerConfig.
        :type bandwidth_allocation: float
        """
        if bandwidth_allocation is None:
            raise ValueError("Invalid value for `bandwidth_allocation`, must not be `None`")
        if bandwidth_allocation is not None and bandwidth_allocation > 1:
            raise ValueError("Invalid value for `bandwidth_allocation`, must be a value less than or equal to `1`")
        if bandwidth_allocation is not None and bandwidth_allocation < 0:
            raise ValueError("Invalid value for `bandwidth_allocation`, must be a value greater than or equal to `0`")

        self._bandwidth_allocation = bandwidth_allocation
