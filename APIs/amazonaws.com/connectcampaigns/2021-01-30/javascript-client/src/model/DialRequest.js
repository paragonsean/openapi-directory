/**
 * AmazonConnectCampaignService
 * Provide APIs to create and manage Amazon Connect Campaigns.
 *
 * The version of the OpenAPI document: 2021-01-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DialRequest model module.
 * @module model/DialRequest
 * @version 2021-01-30
 */
class DialRequest {
    /**
     * Constructs a new <code>DialRequest</code>.
     * A dial request for a campaign.
     * @alias module:model/DialRequest
     * @param attributes {Object.<String, String>} A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
     * @param clientToken {String} Client provided parameter used for idempotency. Its value must be unique for each request.
     * @param expirationTime {Date} Timestamp with no UTC offset or timezone
     * @param phoneNumber {String} The phone number of the customer, in E.164 format.
     */
    constructor(attributes, clientToken, expirationTime, phoneNumber) { 
        
        DialRequest.initialize(this, attributes, clientToken, expirationTime, phoneNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes, clientToken, expirationTime, phoneNumber) { 
        obj['attributes'] = attributes;
        obj['clientToken'] = clientToken;
        obj['expirationTime'] = expirationTime;
        obj['phoneNumber'] = phoneNumber;
    }

    /**
     * Constructs a <code>DialRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DialRequest} obj Optional instance to populate.
     * @return {module:model/DialRequest} The populated <code>DialRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DialRequest();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'Date');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DialRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DialRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DialRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }

        return true;
    }


}

DialRequest.RequiredProperties = ["attributes", "clientToken", "expirationTime", "phoneNumber"];

/**
 * A custom key-value pair using an attribute map. The attributes are standard Amazon Connect attributes, and can be accessed in contact flows just like any other contact attributes.
 * @member {Object.<String, String>} attributes
 */
DialRequest.prototype['attributes'] = undefined;

/**
 * Client provided parameter used for idempotency. Its value must be unique for each request.
 * @member {String} clientToken
 */
DialRequest.prototype['clientToken'] = undefined;

/**
 * Timestamp with no UTC offset or timezone
 * @member {Date} expirationTime
 */
DialRequest.prototype['expirationTime'] = undefined;

/**
 * The phone number of the customer, in E.164 format.
 * @member {String} phoneNumber
 */
DialRequest.prototype['phoneNumber'] = undefined;






export default DialRequest;

