/*
 * AmazonConnectCampaignService
 * Provide APIs to create and manage Amazon Connect Campaigns.
 *
 * The version of the OpenAPI document: 2021-01-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnswerMachineDetectionConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration used for outbound calls.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:32.416342-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OutboundCallConfig {
  public static final String SERIALIZED_NAME_ANSWER_MACHINE_DETECTION_CONFIG = "answerMachineDetectionConfig";
  @SerializedName(SERIALIZED_NAME_ANSWER_MACHINE_DETECTION_CONFIG)
  private AnswerMachineDetectionConfig answerMachineDetectionConfig;

  public static final String SERIALIZED_NAME_CONNECT_CONTACT_FLOW_ID = "connectContactFlowId";
  @SerializedName(SERIALIZED_NAME_CONNECT_CONTACT_FLOW_ID)
  private String connectContactFlowId;

  public static final String SERIALIZED_NAME_CONNECT_QUEUE_ID = "connectQueueId";
  @SerializedName(SERIALIZED_NAME_CONNECT_QUEUE_ID)
  private String connectQueueId;

  public static final String SERIALIZED_NAME_CONNECT_SOURCE_PHONE_NUMBER = "connectSourcePhoneNumber";
  @SerializedName(SERIALIZED_NAME_CONNECT_SOURCE_PHONE_NUMBER)
  private String connectSourcePhoneNumber;

  public OutboundCallConfig() {
  }

  public OutboundCallConfig answerMachineDetectionConfig(AnswerMachineDetectionConfig answerMachineDetectionConfig) {
    this.answerMachineDetectionConfig = answerMachineDetectionConfig;
    return this;
  }

  /**
   * Get answerMachineDetectionConfig
   * @return answerMachineDetectionConfig
   */
  @javax.annotation.Nullable
  public AnswerMachineDetectionConfig getAnswerMachineDetectionConfig() {
    return answerMachineDetectionConfig;
  }

  public void setAnswerMachineDetectionConfig(AnswerMachineDetectionConfig answerMachineDetectionConfig) {
    this.answerMachineDetectionConfig = answerMachineDetectionConfig;
  }


  public OutboundCallConfig connectContactFlowId(String connectContactFlowId) {
    this.connectContactFlowId = connectContactFlowId;
    return this;
  }

  /**
   * The identifier of the contact flow for the outbound call.
   * @return connectContactFlowId
   */
  @javax.annotation.Nonnull
  public String getConnectContactFlowId() {
    return connectContactFlowId;
  }

  public void setConnectContactFlowId(String connectContactFlowId) {
    this.connectContactFlowId = connectContactFlowId;
  }


  public OutboundCallConfig connectQueueId(String connectQueueId) {
    this.connectQueueId = connectQueueId;
    return this;
  }

  /**
   * The queue for the call. If you specify a queue, the phone displayed for caller ID is the phone number specified in the queue. If you do not specify a queue, the queue defined in the contact flow is used. If you do not specify a queue, you must specify a source phone number.
   * @return connectQueueId
   */
  @javax.annotation.Nonnull
  public String getConnectQueueId() {
    return connectQueueId;
  }

  public void setConnectQueueId(String connectQueueId) {
    this.connectQueueId = connectQueueId;
  }


  public OutboundCallConfig connectSourcePhoneNumber(String connectSourcePhoneNumber) {
    this.connectSourcePhoneNumber = connectSourcePhoneNumber;
    return this;
  }

  /**
   * The phone number associated with the Amazon Connect instance, in E.164 format. If you do not specify a source phone number, you must specify a queue.
   * @return connectSourcePhoneNumber
   */
  @javax.annotation.Nullable
  public String getConnectSourcePhoneNumber() {
    return connectSourcePhoneNumber;
  }

  public void setConnectSourcePhoneNumber(String connectSourcePhoneNumber) {
    this.connectSourcePhoneNumber = connectSourcePhoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutboundCallConfig outboundCallConfig = (OutboundCallConfig) o;
    return Objects.equals(this.answerMachineDetectionConfig, outboundCallConfig.answerMachineDetectionConfig) &&
        Objects.equals(this.connectContactFlowId, outboundCallConfig.connectContactFlowId) &&
        Objects.equals(this.connectQueueId, outboundCallConfig.connectQueueId) &&
        Objects.equals(this.connectSourcePhoneNumber, outboundCallConfig.connectSourcePhoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answerMachineDetectionConfig, connectContactFlowId, connectQueueId, connectSourcePhoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutboundCallConfig {\n");
    sb.append("    answerMachineDetectionConfig: ").append(toIndentedString(answerMachineDetectionConfig)).append("\n");
    sb.append("    connectContactFlowId: ").append(toIndentedString(connectContactFlowId)).append("\n");
    sb.append("    connectQueueId: ").append(toIndentedString(connectQueueId)).append("\n");
    sb.append("    connectSourcePhoneNumber: ").append(toIndentedString(connectSourcePhoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answerMachineDetectionConfig");
    openapiFields.add("connectContactFlowId");
    openapiFields.add("connectQueueId");
    openapiFields.add("connectSourcePhoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectContactFlowId");
    openapiRequiredFields.add("connectQueueId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutboundCallConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutboundCallConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutboundCallConfig is not found in the empty JSON string", OutboundCallConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutboundCallConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutboundCallConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutboundCallConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `answerMachineDetectionConfig`
      if (jsonObj.get("answerMachineDetectionConfig") != null && !jsonObj.get("answerMachineDetectionConfig").isJsonNull()) {
        AnswerMachineDetectionConfig.validateJsonElement(jsonObj.get("answerMachineDetectionConfig"));
      }
      if (!jsonObj.get("connectContactFlowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectContactFlowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectContactFlowId").toString()));
      }
      if (!jsonObj.get("connectQueueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectQueueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectQueueId").toString()));
      }
      if ((jsonObj.get("connectSourcePhoneNumber") != null && !jsonObj.get("connectSourcePhoneNumber").isJsonNull()) && !jsonObj.get("connectSourcePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectSourcePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectSourcePhoneNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutboundCallConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutboundCallConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutboundCallConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutboundCallConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<OutboundCallConfig>() {
           @Override
           public void write(JsonWriter out, OutboundCallConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutboundCallConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutboundCallConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutboundCallConfig
   * @throws IOException if the JSON string is invalid with respect to OutboundCallConfig
   */
  public static OutboundCallConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutboundCallConfig.class);
  }

  /**
   * Convert an instance of OutboundCallConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

