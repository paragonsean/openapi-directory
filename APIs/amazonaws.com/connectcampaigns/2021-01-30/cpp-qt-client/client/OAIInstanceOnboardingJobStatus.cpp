/**
 * AmazonConnectCampaignService
 * Provide APIs to create and manage Amazon Connect Campaigns.
 *
 * The version of the OpenAPI document: 2021-01-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceOnboardingJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceOnboardingJobStatus::OAIInstanceOnboardingJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceOnboardingJobStatus::OAIInstanceOnboardingJobStatus() {
    this->initializeModel();
}

OAIInstanceOnboardingJobStatus::~OAIInstanceOnboardingJobStatus() {}

void OAIInstanceOnboardingJobStatus::initializeModel() {

    m_connect_instance_id_isSet = false;
    m_connect_instance_id_isValid = false;

    m_failure_code_isSet = false;
    m_failure_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIInstanceOnboardingJobStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceOnboardingJobStatus::fromJsonObject(QJsonObject json) {

    m_connect_instance_id_isValid = ::OpenAPI::fromJsonValue(m_connect_instance_id, json[QString("connectInstanceId")]);
    m_connect_instance_id_isSet = !json[QString("connectInstanceId")].isNull() && m_connect_instance_id_isValid;

    m_failure_code_isValid = ::OpenAPI::fromJsonValue(m_failure_code, json[QString("failureCode")]);
    m_failure_code_isSet = !json[QString("failureCode")].isNull() && m_failure_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIInstanceOnboardingJobStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceOnboardingJobStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_connect_instance_id_isSet) {
        obj.insert(QString("connectInstanceId"), ::OpenAPI::toJsonValue(m_connect_instance_id));
    }
    if (m_failure_code.isSet()) {
        obj.insert(QString("failureCode"), ::OpenAPI::toJsonValue(m_failure_code));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIInstanceOnboardingJobStatus::getConnectInstanceId() const {
    return m_connect_instance_id;
}
void OAIInstanceOnboardingJobStatus::setConnectInstanceId(const QString &connect_instance_id) {
    m_connect_instance_id = connect_instance_id;
    m_connect_instance_id_isSet = true;
}

bool OAIInstanceOnboardingJobStatus::is_connect_instance_id_Set() const{
    return m_connect_instance_id_isSet;
}

bool OAIInstanceOnboardingJobStatus::is_connect_instance_id_Valid() const{
    return m_connect_instance_id_isValid;
}

OAIInstanceOnboardingJobFailureCode OAIInstanceOnboardingJobStatus::getFailureCode() const {
    return m_failure_code;
}
void OAIInstanceOnboardingJobStatus::setFailureCode(const OAIInstanceOnboardingJobFailureCode &failure_code) {
    m_failure_code = failure_code;
    m_failure_code_isSet = true;
}

bool OAIInstanceOnboardingJobStatus::is_failure_code_Set() const{
    return m_failure_code_isSet;
}

bool OAIInstanceOnboardingJobStatus::is_failure_code_Valid() const{
    return m_failure_code_isValid;
}

OAIInstanceOnboardingJobStatusCode OAIInstanceOnboardingJobStatus::getStatus() const {
    return m_status;
}
void OAIInstanceOnboardingJobStatus::setStatus(const OAIInstanceOnboardingJobStatusCode &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstanceOnboardingJobStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstanceOnboardingJobStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIInstanceOnboardingJobStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connect_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceOnboardingJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connect_instance_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
