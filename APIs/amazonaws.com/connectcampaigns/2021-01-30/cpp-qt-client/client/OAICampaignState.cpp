/**
 * AmazonConnectCampaignService
 * Provide APIs to create and manage Amazon Connect Campaigns.
 *
 * The version of the OpenAPI document: 2021-01-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignState::OAICampaignState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignState::OAICampaignState() {
    this->initializeModel();
}

OAICampaignState::~OAICampaignState() {}

void OAICampaignState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICampaignState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICampaignState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Initialized", Qt::CaseInsensitive) == 0) {
        m_value = eOAICampaignState::INITIALIZED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAICampaignState::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Paused", Qt::CaseInsensitive) == 0) {
        m_value = eOAICampaignState::PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Stopped", Qt::CaseInsensitive) == 0) {
        m_value = eOAICampaignState::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAICampaignState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICampaignState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICampaignState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICampaignState::INITIALIZED:
            val = "Initialized";
            break;
        case eOAICampaignState::RUNNING:
            val = "Running";
            break;
        case eOAICampaignState::PAUSED:
            val = "Paused";
            break;
        case eOAICampaignState::STOPPED:
            val = "Stopped";
            break;
        case eOAICampaignState::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICampaignState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICampaignState::eOAICampaignState OAICampaignState::getValue() const {
    return m_value;
}

void OAICampaignState::setValue(const OAICampaignState::eOAICampaignState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICampaignState::isSet() const {
    
    return m_value_isSet;
}

bool OAICampaignState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
