/**
 * AmazonConnectCampaignService
 * Provide APIs to create and manage Amazon Connect Campaigns.
 *
 * The version of the OpenAPI document: 2021-01-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCampaignStateBatchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCampaignStateBatchRequest::OAIGetCampaignStateBatchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCampaignStateBatchRequest::OAIGetCampaignStateBatchRequest() {
    this->initializeModel();
}

OAIGetCampaignStateBatchRequest::~OAIGetCampaignStateBatchRequest() {}

void OAIGetCampaignStateBatchRequest::initializeModel() {

    m_campaign_ids_isSet = false;
    m_campaign_ids_isValid = false;
}

void OAIGetCampaignStateBatchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCampaignStateBatchRequest::fromJsonObject(QJsonObject json) {

    m_campaign_ids_isValid = ::OpenAPI::fromJsonValue(m_campaign_ids, json[QString("campaignIds")]);
    m_campaign_ids_isSet = !json[QString("campaignIds")].isNull() && m_campaign_ids_isValid;
}

QString OAIGetCampaignStateBatchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCampaignStateBatchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_ids.size() > 0) {
        obj.insert(QString("campaignIds"), ::OpenAPI::toJsonValue(m_campaign_ids));
    }
    return obj;
}

QList<QString> OAIGetCampaignStateBatchRequest::getCampaignIds() const {
    return m_campaign_ids;
}
void OAIGetCampaignStateBatchRequest::setCampaignIds(const QList<QString> &campaign_ids) {
    m_campaign_ids = campaign_ids;
    m_campaign_ids_isSet = true;
}

bool OAIGetCampaignStateBatchRequest::is_campaign_ids_Set() const{
    return m_campaign_ids_isSet;
}

bool OAIGetCampaignStateBatchRequest::is_campaign_ids_Valid() const{
    return m_campaign_ids_isValid;
}

bool OAIGetCampaignStateBatchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCampaignStateBatchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaign_ids_isValid && true;
}

} // namespace OpenAPI
