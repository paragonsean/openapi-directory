# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistoryEventTimerStartedEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timer_id: str=None, control: str=None, start_to_fire_timeout: str=None, decision_task_completed_event_id: int=None):
        """HistoryEventTimerStartedEventAttributes - a model defined in OpenAPI

        :param timer_id: The timer_id of this HistoryEventTimerStartedEventAttributes.
        :param control: The control of this HistoryEventTimerStartedEventAttributes.
        :param start_to_fire_timeout: The start_to_fire_timeout of this HistoryEventTimerStartedEventAttributes.
        :param decision_task_completed_event_id: The decision_task_completed_event_id of this HistoryEventTimerStartedEventAttributes.
        """
        self.openapi_types = {
            'timer_id': str,
            'control': str,
            'start_to_fire_timeout': str,
            'decision_task_completed_event_id': int
        }

        self.attribute_map = {
            'timer_id': 'timerId',
            'control': 'control',
            'start_to_fire_timeout': 'startToFireTimeout',
            'decision_task_completed_event_id': 'decisionTaskCompletedEventId'
        }

        self._timer_id = timer_id
        self._control = control
        self._start_to_fire_timeout = start_to_fire_timeout
        self._decision_task_completed_event_id = decision_task_completed_event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryEventTimerStartedEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryEvent_timerStartedEventAttributes of this HistoryEventTimerStartedEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timer_id(self):
        """Gets the timer_id of this HistoryEventTimerStartedEventAttributes.


        :return: The timer_id of this HistoryEventTimerStartedEventAttributes.
        :rtype: str
        """
        return self._timer_id

    @timer_id.setter
    def timer_id(self, timer_id):
        """Sets the timer_id of this HistoryEventTimerStartedEventAttributes.


        :param timer_id: The timer_id of this HistoryEventTimerStartedEventAttributes.
        :type timer_id: str
        """
        if timer_id is None:
            raise ValueError("Invalid value for `timer_id`, must not be `None`")

        self._timer_id = timer_id

    @property
    def control(self):
        """Gets the control of this HistoryEventTimerStartedEventAttributes.


        :return: The control of this HistoryEventTimerStartedEventAttributes.
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this HistoryEventTimerStartedEventAttributes.


        :param control: The control of this HistoryEventTimerStartedEventAttributes.
        :type control: str
        """

        self._control = control

    @property
    def start_to_fire_timeout(self):
        """Gets the start_to_fire_timeout of this HistoryEventTimerStartedEventAttributes.


        :return: The start_to_fire_timeout of this HistoryEventTimerStartedEventAttributes.
        :rtype: str
        """
        return self._start_to_fire_timeout

    @start_to_fire_timeout.setter
    def start_to_fire_timeout(self, start_to_fire_timeout):
        """Sets the start_to_fire_timeout of this HistoryEventTimerStartedEventAttributes.


        :param start_to_fire_timeout: The start_to_fire_timeout of this HistoryEventTimerStartedEventAttributes.
        :type start_to_fire_timeout: str
        """
        if start_to_fire_timeout is None:
            raise ValueError("Invalid value for `start_to_fire_timeout`, must not be `None`")

        self._start_to_fire_timeout = start_to_fire_timeout

    @property
    def decision_task_completed_event_id(self):
        """Gets the decision_task_completed_event_id of this HistoryEventTimerStartedEventAttributes.


        :return: The decision_task_completed_event_id of this HistoryEventTimerStartedEventAttributes.
        :rtype: int
        """
        return self._decision_task_completed_event_id

    @decision_task_completed_event_id.setter
    def decision_task_completed_event_id(self, decision_task_completed_event_id):
        """Sets the decision_task_completed_event_id of this HistoryEventTimerStartedEventAttributes.


        :param decision_task_completed_event_id: The decision_task_completed_event_id of this HistoryEventTimerStartedEventAttributes.
        :type decision_task_completed_event_id: int
        """
        if decision_task_completed_event_id is None:
            raise ValueError("Invalid value for `decision_task_completed_event_id`, must not be `None`")

        self._decision_task_completed_event_id = decision_task_completed_event_id
