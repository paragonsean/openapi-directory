# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.undeprecate_activity_type_input_activity_type import UndeprecateActivityTypeInputActivityType
from openapi_server import util


class UndeprecateActivityTypeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, activity_type: UndeprecateActivityTypeInputActivityType=None):
        """UndeprecateActivityTypeInput - a model defined in OpenAPI

        :param domain: The domain of this UndeprecateActivityTypeInput.
        :param activity_type: The activity_type of this UndeprecateActivityTypeInput.
        """
        self.openapi_types = {
            'domain': str,
            'activity_type': UndeprecateActivityTypeInputActivityType
        }

        self.attribute_map = {
            'domain': 'domain',
            'activity_type': 'activityType'
        }

        self._domain = domain
        self._activity_type = activity_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UndeprecateActivityTypeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UndeprecateActivityTypeInput of this UndeprecateActivityTypeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this UndeprecateActivityTypeInput.


        :return: The domain of this UndeprecateActivityTypeInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this UndeprecateActivityTypeInput.


        :param domain: The domain of this UndeprecateActivityTypeInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def activity_type(self):
        """Gets the activity_type of this UndeprecateActivityTypeInput.


        :return: The activity_type of this UndeprecateActivityTypeInput.
        :rtype: UndeprecateActivityTypeInputActivityType
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this UndeprecateActivityTypeInput.


        :param activity_type: The activity_type of this UndeprecateActivityTypeInput.
        :type activity_type: UndeprecateActivityTypeInputActivityType
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")

        self._activity_type = activity_type
