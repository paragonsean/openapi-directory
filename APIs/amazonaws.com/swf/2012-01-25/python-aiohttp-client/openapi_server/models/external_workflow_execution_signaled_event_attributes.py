# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_workflow_execution_signaled_event_attributes_workflow_execution import ExternalWorkflowExecutionSignaledEventAttributesWorkflowExecution
from openapi_server import util


class ExternalWorkflowExecutionSignaledEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_execution: ExternalWorkflowExecutionSignaledEventAttributesWorkflowExecution=None, initiated_event_id: int=None):
        """ExternalWorkflowExecutionSignaledEventAttributes - a model defined in OpenAPI

        :param workflow_execution: The workflow_execution of this ExternalWorkflowExecutionSignaledEventAttributes.
        :param initiated_event_id: The initiated_event_id of this ExternalWorkflowExecutionSignaledEventAttributes.
        """
        self.openapi_types = {
            'workflow_execution': ExternalWorkflowExecutionSignaledEventAttributesWorkflowExecution,
            'initiated_event_id': int
        }

        self.attribute_map = {
            'workflow_execution': 'workflowExecution',
            'initiated_event_id': 'initiatedEventId'
        }

        self._workflow_execution = workflow_execution
        self._initiated_event_id = initiated_event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalWorkflowExecutionSignaledEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalWorkflowExecutionSignaledEventAttributes of this ExternalWorkflowExecutionSignaledEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_execution(self):
        """Gets the workflow_execution of this ExternalWorkflowExecutionSignaledEventAttributes.


        :return: The workflow_execution of this ExternalWorkflowExecutionSignaledEventAttributes.
        :rtype: ExternalWorkflowExecutionSignaledEventAttributesWorkflowExecution
        """
        return self._workflow_execution

    @workflow_execution.setter
    def workflow_execution(self, workflow_execution):
        """Sets the workflow_execution of this ExternalWorkflowExecutionSignaledEventAttributes.


        :param workflow_execution: The workflow_execution of this ExternalWorkflowExecutionSignaledEventAttributes.
        :type workflow_execution: ExternalWorkflowExecutionSignaledEventAttributesWorkflowExecution
        """
        if workflow_execution is None:
            raise ValueError("Invalid value for `workflow_execution`, must not be `None`")

        self._workflow_execution = workflow_execution

    @property
    def initiated_event_id(self):
        """Gets the initiated_event_id of this ExternalWorkflowExecutionSignaledEventAttributes.


        :return: The initiated_event_id of this ExternalWorkflowExecutionSignaledEventAttributes.
        :rtype: int
        """
        return self._initiated_event_id

    @initiated_event_id.setter
    def initiated_event_id(self, initiated_event_id):
        """Sets the initiated_event_id of this ExternalWorkflowExecutionSignaledEventAttributes.


        :param initiated_event_id: The initiated_event_id of this ExternalWorkflowExecutionSignaledEventAttributes.
        :type initiated_event_id: int
        """
        if initiated_event_id is None:
            raise ValueError("Invalid value for `initiated_event_id`, must not be `None`")

        self._initiated_event_id = initiated_event_id
