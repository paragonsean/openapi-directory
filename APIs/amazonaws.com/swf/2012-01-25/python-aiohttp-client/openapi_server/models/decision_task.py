# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.decision_task_workflow_execution import DecisionTaskWorkflowExecution
from openapi_server.models.decision_task_workflow_type import DecisionTaskWorkflowType
from openapi_server import util


class DecisionTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_token: str=None, started_event_id: int=None, workflow_execution: DecisionTaskWorkflowExecution=None, workflow_type: DecisionTaskWorkflowType=None, events: List=None, next_page_token: str=None, previous_started_event_id: int=None):
        """DecisionTask - a model defined in OpenAPI

        :param task_token: The task_token of this DecisionTask.
        :param started_event_id: The started_event_id of this DecisionTask.
        :param workflow_execution: The workflow_execution of this DecisionTask.
        :param workflow_type: The workflow_type of this DecisionTask.
        :param events: The events of this DecisionTask.
        :param next_page_token: The next_page_token of this DecisionTask.
        :param previous_started_event_id: The previous_started_event_id of this DecisionTask.
        """
        self.openapi_types = {
            'task_token': str,
            'started_event_id': int,
            'workflow_execution': DecisionTaskWorkflowExecution,
            'workflow_type': DecisionTaskWorkflowType,
            'events': List,
            'next_page_token': str,
            'previous_started_event_id': int
        }

        self.attribute_map = {
            'task_token': 'taskToken',
            'started_event_id': 'startedEventId',
            'workflow_execution': 'workflowExecution',
            'workflow_type': 'workflowType',
            'events': 'events',
            'next_page_token': 'nextPageToken',
            'previous_started_event_id': 'previousStartedEventId'
        }

        self._task_token = task_token
        self._started_event_id = started_event_id
        self._workflow_execution = workflow_execution
        self._workflow_type = workflow_type
        self._events = events
        self._next_page_token = next_page_token
        self._previous_started_event_id = previous_started_event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DecisionTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DecisionTask of this DecisionTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_token(self):
        """Gets the task_token of this DecisionTask.


        :return: The task_token of this DecisionTask.
        :rtype: str
        """
        return self._task_token

    @task_token.setter
    def task_token(self, task_token):
        """Sets the task_token of this DecisionTask.


        :param task_token: The task_token of this DecisionTask.
        :type task_token: str
        """
        if task_token is None:
            raise ValueError("Invalid value for `task_token`, must not be `None`")

        self._task_token = task_token

    @property
    def started_event_id(self):
        """Gets the started_event_id of this DecisionTask.


        :return: The started_event_id of this DecisionTask.
        :rtype: int
        """
        return self._started_event_id

    @started_event_id.setter
    def started_event_id(self, started_event_id):
        """Sets the started_event_id of this DecisionTask.


        :param started_event_id: The started_event_id of this DecisionTask.
        :type started_event_id: int
        """
        if started_event_id is None:
            raise ValueError("Invalid value for `started_event_id`, must not be `None`")

        self._started_event_id = started_event_id

    @property
    def workflow_execution(self):
        """Gets the workflow_execution of this DecisionTask.


        :return: The workflow_execution of this DecisionTask.
        :rtype: DecisionTaskWorkflowExecution
        """
        return self._workflow_execution

    @workflow_execution.setter
    def workflow_execution(self, workflow_execution):
        """Sets the workflow_execution of this DecisionTask.


        :param workflow_execution: The workflow_execution of this DecisionTask.
        :type workflow_execution: DecisionTaskWorkflowExecution
        """
        if workflow_execution is None:
            raise ValueError("Invalid value for `workflow_execution`, must not be `None`")

        self._workflow_execution = workflow_execution

    @property
    def workflow_type(self):
        """Gets the workflow_type of this DecisionTask.


        :return: The workflow_type of this DecisionTask.
        :rtype: DecisionTaskWorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this DecisionTask.


        :param workflow_type: The workflow_type of this DecisionTask.
        :type workflow_type: DecisionTaskWorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type

    @property
    def events(self):
        """Gets the events of this DecisionTask.


        :return: The events of this DecisionTask.
        :rtype: List
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this DecisionTask.


        :param events: The events of this DecisionTask.
        :type events: List
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def next_page_token(self):
        """Gets the next_page_token of this DecisionTask.


        :return: The next_page_token of this DecisionTask.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this DecisionTask.


        :param next_page_token: The next_page_token of this DecisionTask.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def previous_started_event_id(self):
        """Gets the previous_started_event_id of this DecisionTask.


        :return: The previous_started_event_id of this DecisionTask.
        :rtype: int
        """
        return self._previous_started_event_id

    @previous_started_event_id.setter
    def previous_started_event_id(self, previous_started_event_id):
        """Sets the previous_started_event_id of this DecisionTask.


        :param previous_started_event_id: The previous_started_event_id of this DecisionTask.
        :type previous_started_event_id: int
        """

        self._previous_started_event_id = previous_started_event_id
