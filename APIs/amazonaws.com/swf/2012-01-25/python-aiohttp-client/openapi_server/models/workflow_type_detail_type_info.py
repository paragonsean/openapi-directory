# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registration_status import RegistrationStatus
from openapi_server.models.workflow_type_info_workflow_type import WorkflowTypeInfoWorkflowType
from openapi_server import util


class WorkflowTypeDetailTypeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_type: WorkflowTypeInfoWorkflowType=None, status: RegistrationStatus=None, description: str=None, creation_date: datetime=None, deprecation_date: datetime=None):
        """WorkflowTypeDetailTypeInfo - a model defined in OpenAPI

        :param workflow_type: The workflow_type of this WorkflowTypeDetailTypeInfo.
        :param status: The status of this WorkflowTypeDetailTypeInfo.
        :param description: The description of this WorkflowTypeDetailTypeInfo.
        :param creation_date: The creation_date of this WorkflowTypeDetailTypeInfo.
        :param deprecation_date: The deprecation_date of this WorkflowTypeDetailTypeInfo.
        """
        self.openapi_types = {
            'workflow_type': WorkflowTypeInfoWorkflowType,
            'status': RegistrationStatus,
            'description': str,
            'creation_date': datetime,
            'deprecation_date': datetime
        }

        self.attribute_map = {
            'workflow_type': 'workflowType',
            'status': 'status',
            'description': 'description',
            'creation_date': 'creationDate',
            'deprecation_date': 'deprecationDate'
        }

        self._workflow_type = workflow_type
        self._status = status
        self._description = description
        self._creation_date = creation_date
        self._deprecation_date = deprecation_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowTypeDetailTypeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowTypeDetail_typeInfo of this WorkflowTypeDetailTypeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_type(self):
        """Gets the workflow_type of this WorkflowTypeDetailTypeInfo.


        :return: The workflow_type of this WorkflowTypeDetailTypeInfo.
        :rtype: WorkflowTypeInfoWorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this WorkflowTypeDetailTypeInfo.


        :param workflow_type: The workflow_type of this WorkflowTypeDetailTypeInfo.
        :type workflow_type: WorkflowTypeInfoWorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type

    @property
    def status(self):
        """Gets the status of this WorkflowTypeDetailTypeInfo.


        :return: The status of this WorkflowTypeDetailTypeInfo.
        :rtype: RegistrationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowTypeDetailTypeInfo.


        :param status: The status of this WorkflowTypeDetailTypeInfo.
        :type status: RegistrationStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def description(self):
        """Gets the description of this WorkflowTypeDetailTypeInfo.


        :return: The description of this WorkflowTypeDetailTypeInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowTypeDetailTypeInfo.


        :param description: The description of this WorkflowTypeDetailTypeInfo.
        :type description: str
        """

        self._description = description

    @property
    def creation_date(self):
        """Gets the creation_date of this WorkflowTypeDetailTypeInfo.


        :return: The creation_date of this WorkflowTypeDetailTypeInfo.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this WorkflowTypeDetailTypeInfo.


        :param creation_date: The creation_date of this WorkflowTypeDetailTypeInfo.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def deprecation_date(self):
        """Gets the deprecation_date of this WorkflowTypeDetailTypeInfo.


        :return: The deprecation_date of this WorkflowTypeDetailTypeInfo.
        :rtype: datetime
        """
        return self._deprecation_date

    @deprecation_date.setter
    def deprecation_date(self, deprecation_date):
        """Sets the deprecation_date of this WorkflowTypeDetailTypeInfo.


        :param deprecation_date: The deprecation_date of this WorkflowTypeDetailTypeInfo.
        :type deprecation_date: datetime
        """

        self._deprecation_date = deprecation_date
