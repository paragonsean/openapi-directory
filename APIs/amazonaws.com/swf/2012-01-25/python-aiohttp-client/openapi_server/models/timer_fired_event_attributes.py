# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimerFiredEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timer_id: str=None, started_event_id: int=None):
        """TimerFiredEventAttributes - a model defined in OpenAPI

        :param timer_id: The timer_id of this TimerFiredEventAttributes.
        :param started_event_id: The started_event_id of this TimerFiredEventAttributes.
        """
        self.openapi_types = {
            'timer_id': str,
            'started_event_id': int
        }

        self.attribute_map = {
            'timer_id': 'timerId',
            'started_event_id': 'startedEventId'
        }

        self._timer_id = timer_id
        self._started_event_id = started_event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimerFiredEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimerFiredEventAttributes of this TimerFiredEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timer_id(self):
        """Gets the timer_id of this TimerFiredEventAttributes.


        :return: The timer_id of this TimerFiredEventAttributes.
        :rtype: str
        """
        return self._timer_id

    @timer_id.setter
    def timer_id(self, timer_id):
        """Sets the timer_id of this TimerFiredEventAttributes.


        :param timer_id: The timer_id of this TimerFiredEventAttributes.
        :type timer_id: str
        """
        if timer_id is None:
            raise ValueError("Invalid value for `timer_id`, must not be `None`")

        self._timer_id = timer_id

    @property
    def started_event_id(self):
        """Gets the started_event_id of this TimerFiredEventAttributes.


        :return: The started_event_id of this TimerFiredEventAttributes.
        :rtype: int
        """
        return self._started_event_id

    @started_event_id.setter
    def started_event_id(self, started_event_id):
        """Sets the started_event_id of this TimerFiredEventAttributes.


        :param started_event_id: The started_event_id of this TimerFiredEventAttributes.
        :type started_event_id: int
        """
        if started_event_id is None:
            raise ValueError("Invalid value for `started_event_id`, must not be `None`")

        self._started_event_id = started_event_id
