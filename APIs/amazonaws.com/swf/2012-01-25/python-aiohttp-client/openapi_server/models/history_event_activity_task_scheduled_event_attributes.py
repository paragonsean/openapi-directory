# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_task_scheduled_event_attributes_activity_type import ActivityTaskScheduledEventAttributesActivityType
from openapi_server.models.activity_task_scheduled_event_attributes_task_list import ActivityTaskScheduledEventAttributesTaskList
from openapi_server import util


class HistoryEventActivityTaskScheduledEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_type: ActivityTaskScheduledEventAttributesActivityType=None, activity_id: str=None, input: str=None, control: str=None, schedule_to_start_timeout: str=None, schedule_to_close_timeout: str=None, start_to_close_timeout: str=None, task_list: ActivityTaskScheduledEventAttributesTaskList=None, task_priority: str=None, decision_task_completed_event_id: int=None, heartbeat_timeout: str=None):
        """HistoryEventActivityTaskScheduledEventAttributes - a model defined in OpenAPI

        :param activity_type: The activity_type of this HistoryEventActivityTaskScheduledEventAttributes.
        :param activity_id: The activity_id of this HistoryEventActivityTaskScheduledEventAttributes.
        :param input: The input of this HistoryEventActivityTaskScheduledEventAttributes.
        :param control: The control of this HistoryEventActivityTaskScheduledEventAttributes.
        :param schedule_to_start_timeout: The schedule_to_start_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :param schedule_to_close_timeout: The schedule_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :param start_to_close_timeout: The start_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :param task_list: The task_list of this HistoryEventActivityTaskScheduledEventAttributes.
        :param task_priority: The task_priority of this HistoryEventActivityTaskScheduledEventAttributes.
        :param decision_task_completed_event_id: The decision_task_completed_event_id of this HistoryEventActivityTaskScheduledEventAttributes.
        :param heartbeat_timeout: The heartbeat_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        """
        self.openapi_types = {
            'activity_type': ActivityTaskScheduledEventAttributesActivityType,
            'activity_id': str,
            'input': str,
            'control': str,
            'schedule_to_start_timeout': str,
            'schedule_to_close_timeout': str,
            'start_to_close_timeout': str,
            'task_list': ActivityTaskScheduledEventAttributesTaskList,
            'task_priority': str,
            'decision_task_completed_event_id': int,
            'heartbeat_timeout': str
        }

        self.attribute_map = {
            'activity_type': 'activityType',
            'activity_id': 'activityId',
            'input': 'input',
            'control': 'control',
            'schedule_to_start_timeout': 'scheduleToStartTimeout',
            'schedule_to_close_timeout': 'scheduleToCloseTimeout',
            'start_to_close_timeout': 'startToCloseTimeout',
            'task_list': 'taskList',
            'task_priority': 'taskPriority',
            'decision_task_completed_event_id': 'decisionTaskCompletedEventId',
            'heartbeat_timeout': 'heartbeatTimeout'
        }

        self._activity_type = activity_type
        self._activity_id = activity_id
        self._input = input
        self._control = control
        self._schedule_to_start_timeout = schedule_to_start_timeout
        self._schedule_to_close_timeout = schedule_to_close_timeout
        self._start_to_close_timeout = start_to_close_timeout
        self._task_list = task_list
        self._task_priority = task_priority
        self._decision_task_completed_event_id = decision_task_completed_event_id
        self._heartbeat_timeout = heartbeat_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryEventActivityTaskScheduledEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryEvent_activityTaskScheduledEventAttributes of this HistoryEventActivityTaskScheduledEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_type(self):
        """Gets the activity_type of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The activity_type of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: ActivityTaskScheduledEventAttributesActivityType
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this HistoryEventActivityTaskScheduledEventAttributes.


        :param activity_type: The activity_type of this HistoryEventActivityTaskScheduledEventAttributes.
        :type activity_type: ActivityTaskScheduledEventAttributesActivityType
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")

        self._activity_type = activity_type

    @property
    def activity_id(self):
        """Gets the activity_id of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The activity_id of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this HistoryEventActivityTaskScheduledEventAttributes.


        :param activity_id: The activity_id of this HistoryEventActivityTaskScheduledEventAttributes.
        :type activity_id: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")

        self._activity_id = activity_id

    @property
    def input(self):
        """Gets the input of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The input of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this HistoryEventActivityTaskScheduledEventAttributes.


        :param input: The input of this HistoryEventActivityTaskScheduledEventAttributes.
        :type input: str
        """

        self._input = input

    @property
    def control(self):
        """Gets the control of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The control of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this HistoryEventActivityTaskScheduledEventAttributes.


        :param control: The control of this HistoryEventActivityTaskScheduledEventAttributes.
        :type control: str
        """

        self._control = control

    @property
    def schedule_to_start_timeout(self):
        """Gets the schedule_to_start_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The schedule_to_start_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._schedule_to_start_timeout

    @schedule_to_start_timeout.setter
    def schedule_to_start_timeout(self, schedule_to_start_timeout):
        """Sets the schedule_to_start_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :param schedule_to_start_timeout: The schedule_to_start_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :type schedule_to_start_timeout: str
        """

        self._schedule_to_start_timeout = schedule_to_start_timeout

    @property
    def schedule_to_close_timeout(self):
        """Gets the schedule_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The schedule_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._schedule_to_close_timeout

    @schedule_to_close_timeout.setter
    def schedule_to_close_timeout(self, schedule_to_close_timeout):
        """Sets the schedule_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :param schedule_to_close_timeout: The schedule_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :type schedule_to_close_timeout: str
        """

        self._schedule_to_close_timeout = schedule_to_close_timeout

    @property
    def start_to_close_timeout(self):
        """Gets the start_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The start_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._start_to_close_timeout

    @start_to_close_timeout.setter
    def start_to_close_timeout(self, start_to_close_timeout):
        """Sets the start_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :param start_to_close_timeout: The start_to_close_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :type start_to_close_timeout: str
        """

        self._start_to_close_timeout = start_to_close_timeout

    @property
    def task_list(self):
        """Gets the task_list of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The task_list of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: ActivityTaskScheduledEventAttributesTaskList
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this HistoryEventActivityTaskScheduledEventAttributes.


        :param task_list: The task_list of this HistoryEventActivityTaskScheduledEventAttributes.
        :type task_list: ActivityTaskScheduledEventAttributesTaskList
        """
        if task_list is None:
            raise ValueError("Invalid value for `task_list`, must not be `None`")

        self._task_list = task_list

    @property
    def task_priority(self):
        """Gets the task_priority of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The task_priority of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._task_priority

    @task_priority.setter
    def task_priority(self, task_priority):
        """Sets the task_priority of this HistoryEventActivityTaskScheduledEventAttributes.


        :param task_priority: The task_priority of this HistoryEventActivityTaskScheduledEventAttributes.
        :type task_priority: str
        """

        self._task_priority = task_priority

    @property
    def decision_task_completed_event_id(self):
        """Gets the decision_task_completed_event_id of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The decision_task_completed_event_id of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: int
        """
        return self._decision_task_completed_event_id

    @decision_task_completed_event_id.setter
    def decision_task_completed_event_id(self, decision_task_completed_event_id):
        """Sets the decision_task_completed_event_id of this HistoryEventActivityTaskScheduledEventAttributes.


        :param decision_task_completed_event_id: The decision_task_completed_event_id of this HistoryEventActivityTaskScheduledEventAttributes.
        :type decision_task_completed_event_id: int
        """
        if decision_task_completed_event_id is None:
            raise ValueError("Invalid value for `decision_task_completed_event_id`, must not be `None`")

        self._decision_task_completed_event_id = decision_task_completed_event_id

    @property
    def heartbeat_timeout(self):
        """Gets the heartbeat_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :return: The heartbeat_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._heartbeat_timeout

    @heartbeat_timeout.setter
    def heartbeat_timeout(self, heartbeat_timeout):
        """Sets the heartbeat_timeout of this HistoryEventActivityTaskScheduledEventAttributes.


        :param heartbeat_timeout: The heartbeat_timeout of this HistoryEventActivityTaskScheduledEventAttributes.
        :type heartbeat_timeout: str
        """

        self._heartbeat_timeout = heartbeat_timeout
