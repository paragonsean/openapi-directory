# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity_task_activity_type import ActivityTaskActivityType
from openapi_server.models.activity_task_workflow_execution import ActivityTaskWorkflowExecution
from openapi_server import util


class ActivityTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_token: str=None, activity_id: str=None, started_event_id: int=None, workflow_execution: ActivityTaskWorkflowExecution=None, activity_type: ActivityTaskActivityType=None, input: str=None):
        """ActivityTask - a model defined in OpenAPI

        :param task_token: The task_token of this ActivityTask.
        :param activity_id: The activity_id of this ActivityTask.
        :param started_event_id: The started_event_id of this ActivityTask.
        :param workflow_execution: The workflow_execution of this ActivityTask.
        :param activity_type: The activity_type of this ActivityTask.
        :param input: The input of this ActivityTask.
        """
        self.openapi_types = {
            'task_token': str,
            'activity_id': str,
            'started_event_id': int,
            'workflow_execution': ActivityTaskWorkflowExecution,
            'activity_type': ActivityTaskActivityType,
            'input': str
        }

        self.attribute_map = {
            'task_token': 'taskToken',
            'activity_id': 'activityId',
            'started_event_id': 'startedEventId',
            'workflow_execution': 'workflowExecution',
            'activity_type': 'activityType',
            'input': 'input'
        }

        self._task_token = task_token
        self._activity_id = activity_id
        self._started_event_id = started_event_id
        self._workflow_execution = workflow_execution
        self._activity_type = activity_type
        self._input = input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivityTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivityTask of this ActivityTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_token(self):
        """Gets the task_token of this ActivityTask.


        :return: The task_token of this ActivityTask.
        :rtype: str
        """
        return self._task_token

    @task_token.setter
    def task_token(self, task_token):
        """Sets the task_token of this ActivityTask.


        :param task_token: The task_token of this ActivityTask.
        :type task_token: str
        """
        if task_token is None:
            raise ValueError("Invalid value for `task_token`, must not be `None`")

        self._task_token = task_token

    @property
    def activity_id(self):
        """Gets the activity_id of this ActivityTask.


        :return: The activity_id of this ActivityTask.
        :rtype: str
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ActivityTask.


        :param activity_id: The activity_id of this ActivityTask.
        :type activity_id: str
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")

        self._activity_id = activity_id

    @property
    def started_event_id(self):
        """Gets the started_event_id of this ActivityTask.


        :return: The started_event_id of this ActivityTask.
        :rtype: int
        """
        return self._started_event_id

    @started_event_id.setter
    def started_event_id(self, started_event_id):
        """Sets the started_event_id of this ActivityTask.


        :param started_event_id: The started_event_id of this ActivityTask.
        :type started_event_id: int
        """
        if started_event_id is None:
            raise ValueError("Invalid value for `started_event_id`, must not be `None`")

        self._started_event_id = started_event_id

    @property
    def workflow_execution(self):
        """Gets the workflow_execution of this ActivityTask.


        :return: The workflow_execution of this ActivityTask.
        :rtype: ActivityTaskWorkflowExecution
        """
        return self._workflow_execution

    @workflow_execution.setter
    def workflow_execution(self, workflow_execution):
        """Sets the workflow_execution of this ActivityTask.


        :param workflow_execution: The workflow_execution of this ActivityTask.
        :type workflow_execution: ActivityTaskWorkflowExecution
        """
        if workflow_execution is None:
            raise ValueError("Invalid value for `workflow_execution`, must not be `None`")

        self._workflow_execution = workflow_execution

    @property
    def activity_type(self):
        """Gets the activity_type of this ActivityTask.


        :return: The activity_type of this ActivityTask.
        :rtype: ActivityTaskActivityType
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this ActivityTask.


        :param activity_type: The activity_type of this ActivityTask.
        :type activity_type: ActivityTaskActivityType
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")

        self._activity_type = activity_type

    @property
    def input(self):
        """Gets the input of this ActivityTask.


        :return: The input of this ActivityTask.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this ActivityTask.


        :param input: The input of this ActivityTask.
        :type input: str
        """

        self._input = input
