# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.decision_task_scheduled_event_attributes_task_list import DecisionTaskScheduledEventAttributesTaskList
from openapi_server import util


class HistoryEventDecisionTaskScheduledEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_list: DecisionTaskScheduledEventAttributesTaskList=None, task_priority: str=None, start_to_close_timeout: str=None):
        """HistoryEventDecisionTaskScheduledEventAttributes - a model defined in OpenAPI

        :param task_list: The task_list of this HistoryEventDecisionTaskScheduledEventAttributes.
        :param task_priority: The task_priority of this HistoryEventDecisionTaskScheduledEventAttributes.
        :param start_to_close_timeout: The start_to_close_timeout of this HistoryEventDecisionTaskScheduledEventAttributes.
        """
        self.openapi_types = {
            'task_list': DecisionTaskScheduledEventAttributesTaskList,
            'task_priority': str,
            'start_to_close_timeout': str
        }

        self.attribute_map = {
            'task_list': 'taskList',
            'task_priority': 'taskPriority',
            'start_to_close_timeout': 'startToCloseTimeout'
        }

        self._task_list = task_list
        self._task_priority = task_priority
        self._start_to_close_timeout = start_to_close_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryEventDecisionTaskScheduledEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryEvent_decisionTaskScheduledEventAttributes of this HistoryEventDecisionTaskScheduledEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_list(self):
        """Gets the task_list of this HistoryEventDecisionTaskScheduledEventAttributes.


        :return: The task_list of this HistoryEventDecisionTaskScheduledEventAttributes.
        :rtype: DecisionTaskScheduledEventAttributesTaskList
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this HistoryEventDecisionTaskScheduledEventAttributes.


        :param task_list: The task_list of this HistoryEventDecisionTaskScheduledEventAttributes.
        :type task_list: DecisionTaskScheduledEventAttributesTaskList
        """
        if task_list is None:
            raise ValueError("Invalid value for `task_list`, must not be `None`")

        self._task_list = task_list

    @property
    def task_priority(self):
        """Gets the task_priority of this HistoryEventDecisionTaskScheduledEventAttributes.


        :return: The task_priority of this HistoryEventDecisionTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._task_priority

    @task_priority.setter
    def task_priority(self, task_priority):
        """Sets the task_priority of this HistoryEventDecisionTaskScheduledEventAttributes.


        :param task_priority: The task_priority of this HistoryEventDecisionTaskScheduledEventAttributes.
        :type task_priority: str
        """

        self._task_priority = task_priority

    @property
    def start_to_close_timeout(self):
        """Gets the start_to_close_timeout of this HistoryEventDecisionTaskScheduledEventAttributes.


        :return: The start_to_close_timeout of this HistoryEventDecisionTaskScheduledEventAttributes.
        :rtype: str
        """
        return self._start_to_close_timeout

    @start_to_close_timeout.setter
    def start_to_close_timeout(self, start_to_close_timeout):
        """Sets the start_to_close_timeout of this HistoryEventDecisionTaskScheduledEventAttributes.


        :param start_to_close_timeout: The start_to_close_timeout of this HistoryEventDecisionTaskScheduledEventAttributes.
        :type start_to_close_timeout: str
        """

        self._start_to_close_timeout = start_to_close_timeout
