# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.poll_for_decision_task_input_task_list import PollForDecisionTaskInputTaskList
from openapi_server import util


class PollForDecisionTaskInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, task_list: PollForDecisionTaskInputTaskList=None, identity: str=None, next_page_token: str=None, maximum_page_size: int=None, reverse_order: bool=None, start_at_previous_started_event: bool=None):
        """PollForDecisionTaskInput - a model defined in OpenAPI

        :param domain: The domain of this PollForDecisionTaskInput.
        :param task_list: The task_list of this PollForDecisionTaskInput.
        :param identity: The identity of this PollForDecisionTaskInput.
        :param next_page_token: The next_page_token of this PollForDecisionTaskInput.
        :param maximum_page_size: The maximum_page_size of this PollForDecisionTaskInput.
        :param reverse_order: The reverse_order of this PollForDecisionTaskInput.
        :param start_at_previous_started_event: The start_at_previous_started_event of this PollForDecisionTaskInput.
        """
        self.openapi_types = {
            'domain': str,
            'task_list': PollForDecisionTaskInputTaskList,
            'identity': str,
            'next_page_token': str,
            'maximum_page_size': int,
            'reverse_order': bool,
            'start_at_previous_started_event': bool
        }

        self.attribute_map = {
            'domain': 'domain',
            'task_list': 'taskList',
            'identity': 'identity',
            'next_page_token': 'nextPageToken',
            'maximum_page_size': 'maximumPageSize',
            'reverse_order': 'reverseOrder',
            'start_at_previous_started_event': 'startAtPreviousStartedEvent'
        }

        self._domain = domain
        self._task_list = task_list
        self._identity = identity
        self._next_page_token = next_page_token
        self._maximum_page_size = maximum_page_size
        self._reverse_order = reverse_order
        self._start_at_previous_started_event = start_at_previous_started_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PollForDecisionTaskInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PollForDecisionTaskInput of this PollForDecisionTaskInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this PollForDecisionTaskInput.


        :return: The domain of this PollForDecisionTaskInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this PollForDecisionTaskInput.


        :param domain: The domain of this PollForDecisionTaskInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def task_list(self):
        """Gets the task_list of this PollForDecisionTaskInput.


        :return: The task_list of this PollForDecisionTaskInput.
        :rtype: PollForDecisionTaskInputTaskList
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this PollForDecisionTaskInput.


        :param task_list: The task_list of this PollForDecisionTaskInput.
        :type task_list: PollForDecisionTaskInputTaskList
        """
        if task_list is None:
            raise ValueError("Invalid value for `task_list`, must not be `None`")

        self._task_list = task_list

    @property
    def identity(self):
        """Gets the identity of this PollForDecisionTaskInput.


        :return: The identity of this PollForDecisionTaskInput.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this PollForDecisionTaskInput.


        :param identity: The identity of this PollForDecisionTaskInput.
        :type identity: str
        """

        self._identity = identity

    @property
    def next_page_token(self):
        """Gets the next_page_token of this PollForDecisionTaskInput.


        :return: The next_page_token of this PollForDecisionTaskInput.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this PollForDecisionTaskInput.


        :param next_page_token: The next_page_token of this PollForDecisionTaskInput.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def maximum_page_size(self):
        """Gets the maximum_page_size of this PollForDecisionTaskInput.


        :return: The maximum_page_size of this PollForDecisionTaskInput.
        :rtype: int
        """
        return self._maximum_page_size

    @maximum_page_size.setter
    def maximum_page_size(self, maximum_page_size):
        """Sets the maximum_page_size of this PollForDecisionTaskInput.


        :param maximum_page_size: The maximum_page_size of this PollForDecisionTaskInput.
        :type maximum_page_size: int
        """

        self._maximum_page_size = maximum_page_size

    @property
    def reverse_order(self):
        """Gets the reverse_order of this PollForDecisionTaskInput.


        :return: The reverse_order of this PollForDecisionTaskInput.
        :rtype: bool
        """
        return self._reverse_order

    @reverse_order.setter
    def reverse_order(self, reverse_order):
        """Sets the reverse_order of this PollForDecisionTaskInput.


        :param reverse_order: The reverse_order of this PollForDecisionTaskInput.
        :type reverse_order: bool
        """

        self._reverse_order = reverse_order

    @property
    def start_at_previous_started_event(self):
        """Gets the start_at_previous_started_event of this PollForDecisionTaskInput.


        :return: The start_at_previous_started_event of this PollForDecisionTaskInput.
        :rtype: bool
        """
        return self._start_at_previous_started_event

    @start_at_previous_started_event.setter
    def start_at_previous_started_event(self, start_at_previous_started_event):
        """Sets the start_at_previous_started_event of this PollForDecisionTaskInput.


        :param start_at_previous_started_event: The start_at_previous_started_event of this PollForDecisionTaskInput.
        :type start_at_previous_started_event: bool
        """

        self._start_at_previous_started_event = start_at_previous_started_event
