# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowExecutionOpenCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, open_activity_tasks: int=None, open_decision_tasks: int=None, open_timers: int=None, open_child_workflow_executions: int=None, open_lambda_functions: int=None):
        """WorkflowExecutionOpenCounts - a model defined in OpenAPI

        :param open_activity_tasks: The open_activity_tasks of this WorkflowExecutionOpenCounts.
        :param open_decision_tasks: The open_decision_tasks of this WorkflowExecutionOpenCounts.
        :param open_timers: The open_timers of this WorkflowExecutionOpenCounts.
        :param open_child_workflow_executions: The open_child_workflow_executions of this WorkflowExecutionOpenCounts.
        :param open_lambda_functions: The open_lambda_functions of this WorkflowExecutionOpenCounts.
        """
        self.openapi_types = {
            'open_activity_tasks': int,
            'open_decision_tasks': int,
            'open_timers': int,
            'open_child_workflow_executions': int,
            'open_lambda_functions': int
        }

        self.attribute_map = {
            'open_activity_tasks': 'openActivityTasks',
            'open_decision_tasks': 'openDecisionTasks',
            'open_timers': 'openTimers',
            'open_child_workflow_executions': 'openChildWorkflowExecutions',
            'open_lambda_functions': 'openLambdaFunctions'
        }

        self._open_activity_tasks = open_activity_tasks
        self._open_decision_tasks = open_decision_tasks
        self._open_timers = open_timers
        self._open_child_workflow_executions = open_child_workflow_executions
        self._open_lambda_functions = open_lambda_functions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutionOpenCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutionOpenCounts of this WorkflowExecutionOpenCounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def open_activity_tasks(self):
        """Gets the open_activity_tasks of this WorkflowExecutionOpenCounts.


        :return: The open_activity_tasks of this WorkflowExecutionOpenCounts.
        :rtype: int
        """
        return self._open_activity_tasks

    @open_activity_tasks.setter
    def open_activity_tasks(self, open_activity_tasks):
        """Sets the open_activity_tasks of this WorkflowExecutionOpenCounts.


        :param open_activity_tasks: The open_activity_tasks of this WorkflowExecutionOpenCounts.
        :type open_activity_tasks: int
        """
        if open_activity_tasks is None:
            raise ValueError("Invalid value for `open_activity_tasks`, must not be `None`")

        self._open_activity_tasks = open_activity_tasks

    @property
    def open_decision_tasks(self):
        """Gets the open_decision_tasks of this WorkflowExecutionOpenCounts.


        :return: The open_decision_tasks of this WorkflowExecutionOpenCounts.
        :rtype: int
        """
        return self._open_decision_tasks

    @open_decision_tasks.setter
    def open_decision_tasks(self, open_decision_tasks):
        """Sets the open_decision_tasks of this WorkflowExecutionOpenCounts.


        :param open_decision_tasks: The open_decision_tasks of this WorkflowExecutionOpenCounts.
        :type open_decision_tasks: int
        """
        if open_decision_tasks is None:
            raise ValueError("Invalid value for `open_decision_tasks`, must not be `None`")

        self._open_decision_tasks = open_decision_tasks

    @property
    def open_timers(self):
        """Gets the open_timers of this WorkflowExecutionOpenCounts.


        :return: The open_timers of this WorkflowExecutionOpenCounts.
        :rtype: int
        """
        return self._open_timers

    @open_timers.setter
    def open_timers(self, open_timers):
        """Sets the open_timers of this WorkflowExecutionOpenCounts.


        :param open_timers: The open_timers of this WorkflowExecutionOpenCounts.
        :type open_timers: int
        """
        if open_timers is None:
            raise ValueError("Invalid value for `open_timers`, must not be `None`")

        self._open_timers = open_timers

    @property
    def open_child_workflow_executions(self):
        """Gets the open_child_workflow_executions of this WorkflowExecutionOpenCounts.


        :return: The open_child_workflow_executions of this WorkflowExecutionOpenCounts.
        :rtype: int
        """
        return self._open_child_workflow_executions

    @open_child_workflow_executions.setter
    def open_child_workflow_executions(self, open_child_workflow_executions):
        """Sets the open_child_workflow_executions of this WorkflowExecutionOpenCounts.


        :param open_child_workflow_executions: The open_child_workflow_executions of this WorkflowExecutionOpenCounts.
        :type open_child_workflow_executions: int
        """
        if open_child_workflow_executions is None:
            raise ValueError("Invalid value for `open_child_workflow_executions`, must not be `None`")

        self._open_child_workflow_executions = open_child_workflow_executions

    @property
    def open_lambda_functions(self):
        """Gets the open_lambda_functions of this WorkflowExecutionOpenCounts.


        :return: The open_lambda_functions of this WorkflowExecutionOpenCounts.
        :rtype: int
        """
        return self._open_lambda_functions

    @open_lambda_functions.setter
    def open_lambda_functions(self, open_lambda_functions):
        """Sets the open_lambda_functions of this WorkflowExecutionOpenCounts.


        :param open_lambda_functions: The open_lambda_functions of this WorkflowExecutionOpenCounts.
        :type open_lambda_functions: int
        """

        self._open_lambda_functions = open_lambda_functions
