# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_workflow_execution_canceled_event_attributes_workflow_execution import ChildWorkflowExecutionCanceledEventAttributesWorkflowExecution
from openapi_server.models.child_workflow_execution_canceled_event_attributes_workflow_type import ChildWorkflowExecutionCanceledEventAttributesWorkflowType
from openapi_server import util


class HistoryEventChildWorkflowExecutionCanceledEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_execution: ChildWorkflowExecutionCanceledEventAttributesWorkflowExecution=None, workflow_type: ChildWorkflowExecutionCanceledEventAttributesWorkflowType=None, details: str=None, initiated_event_id: int=None, started_event_id: int=None):
        """HistoryEventChildWorkflowExecutionCanceledEventAttributes - a model defined in OpenAPI

        :param workflow_execution: The workflow_execution of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :param workflow_type: The workflow_type of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :param details: The details of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :param initiated_event_id: The initiated_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :param started_event_id: The started_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        """
        self.openapi_types = {
            'workflow_execution': ChildWorkflowExecutionCanceledEventAttributesWorkflowExecution,
            'workflow_type': ChildWorkflowExecutionCanceledEventAttributesWorkflowType,
            'details': str,
            'initiated_event_id': int,
            'started_event_id': int
        }

        self.attribute_map = {
            'workflow_execution': 'workflowExecution',
            'workflow_type': 'workflowType',
            'details': 'details',
            'initiated_event_id': 'initiatedEventId',
            'started_event_id': 'startedEventId'
        }

        self._workflow_execution = workflow_execution
        self._workflow_type = workflow_type
        self._details = details
        self._initiated_event_id = initiated_event_id
        self._started_event_id = started_event_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryEventChildWorkflowExecutionCanceledEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryEvent_childWorkflowExecutionCanceledEventAttributes of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_execution(self):
        """Gets the workflow_execution of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :return: The workflow_execution of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :rtype: ChildWorkflowExecutionCanceledEventAttributesWorkflowExecution
        """
        return self._workflow_execution

    @workflow_execution.setter
    def workflow_execution(self, workflow_execution):
        """Sets the workflow_execution of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :param workflow_execution: The workflow_execution of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :type workflow_execution: ChildWorkflowExecutionCanceledEventAttributesWorkflowExecution
        """
        if workflow_execution is None:
            raise ValueError("Invalid value for `workflow_execution`, must not be `None`")

        self._workflow_execution = workflow_execution

    @property
    def workflow_type(self):
        """Gets the workflow_type of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :return: The workflow_type of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :rtype: ChildWorkflowExecutionCanceledEventAttributesWorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :param workflow_type: The workflow_type of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :type workflow_type: ChildWorkflowExecutionCanceledEventAttributesWorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type

    @property
    def details(self):
        """Gets the details of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :return: The details of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :param details: The details of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :type details: str
        """

        self._details = details

    @property
    def initiated_event_id(self):
        """Gets the initiated_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :return: The initiated_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :rtype: int
        """
        return self._initiated_event_id

    @initiated_event_id.setter
    def initiated_event_id(self, initiated_event_id):
        """Sets the initiated_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :param initiated_event_id: The initiated_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :type initiated_event_id: int
        """
        if initiated_event_id is None:
            raise ValueError("Invalid value for `initiated_event_id`, must not be `None`")

        self._initiated_event_id = initiated_event_id

    @property
    def started_event_id(self):
        """Gets the started_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :return: The started_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :rtype: int
        """
        return self._started_event_id

    @started_event_id.setter
    def started_event_id(self, started_event_id):
        """Sets the started_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.


        :param started_event_id: The started_event_id of this HistoryEventChildWorkflowExecutionCanceledEventAttributes.
        :type started_event_id: int
        """
        if started_event_id is None:
            raise ValueError("Invalid value for `started_event_id`, must not be `None`")

        self._started_event_id = started_event_id
