# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_type_detail_configuration import WorkflowTypeDetailConfiguration
from openapi_server.models.workflow_type_detail_type_info import WorkflowTypeDetailTypeInfo
from openapi_server import util


class WorkflowTypeDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type_info: WorkflowTypeDetailTypeInfo=None, configuration: WorkflowTypeDetailConfiguration=None):
        """WorkflowTypeDetail - a model defined in OpenAPI

        :param type_info: The type_info of this WorkflowTypeDetail.
        :param configuration: The configuration of this WorkflowTypeDetail.
        """
        self.openapi_types = {
            'type_info': WorkflowTypeDetailTypeInfo,
            'configuration': WorkflowTypeDetailConfiguration
        }

        self.attribute_map = {
            'type_info': 'typeInfo',
            'configuration': 'configuration'
        }

        self._type_info = type_info
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowTypeDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowTypeDetail of this WorkflowTypeDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type_info(self):
        """Gets the type_info of this WorkflowTypeDetail.


        :return: The type_info of this WorkflowTypeDetail.
        :rtype: WorkflowTypeDetailTypeInfo
        """
        return self._type_info

    @type_info.setter
    def type_info(self, type_info):
        """Sets the type_info of this WorkflowTypeDetail.


        :param type_info: The type_info of this WorkflowTypeDetail.
        :type type_info: WorkflowTypeDetailTypeInfo
        """
        if type_info is None:
            raise ValueError("Invalid value for `type_info`, must not be `None`")

        self._type_info = type_info

    @property
    def configuration(self):
        """Gets the configuration of this WorkflowTypeDetail.


        :return: The configuration of this WorkflowTypeDetail.
        :rtype: WorkflowTypeDetailConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this WorkflowTypeDetail.


        :param configuration: The configuration of this WorkflowTypeDetail.
        :type configuration: WorkflowTypeDetailConfiguration
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")

        self._configuration = configuration
