# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_policy import ChildPolicy
from openapi_server.models.continue_as_new_workflow_execution_decision_attributes_task_list import ContinueAsNewWorkflowExecutionDecisionAttributesTaskList
from openapi_server.models.workflow_execution_started_event_attributes_workflow_type import WorkflowExecutionStartedEventAttributesWorkflowType
from openapi_server import util


class WorkflowExecutionContinuedAsNewEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input: str=None, decision_task_completed_event_id: int=None, new_execution_run_id: str=None, execution_start_to_close_timeout: str=None, task_list: ContinueAsNewWorkflowExecutionDecisionAttributesTaskList=None, task_priority: str=None, task_start_to_close_timeout: str=None, child_policy: ChildPolicy=None, tag_list: List=None, workflow_type: WorkflowExecutionStartedEventAttributesWorkflowType=None, lambda_role: str=None):
        """WorkflowExecutionContinuedAsNewEventAttributes - a model defined in OpenAPI

        :param input: The input of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param decision_task_completed_event_id: The decision_task_completed_event_id of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param new_execution_run_id: The new_execution_run_id of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param execution_start_to_close_timeout: The execution_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param task_list: The task_list of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param task_priority: The task_priority of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param task_start_to_close_timeout: The task_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param child_policy: The child_policy of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param tag_list: The tag_list of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param workflow_type: The workflow_type of this WorkflowExecutionContinuedAsNewEventAttributes.
        :param lambda_role: The lambda_role of this WorkflowExecutionContinuedAsNewEventAttributes.
        """
        self.openapi_types = {
            'input': str,
            'decision_task_completed_event_id': int,
            'new_execution_run_id': str,
            'execution_start_to_close_timeout': str,
            'task_list': ContinueAsNewWorkflowExecutionDecisionAttributesTaskList,
            'task_priority': str,
            'task_start_to_close_timeout': str,
            'child_policy': ChildPolicy,
            'tag_list': List,
            'workflow_type': WorkflowExecutionStartedEventAttributesWorkflowType,
            'lambda_role': str
        }

        self.attribute_map = {
            'input': 'input',
            'decision_task_completed_event_id': 'decisionTaskCompletedEventId',
            'new_execution_run_id': 'newExecutionRunId',
            'execution_start_to_close_timeout': 'executionStartToCloseTimeout',
            'task_list': 'taskList',
            'task_priority': 'taskPriority',
            'task_start_to_close_timeout': 'taskStartToCloseTimeout',
            'child_policy': 'childPolicy',
            'tag_list': 'tagList',
            'workflow_type': 'workflowType',
            'lambda_role': 'lambdaRole'
        }

        self._input = input
        self._decision_task_completed_event_id = decision_task_completed_event_id
        self._new_execution_run_id = new_execution_run_id
        self._execution_start_to_close_timeout = execution_start_to_close_timeout
        self._task_list = task_list
        self._task_priority = task_priority
        self._task_start_to_close_timeout = task_start_to_close_timeout
        self._child_policy = child_policy
        self._tag_list = tag_list
        self._workflow_type = workflow_type
        self._lambda_role = lambda_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutionContinuedAsNewEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutionContinuedAsNewEventAttributes of this WorkflowExecutionContinuedAsNewEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input(self):
        """Gets the input of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The input of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param input: The input of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type input: str
        """

        self._input = input

    @property
    def decision_task_completed_event_id(self):
        """Gets the decision_task_completed_event_id of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The decision_task_completed_event_id of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: int
        """
        return self._decision_task_completed_event_id

    @decision_task_completed_event_id.setter
    def decision_task_completed_event_id(self, decision_task_completed_event_id):
        """Sets the decision_task_completed_event_id of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param decision_task_completed_event_id: The decision_task_completed_event_id of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type decision_task_completed_event_id: int
        """
        if decision_task_completed_event_id is None:
            raise ValueError("Invalid value for `decision_task_completed_event_id`, must not be `None`")

        self._decision_task_completed_event_id = decision_task_completed_event_id

    @property
    def new_execution_run_id(self):
        """Gets the new_execution_run_id of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The new_execution_run_id of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: str
        """
        return self._new_execution_run_id

    @new_execution_run_id.setter
    def new_execution_run_id(self, new_execution_run_id):
        """Sets the new_execution_run_id of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param new_execution_run_id: The new_execution_run_id of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type new_execution_run_id: str
        """
        if new_execution_run_id is None:
            raise ValueError("Invalid value for `new_execution_run_id`, must not be `None`")

        self._new_execution_run_id = new_execution_run_id

    @property
    def execution_start_to_close_timeout(self):
        """Gets the execution_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The execution_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: str
        """
        return self._execution_start_to_close_timeout

    @execution_start_to_close_timeout.setter
    def execution_start_to_close_timeout(self, execution_start_to_close_timeout):
        """Sets the execution_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param execution_start_to_close_timeout: The execution_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type execution_start_to_close_timeout: str
        """

        self._execution_start_to_close_timeout = execution_start_to_close_timeout

    @property
    def task_list(self):
        """Gets the task_list of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The task_list of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: ContinueAsNewWorkflowExecutionDecisionAttributesTaskList
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param task_list: The task_list of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type task_list: ContinueAsNewWorkflowExecutionDecisionAttributesTaskList
        """
        if task_list is None:
            raise ValueError("Invalid value for `task_list`, must not be `None`")

        self._task_list = task_list

    @property
    def task_priority(self):
        """Gets the task_priority of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The task_priority of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: str
        """
        return self._task_priority

    @task_priority.setter
    def task_priority(self, task_priority):
        """Sets the task_priority of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param task_priority: The task_priority of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type task_priority: str
        """

        self._task_priority = task_priority

    @property
    def task_start_to_close_timeout(self):
        """Gets the task_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The task_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: str
        """
        return self._task_start_to_close_timeout

    @task_start_to_close_timeout.setter
    def task_start_to_close_timeout(self, task_start_to_close_timeout):
        """Sets the task_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param task_start_to_close_timeout: The task_start_to_close_timeout of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type task_start_to_close_timeout: str
        """

        self._task_start_to_close_timeout = task_start_to_close_timeout

    @property
    def child_policy(self):
        """Gets the child_policy of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The child_policy of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: ChildPolicy
        """
        return self._child_policy

    @child_policy.setter
    def child_policy(self, child_policy):
        """Sets the child_policy of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param child_policy: The child_policy of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type child_policy: ChildPolicy
        """
        if child_policy is None:
            raise ValueError("Invalid value for `child_policy`, must not be `None`")

        self._child_policy = child_policy

    @property
    def tag_list(self):
        """Gets the tag_list of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The tag_list of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: List
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param tag_list: The tag_list of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type tag_list: List
        """

        self._tag_list = tag_list

    @property
    def workflow_type(self):
        """Gets the workflow_type of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The workflow_type of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: WorkflowExecutionStartedEventAttributesWorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param workflow_type: The workflow_type of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type workflow_type: WorkflowExecutionStartedEventAttributesWorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type

    @property
    def lambda_role(self):
        """Gets the lambda_role of this WorkflowExecutionContinuedAsNewEventAttributes.


        :return: The lambda_role of this WorkflowExecutionContinuedAsNewEventAttributes.
        :rtype: str
        """
        return self._lambda_role

    @lambda_role.setter
    def lambda_role(self, lambda_role):
        """Sets the lambda_role of this WorkflowExecutionContinuedAsNewEventAttributes.


        :param lambda_role: The lambda_role of this WorkflowExecutionContinuedAsNewEventAttributes.
        :type lambda_role: str
        """

        self._lambda_role = lambda_role
