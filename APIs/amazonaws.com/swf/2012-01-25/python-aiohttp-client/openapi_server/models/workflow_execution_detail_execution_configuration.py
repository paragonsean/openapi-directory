# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_policy import ChildPolicy
from openapi_server.models.workflow_execution_configuration_task_list import WorkflowExecutionConfigurationTaskList
from openapi_server import util


class WorkflowExecutionDetailExecutionConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_start_to_close_timeout: str=None, execution_start_to_close_timeout: str=None, task_list: WorkflowExecutionConfigurationTaskList=None, task_priority: str=None, child_policy: ChildPolicy=None, lambda_role: str=None):
        """WorkflowExecutionDetailExecutionConfiguration - a model defined in OpenAPI

        :param task_start_to_close_timeout: The task_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.
        :param execution_start_to_close_timeout: The execution_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.
        :param task_list: The task_list of this WorkflowExecutionDetailExecutionConfiguration.
        :param task_priority: The task_priority of this WorkflowExecutionDetailExecutionConfiguration.
        :param child_policy: The child_policy of this WorkflowExecutionDetailExecutionConfiguration.
        :param lambda_role: The lambda_role of this WorkflowExecutionDetailExecutionConfiguration.
        """
        self.openapi_types = {
            'task_start_to_close_timeout': str,
            'execution_start_to_close_timeout': str,
            'task_list': WorkflowExecutionConfigurationTaskList,
            'task_priority': str,
            'child_policy': ChildPolicy,
            'lambda_role': str
        }

        self.attribute_map = {
            'task_start_to_close_timeout': 'taskStartToCloseTimeout',
            'execution_start_to_close_timeout': 'executionStartToCloseTimeout',
            'task_list': 'taskList',
            'task_priority': 'taskPriority',
            'child_policy': 'childPolicy',
            'lambda_role': 'lambdaRole'
        }

        self._task_start_to_close_timeout = task_start_to_close_timeout
        self._execution_start_to_close_timeout = execution_start_to_close_timeout
        self._task_list = task_list
        self._task_priority = task_priority
        self._child_policy = child_policy
        self._lambda_role = lambda_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutionDetailExecutionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutionDetail_executionConfiguration of this WorkflowExecutionDetailExecutionConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_start_to_close_timeout(self):
        """Gets the task_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.


        :return: The task_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.
        :rtype: str
        """
        return self._task_start_to_close_timeout

    @task_start_to_close_timeout.setter
    def task_start_to_close_timeout(self, task_start_to_close_timeout):
        """Sets the task_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.


        :param task_start_to_close_timeout: The task_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.
        :type task_start_to_close_timeout: str
        """
        if task_start_to_close_timeout is None:
            raise ValueError("Invalid value for `task_start_to_close_timeout`, must not be `None`")

        self._task_start_to_close_timeout = task_start_to_close_timeout

    @property
    def execution_start_to_close_timeout(self):
        """Gets the execution_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.


        :return: The execution_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.
        :rtype: str
        """
        return self._execution_start_to_close_timeout

    @execution_start_to_close_timeout.setter
    def execution_start_to_close_timeout(self, execution_start_to_close_timeout):
        """Sets the execution_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.


        :param execution_start_to_close_timeout: The execution_start_to_close_timeout of this WorkflowExecutionDetailExecutionConfiguration.
        :type execution_start_to_close_timeout: str
        """
        if execution_start_to_close_timeout is None:
            raise ValueError("Invalid value for `execution_start_to_close_timeout`, must not be `None`")

        self._execution_start_to_close_timeout = execution_start_to_close_timeout

    @property
    def task_list(self):
        """Gets the task_list of this WorkflowExecutionDetailExecutionConfiguration.


        :return: The task_list of this WorkflowExecutionDetailExecutionConfiguration.
        :rtype: WorkflowExecutionConfigurationTaskList
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this WorkflowExecutionDetailExecutionConfiguration.


        :param task_list: The task_list of this WorkflowExecutionDetailExecutionConfiguration.
        :type task_list: WorkflowExecutionConfigurationTaskList
        """
        if task_list is None:
            raise ValueError("Invalid value for `task_list`, must not be `None`")

        self._task_list = task_list

    @property
    def task_priority(self):
        """Gets the task_priority of this WorkflowExecutionDetailExecutionConfiguration.


        :return: The task_priority of this WorkflowExecutionDetailExecutionConfiguration.
        :rtype: str
        """
        return self._task_priority

    @task_priority.setter
    def task_priority(self, task_priority):
        """Sets the task_priority of this WorkflowExecutionDetailExecutionConfiguration.


        :param task_priority: The task_priority of this WorkflowExecutionDetailExecutionConfiguration.
        :type task_priority: str
        """

        self._task_priority = task_priority

    @property
    def child_policy(self):
        """Gets the child_policy of this WorkflowExecutionDetailExecutionConfiguration.


        :return: The child_policy of this WorkflowExecutionDetailExecutionConfiguration.
        :rtype: ChildPolicy
        """
        return self._child_policy

    @child_policy.setter
    def child_policy(self, child_policy):
        """Sets the child_policy of this WorkflowExecutionDetailExecutionConfiguration.


        :param child_policy: The child_policy of this WorkflowExecutionDetailExecutionConfiguration.
        :type child_policy: ChildPolicy
        """
        if child_policy is None:
            raise ValueError("Invalid value for `child_policy`, must not be `None`")

        self._child_policy = child_policy

    @property
    def lambda_role(self):
        """Gets the lambda_role of this WorkflowExecutionDetailExecutionConfiguration.


        :return: The lambda_role of this WorkflowExecutionDetailExecutionConfiguration.
        :rtype: str
        """
        return self._lambda_role

    @lambda_role.setter
    def lambda_role(self, lambda_role):
        """Sets the lambda_role of this WorkflowExecutionDetailExecutionConfiguration.


        :param lambda_role: The lambda_role of this WorkflowExecutionDetailExecutionConfiguration.
        :type lambda_role: str
        """

        self._lambda_role = lambda_role
