# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_policy import ChildPolicy
from openapi_server import util


class TerminateWorkflowExecutionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, workflow_id: str=None, run_id: str=None, reason: str=None, details: str=None, child_policy: ChildPolicy=None):
        """TerminateWorkflowExecutionInput - a model defined in OpenAPI

        :param domain: The domain of this TerminateWorkflowExecutionInput.
        :param workflow_id: The workflow_id of this TerminateWorkflowExecutionInput.
        :param run_id: The run_id of this TerminateWorkflowExecutionInput.
        :param reason: The reason of this TerminateWorkflowExecutionInput.
        :param details: The details of this TerminateWorkflowExecutionInput.
        :param child_policy: The child_policy of this TerminateWorkflowExecutionInput.
        """
        self.openapi_types = {
            'domain': str,
            'workflow_id': str,
            'run_id': str,
            'reason': str,
            'details': str,
            'child_policy': ChildPolicy
        }

        self.attribute_map = {
            'domain': 'domain',
            'workflow_id': 'workflowId',
            'run_id': 'runId',
            'reason': 'reason',
            'details': 'details',
            'child_policy': 'childPolicy'
        }

        self._domain = domain
        self._workflow_id = workflow_id
        self._run_id = run_id
        self._reason = reason
        self._details = details
        self._child_policy = child_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminateWorkflowExecutionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminateWorkflowExecutionInput of this TerminateWorkflowExecutionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this TerminateWorkflowExecutionInput.


        :return: The domain of this TerminateWorkflowExecutionInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this TerminateWorkflowExecutionInput.


        :param domain: The domain of this TerminateWorkflowExecutionInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def workflow_id(self):
        """Gets the workflow_id of this TerminateWorkflowExecutionInput.


        :return: The workflow_id of this TerminateWorkflowExecutionInput.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this TerminateWorkflowExecutionInput.


        :param workflow_id: The workflow_id of this TerminateWorkflowExecutionInput.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def run_id(self):
        """Gets the run_id of this TerminateWorkflowExecutionInput.


        :return: The run_id of this TerminateWorkflowExecutionInput.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this TerminateWorkflowExecutionInput.


        :param run_id: The run_id of this TerminateWorkflowExecutionInput.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def reason(self):
        """Gets the reason of this TerminateWorkflowExecutionInput.


        :return: The reason of this TerminateWorkflowExecutionInput.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TerminateWorkflowExecutionInput.


        :param reason: The reason of this TerminateWorkflowExecutionInput.
        :type reason: str
        """

        self._reason = reason

    @property
    def details(self):
        """Gets the details of this TerminateWorkflowExecutionInput.


        :return: The details of this TerminateWorkflowExecutionInput.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TerminateWorkflowExecutionInput.


        :param details: The details of this TerminateWorkflowExecutionInput.
        :type details: str
        """

        self._details = details

    @property
    def child_policy(self):
        """Gets the child_policy of this TerminateWorkflowExecutionInput.


        :return: The child_policy of this TerminateWorkflowExecutionInput.
        :rtype: ChildPolicy
        """
        return self._child_policy

    @child_policy.setter
    def child_policy(self, child_policy):
        """Sets the child_policy of this TerminateWorkflowExecutionInput.


        :param child_policy: The child_policy of this TerminateWorkflowExecutionInput.
        :type child_policy: ChildPolicy
        """

        self._child_policy = child_policy
