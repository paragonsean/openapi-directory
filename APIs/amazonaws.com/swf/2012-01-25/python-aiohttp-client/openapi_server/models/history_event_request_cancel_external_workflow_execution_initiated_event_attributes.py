# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_id: str=None, run_id: str=None, decision_task_completed_event_id: int=None, control: str=None):
        """HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes - a model defined in OpenAPI

        :param workflow_id: The workflow_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :param run_id: The run_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :param decision_task_completed_event_id: The decision_task_completed_event_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :param control: The control of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        """
        self.openapi_types = {
            'workflow_id': str,
            'run_id': str,
            'decision_task_completed_event_id': int,
            'control': str
        }

        self.attribute_map = {
            'workflow_id': 'workflowId',
            'run_id': 'runId',
            'decision_task_completed_event_id': 'decisionTaskCompletedEventId',
            'control': 'control'
        }

        self._workflow_id = workflow_id
        self._run_id = run_id
        self._decision_task_completed_event_id = decision_task_completed_event_id
        self._control = control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryEvent_requestCancelExternalWorkflowExecutionInitiatedEventAttributes of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_id(self):
        """Gets the workflow_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :return: The workflow_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :param workflow_id: The workflow_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def run_id(self):
        """Gets the run_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :return: The run_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :param run_id: The run_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def decision_task_completed_event_id(self):
        """Gets the decision_task_completed_event_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :return: The decision_task_completed_event_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :rtype: int
        """
        return self._decision_task_completed_event_id

    @decision_task_completed_event_id.setter
    def decision_task_completed_event_id(self, decision_task_completed_event_id):
        """Sets the decision_task_completed_event_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :param decision_task_completed_event_id: The decision_task_completed_event_id of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :type decision_task_completed_event_id: int
        """
        if decision_task_completed_event_id is None:
            raise ValueError("Invalid value for `decision_task_completed_event_id`, must not be `None`")

        self._decision_task_completed_event_id = decision_task_completed_event_id

    @property
    def control(self):
        """Gets the control of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :return: The control of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.


        :param control: The control of this HistoryEventRequestCancelExternalWorkflowExecutionInitiatedEventAttributes.
        :type control: str
        """

        self._control = control
