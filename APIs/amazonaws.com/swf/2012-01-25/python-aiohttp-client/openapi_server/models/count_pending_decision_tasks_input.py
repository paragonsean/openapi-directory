# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.count_pending_activity_tasks_input_task_list import CountPendingActivityTasksInputTaskList
from openapi_server import util


class CountPendingDecisionTasksInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, task_list: CountPendingActivityTasksInputTaskList=None):
        """CountPendingDecisionTasksInput - a model defined in OpenAPI

        :param domain: The domain of this CountPendingDecisionTasksInput.
        :param task_list: The task_list of this CountPendingDecisionTasksInput.
        """
        self.openapi_types = {
            'domain': str,
            'task_list': CountPendingActivityTasksInputTaskList
        }

        self.attribute_map = {
            'domain': 'domain',
            'task_list': 'taskList'
        }

        self._domain = domain
        self._task_list = task_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountPendingDecisionTasksInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountPendingDecisionTasksInput of this CountPendingDecisionTasksInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this CountPendingDecisionTasksInput.


        :return: The domain of this CountPendingDecisionTasksInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CountPendingDecisionTasksInput.


        :param domain: The domain of this CountPendingDecisionTasksInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def task_list(self):
        """Gets the task_list of this CountPendingDecisionTasksInput.


        :return: The task_list of this CountPendingDecisionTasksInput.
        :rtype: CountPendingActivityTasksInputTaskList
        """
        return self._task_list

    @task_list.setter
    def task_list(self, task_list):
        """Sets the task_list of this CountPendingDecisionTasksInput.


        :param task_list: The task_list of this CountPendingDecisionTasksInput.
        :type task_list: CountPendingActivityTasksInputTaskList
        """
        if task_list is None:
            raise ValueError("Invalid value for `task_list`, must not be `None`")

        self._task_list = task_list
