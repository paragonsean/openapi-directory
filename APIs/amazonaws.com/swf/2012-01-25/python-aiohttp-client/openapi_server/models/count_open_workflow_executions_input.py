# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.count_open_workflow_executions_input_execution_filter import CountOpenWorkflowExecutionsInputExecutionFilter
from openapi_server.models.count_open_workflow_executions_input_start_time_filter import CountOpenWorkflowExecutionsInputStartTimeFilter
from openapi_server.models.count_open_workflow_executions_input_tag_filter import CountOpenWorkflowExecutionsInputTagFilter
from openapi_server.models.count_open_workflow_executions_input_type_filter import CountOpenWorkflowExecutionsInputTypeFilter
from openapi_server import util


class CountOpenWorkflowExecutionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, start_time_filter: CountOpenWorkflowExecutionsInputStartTimeFilter=None, type_filter: CountOpenWorkflowExecutionsInputTypeFilter=None, tag_filter: CountOpenWorkflowExecutionsInputTagFilter=None, execution_filter: CountOpenWorkflowExecutionsInputExecutionFilter=None):
        """CountOpenWorkflowExecutionsInput - a model defined in OpenAPI

        :param domain: The domain of this CountOpenWorkflowExecutionsInput.
        :param start_time_filter: The start_time_filter of this CountOpenWorkflowExecutionsInput.
        :param type_filter: The type_filter of this CountOpenWorkflowExecutionsInput.
        :param tag_filter: The tag_filter of this CountOpenWorkflowExecutionsInput.
        :param execution_filter: The execution_filter of this CountOpenWorkflowExecutionsInput.
        """
        self.openapi_types = {
            'domain': str,
            'start_time_filter': CountOpenWorkflowExecutionsInputStartTimeFilter,
            'type_filter': CountOpenWorkflowExecutionsInputTypeFilter,
            'tag_filter': CountOpenWorkflowExecutionsInputTagFilter,
            'execution_filter': CountOpenWorkflowExecutionsInputExecutionFilter
        }

        self.attribute_map = {
            'domain': 'domain',
            'start_time_filter': 'startTimeFilter',
            'type_filter': 'typeFilter',
            'tag_filter': 'tagFilter',
            'execution_filter': 'executionFilter'
        }

        self._domain = domain
        self._start_time_filter = start_time_filter
        self._type_filter = type_filter
        self._tag_filter = tag_filter
        self._execution_filter = execution_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountOpenWorkflowExecutionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountOpenWorkflowExecutionsInput of this CountOpenWorkflowExecutionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this CountOpenWorkflowExecutionsInput.


        :return: The domain of this CountOpenWorkflowExecutionsInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CountOpenWorkflowExecutionsInput.


        :param domain: The domain of this CountOpenWorkflowExecutionsInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def start_time_filter(self):
        """Gets the start_time_filter of this CountOpenWorkflowExecutionsInput.


        :return: The start_time_filter of this CountOpenWorkflowExecutionsInput.
        :rtype: CountOpenWorkflowExecutionsInputStartTimeFilter
        """
        return self._start_time_filter

    @start_time_filter.setter
    def start_time_filter(self, start_time_filter):
        """Sets the start_time_filter of this CountOpenWorkflowExecutionsInput.


        :param start_time_filter: The start_time_filter of this CountOpenWorkflowExecutionsInput.
        :type start_time_filter: CountOpenWorkflowExecutionsInputStartTimeFilter
        """
        if start_time_filter is None:
            raise ValueError("Invalid value for `start_time_filter`, must not be `None`")

        self._start_time_filter = start_time_filter

    @property
    def type_filter(self):
        """Gets the type_filter of this CountOpenWorkflowExecutionsInput.


        :return: The type_filter of this CountOpenWorkflowExecutionsInput.
        :rtype: CountOpenWorkflowExecutionsInputTypeFilter
        """
        return self._type_filter

    @type_filter.setter
    def type_filter(self, type_filter):
        """Sets the type_filter of this CountOpenWorkflowExecutionsInput.


        :param type_filter: The type_filter of this CountOpenWorkflowExecutionsInput.
        :type type_filter: CountOpenWorkflowExecutionsInputTypeFilter
        """

        self._type_filter = type_filter

    @property
    def tag_filter(self):
        """Gets the tag_filter of this CountOpenWorkflowExecutionsInput.


        :return: The tag_filter of this CountOpenWorkflowExecutionsInput.
        :rtype: CountOpenWorkflowExecutionsInputTagFilter
        """
        return self._tag_filter

    @tag_filter.setter
    def tag_filter(self, tag_filter):
        """Sets the tag_filter of this CountOpenWorkflowExecutionsInput.


        :param tag_filter: The tag_filter of this CountOpenWorkflowExecutionsInput.
        :type tag_filter: CountOpenWorkflowExecutionsInputTagFilter
        """

        self._tag_filter = tag_filter

    @property
    def execution_filter(self):
        """Gets the execution_filter of this CountOpenWorkflowExecutionsInput.


        :return: The execution_filter of this CountOpenWorkflowExecutionsInput.
        :rtype: CountOpenWorkflowExecutionsInputExecutionFilter
        """
        return self._execution_filter

    @execution_filter.setter
    def execution_filter(self, execution_filter):
        """Sets the execution_filter of this CountOpenWorkflowExecutionsInput.


        :param execution_filter: The execution_filter of this CountOpenWorkflowExecutionsInput.
        :type execution_filter: CountOpenWorkflowExecutionsInputExecutionFilter
        """

        self._execution_filter = execution_filter
