# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_execution_detail_execution_configuration import WorkflowExecutionDetailExecutionConfiguration
from openapi_server.models.workflow_execution_detail_execution_info import WorkflowExecutionDetailExecutionInfo
from openapi_server.models.workflow_execution_detail_open_counts import WorkflowExecutionDetailOpenCounts
from openapi_server import util


class WorkflowExecutionDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution_info: WorkflowExecutionDetailExecutionInfo=None, execution_configuration: WorkflowExecutionDetailExecutionConfiguration=None, open_counts: WorkflowExecutionDetailOpenCounts=None, latest_activity_task_timestamp: datetime=None, latest_execution_context: str=None):
        """WorkflowExecutionDetail - a model defined in OpenAPI

        :param execution_info: The execution_info of this WorkflowExecutionDetail.
        :param execution_configuration: The execution_configuration of this WorkflowExecutionDetail.
        :param open_counts: The open_counts of this WorkflowExecutionDetail.
        :param latest_activity_task_timestamp: The latest_activity_task_timestamp of this WorkflowExecutionDetail.
        :param latest_execution_context: The latest_execution_context of this WorkflowExecutionDetail.
        """
        self.openapi_types = {
            'execution_info': WorkflowExecutionDetailExecutionInfo,
            'execution_configuration': WorkflowExecutionDetailExecutionConfiguration,
            'open_counts': WorkflowExecutionDetailOpenCounts,
            'latest_activity_task_timestamp': datetime,
            'latest_execution_context': str
        }

        self.attribute_map = {
            'execution_info': 'executionInfo',
            'execution_configuration': 'executionConfiguration',
            'open_counts': 'openCounts',
            'latest_activity_task_timestamp': 'latestActivityTaskTimestamp',
            'latest_execution_context': 'latestExecutionContext'
        }

        self._execution_info = execution_info
        self._execution_configuration = execution_configuration
        self._open_counts = open_counts
        self._latest_activity_task_timestamp = latest_activity_task_timestamp
        self._latest_execution_context = latest_execution_context

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutionDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutionDetail of this WorkflowExecutionDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_info(self):
        """Gets the execution_info of this WorkflowExecutionDetail.


        :return: The execution_info of this WorkflowExecutionDetail.
        :rtype: WorkflowExecutionDetailExecutionInfo
        """
        return self._execution_info

    @execution_info.setter
    def execution_info(self, execution_info):
        """Sets the execution_info of this WorkflowExecutionDetail.


        :param execution_info: The execution_info of this WorkflowExecutionDetail.
        :type execution_info: WorkflowExecutionDetailExecutionInfo
        """
        if execution_info is None:
            raise ValueError("Invalid value for `execution_info`, must not be `None`")

        self._execution_info = execution_info

    @property
    def execution_configuration(self):
        """Gets the execution_configuration of this WorkflowExecutionDetail.


        :return: The execution_configuration of this WorkflowExecutionDetail.
        :rtype: WorkflowExecutionDetailExecutionConfiguration
        """
        return self._execution_configuration

    @execution_configuration.setter
    def execution_configuration(self, execution_configuration):
        """Sets the execution_configuration of this WorkflowExecutionDetail.


        :param execution_configuration: The execution_configuration of this WorkflowExecutionDetail.
        :type execution_configuration: WorkflowExecutionDetailExecutionConfiguration
        """
        if execution_configuration is None:
            raise ValueError("Invalid value for `execution_configuration`, must not be `None`")

        self._execution_configuration = execution_configuration

    @property
    def open_counts(self):
        """Gets the open_counts of this WorkflowExecutionDetail.


        :return: The open_counts of this WorkflowExecutionDetail.
        :rtype: WorkflowExecutionDetailOpenCounts
        """
        return self._open_counts

    @open_counts.setter
    def open_counts(self, open_counts):
        """Sets the open_counts of this WorkflowExecutionDetail.


        :param open_counts: The open_counts of this WorkflowExecutionDetail.
        :type open_counts: WorkflowExecutionDetailOpenCounts
        """
        if open_counts is None:
            raise ValueError("Invalid value for `open_counts`, must not be `None`")

        self._open_counts = open_counts

    @property
    def latest_activity_task_timestamp(self):
        """Gets the latest_activity_task_timestamp of this WorkflowExecutionDetail.


        :return: The latest_activity_task_timestamp of this WorkflowExecutionDetail.
        :rtype: datetime
        """
        return self._latest_activity_task_timestamp

    @latest_activity_task_timestamp.setter
    def latest_activity_task_timestamp(self, latest_activity_task_timestamp):
        """Sets the latest_activity_task_timestamp of this WorkflowExecutionDetail.


        :param latest_activity_task_timestamp: The latest_activity_task_timestamp of this WorkflowExecutionDetail.
        :type latest_activity_task_timestamp: datetime
        """

        self._latest_activity_task_timestamp = latest_activity_task_timestamp

    @property
    def latest_execution_context(self):
        """Gets the latest_execution_context of this WorkflowExecutionDetail.


        :return: The latest_execution_context of this WorkflowExecutionDetail.
        :rtype: str
        """
        return self._latest_execution_context

    @latest_execution_context.setter
    def latest_execution_context(self, latest_execution_context):
        """Sets the latest_execution_context of this WorkflowExecutionDetail.


        :param latest_execution_context: The latest_execution_context of this WorkflowExecutionDetail.
        :type latest_execution_context: str
        """

        self._latest_execution_context = latest_execution_context
