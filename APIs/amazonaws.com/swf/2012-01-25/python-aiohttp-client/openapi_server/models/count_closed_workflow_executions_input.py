# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.count_closed_workflow_executions_input_close_status_filter import CountClosedWorkflowExecutionsInputCloseStatusFilter
from openapi_server.models.count_closed_workflow_executions_input_close_time_filter import CountClosedWorkflowExecutionsInputCloseTimeFilter
from openapi_server.models.count_closed_workflow_executions_input_execution_filter import CountClosedWorkflowExecutionsInputExecutionFilter
from openapi_server.models.count_closed_workflow_executions_input_start_time_filter import CountClosedWorkflowExecutionsInputStartTimeFilter
from openapi_server.models.count_closed_workflow_executions_input_tag_filter import CountClosedWorkflowExecutionsInputTagFilter
from openapi_server.models.count_closed_workflow_executions_input_type_filter import CountClosedWorkflowExecutionsInputTypeFilter
from openapi_server import util


class CountClosedWorkflowExecutionsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, start_time_filter: CountClosedWorkflowExecutionsInputStartTimeFilter=None, close_time_filter: CountClosedWorkflowExecutionsInputCloseTimeFilter=None, execution_filter: CountClosedWorkflowExecutionsInputExecutionFilter=None, type_filter: CountClosedWorkflowExecutionsInputTypeFilter=None, tag_filter: CountClosedWorkflowExecutionsInputTagFilter=None, close_status_filter: CountClosedWorkflowExecutionsInputCloseStatusFilter=None):
        """CountClosedWorkflowExecutionsInput - a model defined in OpenAPI

        :param domain: The domain of this CountClosedWorkflowExecutionsInput.
        :param start_time_filter: The start_time_filter of this CountClosedWorkflowExecutionsInput.
        :param close_time_filter: The close_time_filter of this CountClosedWorkflowExecutionsInput.
        :param execution_filter: The execution_filter of this CountClosedWorkflowExecutionsInput.
        :param type_filter: The type_filter of this CountClosedWorkflowExecutionsInput.
        :param tag_filter: The tag_filter of this CountClosedWorkflowExecutionsInput.
        :param close_status_filter: The close_status_filter of this CountClosedWorkflowExecutionsInput.
        """
        self.openapi_types = {
            'domain': str,
            'start_time_filter': CountClosedWorkflowExecutionsInputStartTimeFilter,
            'close_time_filter': CountClosedWorkflowExecutionsInputCloseTimeFilter,
            'execution_filter': CountClosedWorkflowExecutionsInputExecutionFilter,
            'type_filter': CountClosedWorkflowExecutionsInputTypeFilter,
            'tag_filter': CountClosedWorkflowExecutionsInputTagFilter,
            'close_status_filter': CountClosedWorkflowExecutionsInputCloseStatusFilter
        }

        self.attribute_map = {
            'domain': 'domain',
            'start_time_filter': 'startTimeFilter',
            'close_time_filter': 'closeTimeFilter',
            'execution_filter': 'executionFilter',
            'type_filter': 'typeFilter',
            'tag_filter': 'tagFilter',
            'close_status_filter': 'closeStatusFilter'
        }

        self._domain = domain
        self._start_time_filter = start_time_filter
        self._close_time_filter = close_time_filter
        self._execution_filter = execution_filter
        self._type_filter = type_filter
        self._tag_filter = tag_filter
        self._close_status_filter = close_status_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountClosedWorkflowExecutionsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountClosedWorkflowExecutionsInput of this CountClosedWorkflowExecutionsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this CountClosedWorkflowExecutionsInput.


        :return: The domain of this CountClosedWorkflowExecutionsInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CountClosedWorkflowExecutionsInput.


        :param domain: The domain of this CountClosedWorkflowExecutionsInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def start_time_filter(self):
        """Gets the start_time_filter of this CountClosedWorkflowExecutionsInput.


        :return: The start_time_filter of this CountClosedWorkflowExecutionsInput.
        :rtype: CountClosedWorkflowExecutionsInputStartTimeFilter
        """
        return self._start_time_filter

    @start_time_filter.setter
    def start_time_filter(self, start_time_filter):
        """Sets the start_time_filter of this CountClosedWorkflowExecutionsInput.


        :param start_time_filter: The start_time_filter of this CountClosedWorkflowExecutionsInput.
        :type start_time_filter: CountClosedWorkflowExecutionsInputStartTimeFilter
        """

        self._start_time_filter = start_time_filter

    @property
    def close_time_filter(self):
        """Gets the close_time_filter of this CountClosedWorkflowExecutionsInput.


        :return: The close_time_filter of this CountClosedWorkflowExecutionsInput.
        :rtype: CountClosedWorkflowExecutionsInputCloseTimeFilter
        """
        return self._close_time_filter

    @close_time_filter.setter
    def close_time_filter(self, close_time_filter):
        """Sets the close_time_filter of this CountClosedWorkflowExecutionsInput.


        :param close_time_filter: The close_time_filter of this CountClosedWorkflowExecutionsInput.
        :type close_time_filter: CountClosedWorkflowExecutionsInputCloseTimeFilter
        """

        self._close_time_filter = close_time_filter

    @property
    def execution_filter(self):
        """Gets the execution_filter of this CountClosedWorkflowExecutionsInput.


        :return: The execution_filter of this CountClosedWorkflowExecutionsInput.
        :rtype: CountClosedWorkflowExecutionsInputExecutionFilter
        """
        return self._execution_filter

    @execution_filter.setter
    def execution_filter(self, execution_filter):
        """Sets the execution_filter of this CountClosedWorkflowExecutionsInput.


        :param execution_filter: The execution_filter of this CountClosedWorkflowExecutionsInput.
        :type execution_filter: CountClosedWorkflowExecutionsInputExecutionFilter
        """

        self._execution_filter = execution_filter

    @property
    def type_filter(self):
        """Gets the type_filter of this CountClosedWorkflowExecutionsInput.


        :return: The type_filter of this CountClosedWorkflowExecutionsInput.
        :rtype: CountClosedWorkflowExecutionsInputTypeFilter
        """
        return self._type_filter

    @type_filter.setter
    def type_filter(self, type_filter):
        """Sets the type_filter of this CountClosedWorkflowExecutionsInput.


        :param type_filter: The type_filter of this CountClosedWorkflowExecutionsInput.
        :type type_filter: CountClosedWorkflowExecutionsInputTypeFilter
        """

        self._type_filter = type_filter

    @property
    def tag_filter(self):
        """Gets the tag_filter of this CountClosedWorkflowExecutionsInput.


        :return: The tag_filter of this CountClosedWorkflowExecutionsInput.
        :rtype: CountClosedWorkflowExecutionsInputTagFilter
        """
        return self._tag_filter

    @tag_filter.setter
    def tag_filter(self, tag_filter):
        """Sets the tag_filter of this CountClosedWorkflowExecutionsInput.


        :param tag_filter: The tag_filter of this CountClosedWorkflowExecutionsInput.
        :type tag_filter: CountClosedWorkflowExecutionsInputTagFilter
        """

        self._tag_filter = tag_filter

    @property
    def close_status_filter(self):
        """Gets the close_status_filter of this CountClosedWorkflowExecutionsInput.


        :return: The close_status_filter of this CountClosedWorkflowExecutionsInput.
        :rtype: CountClosedWorkflowExecutionsInputCloseStatusFilter
        """
        return self._close_status_filter

    @close_status_filter.setter
    def close_status_filter(self, close_status_filter):
        """Sets the close_status_filter of this CountClosedWorkflowExecutionsInput.


        :param close_status_filter: The close_status_filter of this CountClosedWorkflowExecutionsInput.
        :type close_status_filter: CountClosedWorkflowExecutionsInputCloseStatusFilter
        """

        self._close_status_filter = close_status_filter
