# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RequestCancelWorkflowExecutionInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, workflow_id: str=None, run_id: str=None):
        """RequestCancelWorkflowExecutionInput - a model defined in OpenAPI

        :param domain: The domain of this RequestCancelWorkflowExecutionInput.
        :param workflow_id: The workflow_id of this RequestCancelWorkflowExecutionInput.
        :param run_id: The run_id of this RequestCancelWorkflowExecutionInput.
        """
        self.openapi_types = {
            'domain': str,
            'workflow_id': str,
            'run_id': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'workflow_id': 'workflowId',
            'run_id': 'runId'
        }

        self._domain = domain
        self._workflow_id = workflow_id
        self._run_id = run_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestCancelWorkflowExecutionInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestCancelWorkflowExecutionInput of this RequestCancelWorkflowExecutionInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this RequestCancelWorkflowExecutionInput.


        :return: The domain of this RequestCancelWorkflowExecutionInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RequestCancelWorkflowExecutionInput.


        :param domain: The domain of this RequestCancelWorkflowExecutionInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def workflow_id(self):
        """Gets the workflow_id of this RequestCancelWorkflowExecutionInput.


        :return: The workflow_id of this RequestCancelWorkflowExecutionInput.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this RequestCancelWorkflowExecutionInput.


        :param workflow_id: The workflow_id of this RequestCancelWorkflowExecutionInput.
        :type workflow_id: str
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")

        self._workflow_id = workflow_id

    @property
    def run_id(self):
        """Gets the run_id of this RequestCancelWorkflowExecutionInput.


        :return: The run_id of this RequestCancelWorkflowExecutionInput.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """Sets the run_id of this RequestCancelWorkflowExecutionInput.


        :param run_id: The run_id of this RequestCancelWorkflowExecutionInput.
        :type run_id: str
        """

        self._run_id = run_id
