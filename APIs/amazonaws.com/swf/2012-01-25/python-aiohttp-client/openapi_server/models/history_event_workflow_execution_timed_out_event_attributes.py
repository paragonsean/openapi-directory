# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.child_policy import ChildPolicy
from openapi_server.models.workflow_execution_timeout_type import WorkflowExecutionTimeoutType
from openapi_server import util


class HistoryEventWorkflowExecutionTimedOutEventAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timeout_type: WorkflowExecutionTimeoutType=None, child_policy: ChildPolicy=None):
        """HistoryEventWorkflowExecutionTimedOutEventAttributes - a model defined in OpenAPI

        :param timeout_type: The timeout_type of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        :param child_policy: The child_policy of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        """
        self.openapi_types = {
            'timeout_type': WorkflowExecutionTimeoutType,
            'child_policy': ChildPolicy
        }

        self.attribute_map = {
            'timeout_type': 'timeoutType',
            'child_policy': 'childPolicy'
        }

        self._timeout_type = timeout_type
        self._child_policy = child_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistoryEventWorkflowExecutionTimedOutEventAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistoryEvent_workflowExecutionTimedOutEventAttributes of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timeout_type(self):
        """Gets the timeout_type of this HistoryEventWorkflowExecutionTimedOutEventAttributes.


        :return: The timeout_type of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        :rtype: WorkflowExecutionTimeoutType
        """
        return self._timeout_type

    @timeout_type.setter
    def timeout_type(self, timeout_type):
        """Sets the timeout_type of this HistoryEventWorkflowExecutionTimedOutEventAttributes.


        :param timeout_type: The timeout_type of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        :type timeout_type: WorkflowExecutionTimeoutType
        """
        if timeout_type is None:
            raise ValueError("Invalid value for `timeout_type`, must not be `None`")

        self._timeout_type = timeout_type

    @property
    def child_policy(self):
        """Gets the child_policy of this HistoryEventWorkflowExecutionTimedOutEventAttributes.


        :return: The child_policy of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        :rtype: ChildPolicy
        """
        return self._child_policy

    @child_policy.setter
    def child_policy(self, child_policy):
        """Sets the child_policy of this HistoryEventWorkflowExecutionTimedOutEventAttributes.


        :param child_policy: The child_policy of this HistoryEventWorkflowExecutionTimedOutEventAttributes.
        :type child_policy: ChildPolicy
        """
        if child_policy is None:
            raise ValueError("Invalid value for `child_policy`, must not be `None`")

        self._child_policy = child_policy
