# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.close_status import CloseStatus
from openapi_server.models.execution_status import ExecutionStatus
from openapi_server.models.workflow_execution_info_execution import WorkflowExecutionInfoExecution
from openapi_server.models.workflow_execution_info_parent import WorkflowExecutionInfoParent
from openapi_server.models.workflow_execution_info_workflow_type import WorkflowExecutionInfoWorkflowType
from openapi_server import util


class WorkflowExecutionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, execution: WorkflowExecutionInfoExecution=None, workflow_type: WorkflowExecutionInfoWorkflowType=None, start_timestamp: datetime=None, close_timestamp: datetime=None, execution_status: ExecutionStatus=None, close_status: CloseStatus=None, parent: WorkflowExecutionInfoParent=None, tag_list: List=None, cancel_requested: bool=None):
        """WorkflowExecutionInfo - a model defined in OpenAPI

        :param execution: The execution of this WorkflowExecutionInfo.
        :param workflow_type: The workflow_type of this WorkflowExecutionInfo.
        :param start_timestamp: The start_timestamp of this WorkflowExecutionInfo.
        :param close_timestamp: The close_timestamp of this WorkflowExecutionInfo.
        :param execution_status: The execution_status of this WorkflowExecutionInfo.
        :param close_status: The close_status of this WorkflowExecutionInfo.
        :param parent: The parent of this WorkflowExecutionInfo.
        :param tag_list: The tag_list of this WorkflowExecutionInfo.
        :param cancel_requested: The cancel_requested of this WorkflowExecutionInfo.
        """
        self.openapi_types = {
            'execution': WorkflowExecutionInfoExecution,
            'workflow_type': WorkflowExecutionInfoWorkflowType,
            'start_timestamp': datetime,
            'close_timestamp': datetime,
            'execution_status': ExecutionStatus,
            'close_status': CloseStatus,
            'parent': WorkflowExecutionInfoParent,
            'tag_list': List,
            'cancel_requested': bool
        }

        self.attribute_map = {
            'execution': 'execution',
            'workflow_type': 'workflowType',
            'start_timestamp': 'startTimestamp',
            'close_timestamp': 'closeTimestamp',
            'execution_status': 'executionStatus',
            'close_status': 'closeStatus',
            'parent': 'parent',
            'tag_list': 'tagList',
            'cancel_requested': 'cancelRequested'
        }

        self._execution = execution
        self._workflow_type = workflow_type
        self._start_timestamp = start_timestamp
        self._close_timestamp = close_timestamp
        self._execution_status = execution_status
        self._close_status = close_status
        self._parent = parent
        self._tag_list = tag_list
        self._cancel_requested = cancel_requested

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowExecutionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowExecutionInfo of this WorkflowExecutionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution(self):
        """Gets the execution of this WorkflowExecutionInfo.


        :return: The execution of this WorkflowExecutionInfo.
        :rtype: WorkflowExecutionInfoExecution
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this WorkflowExecutionInfo.


        :param execution: The execution of this WorkflowExecutionInfo.
        :type execution: WorkflowExecutionInfoExecution
        """
        if execution is None:
            raise ValueError("Invalid value for `execution`, must not be `None`")

        self._execution = execution

    @property
    def workflow_type(self):
        """Gets the workflow_type of this WorkflowExecutionInfo.


        :return: The workflow_type of this WorkflowExecutionInfo.
        :rtype: WorkflowExecutionInfoWorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this WorkflowExecutionInfo.


        :param workflow_type: The workflow_type of this WorkflowExecutionInfo.
        :type workflow_type: WorkflowExecutionInfoWorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this WorkflowExecutionInfo.


        :return: The start_timestamp of this WorkflowExecutionInfo.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this WorkflowExecutionInfo.


        :param start_timestamp: The start_timestamp of this WorkflowExecutionInfo.
        :type start_timestamp: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")

        self._start_timestamp = start_timestamp

    @property
    def close_timestamp(self):
        """Gets the close_timestamp of this WorkflowExecutionInfo.


        :return: The close_timestamp of this WorkflowExecutionInfo.
        :rtype: datetime
        """
        return self._close_timestamp

    @close_timestamp.setter
    def close_timestamp(self, close_timestamp):
        """Sets the close_timestamp of this WorkflowExecutionInfo.


        :param close_timestamp: The close_timestamp of this WorkflowExecutionInfo.
        :type close_timestamp: datetime
        """

        self._close_timestamp = close_timestamp

    @property
    def execution_status(self):
        """Gets the execution_status of this WorkflowExecutionInfo.


        :return: The execution_status of this WorkflowExecutionInfo.
        :rtype: ExecutionStatus
        """
        return self._execution_status

    @execution_status.setter
    def execution_status(self, execution_status):
        """Sets the execution_status of this WorkflowExecutionInfo.


        :param execution_status: The execution_status of this WorkflowExecutionInfo.
        :type execution_status: ExecutionStatus
        """
        if execution_status is None:
            raise ValueError("Invalid value for `execution_status`, must not be `None`")

        self._execution_status = execution_status

    @property
    def close_status(self):
        """Gets the close_status of this WorkflowExecutionInfo.


        :return: The close_status of this WorkflowExecutionInfo.
        :rtype: CloseStatus
        """
        return self._close_status

    @close_status.setter
    def close_status(self, close_status):
        """Sets the close_status of this WorkflowExecutionInfo.


        :param close_status: The close_status of this WorkflowExecutionInfo.
        :type close_status: CloseStatus
        """

        self._close_status = close_status

    @property
    def parent(self):
        """Gets the parent of this WorkflowExecutionInfo.


        :return: The parent of this WorkflowExecutionInfo.
        :rtype: WorkflowExecutionInfoParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this WorkflowExecutionInfo.


        :param parent: The parent of this WorkflowExecutionInfo.
        :type parent: WorkflowExecutionInfoParent
        """

        self._parent = parent

    @property
    def tag_list(self):
        """Gets the tag_list of this WorkflowExecutionInfo.


        :return: The tag_list of this WorkflowExecutionInfo.
        :rtype: List
        """
        return self._tag_list

    @tag_list.setter
    def tag_list(self, tag_list):
        """Sets the tag_list of this WorkflowExecutionInfo.


        :param tag_list: The tag_list of this WorkflowExecutionInfo.
        :type tag_list: List
        """

        self._tag_list = tag_list

    @property
    def cancel_requested(self):
        """Gets the cancel_requested of this WorkflowExecutionInfo.


        :return: The cancel_requested of this WorkflowExecutionInfo.
        :rtype: bool
        """
        return self._cancel_requested

    @cancel_requested.setter
    def cancel_requested(self, cancel_requested):
        """Sets the cancel_requested of this WorkflowExecutionInfo.


        :param cancel_requested: The cancel_requested of this WorkflowExecutionInfo.
        :type cancel_requested: bool
        """

        self._cancel_requested = cancel_requested
