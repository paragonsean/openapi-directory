# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_workflow_type_input_workflow_type import DescribeWorkflowTypeInputWorkflowType
from openapi_server import util


class DescribeWorkflowTypeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, workflow_type: DescribeWorkflowTypeInputWorkflowType=None):
        """DescribeWorkflowTypeInput - a model defined in OpenAPI

        :param domain: The domain of this DescribeWorkflowTypeInput.
        :param workflow_type: The workflow_type of this DescribeWorkflowTypeInput.
        """
        self.openapi_types = {
            'domain': str,
            'workflow_type': DescribeWorkflowTypeInputWorkflowType
        }

        self.attribute_map = {
            'domain': 'domain',
            'workflow_type': 'workflowType'
        }

        self._domain = domain
        self._workflow_type = workflow_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeWorkflowTypeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeWorkflowTypeInput of this DescribeWorkflowTypeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this DescribeWorkflowTypeInput.


        :return: The domain of this DescribeWorkflowTypeInput.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this DescribeWorkflowTypeInput.


        :param domain: The domain of this DescribeWorkflowTypeInput.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def workflow_type(self):
        """Gets the workflow_type of this DescribeWorkflowTypeInput.


        :return: The workflow_type of this DescribeWorkflowTypeInput.
        :rtype: DescribeWorkflowTypeInputWorkflowType
        """
        return self._workflow_type

    @workflow_type.setter
    def workflow_type(self, workflow_type):
        """Sets the workflow_type of this DescribeWorkflowTypeInput.


        :param workflow_type: The workflow_type of this DescribeWorkflowTypeInput.
        :type workflow_type: DescribeWorkflowTypeInputWorkflowType
        """
        if workflow_type is None:
            raise ValueError("Invalid value for `workflow_type`, must not be `None`")

        self._workflow_type = workflow_type
