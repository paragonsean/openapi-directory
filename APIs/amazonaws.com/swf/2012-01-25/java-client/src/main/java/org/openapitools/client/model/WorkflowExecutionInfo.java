/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloseStatus;
import org.openapitools.client.model.ExecutionStatus;
import org.openapitools.client.model.WorkflowExecutionInfoExecution;
import org.openapitools.client.model.WorkflowExecutionInfoParent;
import org.openapitools.client.model.WorkflowExecutionInfoWorkflowType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about a workflow execution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowExecutionInfo {
  public static final String SERIALIZED_NAME_EXECUTION = "execution";
  @SerializedName(SERIALIZED_NAME_EXECUTION)
  private WorkflowExecutionInfoExecution execution;

  public static final String SERIALIZED_NAME_WORKFLOW_TYPE = "workflowType";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_TYPE)
  private WorkflowExecutionInfoWorkflowType workflowType;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "startTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private OffsetDateTime startTimestamp;

  public static final String SERIALIZED_NAME_CLOSE_TIMESTAMP = "closeTimestamp";
  @SerializedName(SERIALIZED_NAME_CLOSE_TIMESTAMP)
  private OffsetDateTime closeTimestamp;

  public static final String SERIALIZED_NAME_EXECUTION_STATUS = "executionStatus";
  @SerializedName(SERIALIZED_NAME_EXECUTION_STATUS)
  private ExecutionStatus executionStatus;

  public static final String SERIALIZED_NAME_CLOSE_STATUS = "closeStatus";
  @SerializedName(SERIALIZED_NAME_CLOSE_STATUS)
  private CloseStatus closeStatus;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private WorkflowExecutionInfoParent parent;

  public static final String SERIALIZED_NAME_TAG_LIST = "tagList";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List tagList;

  public static final String SERIALIZED_NAME_CANCEL_REQUESTED = "cancelRequested";
  @SerializedName(SERIALIZED_NAME_CANCEL_REQUESTED)
  private Boolean cancelRequested;

  public WorkflowExecutionInfo() {
  }

  public WorkflowExecutionInfo execution(WorkflowExecutionInfoExecution execution) {
    this.execution = execution;
    return this;
  }

  /**
   * Get execution
   * @return execution
   */
  @javax.annotation.Nonnull
  public WorkflowExecutionInfoExecution getExecution() {
    return execution;
  }

  public void setExecution(WorkflowExecutionInfoExecution execution) {
    this.execution = execution;
  }


  public WorkflowExecutionInfo workflowType(WorkflowExecutionInfoWorkflowType workflowType) {
    this.workflowType = workflowType;
    return this;
  }

  /**
   * Get workflowType
   * @return workflowType
   */
  @javax.annotation.Nonnull
  public WorkflowExecutionInfoWorkflowType getWorkflowType() {
    return workflowType;
  }

  public void setWorkflowType(WorkflowExecutionInfoWorkflowType workflowType) {
    this.workflowType = workflowType;
  }


  public WorkflowExecutionInfo startTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

  /**
   * Get startTimestamp
   * @return startTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public WorkflowExecutionInfo closeTimestamp(OffsetDateTime closeTimestamp) {
    this.closeTimestamp = closeTimestamp;
    return this;
  }

  /**
   * Get closeTimestamp
   * @return closeTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCloseTimestamp() {
    return closeTimestamp;
  }

  public void setCloseTimestamp(OffsetDateTime closeTimestamp) {
    this.closeTimestamp = closeTimestamp;
  }


  public WorkflowExecutionInfo executionStatus(ExecutionStatus executionStatus) {
    this.executionStatus = executionStatus;
    return this;
  }

  /**
   * Get executionStatus
   * @return executionStatus
   */
  @javax.annotation.Nonnull
  public ExecutionStatus getExecutionStatus() {
    return executionStatus;
  }

  public void setExecutionStatus(ExecutionStatus executionStatus) {
    this.executionStatus = executionStatus;
  }


  public WorkflowExecutionInfo closeStatus(CloseStatus closeStatus) {
    this.closeStatus = closeStatus;
    return this;
  }

  /**
   * Get closeStatus
   * @return closeStatus
   */
  @javax.annotation.Nullable
  public CloseStatus getCloseStatus() {
    return closeStatus;
  }

  public void setCloseStatus(CloseStatus closeStatus) {
    this.closeStatus = closeStatus;
  }


  public WorkflowExecutionInfo parent(WorkflowExecutionInfoParent parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public WorkflowExecutionInfoParent getParent() {
    return parent;
  }

  public void setParent(WorkflowExecutionInfoParent parent) {
    this.parent = parent;
  }


  public WorkflowExecutionInfo tagList(List tagList) {
    this.tagList = tagList;
    return this;
  }

  /**
   * Get tagList
   * @return tagList
   */
  @javax.annotation.Nullable
  public List getTagList() {
    return tagList;
  }

  public void setTagList(List tagList) {
    this.tagList = tagList;
  }


  public WorkflowExecutionInfo cancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
    return this;
  }

  /**
   * Get cancelRequested
   * @return cancelRequested
   */
  @javax.annotation.Nullable
  public Boolean getCancelRequested() {
    return cancelRequested;
  }

  public void setCancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowExecutionInfo workflowExecutionInfo = (WorkflowExecutionInfo) o;
    return Objects.equals(this.execution, workflowExecutionInfo.execution) &&
        Objects.equals(this.workflowType, workflowExecutionInfo.workflowType) &&
        Objects.equals(this.startTimestamp, workflowExecutionInfo.startTimestamp) &&
        Objects.equals(this.closeTimestamp, workflowExecutionInfo.closeTimestamp) &&
        Objects.equals(this.executionStatus, workflowExecutionInfo.executionStatus) &&
        Objects.equals(this.closeStatus, workflowExecutionInfo.closeStatus) &&
        Objects.equals(this.parent, workflowExecutionInfo.parent) &&
        Objects.equals(this.tagList, workflowExecutionInfo.tagList) &&
        Objects.equals(this.cancelRequested, workflowExecutionInfo.cancelRequested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(execution, workflowType, startTimestamp, closeTimestamp, executionStatus, closeStatus, parent, tagList, cancelRequested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowExecutionInfo {\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    workflowType: ").append(toIndentedString(workflowType)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    closeTimestamp: ").append(toIndentedString(closeTimestamp)).append("\n");
    sb.append("    executionStatus: ").append(toIndentedString(executionStatus)).append("\n");
    sb.append("    closeStatus: ").append(toIndentedString(closeStatus)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    cancelRequested: ").append(toIndentedString(cancelRequested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("execution");
    openapiFields.add("workflowType");
    openapiFields.add("startTimestamp");
    openapiFields.add("closeTimestamp");
    openapiFields.add("executionStatus");
    openapiFields.add("closeStatus");
    openapiFields.add("parent");
    openapiFields.add("tagList");
    openapiFields.add("cancelRequested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("execution");
    openapiRequiredFields.add("workflowType");
    openapiRequiredFields.add("startTimestamp");
    openapiRequiredFields.add("executionStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowExecutionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowExecutionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowExecutionInfo is not found in the empty JSON string", WorkflowExecutionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowExecutionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowExecutionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkflowExecutionInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `execution`
      WorkflowExecutionInfoExecution.validateJsonElement(jsonObj.get("execution"));
      // validate the required field `workflowType`
      WorkflowExecutionInfoWorkflowType.validateJsonElement(jsonObj.get("workflowType"));
      // validate the required field `startTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("startTimestamp"));
      // validate the optional field `closeTimestamp`
      if (jsonObj.get("closeTimestamp") != null && !jsonObj.get("closeTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("closeTimestamp"));
      }
      // validate the required field `executionStatus`
      ExecutionStatus.validateJsonElement(jsonObj.get("executionStatus"));
      // validate the optional field `closeStatus`
      if (jsonObj.get("closeStatus") != null && !jsonObj.get("closeStatus").isJsonNull()) {
        CloseStatus.validateJsonElement(jsonObj.get("closeStatus"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        WorkflowExecutionInfoParent.validateJsonElement(jsonObj.get("parent"));
      }
      // validate the optional field `tagList`
      if (jsonObj.get("tagList") != null && !jsonObj.get("tagList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tagList"));
      }
      // validate the optional field `cancelRequested`
      if (jsonObj.get("cancelRequested") != null && !jsonObj.get("cancelRequested").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("cancelRequested"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowExecutionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowExecutionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowExecutionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowExecutionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowExecutionInfo>() {
           @Override
           public void write(JsonWriter out, WorkflowExecutionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowExecutionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowExecutionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowExecutionInfo
   * @throws IOException if the JSON string is invalid with respect to WorkflowExecutionInfo
   */
  public static WorkflowExecutionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowExecutionInfo.class);
  }

  /**
   * Convert an instance of WorkflowExecutionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

