/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DecisionCancelTimerDecisionAttributes;
import org.openapitools.client.model.DecisionCancelWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionCompleteWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionContinueAsNewWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionFailWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionRecordMarkerDecisionAttributes;
import org.openapitools.client.model.DecisionRequestCancelActivityTaskDecisionAttributes;
import org.openapitools.client.model.DecisionRequestCancelExternalWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionScheduleActivityTaskDecisionAttributes;
import org.openapitools.client.model.DecisionScheduleLambdaFunctionDecisionAttributes;
import org.openapitools.client.model.DecisionSignalExternalWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionStartChildWorkflowExecutionDecisionAttributes;
import org.openapitools.client.model.DecisionStartTimerDecisionAttributes;
import org.openapitools.client.model.DecisionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Specifies a decision made by the decider. A decision can be one of these types:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelTimer&lt;/code&gt; – Cancels a previously started timer and records a &lt;code&gt;TimerCanceled&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelWorkflowExecution&lt;/code&gt; – Closes the workflow execution and records a &lt;code&gt;WorkflowExecutionCanceled&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CompleteWorkflowExecution&lt;/code&gt; – Closes the workflow execution and records a &lt;code&gt;WorkflowExecutionCompleted&lt;/code&gt; event in the history .&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContinueAsNewWorkflowExecution&lt;/code&gt; – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A &lt;code&gt;WorkflowExecutionContinuedAsNew&lt;/code&gt; event is recorded in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailWorkflowExecution&lt;/code&gt; – Closes the workflow execution and records a &lt;code&gt;WorkflowExecutionFailed&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RecordMarker&lt;/code&gt; – Records a &lt;code&gt;MarkerRecorded&lt;/code&gt; event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don&#39;t need to look at the history beyond the marker event.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelActivityTask&lt;/code&gt; – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to &lt;a&gt;RecordActivityTaskHeartbeat&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelExternalWorkflowExecution&lt;/code&gt; – Requests that a request be made to cancel the specified external workflow execution and records a &lt;code&gt;RequestCancelExternalWorkflowExecutionInitiated&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduleActivityTask&lt;/code&gt; – Schedules an activity task.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignalExternalWorkflowExecution&lt;/code&gt; – Requests a signal to be delivered to the specified external workflow execution and records a &lt;code&gt;SignalExternalWorkflowExecutionInitiated&lt;/code&gt; event in the history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartChildWorkflowExecution&lt;/code&gt; – Requests that a child workflow execution be started and records a &lt;code&gt;StartChildWorkflowExecutionInitiated&lt;/code&gt; event in the history. The child workflow execution is a separate workflow execution with its own history.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartTimer&lt;/code&gt; – Starts a timer for this workflow execution and records a &lt;code&gt;TimerStarted&lt;/code&gt; event in the history. This timer fires after the specified delay and record a &lt;code&gt;TimerFired&lt;/code&gt; event.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Access Control&lt;/b&gt; &lt;/p&gt; &lt;p&gt;If you grant permission to use &lt;code&gt;RespondDecisionTaskCompleted&lt;/code&gt;, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\&quot;&gt;Using IAM to Manage Access to Amazon SWF Workflows&lt;/a&gt; in the &lt;i&gt;Amazon SWF Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Decision Failure&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Decisions can fail for several reasons&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A limit on your account was reached.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The decision lacks sufficient permissions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;One of the following events might be added to the history to indicate an error. The event attribute&#39;s &lt;code&gt;cause&lt;/code&gt; parameter indicates the cause. If &lt;code&gt;cause&lt;/code&gt; is set to &lt;code&gt;OPERATION_NOT_PERMITTED&lt;/code&gt;, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\&quot;&gt;Using IAM to Manage Access to Amazon SWF Workflows&lt;/a&gt; in the &lt;i&gt;Amazon SWF Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ScheduleActivityTaskFailed&lt;/code&gt; – A &lt;code&gt;ScheduleActivityTask&lt;/code&gt; decision failed. This could happen if the activity type specified in the decision isn&#39;t registered, is in a deprecated state, or the decision isn&#39;t properly configured.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelActivityTaskFailed&lt;/code&gt; – A &lt;code&gt;RequestCancelActivityTask&lt;/code&gt; decision failed. This could happen if there is no open activity task with the specified activityId.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartTimerFailed&lt;/code&gt; – A &lt;code&gt;StartTimer&lt;/code&gt; decision failed. This could happen if there is another open timer with the same timerId.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelTimerFailed&lt;/code&gt; – A &lt;code&gt;CancelTimer&lt;/code&gt; decision failed. This could happen if there is no open timer with the specified timerId.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;StartChildWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;StartChildWorkflowExecution&lt;/code&gt; decision failed. This could happen if the workflow type specified isn&#39;t registered, is deprecated, or the decision isn&#39;t properly configured.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;SignalExternalWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;SignalExternalWorkflowExecution&lt;/code&gt; decision failed. This could happen if the &lt;code&gt;workflowID&lt;/code&gt; specified in the decision was incorrect.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RequestCancelExternalWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;RequestCancelExternalWorkflowExecution&lt;/code&gt; decision failed. This could happen if the &lt;code&gt;workflowID&lt;/code&gt; specified in the decision was incorrect.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CancelWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;CancelWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;CompleteWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;CompleteWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ContinueAsNewWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;ContinueAsNewWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;FailWorkflowExecutionFailed&lt;/code&gt; – A &lt;code&gt;FailWorkflowExecution&lt;/code&gt; decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: &lt;code&gt;CompleteWorkflowExecution&lt;/code&gt;, &lt;code&gt;FailWorkflowExecution&lt;/code&gt;, &lt;code&gt;CancelWorkflowExecution&lt;/code&gt; and &lt;code&gt;ContinueAsNewWorkflowExecution&lt;/code&gt;. An &lt;code&gt;UnhandledDecision&lt;/code&gt; fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call &lt;a&gt;RespondDecisionTaskCompleted&lt;/a&gt; without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.&lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;How to Code a Decision&lt;/b&gt; &lt;/p&gt; &lt;p&gt;You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;ScheduleActivityTaskDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;RequestCancelActivityTaskDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;CompleteWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;FailWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;CancelWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;ContinueAsNewWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;RecordMarkerDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;StartTimerDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;CancelTimerDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;SignalExternalWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;RequestCancelExternalWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt; &lt;a&gt;StartChildWorkflowExecutionDecisionAttributes&lt;/a&gt; &lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Decision {
  public static final String SERIALIZED_NAME_DECISION_TYPE = "decisionType";
  @SerializedName(SERIALIZED_NAME_DECISION_TYPE)
  private DecisionType decisionType;

  public static final String SERIALIZED_NAME_SCHEDULE_ACTIVITY_TASK_DECISION_ATTRIBUTES = "scheduleActivityTaskDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ACTIVITY_TASK_DECISION_ATTRIBUTES)
  private DecisionScheduleActivityTaskDecisionAttributes scheduleActivityTaskDecisionAttributes;

  public static final String SERIALIZED_NAME_REQUEST_CANCEL_ACTIVITY_TASK_DECISION_ATTRIBUTES = "requestCancelActivityTaskDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_REQUEST_CANCEL_ACTIVITY_TASK_DECISION_ATTRIBUTES)
  private DecisionRequestCancelActivityTaskDecisionAttributes requestCancelActivityTaskDecisionAttributes;

  public static final String SERIALIZED_NAME_COMPLETE_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "completeWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_COMPLETE_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionCompleteWorkflowExecutionDecisionAttributes completeWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_FAIL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "failWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_FAIL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionFailWorkflowExecutionDecisionAttributes failWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_CANCEL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "cancelWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_CANCEL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionCancelWorkflowExecutionDecisionAttributes cancelWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_CONTINUE_AS_NEW_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "continueAsNewWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_CONTINUE_AS_NEW_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionContinueAsNewWorkflowExecutionDecisionAttributes continueAsNewWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_RECORD_MARKER_DECISION_ATTRIBUTES = "recordMarkerDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_RECORD_MARKER_DECISION_ATTRIBUTES)
  private DecisionRecordMarkerDecisionAttributes recordMarkerDecisionAttributes;

  public static final String SERIALIZED_NAME_START_TIMER_DECISION_ATTRIBUTES = "startTimerDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_START_TIMER_DECISION_ATTRIBUTES)
  private DecisionStartTimerDecisionAttributes startTimerDecisionAttributes;

  public static final String SERIALIZED_NAME_CANCEL_TIMER_DECISION_ATTRIBUTES = "cancelTimerDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_CANCEL_TIMER_DECISION_ATTRIBUTES)
  private DecisionCancelTimerDecisionAttributes cancelTimerDecisionAttributes;

  public static final String SERIALIZED_NAME_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "signalExternalWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionSignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "requestCancelExternalWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionRequestCancelExternalWorkflowExecutionDecisionAttributes requestCancelExternalWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_START_CHILD_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES = "startChildWorkflowExecutionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_START_CHILD_WORKFLOW_EXECUTION_DECISION_ATTRIBUTES)
  private DecisionStartChildWorkflowExecutionDecisionAttributes startChildWorkflowExecutionDecisionAttributes;

  public static final String SERIALIZED_NAME_SCHEDULE_LAMBDA_FUNCTION_DECISION_ATTRIBUTES = "scheduleLambdaFunctionDecisionAttributes";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_LAMBDA_FUNCTION_DECISION_ATTRIBUTES)
  private DecisionScheduleLambdaFunctionDecisionAttributes scheduleLambdaFunctionDecisionAttributes;

  public Decision() {
  }

  public Decision decisionType(DecisionType decisionType) {
    this.decisionType = decisionType;
    return this;
  }

  /**
   * Get decisionType
   * @return decisionType
   */
  @javax.annotation.Nonnull
  public DecisionType getDecisionType() {
    return decisionType;
  }

  public void setDecisionType(DecisionType decisionType) {
    this.decisionType = decisionType;
  }


  public Decision scheduleActivityTaskDecisionAttributes(DecisionScheduleActivityTaskDecisionAttributes scheduleActivityTaskDecisionAttributes) {
    this.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes;
    return this;
  }

  /**
   * Get scheduleActivityTaskDecisionAttributes
   * @return scheduleActivityTaskDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionScheduleActivityTaskDecisionAttributes getScheduleActivityTaskDecisionAttributes() {
    return scheduleActivityTaskDecisionAttributes;
  }

  public void setScheduleActivityTaskDecisionAttributes(DecisionScheduleActivityTaskDecisionAttributes scheduleActivityTaskDecisionAttributes) {
    this.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes;
  }


  public Decision requestCancelActivityTaskDecisionAttributes(DecisionRequestCancelActivityTaskDecisionAttributes requestCancelActivityTaskDecisionAttributes) {
    this.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes;
    return this;
  }

  /**
   * Get requestCancelActivityTaskDecisionAttributes
   * @return requestCancelActivityTaskDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionRequestCancelActivityTaskDecisionAttributes getRequestCancelActivityTaskDecisionAttributes() {
    return requestCancelActivityTaskDecisionAttributes;
  }

  public void setRequestCancelActivityTaskDecisionAttributes(DecisionRequestCancelActivityTaskDecisionAttributes requestCancelActivityTaskDecisionAttributes) {
    this.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes;
  }


  public Decision completeWorkflowExecutionDecisionAttributes(DecisionCompleteWorkflowExecutionDecisionAttributes completeWorkflowExecutionDecisionAttributes) {
    this.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get completeWorkflowExecutionDecisionAttributes
   * @return completeWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionCompleteWorkflowExecutionDecisionAttributes getCompleteWorkflowExecutionDecisionAttributes() {
    return completeWorkflowExecutionDecisionAttributes;
  }

  public void setCompleteWorkflowExecutionDecisionAttributes(DecisionCompleteWorkflowExecutionDecisionAttributes completeWorkflowExecutionDecisionAttributes) {
    this.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes;
  }


  public Decision failWorkflowExecutionDecisionAttributes(DecisionFailWorkflowExecutionDecisionAttributes failWorkflowExecutionDecisionAttributes) {
    this.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get failWorkflowExecutionDecisionAttributes
   * @return failWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionFailWorkflowExecutionDecisionAttributes getFailWorkflowExecutionDecisionAttributes() {
    return failWorkflowExecutionDecisionAttributes;
  }

  public void setFailWorkflowExecutionDecisionAttributes(DecisionFailWorkflowExecutionDecisionAttributes failWorkflowExecutionDecisionAttributes) {
    this.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes;
  }


  public Decision cancelWorkflowExecutionDecisionAttributes(DecisionCancelWorkflowExecutionDecisionAttributes cancelWorkflowExecutionDecisionAttributes) {
    this.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get cancelWorkflowExecutionDecisionAttributes
   * @return cancelWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionCancelWorkflowExecutionDecisionAttributes getCancelWorkflowExecutionDecisionAttributes() {
    return cancelWorkflowExecutionDecisionAttributes;
  }

  public void setCancelWorkflowExecutionDecisionAttributes(DecisionCancelWorkflowExecutionDecisionAttributes cancelWorkflowExecutionDecisionAttributes) {
    this.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes;
  }


  public Decision continueAsNewWorkflowExecutionDecisionAttributes(DecisionContinueAsNewWorkflowExecutionDecisionAttributes continueAsNewWorkflowExecutionDecisionAttributes) {
    this.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get continueAsNewWorkflowExecutionDecisionAttributes
   * @return continueAsNewWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionContinueAsNewWorkflowExecutionDecisionAttributes getContinueAsNewWorkflowExecutionDecisionAttributes() {
    return continueAsNewWorkflowExecutionDecisionAttributes;
  }

  public void setContinueAsNewWorkflowExecutionDecisionAttributes(DecisionContinueAsNewWorkflowExecutionDecisionAttributes continueAsNewWorkflowExecutionDecisionAttributes) {
    this.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes;
  }


  public Decision recordMarkerDecisionAttributes(DecisionRecordMarkerDecisionAttributes recordMarkerDecisionAttributes) {
    this.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes;
    return this;
  }

  /**
   * Get recordMarkerDecisionAttributes
   * @return recordMarkerDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionRecordMarkerDecisionAttributes getRecordMarkerDecisionAttributes() {
    return recordMarkerDecisionAttributes;
  }

  public void setRecordMarkerDecisionAttributes(DecisionRecordMarkerDecisionAttributes recordMarkerDecisionAttributes) {
    this.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes;
  }


  public Decision startTimerDecisionAttributes(DecisionStartTimerDecisionAttributes startTimerDecisionAttributes) {
    this.startTimerDecisionAttributes = startTimerDecisionAttributes;
    return this;
  }

  /**
   * Get startTimerDecisionAttributes
   * @return startTimerDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionStartTimerDecisionAttributes getStartTimerDecisionAttributes() {
    return startTimerDecisionAttributes;
  }

  public void setStartTimerDecisionAttributes(DecisionStartTimerDecisionAttributes startTimerDecisionAttributes) {
    this.startTimerDecisionAttributes = startTimerDecisionAttributes;
  }


  public Decision cancelTimerDecisionAttributes(DecisionCancelTimerDecisionAttributes cancelTimerDecisionAttributes) {
    this.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes;
    return this;
  }

  /**
   * Get cancelTimerDecisionAttributes
   * @return cancelTimerDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionCancelTimerDecisionAttributes getCancelTimerDecisionAttributes() {
    return cancelTimerDecisionAttributes;
  }

  public void setCancelTimerDecisionAttributes(DecisionCancelTimerDecisionAttributes cancelTimerDecisionAttributes) {
    this.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes;
  }


  public Decision signalExternalWorkflowExecutionDecisionAttributes(DecisionSignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflowExecutionDecisionAttributes) {
    this.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get signalExternalWorkflowExecutionDecisionAttributes
   * @return signalExternalWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionSignalExternalWorkflowExecutionDecisionAttributes getSignalExternalWorkflowExecutionDecisionAttributes() {
    return signalExternalWorkflowExecutionDecisionAttributes;
  }

  public void setSignalExternalWorkflowExecutionDecisionAttributes(DecisionSignalExternalWorkflowExecutionDecisionAttributes signalExternalWorkflowExecutionDecisionAttributes) {
    this.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes;
  }


  public Decision requestCancelExternalWorkflowExecutionDecisionAttributes(DecisionRequestCancelExternalWorkflowExecutionDecisionAttributes requestCancelExternalWorkflowExecutionDecisionAttributes) {
    this.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get requestCancelExternalWorkflowExecutionDecisionAttributes
   * @return requestCancelExternalWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionRequestCancelExternalWorkflowExecutionDecisionAttributes getRequestCancelExternalWorkflowExecutionDecisionAttributes() {
    return requestCancelExternalWorkflowExecutionDecisionAttributes;
  }

  public void setRequestCancelExternalWorkflowExecutionDecisionAttributes(DecisionRequestCancelExternalWorkflowExecutionDecisionAttributes requestCancelExternalWorkflowExecutionDecisionAttributes) {
    this.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes;
  }


  public Decision startChildWorkflowExecutionDecisionAttributes(DecisionStartChildWorkflowExecutionDecisionAttributes startChildWorkflowExecutionDecisionAttributes) {
    this.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes;
    return this;
  }

  /**
   * Get startChildWorkflowExecutionDecisionAttributes
   * @return startChildWorkflowExecutionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionStartChildWorkflowExecutionDecisionAttributes getStartChildWorkflowExecutionDecisionAttributes() {
    return startChildWorkflowExecutionDecisionAttributes;
  }

  public void setStartChildWorkflowExecutionDecisionAttributes(DecisionStartChildWorkflowExecutionDecisionAttributes startChildWorkflowExecutionDecisionAttributes) {
    this.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes;
  }


  public Decision scheduleLambdaFunctionDecisionAttributes(DecisionScheduleLambdaFunctionDecisionAttributes scheduleLambdaFunctionDecisionAttributes) {
    this.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes;
    return this;
  }

  /**
   * Get scheduleLambdaFunctionDecisionAttributes
   * @return scheduleLambdaFunctionDecisionAttributes
   */
  @javax.annotation.Nullable
  public DecisionScheduleLambdaFunctionDecisionAttributes getScheduleLambdaFunctionDecisionAttributes() {
    return scheduleLambdaFunctionDecisionAttributes;
  }

  public void setScheduleLambdaFunctionDecisionAttributes(DecisionScheduleLambdaFunctionDecisionAttributes scheduleLambdaFunctionDecisionAttributes) {
    this.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Decision decision = (Decision) o;
    return Objects.equals(this.decisionType, decision.decisionType) &&
        Objects.equals(this.scheduleActivityTaskDecisionAttributes, decision.scheduleActivityTaskDecisionAttributes) &&
        Objects.equals(this.requestCancelActivityTaskDecisionAttributes, decision.requestCancelActivityTaskDecisionAttributes) &&
        Objects.equals(this.completeWorkflowExecutionDecisionAttributes, decision.completeWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.failWorkflowExecutionDecisionAttributes, decision.failWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.cancelWorkflowExecutionDecisionAttributes, decision.cancelWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.continueAsNewWorkflowExecutionDecisionAttributes, decision.continueAsNewWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.recordMarkerDecisionAttributes, decision.recordMarkerDecisionAttributes) &&
        Objects.equals(this.startTimerDecisionAttributes, decision.startTimerDecisionAttributes) &&
        Objects.equals(this.cancelTimerDecisionAttributes, decision.cancelTimerDecisionAttributes) &&
        Objects.equals(this.signalExternalWorkflowExecutionDecisionAttributes, decision.signalExternalWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.requestCancelExternalWorkflowExecutionDecisionAttributes, decision.requestCancelExternalWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.startChildWorkflowExecutionDecisionAttributes, decision.startChildWorkflowExecutionDecisionAttributes) &&
        Objects.equals(this.scheduleLambdaFunctionDecisionAttributes, decision.scheduleLambdaFunctionDecisionAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decisionType, scheduleActivityTaskDecisionAttributes, requestCancelActivityTaskDecisionAttributes, completeWorkflowExecutionDecisionAttributes, failWorkflowExecutionDecisionAttributes, cancelWorkflowExecutionDecisionAttributes, continueAsNewWorkflowExecutionDecisionAttributes, recordMarkerDecisionAttributes, startTimerDecisionAttributes, cancelTimerDecisionAttributes, signalExternalWorkflowExecutionDecisionAttributes, requestCancelExternalWorkflowExecutionDecisionAttributes, startChildWorkflowExecutionDecisionAttributes, scheduleLambdaFunctionDecisionAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Decision {\n");
    sb.append("    decisionType: ").append(toIndentedString(decisionType)).append("\n");
    sb.append("    scheduleActivityTaskDecisionAttributes: ").append(toIndentedString(scheduleActivityTaskDecisionAttributes)).append("\n");
    sb.append("    requestCancelActivityTaskDecisionAttributes: ").append(toIndentedString(requestCancelActivityTaskDecisionAttributes)).append("\n");
    sb.append("    completeWorkflowExecutionDecisionAttributes: ").append(toIndentedString(completeWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    failWorkflowExecutionDecisionAttributes: ").append(toIndentedString(failWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    cancelWorkflowExecutionDecisionAttributes: ").append(toIndentedString(cancelWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    continueAsNewWorkflowExecutionDecisionAttributes: ").append(toIndentedString(continueAsNewWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    recordMarkerDecisionAttributes: ").append(toIndentedString(recordMarkerDecisionAttributes)).append("\n");
    sb.append("    startTimerDecisionAttributes: ").append(toIndentedString(startTimerDecisionAttributes)).append("\n");
    sb.append("    cancelTimerDecisionAttributes: ").append(toIndentedString(cancelTimerDecisionAttributes)).append("\n");
    sb.append("    signalExternalWorkflowExecutionDecisionAttributes: ").append(toIndentedString(signalExternalWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    requestCancelExternalWorkflowExecutionDecisionAttributes: ").append(toIndentedString(requestCancelExternalWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    startChildWorkflowExecutionDecisionAttributes: ").append(toIndentedString(startChildWorkflowExecutionDecisionAttributes)).append("\n");
    sb.append("    scheduleLambdaFunctionDecisionAttributes: ").append(toIndentedString(scheduleLambdaFunctionDecisionAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("decisionType");
    openapiFields.add("scheduleActivityTaskDecisionAttributes");
    openapiFields.add("requestCancelActivityTaskDecisionAttributes");
    openapiFields.add("completeWorkflowExecutionDecisionAttributes");
    openapiFields.add("failWorkflowExecutionDecisionAttributes");
    openapiFields.add("cancelWorkflowExecutionDecisionAttributes");
    openapiFields.add("continueAsNewWorkflowExecutionDecisionAttributes");
    openapiFields.add("recordMarkerDecisionAttributes");
    openapiFields.add("startTimerDecisionAttributes");
    openapiFields.add("cancelTimerDecisionAttributes");
    openapiFields.add("signalExternalWorkflowExecutionDecisionAttributes");
    openapiFields.add("requestCancelExternalWorkflowExecutionDecisionAttributes");
    openapiFields.add("startChildWorkflowExecutionDecisionAttributes");
    openapiFields.add("scheduleLambdaFunctionDecisionAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("decisionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Decision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Decision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Decision is not found in the empty JSON string", Decision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Decision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Decision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Decision.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `decisionType`
      DecisionType.validateJsonElement(jsonObj.get("decisionType"));
      // validate the optional field `scheduleActivityTaskDecisionAttributes`
      if (jsonObj.get("scheduleActivityTaskDecisionAttributes") != null && !jsonObj.get("scheduleActivityTaskDecisionAttributes").isJsonNull()) {
        DecisionScheduleActivityTaskDecisionAttributes.validateJsonElement(jsonObj.get("scheduleActivityTaskDecisionAttributes"));
      }
      // validate the optional field `requestCancelActivityTaskDecisionAttributes`
      if (jsonObj.get("requestCancelActivityTaskDecisionAttributes") != null && !jsonObj.get("requestCancelActivityTaskDecisionAttributes").isJsonNull()) {
        DecisionRequestCancelActivityTaskDecisionAttributes.validateJsonElement(jsonObj.get("requestCancelActivityTaskDecisionAttributes"));
      }
      // validate the optional field `completeWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("completeWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("completeWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionCompleteWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("completeWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `failWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("failWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("failWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionFailWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("failWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `cancelWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("cancelWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("cancelWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionCancelWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("cancelWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `continueAsNewWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("continueAsNewWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("continueAsNewWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionContinueAsNewWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("continueAsNewWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `recordMarkerDecisionAttributes`
      if (jsonObj.get("recordMarkerDecisionAttributes") != null && !jsonObj.get("recordMarkerDecisionAttributes").isJsonNull()) {
        DecisionRecordMarkerDecisionAttributes.validateJsonElement(jsonObj.get("recordMarkerDecisionAttributes"));
      }
      // validate the optional field `startTimerDecisionAttributes`
      if (jsonObj.get("startTimerDecisionAttributes") != null && !jsonObj.get("startTimerDecisionAttributes").isJsonNull()) {
        DecisionStartTimerDecisionAttributes.validateJsonElement(jsonObj.get("startTimerDecisionAttributes"));
      }
      // validate the optional field `cancelTimerDecisionAttributes`
      if (jsonObj.get("cancelTimerDecisionAttributes") != null && !jsonObj.get("cancelTimerDecisionAttributes").isJsonNull()) {
        DecisionCancelTimerDecisionAttributes.validateJsonElement(jsonObj.get("cancelTimerDecisionAttributes"));
      }
      // validate the optional field `signalExternalWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("signalExternalWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("signalExternalWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionSignalExternalWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("signalExternalWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `requestCancelExternalWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("requestCancelExternalWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("requestCancelExternalWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionRequestCancelExternalWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("requestCancelExternalWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `startChildWorkflowExecutionDecisionAttributes`
      if (jsonObj.get("startChildWorkflowExecutionDecisionAttributes") != null && !jsonObj.get("startChildWorkflowExecutionDecisionAttributes").isJsonNull()) {
        DecisionStartChildWorkflowExecutionDecisionAttributes.validateJsonElement(jsonObj.get("startChildWorkflowExecutionDecisionAttributes"));
      }
      // validate the optional field `scheduleLambdaFunctionDecisionAttributes`
      if (jsonObj.get("scheduleLambdaFunctionDecisionAttributes") != null && !jsonObj.get("scheduleLambdaFunctionDecisionAttributes").isJsonNull()) {
        DecisionScheduleLambdaFunctionDecisionAttributes.validateJsonElement(jsonObj.get("scheduleLambdaFunctionDecisionAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Decision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Decision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Decision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Decision.class));

       return (TypeAdapter<T>) new TypeAdapter<Decision>() {
           @Override
           public void write(JsonWriter out, Decision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Decision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Decision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Decision
   * @throws IOException if the JSON string is invalid with respect to Decision
   */
  public static Decision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Decision.class);
  }

  /**
   * Convert an instance of Decision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

