/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets WorkflowExecutionTerminatedCause
 */
@JsonAdapter(WorkflowExecutionTerminatedCause.Adapter.class)
public enum WorkflowExecutionTerminatedCause {
  
  CHILD_POLICY_APPLIED("CHILD_POLICY_APPLIED"),
  
  EVENT_LIMIT_EXCEEDED("EVENT_LIMIT_EXCEEDED"),
  
  OPERATOR_INITIATED("OPERATOR_INITIATED");

  private String value;

  WorkflowExecutionTerminatedCause(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static WorkflowExecutionTerminatedCause fromValue(String value) {
    for (WorkflowExecutionTerminatedCause b : WorkflowExecutionTerminatedCause.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<WorkflowExecutionTerminatedCause> {
    @Override
    public void write(final JsonWriter jsonWriter, final WorkflowExecutionTerminatedCause enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public WorkflowExecutionTerminatedCause read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return WorkflowExecutionTerminatedCause.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    WorkflowExecutionTerminatedCause.fromValue(value);
  }
}

