/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActivityTaskScheduledEventAttributesActivityType;
import org.openapitools.client.model.ActivityTaskScheduledEventAttributesTaskList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HistoryEventActivityTaskScheduledEventAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HistoryEventActivityTaskScheduledEventAttributes {
  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private ActivityTaskScheduledEventAttributesActivityType activityType;

  public static final String SERIALIZED_NAME_ACTIVITY_ID = "activityId";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_ID)
  private String activityId;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_CONTROL = "control";
  @SerializedName(SERIALIZED_NAME_CONTROL)
  private String control;

  public static final String SERIALIZED_NAME_SCHEDULE_TO_START_TIMEOUT = "scheduleToStartTimeout";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TO_START_TIMEOUT)
  private String scheduleToStartTimeout;

  public static final String SERIALIZED_NAME_SCHEDULE_TO_CLOSE_TIMEOUT = "scheduleToCloseTimeout";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TO_CLOSE_TIMEOUT)
  private String scheduleToCloseTimeout;

  public static final String SERIALIZED_NAME_START_TO_CLOSE_TIMEOUT = "startToCloseTimeout";
  @SerializedName(SERIALIZED_NAME_START_TO_CLOSE_TIMEOUT)
  private String startToCloseTimeout;

  public static final String SERIALIZED_NAME_TASK_LIST = "taskList";
  @SerializedName(SERIALIZED_NAME_TASK_LIST)
  private ActivityTaskScheduledEventAttributesTaskList taskList;

  public static final String SERIALIZED_NAME_TASK_PRIORITY = "taskPriority";
  @SerializedName(SERIALIZED_NAME_TASK_PRIORITY)
  private String taskPriority;

  public static final String SERIALIZED_NAME_DECISION_TASK_COMPLETED_EVENT_ID = "decisionTaskCompletedEventId";
  @SerializedName(SERIALIZED_NAME_DECISION_TASK_COMPLETED_EVENT_ID)
  private Integer decisionTaskCompletedEventId;

  public static final String SERIALIZED_NAME_HEARTBEAT_TIMEOUT = "heartbeatTimeout";
  @SerializedName(SERIALIZED_NAME_HEARTBEAT_TIMEOUT)
  private String heartbeatTimeout;

  public HistoryEventActivityTaskScheduledEventAttributes() {
  }

  public HistoryEventActivityTaskScheduledEventAttributes activityType(ActivityTaskScheduledEventAttributesActivityType activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * Get activityType
   * @return activityType
   */
  @javax.annotation.Nonnull
  public ActivityTaskScheduledEventAttributesActivityType getActivityType() {
    return activityType;
  }

  public void setActivityType(ActivityTaskScheduledEventAttributesActivityType activityType) {
    this.activityType = activityType;
  }


  public HistoryEventActivityTaskScheduledEventAttributes activityId(String activityId) {
    this.activityId = activityId;
    return this;
  }

  /**
   * Get activityId
   * @return activityId
   */
  @javax.annotation.Nonnull
  public String getActivityId() {
    return activityId;
  }

  public void setActivityId(String activityId) {
    this.activityId = activityId;
  }


  public HistoryEventActivityTaskScheduledEventAttributes input(String input) {
    this.input = input;
    return this;
  }

  /**
   * Get input
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public HistoryEventActivityTaskScheduledEventAttributes control(String control) {
    this.control = control;
    return this;
  }

  /**
   * Get control
   * @return control
   */
  @javax.annotation.Nullable
  public String getControl() {
    return control;
  }

  public void setControl(String control) {
    this.control = control;
  }


  public HistoryEventActivityTaskScheduledEventAttributes scheduleToStartTimeout(String scheduleToStartTimeout) {
    this.scheduleToStartTimeout = scheduleToStartTimeout;
    return this;
  }

  /**
   * Get scheduleToStartTimeout
   * @return scheduleToStartTimeout
   */
  @javax.annotation.Nullable
  public String getScheduleToStartTimeout() {
    return scheduleToStartTimeout;
  }

  public void setScheduleToStartTimeout(String scheduleToStartTimeout) {
    this.scheduleToStartTimeout = scheduleToStartTimeout;
  }


  public HistoryEventActivityTaskScheduledEventAttributes scheduleToCloseTimeout(String scheduleToCloseTimeout) {
    this.scheduleToCloseTimeout = scheduleToCloseTimeout;
    return this;
  }

  /**
   * Get scheduleToCloseTimeout
   * @return scheduleToCloseTimeout
   */
  @javax.annotation.Nullable
  public String getScheduleToCloseTimeout() {
    return scheduleToCloseTimeout;
  }

  public void setScheduleToCloseTimeout(String scheduleToCloseTimeout) {
    this.scheduleToCloseTimeout = scheduleToCloseTimeout;
  }


  public HistoryEventActivityTaskScheduledEventAttributes startToCloseTimeout(String startToCloseTimeout) {
    this.startToCloseTimeout = startToCloseTimeout;
    return this;
  }

  /**
   * Get startToCloseTimeout
   * @return startToCloseTimeout
   */
  @javax.annotation.Nullable
  public String getStartToCloseTimeout() {
    return startToCloseTimeout;
  }

  public void setStartToCloseTimeout(String startToCloseTimeout) {
    this.startToCloseTimeout = startToCloseTimeout;
  }


  public HistoryEventActivityTaskScheduledEventAttributes taskList(ActivityTaskScheduledEventAttributesTaskList taskList) {
    this.taskList = taskList;
    return this;
  }

  /**
   * Get taskList
   * @return taskList
   */
  @javax.annotation.Nonnull
  public ActivityTaskScheduledEventAttributesTaskList getTaskList() {
    return taskList;
  }

  public void setTaskList(ActivityTaskScheduledEventAttributesTaskList taskList) {
    this.taskList = taskList;
  }


  public HistoryEventActivityTaskScheduledEventAttributes taskPriority(String taskPriority) {
    this.taskPriority = taskPriority;
    return this;
  }

  /**
   * Get taskPriority
   * @return taskPriority
   */
  @javax.annotation.Nullable
  public String getTaskPriority() {
    return taskPriority;
  }

  public void setTaskPriority(String taskPriority) {
    this.taskPriority = taskPriority;
  }


  public HistoryEventActivityTaskScheduledEventAttributes decisionTaskCompletedEventId(Integer decisionTaskCompletedEventId) {
    this.decisionTaskCompletedEventId = decisionTaskCompletedEventId;
    return this;
  }

  /**
   * Get decisionTaskCompletedEventId
   * @return decisionTaskCompletedEventId
   */
  @javax.annotation.Nonnull
  public Integer getDecisionTaskCompletedEventId() {
    return decisionTaskCompletedEventId;
  }

  public void setDecisionTaskCompletedEventId(Integer decisionTaskCompletedEventId) {
    this.decisionTaskCompletedEventId = decisionTaskCompletedEventId;
  }


  public HistoryEventActivityTaskScheduledEventAttributes heartbeatTimeout(String heartbeatTimeout) {
    this.heartbeatTimeout = heartbeatTimeout;
    return this;
  }

  /**
   * Get heartbeatTimeout
   * @return heartbeatTimeout
   */
  @javax.annotation.Nullable
  public String getHeartbeatTimeout() {
    return heartbeatTimeout;
  }

  public void setHeartbeatTimeout(String heartbeatTimeout) {
    this.heartbeatTimeout = heartbeatTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryEventActivityTaskScheduledEventAttributes historyEventActivityTaskScheduledEventAttributes = (HistoryEventActivityTaskScheduledEventAttributes) o;
    return Objects.equals(this.activityType, historyEventActivityTaskScheduledEventAttributes.activityType) &&
        Objects.equals(this.activityId, historyEventActivityTaskScheduledEventAttributes.activityId) &&
        Objects.equals(this.input, historyEventActivityTaskScheduledEventAttributes.input) &&
        Objects.equals(this.control, historyEventActivityTaskScheduledEventAttributes.control) &&
        Objects.equals(this.scheduleToStartTimeout, historyEventActivityTaskScheduledEventAttributes.scheduleToStartTimeout) &&
        Objects.equals(this.scheduleToCloseTimeout, historyEventActivityTaskScheduledEventAttributes.scheduleToCloseTimeout) &&
        Objects.equals(this.startToCloseTimeout, historyEventActivityTaskScheduledEventAttributes.startToCloseTimeout) &&
        Objects.equals(this.taskList, historyEventActivityTaskScheduledEventAttributes.taskList) &&
        Objects.equals(this.taskPriority, historyEventActivityTaskScheduledEventAttributes.taskPriority) &&
        Objects.equals(this.decisionTaskCompletedEventId, historyEventActivityTaskScheduledEventAttributes.decisionTaskCompletedEventId) &&
        Objects.equals(this.heartbeatTimeout, historyEventActivityTaskScheduledEventAttributes.heartbeatTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityType, activityId, input, control, scheduleToStartTimeout, scheduleToCloseTimeout, startToCloseTimeout, taskList, taskPriority, decisionTaskCompletedEventId, heartbeatTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryEventActivityTaskScheduledEventAttributes {\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    activityId: ").append(toIndentedString(activityId)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    control: ").append(toIndentedString(control)).append("\n");
    sb.append("    scheduleToStartTimeout: ").append(toIndentedString(scheduleToStartTimeout)).append("\n");
    sb.append("    scheduleToCloseTimeout: ").append(toIndentedString(scheduleToCloseTimeout)).append("\n");
    sb.append("    startToCloseTimeout: ").append(toIndentedString(startToCloseTimeout)).append("\n");
    sb.append("    taskList: ").append(toIndentedString(taskList)).append("\n");
    sb.append("    taskPriority: ").append(toIndentedString(taskPriority)).append("\n");
    sb.append("    decisionTaskCompletedEventId: ").append(toIndentedString(decisionTaskCompletedEventId)).append("\n");
    sb.append("    heartbeatTimeout: ").append(toIndentedString(heartbeatTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activityType");
    openapiFields.add("activityId");
    openapiFields.add("input");
    openapiFields.add("control");
    openapiFields.add("scheduleToStartTimeout");
    openapiFields.add("scheduleToCloseTimeout");
    openapiFields.add("startToCloseTimeout");
    openapiFields.add("taskList");
    openapiFields.add("taskPriority");
    openapiFields.add("decisionTaskCompletedEventId");
    openapiFields.add("heartbeatTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activityType");
    openapiRequiredFields.add("activityId");
    openapiRequiredFields.add("taskList");
    openapiRequiredFields.add("decisionTaskCompletedEventId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HistoryEventActivityTaskScheduledEventAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoryEventActivityTaskScheduledEventAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoryEventActivityTaskScheduledEventAttributes is not found in the empty JSON string", HistoryEventActivityTaskScheduledEventAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoryEventActivityTaskScheduledEventAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoryEventActivityTaskScheduledEventAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HistoryEventActivityTaskScheduledEventAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `activityType`
      ActivityTaskScheduledEventAttributesActivityType.validateJsonElement(jsonObj.get("activityType"));
      // validate the required field `activityId`
      String.validateJsonElement(jsonObj.get("activityId"));
      // validate the optional field `input`
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("input"));
      }
      // validate the optional field `control`
      if (jsonObj.get("control") != null && !jsonObj.get("control").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("control"));
      }
      // validate the optional field `scheduleToStartTimeout`
      if (jsonObj.get("scheduleToStartTimeout") != null && !jsonObj.get("scheduleToStartTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("scheduleToStartTimeout"));
      }
      // validate the optional field `scheduleToCloseTimeout`
      if (jsonObj.get("scheduleToCloseTimeout") != null && !jsonObj.get("scheduleToCloseTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("scheduleToCloseTimeout"));
      }
      // validate the optional field `startToCloseTimeout`
      if (jsonObj.get("startToCloseTimeout") != null && !jsonObj.get("startToCloseTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("startToCloseTimeout"));
      }
      // validate the required field `taskList`
      ActivityTaskScheduledEventAttributesTaskList.validateJsonElement(jsonObj.get("taskList"));
      // validate the optional field `taskPriority`
      if (jsonObj.get("taskPriority") != null && !jsonObj.get("taskPriority").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("taskPriority"));
      }
      // validate the required field `decisionTaskCompletedEventId`
      Integer.validateJsonElement(jsonObj.get("decisionTaskCompletedEventId"));
      // validate the optional field `heartbeatTimeout`
      if (jsonObj.get("heartbeatTimeout") != null && !jsonObj.get("heartbeatTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("heartbeatTimeout"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoryEventActivityTaskScheduledEventAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoryEventActivityTaskScheduledEventAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoryEventActivityTaskScheduledEventAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoryEventActivityTaskScheduledEventAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoryEventActivityTaskScheduledEventAttributes>() {
           @Override
           public void write(JsonWriter out, HistoryEventActivityTaskScheduledEventAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoryEventActivityTaskScheduledEventAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HistoryEventActivityTaskScheduledEventAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HistoryEventActivityTaskScheduledEventAttributes
   * @throws IOException if the JSON string is invalid with respect to HistoryEventActivityTaskScheduledEventAttributes
   */
  public static HistoryEventActivityTaskScheduledEventAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoryEventActivityTaskScheduledEventAttributes.class);
  }

  /**
   * Convert an instance of HistoryEventActivityTaskScheduledEventAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

