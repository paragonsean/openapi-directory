/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListClosedWorkflowExecutionsInputStartTimeFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListClosedWorkflowExecutionsInputStartTimeFilter {
  public static final String SERIALIZED_NAME_OLDEST_DATE = "oldestDate";
  @SerializedName(SERIALIZED_NAME_OLDEST_DATE)
  private OffsetDateTime oldestDate;

  public static final String SERIALIZED_NAME_LATEST_DATE = "latestDate";
  @SerializedName(SERIALIZED_NAME_LATEST_DATE)
  private OffsetDateTime latestDate;

  public ListClosedWorkflowExecutionsInputStartTimeFilter() {
  }

  public ListClosedWorkflowExecutionsInputStartTimeFilter oldestDate(OffsetDateTime oldestDate) {
    this.oldestDate = oldestDate;
    return this;
  }

  /**
   * Get oldestDate
   * @return oldestDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getOldestDate() {
    return oldestDate;
  }

  public void setOldestDate(OffsetDateTime oldestDate) {
    this.oldestDate = oldestDate;
  }


  public ListClosedWorkflowExecutionsInputStartTimeFilter latestDate(OffsetDateTime latestDate) {
    this.latestDate = latestDate;
    return this;
  }

  /**
   * Get latestDate
   * @return latestDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestDate() {
    return latestDate;
  }

  public void setLatestDate(OffsetDateTime latestDate) {
    this.latestDate = latestDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListClosedWorkflowExecutionsInputStartTimeFilter listClosedWorkflowExecutionsInputStartTimeFilter = (ListClosedWorkflowExecutionsInputStartTimeFilter) o;
    return Objects.equals(this.oldestDate, listClosedWorkflowExecutionsInputStartTimeFilter.oldestDate) &&
        Objects.equals(this.latestDate, listClosedWorkflowExecutionsInputStartTimeFilter.latestDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oldestDate, latestDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListClosedWorkflowExecutionsInputStartTimeFilter {\n");
    sb.append("    oldestDate: ").append(toIndentedString(oldestDate)).append("\n");
    sb.append("    latestDate: ").append(toIndentedString(latestDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oldestDate");
    openapiFields.add("latestDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("oldestDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListClosedWorkflowExecutionsInputStartTimeFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListClosedWorkflowExecutionsInputStartTimeFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListClosedWorkflowExecutionsInputStartTimeFilter is not found in the empty JSON string", ListClosedWorkflowExecutionsInputStartTimeFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListClosedWorkflowExecutionsInputStartTimeFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListClosedWorkflowExecutionsInputStartTimeFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListClosedWorkflowExecutionsInputStartTimeFilter.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `oldestDate`
      OffsetDateTime.validateJsonElement(jsonObj.get("oldestDate"));
      // validate the optional field `latestDate`
      if (jsonObj.get("latestDate") != null && !jsonObj.get("latestDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("latestDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListClosedWorkflowExecutionsInputStartTimeFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListClosedWorkflowExecutionsInputStartTimeFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListClosedWorkflowExecutionsInputStartTimeFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListClosedWorkflowExecutionsInputStartTimeFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListClosedWorkflowExecutionsInputStartTimeFilter>() {
           @Override
           public void write(JsonWriter out, ListClosedWorkflowExecutionsInputStartTimeFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListClosedWorkflowExecutionsInputStartTimeFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListClosedWorkflowExecutionsInputStartTimeFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListClosedWorkflowExecutionsInputStartTimeFilter
   * @throws IOException if the JSON string is invalid with respect to ListClosedWorkflowExecutionsInputStartTimeFilter
   */
  public static ListClosedWorkflowExecutionsInputStartTimeFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListClosedWorkflowExecutionsInputStartTimeFilter.class);
  }

  /**
   * Convert an instance of ListClosedWorkflowExecutionsInputStartTimeFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

