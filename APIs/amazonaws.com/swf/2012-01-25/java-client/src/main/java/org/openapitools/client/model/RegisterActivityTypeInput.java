/*
 * Amazon Simple Workflow Service
 * <fullname>Amazon Simple Workflow Service</fullname> <p>The Amazon Simple Workflow Service (Amazon SWF) makes it easy to build applications that use Amazon's cloud to coordinate work across distributed components. In Amazon SWF, a <i>task</i> represents a logical unit of work that is performed by a component of your workflow. Coordinating tasks in a workflow involves managing intertask dependencies, scheduling, and concurrency in accordance with the logical flow of the application.</p> <p>Amazon SWF gives you full control over implementing tasks and coordinating them without worrying about underlying complexities such as tracking their progress and maintaining their state.</p> <p>This documentation serves as reference only. For a broader overview of the Amazon SWF programming model, see the <i> <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/\">Amazon SWF Developer Guide</a> </i>.</p>
 *
 * The version of the OpenAPI document: 2012-01-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegisterActivityTypeInputDefaultTaskList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterActivityTypeInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:07.181417-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterActivityTypeInput {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEFAULT_TASK_START_TO_CLOSE_TIMEOUT = "defaultTaskStartToCloseTimeout";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TASK_START_TO_CLOSE_TIMEOUT)
  private String defaultTaskStartToCloseTimeout;

  public static final String SERIALIZED_NAME_DEFAULT_TASK_HEARTBEAT_TIMEOUT = "defaultTaskHeartbeatTimeout";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TASK_HEARTBEAT_TIMEOUT)
  private String defaultTaskHeartbeatTimeout;

  public static final String SERIALIZED_NAME_DEFAULT_TASK_LIST = "defaultTaskList";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TASK_LIST)
  private RegisterActivityTypeInputDefaultTaskList defaultTaskList;

  public static final String SERIALIZED_NAME_DEFAULT_TASK_PRIORITY = "defaultTaskPriority";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TASK_PRIORITY)
  private String defaultTaskPriority;

  public static final String SERIALIZED_NAME_DEFAULT_TASK_SCHEDULE_TO_START_TIMEOUT = "defaultTaskScheduleToStartTimeout";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TASK_SCHEDULE_TO_START_TIMEOUT)
  private String defaultTaskScheduleToStartTimeout;

  public static final String SERIALIZED_NAME_DEFAULT_TASK_SCHEDULE_TO_CLOSE_TIMEOUT = "defaultTaskScheduleToCloseTimeout";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TASK_SCHEDULE_TO_CLOSE_TIMEOUT)
  private String defaultTaskScheduleToCloseTimeout;

  public RegisterActivityTypeInput() {
  }

  public RegisterActivityTypeInput domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public RegisterActivityTypeInput name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RegisterActivityTypeInput version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public RegisterActivityTypeInput description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RegisterActivityTypeInput defaultTaskStartToCloseTimeout(String defaultTaskStartToCloseTimeout) {
    this.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout;
    return this;
  }

  /**
   * Get defaultTaskStartToCloseTimeout
   * @return defaultTaskStartToCloseTimeout
   */
  @javax.annotation.Nullable
  public String getDefaultTaskStartToCloseTimeout() {
    return defaultTaskStartToCloseTimeout;
  }

  public void setDefaultTaskStartToCloseTimeout(String defaultTaskStartToCloseTimeout) {
    this.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout;
  }


  public RegisterActivityTypeInput defaultTaskHeartbeatTimeout(String defaultTaskHeartbeatTimeout) {
    this.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout;
    return this;
  }

  /**
   * Get defaultTaskHeartbeatTimeout
   * @return defaultTaskHeartbeatTimeout
   */
  @javax.annotation.Nullable
  public String getDefaultTaskHeartbeatTimeout() {
    return defaultTaskHeartbeatTimeout;
  }

  public void setDefaultTaskHeartbeatTimeout(String defaultTaskHeartbeatTimeout) {
    this.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout;
  }


  public RegisterActivityTypeInput defaultTaskList(RegisterActivityTypeInputDefaultTaskList defaultTaskList) {
    this.defaultTaskList = defaultTaskList;
    return this;
  }

  /**
   * Get defaultTaskList
   * @return defaultTaskList
   */
  @javax.annotation.Nullable
  public RegisterActivityTypeInputDefaultTaskList getDefaultTaskList() {
    return defaultTaskList;
  }

  public void setDefaultTaskList(RegisterActivityTypeInputDefaultTaskList defaultTaskList) {
    this.defaultTaskList = defaultTaskList;
  }


  public RegisterActivityTypeInput defaultTaskPriority(String defaultTaskPriority) {
    this.defaultTaskPriority = defaultTaskPriority;
    return this;
  }

  /**
   * Get defaultTaskPriority
   * @return defaultTaskPriority
   */
  @javax.annotation.Nullable
  public String getDefaultTaskPriority() {
    return defaultTaskPriority;
  }

  public void setDefaultTaskPriority(String defaultTaskPriority) {
    this.defaultTaskPriority = defaultTaskPriority;
  }


  public RegisterActivityTypeInput defaultTaskScheduleToStartTimeout(String defaultTaskScheduleToStartTimeout) {
    this.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout;
    return this;
  }

  /**
   * Get defaultTaskScheduleToStartTimeout
   * @return defaultTaskScheduleToStartTimeout
   */
  @javax.annotation.Nullable
  public String getDefaultTaskScheduleToStartTimeout() {
    return defaultTaskScheduleToStartTimeout;
  }

  public void setDefaultTaskScheduleToStartTimeout(String defaultTaskScheduleToStartTimeout) {
    this.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout;
  }


  public RegisterActivityTypeInput defaultTaskScheduleToCloseTimeout(String defaultTaskScheduleToCloseTimeout) {
    this.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout;
    return this;
  }

  /**
   * Get defaultTaskScheduleToCloseTimeout
   * @return defaultTaskScheduleToCloseTimeout
   */
  @javax.annotation.Nullable
  public String getDefaultTaskScheduleToCloseTimeout() {
    return defaultTaskScheduleToCloseTimeout;
  }

  public void setDefaultTaskScheduleToCloseTimeout(String defaultTaskScheduleToCloseTimeout) {
    this.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterActivityTypeInput registerActivityTypeInput = (RegisterActivityTypeInput) o;
    return Objects.equals(this.domain, registerActivityTypeInput.domain) &&
        Objects.equals(this.name, registerActivityTypeInput.name) &&
        Objects.equals(this.version, registerActivityTypeInput.version) &&
        Objects.equals(this.description, registerActivityTypeInput.description) &&
        Objects.equals(this.defaultTaskStartToCloseTimeout, registerActivityTypeInput.defaultTaskStartToCloseTimeout) &&
        Objects.equals(this.defaultTaskHeartbeatTimeout, registerActivityTypeInput.defaultTaskHeartbeatTimeout) &&
        Objects.equals(this.defaultTaskList, registerActivityTypeInput.defaultTaskList) &&
        Objects.equals(this.defaultTaskPriority, registerActivityTypeInput.defaultTaskPriority) &&
        Objects.equals(this.defaultTaskScheduleToStartTimeout, registerActivityTypeInput.defaultTaskScheduleToStartTimeout) &&
        Objects.equals(this.defaultTaskScheduleToCloseTimeout, registerActivityTypeInput.defaultTaskScheduleToCloseTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, name, version, description, defaultTaskStartToCloseTimeout, defaultTaskHeartbeatTimeout, defaultTaskList, defaultTaskPriority, defaultTaskScheduleToStartTimeout, defaultTaskScheduleToCloseTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterActivityTypeInput {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    defaultTaskStartToCloseTimeout: ").append(toIndentedString(defaultTaskStartToCloseTimeout)).append("\n");
    sb.append("    defaultTaskHeartbeatTimeout: ").append(toIndentedString(defaultTaskHeartbeatTimeout)).append("\n");
    sb.append("    defaultTaskList: ").append(toIndentedString(defaultTaskList)).append("\n");
    sb.append("    defaultTaskPriority: ").append(toIndentedString(defaultTaskPriority)).append("\n");
    sb.append("    defaultTaskScheduleToStartTimeout: ").append(toIndentedString(defaultTaskScheduleToStartTimeout)).append("\n");
    sb.append("    defaultTaskScheduleToCloseTimeout: ").append(toIndentedString(defaultTaskScheduleToCloseTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("name");
    openapiFields.add("version");
    openapiFields.add("description");
    openapiFields.add("defaultTaskStartToCloseTimeout");
    openapiFields.add("defaultTaskHeartbeatTimeout");
    openapiFields.add("defaultTaskList");
    openapiFields.add("defaultTaskPriority");
    openapiFields.add("defaultTaskScheduleToStartTimeout");
    openapiFields.add("defaultTaskScheduleToCloseTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("version");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterActivityTypeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterActivityTypeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterActivityTypeInput is not found in the empty JSON string", RegisterActivityTypeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterActivityTypeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterActivityTypeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterActivityTypeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `domain`
      String.validateJsonElement(jsonObj.get("domain"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `version`
      String.validateJsonElement(jsonObj.get("version"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `defaultTaskStartToCloseTimeout`
      if (jsonObj.get("defaultTaskStartToCloseTimeout") != null && !jsonObj.get("defaultTaskStartToCloseTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultTaskStartToCloseTimeout"));
      }
      // validate the optional field `defaultTaskHeartbeatTimeout`
      if (jsonObj.get("defaultTaskHeartbeatTimeout") != null && !jsonObj.get("defaultTaskHeartbeatTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultTaskHeartbeatTimeout"));
      }
      // validate the optional field `defaultTaskList`
      if (jsonObj.get("defaultTaskList") != null && !jsonObj.get("defaultTaskList").isJsonNull()) {
        RegisterActivityTypeInputDefaultTaskList.validateJsonElement(jsonObj.get("defaultTaskList"));
      }
      // validate the optional field `defaultTaskPriority`
      if (jsonObj.get("defaultTaskPriority") != null && !jsonObj.get("defaultTaskPriority").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultTaskPriority"));
      }
      // validate the optional field `defaultTaskScheduleToStartTimeout`
      if (jsonObj.get("defaultTaskScheduleToStartTimeout") != null && !jsonObj.get("defaultTaskScheduleToStartTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultTaskScheduleToStartTimeout"));
      }
      // validate the optional field `defaultTaskScheduleToCloseTimeout`
      if (jsonObj.get("defaultTaskScheduleToCloseTimeout") != null && !jsonObj.get("defaultTaskScheduleToCloseTimeout").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultTaskScheduleToCloseTimeout"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterActivityTypeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterActivityTypeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterActivityTypeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterActivityTypeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterActivityTypeInput>() {
           @Override
           public void write(JsonWriter out, RegisterActivityTypeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterActivityTypeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterActivityTypeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterActivityTypeInput
   * @throws IOException if the JSON string is invalid with respect to RegisterActivityTypeInput
   */
  public static RegisterActivityTypeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterActivityTypeInput.class);
  }

  /**
   * Convert an instance of RegisterActivityTypeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

